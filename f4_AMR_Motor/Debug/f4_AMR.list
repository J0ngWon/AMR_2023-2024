
f4_AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c148  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800c318  0800c318  0001c318  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c968  0800c968  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800c968  0800c968  0001c968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c970  0800c970  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c970  0800c970  0001c970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c974  0800c974  0001c974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800c978  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000220  0800cb98  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  0800cb98  000207fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f363  00000000  00000000  00020293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002240  00000000  00000000  0002f5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00031838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2a  00000000  00000000  00032680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e99  00000000  00000000  000331aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ac2  00000000  00000000  00056043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c82  00000000  00000000  00066b05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054bc  00000000  00000000  0013a788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0013fc44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c300 	.word	0x0800c300

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800c300 	.word	0x0800c300

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ffc2 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d106      	bne.n	80010e4 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80010d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010da:	2201      	movs	r2, #1
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <__io_putchar+0x34>)
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <__io_putchar+0x38>)
 80010e0:	f004 fb5c 	bl	800579c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80010e4:	1d39      	adds	r1, r7, #4
 80010e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ea:	2201      	movs	r2, #1
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <__io_putchar+0x38>)
 80010ee:	f004 fb55 	bl	800579c <HAL_UART_Transmit>
	return ch;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800c318 	.word	0x0800c318
 8001100:	200003a4 	.word	0x200003a4
 8001104:	00000000 	.word	0x00000000

08001108 <radiansToDegrees>:
/******************** Time *********************/
extern volatile uint32_t msTicks;
uint32_t time=0;

/******************** O.W *********************/
float radiansToDegrees(float radians) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	ed87 0a01 	vstr	s0, [r7, #4]
	return radians * (180.0 / M_PI);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fa38 	bl	8000588 <__aeabi_f2d>
 8001118:	a309      	add	r3, pc, #36	; (adr r3, 8001140 <radiansToDegrees+0x38>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa8b 	bl	8000638 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd7d 	bl	8000c28 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	1a63c1f8 	.word	0x1a63c1f8
 8001144:	404ca5dc 	.word	0x404ca5dc

08001148 <angleToPulse>:

uint16_t angleToPulse(uint8_t angle) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	return (MIN_PULSE + (MAX_PULSE - MIN_PULSE) * (angle * 0.55555556) / 180);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fa05 	bl	8000564 <__aeabi_i2d>
 800115a:	a319      	add	r3, pc, #100	; (adr r3, 80011c0 <angleToPulse+0x78>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa6a 	bl	8000638 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	a316      	add	r3, pc, #88	; (adr r3, 80011c8 <angleToPulse+0x80>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fa61 	bl	8000638 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <angleToPulse+0x70>)
 8001184:	f7ff fb82 	bl	800088c <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <angleToPulse+0x74>)
 8001196:	f7ff f899 	bl	80002cc <__adddf3>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fd21 	bl	8000be8 <__aeabi_d2uiz>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29b      	uxth	r3, r3
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	40668000 	.word	0x40668000
 80011bc:	407f4000 	.word	0x407f4000
 80011c0:	7429f36e 	.word	0x7429f36e
 80011c4:	3fe1c71c 	.word	0x3fe1c71c
 80011c8:	00000000 	.word	0x00000000
 80011cc:	40ab5800 	.word	0x40ab5800

080011d0 <limitAngle>:

uint8_t limitAngle(uint8_t angle, uint8_t minAngle, uint8_t maxAngle) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	460b      	mov	r3, r1
 80011dc:	71bb      	strb	r3, [r7, #6]
 80011de:	4613      	mov	r3, r2
 80011e0:	717b      	strb	r3, [r7, #5]
	if (angle <= minAngle) return minAngle;
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d801      	bhi.n	80011ee <limitAngle+0x1e>
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	e006      	b.n	80011fc <limitAngle+0x2c>
	if (angle >= maxAngle) return maxAngle;
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	797b      	ldrb	r3, [r7, #5]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d301      	bcc.n	80011fa <limitAngle+0x2a>
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	e000      	b.n	80011fc <limitAngle+0x2c>
	return angle;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <setMotorAngle>:

void setMotorAngle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle, uint8_t minAngle, uint8_t maxAngle) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	460b      	mov	r3, r1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	4613      	mov	r3, r2
 800121c:	71bb      	strb	r3, [r7, #6]
	uint8_t limitedAngle = limitAngle(angle, minAngle, maxAngle);
 800121e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001222:	79b9      	ldrb	r1, [r7, #6]
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffd2 	bl	80011d0 <limitAngle>
 800122c:	4603      	mov	r3, r0
 800122e:	75fb      	strb	r3, [r7, #23]
	uint16_t pulse = angleToPulse(limitedAngle);
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff88 	bl	8001148 <angleToPulse>
 8001238:	4603      	mov	r3, r0
 800123a:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d104      	bne.n	800124c <setMotorAngle+0x44>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	8aba      	ldrh	r2, [r7, #20]
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
}
 800124a:	e013      	b.n	8001274 <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b04      	cmp	r3, #4
 8001250:	d104      	bne.n	800125c <setMotorAngle+0x54>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	8abb      	ldrh	r3, [r7, #20]
 8001258:	6393      	str	r3, [r2, #56]	; 0x38
}
 800125a:	e00b      	b.n	8001274 <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b08      	cmp	r3, #8
 8001260:	d104      	bne.n	800126c <setMotorAngle+0x64>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	8abb      	ldrh	r3, [r7, #20]
 8001268:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800126a:	e003      	b.n	8001274 <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	8abb      	ldrh	r3, [r7, #20]
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	0000      	movs	r0, r0
	...

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001284:	b092      	sub	sp, #72	; 0x48
 8001286:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001288:	f002 f836 	bl	80032f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800128c:	f000 fcbe 	bl	8001c0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001290:	f000 ff74 	bl	800217c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001294:	f000 ff48 	bl	8002128 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001298:	f000 fd26 	bl	8001ce8 <MX_TIM2_Init>
  MX_TIM3_Init();
 800129c:	f000 fd9a 	bl	8001dd4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012a0:	f000 fe1a 	bl	8001ed8 <MX_TIM4_Init>
  MX_TIM14_Init();
 80012a4:	f000 fef2 	bl	800208c <MX_TIM14_Init>
  MX_TIM5_Init();
 80012a8:	f000 fe8c 	bl	8001fc4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, shield_power_Pin, GPIO_PIN_SET);
 80012ac:	2201      	movs	r2, #1
 80012ae:	2140      	movs	r1, #64	; 0x40
 80012b0:	48b2      	ldr	r0, [pc, #712]	; (800157c <main+0x2fc>)
 80012b2:	f002 fbe3 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 80012b6:	48b2      	ldr	r0, [pc, #712]	; (8001580 <main+0x300>)
 80012b8:	f003 fa4a 	bl	8004750 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012bc:	2108      	movs	r1, #8
 80012be:	48b0      	ldr	r0, [pc, #704]	; (8001580 <main+0x300>)
 80012c0:	f003 fb06 	bl	80048d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012c4:	2100      	movs	r1, #0
 80012c6:	48af      	ldr	r0, [pc, #700]	; (8001584 <main+0x304>)
 80012c8:	f003 fb02 	bl	80048d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012cc:	2104      	movs	r1, #4
 80012ce:	48ad      	ldr	r0, [pc, #692]	; (8001584 <main+0x304>)
 80012d0:	f003 fafe 	bl	80048d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012d4:	2100      	movs	r1, #0
 80012d6:	48ac      	ldr	r0, [pc, #688]	; (8001588 <main+0x308>)
 80012d8:	f003 fafa 	bl	80048d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80012dc:	2100      	movs	r1, #0
 80012de:	48ab      	ldr	r0, [pc, #684]	; (800158c <main+0x30c>)
 80012e0:	f003 faf6 	bl	80048d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80012e4:	2100      	movs	r1, #0
 80012e6:	48aa      	ldr	r0, [pc, #680]	; (8001590 <main+0x310>)
 80012e8:	f003 faf2 	bl	80048d0 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80012ec:	2104      	movs	r1, #4
 80012ee:	48a8      	ldr	r0, [pc, #672]	; (8001590 <main+0x310>)
 80012f0:	f003 faee 	bl	80048d0 <HAL_TIM_PWM_Start>

	motorControl(control_1, control_2);
 80012f4:	4ba7      	ldr	r3, [pc, #668]	; (8001594 <main+0x314>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4aa7      	ldr	r2, [pc, #668]	; (8001598 <main+0x318>)
 80012fa:	6812      	ldr	r2, [r2, #0]
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f001 f94c 	bl	800259c <motorControl>
	motorControl_r(control_1_r, control_2_r);
 8001304:	4ba5      	ldr	r3, [pc, #660]	; (800159c <main+0x31c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4aa5      	ldr	r2, [pc, #660]	; (80015a0 <main+0x320>)
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f001 f972 	bl	80025f8 <motorControl_r>
	SystemCoreClockUpdate();
 8001314:	f001 ff46 	bl	80031a4 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 8001318:	4ba2      	ldr	r3, [pc, #648]	; (80015a4 <main+0x324>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4aa2      	ldr	r2, [pc, #648]	; (80015a8 <main+0x328>)
 800131e:	fba2 2303 	umull	r2, r3, r2, r3
 8001322:	099b      	lsrs	r3, r3, #6
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fead 	bl	8001084 <SysTick_Config>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rx_data, 1);
 800132a:	2201      	movs	r2, #1
 800132c:	499f      	ldr	r1, [pc, #636]	; (80015ac <main+0x32c>)
 800132e:	48a0      	ldr	r0, [pc, #640]	; (80015b0 <main+0x330>)
 8001330:	f004 fabf 	bl	80058b2 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		motorControl(control_1, control_2);
 8001334:	4b97      	ldr	r3, [pc, #604]	; (8001594 <main+0x314>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a97      	ldr	r2, [pc, #604]	; (8001598 <main+0x318>)
 800133a:	6812      	ldr	r2, [r2, #0]
 800133c:	4611      	mov	r1, r2
 800133e:	4618      	mov	r0, r3
 8001340:	f001 f92c 	bl	800259c <motorControl>
		motorControl_r(control_1_r, control_2_r);
 8001344:	4b95      	ldr	r3, [pc, #596]	; (800159c <main+0x31c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a95      	ldr	r2, [pc, #596]	; (80015a0 <main+0x320>)
 800134a:	6812      	ldr	r2, [r2, #0]
 800134c:	4611      	mov	r1, r2
 800134e:	4618      	mov	r0, r3
 8001350:	f001 f952 	bl	80025f8 <motorControl_r>
		//Pwm_Left(50);
		//Pwm_Right(50);

		Pwm_Left(abs(speed));
 8001354:	4b97      	ldr	r3, [pc, #604]	; (80015b4 <main+0x334>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800135e:	ee17 3a90 	vmov	r3, s15
 8001362:	2b00      	cmp	r3, #0
 8001364:	bfb8      	it	lt
 8001366:	425b      	neglt	r3, r3
 8001368:	4618      	mov	r0, r3
 800136a:	f000 ffc3 	bl	80022f4 <Pwm_Left>
		Pwm_Right(abs(speed_r));
 800136e:	4b92      	ldr	r3, [pc, #584]	; (80015b8 <main+0x338>)
 8001370:	edd3 7a00 	vldr	s15, [r3]
 8001374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001378:	ee17 3a90 	vmov	r3, s15
 800137c:	2b00      	cmp	r3, #0
 800137e:	bfb8      	it	lt
 8001380:	425b      	neglt	r3, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 ffc6 	bl	8002314 <Pwm_Right>


		/******************** Dead Reckoning ***********************/
		if(msTicks>=39){
 8001388:	4b8c      	ldr	r3, [pc, #560]	; (80015bc <main+0x33c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b26      	cmp	r3, #38	; 0x26
 800138e:	d9d1      	bls.n	8001334 <main+0xb4>
			time=msTicks;
 8001390:	4b8a      	ldr	r3, [pc, #552]	; (80015bc <main+0x33c>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a8a      	ldr	r2, [pc, #552]	; (80015c0 <main+0x340>)
 8001396:	6013      	str	r3, [r2, #0]
			current_angle = ((rpm_encoderCount - pr_encoderCount) * angle);
 8001398:	4b8a      	ldr	r3, [pc, #552]	; (80015c4 <main+0x344>)
 800139a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800139e:	4b8a      	ldr	r3, [pc, #552]	; (80015c8 <main+0x348>)
 80013a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a4:	1a84      	subs	r4, r0, r2
 80013a6:	61bc      	str	r4, [r7, #24]
 80013a8:	eb61 0303 	sbc.w	r3, r1, r3
 80013ac:	61fb      	str	r3, [r7, #28]
 80013ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013b2:	f7ff f913 	bl	80005dc <__aeabi_l2d>
 80013b6:	4b85      	ldr	r3, [pc, #532]	; (80015cc <main+0x34c>)
 80013b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013bc:	f7ff f93c 	bl	8000638 <__aeabi_dmul>
 80013c0:	4602      	mov	r2, r0
 80013c2:	460b      	mov	r3, r1
 80013c4:	4982      	ldr	r1, [pc, #520]	; (80015d0 <main+0x350>)
 80013c6:	e9c1 2300 	strd	r2, r3, [r1]
			current_angle_r = ((rpm_encoderCount_r - pr_encoderCount_r) * angle);
 80013ca:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <main+0x354>)
 80013cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d0:	4b81      	ldr	r3, [pc, #516]	; (80015d8 <main+0x358>)
 80013d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d6:	1a84      	subs	r4, r0, r2
 80013d8:	613c      	str	r4, [r7, #16]
 80013da:	eb61 0303 	sbc.w	r3, r1, r3
 80013de:	617b      	str	r3, [r7, #20]
 80013e0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80013e4:	f7ff f8fa 	bl	80005dc <__aeabi_l2d>
 80013e8:	4b78      	ldr	r3, [pc, #480]	; (80015cc <main+0x34c>)
 80013ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ee:	f7ff f923 	bl	8000638 <__aeabi_dmul>
 80013f2:	4602      	mov	r2, r0
 80013f4:	460b      	mov	r3, r1
 80013f6:	4979      	ldr	r1, [pc, #484]	; (80015dc <main+0x35c>)
 80013f8:	e9c1 2300 	strd	r2, r3, [r1]

			pr_encoderCount=rpm_encoderCount;
 80013fc:	4b71      	ldr	r3, [pc, #452]	; (80015c4 <main+0x344>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	4971      	ldr	r1, [pc, #452]	; (80015c8 <main+0x348>)
 8001404:	e9c1 2300 	strd	r2, r3, [r1]
			pr_encoderCount_r=rpm_encoderCount_r;
 8001408:	4b72      	ldr	r3, [pc, #456]	; (80015d4 <main+0x354>)
 800140a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140e:	4972      	ldr	r1, [pc, #456]	; (80015d8 <main+0x358>)
 8001410:	e9c1 2300 	strd	r2, r3, [r1]

			delta_s = ((current_angle_r + current_angle) * rr) / 2;
 8001414:	4b71      	ldr	r3, [pc, #452]	; (80015dc <main+0x35c>)
 8001416:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141a:	4b6d      	ldr	r3, [pc, #436]	; (80015d0 <main+0x350>)
 800141c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001420:	f7fe ff54 	bl	80002cc <__adddf3>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	4b6c      	ldr	r3, [pc, #432]	; (80015e0 <main+0x360>)
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	f7ff f901 	bl	8000638 <__aeabi_dmul>
 8001436:	4602      	mov	r2, r0
 8001438:	460b      	mov	r3, r1
 800143a:	4610      	mov	r0, r2
 800143c:	4619      	mov	r1, r3
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001446:	f7ff fa21 	bl	800088c <__aeabi_ddiv>
 800144a:	4602      	mov	r2, r0
 800144c:	460b      	mov	r3, r1
 800144e:	4965      	ldr	r1, [pc, #404]	; (80015e4 <main+0x364>)
 8001450:	e9c1 2300 	strd	r2, r3, [r1]
			delta_o = ((current_angle_r - current_angle) * rr) / ll;
 8001454:	4b61      	ldr	r3, [pc, #388]	; (80015dc <main+0x35c>)
 8001456:	e9d3 0100 	ldrd	r0, r1, [r3]
 800145a:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <main+0x350>)
 800145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001460:	f7fe ff32 	bl	80002c8 <__aeabi_dsub>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4610      	mov	r0, r2
 800146a:	4619      	mov	r1, r3
 800146c:	4b5c      	ldr	r3, [pc, #368]	; (80015e0 <main+0x360>)
 800146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001472:	f7ff f8e1 	bl	8000638 <__aeabi_dmul>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4610      	mov	r0, r2
 800147c:	4619      	mov	r1, r3
 800147e:	4b5a      	ldr	r3, [pc, #360]	; (80015e8 <main+0x368>)
 8001480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001484:	f7ff fa02 	bl	800088c <__aeabi_ddiv>
 8001488:	4602      	mov	r2, r0
 800148a:	460b      	mov	r3, r1
 800148c:	4957      	ldr	r1, [pc, #348]	; (80015ec <main+0x36c>)
 800148e:	e9c1 2300 	strd	r2, r3, [r1]
			input_delta_o = previous_car_angle + (delta_o / 2);
 8001492:	4b56      	ldr	r3, [pc, #344]	; (80015ec <main+0x36c>)
 8001494:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a0:	f7ff f9f4 	bl	800088c <__aeabi_ddiv>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	4b50      	ldr	r3, [pc, #320]	; (80015f0 <main+0x370>)
 80014ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b2:	f7fe ff0b 	bl	80002cc <__adddf3>
 80014b6:	4602      	mov	r2, r0
 80014b8:	460b      	mov	r3, r1
 80014ba:	494e      	ldr	r1, [pc, #312]	; (80015f4 <main+0x374>)
 80014bc:	e9c1 2300 	strd	r2, r3, [r1]

			current_x = previous_current_x + cos((input_delta_o)) * delta_s;
 80014c0:	4b4c      	ldr	r3, [pc, #304]	; (80015f4 <main+0x374>)
 80014c2:	ed93 7b00 	vldr	d7, [r3]
 80014c6:	eeb0 0a47 	vmov.f32	s0, s14
 80014ca:	eef0 0a67 	vmov.f32	s1, s15
 80014ce:	f009 fda7 	bl	800b020 <cos>
 80014d2:	ec51 0b10 	vmov	r0, r1, d0
 80014d6:	4b43      	ldr	r3, [pc, #268]	; (80015e4 <main+0x364>)
 80014d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014dc:	f7ff f8ac 	bl	8000638 <__aeabi_dmul>
 80014e0:	4602      	mov	r2, r0
 80014e2:	460b      	mov	r3, r1
 80014e4:	4610      	mov	r0, r2
 80014e6:	4619      	mov	r1, r3
 80014e8:	4b43      	ldr	r3, [pc, #268]	; (80015f8 <main+0x378>)
 80014ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ee:	f7fe feed 	bl	80002cc <__adddf3>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	4941      	ldr	r1, [pc, #260]	; (80015fc <main+0x37c>)
 80014f8:	e9c1 2300 	strd	r2, r3, [r1]
			current_y = previous_current_y + sin((input_delta_o)) * delta_s;
 80014fc:	4b3d      	ldr	r3, [pc, #244]	; (80015f4 <main+0x374>)
 80014fe:	ed93 7b00 	vldr	d7, [r3]
 8001502:	eeb0 0a47 	vmov.f32	s0, s14
 8001506:	eef0 0a67 	vmov.f32	s1, s15
 800150a:	f009 fddd 	bl	800b0c8 <sin>
 800150e:	ec51 0b10 	vmov	r0, r1, d0
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <main+0x364>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f88e 	bl	8000638 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4610      	mov	r0, r2
 8001522:	4619      	mov	r1, r3
 8001524:	4b36      	ldr	r3, [pc, #216]	; (8001600 <main+0x380>)
 8001526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152a:	f7fe fecf 	bl	80002cc <__adddf3>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4934      	ldr	r1, [pc, #208]	; (8001604 <main+0x384>)
 8001534:	e9c1 2300 	strd	r2, r3, [r1]
			car_angle = previous_car_angle + delta_o;
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <main+0x370>)
 800153a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800153e:	4b2b      	ldr	r3, [pc, #172]	; (80015ec <main+0x36c>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7fe fec2 	bl	80002cc <__adddf3>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	492e      	ldr	r1, [pc, #184]	; (8001608 <main+0x388>)
 800154e:	e9c1 2300 	strd	r2, r3, [r1]

			pid_delta_o = delta_o;
 8001552:	4b26      	ldr	r3, [pc, #152]	; (80015ec <main+0x36c>)
 8001554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001558:	492c      	ldr	r1, [pc, #176]	; (800160c <main+0x38c>)
 800155a:	e9c1 2300 	strd	r2, r3, [r1]
			dt = time;
 800155e:	4b18      	ldr	r3, [pc, #96]	; (80015c0 <main+0x340>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f7fe ffee 	bl	8000544 <__aeabi_ui2d>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4928      	ldr	r1, [pc, #160]	; (8001610 <main+0x390>)
 800156e:	e9c1 2300 	strd	r2, r3, [r1]
			topic_x += (current_x - previous_current_x);
 8001572:	4b22      	ldr	r3, [pc, #136]	; (80015fc <main+0x37c>)
 8001574:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001578:	e04c      	b.n	8001614 <main+0x394>
 800157a:	bf00      	nop
 800157c:	40020000 	.word	0x40020000
 8001580:	2000023c 	.word	0x2000023c
 8001584:	20000284 	.word	0x20000284
 8001588:	200002cc 	.word	0x200002cc
 800158c:	2000035c 	.word	0x2000035c
 8001590:	20000314 	.word	0x20000314
 8001594:	200004f8 	.word	0x200004f8
 8001598:	20000030 	.word	0x20000030
 800159c:	20000034 	.word	0x20000034
 80015a0:	200004fc 	.word	0x200004fc
 80015a4:	20000038 	.word	0x20000038
 80015a8:	10624dd3 	.word	0x10624dd3
 80015ac:	20000608 	.word	0x20000608
 80015b0:	200003a4 	.word	0x200003a4
 80015b4:	20000438 	.word	0x20000438
 80015b8:	2000043c 	.word	0x2000043c
 80015bc:	200006a4 	.word	0x200006a4
 80015c0:	200006a0 	.word	0x200006a0
 80015c4:	20000408 	.word	0x20000408
 80015c8:	20000418 	.word	0x20000418
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000428 	.word	0x20000428
 80015d4:	20000410 	.word	0x20000410
 80015d8:	20000420 	.word	0x20000420
 80015dc:	20000430 	.word	0x20000430
 80015e0:	20000028 	.word	0x20000028
 80015e4:	200004c8 	.word	0x200004c8
 80015e8:	20000020 	.word	0x20000020
 80015ec:	200004d0 	.word	0x200004d0
 80015f0:	200004b0 	.word	0x200004b0
 80015f4:	200004e8 	.word	0x200004e8
 80015f8:	200004b8 	.word	0x200004b8
 80015fc:	20000488 	.word	0x20000488
 8001600:	200004c0 	.word	0x200004c0
 8001604:	20000490 	.word	0x20000490
 8001608:	20000480 	.word	0x20000480
 800160c:	200004f0 	.word	0x200004f0
 8001610:	20000678 	.word	0x20000678
 8001614:	4ba9      	ldr	r3, [pc, #676]	; (80018bc <main+0x63c>)
 8001616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161a:	f7fe fe55 	bl	80002c8 <__aeabi_dsub>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	4610      	mov	r0, r2
 8001624:	4619      	mov	r1, r3
 8001626:	4ba6      	ldr	r3, [pc, #664]	; (80018c0 <main+0x640>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe fe4e 	bl	80002cc <__adddf3>
 8001630:	4602      	mov	r2, r0
 8001632:	460b      	mov	r3, r1
 8001634:	49a2      	ldr	r1, [pc, #648]	; (80018c0 <main+0x640>)
 8001636:	e9c1 2300 	strd	r2, r3, [r1]
			topic_y += (current_y - previous_current_y);
 800163a:	4ba2      	ldr	r3, [pc, #648]	; (80018c4 <main+0x644>)
 800163c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001640:	4ba1      	ldr	r3, [pc, #644]	; (80018c8 <main+0x648>)
 8001642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001646:	f7fe fe3f 	bl	80002c8 <__aeabi_dsub>
 800164a:	4602      	mov	r2, r0
 800164c:	460b      	mov	r3, r1
 800164e:	4610      	mov	r0, r2
 8001650:	4619      	mov	r1, r3
 8001652:	4b9e      	ldr	r3, [pc, #632]	; (80018cc <main+0x64c>)
 8001654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001658:	f7fe fe38 	bl	80002cc <__adddf3>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	499a      	ldr	r1, [pc, #616]	; (80018cc <main+0x64c>)
 8001662:	e9c1 2300 	strd	r2, r3, [r1]
			topic_th = (car_angle - previous_car_angle)*1000/dt;
 8001666:	4b9a      	ldr	r3, [pc, #616]	; (80018d0 <main+0x650>)
 8001668:	e9d3 0100 	ldrd	r0, r1, [r3]
 800166c:	4b99      	ldr	r3, [pc, #612]	; (80018d4 <main+0x654>)
 800166e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001672:	f7fe fe29 	bl	80002c8 <__aeabi_dsub>
 8001676:	4602      	mov	r2, r0
 8001678:	460b      	mov	r3, r1
 800167a:	4610      	mov	r0, r2
 800167c:	4619      	mov	r1, r3
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b95      	ldr	r3, [pc, #596]	; (80018d8 <main+0x658>)
 8001684:	f7fe ffd8 	bl	8000638 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	4b92      	ldr	r3, [pc, #584]	; (80018dc <main+0x65c>)
 8001692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001696:	f7ff f8f9 	bl	800088c <__aeabi_ddiv>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4990      	ldr	r1, [pc, #576]	; (80018e0 <main+0x660>)
 80016a0:	e9c1 2300 	strd	r2, r3, [r1]
			topic_vx = (current_x - previous_current_x)*1000/dt;
 80016a4:	4b8f      	ldr	r3, [pc, #572]	; (80018e4 <main+0x664>)
 80016a6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016aa:	4b84      	ldr	r3, [pc, #528]	; (80018bc <main+0x63c>)
 80016ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b0:	f7fe fe0a 	bl	80002c8 <__aeabi_dsub>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	4610      	mov	r0, r2
 80016ba:	4619      	mov	r1, r3
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	4b85      	ldr	r3, [pc, #532]	; (80018d8 <main+0x658>)
 80016c2:	f7fe ffb9 	bl	8000638 <__aeabi_dmul>
 80016c6:	4602      	mov	r2, r0
 80016c8:	460b      	mov	r3, r1
 80016ca:	4610      	mov	r0, r2
 80016cc:	4619      	mov	r1, r3
 80016ce:	4b83      	ldr	r3, [pc, #524]	; (80018dc <main+0x65c>)
 80016d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d4:	f7ff f8da 	bl	800088c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4982      	ldr	r1, [pc, #520]	; (80018e8 <main+0x668>)
 80016de:	e9c1 2300 	strd	r2, r3, [r1]
			topic_vy = (current_y - previous_current_y)*1000/dt;
 80016e2:	4b78      	ldr	r3, [pc, #480]	; (80018c4 <main+0x644>)
 80016e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e8:	4b77      	ldr	r3, [pc, #476]	; (80018c8 <main+0x648>)
 80016ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ee:	f7fe fdeb 	bl	80002c8 <__aeabi_dsub>
 80016f2:	4602      	mov	r2, r0
 80016f4:	460b      	mov	r3, r1
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	4b76      	ldr	r3, [pc, #472]	; (80018d8 <main+0x658>)
 8001700:	f7fe ff9a 	bl	8000638 <__aeabi_dmul>
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	4610      	mov	r0, r2
 800170a:	4619      	mov	r1, r3
 800170c:	4b73      	ldr	r3, [pc, #460]	; (80018dc <main+0x65c>)
 800170e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001712:	f7ff f8bb 	bl	800088c <__aeabi_ddiv>
 8001716:	4602      	mov	r2, r0
 8001718:	460b      	mov	r3, r1
 800171a:	4974      	ldr	r1, [pc, #464]	; (80018ec <main+0x66c>)
 800171c:	e9c1 2300 	strd	r2, r3, [r1]


			printf("1 %f %f %f %f %f %f \n",topic_x,topic_y,topic_th,dt,topic_vx,topic_vy);
 8001720:	4b67      	ldr	r3, [pc, #412]	; (80018c0 <main+0x640>)
 8001722:	ed93 7b00 	vldr	d7, [r3]
 8001726:	ed87 7b02 	vstr	d7, [r7, #8]
 800172a:	4b68      	ldr	r3, [pc, #416]	; (80018cc <main+0x64c>)
 800172c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001730:	4b6b      	ldr	r3, [pc, #428]	; (80018e0 <main+0x660>)
 8001732:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001736:	4b69      	ldr	r3, [pc, #420]	; (80018dc <main+0x65c>)
 8001738:	e9d3 8900 	ldrd	r8, r9, [r3]
 800173c:	4b6a      	ldr	r3, [pc, #424]	; (80018e8 <main+0x668>)
 800173e:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001742:	4b6a      	ldr	r3, [pc, #424]	; (80018ec <main+0x66c>)
 8001744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001748:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800174c:	e9cd ab06 	strd	sl, fp, [sp, #24]
 8001750:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8001754:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8001758:	e9cd 0100 	strd	r0, r1, [sp]
 800175c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001760:	4863      	ldr	r0, [pc, #396]	; (80018f0 <main+0x670>)
 8001762:	f006 fd7b 	bl	800825c <iprintf>
			printf("2 %f %f %f %f %f %f \n", motor_degree[0], motor_degree[1], motor_degree[2], motor_degree[3], motor_degree[4], motor_degree[5]);
 8001766:	4b63      	ldr	r3, [pc, #396]	; (80018f4 <main+0x674>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe ff0c 	bl	8000588 <__aeabi_f2d>
 8001770:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001774:	4b5f      	ldr	r3, [pc, #380]	; (80018f4 <main+0x674>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4618      	mov	r0, r3
 800177a:	f7fe ff05 	bl	8000588 <__aeabi_f2d>
 800177e:	4682      	mov	sl, r0
 8001780:	468b      	mov	fp, r1
 8001782:	4b5c      	ldr	r3, [pc, #368]	; (80018f4 <main+0x674>)
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fefe 	bl	8000588 <__aeabi_f2d>
 800178c:	e9c7 0100 	strd	r0, r1, [r7]
 8001790:	4b58      	ldr	r3, [pc, #352]	; (80018f4 <main+0x674>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4618      	mov	r0, r3
 8001796:	f7fe fef7 	bl	8000588 <__aeabi_f2d>
 800179a:	4680      	mov	r8, r0
 800179c:	4689      	mov	r9, r1
 800179e:	4b55      	ldr	r3, [pc, #340]	; (80018f4 <main+0x674>)
 80017a0:	691b      	ldr	r3, [r3, #16]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7fe fef0 	bl	8000588 <__aeabi_f2d>
 80017a8:	4604      	mov	r4, r0
 80017aa:	460d      	mov	r5, r1
 80017ac:	4b51      	ldr	r3, [pc, #324]	; (80018f4 <main+0x674>)
 80017ae:	695b      	ldr	r3, [r3, #20]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7fe fee9 	bl	8000588 <__aeabi_f2d>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80017be:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80017c2:	e9cd 8904 	strd	r8, r9, [sp, #16]
 80017c6:	ed97 7b00 	vldr	d7, [r7]
 80017ca:	ed8d 7b02 	vstr	d7, [sp, #8]
 80017ce:	e9cd ab00 	strd	sl, fp, [sp]
 80017d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017d6:	4848      	ldr	r0, [pc, #288]	; (80018f8 <main+0x678>)
 80017d8:	f006 fd40 	bl	800825c <iprintf>
			previous_car_angle = car_angle;
 80017dc:	4b3c      	ldr	r3, [pc, #240]	; (80018d0 <main+0x650>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	493c      	ldr	r1, [pc, #240]	; (80018d4 <main+0x654>)
 80017e4:	e9c1 2300 	strd	r2, r3, [r1]
			previous_current_x = current_x;
 80017e8:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <main+0x664>)
 80017ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ee:	4933      	ldr	r1, [pc, #204]	; (80018bc <main+0x63c>)
 80017f0:	e9c1 2300 	strd	r2, r3, [r1]
			previous_current_y = current_y;
 80017f4:	4b33      	ldr	r3, [pc, #204]	; (80018c4 <main+0x644>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	4933      	ldr	r1, [pc, #204]	; (80018c8 <main+0x648>)
 80017fc:	e9c1 2300 	strd	r2, r3, [r1]

			encoderCount = 0;
 8001800:	493e      	ldr	r1, [pc, #248]	; (80018fc <main+0x67c>)
 8001802:	f04f 0200 	mov.w	r2, #0
 8001806:	f04f 0300 	mov.w	r3, #0
 800180a:	e9c1 2300 	strd	r2, r3, [r1]
			encoderCount_r = 0;
 800180e:	493c      	ldr	r1, [pc, #240]	; (8001900 <main+0x680>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	f04f 0300 	mov.w	r3, #0
 8001818:	e9c1 2300 	strd	r2, r3, [r1]

			last_delta_s = sqrt((current_x - last_x) * (current_x - last_x) + (current_y - last_y) * (current_y - last_y));
 800181c:	4b31      	ldr	r3, [pc, #196]	; (80018e4 <main+0x664>)
 800181e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001822:	4b38      	ldr	r3, [pc, #224]	; (8001904 <main+0x684>)
 8001824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001828:	f7fe fd4e 	bl	80002c8 <__aeabi_dsub>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4614      	mov	r4, r2
 8001832:	461d      	mov	r5, r3
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <main+0x664>)
 8001836:	e9d3 0100 	ldrd	r0, r1, [r3]
 800183a:	4b32      	ldr	r3, [pc, #200]	; (8001904 <main+0x684>)
 800183c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001840:	f7fe fd42 	bl	80002c8 <__aeabi_dsub>
 8001844:	4602      	mov	r2, r0
 8001846:	460b      	mov	r3, r1
 8001848:	4620      	mov	r0, r4
 800184a:	4629      	mov	r1, r5
 800184c:	f7fe fef4 	bl	8000638 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4614      	mov	r4, r2
 8001856:	461d      	mov	r5, r3
 8001858:	4b1a      	ldr	r3, [pc, #104]	; (80018c4 <main+0x644>)
 800185a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800185e:	4b2a      	ldr	r3, [pc, #168]	; (8001908 <main+0x688>)
 8001860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001864:	f7fe fd30 	bl	80002c8 <__aeabi_dsub>
 8001868:	4602      	mov	r2, r0
 800186a:	460b      	mov	r3, r1
 800186c:	4690      	mov	r8, r2
 800186e:	4699      	mov	r9, r3
 8001870:	4b14      	ldr	r3, [pc, #80]	; (80018c4 <main+0x644>)
 8001872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001876:	4b24      	ldr	r3, [pc, #144]	; (8001908 <main+0x688>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7fe fd24 	bl	80002c8 <__aeabi_dsub>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4640      	mov	r0, r8
 8001886:	4649      	mov	r1, r9
 8001888:	f7fe fed6 	bl	8000638 <__aeabi_dmul>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4620      	mov	r0, r4
 8001892:	4629      	mov	r1, r5
 8001894:	f7fe fd1a 	bl	80002cc <__adddf3>
 8001898:	4602      	mov	r2, r0
 800189a:	460b      	mov	r3, r1
 800189c:	ec43 2b17 	vmov	d7, r2, r3
 80018a0:	eeb0 0a47 	vmov.f32	s0, s14
 80018a4:	eef0 0a67 	vmov.f32	s1, s15
 80018a8:	f009 fb8e 	bl	800afc8 <sqrt>
 80018ac:	eeb0 7a40 	vmov.f32	s14, s0
 80018b0:	eef0 7a60 	vmov.f32	s15, s1
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <main+0x68c>)
 80018b6:	ed83 7b00 	vstr	d7, [r3]
 80018ba:	e029      	b.n	8001910 <main+0x690>
 80018bc:	200004b8 	.word	0x200004b8
 80018c0:	20000660 	.word	0x20000660
 80018c4:	20000490 	.word	0x20000490
 80018c8:	200004c0 	.word	0x200004c0
 80018cc:	20000668 	.word	0x20000668
 80018d0:	20000480 	.word	0x20000480
 80018d4:	200004b0 	.word	0x200004b0
 80018d8:	408f4000 	.word	0x408f4000
 80018dc:	20000678 	.word	0x20000678
 80018e0:	20000670 	.word	0x20000670
 80018e4:	20000488 	.word	0x20000488
 80018e8:	20000680 	.word	0x20000680
 80018ec:	20000688 	.word	0x20000688
 80018f0:	0800c31c 	.word	0x0800c31c
 80018f4:	20000644 	.word	0x20000644
 80018f8:	0800c334 	.word	0x0800c334
 80018fc:	200003f8 	.word	0x200003f8
 8001900:	20000400 	.word	0x20000400
 8001904:	20000498 	.word	0x20000498
 8001908:	200004a0 	.word	0x200004a0
 800190c:	200004d8 	.word	0x200004d8
			last_delta_o = (car_angle - last_th);
 8001910:	4b9f      	ldr	r3, [pc, #636]	; (8001b90 <main+0x910>)
 8001912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001916:	4b9f      	ldr	r3, [pc, #636]	; (8001b94 <main+0x914>)
 8001918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191c:	f7fe fcd4 	bl	80002c8 <__aeabi_dsub>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	499c      	ldr	r1, [pc, #624]	; (8001b98 <main+0x918>)
 8001926:	e9c1 2300 	strd	r2, r3, [r1]

			/******************** PID ***********************/
			error = (cmd_vel_s - (delta_s / 0.039));
 800192a:	4b9c      	ldr	r3, [pc, #624]	; (8001b9c <main+0x91c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fe2a 	bl	8000588 <__aeabi_f2d>
 8001934:	4604      	mov	r4, r0
 8001936:	460d      	mov	r5, r1
 8001938:	4b99      	ldr	r3, [pc, #612]	; (8001ba0 <main+0x920>)
 800193a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800193e:	a392      	add	r3, pc, #584	; (adr r3, 8001b88 <main+0x908>)
 8001940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001944:	f7fe ffa2 	bl	800088c <__aeabi_ddiv>
 8001948:	4602      	mov	r2, r0
 800194a:	460b      	mov	r3, r1
 800194c:	4620      	mov	r0, r4
 800194e:	4629      	mov	r1, r5
 8001950:	f7fe fcba 	bl	80002c8 <__aeabi_dsub>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4610      	mov	r0, r2
 800195a:	4619      	mov	r1, r3
 800195c:	f7ff f964 	bl	8000c28 <__aeabi_d2f>
 8001960:	4603      	mov	r3, r0
 8001962:	4a90      	ldr	r2, [pc, #576]	; (8001ba4 <main+0x924>)
 8001964:	6013      	str	r3, [r2, #0]
			error_a = (cmd_vel_th - (pid_delta_o / 0.039));
 8001966:	4b90      	ldr	r3, [pc, #576]	; (8001ba8 <main+0x928>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fe0c 	bl	8000588 <__aeabi_f2d>
 8001970:	4604      	mov	r4, r0
 8001972:	460d      	mov	r5, r1
 8001974:	4b8d      	ldr	r3, [pc, #564]	; (8001bac <main+0x92c>)
 8001976:	e9d3 0100 	ldrd	r0, r1, [r3]
 800197a:	a383      	add	r3, pc, #524	; (adr r3, 8001b88 <main+0x908>)
 800197c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001980:	f7fe ff84 	bl	800088c <__aeabi_ddiv>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fc9c 	bl	80002c8 <__aeabi_dsub>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f946 	bl	8000c28 <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
 800199e:	4a84      	ldr	r2, [pc, #528]	; (8001bb0 <main+0x930>)
 80019a0:	6013      	str	r3, [r2, #0]
			P_term = (error - previous_error) * Kp;
 80019a2:	4b80      	ldr	r3, [pc, #512]	; (8001ba4 <main+0x924>)
 80019a4:	ed93 7a00 	vldr	s14, [r3]
 80019a8:	4b82      	ldr	r3, [pc, #520]	; (8001bb4 <main+0x934>)
 80019aa:	edd3 7a00 	vldr	s15, [r3]
 80019ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019b2:	4b81      	ldr	r3, [pc, #516]	; (8001bb8 <main+0x938>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019bc:	4b7f      	ldr	r3, [pc, #508]	; (8001bbc <main+0x93c>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
			D_term = (error - 2 * previous_error + old_error) * Kd;
 80019c2:	4b78      	ldr	r3, [pc, #480]	; (8001ba4 <main+0x924>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b7a      	ldr	r3, [pc, #488]	; (8001bb4 <main+0x934>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019d6:	4b7a      	ldr	r3, [pc, #488]	; (8001bc0 <main+0x940>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e0:	4b78      	ldr	r3, [pc, #480]	; (8001bc4 <main+0x944>)
 80019e2:	edd3 7a00 	vldr	s15, [r3]
 80019e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ea:	4b77      	ldr	r3, [pc, #476]	; (8001bc8 <main+0x948>)
 80019ec:	edc3 7a00 	vstr	s15, [r3]
			I_term = error * Ki;
 80019f0:	4b6c      	ldr	r3, [pc, #432]	; (8001ba4 <main+0x924>)
 80019f2:	ed93 7a00 	vldr	s14, [r3]
 80019f6:	4b75      	ldr	r3, [pc, #468]	; (8001bcc <main+0x94c>)
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a00:	4b73      	ldr	r3, [pc, #460]	; (8001bd0 <main+0x950>)
 8001a02:	edc3 7a00 	vstr	s15, [r3]
			pid = P_term + D_term + I_term;
 8001a06:	4b6d      	ldr	r3, [pc, #436]	; (8001bbc <main+0x93c>)
 8001a08:	ed93 7a00 	vldr	s14, [r3]
 8001a0c:	4b6e      	ldr	r3, [pc, #440]	; (8001bc8 <main+0x948>)
 8001a0e:	edd3 7a00 	vldr	s15, [r3]
 8001a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a16:	4b6e      	ldr	r3, [pc, #440]	; (8001bd0 <main+0x950>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a20:	4b6c      	ldr	r3, [pc, #432]	; (8001bd4 <main+0x954>)
 8001a22:	edc3 7a00 	vstr	s15, [r3]

			P_term_a = (error_a - previous_error_a) * Kp_a;
 8001a26:	4b62      	ldr	r3, [pc, #392]	; (8001bb0 <main+0x930>)
 8001a28:	ed93 7a00 	vldr	s14, [r3]
 8001a2c:	4b6a      	ldr	r3, [pc, #424]	; (8001bd8 <main+0x958>)
 8001a2e:	edd3 7a00 	vldr	s15, [r3]
 8001a32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a36:	4b69      	ldr	r3, [pc, #420]	; (8001bdc <main+0x95c>)
 8001a38:	edd3 7a00 	vldr	s15, [r3]
 8001a3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a40:	4b67      	ldr	r3, [pc, #412]	; (8001be0 <main+0x960>)
 8001a42:	edc3 7a00 	vstr	s15, [r3]
			D_term_a = (error_a - 2 * previous_error_a + old_error_a) * Kd_a;
 8001a46:	4b5a      	ldr	r3, [pc, #360]	; (8001bb0 <main+0x930>)
 8001a48:	ed93 7a00 	vldr	s14, [r3]
 8001a4c:	4b62      	ldr	r3, [pc, #392]	; (8001bd8 <main+0x958>)
 8001a4e:	edd3 7a00 	vldr	s15, [r3]
 8001a52:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a5a:	4b62      	ldr	r3, [pc, #392]	; (8001be4 <main+0x964>)
 8001a5c:	edd3 7a00 	vldr	s15, [r3]
 8001a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a64:	4b60      	ldr	r3, [pc, #384]	; (8001be8 <main+0x968>)
 8001a66:	edd3 7a00 	vldr	s15, [r3]
 8001a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a6e:	4b5f      	ldr	r3, [pc, #380]	; (8001bec <main+0x96c>)
 8001a70:	edc3 7a00 	vstr	s15, [r3]
			I_term_a = error_a * Ki_a;
 8001a74:	4b4e      	ldr	r3, [pc, #312]	; (8001bb0 <main+0x930>)
 8001a76:	ed93 7a00 	vldr	s14, [r3]
 8001a7a:	4b5d      	ldr	r3, [pc, #372]	; (8001bf0 <main+0x970>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a84:	4b5b      	ldr	r3, [pc, #364]	; (8001bf4 <main+0x974>)
 8001a86:	edc3 7a00 	vstr	s15, [r3]
			pid_a = P_term_a + D_term_a + I_term_a;
 8001a8a:	4b55      	ldr	r3, [pc, #340]	; (8001be0 <main+0x960>)
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	4b56      	ldr	r3, [pc, #344]	; (8001bec <main+0x96c>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9a:	4b56      	ldr	r3, [pc, #344]	; (8001bf4 <main+0x974>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa4:	4b54      	ldr	r3, [pc, #336]	; (8001bf8 <main+0x978>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
			test+=pid_a;
 8001aaa:	4b53      	ldr	r3, [pc, #332]	; (8001bf8 <main+0x978>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7fe fd6a 	bl	8000588 <__aeabi_f2d>
 8001ab4:	4b51      	ldr	r3, [pc, #324]	; (8001bfc <main+0x97c>)
 8001ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aba:	f7fe fc07 	bl	80002cc <__adddf3>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	460b      	mov	r3, r1
 8001ac2:	494e      	ldr	r1, [pc, #312]	; (8001bfc <main+0x97c>)
 8001ac4:	e9c1 2300 	strd	r2, r3, [r1]
			if (stop_flag == 0) {
 8001ac8:	4b4d      	ldr	r3, [pc, #308]	; (8001c00 <main+0x980>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d120      	bne.n	8001b12 <main+0x892>
				speed = speed + pid - pid_a;
 8001ad0:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <main+0x984>)
 8001ad2:	ed93 7a00 	vldr	s14, [r3]
 8001ad6:	4b3f      	ldr	r3, [pc, #252]	; (8001bd4 <main+0x954>)
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ae0:	4b45      	ldr	r3, [pc, #276]	; (8001bf8 <main+0x978>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aea:	4b46      	ldr	r3, [pc, #280]	; (8001c04 <main+0x984>)
 8001aec:	edc3 7a00 	vstr	s15, [r3]
				speed_r = speed_r + pid + pid_a;
 8001af0:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <main+0x988>)
 8001af2:	ed93 7a00 	vldr	s14, [r3]
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <main+0x954>)
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b00:	4b3d      	ldr	r3, [pc, #244]	; (8001bf8 <main+0x978>)
 8001b02:	edd3 7a00 	vldr	s15, [r3]
 8001b06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0a:	4b3f      	ldr	r3, [pc, #252]	; (8001c08 <main+0x988>)
 8001b0c:	edc3 7a00 	vstr	s15, [r3]
 8001b10:	e01d      	b.n	8001b4e <main+0x8ce>
			} else {
				speed = speed - (speed) / 5;
 8001b12:	4b3c      	ldr	r3, [pc, #240]	; (8001c04 <main+0x984>)
 8001b14:	ed93 7a00 	vldr	s14, [r3]
 8001b18:	4b3a      	ldr	r3, [pc, #232]	; (8001c04 <main+0x984>)
 8001b1a:	edd3 6a00 	vldr	s13, [r3]
 8001b1e:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001b22:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b2a:	4b36      	ldr	r3, [pc, #216]	; (8001c04 <main+0x984>)
 8001b2c:	edc3 7a00 	vstr	s15, [r3]
				speed_r = speed_r - (speed_r) / 5;
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <main+0x988>)
 8001b32:	ed93 7a00 	vldr	s14, [r3]
 8001b36:	4b34      	ldr	r3, [pc, #208]	; (8001c08 <main+0x988>)
 8001b38:	edd3 6a00 	vldr	s13, [r3]
 8001b3c:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001b40:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b48:	4b2f      	ldr	r3, [pc, #188]	; (8001c08 <main+0x988>)
 8001b4a:	edc3 7a00 	vstr	s15, [r3]
			}

			old_error = previous_error;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	; (8001bb4 <main+0x934>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1b      	ldr	r2, [pc, #108]	; (8001bc0 <main+0x940>)
 8001b54:	6013      	str	r3, [r2, #0]
			old_error_a = previous_error_a;
 8001b56:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <main+0x958>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a22      	ldr	r2, [pc, #136]	; (8001be4 <main+0x964>)
 8001b5c:	6013      	str	r3, [r2, #0]
			previous_error = error;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <main+0x924>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a14      	ldr	r2, [pc, #80]	; (8001bb4 <main+0x934>)
 8001b64:	6013      	str	r3, [r2, #0]
			previous_error_a = error_a;
 8001b66:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <main+0x930>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <main+0x958>)
 8001b6c:	6013      	str	r3, [r2, #0]

			check_pwm();
 8001b6e:	f000 fd6f 	bl	8002650 <check_pwm>
			check_pwm_r();
 8001b72:	f000 fd9b 	bl	80026ac <check_pwm_r>

			check_move_state();
 8001b76:	f000 fdc7 	bl	8002708 <check_move_state>
			check_move_state_r();
 8001b7a:	f000 fdef 	bl	800275c <check_move_state_r>

			cmd_vel_calculate();
 8001b7e:	f000 fe17 	bl	80027b0 <cmd_vel_calculate>
		motorControl(control_1, control_2);
 8001b82:	f7ff bbd7 	b.w	8001334 <main+0xb4>
 8001b86:	bf00      	nop
 8001b88:	d916872b 	.word	0xd916872b
 8001b8c:	3fa3f7ce 	.word	0x3fa3f7ce
 8001b90:	20000480 	.word	0x20000480
 8001b94:	200004a8 	.word	0x200004a8
 8001b98:	200004e0 	.word	0x200004e0
 8001b9c:	20000698 	.word	0x20000698
 8001ba0:	200004c8 	.word	0x200004c8
 8001ba4:	20000460 	.word	0x20000460
 8001ba8:	2000069c 	.word	0x2000069c
 8001bac:	200004f0 	.word	0x200004f0
 8001bb0:	2000046c 	.word	0x2000046c
 8001bb4:	20000464 	.word	0x20000464
 8001bb8:	20000008 	.word	0x20000008
 8001bbc:	20000440 	.word	0x20000440
 8001bc0:	20000468 	.word	0x20000468
 8001bc4:	2000000c 	.word	0x2000000c
 8001bc8:	20000444 	.word	0x20000444
 8001bcc:	20000010 	.word	0x20000010
 8001bd0:	20000448 	.word	0x20000448
 8001bd4:	2000044c 	.word	0x2000044c
 8001bd8:	20000470 	.word	0x20000470
 8001bdc:	20000014 	.word	0x20000014
 8001be0:	20000450 	.word	0x20000450
 8001be4:	20000474 	.word	0x20000474
 8001be8:	20000018 	.word	0x20000018
 8001bec:	20000454 	.word	0x20000454
 8001bf0:	2000001c 	.word	0x2000001c
 8001bf4:	20000458 	.word	0x20000458
 8001bf8:	2000045c 	.word	0x2000045c
 8001bfc:	200003f0 	.word	0x200003f0
 8001c00:	20000478 	.word	0x20000478
 8001c04:	20000438 	.word	0x20000438
 8001c08:	2000043c 	.word	0x2000043c

08001c0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b094      	sub	sp, #80	; 0x50
 8001c10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	2234      	movs	r2, #52	; 0x34
 8001c18:	2100      	movs	r1, #0
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f006 fb93 	bl	8008346 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c20:	f107 0308 	add.w	r3, r7, #8
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
 8001c34:	4b2a      	ldr	r3, [pc, #168]	; (8001ce0 <SystemClock_Config+0xd4>)
 8001c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c38:	4a29      	ldr	r2, [pc, #164]	; (8001ce0 <SystemClock_Config+0xd4>)
 8001c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <SystemClock_Config+0xd4>)
 8001c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	603b      	str	r3, [r7, #0]
 8001c50:	4b24      	ldr	r3, [pc, #144]	; (8001ce4 <SystemClock_Config+0xd8>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c58:	4a22      	ldr	r2, [pc, #136]	; (8001ce4 <SystemClock_Config+0xd8>)
 8001c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <SystemClock_Config+0xd8>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c68:	603b      	str	r3, [r7, #0]
 8001c6a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c70:	2301      	movs	r3, #1
 8001c72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c74:	2310      	movs	r3, #16
 8001c76:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c78:	2302      	movs	r3, #2
 8001c7a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c80:	2310      	movs	r3, #16
 8001c82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c84:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c88:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c8a:	2304      	movs	r3, #4
 8001c8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c8e:	2302      	movs	r3, #2
 8001c90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c92:	2302      	movs	r3, #2
 8001c94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c96:	f107 031c 	add.w	r3, r7, #28
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f002 fa6a 	bl	8004174 <HAL_RCC_OscConfig>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001ca6:	f000 ff07 	bl	8002ab8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001caa:	230f      	movs	r3, #15
 8001cac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001cc0:	f107 0308 	add.w	r3, r7, #8
 8001cc4:	2102      	movs	r1, #2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f001 ff0a 	bl	8003ae0 <HAL_RCC_ClockConfig>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001cd2:	f000 fef1 	bl	8002ab8 <Error_Handler>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	3750      	adds	r7, #80	; 0x50
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40023800 	.word	0x40023800
 8001ce4:	40007000 	.word	0x40007000

08001ce8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b08e      	sub	sp, #56	; 0x38
 8001cec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	605a      	str	r2, [r3, #4]
 8001cf8:	609a      	str	r2, [r3, #8]
 8001cfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfc:	f107 0320 	add.w	r3, r7, #32
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
 8001d14:	615a      	str	r2, [r3, #20]
 8001d16:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d18:	4b2d      	ldr	r3, [pc, #180]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d1e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001d20:	4b2b      	ldr	r3, [pc, #172]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d22:	2253      	movs	r2, #83	; 0x53
 8001d24:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d26:	4b2a      	ldr	r3, [pc, #168]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001d2c:	4b28      	ldr	r3, [pc, #160]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d2e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d32:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d34:	4b26      	ldr	r3, [pc, #152]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d3a:	4b25      	ldr	r3, [pc, #148]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d40:	4823      	ldr	r0, [pc, #140]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d42:	f002 fcb5 	bl	80046b0 <HAL_TIM_Base_Init>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d4c:	f000 feb4 	bl	8002ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d56:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	481c      	ldr	r0, [pc, #112]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d5e:	f003 f831 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d68:	f000 fea6 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d6c:	4818      	ldr	r0, [pc, #96]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d6e:	f002 fd5f 	bl	8004830 <HAL_TIM_PWM_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d78:	f000 fe9e 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d80:	2300      	movs	r3, #0
 8001d82:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d84:	f107 0320 	add.w	r3, r7, #32
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4811      	ldr	r0, [pc, #68]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001d8c:	f003 fc26 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 8001d90:	4603      	mov	r3, r0
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d001      	beq.n	8001d9a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d96:	f000 fe8f 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d9a:	2360      	movs	r3, #96	; 0x60
 8001d9c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2208      	movs	r2, #8
 8001dae:	4619      	mov	r1, r3
 8001db0:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001db2:	f002 ff45 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001dbc:	f000 fe7c 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001dc0:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM2_Init+0xe8>)
 8001dc2:	f000 ff4f 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 8001dc6:	bf00      	nop
 8001dc8:	3738      	adds	r7, #56	; 0x38
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	2000023c 	.word	0x2000023c

08001dd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b08e      	sub	sp, #56	; 0x38
 8001dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dde:	2200      	movs	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	605a      	str	r2, [r3, #4]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de8:	f107 0320 	add.w	r3, r7, #32
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	615a      	str	r2, [r3, #20]
 8001e02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e04:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e06:	4a33      	ldr	r2, [pc, #204]	; (8001ed4 <MX_TIM3_Init+0x100>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e0c:	2253      	movs	r2, #83	; 0x53
 8001e0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b2f      	ldr	r3, [pc, #188]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001e16:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e18:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e1c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1e:	4b2c      	ldr	r3, [pc, #176]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e24:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e2a:	4829      	ldr	r0, [pc, #164]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e2c:	f002 fc40 	bl	80046b0 <HAL_TIM_Base_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e36:	f000 fe3f 	bl	8002ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e3e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e40:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e44:	4619      	mov	r1, r3
 8001e46:	4822      	ldr	r0, [pc, #136]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e48:	f002 ffbc 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e52:	f000 fe31 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e56:	481e      	ldr	r0, [pc, #120]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e58:	f002 fcea 	bl	8004830 <HAL_TIM_PWM_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e62:	f000 fe29 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e66:	2300      	movs	r3, #0
 8001e68:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e6e:	f107 0320 	add.w	r3, r7, #32
 8001e72:	4619      	mov	r1, r3
 8001e74:	4816      	ldr	r0, [pc, #88]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e76:	f003 fbb1 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e80:	f000 fe1a 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e84:	2360      	movs	r3, #96	; 0x60
 8001e86:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e90:	2300      	movs	r3, #0
 8001e92:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e94:	1d3b      	adds	r3, r7, #4
 8001e96:	2200      	movs	r2, #0
 8001e98:	4619      	mov	r1, r3
 8001e9a:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001e9c:	f002 fed0 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001ea6:	f000 fe07 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001eaa:	1d3b      	adds	r3, r7, #4
 8001eac:	2204      	movs	r2, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4807      	ldr	r0, [pc, #28]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001eb2:	f002 fec5 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001ebc:	f000 fdfc 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ec0:	4803      	ldr	r0, [pc, #12]	; (8001ed0 <MX_TIM3_Init+0xfc>)
 8001ec2:	f000 fecf 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 8001ec6:	bf00      	nop
 8001ec8:	3738      	adds	r7, #56	; 0x38
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop
 8001ed0:	20000284 	.word	0x20000284
 8001ed4:	40000400 	.word	0x40000400

08001ed8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08e      	sub	sp, #56	; 0x38
 8001edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ede:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	601a      	str	r2, [r3, #0]
 8001ee6:	605a      	str	r2, [r3, #4]
 8001ee8:	609a      	str	r2, [r3, #8]
 8001eea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eec:	f107 0320 	add.w	r3, r7, #32
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef6:	1d3b      	adds	r3, r7, #4
 8001ef8:	2200      	movs	r2, #0
 8001efa:	601a      	str	r2, [r3, #0]
 8001efc:	605a      	str	r2, [r3, #4]
 8001efe:	609a      	str	r2, [r3, #8]
 8001f00:	60da      	str	r2, [r3, #12]
 8001f02:	611a      	str	r2, [r3, #16]
 8001f04:	615a      	str	r2, [r3, #20]
 8001f06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001f08:	4b2c      	ldr	r3, [pc, #176]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	; (8001fc0 <MX_TIM4_Init+0xe8>)
 8001f0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001f0e:	4b2b      	ldr	r3, [pc, #172]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f10:	2253      	movs	r2, #83	; 0x53
 8001f12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001f1a:	4b28      	ldr	r3, [pc, #160]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f1c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f22:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f28:	4b24      	ldr	r3, [pc, #144]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f2e:	4823      	ldr	r0, [pc, #140]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f30:	f002 fbbe 	bl	80046b0 <HAL_TIM_Base_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f3a:	f000 fdbd 	bl	8002ab8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f48:	4619      	mov	r1, r3
 8001f4a:	481c      	ldr	r0, [pc, #112]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f4c:	f002 ff3a 	bl	8004dc4 <HAL_TIM_ConfigClockSource>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f56:	f000 fdaf 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f5a:	4818      	ldr	r0, [pc, #96]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f5c:	f002 fc68 	bl	8004830 <HAL_TIM_PWM_Init>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f66:	f000 fda7 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f72:	f107 0320 	add.w	r3, r7, #32
 8001f76:	4619      	mov	r1, r3
 8001f78:	4810      	ldr	r0, [pc, #64]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001f7a:	f003 fb2f 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f84:	f000 fd98 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f88:	2360      	movs	r3, #96	; 0x60
 8001f8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f90:	2300      	movs	r3, #0
 8001f92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f98:	1d3b      	adds	r3, r7, #4
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4807      	ldr	r0, [pc, #28]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001fa0:	f002 fe4e 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d001      	beq.n	8001fae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001faa:	f000 fd85 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001fae:	4803      	ldr	r0, [pc, #12]	; (8001fbc <MX_TIM4_Init+0xe4>)
 8001fb0:	f000 fe58 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 8001fb4:	bf00      	nop
 8001fb6:	3738      	adds	r7, #56	; 0x38
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	200002cc 	.word	0x200002cc
 8001fc0:	40000800 	.word	0x40000800

08001fc4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b08a      	sub	sp, #40	; 0x28
 8001fc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fca:	f107 0320 	add.w	r3, r7, #32
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fd4:	1d3b      	adds	r3, r7, #4
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
 8001fdc:	609a      	str	r2, [r3, #8]
 8001fde:	60da      	str	r2, [r3, #12]
 8001fe0:	611a      	str	r2, [r3, #16]
 8001fe2:	615a      	str	r2, [r3, #20]
 8001fe4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fe6:	4b27      	ldr	r3, [pc, #156]	; (8002084 <MX_TIM5_Init+0xc0>)
 8001fe8:	4a27      	ldr	r2, [pc, #156]	; (8002088 <MX_TIM5_Init+0xc4>)
 8001fea:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <MX_TIM5_Init+0xc0>)
 8001fee:	2229      	movs	r2, #41	; 0x29
 8001ff0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ff2:	4b24      	ldr	r3, [pc, #144]	; (8002084 <MX_TIM5_Init+0xc0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <MX_TIM5_Init+0xc0>)
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <MX_TIM5_Init+0xc0>)
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <MX_TIM5_Init+0xc0>)
 8002006:	2200      	movs	r2, #0
 8002008:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800200a:	481e      	ldr	r0, [pc, #120]	; (8002084 <MX_TIM5_Init+0xc0>)
 800200c:	f002 fc10 	bl	8004830 <HAL_TIM_PWM_Init>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d001      	beq.n	800201a <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8002016:	f000 fd4f 	bl	8002ab8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800201a:	2300      	movs	r3, #0
 800201c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800201e:	2300      	movs	r3, #0
 8002020:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002022:	f107 0320 	add.w	r3, r7, #32
 8002026:	4619      	mov	r1, r3
 8002028:	4816      	ldr	r0, [pc, #88]	; (8002084 <MX_TIM5_Init+0xc0>)
 800202a:	f003 fad7 	bl	80055dc <HAL_TIMEx_MasterConfigSynchronization>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8002034:	f000 fd40 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002038:	2360      	movs	r3, #96	; 0x60
 800203a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800203c:	2300      	movs	r3, #0
 800203e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	4619      	mov	r1, r3
 800204e:	480d      	ldr	r0, [pc, #52]	; (8002084 <MX_TIM5_Init+0xc0>)
 8002050:	f002 fdf6 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8002054:	4603      	mov	r3, r0
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 800205a:	f000 fd2d 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800205e:	1d3b      	adds	r3, r7, #4
 8002060:	2204      	movs	r2, #4
 8002062:	4619      	mov	r1, r3
 8002064:	4807      	ldr	r0, [pc, #28]	; (8002084 <MX_TIM5_Init+0xc0>)
 8002066:	f002 fdeb 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002070:	f000 fd22 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002074:	4803      	ldr	r0, [pc, #12]	; (8002084 <MX_TIM5_Init+0xc0>)
 8002076:	f000 fdf5 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	; 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	20000314 	.word	0x20000314
 8002088:	40000c00 	.word	0x40000c00

0800208c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b088      	sub	sp, #32
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
 8002098:	605a      	str	r2, [r3, #4]
 800209a:	609a      	str	r2, [r3, #8]
 800209c:	60da      	str	r2, [r3, #12]
 800209e:	611a      	str	r2, [r3, #16]
 80020a0:	615a      	str	r2, [r3, #20]
 80020a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80020a4:	4b1e      	ldr	r3, [pc, #120]	; (8002120 <MX_TIM14_Init+0x94>)
 80020a6:	4a1f      	ldr	r2, [pc, #124]	; (8002124 <MX_TIM14_Init+0x98>)
 80020a8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 80020aa:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <MX_TIM14_Init+0x94>)
 80020ac:	2253      	movs	r2, #83	; 0x53
 80020ae:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020b0:	4b1b      	ldr	r3, [pc, #108]	; (8002120 <MX_TIM14_Init+0x94>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 80020b6:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_TIM14_Init+0x94>)
 80020b8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020bc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020be:	4b18      	ldr	r3, [pc, #96]	; (8002120 <MX_TIM14_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020c4:	4b16      	ldr	r3, [pc, #88]	; (8002120 <MX_TIM14_Init+0x94>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020ca:	4815      	ldr	r0, [pc, #84]	; (8002120 <MX_TIM14_Init+0x94>)
 80020cc:	f002 faf0 	bl	80046b0 <HAL_TIM_Base_Init>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80020d6:	f000 fcef 	bl	8002ab8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80020da:	4811      	ldr	r0, [pc, #68]	; (8002120 <MX_TIM14_Init+0x94>)
 80020dc:	f002 fba8 	bl	8004830 <HAL_TIM_PWM_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80020e6:	f000 fce7 	bl	8002ab8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020ea:	2360      	movs	r3, #96	; 0x60
 80020ec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020fa:	1d3b      	adds	r3, r7, #4
 80020fc:	2200      	movs	r2, #0
 80020fe:	4619      	mov	r1, r3
 8002100:	4807      	ldr	r0, [pc, #28]	; (8002120 <MX_TIM14_Init+0x94>)
 8002102:	f002 fd9d 	bl	8004c40 <HAL_TIM_PWM_ConfigChannel>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 800210c:	f000 fcd4 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002110:	4803      	ldr	r0, [pc, #12]	; (8002120 <MX_TIM14_Init+0x94>)
 8002112:	f000 fda7 	bl	8002c64 <HAL_TIM_MspPostInit>

}
 8002116:	bf00      	nop
 8002118:	3720      	adds	r7, #32
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000035c 	.word	0x2000035c
 8002124:	40002000 	.word	0x40002000

08002128 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_USART2_UART_Init+0x4c>)
 800212e:	4a12      	ldr	r2, [pc, #72]	; (8002178 <MX_USART2_UART_Init+0x50>)
 8002130:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <MX_USART2_UART_Init+0x4c>)
 8002134:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002138:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_USART2_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <MX_USART2_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0b      	ldr	r3, [pc, #44]	; (8002174 <MX_USART2_UART_Init+0x4c>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <MX_USART2_UART_Init+0x4c>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <MX_USART2_UART_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b06      	ldr	r3, [pc, #24]	; (8002174 <MX_USART2_UART_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800215e:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_USART2_UART_Init+0x4c>)
 8002160:	f003 facc 	bl	80056fc <HAL_UART_Init>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800216a:	f000 fca5 	bl	8002ab8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800216e:	bf00      	nop
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200003a4 	.word	0x200003a4
 8002178:	40004400 	.word	0x40004400

0800217c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002182:	f107 0314 	add.w	r3, r7, #20
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	4b53      	ldr	r3, [pc, #332]	; (80022e4 <MX_GPIO_Init+0x168>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a52      	ldr	r2, [pc, #328]	; (80022e4 <MX_GPIO_Init+0x168>)
 800219c:	f043 0304 	orr.w	r3, r3, #4
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b50      	ldr	r3, [pc, #320]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0304 	and.w	r3, r3, #4
 80021aa:	613b      	str	r3, [r7, #16]
 80021ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
 80021b2:	4b4c      	ldr	r3, [pc, #304]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a4b      	ldr	r2, [pc, #300]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b49      	ldr	r3, [pc, #292]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021c6:	60fb      	str	r3, [r7, #12]
 80021c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
 80021ce:	4b45      	ldr	r3, [pc, #276]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d2:	4a44      	ldr	r2, [pc, #272]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021d4:	f043 0301 	orr.w	r3, r3, #1
 80021d8:	6313      	str	r3, [r2, #48]	; 0x30
 80021da:	4b42      	ldr	r3, [pc, #264]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	60bb      	str	r3, [r7, #8]
 80021e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	4a3d      	ldr	r2, [pc, #244]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021f0:	f043 0302 	orr.w	r3, r3, #2
 80021f4:	6313      	str	r3, [r2, #48]	; 0x30
 80021f6:	4b3b      	ldr	r3, [pc, #236]	; (80022e4 <MX_GPIO_Init+0x168>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|shield_power_Pin, GPIO_PIN_RESET);
 8002202:	2200      	movs	r2, #0
 8002204:	2160      	movs	r1, #96	; 0x60
 8002206:	4838      	ldr	r0, [pc, #224]	; (80022e8 <MX_GPIO_Init+0x16c>)
 8002208:	f001 fc38 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Left_IN2_Pin|Right_IN1_Pin|Right_IN2_Pin, GPIO_PIN_RESET);
 800220c:	2200      	movs	r2, #0
 800220e:	2170      	movs	r1, #112	; 0x70
 8002210:	4836      	ldr	r0, [pc, #216]	; (80022ec <MX_GPIO_Init+0x170>)
 8002212:	f001 fc33 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Left_IN1_GPIO_Port, Left_IN1_Pin, GPIO_PIN_RESET);
 8002216:	2200      	movs	r2, #0
 8002218:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800221c:	4834      	ldr	r0, [pc, #208]	; (80022f0 <MX_GPIO_Init+0x174>)
 800221e:	f001 fc2d 	bl	8003a7c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002222:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002226:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002228:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800222c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002232:	f107 0314 	add.w	r3, r7, #20
 8002236:	4619      	mov	r1, r3
 8002238:	482c      	ldr	r0, [pc, #176]	; (80022ec <MX_GPIO_Init+0x170>)
 800223a:	f001 fa73 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin shield_power_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|shield_power_Pin;
 800223e:	2360      	movs	r3, #96	; 0x60
 8002240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002242:	2301      	movs	r3, #1
 8002244:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224e:	f107 0314 	add.w	r3, r7, #20
 8002252:	4619      	mov	r1, r3
 8002254:	4824      	ldr	r0, [pc, #144]	; (80022e8 <MX_GPIO_Init+0x16c>)
 8002256:	f001 fa65 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IN2_Pin Right_IN1_Pin Right_IN2_Pin */
  GPIO_InitStruct.Pin = Left_IN2_Pin|Right_IN1_Pin|Right_IN2_Pin;
 800225a:	2370      	movs	r3, #112	; 0x70
 800225c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	2301      	movs	r3, #1
 8002260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	481e      	ldr	r0, [pc, #120]	; (80022ec <MX_GPIO_Init+0x170>)
 8002272:	f001 fa57 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_IN1_Pin */
  GPIO_InitStruct.Pin = Left_IN1_Pin;
 8002276:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Left_IN1_GPIO_Port, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	4818      	ldr	r0, [pc, #96]	; (80022f0 <MX_GPIO_Init+0x174>)
 8002290:	f001 fa48 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_pulse_B_Pin Left_pulse_A_Pin */
  GPIO_InitStruct.Pin = Left_pulse_B_Pin|Left_pulse_A_Pin;
 8002294:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800229a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800229e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a0:	2300      	movs	r3, #0
 80022a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022a4:	f107 0314 	add.w	r3, r7, #20
 80022a8:	4619      	mov	r1, r3
 80022aa:	4811      	ldr	r0, [pc, #68]	; (80022f0 <MX_GPIO_Init+0x174>)
 80022ac:	f001 fa3a 	bl	8003724 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_pulse_B_Pin Right_pulse_A_Pin */
  GPIO_InitStruct.Pin = Right_pulse_B_Pin|Right_pulse_A_Pin;
 80022b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80022b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80022b6:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80022ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4619      	mov	r1, r3
 80022c6:	4808      	ldr	r0, [pc, #32]	; (80022e8 <MX_GPIO_Init+0x16c>)
 80022c8:	f001 fa2c 	bl	8003724 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 80022cc:	2201      	movs	r2, #1
 80022ce:	2100      	movs	r1, #0
 80022d0:	2028      	movs	r0, #40	; 0x28
 80022d2:	f001 f95e 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022d6:	2028      	movs	r0, #40	; 0x28
 80022d8:	f001 f977 	bl	80035ca <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022dc:	bf00      	nop
 80022de:	3728      	adds	r7, #40	; 0x28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	bd80      	pop	{r7, pc}
 80022e4:	40023800 	.word	0x40023800
 80022e8:	40020000 	.word	0x40020000
 80022ec:	40020800 	.word	0x40020800
 80022f0:	40020400 	.word	0x40020400

080022f4 <Pwm_Left>:

/* USER CODE BEGIN 4 */
void Pwm_Left(int pwm_input) {
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
	htim5.Instance->CCR1 = pwm_input;
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <Pwm_Left+0x1c>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	687a      	ldr	r2, [r7, #4]
 8002302:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002304:	bf00      	nop
 8002306:	370c      	adds	r7, #12
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	20000314 	.word	0x20000314

08002314 <Pwm_Right>:

void Pwm_Right(int pwm_input) {
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
	htim5.Instance->CCR2 = pwm_input;
 800231c:	4b04      	ldr	r3, [pc, #16]	; (8002330 <Pwm_Right+0x1c>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	687a      	ldr	r2, [r7, #4]
 8002322:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	20000314 	.word	0x20000314

08002334 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002338:	b09d      	sub	sp, #116	; 0x74
 800233a:	af00      	add	r7, sp, #0
 800233c:	4603      	mov	r3, r0
 800233e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	/* Prevent unused argument(s) compilation warning */

	if (GPIO_Pin == Left_pulse_A_Pin) {
 8002342:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002346:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800234a:	d13d      	bne.n	80023c8 <HAL_GPIO_EXTI_Callback+0x94>
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 800234c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002350:	488c      	ldr	r0, [pc, #560]	; (8002584 <HAL_GPIO_EXTI_Callback+0x250>)
 8002352:	f001 fb7b 	bl	8003a4c <HAL_GPIO_ReadPin>
 8002356:	4603      	mov	r3, r0
 8002358:	461e      	mov	r6, r3
				== HAL_GPIO_ReadPin(GPIOB, Left_pulse_B_Pin)) {
 800235a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800235e:	4889      	ldr	r0, [pc, #548]	; (8002584 <HAL_GPIO_EXTI_Callback+0x250>)
 8002360:	f001 fb74 	bl	8003a4c <HAL_GPIO_ReadPin>
 8002364:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 8002366:	429e      	cmp	r6, r3
 8002368:	d117      	bne.n	800239a <HAL_GPIO_EXTI_Callback+0x66>
			encoderCount--;
 800236a:	4b87      	ldr	r3, [pc, #540]	; (8002588 <HAL_GPIO_EXTI_Callback+0x254>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f112 38ff 	adds.w	r8, r2, #4294967295
 8002374:	f143 39ff 	adc.w	r9, r3, #4294967295
 8002378:	4b83      	ldr	r3, [pc, #524]	; (8002588 <HAL_GPIO_EXTI_Callback+0x254>)
 800237a:	e9c3 8900 	strd	r8, r9, [r3]
			rpm_encoderCount--;
 800237e:	4b83      	ldr	r3, [pc, #524]	; (800258c <HAL_GPIO_EXTI_Callback+0x258>)
 8002380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002384:	1e51      	subs	r1, r2, #1
 8002386:	6639      	str	r1, [r7, #96]	; 0x60
 8002388:	f143 33ff 	adc.w	r3, r3, #4294967295
 800238c:	667b      	str	r3, [r7, #100]	; 0x64
 800238e:	4b7f      	ldr	r3, [pc, #508]	; (800258c <HAL_GPIO_EXTI_Callback+0x258>)
 8002390:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8002394:	e9c3 1200 	strd	r1, r2, [r3]
 8002398:	e05c      	b.n	8002454 <HAL_GPIO_EXTI_Callback+0x120>

		} else {
			encoderCount++;
 800239a:	4b7b      	ldr	r3, [pc, #492]	; (8002588 <HAL_GPIO_EXTI_Callback+0x254>)
 800239c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023a0:	1c54      	adds	r4, r2, #1
 80023a2:	f143 0500 	adc.w	r5, r3, #0
 80023a6:	4b78      	ldr	r3, [pc, #480]	; (8002588 <HAL_GPIO_EXTI_Callback+0x254>)
 80023a8:	e9c3 4500 	strd	r4, r5, [r3]
			rpm_encoderCount++;
 80023ac:	4b77      	ldr	r3, [pc, #476]	; (800258c <HAL_GPIO_EXTI_Callback+0x258>)
 80023ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b2:	1c51      	adds	r1, r2, #1
 80023b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80023b6:	f143 0300 	adc.w	r3, r3, #0
 80023ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023bc:	4b73      	ldr	r3, [pc, #460]	; (800258c <HAL_GPIO_EXTI_Callback+0x258>)
 80023be:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80023c2:	e9c3 1200 	strd	r1, r2, [r3]
 80023c6:	e045      	b.n	8002454 <HAL_GPIO_EXTI_Callback+0x120>
		}
	} else if (GPIO_Pin == Left_pulse_B_Pin) {
 80023c8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80023cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023d0:	d140      	bne.n	8002454 <HAL_GPIO_EXTI_Callback+0x120>
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 80023d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023d6:	486b      	ldr	r0, [pc, #428]	; (8002584 <HAL_GPIO_EXTI_Callback+0x250>)
 80023d8:	f001 fb38 	bl	8003a4c <HAL_GPIO_ReadPin>
 80023dc:	4603      	mov	r3, r0
 80023de:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOB, Left_pulse_B_Pin)) {
 80023e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023e4:	4867      	ldr	r0, [pc, #412]	; (8002584 <HAL_GPIO_EXTI_Callback+0x250>)
 80023e6:	f001 fb31 	bl	8003a4c <HAL_GPIO_ReadPin>
 80023ea:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 80023ec:	429c      	cmp	r4, r3
 80023ee:	d11a      	bne.n	8002426 <HAL_GPIO_EXTI_Callback+0xf2>
			encoderCount++;
 80023f0:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_GPIO_EXTI_Callback+0x254>)
 80023f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f6:	1c51      	adds	r1, r2, #1
 80023f8:	6539      	str	r1, [r7, #80]	; 0x50
 80023fa:	f143 0300 	adc.w	r3, r3, #0
 80023fe:	657b      	str	r3, [r7, #84]	; 0x54
 8002400:	4b61      	ldr	r3, [pc, #388]	; (8002588 <HAL_GPIO_EXTI_Callback+0x254>)
 8002402:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8002406:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount++;
 800240a:	4b60      	ldr	r3, [pc, #384]	; (800258c <HAL_GPIO_EXTI_Callback+0x258>)
 800240c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002410:	1c51      	adds	r1, r2, #1
 8002412:	64b9      	str	r1, [r7, #72]	; 0x48
 8002414:	f143 0300 	adc.w	r3, r3, #0
 8002418:	64fb      	str	r3, [r7, #76]	; 0x4c
 800241a:	4b5c      	ldr	r3, [pc, #368]	; (800258c <HAL_GPIO_EXTI_Callback+0x258>)
 800241c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002420:	e9c3 1200 	strd	r1, r2, [r3]
 8002424:	e016      	b.n	8002454 <HAL_GPIO_EXTI_Callback+0x120>
		} else {
			encoderCount--;
 8002426:	4b58      	ldr	r3, [pc, #352]	; (8002588 <HAL_GPIO_EXTI_Callback+0x254>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f112 3aff 	adds.w	sl, r2, #4294967295
 8002430:	f143 3bff 	adc.w	fp, r3, #4294967295
 8002434:	4b54      	ldr	r3, [pc, #336]	; (8002588 <HAL_GPIO_EXTI_Callback+0x254>)
 8002436:	e9c3 ab00 	strd	sl, fp, [r3]
			rpm_encoderCount--;
 800243a:	4b54      	ldr	r3, [pc, #336]	; (800258c <HAL_GPIO_EXTI_Callback+0x258>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	1e51      	subs	r1, r2, #1
 8002442:	6439      	str	r1, [r7, #64]	; 0x40
 8002444:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002448:	647b      	str	r3, [r7, #68]	; 0x44
 800244a:	4b50      	ldr	r3, [pc, #320]	; (800258c <HAL_GPIO_EXTI_Callback+0x258>)
 800244c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002450:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
	if (GPIO_Pin == Right_pulse_A_Pin) {
 8002454:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800245c:	d144      	bne.n	80024e8 <HAL_GPIO_EXTI_Callback+0x1b4>
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 800245e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002462:	484b      	ldr	r0, [pc, #300]	; (8002590 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002464:	f001 faf2 	bl	8003a4c <HAL_GPIO_ReadPin>
 8002468:	4603      	mov	r3, r0
 800246a:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, Right_pulse_B_Pin)) {
 800246c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002470:	4847      	ldr	r0, [pc, #284]	; (8002590 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002472:	f001 faeb 	bl	8003a4c <HAL_GPIO_ReadPin>
 8002476:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 8002478:	429c      	cmp	r4, r3
 800247a:	d11a      	bne.n	80024b2 <HAL_GPIO_EXTI_Callback+0x17e>
			encoderCount_r++;
 800247c:	4b45      	ldr	r3, [pc, #276]	; (8002594 <HAL_GPIO_EXTI_Callback+0x260>)
 800247e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002482:	1c51      	adds	r1, r2, #1
 8002484:	63b9      	str	r1, [r7, #56]	; 0x38
 8002486:	f143 0300 	adc.w	r3, r3, #0
 800248a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800248c:	4b41      	ldr	r3, [pc, #260]	; (8002594 <HAL_GPIO_EXTI_Callback+0x260>)
 800248e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8002492:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r++;
 8002496:	4b40      	ldr	r3, [pc, #256]	; (8002598 <HAL_GPIO_EXTI_Callback+0x264>)
 8002498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249c:	1c51      	adds	r1, r2, #1
 800249e:	6339      	str	r1, [r7, #48]	; 0x30
 80024a0:	f143 0300 	adc.w	r3, r3, #0
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
 80024a6:	4b3c      	ldr	r3, [pc, #240]	; (8002598 <HAL_GPIO_EXTI_Callback+0x264>)
 80024a8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80024ac:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file */
}
 80024b0:	e063      	b.n	800257a <HAL_GPIO_EXTI_Callback+0x246>
			encoderCount_r--;
 80024b2:	4b38      	ldr	r3, [pc, #224]	; (8002594 <HAL_GPIO_EXTI_Callback+0x260>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	1e51      	subs	r1, r2, #1
 80024ba:	62b9      	str	r1, [r7, #40]	; 0x28
 80024bc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80024c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024c2:	4b34      	ldr	r3, [pc, #208]	; (8002594 <HAL_GPIO_EXTI_Callback+0x260>)
 80024c4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80024c8:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r--;
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <HAL_GPIO_EXTI_Callback+0x264>)
 80024ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d2:	1e51      	subs	r1, r2, #1
 80024d4:	6239      	str	r1, [r7, #32]
 80024d6:	f143 33ff 	adc.w	r3, r3, #4294967295
 80024da:	627b      	str	r3, [r7, #36]	; 0x24
 80024dc:	4b2e      	ldr	r3, [pc, #184]	; (8002598 <HAL_GPIO_EXTI_Callback+0x264>)
 80024de:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80024e2:	e9c3 1200 	strd	r1, r2, [r3]
}
 80024e6:	e048      	b.n	800257a <HAL_GPIO_EXTI_Callback+0x246>
	} else if (GPIO_Pin == Right_pulse_B_Pin) {
 80024e8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80024ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024f0:	d143      	bne.n	800257a <HAL_GPIO_EXTI_Callback+0x246>
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 80024f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024f6:	4826      	ldr	r0, [pc, #152]	; (8002590 <HAL_GPIO_EXTI_Callback+0x25c>)
 80024f8:	f001 faa8 	bl	8003a4c <HAL_GPIO_ReadPin>
 80024fc:	4603      	mov	r3, r0
 80024fe:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, Right_pulse_B_Pin)) {
 8002500:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002504:	4822      	ldr	r0, [pc, #136]	; (8002590 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002506:	f001 faa1 	bl	8003a4c <HAL_GPIO_ReadPin>
 800250a:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 800250c:	429c      	cmp	r4, r3
 800250e:	d11a      	bne.n	8002546 <HAL_GPIO_EXTI_Callback+0x212>
			encoderCount_r--;
 8002510:	4b20      	ldr	r3, [pc, #128]	; (8002594 <HAL_GPIO_EXTI_Callback+0x260>)
 8002512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002516:	1e51      	subs	r1, r2, #1
 8002518:	61b9      	str	r1, [r7, #24]
 800251a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800251e:	61fb      	str	r3, [r7, #28]
 8002520:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <HAL_GPIO_EXTI_Callback+0x260>)
 8002522:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8002526:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r--;
 800252a:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <HAL_GPIO_EXTI_Callback+0x264>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	1e51      	subs	r1, r2, #1
 8002532:	6139      	str	r1, [r7, #16]
 8002534:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002538:	617b      	str	r3, [r7, #20]
 800253a:	4b17      	ldr	r3, [pc, #92]	; (8002598 <HAL_GPIO_EXTI_Callback+0x264>)
 800253c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002540:	e9c3 1200 	strd	r1, r2, [r3]
}
 8002544:	e019      	b.n	800257a <HAL_GPIO_EXTI_Callback+0x246>
			encoderCount_r++;
 8002546:	4b13      	ldr	r3, [pc, #76]	; (8002594 <HAL_GPIO_EXTI_Callback+0x260>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	1c51      	adds	r1, r2, #1
 800254e:	60b9      	str	r1, [r7, #8]
 8002550:	f143 0300 	adc.w	r3, r3, #0
 8002554:	60fb      	str	r3, [r7, #12]
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <HAL_GPIO_EXTI_Callback+0x260>)
 8002558:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800255c:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r++;
 8002560:	4b0d      	ldr	r3, [pc, #52]	; (8002598 <HAL_GPIO_EXTI_Callback+0x264>)
 8002562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002566:	1c51      	adds	r1, r2, #1
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	f143 0300 	adc.w	r3, r3, #0
 800256e:	607b      	str	r3, [r7, #4]
 8002570:	4b09      	ldr	r3, [pc, #36]	; (8002598 <HAL_GPIO_EXTI_Callback+0x264>)
 8002572:	e9d7 1200 	ldrd	r1, r2, [r7]
 8002576:	e9c3 1200 	strd	r1, r2, [r3]
}
 800257a:	bf00      	nop
 800257c:	3774      	adds	r7, #116	; 0x74
 800257e:	46bd      	mov	sp, r7
 8002580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002584:	40020400 	.word	0x40020400
 8002588:	200003f8 	.word	0x200003f8
 800258c:	20000408 	.word	0x20000408
 8002590:	40020000 	.word	0x40020000
 8002594:	20000400 	.word	0x20000400
 8002598:	20000410 	.word	0x20000410

0800259c <motorControl>:

void motorControl(int in1, int in2) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	GPIO_PinState state1=GPIO_PIN_RESET,state2=GPIO_PIN_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	2300      	movs	r3, #0
 80025ac:	73bb      	strb	r3, [r7, #14]
	if(in1==1){
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d102      	bne.n	80025ba <motorControl+0x1e>
		state1=GPIO_PIN_SET;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e001      	b.n	80025be <motorControl+0x22>
	}
	else{
		state1=GPIO_PIN_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
	}
	if(in2==1){
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <motorControl+0x2e>
		state2=GPIO_PIN_SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73bb      	strb	r3, [r7, #14]
 80025c8:	e001      	b.n	80025ce <motorControl+0x32>
	}
	else{
		state2=GPIO_PIN_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73bb      	strb	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(GPIOB, Left_IN1_Pin, state1);
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	461a      	mov	r2, r3
 80025d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d6:	4806      	ldr	r0, [pc, #24]	; (80025f0 <motorControl+0x54>)
 80025d8:	f001 fa50 	bl	8003a7c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Left_IN2_Pin, state2);
 80025dc:	7bbb      	ldrb	r3, [r7, #14]
 80025de:	461a      	mov	r2, r3
 80025e0:	2110      	movs	r1, #16
 80025e2:	4804      	ldr	r0, [pc, #16]	; (80025f4 <motorControl+0x58>)
 80025e4:	f001 fa4a 	bl	8003a7c <HAL_GPIO_WritePin>
}
 80025e8:	bf00      	nop
 80025ea:	3710      	adds	r7, #16
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40020400 	.word	0x40020400
 80025f4:	40020800 	.word	0x40020800

080025f8 <motorControl_r>:

void motorControl_r(int in1, int in2) {
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b084      	sub	sp, #16
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
	GPIO_PinState state1=GPIO_PIN_RESET,state2=GPIO_PIN_RESET;
 8002602:	2300      	movs	r3, #0
 8002604:	73fb      	strb	r3, [r7, #15]
 8002606:	2300      	movs	r3, #0
 8002608:	73bb      	strb	r3, [r7, #14]
	if(in1==1){
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d102      	bne.n	8002616 <motorControl_r+0x1e>
		state1=GPIO_PIN_SET;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
 8002614:	e001      	b.n	800261a <motorControl_r+0x22>
	}
	else{
		state1=GPIO_PIN_RESET;
 8002616:	2300      	movs	r3, #0
 8002618:	73fb      	strb	r3, [r7, #15]
	}
	if(in2==1){
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	d102      	bne.n	8002626 <motorControl_r+0x2e>
		state2=GPIO_PIN_SET;
 8002620:	2301      	movs	r3, #1
 8002622:	73bb      	strb	r3, [r7, #14]
 8002624:	e001      	b.n	800262a <motorControl_r+0x32>
	}
	else{
		state2=GPIO_PIN_RESET;
 8002626:	2300      	movs	r3, #0
 8002628:	73bb      	strb	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(GPIOC, Right_IN1_Pin, state1);
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	461a      	mov	r2, r3
 800262e:	2120      	movs	r1, #32
 8002630:	4806      	ldr	r0, [pc, #24]	; (800264c <motorControl_r+0x54>)
 8002632:	f001 fa23 	bl	8003a7c <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOC, Right_IN2_Pin, state2);
 8002636:	7bbb      	ldrb	r3, [r7, #14]
 8002638:	461a      	mov	r2, r3
 800263a:	2140      	movs	r1, #64	; 0x40
 800263c:	4803      	ldr	r0, [pc, #12]	; (800264c <motorControl_r+0x54>)
 800263e:	f001 fa1d 	bl	8003a7c <HAL_GPIO_WritePin>
}
 8002642:	bf00      	nop
 8002644:	3710      	adds	r7, #16
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}
 800264a:	bf00      	nop
 800264c:	40020800 	.word	0x40020800

08002650 <check_pwm>:

void check_pwm() {
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
	if (speed >= 180) {
 8002654:	4b10      	ldr	r3, [pc, #64]	; (8002698 <check_pwm+0x48>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800269c <check_pwm+0x4c>
 800265e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002666:	db03      	blt.n	8002670 <check_pwm+0x20>
		speed = 180;
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <check_pwm+0x48>)
 800266a:	4a0d      	ldr	r2, [pc, #52]	; (80026a0 <check_pwm+0x50>)
 800266c:	601a      	str	r2, [r3, #0]
	} else if (speed <= -180) {
		speed = -180;
	}
}
 800266e:	e00d      	b.n	800268c <check_pwm+0x3c>
	} else if (speed <= -180) {
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <check_pwm+0x48>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80026a4 <check_pwm+0x54>
 800267a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	d900      	bls.n	8002686 <check_pwm+0x36>
}
 8002684:	e002      	b.n	800268c <check_pwm+0x3c>
		speed = -180;
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <check_pwm+0x48>)
 8002688:	4a07      	ldr	r2, [pc, #28]	; (80026a8 <check_pwm+0x58>)
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	20000438 	.word	0x20000438
 800269c:	43340000 	.word	0x43340000
 80026a0:	43340000 	.word	0x43340000
 80026a4:	c3340000 	.word	0xc3340000
 80026a8:	c3340000 	.word	0xc3340000

080026ac <check_pwm_r>:

void check_pwm_r() {
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
	if (speed_r >= 180) {
 80026b0:	4b10      	ldr	r3, [pc, #64]	; (80026f4 <check_pwm_r+0x48>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80026f8 <check_pwm_r+0x4c>
 80026ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c2:	db03      	blt.n	80026cc <check_pwm_r+0x20>
		speed_r = 180;
 80026c4:	4b0b      	ldr	r3, [pc, #44]	; (80026f4 <check_pwm_r+0x48>)
 80026c6:	4a0d      	ldr	r2, [pc, #52]	; (80026fc <check_pwm_r+0x50>)
 80026c8:	601a      	str	r2, [r3, #0]
	} else if (speed_r <= -180) {
		speed_r = -180;
	}
}
 80026ca:	e00d      	b.n	80026e8 <check_pwm_r+0x3c>
	} else if (speed_r <= -180) {
 80026cc:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <check_pwm_r+0x48>)
 80026ce:	edd3 7a00 	vldr	s15, [r3]
 80026d2:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002700 <check_pwm_r+0x54>
 80026d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	d900      	bls.n	80026e2 <check_pwm_r+0x36>
}
 80026e0:	e002      	b.n	80026e8 <check_pwm_r+0x3c>
		speed_r = -180;
 80026e2:	4b04      	ldr	r3, [pc, #16]	; (80026f4 <check_pwm_r+0x48>)
 80026e4:	4a07      	ldr	r2, [pc, #28]	; (8002704 <check_pwm_r+0x58>)
 80026e6:	601a      	str	r2, [r3, #0]
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	2000043c 	.word	0x2000043c
 80026f8:	43340000 	.word	0x43340000
 80026fc:	43340000 	.word	0x43340000
 8002700:	c3340000 	.word	0xc3340000
 8002704:	c3340000 	.word	0xc3340000

08002708 <check_move_state>:

void check_move_state() {
 8002708:	b480      	push	{r7}
 800270a:	af00      	add	r7, sp, #0
	if (speed >= 0) {
 800270c:	4b0f      	ldr	r3, [pc, #60]	; (800274c <check_move_state+0x44>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002716:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800271a:	db09      	blt.n	8002730 <check_move_state+0x28>
		move_state = 0;
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <check_move_state+0x48>)
 800271e:	2200      	movs	r2, #0
 8002720:	601a      	str	r2, [r3, #0]
		control_1 = 0, control_2 = 1;
 8002722:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <check_move_state+0x4c>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <check_move_state+0x50>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]
	} else {
		move_state = 1;
		control_1 = 1, control_2 = 0;
	}
}
 800272e:	e008      	b.n	8002742 <check_move_state+0x3a>
		move_state = 1;
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <check_move_state+0x48>)
 8002732:	2201      	movs	r2, #1
 8002734:	601a      	str	r2, [r3, #0]
		control_1 = 1, control_2 = 0;
 8002736:	4b07      	ldr	r3, [pc, #28]	; (8002754 <check_move_state+0x4c>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]
 800273c:	4b06      	ldr	r3, [pc, #24]	; (8002758 <check_move_state+0x50>)
 800273e:	2200      	movs	r2, #0
 8002740:	601a      	str	r2, [r3, #0]
}
 8002742:	bf00      	nop
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr
 800274c:	20000438 	.word	0x20000438
 8002750:	20000500 	.word	0x20000500
 8002754:	200004f8 	.word	0x200004f8
 8002758:	20000030 	.word	0x20000030

0800275c <check_move_state_r>:

void check_move_state_r() {
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
	if (speed_r >= 0) {
 8002760:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <check_move_state_r+0x44>)
 8002762:	edd3 7a00 	vldr	s15, [r3]
 8002766:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800276a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276e:	db09      	blt.n	8002784 <check_move_state_r+0x28>
		move_state_r = 0;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <check_move_state_r+0x48>)
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
		control_1_r = 1, control_2_r = 0;
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <check_move_state_r+0x4c>)
 8002778:	2201      	movs	r2, #1
 800277a:	601a      	str	r2, [r3, #0]
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <check_move_state_r+0x50>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
	} else {
		move_state_r = 1;
		control_1_r = 0, control_2_r = 1;
	}
}
 8002782:	e008      	b.n	8002796 <check_move_state_r+0x3a>
		move_state_r = 1;
 8002784:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <check_move_state_r+0x48>)
 8002786:	2201      	movs	r2, #1
 8002788:	601a      	str	r2, [r3, #0]
		control_1_r = 0, control_2_r = 1;
 800278a:	4b07      	ldr	r3, [pc, #28]	; (80027a8 <check_move_state_r+0x4c>)
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <check_move_state_r+0x50>)
 8002792:	2201      	movs	r2, #1
 8002794:	601a      	str	r2, [r3, #0]
}
 8002796:	bf00      	nop
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr
 80027a0:	2000043c 	.word	0x2000043c
 80027a4:	20000504 	.word	0x20000504
 80027a8:	20000034 	.word	0x20000034
 80027ac:	200004fc 	.word	0x200004fc

080027b0 <cmd_vel_calculate>:

void cmd_vel_calculate(void) {
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
	cmd_vel_s = cmd_vel_x;
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <cmd_vel_calculate+0x50>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a12      	ldr	r2, [pc, #72]	; (8002804 <cmd_vel_calculate+0x54>)
 80027ba:	6013      	str	r3, [r2, #0]
	cmd_vel_th = cmd_vel_z;
 80027bc:	4b12      	ldr	r3, [pc, #72]	; (8002808 <cmd_vel_calculate+0x58>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <cmd_vel_calculate+0x5c>)
 80027c2:	6013      	str	r3, [r2, #0]
	if (cmd_vel_x == 0 && cmd_vel_z == 0) {
 80027c4:	4b0e      	ldr	r3, [pc, #56]	; (8002800 <cmd_vel_calculate+0x50>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d2:	d10b      	bne.n	80027ec <cmd_vel_calculate+0x3c>
 80027d4:	4b0c      	ldr	r3, [pc, #48]	; (8002808 <cmd_vel_calculate+0x58>)
 80027d6:	edd3 7a00 	vldr	s15, [r3]
 80027da:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027e2:	d103      	bne.n	80027ec <cmd_vel_calculate+0x3c>
		stop_flag = 1;
 80027e4:	4b0a      	ldr	r3, [pc, #40]	; (8002810 <cmd_vel_calculate+0x60>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	e003      	b.n	80027f4 <cmd_vel_calculate+0x44>
	} else {
		stop_flag = 0;
 80027ec:	4b08      	ldr	r3, [pc, #32]	; (8002810 <cmd_vel_calculate+0x60>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
	}
}
 80027f2:	bf00      	nop
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	20000690 	.word	0x20000690
 8002804:	20000698 	.word	0x20000698
 8002808:	20000694 	.word	0x20000694
 800280c:	2000069c 	.word	0x2000069c
 8002810:	20000478 	.word	0x20000478

08002814 <HAL_TIM_PeriodElapsedCallback>:

uint32_t millis(void) {
	return msTicks;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002824:	d106      	bne.n	8002834 <HAL_TIM_PeriodElapsedCallback+0x20>
		if(msTicks>30){
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b1e      	cmp	r3, #30
 800282c:	d902      	bls.n	8002834 <HAL_TIM_PeriodElapsedCallback+0x20>
			msTicks = 0;
 800282e:	4b04      	ldr	r3, [pc, #16]	; (8002840 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr
 8002840:	200006a4 	.word	0x200006a4

08002844 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b090      	sub	sp, #64	; 0x40
 8002848:	af02      	add	r7, sp, #8
 800284a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a8a      	ldr	r2, [pc, #552]	; (8002a7c <HAL_UART_RxCpltCallback+0x238>)
 8002852:	4293      	cmp	r3, r2
 8002854:	f040 8108 	bne.w	8002a68 <HAL_UART_RxCpltCallback+0x224>
		if (rx_data != '\n') {
 8002858:	4b89      	ldr	r3, [pc, #548]	; (8002a80 <HAL_UART_RxCpltCallback+0x23c>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b0a      	cmp	r3, #10
 800285e:	d009      	beq.n	8002874 <HAL_UART_RxCpltCallback+0x30>
			rx_buffer[rx_index++] = rx_data;
 8002860:	4b88      	ldr	r3, [pc, #544]	; (8002a84 <HAL_UART_RxCpltCallback+0x240>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	4987      	ldr	r1, [pc, #540]	; (8002a84 <HAL_UART_RxCpltCallback+0x240>)
 8002868:	600a      	str	r2, [r1, #0]
 800286a:	4a85      	ldr	r2, [pc, #532]	; (8002a80 <HAL_UART_RxCpltCallback+0x23c>)
 800286c:	7811      	ldrb	r1, [r2, #0]
 800286e:	4a86      	ldr	r2, [pc, #536]	; (8002a88 <HAL_UART_RxCpltCallback+0x244>)
 8002870:	54d1      	strb	r1, [r2, r3]
 8002872:	e0f9      	b.n	8002a68 <HAL_UART_RxCpltCallback+0x224>
		}
		else {
			rx_buffer[rx_index] = '\0';
 8002874:	4b83      	ldr	r3, [pc, #524]	; (8002a84 <HAL_UART_RxCpltCallback+0x240>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a83      	ldr	r2, [pc, #524]	; (8002a88 <HAL_UART_RxCpltCallback+0x244>)
 800287a:	2100      	movs	r1, #0
 800287c:	54d1      	strb	r1, [r2, r3]
			//printf("Data: %s\n", rx_buffer);

			if (rx_buffer[0] == '1') {
 800287e:	4b82      	ldr	r3, [pc, #520]	; (8002a88 <HAL_UART_RxCpltCallback+0x244>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b31      	cmp	r3, #49	; 0x31
 8002884:	d148      	bne.n	8002918 <HAL_UART_RxCpltCallback+0xd4>
				//printf("[1] Data: %s\n", rx_buffer);

				char first_number[10];

				strncpy(first_number, &rx_buffer[2], 9);
 8002886:	f107 0320 	add.w	r3, r7, #32
 800288a:	2209      	movs	r2, #9
 800288c:	497f      	ldr	r1, [pc, #508]	; (8002a8c <HAL_UART_RxCpltCallback+0x248>)
 800288e:	4618      	mov	r0, r3
 8002890:	f005 fd73 	bl	800837a <strncpy>
				first_number[10] = '\0';
 8002894:	2300      	movs	r3, #0
 8002896:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

				cmd_vel_x = atof(first_number);
 800289a:	f107 0320 	add.w	r3, r7, #32
 800289e:	4618      	mov	r0, r3
 80028a0:	f003 ff82 	bl	80067a8 <atof>
 80028a4:	ec53 2b10 	vmov	r2, r3, d0
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	f7fe f9bc 	bl	8000c28 <__aeabi_d2f>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4a77      	ldr	r2, [pc, #476]	; (8002a90 <HAL_UART_RxCpltCallback+0x24c>)
 80028b4:	6013      	str	r3, [r2, #0]
				if (rx_buffer[1] == '0') { // ?��?��?�� 경우
 80028b6:	4b74      	ldr	r3, [pc, #464]	; (8002a88 <HAL_UART_RxCpltCallback+0x244>)
 80028b8:	785b      	ldrb	r3, [r3, #1]
 80028ba:	2b30      	cmp	r3, #48	; 0x30
 80028bc:	d107      	bne.n	80028ce <HAL_UART_RxCpltCallback+0x8a>
					cmd_vel_x = -cmd_vel_x;
 80028be:	4b74      	ldr	r3, [pc, #464]	; (8002a90 <HAL_UART_RxCpltCallback+0x24c>)
 80028c0:	edd3 7a00 	vldr	s15, [r3]
 80028c4:	eef1 7a67 	vneg.f32	s15, s15
 80028c8:	4b71      	ldr	r3, [pc, #452]	; (8002a90 <HAL_UART_RxCpltCallback+0x24c>)
 80028ca:	edc3 7a00 	vstr	s15, [r3]
				}

				char second_number[10];
				strncpy(second_number, &rx_buffer[12], 9);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	2209      	movs	r2, #9
 80028d4:	496f      	ldr	r1, [pc, #444]	; (8002a94 <HAL_UART_RxCpltCallback+0x250>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f005 fd4f 	bl	800837a <strncpy>
				second_number[10] = '\0';
 80028dc:	2300      	movs	r3, #0
 80028de:	77bb      	strb	r3, [r7, #30]

				cmd_vel_z = atof(second_number);
 80028e0:	f107 0314 	add.w	r3, r7, #20
 80028e4:	4618      	mov	r0, r3
 80028e6:	f003 ff5f 	bl	80067a8 <atof>
 80028ea:	ec53 2b10 	vmov	r2, r3, d0
 80028ee:	4610      	mov	r0, r2
 80028f0:	4619      	mov	r1, r3
 80028f2:	f7fe f999 	bl	8000c28 <__aeabi_d2f>
 80028f6:	4603      	mov	r3, r0
 80028f8:	4a67      	ldr	r2, [pc, #412]	; (8002a98 <HAL_UART_RxCpltCallback+0x254>)
 80028fa:	6013      	str	r3, [r2, #0]
				if (rx_buffer[11] == '0') { // ?��?��?�� 경우
 80028fc:	4b62      	ldr	r3, [pc, #392]	; (8002a88 <HAL_UART_RxCpltCallback+0x244>)
 80028fe:	7adb      	ldrb	r3, [r3, #11]
 8002900:	2b30      	cmp	r3, #48	; 0x30
 8002902:	f040 80a8 	bne.w	8002a56 <HAL_UART_RxCpltCallback+0x212>
					cmd_vel_z = -cmd_vel_z;
 8002906:	4b64      	ldr	r3, [pc, #400]	; (8002a98 <HAL_UART_RxCpltCallback+0x254>)
 8002908:	edd3 7a00 	vldr	s15, [r3]
 800290c:	eef1 7a67 	vneg.f32	s15, s15
 8002910:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <HAL_UART_RxCpltCallback+0x254>)
 8002912:	edc3 7a00 	vstr	s15, [r3]
 8002916:	e09e      	b.n	8002a56 <HAL_UART_RxCpltCallback+0x212>
				}
			}
			else if (rx_buffer[0] == '2') {
 8002918:	4b5b      	ldr	r3, [pc, #364]	; (8002a88 <HAL_UART_RxCpltCallback+0x244>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	2b32      	cmp	r3, #50	; 0x32
 800291e:	f040 809a 	bne.w	8002a56 <HAL_UART_RxCpltCallback+0x212>
				//printf("[2] Data: %s\n", rx_buffer);

				//Data_import
				for (int i = 0; i < 48; i++) {
 8002922:	2300      	movs	r3, #0
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	e00b      	b.n	8002940 <HAL_UART_RxCpltCallback+0xfc>
					motor_buffer[i] = rx_buffer[i + 1];
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	3301      	adds	r3, #1
 800292c:	4a56      	ldr	r2, [pc, #344]	; (8002a88 <HAL_UART_RxCpltCallback+0x244>)
 800292e:	5cd1      	ldrb	r1, [r2, r3]
 8002930:	4a5a      	ldr	r2, [pc, #360]	; (8002a9c <HAL_UART_RxCpltCallback+0x258>)
 8002932:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002934:	4413      	add	r3, r2
 8002936:	460a      	mov	r2, r1
 8002938:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 48; i++) {
 800293a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293c:	3301      	adds	r3, #1
 800293e:	637b      	str	r3, [r7, #52]	; 0x34
 8002940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002942:	2b2f      	cmp	r3, #47	; 0x2f
 8002944:	ddf0      	ble.n	8002928 <HAL_UART_RxCpltCallback+0xe4>
				}

				//Slicing Data and char to float
				for (int i = 0; i < 6; i++) {
 8002946:	2300      	movs	r3, #0
 8002948:	633b      	str	r3, [r7, #48]	; 0x30
 800294a:	e031      	b.n	80029b0 <HAL_UART_RxCpltCallback+0x16c>
					char temp[9];

					for (int j = 0; j < 8; j++) {
 800294c:	2300      	movs	r3, #0
 800294e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002950:	e00e      	b.n	8002970 <HAL_UART_RxCpltCallback+0x12c>
						temp[j] = motor_buffer[i * 8 + j];
 8002952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002954:	00da      	lsls	r2, r3, #3
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	4413      	add	r3, r2
 800295a:	4a50      	ldr	r2, [pc, #320]	; (8002a9c <HAL_UART_RxCpltCallback+0x258>)
 800295c:	5cd1      	ldrb	r1, [r2, r3]
 800295e:	f107 0208 	add.w	r2, r7, #8
 8002962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002964:	4413      	add	r3, r2
 8002966:	460a      	mov	r2, r1
 8002968:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++) {
 800296a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800296c:	3301      	adds	r3, #1
 800296e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002972:	2b07      	cmp	r3, #7
 8002974:	dded      	ble.n	8002952 <HAL_UART_RxCpltCallback+0x10e>
					}
					temp[8] = '\0';
 8002976:	2300      	movs	r3, #0
 8002978:	743b      	strb	r3, [r7, #16]

					motor_degree[i] = radiansToDegrees(atof(temp));;
 800297a:	f107 0308 	add.w	r3, r7, #8
 800297e:	4618      	mov	r0, r3
 8002980:	f003 ff12 	bl	80067a8 <atof>
 8002984:	ec53 2b10 	vmov	r2, r3, d0
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f94c 	bl	8000c28 <__aeabi_d2f>
 8002990:	4603      	mov	r3, r0
 8002992:	ee00 3a10 	vmov	s0, r3
 8002996:	f7fe fbb7 	bl	8001108 <radiansToDegrees>
 800299a:	eef0 7a40 	vmov.f32	s15, s0
 800299e:	4a40      	ldr	r2, [pc, #256]	; (8002aa0 <HAL_UART_RxCpltCallback+0x25c>)
 80029a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 6; i++) {
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	3301      	adds	r3, #1
 80029ae:	633b      	str	r3, [r7, #48]	; 0x30
 80029b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029b2:	2b05      	cmp	r3, #5
 80029b4:	ddca      	ble.n	800294c <HAL_UART_RxCpltCallback+0x108>
				}


				//move motor
				setMotorAngle(&htim14, TIM_CHANNEL_1, motor_degree[0], MOTOR1_MIN_ANGLE, MOTOR1_MAX_ANGLE);
 80029b6:	4b3a      	ldr	r3, [pc, #232]	; (8002aa0 <HAL_UART_RxCpltCallback+0x25c>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c0:	edc7 7a00 	vstr	s15, [r7]
 80029c4:	783b      	ldrb	r3, [r7, #0]
 80029c6:	b2da      	uxtb	r2, r3
 80029c8:	23b4      	movs	r3, #180	; 0xb4
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	2300      	movs	r3, #0
 80029ce:	2100      	movs	r1, #0
 80029d0:	4834      	ldr	r0, [pc, #208]	; (8002aa4 <HAL_UART_RxCpltCallback+0x260>)
 80029d2:	f7fe fc19 	bl	8001208 <setMotorAngle>
				setMotorAngle(&htim4, TIM_CHANNEL_1, motor_degree[1], MOTOR2_MIN_ANGLE, MOTOR2_MAX_ANGLE);
 80029d6:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_UART_RxCpltCallback+0x25c>)
 80029d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80029dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e0:	edc7 7a00 	vstr	s15, [r7]
 80029e4:	783b      	ldrb	r3, [r7, #0]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	23a5      	movs	r3, #165	; 0xa5
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	230f      	movs	r3, #15
 80029ee:	2100      	movs	r1, #0
 80029f0:	482d      	ldr	r0, [pc, #180]	; (8002aa8 <HAL_UART_RxCpltCallback+0x264>)
 80029f2:	f7fe fc09 	bl	8001208 <setMotorAngle>
				setMotorAngle(&htim3, TIM_CHANNEL_2, motor_degree[2], MOTOR3_MIN_ANGLE, MOTOR3_MAX_ANGLE);
 80029f6:	4b2a      	ldr	r3, [pc, #168]	; (8002aa0 <HAL_UART_RxCpltCallback+0x25c>)
 80029f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80029fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a00:	edc7 7a00 	vstr	s15, [r7]
 8002a04:	783b      	ldrb	r3, [r7, #0]
 8002a06:	b2da      	uxtb	r2, r3
 8002a08:	23b4      	movs	r3, #180	; 0xb4
 8002a0a:	9300      	str	r3, [sp, #0]
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	2104      	movs	r1, #4
 8002a10:	4826      	ldr	r0, [pc, #152]	; (8002aac <HAL_UART_RxCpltCallback+0x268>)
 8002a12:	f7fe fbf9 	bl	8001208 <setMotorAngle>
				setMotorAngle(&htim2, TIM_CHANNEL_3, motor_degree[3], MOTOR4_MIN_ANGLE, MOTOR4_MAX_ANGLE);
 8002a16:	4b22      	ldr	r3, [pc, #136]	; (8002aa0 <HAL_UART_RxCpltCallback+0x25c>)
 8002a18:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a20:	edc7 7a00 	vstr	s15, [r7]
 8002a24:	783b      	ldrb	r3, [r7, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	23b4      	movs	r3, #180	; 0xb4
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	2108      	movs	r1, #8
 8002a30:	481f      	ldr	r0, [pc, #124]	; (8002ab0 <HAL_UART_RxCpltCallback+0x26c>)
 8002a32:	f7fe fbe9 	bl	8001208 <setMotorAngle>
				setMotorAngle(&htim3, TIM_CHANNEL_1, motor_degree[4], MOTOR5_MIN_ANGLE, MOTOR5_MAX_ANGLE);
 8002a36:	4b1a      	ldr	r3, [pc, #104]	; (8002aa0 <HAL_UART_RxCpltCallback+0x25c>)
 8002a38:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a40:	edc7 7a00 	vstr	s15, [r7]
 8002a44:	783b      	ldrb	r3, [r7, #0]
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	23b4      	movs	r3, #180	; 0xb4
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	2100      	movs	r1, #0
 8002a50:	4816      	ldr	r0, [pc, #88]	; (8002aac <HAL_UART_RxCpltCallback+0x268>)
 8002a52:	f7fe fbd9 	bl	8001208 <setMotorAngle>
				//setMotorAngle(&htim3, TIM_CHANNEL_1, motor_degree[4], MOTOR5_MIN_ANGLE, MOTOR5_MAX_ANGLE);
			}

			//reset huart2 buffer
			rx_index = 0;
 8002a56:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <HAL_UART_RxCpltCallback+0x240>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	601a      	str	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8002a5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a60:	2100      	movs	r1, #0
 8002a62:	4809      	ldr	r0, [pc, #36]	; (8002a88 <HAL_UART_RxCpltCallback+0x244>)
 8002a64:	f005 fc6f 	bl	8008346 <memset>
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rx_data, 1);
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4905      	ldr	r1, [pc, #20]	; (8002a80 <HAL_UART_RxCpltCallback+0x23c>)
 8002a6c:	4811      	ldr	r0, [pc, #68]	; (8002ab4 <HAL_UART_RxCpltCallback+0x270>)
 8002a6e:	f002 ff20 	bl	80058b2 <HAL_UART_Receive_IT>
}
 8002a72:	bf00      	nop
 8002a74:	3738      	adds	r7, #56	; 0x38
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40004400 	.word	0x40004400
 8002a80:	20000608 	.word	0x20000608
 8002a84:	2000060c 	.word	0x2000060c
 8002a88:	20000508 	.word	0x20000508
 8002a8c:	2000050a 	.word	0x2000050a
 8002a90:	20000690 	.word	0x20000690
 8002a94:	20000514 	.word	0x20000514
 8002a98:	20000694 	.word	0x20000694
 8002a9c:	20000610 	.word	0x20000610
 8002aa0:	20000644 	.word	0x20000644
 8002aa4:	2000035c 	.word	0x2000035c
 8002aa8:	200002cc 	.word	0x200002cc
 8002aac:	20000284 	.word	0x20000284
 8002ab0:	2000023c 	.word	0x2000023c
 8002ab4:	200003a4 	.word	0x200003a4

08002ab8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002abc:	b672      	cpsid	i
}
 8002abe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002ac0:	e7fe      	b.n	8002ac0 <Error_Handler+0x8>
	...

08002ac4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	4b10      	ldr	r3, [pc, #64]	; (8002b10 <HAL_MspInit+0x4c>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	4a0f      	ldr	r2, [pc, #60]	; (8002b10 <HAL_MspInit+0x4c>)
 8002ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8002ada:	4b0d      	ldr	r3, [pc, #52]	; (8002b10 <HAL_MspInit+0x4c>)
 8002adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae2:	607b      	str	r3, [r7, #4]
 8002ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	4b09      	ldr	r3, [pc, #36]	; (8002b10 <HAL_MspInit+0x4c>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	4a08      	ldr	r2, [pc, #32]	; (8002b10 <HAL_MspInit+0x4c>)
 8002af0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002af4:	6413      	str	r3, [r2, #64]	; 0x40
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_MspInit+0x4c>)
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002b02:	2007      	movs	r0, #7
 8002b04:	f000 fd3a 	bl	800357c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b08:	bf00      	nop
 8002b0a:	3708      	adds	r7, #8
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800

08002b14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b24:	d116      	bne.n	8002b54 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	4b36      	ldr	r3, [pc, #216]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	4a35      	ldr	r2, [pc, #212]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002b30:	f043 0301 	orr.w	r3, r3, #1
 8002b34:	6413      	str	r3, [r2, #64]	; 0x40
 8002b36:	4b33      	ldr	r3, [pc, #204]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8002b42:	2201      	movs	r2, #1
 8002b44:	2100      	movs	r1, #0
 8002b46:	201c      	movs	r0, #28
 8002b48:	f000 fd23 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b4c:	201c      	movs	r0, #28
 8002b4e:	f000 fd3c 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002b52:	e052      	b.n	8002bfa <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a2b      	ldr	r2, [pc, #172]	; (8002c08 <HAL_TIM_Base_MspInit+0xf4>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d116      	bne.n	8002b8c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b5e:	2300      	movs	r3, #0
 8002b60:	613b      	str	r3, [r7, #16]
 8002b62:	4b28      	ldr	r3, [pc, #160]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b66:	4a27      	ldr	r2, [pc, #156]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002b68:	f043 0302 	orr.w	r3, r3, #2
 8002b6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6e:	4b25      	ldr	r3, [pc, #148]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f003 0302 	and.w	r3, r3, #2
 8002b76:	613b      	str	r3, [r7, #16]
 8002b78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	201d      	movs	r0, #29
 8002b80:	f000 fd07 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b84:	201d      	movs	r0, #29
 8002b86:	f000 fd20 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 8002b8a:	e036      	b.n	8002bfa <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	; (8002c0c <HAL_TIM_Base_MspInit+0xf8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d116      	bne.n	8002bc4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b9e:	4a19      	ldr	r2, [pc, #100]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ba6:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002baa:	f003 0304 	and.w	r3, r3, #4
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2100      	movs	r1, #0
 8002bb6:	201e      	movs	r0, #30
 8002bb8:	f000 fceb 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002bbc:	201e      	movs	r0, #30
 8002bbe:	f000 fd04 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 8002bc2:	e01a      	b.n	8002bfa <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM14)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a11      	ldr	r2, [pc, #68]	; (8002c10 <HAL_TIM_Base_MspInit+0xfc>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d115      	bne.n	8002bfa <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bce:	2300      	movs	r3, #0
 8002bd0:	60bb      	str	r3, [r7, #8]
 8002bd2:	4b0c      	ldr	r3, [pc, #48]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd6:	4a0b      	ldr	r2, [pc, #44]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002bde:	4b09      	ldr	r3, [pc, #36]	; (8002c04 <HAL_TIM_Base_MspInit+0xf0>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	60bb      	str	r3, [r7, #8]
 8002be8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 1);
 8002bea:	2201      	movs	r2, #1
 8002bec:	2100      	movs	r1, #0
 8002bee:	202d      	movs	r0, #45	; 0x2d
 8002bf0:	f000 fccf 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002bf4:	202d      	movs	r0, #45	; 0x2d
 8002bf6:	f000 fce8 	bl	80035ca <HAL_NVIC_EnableIRQ>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40000400 	.word	0x40000400
 8002c0c:	40000800 	.word	0x40000800
 8002c10:	40002000 	.word	0x40002000

08002c14 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a0e      	ldr	r2, [pc, #56]	; (8002c5c <HAL_TIM_PWM_MspInit+0x48>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d115      	bne.n	8002c52 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b0d      	ldr	r3, [pc, #52]	; (8002c60 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c30:	f043 0308 	orr.w	r3, r3, #8
 8002c34:	6413      	str	r3, [r2, #64]	; 0x40
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 8002c42:	2201      	movs	r2, #1
 8002c44:	2100      	movs	r1, #0
 8002c46:	2032      	movs	r0, #50	; 0x32
 8002c48:	f000 fca3 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c4c:	2032      	movs	r0, #50	; 0x32
 8002c4e:	f000 fcbc 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40023800 	.word	0x40023800

08002c64 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08e      	sub	sp, #56	; 0x38
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]
 8002c74:	605a      	str	r2, [r3, #4]
 8002c76:	609a      	str	r2, [r3, #8]
 8002c78:	60da      	str	r2, [r3, #12]
 8002c7a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c84:	d11f      	bne.n	8002cc6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c86:	2300      	movs	r3, #0
 8002c88:	623b      	str	r3, [r7, #32]
 8002c8a:	4b67      	ldr	r3, [pc, #412]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	4a66      	ldr	r2, [pc, #408]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002c90:	f043 0302 	orr.w	r3, r3, #2
 8002c94:	6313      	str	r3, [r2, #48]	; 0x30
 8002c96:	4b64      	ldr	r3, [pc, #400]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	623b      	str	r3, [r7, #32]
 8002ca0:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TIM_wrist_rot_Pin;
 8002ca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ca6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_wrist_rot_GPIO_Port, &GPIO_InitStruct);
 8002cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cbc:	4619      	mov	r1, r3
 8002cbe:	485b      	ldr	r0, [pc, #364]	; (8002e2c <HAL_TIM_MspPostInit+0x1c8>)
 8002cc0:	f000 fd30 	bl	8003724 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002cc4:	e0ac      	b.n	8002e20 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM3)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a59      	ldr	r2, [pc, #356]	; (8002e30 <HAL_TIM_MspPostInit+0x1cc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d13c      	bne.n	8002d4a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	61fb      	str	r3, [r7, #28]
 8002cd4:	4b54      	ldr	r3, [pc, #336]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002cd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd8:	4a53      	ldr	r2, [pc, #332]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002cda:	f043 0304 	orr.w	r3, r3, #4
 8002cde:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce0:	4b51      	ldr	r3, [pc, #324]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce4:	f003 0304 	and.w	r3, r3, #4
 8002ce8:	61fb      	str	r3, [r7, #28]
 8002cea:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cec:	2300      	movs	r3, #0
 8002cee:	61bb      	str	r3, [r7, #24]
 8002cf0:	4b4d      	ldr	r3, [pc, #308]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf4:	4a4c      	ldr	r2, [pc, #304]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002cf6:	f043 0302 	orr.w	r3, r3, #2
 8002cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8002cfc:	4b4a      	ldr	r3, [pc, #296]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d00:	f003 0302 	and.w	r3, r3, #2
 8002d04:	61bb      	str	r3, [r7, #24]
 8002d06:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM_elbow_Pin;
 8002d08:	2380      	movs	r3, #128	; 0x80
 8002d0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d0c:	2302      	movs	r3, #2
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d10:	2300      	movs	r3, #0
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d14:	2300      	movs	r3, #0
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d18:	2302      	movs	r3, #2
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_elbow_GPIO_Port, &GPIO_InitStruct);
 8002d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d20:	4619      	mov	r1, r3
 8002d22:	4844      	ldr	r0, [pc, #272]	; (8002e34 <HAL_TIM_MspPostInit+0x1d0>)
 8002d24:	f000 fcfe 	bl	8003724 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_wrist_var_Pin;
 8002d28:	2310      	movs	r3, #16
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d34:	2300      	movs	r3, #0
 8002d36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_wrist_var_GPIO_Port, &GPIO_InitStruct);
 8002d3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d40:	4619      	mov	r1, r3
 8002d42:	483a      	ldr	r0, [pc, #232]	; (8002e2c <HAL_TIM_MspPostInit+0x1c8>)
 8002d44:	f000 fcee 	bl	8003724 <HAL_GPIO_Init>
}
 8002d48:	e06a      	b.n	8002e20 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM4)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3a      	ldr	r2, [pc, #232]	; (8002e38 <HAL_TIM_MspPostInit+0x1d4>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d11e      	bne.n	8002d92 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	617b      	str	r3, [r7, #20]
 8002d58:	4b33      	ldr	r3, [pc, #204]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d5c:	4a32      	ldr	r2, [pc, #200]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002d5e:	f043 0302 	orr.w	r3, r3, #2
 8002d62:	6313      	str	r3, [r2, #48]	; 0x30
 8002d64:	4b30      	ldr	r3, [pc, #192]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM_shoulder_Pin;
 8002d70:	2340      	movs	r3, #64	; 0x40
 8002d72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d74:	2302      	movs	r3, #2
 8002d76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d80:	2302      	movs	r3, #2
 8002d82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_shoulder_GPIO_Port, &GPIO_InitStruct);
 8002d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d88:	4619      	mov	r1, r3
 8002d8a:	4828      	ldr	r0, [pc, #160]	; (8002e2c <HAL_TIM_MspPostInit+0x1c8>)
 8002d8c:	f000 fcca 	bl	8003724 <HAL_GPIO_Init>
}
 8002d90:	e046      	b.n	8002e20 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM5)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <HAL_TIM_MspPostInit+0x1d8>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d11e      	bne.n	8002dda <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	4b21      	ldr	r3, [pc, #132]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da4:	4a20      	ldr	r2, [pc, #128]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002da6:	f043 0301 	orr.w	r3, r3, #1
 8002daa:	6313      	str	r3, [r2, #48]	; 0x30
 8002dac:	4b1e      	ldr	r3, [pc, #120]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Left_Pwm_Pin|Right_Pwm_Pin;
 8002db8:	2303      	movs	r3, #3
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dbc:	2302      	movs	r3, #2
 8002dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002dc8:	2302      	movs	r3, #2
 8002dca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002dcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	481b      	ldr	r0, [pc, #108]	; (8002e40 <HAL_TIM_MspPostInit+0x1dc>)
 8002dd4:	f000 fca6 	bl	8003724 <HAL_GPIO_Init>
}
 8002dd8:	e022      	b.n	8002e20 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM14)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a19      	ldr	r2, [pc, #100]	; (8002e44 <HAL_TIM_MspPostInit+0x1e0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d11d      	bne.n	8002e20 <HAL_TIM_MspPostInit+0x1bc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dec:	4a0e      	ldr	r2, [pc, #56]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002dee:	f043 0301 	orr.w	r3, r3, #1
 8002df2:	6313      	str	r3, [r2, #48]	; 0x30
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_TIM_MspPostInit+0x1c4>)
 8002df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df8:	f003 0301 	and.w	r3, r3, #1
 8002dfc:	60fb      	str	r3, [r7, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_base_Pin;
 8002e00:	2380      	movs	r3, #128	; 0x80
 8002e02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e04:	2302      	movs	r3, #2
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002e10:	2309      	movs	r3, #9
 8002e12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_base_GPIO_Port, &GPIO_InitStruct);
 8002e14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4809      	ldr	r0, [pc, #36]	; (8002e40 <HAL_TIM_MspPostInit+0x1dc>)
 8002e1c:	f000 fc82 	bl	8003724 <HAL_GPIO_Init>
}
 8002e20:	bf00      	nop
 8002e22:	3738      	adds	r7, #56	; 0x38
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020400 	.word	0x40020400
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40020800 	.word	0x40020800
 8002e38:	40000800 	.word	0x40000800
 8002e3c:	40000c00 	.word	0x40000c00
 8002e40:	40020000 	.word	0x40020000
 8002e44:	40002000 	.word	0x40002000

08002e48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b08a      	sub	sp, #40	; 0x28
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e50:	f107 0314 	add.w	r3, r7, #20
 8002e54:	2200      	movs	r2, #0
 8002e56:	601a      	str	r2, [r3, #0]
 8002e58:	605a      	str	r2, [r3, #4]
 8002e5a:	609a      	str	r2, [r3, #8]
 8002e5c:	60da      	str	r2, [r3, #12]
 8002e5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a1d      	ldr	r2, [pc, #116]	; (8002edc <HAL_UART_MspInit+0x94>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d133      	bne.n	8002ed2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	; (8002ee0 <HAL_UART_MspInit+0x98>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <HAL_UART_MspInit+0x98>)
 8002e74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e78:	6413      	str	r3, [r2, #64]	; 0x40
 8002e7a:	4b19      	ldr	r3, [pc, #100]	; (8002ee0 <HAL_UART_MspInit+0x98>)
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	613b      	str	r3, [r7, #16]
 8002e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <HAL_UART_MspInit+0x98>)
 8002e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8e:	4a14      	ldr	r2, [pc, #80]	; (8002ee0 <HAL_UART_MspInit+0x98>)
 8002e90:	f043 0301 	orr.w	r3, r3, #1
 8002e94:	6313      	str	r3, [r2, #48]	; 0x30
 8002e96:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_UART_MspInit+0x98>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f003 0301 	and.w	r3, r3, #1
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002ea2:	230c      	movs	r3, #12
 8002ea4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ea6:	2302      	movs	r3, #2
 8002ea8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002eb2:	2307      	movs	r3, #7
 8002eb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002eb6:	f107 0314 	add.w	r3, r7, #20
 8002eba:	4619      	mov	r1, r3
 8002ebc:	4809      	ldr	r0, [pc, #36]	; (8002ee4 <HAL_UART_MspInit+0x9c>)
 8002ebe:	f000 fc31 	bl	8003724 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	2026      	movs	r0, #38	; 0x26
 8002ec8:	f000 fb63 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002ecc:	2026      	movs	r0, #38	; 0x26
 8002ece:	f000 fb7c 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ed2:	bf00      	nop
 8002ed4:	3728      	adds	r7, #40	; 0x28
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40004400 	.word	0x40004400
 8002ee0:	40023800 	.word	0x40023800
 8002ee4:	40020000 	.word	0x40020000

08002ee8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002eec:	e7fe      	b.n	8002eec <NMI_Handler+0x4>

08002eee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ef2:	e7fe      	b.n	8002ef2 <HardFault_Handler+0x4>

08002ef4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ef8:	e7fe      	b.n	8002ef8 <MemManage_Handler+0x4>

08002efa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002efa:	b480      	push	{r7}
 8002efc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002efe:	e7fe      	b.n	8002efe <BusFault_Handler+0x4>

08002f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f04:	e7fe      	b.n	8002f04 <UsageFault_Handler+0x4>

08002f06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f06:	b480      	push	{r7}
 8002f08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f18:	bf00      	nop
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr

08002f22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f22:	b480      	push	{r7}
 8002f24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr

08002f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f34:	f000 fa32 	bl	800339c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  msTicks++;
 8002f38:	4b03      	ldr	r3, [pc, #12]	; (8002f48 <SysTick_Handler+0x18>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	4a02      	ldr	r2, [pc, #8]	; (8002f48 <SysTick_Handler+0x18>)
 8002f40:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002f42:	bf00      	nop
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200006a4 	.word	0x200006a4

08002f4c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f50:	4802      	ldr	r0, [pc, #8]	; (8002f5c <TIM2_IRQHandler+0x10>)
 8002f52:	f001 fd85 	bl	8004a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	2000023c 	.word	0x2000023c

08002f60 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f64:	4802      	ldr	r0, [pc, #8]	; (8002f70 <TIM3_IRQHandler+0x10>)
 8002f66:	f001 fd7b 	bl	8004a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000284 	.word	0x20000284

08002f74 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f78:	4802      	ldr	r0, [pc, #8]	; (8002f84 <TIM4_IRQHandler+0x10>)
 8002f7a:	f001 fd71 	bl	8004a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f7e:	bf00      	nop
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	200002cc 	.word	0x200002cc

08002f88 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f8c:	4802      	ldr	r0, [pc, #8]	; (8002f98 <USART2_IRQHandler+0x10>)
 8002f8e:	f002 fcb5 	bl	80058fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f92:	bf00      	nop
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	200003a4 	.word	0x200003a4

08002f9c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_pulse_B_Pin);
 8002fa0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002fa4:	f000 fd84 	bl	8003ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Right_pulse_A_Pin);
 8002fa8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002fac:	f000 fd80 	bl	8003ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002fb0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002fb4:	f000 fd7c 	bl	8003ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_pulse_B_Pin);
 8002fb8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fbc:	f000 fd78 	bl	8003ab0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_pulse_A_Pin);
 8002fc0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fc4:	f000 fd74 	bl	8003ab0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002fd2:	f001 fd45 	bl	8004a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	2000035c 	.word	0x2000035c

08002fe0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <TIM5_IRQHandler+0x10>)
 8002fe6:	f001 fd3b 	bl	8004a60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	20000314 	.word	0x20000314

08002ff4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	af00      	add	r7, sp, #0
  return 1;
 8002ff8:	2301      	movs	r3, #1
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <_kill>:

int _kill(int pid, int sig)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	b082      	sub	sp, #8
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800300e:	f005 fa11 	bl	8008434 <__errno>
 8003012:	4603      	mov	r3, r0
 8003014:	2216      	movs	r2, #22
 8003016:	601a      	str	r2, [r3, #0]
  return -1;
 8003018:	f04f 33ff 	mov.w	r3, #4294967295
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}

08003024 <_exit>:

void _exit (int status)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800302c:	f04f 31ff 	mov.w	r1, #4294967295
 8003030:	6878      	ldr	r0, [r7, #4]
 8003032:	f7ff ffe7 	bl	8003004 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003036:	e7fe      	b.n	8003036 <_exit+0x12>

08003038 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003044:	2300      	movs	r3, #0
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	e00a      	b.n	8003060 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800304a:	f3af 8000 	nop.w
 800304e:	4601      	mov	r1, r0
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	1c5a      	adds	r2, r3, #1
 8003054:	60ba      	str	r2, [r7, #8]
 8003056:	b2ca      	uxtb	r2, r1
 8003058:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305a:	697b      	ldr	r3, [r7, #20]
 800305c:	3301      	adds	r3, #1
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	697a      	ldr	r2, [r7, #20]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	dbf0      	blt.n	800304a <_read+0x12>
  }

  return len;
 8003068:	687b      	ldr	r3, [r7, #4]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003072:	b580      	push	{r7, lr}
 8003074:	b086      	sub	sp, #24
 8003076:	af00      	add	r7, sp, #0
 8003078:	60f8      	str	r0, [r7, #12]
 800307a:	60b9      	str	r1, [r7, #8]
 800307c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307e:	2300      	movs	r3, #0
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	e009      	b.n	8003098 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	60ba      	str	r2, [r7, #8]
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe f81b 	bl	80010c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3301      	adds	r3, #1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	697a      	ldr	r2, [r7, #20]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	429a      	cmp	r2, r3
 800309e:	dbf1      	blt.n	8003084 <_write+0x12>
  }
  return len;
 80030a0:	687b      	ldr	r3, [r7, #4]
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3718      	adds	r7, #24
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <_close>:

int _close(int file)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80030b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b083      	sub	sp, #12
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030d2:	605a      	str	r2, [r3, #4]
  return 0;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	370c      	adds	r7, #12
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr

080030e2 <_isatty>:

int _isatty(int file)
{
 80030e2:	b480      	push	{r7}
 80030e4:	b083      	sub	sp, #12
 80030e6:	af00      	add	r7, sp, #0
 80030e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b085      	sub	sp, #20
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
	...

08003114 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b086      	sub	sp, #24
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <_sbrk+0x5c>)
 800311e:	4b15      	ldr	r3, [pc, #84]	; (8003174 <_sbrk+0x60>)
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003128:	4b13      	ldr	r3, [pc, #76]	; (8003178 <_sbrk+0x64>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d102      	bne.n	8003136 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003130:	4b11      	ldr	r3, [pc, #68]	; (8003178 <_sbrk+0x64>)
 8003132:	4a12      	ldr	r2, [pc, #72]	; (800317c <_sbrk+0x68>)
 8003134:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003136:	4b10      	ldr	r3, [pc, #64]	; (8003178 <_sbrk+0x64>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	429a      	cmp	r2, r3
 8003142:	d207      	bcs.n	8003154 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003144:	f005 f976 	bl	8008434 <__errno>
 8003148:	4603      	mov	r3, r0
 800314a:	220c      	movs	r2, #12
 800314c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800314e:	f04f 33ff 	mov.w	r3, #4294967295
 8003152:	e009      	b.n	8003168 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003154:	4b08      	ldr	r3, [pc, #32]	; (8003178 <_sbrk+0x64>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800315a:	4b07      	ldr	r3, [pc, #28]	; (8003178 <_sbrk+0x64>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4413      	add	r3, r2
 8003162:	4a05      	ldr	r2, [pc, #20]	; (8003178 <_sbrk+0x64>)
 8003164:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003166:	68fb      	ldr	r3, [r7, #12]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	20020000 	.word	0x20020000
 8003174:	00000400 	.word	0x00000400
 8003178:	200006a8 	.word	0x200006a8
 800317c:	20000800 	.word	0x20000800

08003180 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003180:	b480      	push	{r7}
 8003182:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003184:	4b06      	ldr	r3, [pc, #24]	; (80031a0 <SystemInit+0x20>)
 8003186:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318a:	4a05      	ldr	r2, [pc, #20]	; (80031a0 <SystemInit+0x20>)
 800318c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003190:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003194:	bf00      	nop
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b087      	sub	sp, #28
 80031a8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80031aa:	2300      	movs	r3, #0
 80031ac:	613b      	str	r3, [r7, #16]
 80031ae:	2300      	movs	r3, #0
 80031b0:	617b      	str	r3, [r7, #20]
 80031b2:	2302      	movs	r3, #2
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	2300      	movs	r3, #0
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	2302      	movs	r3, #2
 80031bc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80031be:	4b34      	ldr	r3, [pc, #208]	; (8003290 <SystemCoreClockUpdate+0xec>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d011      	beq.n	80031f2 <SystemCoreClockUpdate+0x4e>
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d844      	bhi.n	800325e <SystemCoreClockUpdate+0xba>
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <SystemCoreClockUpdate+0x3e>
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	2b04      	cmp	r3, #4
 80031de:	d004      	beq.n	80031ea <SystemCoreClockUpdate+0x46>
 80031e0:	e03d      	b.n	800325e <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80031e2:	4b2c      	ldr	r3, [pc, #176]	; (8003294 <SystemCoreClockUpdate+0xf0>)
 80031e4:	4a2c      	ldr	r2, [pc, #176]	; (8003298 <SystemCoreClockUpdate+0xf4>)
 80031e6:	601a      	str	r2, [r3, #0]
      break;
 80031e8:	e03d      	b.n	8003266 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80031ea:	4b2a      	ldr	r3, [pc, #168]	; (8003294 <SystemCoreClockUpdate+0xf0>)
 80031ec:	4a2b      	ldr	r2, [pc, #172]	; (800329c <SystemCoreClockUpdate+0xf8>)
 80031ee:	601a      	str	r2, [r3, #0]
      break;
 80031f0:	e039      	b.n	8003266 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80031f2:	4b27      	ldr	r3, [pc, #156]	; (8003290 <SystemCoreClockUpdate+0xec>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	0d9b      	lsrs	r3, r3, #22
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031fe:	4b24      	ldr	r3, [pc, #144]	; (8003290 <SystemCoreClockUpdate+0xec>)
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003206:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00c      	beq.n	8003228 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800320e:	4a23      	ldr	r2, [pc, #140]	; (800329c <SystemCoreClockUpdate+0xf8>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	fbb2 f3f3 	udiv	r3, r2, r3
 8003216:	4a1e      	ldr	r2, [pc, #120]	; (8003290 <SystemCoreClockUpdate+0xec>)
 8003218:	6852      	ldr	r2, [r2, #4]
 800321a:	0992      	lsrs	r2, r2, #6
 800321c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003220:	fb02 f303 	mul.w	r3, r2, r3
 8003224:	617b      	str	r3, [r7, #20]
 8003226:	e00b      	b.n	8003240 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003228:	4a1b      	ldr	r2, [pc, #108]	; (8003298 <SystemCoreClockUpdate+0xf4>)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003230:	4a17      	ldr	r2, [pc, #92]	; (8003290 <SystemCoreClockUpdate+0xec>)
 8003232:	6852      	ldr	r2, [r2, #4]
 8003234:	0992      	lsrs	r2, r2, #6
 8003236:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800323a:	fb02 f303 	mul.w	r3, r2, r3
 800323e:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003240:	4b13      	ldr	r3, [pc, #76]	; (8003290 <SystemCoreClockUpdate+0xec>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	0c1b      	lsrs	r3, r3, #16
 8003246:	f003 0303 	and.w	r3, r3, #3
 800324a:	3301      	adds	r3, #1
 800324c:	005b      	lsls	r3, r3, #1
 800324e:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	fbb2 f3f3 	udiv	r3, r2, r3
 8003258:	4a0e      	ldr	r2, [pc, #56]	; (8003294 <SystemCoreClockUpdate+0xf0>)
 800325a:	6013      	str	r3, [r2, #0]
      break;
 800325c:	e003      	b.n	8003266 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800325e:	4b0d      	ldr	r3, [pc, #52]	; (8003294 <SystemCoreClockUpdate+0xf0>)
 8003260:	4a0d      	ldr	r2, [pc, #52]	; (8003298 <SystemCoreClockUpdate+0xf4>)
 8003262:	601a      	str	r2, [r3, #0]
      break;
 8003264:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003266:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <SystemCoreClockUpdate+0xec>)
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	091b      	lsrs	r3, r3, #4
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	4a0b      	ldr	r2, [pc, #44]	; (80032a0 <SystemCoreClockUpdate+0xfc>)
 8003272:	5cd3      	ldrb	r3, [r2, r3]
 8003274:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003276:	4b07      	ldr	r3, [pc, #28]	; (8003294 <SystemCoreClockUpdate+0xf0>)
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	fa22 f303 	lsr.w	r3, r2, r3
 8003280:	4a04      	ldr	r2, [pc, #16]	; (8003294 <SystemCoreClockUpdate+0xf0>)
 8003282:	6013      	str	r3, [r2, #0]
}
 8003284:	bf00      	nop
 8003286:	371c      	adds	r7, #28
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	40023800 	.word	0x40023800
 8003294:	20000038 	.word	0x20000038
 8003298:	00f42400 	.word	0x00f42400
 800329c:	007a1200 	.word	0x007a1200
 80032a0:	0800c34c 	.word	0x0800c34c

080032a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80032a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032dc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80032a8:	f7ff ff6a 	bl	8003180 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032ac:	480c      	ldr	r0, [pc, #48]	; (80032e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80032ae:	490d      	ldr	r1, [pc, #52]	; (80032e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80032b0:	4a0d      	ldr	r2, [pc, #52]	; (80032e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80032b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032b4:	e002      	b.n	80032bc <LoopCopyDataInit>

080032b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032ba:	3304      	adds	r3, #4

080032bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032c0:	d3f9      	bcc.n	80032b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032c2:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032c4:	4c0a      	ldr	r4, [pc, #40]	; (80032f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032c8:	e001      	b.n	80032ce <LoopFillZerobss>

080032ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032cc:	3204      	adds	r2, #4

080032ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032d0:	d3fb      	bcc.n	80032ca <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80032d2:	f005 f8b5 	bl	8008440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032d6:	f7fd ffd3 	bl	8001280 <main>
  bx  lr    
 80032da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80032dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032e4:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80032e8:	0800c978 	.word	0x0800c978
  ldr r2, =_sbss
 80032ec:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80032f0:	200007fc 	.word	0x200007fc

080032f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032f4:	e7fe      	b.n	80032f4 <ADC_IRQHandler>
	...

080032f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032fc:	4b0e      	ldr	r3, [pc, #56]	; (8003338 <HAL_Init+0x40>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0d      	ldr	r2, [pc, #52]	; (8003338 <HAL_Init+0x40>)
 8003302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003306:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003308:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <HAL_Init+0x40>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a0a      	ldr	r2, [pc, #40]	; (8003338 <HAL_Init+0x40>)
 800330e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003312:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003314:	4b08      	ldr	r3, [pc, #32]	; (8003338 <HAL_Init+0x40>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a07      	ldr	r2, [pc, #28]	; (8003338 <HAL_Init+0x40>)
 800331a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800331e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003320:	2003      	movs	r0, #3
 8003322:	f000 f92b 	bl	800357c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003326:	2000      	movs	r0, #0
 8003328:	f000 f808 	bl	800333c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800332c:	f7ff fbca 	bl	8002ac4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003330:	2300      	movs	r3, #0
}
 8003332:	4618      	mov	r0, r3
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	40023c00 	.word	0x40023c00

0800333c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003344:	4b12      	ldr	r3, [pc, #72]	; (8003390 <HAL_InitTick+0x54>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b12      	ldr	r3, [pc, #72]	; (8003394 <HAL_InitTick+0x58>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	4619      	mov	r1, r3
 800334e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003352:	fbb3 f3f1 	udiv	r3, r3, r1
 8003356:	fbb2 f3f3 	udiv	r3, r2, r3
 800335a:	4618      	mov	r0, r3
 800335c:	f000 f943 	bl	80035e6 <HAL_SYSTICK_Config>
 8003360:	4603      	mov	r3, r0
 8003362:	2b00      	cmp	r3, #0
 8003364:	d001      	beq.n	800336a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e00e      	b.n	8003388 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b0f      	cmp	r3, #15
 800336e:	d80a      	bhi.n	8003386 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003370:	2200      	movs	r2, #0
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	f04f 30ff 	mov.w	r0, #4294967295
 8003378:	f000 f90b 	bl	8003592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800337c:	4a06      	ldr	r2, [pc, #24]	; (8003398 <HAL_InitTick+0x5c>)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e000      	b.n	8003388 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
}
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000038 	.word	0x20000038
 8003394:	20000040 	.word	0x20000040
 8003398:	2000003c 	.word	0x2000003c

0800339c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033a0:	4b06      	ldr	r3, [pc, #24]	; (80033bc <HAL_IncTick+0x20>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_IncTick+0x24>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4413      	add	r3, r2
 80033ac:	4a04      	ldr	r2, [pc, #16]	; (80033c0 <HAL_IncTick+0x24>)
 80033ae:	6013      	str	r3, [r2, #0]
}
 80033b0:	bf00      	nop
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
 80033ba:	bf00      	nop
 80033bc:	20000040 	.word	0x20000040
 80033c0:	200006ac 	.word	0x200006ac

080033c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033c4:	b480      	push	{r7}
 80033c6:	af00      	add	r7, sp, #0
  return uwTick;
 80033c8:	4b03      	ldr	r3, [pc, #12]	; (80033d8 <HAL_GetTick+0x14>)
 80033ca:	681b      	ldr	r3, [r3, #0]
}
 80033cc:	4618      	mov	r0, r3
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	200006ac 	.word	0x200006ac

080033dc <__NVIC_SetPriorityGrouping>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ec:	4b0c      	ldr	r3, [pc, #48]	; (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033f8:	4013      	ands	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340e:	4a04      	ldr	r2, [pc, #16]	; (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	60d3      	str	r3, [r2, #12]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_GetPriorityGrouping>:
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003428:	4b04      	ldr	r3, [pc, #16]	; (800343c <__NVIC_GetPriorityGrouping+0x18>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 0307 	and.w	r3, r3, #7
}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_EnableIRQ>:
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0b      	blt.n	800346a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4907      	ldr	r1, [pc, #28]	; (8003478 <__NVIC_EnableIRQ+0x38>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2001      	movs	r0, #1
 8003462:	fa00 f202 	lsl.w	r2, r0, r2
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_SetPriority>:
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db0a      	blt.n	80034a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	490c      	ldr	r1, [pc, #48]	; (80034c8 <__NVIC_SetPriority+0x4c>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	440b      	add	r3, r1
 80034a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034a4:	e00a      	b.n	80034bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4908      	ldr	r1, [pc, #32]	; (80034cc <__NVIC_SetPriority+0x50>)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	3b04      	subs	r3, #4
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	761a      	strb	r2, [r3, #24]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000e100 	.word	0xe000e100
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <NVIC_EncodePriority>:
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	; 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf28      	it	cs
 80034ee:	2304      	movcs	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d902      	bls.n	8003500 <NVIC_EncodePriority+0x30>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3b03      	subs	r3, #3
 80034fe:	e000      	b.n	8003502 <NVIC_EncodePriority+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	f04f 32ff 	mov.w	r2, #4294967295
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003518:	f04f 31ff 	mov.w	r1, #4294967295
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43d9      	mvns	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	4313      	orrs	r3, r2
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	; 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <SysTick_Config>:
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003548:	d301      	bcc.n	800354e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800354a:	2301      	movs	r3, #1
 800354c:	e00f      	b.n	800356e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <SysTick_Config+0x40>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003556:	210f      	movs	r1, #15
 8003558:	f04f 30ff 	mov.w	r0, #4294967295
 800355c:	f7ff ff8e 	bl	800347c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <SysTick_Config+0x40>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003566:	4b04      	ldr	r3, [pc, #16]	; (8003578 <SysTick_Config+0x40>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000e010 	.word	0xe000e010

0800357c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ff29 	bl	80033dc <__NVIC_SetPriorityGrouping>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a4:	f7ff ff3e 	bl	8003424 <__NVIC_GetPriorityGrouping>
 80035a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f7ff ff8e 	bl	80034d0 <NVIC_EncodePriority>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff5d 	bl	800347c <__NVIC_SetPriority>
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff31 	bl	8003440 <__NVIC_EnableIRQ>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ffa2 	bl	8003538 <SysTick_Config>
 80035f4:	4603      	mov	r3, r0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}

080035fe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035fe:	b580      	push	{r7, lr}
 8003600:	b084      	sub	sp, #16
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7ff feda 	bl	80033c4 <HAL_GetTick>
 8003610:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003618:	b2db      	uxtb	r3, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d008      	beq.n	8003630 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2280      	movs	r2, #128	; 0x80
 8003622:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800362c:	2301      	movs	r3, #1
 800362e:	e052      	b.n	80036d6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f022 0216 	bic.w	r2, r2, #22
 800363e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695a      	ldr	r2, [r3, #20]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800364e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003654:	2b00      	cmp	r3, #0
 8003656:	d103      	bne.n	8003660 <HAL_DMA_Abort+0x62>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800365c:	2b00      	cmp	r3, #0
 800365e:	d007      	beq.n	8003670 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0208 	bic.w	r2, r2, #8
 800366e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f022 0201 	bic.w	r2, r2, #1
 800367e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003680:	e013      	b.n	80036aa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003682:	f7ff fe9f 	bl	80033c4 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b05      	cmp	r3, #5
 800368e:	d90c      	bls.n	80036aa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2220      	movs	r2, #32
 8003694:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2203      	movs	r2, #3
 800369a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e015      	b.n	80036d6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f003 0301 	and.w	r3, r3, #1
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1e4      	bne.n	8003682 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	223f      	movs	r2, #63	; 0x3f
 80036be:	409a      	lsls	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d004      	beq.n	80036fc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2280      	movs	r2, #128	; 0x80
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e00c      	b.n	8003716 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2205      	movs	r2, #5
 8003700:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr
	...

08003724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003724:	b480      	push	{r7}
 8003726:	b089      	sub	sp, #36	; 0x24
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003736:	2300      	movs	r3, #0
 8003738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800373a:	2300      	movs	r3, #0
 800373c:	61fb      	str	r3, [r7, #28]
 800373e:	e165      	b.n	8003a0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003740:	2201      	movs	r2, #1
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	fa02 f303 	lsl.w	r3, r2, r3
 8003748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	4013      	ands	r3, r2
 8003752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	f040 8154 	bne.w	8003a06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b01      	cmp	r3, #1
 8003768:	d005      	beq.n	8003776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003772:	2b02      	cmp	r3, #2
 8003774:	d130      	bne.n	80037d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	2203      	movs	r2, #3
 8003782:	fa02 f303 	lsl.w	r3, r2, r3
 8003786:	43db      	mvns	r3, r3
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	4013      	ands	r3, r2
 800378c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	68da      	ldr	r2, [r3, #12]
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	69ba      	ldr	r2, [r7, #24]
 800379c:	4313      	orrs	r3, r2
 800379e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69ba      	ldr	r2, [r7, #24]
 80037a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037ac:	2201      	movs	r2, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	43db      	mvns	r3, r3
 80037b6:	69ba      	ldr	r2, [r7, #24]
 80037b8:	4013      	ands	r3, r2
 80037ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 0201 	and.w	r2, r3, #1
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	fa02 f303 	lsl.w	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	69ba      	ldr	r2, [r7, #24]
 80037d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	2b03      	cmp	r3, #3
 80037e2:	d017      	beq.n	8003814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ea:	69fb      	ldr	r3, [r7, #28]
 80037ec:	005b      	lsls	r3, r3, #1
 80037ee:	2203      	movs	r2, #3
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	43db      	mvns	r3, r3
 80037f6:	69ba      	ldr	r2, [r7, #24]
 80037f8:	4013      	ands	r3, r2
 80037fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	689a      	ldr	r2, [r3, #8]
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69ba      	ldr	r2, [r7, #24]
 8003812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f003 0303 	and.w	r3, r3, #3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d123      	bne.n	8003868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003820:	69fb      	ldr	r3, [r7, #28]
 8003822:	08da      	lsrs	r2, r3, #3
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3208      	adds	r2, #8
 8003828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800382c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	220f      	movs	r2, #15
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	43db      	mvns	r3, r3
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	4013      	ands	r3, r2
 8003842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	f003 0307 	and.w	r3, r3, #7
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	4313      	orrs	r3, r2
 8003858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	08da      	lsrs	r2, r3, #3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	3208      	adds	r2, #8
 8003862:	69b9      	ldr	r1, [r7, #24]
 8003864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	2203      	movs	r2, #3
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	43db      	mvns	r3, r3
 800387a:	69ba      	ldr	r2, [r7, #24]
 800387c:	4013      	ands	r3, r2
 800387e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0203 	and.w	r2, r3, #3
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	005b      	lsls	r3, r3, #1
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4313      	orrs	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f000 80ae 	beq.w	8003a06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038aa:	2300      	movs	r3, #0
 80038ac:	60fb      	str	r3, [r7, #12]
 80038ae:	4b5d      	ldr	r3, [pc, #372]	; (8003a24 <HAL_GPIO_Init+0x300>)
 80038b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b2:	4a5c      	ldr	r2, [pc, #368]	; (8003a24 <HAL_GPIO_Init+0x300>)
 80038b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038b8:	6453      	str	r3, [r2, #68]	; 0x44
 80038ba:	4b5a      	ldr	r3, [pc, #360]	; (8003a24 <HAL_GPIO_Init+0x300>)
 80038bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038c2:	60fb      	str	r3, [r7, #12]
 80038c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038c6:	4a58      	ldr	r2, [pc, #352]	; (8003a28 <HAL_GPIO_Init+0x304>)
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	089b      	lsrs	r3, r3, #2
 80038cc:	3302      	adds	r3, #2
 80038ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	220f      	movs	r2, #15
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	69ba      	ldr	r2, [r7, #24]
 80038e6:	4013      	ands	r3, r2
 80038e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4f      	ldr	r2, [pc, #316]	; (8003a2c <HAL_GPIO_Init+0x308>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d025      	beq.n	800393e <HAL_GPIO_Init+0x21a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a4e      	ldr	r2, [pc, #312]	; (8003a30 <HAL_GPIO_Init+0x30c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d01f      	beq.n	800393a <HAL_GPIO_Init+0x216>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4d      	ldr	r2, [pc, #308]	; (8003a34 <HAL_GPIO_Init+0x310>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d019      	beq.n	8003936 <HAL_GPIO_Init+0x212>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a4c      	ldr	r2, [pc, #304]	; (8003a38 <HAL_GPIO_Init+0x314>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_GPIO_Init+0x20e>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a4b      	ldr	r2, [pc, #300]	; (8003a3c <HAL_GPIO_Init+0x318>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d00d      	beq.n	800392e <HAL_GPIO_Init+0x20a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a4a      	ldr	r2, [pc, #296]	; (8003a40 <HAL_GPIO_Init+0x31c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d007      	beq.n	800392a <HAL_GPIO_Init+0x206>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a49      	ldr	r2, [pc, #292]	; (8003a44 <HAL_GPIO_Init+0x320>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_GPIO_Init+0x202>
 8003922:	2306      	movs	r3, #6
 8003924:	e00c      	b.n	8003940 <HAL_GPIO_Init+0x21c>
 8003926:	2307      	movs	r3, #7
 8003928:	e00a      	b.n	8003940 <HAL_GPIO_Init+0x21c>
 800392a:	2305      	movs	r3, #5
 800392c:	e008      	b.n	8003940 <HAL_GPIO_Init+0x21c>
 800392e:	2304      	movs	r3, #4
 8003930:	e006      	b.n	8003940 <HAL_GPIO_Init+0x21c>
 8003932:	2303      	movs	r3, #3
 8003934:	e004      	b.n	8003940 <HAL_GPIO_Init+0x21c>
 8003936:	2302      	movs	r3, #2
 8003938:	e002      	b.n	8003940 <HAL_GPIO_Init+0x21c>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <HAL_GPIO_Init+0x21c>
 800393e:	2300      	movs	r3, #0
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	f002 0203 	and.w	r2, r2, #3
 8003946:	0092      	lsls	r2, r2, #2
 8003948:	4093      	lsls	r3, r2
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4313      	orrs	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003950:	4935      	ldr	r1, [pc, #212]	; (8003a28 <HAL_GPIO_Init+0x304>)
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	089b      	lsrs	r3, r3, #2
 8003956:	3302      	adds	r3, #2
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800395e:	4b3a      	ldr	r3, [pc, #232]	; (8003a48 <HAL_GPIO_Init+0x324>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	43db      	mvns	r3, r3
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	4013      	ands	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d003      	beq.n	8003982 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003982:	4a31      	ldr	r2, [pc, #196]	; (8003a48 <HAL_GPIO_Init+0x324>)
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003988:	4b2f      	ldr	r3, [pc, #188]	; (8003a48 <HAL_GPIO_Init+0x324>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	43db      	mvns	r3, r3
 8003992:	69ba      	ldr	r2, [r7, #24]
 8003994:	4013      	ands	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d003      	beq.n	80039ac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80039ac:	4a26      	ldr	r2, [pc, #152]	; (8003a48 <HAL_GPIO_Init+0x324>)
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80039b2:	4b25      	ldr	r3, [pc, #148]	; (8003a48 <HAL_GPIO_Init+0x324>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4013      	ands	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d003      	beq.n	80039d6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039d6:	4a1c      	ldr	r2, [pc, #112]	; (8003a48 <HAL_GPIO_Init+0x324>)
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039dc:	4b1a      	ldr	r3, [pc, #104]	; (8003a48 <HAL_GPIO_Init+0x324>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	43db      	mvns	r3, r3
 80039e6:	69ba      	ldr	r2, [r7, #24]
 80039e8:	4013      	ands	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d003      	beq.n	8003a00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039f8:	69ba      	ldr	r2, [r7, #24]
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003a00:	4a11      	ldr	r2, [pc, #68]	; (8003a48 <HAL_GPIO_Init+0x324>)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a06:	69fb      	ldr	r3, [r7, #28]
 8003a08:	3301      	adds	r3, #1
 8003a0a:	61fb      	str	r3, [r7, #28]
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	2b0f      	cmp	r3, #15
 8003a10:	f67f ae96 	bls.w	8003740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a14:	bf00      	nop
 8003a16:	bf00      	nop
 8003a18:	3724      	adds	r7, #36	; 0x24
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr
 8003a22:	bf00      	nop
 8003a24:	40023800 	.word	0x40023800
 8003a28:	40013800 	.word	0x40013800
 8003a2c:	40020000 	.word	0x40020000
 8003a30:	40020400 	.word	0x40020400
 8003a34:	40020800 	.word	0x40020800
 8003a38:	40020c00 	.word	0x40020c00
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	40021400 	.word	0x40021400
 8003a44:	40021800 	.word	0x40021800
 8003a48:	40013c00 	.word	0x40013c00

08003a4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b085      	sub	sp, #20
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691a      	ldr	r2, [r3, #16]
 8003a5c:	887b      	ldrh	r3, [r7, #2]
 8003a5e:	4013      	ands	r3, r2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d002      	beq.n	8003a6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a64:	2301      	movs	r3, #1
 8003a66:	73fb      	strb	r3, [r7, #15]
 8003a68:	e001      	b.n	8003a6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b083      	sub	sp, #12
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	807b      	strh	r3, [r7, #2]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a8c:	787b      	ldrb	r3, [r7, #1]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a98:	e003      	b.n	8003aa2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a9a:	887b      	ldrh	r3, [r7, #2]
 8003a9c:	041a      	lsls	r2, r3, #16
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	619a      	str	r2, [r3, #24]
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
	...

08003ab0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003aba:	4b08      	ldr	r3, [pc, #32]	; (8003adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003abc:	695a      	ldr	r2, [r3, #20]
 8003abe:	88fb      	ldrh	r3, [r7, #6]
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d006      	beq.n	8003ad4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ac6:	4a05      	ldr	r2, [pc, #20]	; (8003adc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ac8:	88fb      	ldrh	r3, [r7, #6]
 8003aca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003acc:	88fb      	ldrh	r3, [r7, #6]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fc30 	bl	8002334 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40013c00 	.word	0x40013c00

08003ae0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e0cc      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003af4:	4b68      	ldr	r3, [pc, #416]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 030f 	and.w	r3, r3, #15
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d90c      	bls.n	8003b1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b02:	4b65      	ldr	r3, [pc, #404]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b04:	683a      	ldr	r2, [r7, #0]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b63      	ldr	r3, [pc, #396]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e0b8      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0302 	and.w	r3, r3, #2
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d020      	beq.n	8003b6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b34:	4b59      	ldr	r3, [pc, #356]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0308 	and.w	r3, r3, #8
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d005      	beq.n	8003b58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b4c:	4b53      	ldr	r3, [pc, #332]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	4a52      	ldr	r2, [pc, #328]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b58:	4b50      	ldr	r3, [pc, #320]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	494d      	ldr	r1, [pc, #308]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d044      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b7e:	4b47      	ldr	r3, [pc, #284]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d119      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e07f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d003      	beq.n	8003b9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b9a:	2b03      	cmp	r3, #3
 8003b9c:	d107      	bne.n	8003bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b9e:	4b3f      	ldr	r3, [pc, #252]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e06f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bae:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0302 	and.w	r3, r3, #2
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e067      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bbe:	4b37      	ldr	r3, [pc, #220]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	f023 0203 	bic.w	r2, r3, #3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	4934      	ldr	r1, [pc, #208]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bd0:	f7ff fbf8 	bl	80033c4 <HAL_GetTick>
 8003bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	e00a      	b.n	8003bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bd8:	f7ff fbf4 	bl	80033c4 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d901      	bls.n	8003bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bea:	2303      	movs	r3, #3
 8003bec:	e04f      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf0:	689b      	ldr	r3, [r3, #8]
 8003bf2:	f003 020c 	and.w	r2, r3, #12
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d1eb      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003c00:	4b25      	ldr	r3, [pc, #148]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	683a      	ldr	r2, [r7, #0]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d20c      	bcs.n	8003c28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c0e:	4b22      	ldr	r3, [pc, #136]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	b2d2      	uxtb	r2, r2
 8003c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c16:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_RCC_ClockConfig+0x1b8>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d001      	beq.n	8003c28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e032      	b.n	8003c8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0304 	and.w	r3, r3, #4
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c34:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	4916      	ldr	r1, [pc, #88]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0308 	and.w	r3, r3, #8
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d009      	beq.n	8003c66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c52:	4b12      	ldr	r3, [pc, #72]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	00db      	lsls	r3, r3, #3
 8003c60:	490e      	ldr	r1, [pc, #56]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	4313      	orrs	r3, r2
 8003c64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c66:	f000 f855 	bl	8003d14 <HAL_RCC_GetSysClockFreq>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <HAL_RCC_ClockConfig+0x1bc>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 030f 	and.w	r3, r3, #15
 8003c76:	490a      	ldr	r1, [pc, #40]	; (8003ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8003c78:	5ccb      	ldrb	r3, [r1, r3]
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	4a09      	ldr	r2, [pc, #36]	; (8003ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7ff fb58 	bl	800333c <HAL_InitTick>

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3710      	adds	r7, #16
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}
 8003c96:	bf00      	nop
 8003c98:	40023c00 	.word	0x40023c00
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	0800c34c 	.word	0x0800c34c
 8003ca4:	20000038 	.word	0x20000038
 8003ca8:	2000003c 	.word	0x2000003c

08003cac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cac:	b480      	push	{r7}
 8003cae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cb0:	4b03      	ldr	r3, [pc, #12]	; (8003cc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbc:	4770      	bx	lr
 8003cbe:	bf00      	nop
 8003cc0:	20000038 	.word	0x20000038

08003cc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cc8:	f7ff fff0 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	4b05      	ldr	r3, [pc, #20]	; (8003ce4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	0a9b      	lsrs	r3, r3, #10
 8003cd4:	f003 0307 	and.w	r3, r3, #7
 8003cd8:	4903      	ldr	r1, [pc, #12]	; (8003ce8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cda:	5ccb      	ldrb	r3, [r1, r3]
 8003cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	bd80      	pop	{r7, pc}
 8003ce4:	40023800 	.word	0x40023800
 8003ce8:	0800c35c 	.word	0x0800c35c

08003cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cf0:	f7ff ffdc 	bl	8003cac <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0b5b      	lsrs	r3, r3, #13
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4903      	ldr	r1, [pc, #12]	; (8003d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	40023800 	.word	0x40023800
 8003d10:	0800c35c 	.word	0x0800c35c

08003d14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d18:	b0ae      	sub	sp, #184	; 0xb8
 8003d1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d22:	2300      	movs	r3, #0
 8003d24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d3a:	4bcb      	ldr	r3, [pc, #812]	; (8004068 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	f200 8206 	bhi.w	8004154 <HAL_RCC_GetSysClockFreq+0x440>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d85 	.word	0x08003d85
 8003d54:	08004155 	.word	0x08004155
 8003d58:	08004155 	.word	0x08004155
 8003d5c:	08004155 	.word	0x08004155
 8003d60:	08003d8d 	.word	0x08003d8d
 8003d64:	08004155 	.word	0x08004155
 8003d68:	08004155 	.word	0x08004155
 8003d6c:	08004155 	.word	0x08004155
 8003d70:	08003d95 	.word	0x08003d95
 8003d74:	08004155 	.word	0x08004155
 8003d78:	08004155 	.word	0x08004155
 8003d7c:	08004155 	.word	0x08004155
 8003d80:	08003f85 	.word	0x08003f85
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d84:	4bb9      	ldr	r3, [pc, #740]	; (800406c <HAL_RCC_GetSysClockFreq+0x358>)
 8003d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d8a:	e1e7      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d8c:	4bb8      	ldr	r3, [pc, #736]	; (8004070 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d92:	e1e3      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d94:	4bb4      	ldr	r3, [pc, #720]	; (8004068 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003da0:	4bb1      	ldr	r3, [pc, #708]	; (8004068 <HAL_RCC_GetSysClockFreq+0x354>)
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d071      	beq.n	8003e90 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dac:	4bae      	ldr	r3, [pc, #696]	; (8004068 <HAL_RCC_GetSysClockFreq+0x354>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	099b      	lsrs	r3, r3, #6
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003db8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003dbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	f04f 0000 	mov.w	r0, #0
 8003dda:	f04f 0100 	mov.w	r1, #0
 8003dde:	0159      	lsls	r1, r3, #5
 8003de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de4:	0150      	lsls	r0, r2, #5
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	4621      	mov	r1, r4
 8003dec:	1a51      	subs	r1, r2, r1
 8003dee:	6439      	str	r1, [r7, #64]	; 0x40
 8003df0:	4629      	mov	r1, r5
 8003df2:	eb63 0301 	sbc.w	r3, r3, r1
 8003df6:	647b      	str	r3, [r7, #68]	; 0x44
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003e04:	4649      	mov	r1, r9
 8003e06:	018b      	lsls	r3, r1, #6
 8003e08:	4641      	mov	r1, r8
 8003e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e0e:	4641      	mov	r1, r8
 8003e10:	018a      	lsls	r2, r1, #6
 8003e12:	4641      	mov	r1, r8
 8003e14:	1a51      	subs	r1, r2, r1
 8003e16:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e18:	4649      	mov	r1, r9
 8003e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8003e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e20:	f04f 0200 	mov.w	r2, #0
 8003e24:	f04f 0300 	mov.w	r3, #0
 8003e28:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	00cb      	lsls	r3, r1, #3
 8003e30:	4641      	mov	r1, r8
 8003e32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e36:	4641      	mov	r1, r8
 8003e38:	00ca      	lsls	r2, r1, #3
 8003e3a:	4610      	mov	r0, r2
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4622      	mov	r2, r4
 8003e42:	189b      	adds	r3, r3, r2
 8003e44:	633b      	str	r3, [r7, #48]	; 0x30
 8003e46:	462b      	mov	r3, r5
 8003e48:	460a      	mov	r2, r1
 8003e4a:	eb42 0303 	adc.w	r3, r2, r3
 8003e4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003e50:	f04f 0200 	mov.w	r2, #0
 8003e54:	f04f 0300 	mov.w	r3, #0
 8003e58:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	024b      	lsls	r3, r1, #9
 8003e60:	4621      	mov	r1, r4
 8003e62:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e66:	4621      	mov	r1, r4
 8003e68:	024a      	lsls	r2, r1, #9
 8003e6a:	4610      	mov	r0, r2
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e78:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e7c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e80:	f7fc ff22 	bl	8000cc8 <__aeabi_uldivmod>
 8003e84:	4602      	mov	r2, r0
 8003e86:	460b      	mov	r3, r1
 8003e88:	4613      	mov	r3, r2
 8003e8a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e8e:	e067      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e90:	4b75      	ldr	r3, [pc, #468]	; (8004068 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	099b      	lsrs	r3, r3, #6
 8003e96:	2200      	movs	r2, #0
 8003e98:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e9c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003ea0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ea4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8003eaa:	2300      	movs	r3, #0
 8003eac:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003eae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003eb2:	4622      	mov	r2, r4
 8003eb4:	462b      	mov	r3, r5
 8003eb6:	f04f 0000 	mov.w	r0, #0
 8003eba:	f04f 0100 	mov.w	r1, #0
 8003ebe:	0159      	lsls	r1, r3, #5
 8003ec0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ec4:	0150      	lsls	r0, r2, #5
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	460b      	mov	r3, r1
 8003eca:	4621      	mov	r1, r4
 8003ecc:	1a51      	subs	r1, r2, r1
 8003ece:	62b9      	str	r1, [r7, #40]	; 0x28
 8003ed0:	4629      	mov	r1, r5
 8003ed2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ed8:	f04f 0200 	mov.w	r2, #0
 8003edc:	f04f 0300 	mov.w	r3, #0
 8003ee0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ee4:	4649      	mov	r1, r9
 8003ee6:	018b      	lsls	r3, r1, #6
 8003ee8:	4641      	mov	r1, r8
 8003eea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eee:	4641      	mov	r1, r8
 8003ef0:	018a      	lsls	r2, r1, #6
 8003ef2:	4641      	mov	r1, r8
 8003ef4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ef8:	4649      	mov	r1, r9
 8003efa:	eb63 0b01 	sbc.w	fp, r3, r1
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	f04f 0300 	mov.w	r3, #0
 8003f06:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f0a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f0e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f12:	4692      	mov	sl, r2
 8003f14:	469b      	mov	fp, r3
 8003f16:	4623      	mov	r3, r4
 8003f18:	eb1a 0303 	adds.w	r3, sl, r3
 8003f1c:	623b      	str	r3, [r7, #32]
 8003f1e:	462b      	mov	r3, r5
 8003f20:	eb4b 0303 	adc.w	r3, fp, r3
 8003f24:	627b      	str	r3, [r7, #36]	; 0x24
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f32:	4629      	mov	r1, r5
 8003f34:	028b      	lsls	r3, r1, #10
 8003f36:	4621      	mov	r1, r4
 8003f38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f3c:	4621      	mov	r1, r4
 8003f3e:	028a      	lsls	r2, r1, #10
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f48:	2200      	movs	r2, #0
 8003f4a:	673b      	str	r3, [r7, #112]	; 0x70
 8003f4c:	677a      	str	r2, [r7, #116]	; 0x74
 8003f4e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f52:	f7fc feb9 	bl	8000cc8 <__aeabi_uldivmod>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4613      	mov	r3, r2
 8003f5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f60:	4b41      	ldr	r3, [pc, #260]	; (8004068 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f76:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f82:	e0eb      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f84:	4b38      	ldr	r3, [pc, #224]	; (8004068 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f90:	4b35      	ldr	r3, [pc, #212]	; (8004068 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d06b      	beq.n	8004074 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f9c:	4b32      	ldr	r3, [pc, #200]	; (8004068 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	099b      	lsrs	r3, r3, #6
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fa6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fae:	663b      	str	r3, [r7, #96]	; 0x60
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	667b      	str	r3, [r7, #100]	; 0x64
 8003fb4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003fb8:	4622      	mov	r2, r4
 8003fba:	462b      	mov	r3, r5
 8003fbc:	f04f 0000 	mov.w	r0, #0
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	0159      	lsls	r1, r3, #5
 8003fc6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fca:	0150      	lsls	r0, r2, #5
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4621      	mov	r1, r4
 8003fd2:	1a51      	subs	r1, r2, r1
 8003fd4:	61b9      	str	r1, [r7, #24]
 8003fd6:	4629      	mov	r1, r5
 8003fd8:	eb63 0301 	sbc.w	r3, r3, r1
 8003fdc:	61fb      	str	r3, [r7, #28]
 8003fde:	f04f 0200 	mov.w	r2, #0
 8003fe2:	f04f 0300 	mov.w	r3, #0
 8003fe6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fea:	4659      	mov	r1, fp
 8003fec:	018b      	lsls	r3, r1, #6
 8003fee:	4651      	mov	r1, sl
 8003ff0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ff4:	4651      	mov	r1, sl
 8003ff6:	018a      	lsls	r2, r1, #6
 8003ff8:	4651      	mov	r1, sl
 8003ffa:	ebb2 0801 	subs.w	r8, r2, r1
 8003ffe:	4659      	mov	r1, fp
 8004000:	eb63 0901 	sbc.w	r9, r3, r1
 8004004:	f04f 0200 	mov.w	r2, #0
 8004008:	f04f 0300 	mov.w	r3, #0
 800400c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004010:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004014:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004018:	4690      	mov	r8, r2
 800401a:	4699      	mov	r9, r3
 800401c:	4623      	mov	r3, r4
 800401e:	eb18 0303 	adds.w	r3, r8, r3
 8004022:	613b      	str	r3, [r7, #16]
 8004024:	462b      	mov	r3, r5
 8004026:	eb49 0303 	adc.w	r3, r9, r3
 800402a:	617b      	str	r3, [r7, #20]
 800402c:	f04f 0200 	mov.w	r2, #0
 8004030:	f04f 0300 	mov.w	r3, #0
 8004034:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004038:	4629      	mov	r1, r5
 800403a:	024b      	lsls	r3, r1, #9
 800403c:	4621      	mov	r1, r4
 800403e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004042:	4621      	mov	r1, r4
 8004044:	024a      	lsls	r2, r1, #9
 8004046:	4610      	mov	r0, r2
 8004048:	4619      	mov	r1, r3
 800404a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800404e:	2200      	movs	r2, #0
 8004050:	65bb      	str	r3, [r7, #88]	; 0x58
 8004052:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004054:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004058:	f7fc fe36 	bl	8000cc8 <__aeabi_uldivmod>
 800405c:	4602      	mov	r2, r0
 800405e:	460b      	mov	r3, r1
 8004060:	4613      	mov	r3, r2
 8004062:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004066:	e065      	b.n	8004134 <HAL_RCC_GetSysClockFreq+0x420>
 8004068:	40023800 	.word	0x40023800
 800406c:	00f42400 	.word	0x00f42400
 8004070:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004074:	4b3d      	ldr	r3, [pc, #244]	; (800416c <HAL_RCC_GetSysClockFreq+0x458>)
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	099b      	lsrs	r3, r3, #6
 800407a:	2200      	movs	r2, #0
 800407c:	4618      	mov	r0, r3
 800407e:	4611      	mov	r1, r2
 8004080:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004084:	653b      	str	r3, [r7, #80]	; 0x50
 8004086:	2300      	movs	r3, #0
 8004088:	657b      	str	r3, [r7, #84]	; 0x54
 800408a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800408e:	4642      	mov	r2, r8
 8004090:	464b      	mov	r3, r9
 8004092:	f04f 0000 	mov.w	r0, #0
 8004096:	f04f 0100 	mov.w	r1, #0
 800409a:	0159      	lsls	r1, r3, #5
 800409c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040a0:	0150      	lsls	r0, r2, #5
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4641      	mov	r1, r8
 80040a8:	1a51      	subs	r1, r2, r1
 80040aa:	60b9      	str	r1, [r7, #8]
 80040ac:	4649      	mov	r1, r9
 80040ae:	eb63 0301 	sbc.w	r3, r3, r1
 80040b2:	60fb      	str	r3, [r7, #12]
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040c0:	4659      	mov	r1, fp
 80040c2:	018b      	lsls	r3, r1, #6
 80040c4:	4651      	mov	r1, sl
 80040c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ca:	4651      	mov	r1, sl
 80040cc:	018a      	lsls	r2, r1, #6
 80040ce:	4651      	mov	r1, sl
 80040d0:	1a54      	subs	r4, r2, r1
 80040d2:	4659      	mov	r1, fp
 80040d4:	eb63 0501 	sbc.w	r5, r3, r1
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	00eb      	lsls	r3, r5, #3
 80040e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040e6:	00e2      	lsls	r2, r4, #3
 80040e8:	4614      	mov	r4, r2
 80040ea:	461d      	mov	r5, r3
 80040ec:	4643      	mov	r3, r8
 80040ee:	18e3      	adds	r3, r4, r3
 80040f0:	603b      	str	r3, [r7, #0]
 80040f2:	464b      	mov	r3, r9
 80040f4:	eb45 0303 	adc.w	r3, r5, r3
 80040f8:	607b      	str	r3, [r7, #4]
 80040fa:	f04f 0200 	mov.w	r2, #0
 80040fe:	f04f 0300 	mov.w	r3, #0
 8004102:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004106:	4629      	mov	r1, r5
 8004108:	028b      	lsls	r3, r1, #10
 800410a:	4621      	mov	r1, r4
 800410c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004110:	4621      	mov	r1, r4
 8004112:	028a      	lsls	r2, r1, #10
 8004114:	4610      	mov	r0, r2
 8004116:	4619      	mov	r1, r3
 8004118:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800411c:	2200      	movs	r2, #0
 800411e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004120:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004122:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004126:	f7fc fdcf 	bl	8000cc8 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4613      	mov	r3, r2
 8004130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004134:	4b0d      	ldr	r3, [pc, #52]	; (800416c <HAL_RCC_GetSysClockFreq+0x458>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	0f1b      	lsrs	r3, r3, #28
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004142:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004146:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800414a:	fbb2 f3f3 	udiv	r3, r2, r3
 800414e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004152:	e003      	b.n	800415c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800415a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800415c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004160:	4618      	mov	r0, r3
 8004162:	37b8      	adds	r7, #184	; 0xb8
 8004164:	46bd      	mov	sp, r7
 8004166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416a:	bf00      	nop
 800416c:	40023800 	.word	0x40023800
 8004170:	00f42400 	.word	0x00f42400

08004174 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e28d      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8083 	beq.w	800429a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004194:	4b94      	ldr	r3, [pc, #592]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f003 030c 	and.w	r3, r3, #12
 800419c:	2b04      	cmp	r3, #4
 800419e:	d019      	beq.n	80041d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041a0:	4b91      	ldr	r3, [pc, #580]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80041a8:	2b08      	cmp	r3, #8
 80041aa:	d106      	bne.n	80041ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041ac:	4b8e      	ldr	r3, [pc, #568]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041b8:	d00c      	beq.n	80041d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ba:	4b8b      	ldr	r3, [pc, #556]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041c2:	2b0c      	cmp	r3, #12
 80041c4:	d112      	bne.n	80041ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041c6:	4b88      	ldr	r3, [pc, #544]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041d2:	d10b      	bne.n	80041ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	4b84      	ldr	r3, [pc, #528]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d05b      	beq.n	8004298 <HAL_RCC_OscConfig+0x124>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d157      	bne.n	8004298 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e25a      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041f4:	d106      	bne.n	8004204 <HAL_RCC_OscConfig+0x90>
 80041f6:	4b7c      	ldr	r3, [pc, #496]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a7b      	ldr	r2, [pc, #492]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e01d      	b.n	8004240 <HAL_RCC_OscConfig+0xcc>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800420c:	d10c      	bne.n	8004228 <HAL_RCC_OscConfig+0xb4>
 800420e:	4b76      	ldr	r3, [pc, #472]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a75      	ldr	r2, [pc, #468]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 8004214:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004218:	6013      	str	r3, [r2, #0]
 800421a:	4b73      	ldr	r3, [pc, #460]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a72      	ldr	r2, [pc, #456]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 8004220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004224:	6013      	str	r3, [r2, #0]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_OscConfig+0xcc>
 8004228:	4b6f      	ldr	r3, [pc, #444]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a6e      	ldr	r2, [pc, #440]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 800422e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004232:	6013      	str	r3, [r2, #0]
 8004234:	4b6c      	ldr	r3, [pc, #432]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a6b      	ldr	r2, [pc, #428]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 800423a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800423e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d013      	beq.n	8004270 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004248:	f7ff f8bc 	bl	80033c4 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004250:	f7ff f8b8 	bl	80033c4 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b64      	cmp	r3, #100	; 0x64
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e21f      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004262:	4b61      	ldr	r3, [pc, #388]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d0f0      	beq.n	8004250 <HAL_RCC_OscConfig+0xdc>
 800426e:	e014      	b.n	800429a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7ff f8a8 	bl	80033c4 <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004278:	f7ff f8a4 	bl	80033c4 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b64      	cmp	r3, #100	; 0x64
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e20b      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800428a:	4b57      	ldr	r3, [pc, #348]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x104>
 8004296:	e000      	b.n	800429a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004298:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d06f      	beq.n	8004386 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042a6:	4b50      	ldr	r3, [pc, #320]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d017      	beq.n	80042e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042b2:	4b4d      	ldr	r3, [pc, #308]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042ba:	2b08      	cmp	r3, #8
 80042bc:	d105      	bne.n	80042ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042be:	4b4a      	ldr	r3, [pc, #296]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d00b      	beq.n	80042e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042ca:	4b47      	ldr	r3, [pc, #284]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042d2:	2b0c      	cmp	r3, #12
 80042d4:	d11c      	bne.n	8004310 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042d6:	4b44      	ldr	r3, [pc, #272]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d116      	bne.n	8004310 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e2:	4b41      	ldr	r3, [pc, #260]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d005      	beq.n	80042fa <HAL_RCC_OscConfig+0x186>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	2b01      	cmp	r3, #1
 80042f4:	d001      	beq.n	80042fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e1d3      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4b3b      	ldr	r3, [pc, #236]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	00db      	lsls	r3, r3, #3
 8004308:	4937      	ldr	r1, [pc, #220]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 800430a:	4313      	orrs	r3, r2
 800430c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800430e:	e03a      	b.n	8004386 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d020      	beq.n	800435a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004318:	4b34      	ldr	r3, [pc, #208]	; (80043ec <HAL_RCC_OscConfig+0x278>)
 800431a:	2201      	movs	r2, #1
 800431c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800431e:	f7ff f851 	bl	80033c4 <HAL_GetTick>
 8004322:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004324:	e008      	b.n	8004338 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004326:	f7ff f84d 	bl	80033c4 <HAL_GetTick>
 800432a:	4602      	mov	r2, r0
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	1ad3      	subs	r3, r2, r3
 8004330:	2b02      	cmp	r3, #2
 8004332:	d901      	bls.n	8004338 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e1b4      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004338:	4b2b      	ldr	r3, [pc, #172]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d0f0      	beq.n	8004326 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004344:	4b28      	ldr	r3, [pc, #160]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	00db      	lsls	r3, r3, #3
 8004352:	4925      	ldr	r1, [pc, #148]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 8004354:	4313      	orrs	r3, r2
 8004356:	600b      	str	r3, [r1, #0]
 8004358:	e015      	b.n	8004386 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435a:	4b24      	ldr	r3, [pc, #144]	; (80043ec <HAL_RCC_OscConfig+0x278>)
 800435c:	2200      	movs	r2, #0
 800435e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004360:	f7ff f830 	bl	80033c4 <HAL_GetTick>
 8004364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004366:	e008      	b.n	800437a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004368:	f7ff f82c 	bl	80033c4 <HAL_GetTick>
 800436c:	4602      	mov	r2, r0
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	1ad3      	subs	r3, r2, r3
 8004372:	2b02      	cmp	r3, #2
 8004374:	d901      	bls.n	800437a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004376:	2303      	movs	r3, #3
 8004378:	e193      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437a:	4b1b      	ldr	r3, [pc, #108]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f0      	bne.n	8004368 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d036      	beq.n	8004400 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d016      	beq.n	80043c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 800439c:	2201      	movs	r2, #1
 800439e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043a0:	f7ff f810 	bl	80033c4 <HAL_GetTick>
 80043a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a6:	e008      	b.n	80043ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043a8:	f7ff f80c 	bl	80033c4 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e173      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ba:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <HAL_RCC_OscConfig+0x274>)
 80043bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043be:	f003 0302 	and.w	r3, r3, #2
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d0f0      	beq.n	80043a8 <HAL_RCC_OscConfig+0x234>
 80043c6:	e01b      	b.n	8004400 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043c8:	4b09      	ldr	r3, [pc, #36]	; (80043f0 <HAL_RCC_OscConfig+0x27c>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ce:	f7fe fff9 	bl	80033c4 <HAL_GetTick>
 80043d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d4:	e00e      	b.n	80043f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043d6:	f7fe fff5 	bl	80033c4 <HAL_GetTick>
 80043da:	4602      	mov	r2, r0
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	1ad3      	subs	r3, r2, r3
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d907      	bls.n	80043f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e15c      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
 80043e8:	40023800 	.word	0x40023800
 80043ec:	42470000 	.word	0x42470000
 80043f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043f4:	4b8a      	ldr	r3, [pc, #552]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80043f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f8:	f003 0302 	and.w	r3, r3, #2
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1ea      	bne.n	80043d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0304 	and.w	r3, r3, #4
 8004408:	2b00      	cmp	r3, #0
 800440a:	f000 8097 	beq.w	800453c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004412:	4b83      	ldr	r3, [pc, #524]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10f      	bne.n	800443e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	2300      	movs	r3, #0
 8004420:	60bb      	str	r3, [r7, #8]
 8004422:	4b7f      	ldr	r3, [pc, #508]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	4a7e      	ldr	r2, [pc, #504]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442c:	6413      	str	r3, [r2, #64]	; 0x40
 800442e:	4b7c      	ldr	r3, [pc, #496]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800443a:	2301      	movs	r3, #1
 800443c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800443e:	4b79      	ldr	r3, [pc, #484]	; (8004624 <HAL_RCC_OscConfig+0x4b0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004446:	2b00      	cmp	r3, #0
 8004448:	d118      	bne.n	800447c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800444a:	4b76      	ldr	r3, [pc, #472]	; (8004624 <HAL_RCC_OscConfig+0x4b0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a75      	ldr	r2, [pc, #468]	; (8004624 <HAL_RCC_OscConfig+0x4b0>)
 8004450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004454:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004456:	f7fe ffb5 	bl	80033c4 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800445e:	f7fe ffb1 	bl	80033c4 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e118      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004470:	4b6c      	ldr	r3, [pc, #432]	; (8004624 <HAL_RCC_OscConfig+0x4b0>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004478:	2b00      	cmp	r3, #0
 800447a:	d0f0      	beq.n	800445e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d106      	bne.n	8004492 <HAL_RCC_OscConfig+0x31e>
 8004484:	4b66      	ldr	r3, [pc, #408]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004488:	4a65      	ldr	r2, [pc, #404]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 800448a:	f043 0301 	orr.w	r3, r3, #1
 800448e:	6713      	str	r3, [r2, #112]	; 0x70
 8004490:	e01c      	b.n	80044cc <HAL_RCC_OscConfig+0x358>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	2b05      	cmp	r3, #5
 8004498:	d10c      	bne.n	80044b4 <HAL_RCC_OscConfig+0x340>
 800449a:	4b61      	ldr	r3, [pc, #388]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 800449c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800449e:	4a60      	ldr	r2, [pc, #384]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80044a0:	f043 0304 	orr.w	r3, r3, #4
 80044a4:	6713      	str	r3, [r2, #112]	; 0x70
 80044a6:	4b5e      	ldr	r3, [pc, #376]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	4a5d      	ldr	r2, [pc, #372]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80044ac:	f043 0301 	orr.w	r3, r3, #1
 80044b0:	6713      	str	r3, [r2, #112]	; 0x70
 80044b2:	e00b      	b.n	80044cc <HAL_RCC_OscConfig+0x358>
 80044b4:	4b5a      	ldr	r3, [pc, #360]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80044b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b8:	4a59      	ldr	r2, [pc, #356]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	6713      	str	r3, [r2, #112]	; 0x70
 80044c0:	4b57      	ldr	r3, [pc, #348]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80044c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c4:	4a56      	ldr	r2, [pc, #344]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80044c6:	f023 0304 	bic.w	r3, r3, #4
 80044ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d015      	beq.n	8004500 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d4:	f7fe ff76 	bl	80033c4 <HAL_GetTick>
 80044d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	e00a      	b.n	80044f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044dc:	f7fe ff72 	bl	80033c4 <HAL_GetTick>
 80044e0:	4602      	mov	r2, r0
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	1ad3      	subs	r3, r2, r3
 80044e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d901      	bls.n	80044f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e0d7      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044f2:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80044f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ee      	beq.n	80044dc <HAL_RCC_OscConfig+0x368>
 80044fe:	e014      	b.n	800452a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004500:	f7fe ff60 	bl	80033c4 <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004506:	e00a      	b.n	800451e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fe ff5c 	bl	80033c4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e0c1      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800451e:	4b40      	ldr	r3, [pc, #256]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1ee      	bne.n	8004508 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800452a:	7dfb      	ldrb	r3, [r7, #23]
 800452c:	2b01      	cmp	r3, #1
 800452e:	d105      	bne.n	800453c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004530:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	4a3a      	ldr	r2, [pc, #232]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004536:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800453a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	f000 80ad 	beq.w	80046a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004546:	4b36      	ldr	r3, [pc, #216]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b08      	cmp	r3, #8
 8004550:	d060      	beq.n	8004614 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	699b      	ldr	r3, [r3, #24]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d145      	bne.n	80045e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b33      	ldr	r3, [pc, #204]	; (8004628 <HAL_RCC_OscConfig+0x4b4>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fe ff30 	bl	80033c4 <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004568:	f7fe ff2c 	bl	80033c4 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e093      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457a:	4b29      	ldr	r3, [pc, #164]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	019b      	lsls	r3, r3, #6
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800459c:	085b      	lsrs	r3, r3, #1
 800459e:	3b01      	subs	r3, #1
 80045a0:	041b      	lsls	r3, r3, #16
 80045a2:	431a      	orrs	r2, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	431a      	orrs	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	071b      	lsls	r3, r3, #28
 80045b2:	491b      	ldr	r1, [pc, #108]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045b8:	4b1b      	ldr	r3, [pc, #108]	; (8004628 <HAL_RCC_OscConfig+0x4b4>)
 80045ba:	2201      	movs	r2, #1
 80045bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045be:	f7fe ff01 	bl	80033c4 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045c6:	f7fe fefd 	bl	80033c4 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e064      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045d8:	4b11      	ldr	r3, [pc, #68]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x452>
 80045e4:	e05c      	b.n	80046a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <HAL_RCC_OscConfig+0x4b4>)
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045ec:	f7fe feea 	bl	80033c4 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f4:	f7fe fee6 	bl	80033c4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e04d      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_RCC_OscConfig+0x4ac>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d1f0      	bne.n	80045f4 <HAL_RCC_OscConfig+0x480>
 8004612:	e045      	b.n	80046a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d107      	bne.n	800462c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e040      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
 8004620:	40023800 	.word	0x40023800
 8004624:	40007000 	.word	0x40007000
 8004628:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800462c:	4b1f      	ldr	r3, [pc, #124]	; (80046ac <HAL_RCC_OscConfig+0x538>)
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d030      	beq.n	800469c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004644:	429a      	cmp	r2, r3
 8004646:	d129      	bne.n	800469c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004652:	429a      	cmp	r2, r3
 8004654:	d122      	bne.n	800469c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004656:	68fa      	ldr	r2, [r7, #12]
 8004658:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800465c:	4013      	ands	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004662:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004664:	4293      	cmp	r3, r2
 8004666:	d119      	bne.n	800469c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004672:	085b      	lsrs	r3, r3, #1
 8004674:	3b01      	subs	r3, #1
 8004676:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004678:	429a      	cmp	r2, r3
 800467a:	d10f      	bne.n	800469c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004686:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004688:	429a      	cmp	r2, r3
 800468a:	d107      	bne.n	800469c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004698:	429a      	cmp	r2, r3
 800469a:	d001      	beq.n	80046a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e000      	b.n	80046a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3718      	adds	r7, #24
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	40023800 	.word	0x40023800

080046b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b082      	sub	sp, #8
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e041      	b.n	8004746 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d106      	bne.n	80046dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7fe fa1c 	bl	8002b14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2202      	movs	r2, #2
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681a      	ldr	r2, [r3, #0]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	3304      	adds	r3, #4
 80046ec:	4619      	mov	r1, r3
 80046ee:	4610      	mov	r0, r2
 80046f0:	f000 fc58 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b085      	sub	sp, #20
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800475e:	b2db      	uxtb	r3, r3
 8004760:	2b01      	cmp	r3, #1
 8004762:	d001      	beq.n	8004768 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e04e      	b.n	8004806 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68da      	ldr	r2, [r3, #12]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f042 0201 	orr.w	r2, r2, #1
 800477e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a23      	ldr	r2, [pc, #140]	; (8004814 <HAL_TIM_Base_Start_IT+0xc4>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d022      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004792:	d01d      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a1f      	ldr	r2, [pc, #124]	; (8004818 <HAL_TIM_Base_Start_IT+0xc8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d018      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1e      	ldr	r2, [pc, #120]	; (800481c <HAL_TIM_Base_Start_IT+0xcc>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d013      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a1c      	ldr	r2, [pc, #112]	; (8004820 <HAL_TIM_Base_Start_IT+0xd0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d00e      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a1b      	ldr	r2, [pc, #108]	; (8004824 <HAL_TIM_Base_Start_IT+0xd4>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d009      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a19      	ldr	r2, [pc, #100]	; (8004828 <HAL_TIM_Base_Start_IT+0xd8>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d004      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x80>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4a18      	ldr	r2, [pc, #96]	; (800482c <HAL_TIM_Base_Start_IT+0xdc>)
 80047cc:	4293      	cmp	r3, r2
 80047ce:	d111      	bne.n	80047f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0307 	and.w	r3, r3, #7
 80047da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2b06      	cmp	r3, #6
 80047e0:	d010      	beq.n	8004804 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f042 0201 	orr.w	r2, r2, #1
 80047f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f2:	e007      	b.n	8004804 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	40010000 	.word	0x40010000
 8004818:	40000400 	.word	0x40000400
 800481c:	40000800 	.word	0x40000800
 8004820:	40000c00 	.word	0x40000c00
 8004824:	40010400 	.word	0x40010400
 8004828:	40014000 	.word	0x40014000
 800482c:	40001800 	.word	0x40001800

08004830 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b082      	sub	sp, #8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d101      	bne.n	8004842 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800483e:	2301      	movs	r3, #1
 8004840:	e041      	b.n	80048c6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004848:	b2db      	uxtb	r3, r3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d106      	bne.n	800485c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7fe f9dc 	bl	8002c14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	3304      	adds	r3, #4
 800486c:	4619      	mov	r1, r3
 800486e:	4610      	mov	r0, r2
 8004870:	f000 fb98 	bl	8004fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3708      	adds	r7, #8
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
	...

080048d0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b084      	sub	sp, #16
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
 80048d8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d109      	bne.n	80048f4 <HAL_TIM_PWM_Start+0x24>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	bf14      	ite	ne
 80048ec:	2301      	movne	r3, #1
 80048ee:	2300      	moveq	r3, #0
 80048f0:	b2db      	uxtb	r3, r3
 80048f2:	e022      	b.n	800493a <HAL_TIM_PWM_Start+0x6a>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d109      	bne.n	800490e <HAL_TIM_PWM_Start+0x3e>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b01      	cmp	r3, #1
 8004904:	bf14      	ite	ne
 8004906:	2301      	movne	r3, #1
 8004908:	2300      	moveq	r3, #0
 800490a:	b2db      	uxtb	r3, r3
 800490c:	e015      	b.n	800493a <HAL_TIM_PWM_Start+0x6a>
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	2b08      	cmp	r3, #8
 8004912:	d109      	bne.n	8004928 <HAL_TIM_PWM_Start+0x58>
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800491a:	b2db      	uxtb	r3, r3
 800491c:	2b01      	cmp	r3, #1
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e008      	b.n	800493a <HAL_TIM_PWM_Start+0x6a>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d001      	beq.n	8004942 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e07c      	b.n	8004a3c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d104      	bne.n	8004952 <HAL_TIM_PWM_Start+0x82>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004950:	e013      	b.n	800497a <HAL_TIM_PWM_Start+0xaa>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	2b04      	cmp	r3, #4
 8004956:	d104      	bne.n	8004962 <HAL_TIM_PWM_Start+0x92>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004960:	e00b      	b.n	800497a <HAL_TIM_PWM_Start+0xaa>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b08      	cmp	r3, #8
 8004966:	d104      	bne.n	8004972 <HAL_TIM_PWM_Start+0xa2>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004970:	e003      	b.n	800497a <HAL_TIM_PWM_Start+0xaa>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2202      	movs	r2, #2
 8004976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	2201      	movs	r2, #1
 8004980:	6839      	ldr	r1, [r7, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f000 fe04 	bl	8005590 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a2d      	ldr	r2, [pc, #180]	; (8004a44 <HAL_TIM_PWM_Start+0x174>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d004      	beq.n	800499c <HAL_TIM_PWM_Start+0xcc>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a2c      	ldr	r2, [pc, #176]	; (8004a48 <HAL_TIM_PWM_Start+0x178>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d101      	bne.n	80049a0 <HAL_TIM_PWM_Start+0xd0>
 800499c:	2301      	movs	r3, #1
 800499e:	e000      	b.n	80049a2 <HAL_TIM_PWM_Start+0xd2>
 80049a0:	2300      	movs	r3, #0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d007      	beq.n	80049b6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a22      	ldr	r2, [pc, #136]	; (8004a44 <HAL_TIM_PWM_Start+0x174>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d022      	beq.n	8004a06 <HAL_TIM_PWM_Start+0x136>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c8:	d01d      	beq.n	8004a06 <HAL_TIM_PWM_Start+0x136>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_TIM_PWM_Start+0x17c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d018      	beq.n	8004a06 <HAL_TIM_PWM_Start+0x136>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a1d      	ldr	r2, [pc, #116]	; (8004a50 <HAL_TIM_PWM_Start+0x180>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d013      	beq.n	8004a06 <HAL_TIM_PWM_Start+0x136>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a1c      	ldr	r2, [pc, #112]	; (8004a54 <HAL_TIM_PWM_Start+0x184>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d00e      	beq.n	8004a06 <HAL_TIM_PWM_Start+0x136>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a16      	ldr	r2, [pc, #88]	; (8004a48 <HAL_TIM_PWM_Start+0x178>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d009      	beq.n	8004a06 <HAL_TIM_PWM_Start+0x136>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a18      	ldr	r2, [pc, #96]	; (8004a58 <HAL_TIM_PWM_Start+0x188>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d004      	beq.n	8004a06 <HAL_TIM_PWM_Start+0x136>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a16      	ldr	r2, [pc, #88]	; (8004a5c <HAL_TIM_PWM_Start+0x18c>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d111      	bne.n	8004a2a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b06      	cmp	r3, #6
 8004a16:	d010      	beq.n	8004a3a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f042 0201 	orr.w	r2, r2, #1
 8004a26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a28:	e007      	b.n	8004a3a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f042 0201 	orr.w	r2, r2, #1
 8004a38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	40010000 	.word	0x40010000
 8004a48:	40010400 	.word	0x40010400
 8004a4c:	40000400 	.word	0x40000400
 8004a50:	40000800 	.word	0x40000800
 8004a54:	40000c00 	.word	0x40000c00
 8004a58:	40014000 	.word	0x40014000
 8004a5c:	40001800 	.word	0x40001800

08004a60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b084      	sub	sp, #16
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01b      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0202 	mvn.w	r2, #2
 8004a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2201      	movs	r2, #1
 8004a9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa5b 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa4d 	bl	8004f52 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fa5e 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0304 	and.w	r3, r3, #4
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0204 	mvn.w	r2, #4
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa35 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa27 	bl	8004f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fa38 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d020      	beq.n	8004b5c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0208 	mvn.w	r2, #8
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2204      	movs	r2, #4
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f003 0303 	and.w	r3, r3, #3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 fa0f 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa01 	bl	8004f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 fa12 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d020      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0310 	and.w	r3, r3, #16
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d01b      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0210 	mvn.w	r2, #16
 8004b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	69db      	ldr	r3, [r3, #28]
 8004b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d003      	beq.n	8004b96 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f000 f9e9 	bl	8004f66 <HAL_TIM_IC_CaptureCallback>
 8004b94:	e005      	b.n	8004ba2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f9db 	bl	8004f52 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f9ec 	bl	8004f7a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0301 	and.w	r3, r3, #1
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0201 	mvn.w	r2, #1
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fd fe24 	bl	8002814 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 fd7c 	bl	80056e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00c      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 f9bd 	bl	8004f8e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f003 0320 	and.w	r3, r3, #32
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00c      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d007      	beq.n	8004c38 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0220 	mvn.w	r2, #32
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 fd4e 	bl	80056d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3710      	adds	r7, #16
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b086      	sub	sp, #24
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	60b9      	str	r1, [r7, #8]
 8004c4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c56:	2b01      	cmp	r3, #1
 8004c58:	d101      	bne.n	8004c5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c5a:	2302      	movs	r3, #2
 8004c5c:	e0ae      	b.n	8004dbc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	2201      	movs	r2, #1
 8004c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b0c      	cmp	r3, #12
 8004c6a:	f200 809f 	bhi.w	8004dac <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c6e:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c74:	08004ca9 	.word	0x08004ca9
 8004c78:	08004dad 	.word	0x08004dad
 8004c7c:	08004dad 	.word	0x08004dad
 8004c80:	08004dad 	.word	0x08004dad
 8004c84:	08004ce9 	.word	0x08004ce9
 8004c88:	08004dad 	.word	0x08004dad
 8004c8c:	08004dad 	.word	0x08004dad
 8004c90:	08004dad 	.word	0x08004dad
 8004c94:	08004d2b 	.word	0x08004d2b
 8004c98:	08004dad 	.word	0x08004dad
 8004c9c:	08004dad 	.word	0x08004dad
 8004ca0:	08004dad 	.word	0x08004dad
 8004ca4:	08004d6b 	.word	0x08004d6b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68b9      	ldr	r1, [r7, #8]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f000 fa24 	bl	80050fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	699a      	ldr	r2, [r3, #24]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0208 	orr.w	r2, r2, #8
 8004cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	699a      	ldr	r2, [r3, #24]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6999      	ldr	r1, [r3, #24]
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	691a      	ldr	r2, [r3, #16]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	430a      	orrs	r2, r1
 8004ce4:	619a      	str	r2, [r3, #24]
      break;
 8004ce6:	e064      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68b9      	ldr	r1, [r7, #8]
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f000 fa74 	bl	80051dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	699a      	ldr	r2, [r3, #24]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	699a      	ldr	r2, [r3, #24]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6999      	ldr	r1, [r3, #24]
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	021a      	lsls	r2, r3, #8
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	430a      	orrs	r2, r1
 8004d26:	619a      	str	r2, [r3, #24]
      break;
 8004d28:	e043      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	4618      	mov	r0, r3
 8004d32:	f000 fac9 	bl	80052c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	69da      	ldr	r2, [r3, #28]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0208 	orr.w	r2, r2, #8
 8004d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0204 	bic.w	r2, r2, #4
 8004d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	691a      	ldr	r2, [r3, #16]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	61da      	str	r2, [r3, #28]
      break;
 8004d68:	e023      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	68b9      	ldr	r1, [r7, #8]
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fb1d 	bl	80053b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69da      	ldr	r2, [r3, #28]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	69da      	ldr	r2, [r3, #28]
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69d9      	ldr	r1, [r3, #28]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	021a      	lsls	r2, r3, #8
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	61da      	str	r2, [r3, #28]
      break;
 8004daa:	e002      	b.n	8004db2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dac:	2301      	movs	r3, #1
 8004dae:	75fb      	strb	r3, [r7, #23]
      break;
 8004db0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2200      	movs	r2, #0
 8004db6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_TIM_ConfigClockSource+0x1c>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e0b4      	b.n	8004f4a <HAL_TIM_ConfigClockSource+0x186>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2202      	movs	r2, #2
 8004dec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004dfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	68ba      	ldr	r2, [r7, #8]
 8004e0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e18:	d03e      	beq.n	8004e98 <HAL_TIM_ConfigClockSource+0xd4>
 8004e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e1e:	f200 8087 	bhi.w	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	f000 8086 	beq.w	8004f36 <HAL_TIM_ConfigClockSource+0x172>
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2e:	d87f      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b70      	cmp	r3, #112	; 0x70
 8004e32:	d01a      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0xa6>
 8004e34:	2b70      	cmp	r3, #112	; 0x70
 8004e36:	d87b      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b60      	cmp	r3, #96	; 0x60
 8004e3a:	d050      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0x11a>
 8004e3c:	2b60      	cmp	r3, #96	; 0x60
 8004e3e:	d877      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b50      	cmp	r3, #80	; 0x50
 8004e42:	d03c      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0xfa>
 8004e44:	2b50      	cmp	r3, #80	; 0x50
 8004e46:	d873      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b40      	cmp	r3, #64	; 0x40
 8004e4a:	d058      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x13a>
 8004e4c:	2b40      	cmp	r3, #64	; 0x40
 8004e4e:	d86f      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b30      	cmp	r3, #48	; 0x30
 8004e52:	d064      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e54:	2b30      	cmp	r3, #48	; 0x30
 8004e56:	d86b      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b20      	cmp	r3, #32
 8004e5a:	d060      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e5c:	2b20      	cmp	r3, #32
 8004e5e:	d867      	bhi.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d05c      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e64:	2b10      	cmp	r3, #16
 8004e66:	d05a      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x15a>
 8004e68:	e062      	b.n	8004f30 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e7a:	f000 fb69 	bl	8005550 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e8c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68ba      	ldr	r2, [r7, #8]
 8004e94:	609a      	str	r2, [r3, #8]
      break;
 8004e96:	e04f      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ea8:	f000 fb52 	bl	8005550 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689a      	ldr	r2, [r3, #8]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eba:	609a      	str	r2, [r3, #8]
      break;
 8004ebc:	e03c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f000 fac6 	bl	800545c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2150      	movs	r1, #80	; 0x50
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 fb1f 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004edc:	e02c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eea:	461a      	mov	r2, r3
 8004eec:	f000 fae5 	bl	80054ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2160      	movs	r1, #96	; 0x60
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fb0f 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004efc:	e01c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f000 faa6 	bl	800545c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2140      	movs	r1, #64	; 0x40
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 faff 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e00c      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4619      	mov	r1, r3
 8004f28:	4610      	mov	r0, r2
 8004f2a:	f000 faf6 	bl	800551a <TIM_ITRx_SetConfig>
      break;
 8004f2e:	e003      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	73fb      	strb	r3, [r7, #15]
      break;
 8004f34:	e000      	b.n	8004f38 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f36:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f6e:	bf00      	nop
 8004f70:	370c      	adds	r7, #12
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr

08004f7a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f7a:	b480      	push	{r7}
 8004f7c:	b083      	sub	sp, #12
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f82:	bf00      	nop
 8004f84:	370c      	adds	r7, #12
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f8e:	b480      	push	{r7}
 8004f90:	b083      	sub	sp, #12
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
 8004fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a46      	ldr	r2, [pc, #280]	; (80050d0 <TIM_Base_SetConfig+0x12c>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d013      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc2:	d00f      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a43      	ldr	r2, [pc, #268]	; (80050d4 <TIM_Base_SetConfig+0x130>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d00b      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a42      	ldr	r2, [pc, #264]	; (80050d8 <TIM_Base_SetConfig+0x134>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d007      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a41      	ldr	r2, [pc, #260]	; (80050dc <TIM_Base_SetConfig+0x138>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d003      	beq.n	8004fe4 <TIM_Base_SetConfig+0x40>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a40      	ldr	r2, [pc, #256]	; (80050e0 <TIM_Base_SetConfig+0x13c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d108      	bne.n	8004ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	68fa      	ldr	r2, [r7, #12]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a35      	ldr	r2, [pc, #212]	; (80050d0 <TIM_Base_SetConfig+0x12c>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005004:	d027      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a32      	ldr	r2, [pc, #200]	; (80050d4 <TIM_Base_SetConfig+0x130>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d023      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a31      	ldr	r2, [pc, #196]	; (80050d8 <TIM_Base_SetConfig+0x134>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01f      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a30      	ldr	r2, [pc, #192]	; (80050dc <TIM_Base_SetConfig+0x138>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d01b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2f      	ldr	r2, [pc, #188]	; (80050e0 <TIM_Base_SetConfig+0x13c>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d017      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2e      	ldr	r2, [pc, #184]	; (80050e4 <TIM_Base_SetConfig+0x140>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d013      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2d      	ldr	r2, [pc, #180]	; (80050e8 <TIM_Base_SetConfig+0x144>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00f      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a2c      	ldr	r2, [pc, #176]	; (80050ec <TIM_Base_SetConfig+0x148>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a2b      	ldr	r2, [pc, #172]	; (80050f0 <TIM_Base_SetConfig+0x14c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a2a      	ldr	r2, [pc, #168]	; (80050f4 <TIM_Base_SetConfig+0x150>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_Base_SetConfig+0xb2>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a29      	ldr	r2, [pc, #164]	; (80050f8 <TIM_Base_SetConfig+0x154>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d108      	bne.n	8005068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	4313      	orrs	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	695b      	ldr	r3, [r3, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a10      	ldr	r2, [pc, #64]	; (80050d0 <TIM_Base_SetConfig+0x12c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d003      	beq.n	800509c <TIM_Base_SetConfig+0xf8>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	4a12      	ldr	r2, [pc, #72]	; (80050e0 <TIM_Base_SetConfig+0x13c>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d103      	bne.n	80050a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d105      	bne.n	80050c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	691b      	ldr	r3, [r3, #16]
 80050ba:	f023 0201 	bic.w	r2, r3, #1
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	611a      	str	r2, [r3, #16]
  }
}
 80050c2:	bf00      	nop
 80050c4:	3714      	adds	r7, #20
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	40010000 	.word	0x40010000
 80050d4:	40000400 	.word	0x40000400
 80050d8:	40000800 	.word	0x40000800
 80050dc:	40000c00 	.word	0x40000c00
 80050e0:	40010400 	.word	0x40010400
 80050e4:	40014000 	.word	0x40014000
 80050e8:	40014400 	.word	0x40014400
 80050ec:	40014800 	.word	0x40014800
 80050f0:	40001800 	.word	0x40001800
 80050f4:	40001c00 	.word	0x40001c00
 80050f8:	40002000 	.word	0x40002000

080050fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b087      	sub	sp, #28
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
 8005104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6a1b      	ldr	r3, [r3, #32]
 800510a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a1b      	ldr	r3, [r3, #32]
 8005110:	f023 0201 	bic.w	r2, r3, #1
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	699b      	ldr	r3, [r3, #24]
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f023 0303 	bic.w	r3, r3, #3
 8005132:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	4313      	orrs	r3, r2
 800513c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0302 	bic.w	r3, r3, #2
 8005144:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	4313      	orrs	r3, r2
 800514e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a20      	ldr	r2, [pc, #128]	; (80051d4 <TIM_OC1_SetConfig+0xd8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC1_SetConfig+0x64>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a1f      	ldr	r2, [pc, #124]	; (80051d8 <TIM_OC1_SetConfig+0xdc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d10c      	bne.n	800517a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f023 0308 	bic.w	r3, r3, #8
 8005166:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	697a      	ldr	r2, [r7, #20]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	f023 0304 	bic.w	r3, r3, #4
 8005178:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a15      	ldr	r2, [pc, #84]	; (80051d4 <TIM_OC1_SetConfig+0xd8>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d003      	beq.n	800518a <TIM_OC1_SetConfig+0x8e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a14      	ldr	r2, [pc, #80]	; (80051d8 <TIM_OC1_SetConfig+0xdc>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d111      	bne.n	80051ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005190:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005198:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	693a      	ldr	r2, [r7, #16]
 80051a0:	4313      	orrs	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	699b      	ldr	r3, [r3, #24]
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	693a      	ldr	r2, [r7, #16]
 80051b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	621a      	str	r2, [r3, #32]
}
 80051c8:	bf00      	nop
 80051ca:	371c      	adds	r7, #28
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400

080051dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051dc:	b480      	push	{r7}
 80051de:	b087      	sub	sp, #28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a1b      	ldr	r3, [r3, #32]
 80051ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1b      	ldr	r3, [r3, #32]
 80051f0:	f023 0210 	bic.w	r2, r3, #16
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	699b      	ldr	r3, [r3, #24]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005212:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	021b      	lsls	r3, r3, #8
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	4313      	orrs	r3, r2
 800521e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0320 	bic.w	r3, r3, #32
 8005226:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a22      	ldr	r2, [pc, #136]	; (80052c0 <TIM_OC2_SetConfig+0xe4>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_OC2_SetConfig+0x68>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a21      	ldr	r2, [pc, #132]	; (80052c4 <TIM_OC2_SetConfig+0xe8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d10d      	bne.n	8005260 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800524a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	4313      	orrs	r3, r2
 8005256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800525e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a17      	ldr	r2, [pc, #92]	; (80052c0 <TIM_OC2_SetConfig+0xe4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d003      	beq.n	8005270 <TIM_OC2_SetConfig+0x94>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a16      	ldr	r2, [pc, #88]	; (80052c4 <TIM_OC2_SetConfig+0xe8>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d113      	bne.n	8005298 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005276:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800527e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	699b      	ldr	r3, [r3, #24]
 8005290:	009b      	lsls	r3, r3, #2
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	68fa      	ldr	r2, [r7, #12]
 80052a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685a      	ldr	r2, [r3, #4]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	697a      	ldr	r2, [r7, #20]
 80052b0:	621a      	str	r2, [r3, #32]
}
 80052b2:	bf00      	nop
 80052b4:	371c      	adds	r7, #28
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40010000 	.word	0x40010000
 80052c4:	40010400 	.word	0x40010400

080052c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b087      	sub	sp, #28
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a1b      	ldr	r3, [r3, #32]
 80052dc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	f023 0303 	bic.w	r3, r3, #3
 80052fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a21      	ldr	r2, [pc, #132]	; (80053a8 <TIM_OC3_SetConfig+0xe0>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d003      	beq.n	800532e <TIM_OC3_SetConfig+0x66>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a20      	ldr	r2, [pc, #128]	; (80053ac <TIM_OC3_SetConfig+0xe4>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d10d      	bne.n	800534a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005334:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	021b      	lsls	r3, r3, #8
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	4313      	orrs	r3, r2
 8005340:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005342:	697b      	ldr	r3, [r7, #20]
 8005344:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005348:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <TIM_OC3_SetConfig+0xe0>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d003      	beq.n	800535a <TIM_OC3_SetConfig+0x92>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <TIM_OC3_SetConfig+0xe4>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d113      	bne.n	8005382 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	011b      	lsls	r3, r3, #4
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4313      	orrs	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685a      	ldr	r2, [r3, #4]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	621a      	str	r2, [r3, #32]
}
 800539c:	bf00      	nop
 800539e:	371c      	adds	r7, #28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	40010000 	.word	0x40010000
 80053ac:	40010400 	.word	0x40010400

080053b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	69db      	ldr	r3, [r3, #28]
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	031b      	lsls	r3, r3, #12
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a12      	ldr	r2, [pc, #72]	; (8005454 <TIM_OC4_SetConfig+0xa4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d003      	beq.n	8005418 <TIM_OC4_SetConfig+0x68>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a11      	ldr	r2, [pc, #68]	; (8005458 <TIM_OC4_SetConfig+0xa8>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d109      	bne.n	800542c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800541e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	695b      	ldr	r3, [r3, #20]
 8005424:	019b      	lsls	r3, r3, #6
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	4313      	orrs	r3, r2
 800542a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	685a      	ldr	r2, [r3, #4]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	621a      	str	r2, [r3, #32]
}
 8005446:	bf00      	nop
 8005448:	371c      	adds	r7, #28
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr
 8005452:	bf00      	nop
 8005454:	40010000 	.word	0x40010000
 8005458:	40010400 	.word	0x40010400

0800545c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800545c:	b480      	push	{r7}
 800545e:	b087      	sub	sp, #28
 8005460:	af00      	add	r7, sp, #0
 8005462:	60f8      	str	r0, [r7, #12]
 8005464:	60b9      	str	r1, [r7, #8]
 8005466:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	f023 0201 	bic.w	r2, r3, #1
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	699b      	ldr	r3, [r3, #24]
 800547e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005486:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f023 030a 	bic.w	r3, r3, #10
 8005498:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800549a:	697a      	ldr	r2, [r7, #20]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	621a      	str	r2, [r3, #32]
}
 80054ae:	bf00      	nop
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	60f8      	str	r0, [r7, #12]
 80054c2:	60b9      	str	r1, [r7, #8]
 80054c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6a1b      	ldr	r3, [r3, #32]
 80054ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f023 0210 	bic.w	r2, r3, #16
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	693a      	ldr	r2, [r7, #16]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	011b      	lsls	r3, r3, #4
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	621a      	str	r2, [r3, #32]
}
 800550e:	bf00      	nop
 8005510:	371c      	adds	r7, #28
 8005512:	46bd      	mov	sp, r7
 8005514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005518:	4770      	bx	lr

0800551a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800551a:	b480      	push	{r7}
 800551c:	b085      	sub	sp, #20
 800551e:	af00      	add	r7, sp, #0
 8005520:	6078      	str	r0, [r7, #4]
 8005522:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005530:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005532:	683a      	ldr	r2, [r7, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	f043 0307 	orr.w	r3, r3, #7
 800553c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	609a      	str	r2, [r3, #8]
}
 8005544:	bf00      	nop
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005550:	b480      	push	{r7}
 8005552:	b087      	sub	sp, #28
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
 800555c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800556a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	021a      	lsls	r2, r3, #8
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	431a      	orrs	r2, r3
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	4313      	orrs	r3, r2
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	609a      	str	r2, [r3, #8]
}
 8005584:	bf00      	nop
 8005586:	371c      	adds	r7, #28
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr

08005590 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005590:	b480      	push	{r7}
 8005592:	b087      	sub	sp, #28
 8005594:	af00      	add	r7, sp, #0
 8005596:	60f8      	str	r0, [r7, #12]
 8005598:	60b9      	str	r1, [r7, #8]
 800559a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	f003 031f 	and.w	r3, r3, #31
 80055a2:	2201      	movs	r2, #1
 80055a4:	fa02 f303 	lsl.w	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6a1a      	ldr	r2, [r3, #32]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	43db      	mvns	r3, r3
 80055b2:	401a      	ands	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1a      	ldr	r2, [r3, #32]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	6879      	ldr	r1, [r7, #4]
 80055c4:	fa01 f303 	lsl.w	r3, r1, r3
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055dc:	b480      	push	{r7}
 80055de:	b085      	sub	sp, #20
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
 80055e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e05a      	b.n	80056aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2202      	movs	r2, #2
 8005600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	68fa      	ldr	r2, [r7, #12]
 8005622:	4313      	orrs	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68fa      	ldr	r2, [r7, #12]
 800562c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	4a21      	ldr	r2, [pc, #132]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005634:	4293      	cmp	r3, r2
 8005636:	d022      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005640:	d01d      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005648:	4293      	cmp	r3, r2
 800564a:	d018      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a1b      	ldr	r2, [pc, #108]	; (80056c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005652:	4293      	cmp	r3, r2
 8005654:	d013      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	4a1a      	ldr	r2, [pc, #104]	; (80056c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00e      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d009      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a17      	ldr	r2, [pc, #92]	; (80056cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d004      	beq.n	800567e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d10c      	bne.n	8005698 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005684:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	4313      	orrs	r3, r2
 800568e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	68ba      	ldr	r2, [r7, #8]
 8005696:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2200      	movs	r2, #0
 80056a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	40010000 	.word	0x40010000
 80056bc:	40000400 	.word	0x40000400
 80056c0:	40000800 	.word	0x40000800
 80056c4:	40000c00 	.word	0x40000c00
 80056c8:	40010400 	.word	0x40010400
 80056cc:	40014000 	.word	0x40014000
 80056d0:	40001800 	.word	0x40001800

080056d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b083      	sub	sp, #12
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056dc:	bf00      	nop
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b083      	sub	sp, #12
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056f0:	bf00      	nop
 80056f2:	370c      	adds	r7, #12
 80056f4:	46bd      	mov	sp, r7
 80056f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fa:	4770      	bx	lr

080056fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b082      	sub	sp, #8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e042      	b.n	8005794 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005714:	b2db      	uxtb	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	d106      	bne.n	8005728 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	f7fd fb90 	bl	8002e48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2224      	movs	r2, #36	; 0x24
 800572c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68da      	ldr	r2, [r3, #12]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800573e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 fdbd 	bl	80062c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005754:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695a      	ldr	r2, [r3, #20]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005764:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	68da      	ldr	r2, [r3, #12]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005774:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2220      	movs	r2, #32
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2220      	movs	r2, #32
 8005788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2200      	movs	r2, #0
 8005790:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b08a      	sub	sp, #40	; 0x28
 80057a0:	af02      	add	r7, sp, #8
 80057a2:	60f8      	str	r0, [r7, #12]
 80057a4:	60b9      	str	r1, [r7, #8]
 80057a6:	603b      	str	r3, [r7, #0]
 80057a8:	4613      	mov	r3, r2
 80057aa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80057ac:	2300      	movs	r3, #0
 80057ae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80057b6:	b2db      	uxtb	r3, r3
 80057b8:	2b20      	cmp	r3, #32
 80057ba:	d175      	bne.n	80058a8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d002      	beq.n	80057c8 <HAL_UART_Transmit+0x2c>
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d101      	bne.n	80057cc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	e06e      	b.n	80058aa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2221      	movs	r2, #33	; 0x21
 80057d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057da:	f7fd fdf3 	bl	80033c4 <HAL_GetTick>
 80057de:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	88fa      	ldrh	r2, [r7, #6]
 80057e4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	88fa      	ldrh	r2, [r7, #6]
 80057ea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f4:	d108      	bne.n	8005808 <HAL_UART_Transmit+0x6c>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	691b      	ldr	r3, [r3, #16]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d104      	bne.n	8005808 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057fe:	2300      	movs	r3, #0
 8005800:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	e003      	b.n	8005810 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800580c:	2300      	movs	r3, #0
 800580e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005810:	e02e      	b.n	8005870 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	2200      	movs	r2, #0
 800581a:	2180      	movs	r1, #128	; 0x80
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f000 fb1f 	bl	8005e60 <UART_WaitOnFlagUntilTimeout>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d005      	beq.n	8005834 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005830:	2303      	movs	r3, #3
 8005832:	e03a      	b.n	80058aa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d10b      	bne.n	8005852 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800583a:	69bb      	ldr	r3, [r7, #24]
 800583c:	881b      	ldrh	r3, [r3, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005848:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800584a:	69bb      	ldr	r3, [r7, #24]
 800584c:	3302      	adds	r3, #2
 800584e:	61bb      	str	r3, [r7, #24]
 8005850:	e007      	b.n	8005862 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	781a      	ldrb	r2, [r3, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	3301      	adds	r3, #1
 8005860:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005874:	b29b      	uxth	r3, r3
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1cb      	bne.n	8005812 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2200      	movs	r2, #0
 8005882:	2140      	movs	r1, #64	; 0x40
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 faeb 	bl	8005e60 <UART_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e006      	b.n	80058aa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	2220      	movs	r2, #32
 80058a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80058a4:	2300      	movs	r3, #0
 80058a6:	e000      	b.n	80058aa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80058a8:	2302      	movs	r3, #2
  }
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3720      	adds	r7, #32
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	4613      	mov	r3, r2
 80058be:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d112      	bne.n	80058f2 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d002      	beq.n	80058d8 <HAL_UART_Receive_IT+0x26>
 80058d2:	88fb      	ldrh	r3, [r7, #6]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d101      	bne.n	80058dc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058d8:	2301      	movs	r3, #1
 80058da:	e00b      	b.n	80058f4 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	461a      	mov	r2, r3
 80058e6:	68b9      	ldr	r1, [r7, #8]
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fb12 	bl	8005f12 <UART_Start_Receive_IT>
 80058ee:	4603      	mov	r3, r0
 80058f0:	e000      	b.n	80058f4 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058f2:	2302      	movs	r3, #2
  }
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3710      	adds	r7, #16
 80058f8:	46bd      	mov	sp, r7
 80058fa:	bd80      	pop	{r7, pc}

080058fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b0ba      	sub	sp, #232	; 0xe8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005922:	2300      	movs	r3, #0
 8005924:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005928:	2300      	movs	r3, #0
 800592a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800592e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005932:	f003 030f 	and.w	r3, r3, #15
 8005936:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800593a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800593e:	2b00      	cmp	r3, #0
 8005940:	d10f      	bne.n	8005962 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005946:	f003 0320 	and.w	r3, r3, #32
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <HAL_UART_IRQHandler+0x66>
 800594e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005952:	f003 0320 	and.w	r3, r3, #32
 8005956:	2b00      	cmp	r3, #0
 8005958:	d003      	beq.n	8005962 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f000 fbf2 	bl	8006144 <UART_Receive_IT>
      return;
 8005960:	e25b      	b.n	8005e1a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005962:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005966:	2b00      	cmp	r3, #0
 8005968:	f000 80de 	beq.w	8005b28 <HAL_UART_IRQHandler+0x22c>
 800596c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005970:	f003 0301 	and.w	r3, r3, #1
 8005974:	2b00      	cmp	r3, #0
 8005976:	d106      	bne.n	8005986 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80d1 	beq.w	8005b28 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800598a:	f003 0301 	and.w	r3, r3, #1
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <HAL_UART_IRQHandler+0xae>
 8005992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a2:	f043 0201 	orr.w	r2, r3, #1
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ae:	f003 0304 	and.w	r3, r3, #4
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <HAL_UART_IRQHandler+0xd2>
 80059b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059c6:	f043 0202 	orr.w	r2, r3, #2
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059d2:	f003 0302 	and.w	r3, r3, #2
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d00b      	beq.n	80059f2 <HAL_UART_IRQHandler+0xf6>
 80059da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d005      	beq.n	80059f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	f043 0204 	orr.w	r2, r3, #4
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059f6:	f003 0308 	and.w	r3, r3, #8
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d011      	beq.n	8005a22 <HAL_UART_IRQHandler+0x126>
 80059fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d105      	bne.n	8005a16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a0e:	f003 0301 	and.w	r3, r3, #1
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d005      	beq.n	8005a22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	f043 0208 	orr.w	r2, r3, #8
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f000 81f2 	beq.w	8005e10 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a30:	f003 0320 	and.w	r3, r3, #32
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d008      	beq.n	8005a4a <HAL_UART_IRQHandler+0x14e>
 8005a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a3c:	f003 0320 	and.w	r3, r3, #32
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d002      	beq.n	8005a4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fb7d 	bl	8006144 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a54:	2b40      	cmp	r3, #64	; 0x40
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a66:	f003 0308 	and.w	r3, r3, #8
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <HAL_UART_IRQHandler+0x17a>
 8005a6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d04f      	beq.n	8005b16 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f000 fa85 	bl	8005f86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	695b      	ldr	r3, [r3, #20]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d141      	bne.n	8005b0e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3314      	adds	r3, #20
 8005a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3314      	adds	r3, #20
 8005ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1d9      	bne.n	8005a8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d013      	beq.n	8005b06 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	4a7e      	ldr	r2, [pc, #504]	; (8005cdc <HAL_UART_IRQHandler+0x3e0>)
 8005ae4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7fd fdf7 	bl	80036de <HAL_DMA_Abort_IT>
 8005af0:	4603      	mov	r3, r0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d016      	beq.n	8005b24 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005afa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005b00:	4610      	mov	r0, r2
 8005b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b04:	e00e      	b.n	8005b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f994 	bl	8005e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	e00a      	b.n	8005b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f990 	bl	8005e34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b14:	e006      	b.n	8005b24 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 f98c 	bl	8005e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b22:	e175      	b.n	8005e10 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	bf00      	nop
    return;
 8005b26:	e173      	b.n	8005e10 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	f040 814f 	bne.w	8005dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 8148 	beq.w	8005dd0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b44:	f003 0310 	and.w	r3, r3, #16
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	f000 8141 	beq.w	8005dd0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60bb      	str	r3, [r7, #8]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	60bb      	str	r3, [r7, #8]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	60bb      	str	r3, [r7, #8]
 8005b62:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b6e:	2b40      	cmp	r3, #64	; 0x40
 8005b70:	f040 80b6 	bne.w	8005ce0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b80:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8145 	beq.w	8005e14 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b92:	429a      	cmp	r2, r3
 8005b94:	f080 813e 	bcs.w	8005e14 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b9e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba4:	69db      	ldr	r3, [r3, #28]
 8005ba6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005baa:	f000 8088 	beq.w	8005cbe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005bbc:	e853 3f00 	ldrex	r3, [r3]
 8005bc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bcc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	330c      	adds	r3, #12
 8005bd6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bda:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005be6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d1d9      	bne.n	8005bae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3314      	adds	r3, #20
 8005c00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c04:	e853 3f00 	ldrex	r3, [r3]
 8005c08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c0c:	f023 0301 	bic.w	r3, r3, #1
 8005c10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	3314      	adds	r3, #20
 8005c1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c2a:	e841 2300 	strex	r3, r2, [r1]
 8005c2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1e1      	bne.n	8005bfa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3314      	adds	r3, #20
 8005c3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c40:	e853 3f00 	ldrex	r3, [r3]
 8005c44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3314      	adds	r3, #20
 8005c56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c62:	e841 2300 	strex	r3, r2, [r1]
 8005c66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d1e3      	bne.n	8005c36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c8e:	f023 0310 	bic.w	r3, r3, #16
 8005c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	330c      	adds	r3, #12
 8005c9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005ca0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ca2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ca6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e3      	bne.n	8005c7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fd fca0 	bl	80035fe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2202      	movs	r2, #2
 8005cc2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ccc:	b29b      	uxth	r3, r3
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	4619      	mov	r1, r3
 8005cd4:	6878      	ldr	r0, [r7, #4]
 8005cd6:	f000 f8b7 	bl	8005e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cda:	e09b      	b.n	8005e14 <HAL_UART_IRQHandler+0x518>
 8005cdc:	0800604d 	.word	0x0800604d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	1ad3      	subs	r3, r2, r3
 8005cec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	f000 808e 	beq.w	8005e18 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8089 	beq.w	8005e18 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	330c      	adds	r3, #12
 8005d0c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d10:	e853 3f00 	ldrex	r3, [r3]
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	330c      	adds	r3, #12
 8005d26:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d2a:	647a      	str	r2, [r7, #68]	; 0x44
 8005d2c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d30:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e3      	bne.n	8005d06 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	3314      	adds	r3, #20
 8005d44:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d48:	e853 3f00 	ldrex	r3, [r3]
 8005d4c:	623b      	str	r3, [r7, #32]
   return(result);
 8005d4e:	6a3b      	ldr	r3, [r7, #32]
 8005d50:	f023 0301 	bic.w	r3, r3, #1
 8005d54:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	3314      	adds	r3, #20
 8005d5e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d62:	633a      	str	r2, [r7, #48]	; 0x30
 8005d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e3      	bne.n	8005d3e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	330c      	adds	r3, #12
 8005d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f023 0310 	bic.w	r3, r3, #16
 8005d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	330c      	adds	r3, #12
 8005da4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005da8:	61fa      	str	r2, [r7, #28]
 8005daa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dac:	69b9      	ldr	r1, [r7, #24]
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	e841 2300 	strex	r3, r2, [r1]
 8005db4:	617b      	str	r3, [r7, #20]
   return(result);
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d1e3      	bne.n	8005d84 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005dc2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 f83d 	bl	8005e48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005dce:	e023      	b.n	8005e18 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d009      	beq.n	8005df0 <HAL_UART_IRQHandler+0x4f4>
 8005ddc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f943 	bl	8006074 <UART_Transmit_IT>
    return;
 8005dee:	e014      	b.n	8005e1a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d00e      	beq.n	8005e1a <HAL_UART_IRQHandler+0x51e>
 8005dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d008      	beq.n	8005e1a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f000 f983 	bl	8006114 <UART_EndTransmit_IT>
    return;
 8005e0e:	e004      	b.n	8005e1a <HAL_UART_IRQHandler+0x51e>
    return;
 8005e10:	bf00      	nop
 8005e12:	e002      	b.n	8005e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e14:	bf00      	nop
 8005e16:	e000      	b.n	8005e1a <HAL_UART_IRQHandler+0x51e>
      return;
 8005e18:	bf00      	nop
  }
}
 8005e1a:	37e8      	adds	r7, #232	; 0xe8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e28:	bf00      	nop
 8005e2a:	370c      	adds	r7, #12
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e32:	4770      	bx	lr

08005e34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e34:	b480      	push	{r7}
 8005e36:	b083      	sub	sp, #12
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b083      	sub	sp, #12
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e54:	bf00      	nop
 8005e56:	370c      	adds	r7, #12
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b086      	sub	sp, #24
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	603b      	str	r3, [r7, #0]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e70:	e03b      	b.n	8005eea <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d037      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e7a:	f7fd faa3 	bl	80033c4 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	6a3a      	ldr	r2, [r7, #32]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d302      	bcc.n	8005e90 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d101      	bne.n	8005e94 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e03a      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	68db      	ldr	r3, [r3, #12]
 8005e9a:	f003 0304 	and.w	r3, r3, #4
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d023      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2b80      	cmp	r3, #128	; 0x80
 8005ea6:	d020      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2b40      	cmp	r3, #64	; 0x40
 8005eac:	d01d      	beq.n	8005eea <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d116      	bne.n	8005eea <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	617b      	str	r3, [r7, #20]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f000 f857 	bl	8005f86 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	2208      	movs	r2, #8
 8005edc:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e00f      	b.n	8005f0a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	bf0c      	ite	eq
 8005efa:	2301      	moveq	r3, #1
 8005efc:	2300      	movne	r3, #0
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	461a      	mov	r2, r3
 8005f02:	79fb      	ldrb	r3, [r7, #7]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d0b4      	beq.n	8005e72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005f08:	2300      	movs	r3, #0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}

08005f12 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f12:	b480      	push	{r7}
 8005f14:	b085      	sub	sp, #20
 8005f16:	af00      	add	r7, sp, #0
 8005f18:	60f8      	str	r0, [r7, #12]
 8005f1a:	60b9      	str	r1, [r7, #8]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	68ba      	ldr	r2, [r7, #8]
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	88fa      	ldrh	r2, [r7, #6]
 8005f2a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	88fa      	ldrh	r2, [r7, #6]
 8005f30:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2200      	movs	r2, #0
 8005f36:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2222      	movs	r2, #34	; 0x22
 8005f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d007      	beq.n	8005f58 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f56:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	695a      	ldr	r2, [r3, #20]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	68da      	ldr	r2, [r3, #12]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0220 	orr.w	r2, r2, #32
 8005f76:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3714      	adds	r7, #20
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr

08005f86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f86:	b480      	push	{r7}
 8005f88:	b095      	sub	sp, #84	; 0x54
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330c      	adds	r3, #12
 8005f94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f98:	e853 3f00 	ldrex	r3, [r3]
 8005f9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	330c      	adds	r3, #12
 8005fac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fae:	643a      	str	r2, [r7, #64]	; 0x40
 8005fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005fb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005fb6:	e841 2300 	strex	r3, r2, [r1]
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d1e5      	bne.n	8005f8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	f023 0301 	bic.w	r3, r3, #1
 8005fd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	3314      	adds	r3, #20
 8005fe0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fe6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fe8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fea:	e841 2300 	strex	r3, r2, [r1]
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1e5      	bne.n	8005fc2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d119      	bne.n	8006032 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	60bb      	str	r3, [r7, #8]
   return(result);
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	f023 0310 	bic.w	r3, r3, #16
 8006014:	647b      	str	r3, [r7, #68]	; 0x44
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	330c      	adds	r3, #12
 800601c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800601e:	61ba      	str	r2, [r7, #24]
 8006020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6979      	ldr	r1, [r7, #20]
 8006024:	69ba      	ldr	r2, [r7, #24]
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	613b      	str	r3, [r7, #16]
   return(result);
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e5      	bne.n	8005ffe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006040:	bf00      	nop
 8006042:	3754      	adds	r7, #84	; 0x54
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b084      	sub	sp, #16
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006058:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f7ff fee4 	bl	8005e34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}

08006074 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b21      	cmp	r3, #33	; 0x21
 8006086:	d13e      	bne.n	8006106 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	689b      	ldr	r3, [r3, #8]
 800608c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006090:	d114      	bne.n	80060bc <UART_Transmit_IT+0x48>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d110      	bne.n	80060bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a1b      	ldr	r3, [r3, #32]
 800609e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	881b      	ldrh	r3, [r3, #0]
 80060a4:	461a      	mov	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	1c9a      	adds	r2, r3, #2
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	621a      	str	r2, [r3, #32]
 80060ba:	e008      	b.n	80060ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6a1b      	ldr	r3, [r3, #32]
 80060c0:	1c59      	adds	r1, r3, #1
 80060c2:	687a      	ldr	r2, [r7, #4]
 80060c4:	6211      	str	r1, [r2, #32]
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	3b01      	subs	r3, #1
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	4619      	mov	r1, r3
 80060dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10f      	bne.n	8006102 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	68da      	ldr	r2, [r3, #12]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	68da      	ldr	r2, [r3, #12]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006100:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006102:	2300      	movs	r3, #0
 8006104:	e000      	b.n	8006108 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006106:	2302      	movs	r3, #2
  }
}
 8006108:	4618      	mov	r0, r3
 800610a:	3714      	adds	r7, #20
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	68da      	ldr	r2, [r3, #12]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fe73 	bl	8005e20 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}

08006144 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08c      	sub	sp, #48	; 0x30
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006152:	b2db      	uxtb	r3, r3
 8006154:	2b22      	cmp	r3, #34	; 0x22
 8006156:	f040 80ae 	bne.w	80062b6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006162:	d117      	bne.n	8006194 <UART_Receive_IT+0x50>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d113      	bne.n	8006194 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800616c:	2300      	movs	r3, #0
 800616e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	b29b      	uxth	r3, r3
 800617e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006182:	b29a      	uxth	r2, r3
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618c:	1c9a      	adds	r2, r3, #2
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	629a      	str	r2, [r3, #40]	; 0x28
 8006192:	e026      	b.n	80061e2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006198:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800619a:	2300      	movs	r3, #0
 800619c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061a6:	d007      	beq.n	80061b8 <UART_Receive_IT+0x74>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d10a      	bne.n	80061c6 <UART_Receive_IT+0x82>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d106      	bne.n	80061c6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	b2da      	uxtb	r2, r3
 80061c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	e008      	b.n	80061d8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061d2:	b2da      	uxtb	r2, r3
 80061d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061d6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061dc:	1c5a      	adds	r2, r3, #1
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061e6:	b29b      	uxth	r3, r3
 80061e8:	3b01      	subs	r3, #1
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	687a      	ldr	r2, [r7, #4]
 80061ee:	4619      	mov	r1, r3
 80061f0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d15d      	bne.n	80062b2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0220 	bic.w	r2, r2, #32
 8006204:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68da      	ldr	r2, [r3, #12]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006214:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	695a      	ldr	r2, [r3, #20]
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0201 	bic.w	r2, r2, #1
 8006224:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2220      	movs	r2, #32
 800622a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006238:	2b01      	cmp	r3, #1
 800623a:	d135      	bne.n	80062a8 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	613b      	str	r3, [r7, #16]
   return(result);
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	f023 0310 	bic.w	r3, r3, #16
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	330c      	adds	r3, #12
 8006260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006262:	623a      	str	r2, [r7, #32]
 8006264:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006266:	69f9      	ldr	r1, [r7, #28]
 8006268:	6a3a      	ldr	r2, [r7, #32]
 800626a:	e841 2300 	strex	r3, r2, [r1]
 800626e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d1e5      	bne.n	8006242 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f003 0310 	and.w	r3, r3, #16
 8006280:	2b10      	cmp	r3, #16
 8006282:	d10a      	bne.n	800629a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006284:	2300      	movs	r3, #0
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	60fb      	str	r3, [r7, #12]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	60fb      	str	r3, [r7, #12]
 8006298:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800629e:	4619      	mov	r1, r3
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f7ff fdd1 	bl	8005e48 <HAL_UARTEx_RxEventCallback>
 80062a6:	e002      	b.n	80062ae <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fc facb 	bl	8002844 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80062ae:	2300      	movs	r3, #0
 80062b0:	e002      	b.n	80062b8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80062b2:	2300      	movs	r3, #0
 80062b4:	e000      	b.n	80062b8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80062b6:	2302      	movs	r3, #2
  }
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3730      	adds	r7, #48	; 0x30
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062c4:	b0c0      	sub	sp, #256	; 0x100
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	691b      	ldr	r3, [r3, #16]
 80062d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	68d9      	ldr	r1, [r3, #12]
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	ea40 0301 	orr.w	r3, r0, r1
 80062e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ee:	689a      	ldr	r2, [r3, #8]
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	691b      	ldr	r3, [r3, #16]
 80062f6:	431a      	orrs	r2, r3
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fc:	695b      	ldr	r3, [r3, #20]
 80062fe:	431a      	orrs	r2, r3
 8006300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	4313      	orrs	r3, r2
 8006308:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006318:	f021 010c 	bic.w	r1, r1, #12
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006326:	430b      	orrs	r3, r1
 8006328:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800632a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633a:	6999      	ldr	r1, [r3, #24]
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	ea40 0301 	orr.w	r3, r0, r1
 8006346:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	4b8f      	ldr	r3, [pc, #572]	; (800658c <UART_SetConfig+0x2cc>)
 8006350:	429a      	cmp	r2, r3
 8006352:	d005      	beq.n	8006360 <UART_SetConfig+0xa0>
 8006354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	4b8d      	ldr	r3, [pc, #564]	; (8006590 <UART_SetConfig+0x2d0>)
 800635c:	429a      	cmp	r2, r3
 800635e:	d104      	bne.n	800636a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006360:	f7fd fcc4 	bl	8003cec <HAL_RCC_GetPCLK2Freq>
 8006364:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006368:	e003      	b.n	8006372 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800636a:	f7fd fcab 	bl	8003cc4 <HAL_RCC_GetPCLK1Freq>
 800636e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006376:	69db      	ldr	r3, [r3, #28]
 8006378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800637c:	f040 810c 	bne.w	8006598 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006380:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006384:	2200      	movs	r2, #0
 8006386:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800638a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800638e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006392:	4622      	mov	r2, r4
 8006394:	462b      	mov	r3, r5
 8006396:	1891      	adds	r1, r2, r2
 8006398:	65b9      	str	r1, [r7, #88]	; 0x58
 800639a:	415b      	adcs	r3, r3
 800639c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800639e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063a2:	4621      	mov	r1, r4
 80063a4:	eb12 0801 	adds.w	r8, r2, r1
 80063a8:	4629      	mov	r1, r5
 80063aa:	eb43 0901 	adc.w	r9, r3, r1
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	f04f 0300 	mov.w	r3, #0
 80063b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063c2:	4690      	mov	r8, r2
 80063c4:	4699      	mov	r9, r3
 80063c6:	4623      	mov	r3, r4
 80063c8:	eb18 0303 	adds.w	r3, r8, r3
 80063cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063d0:	462b      	mov	r3, r5
 80063d2:	eb49 0303 	adc.w	r3, r9, r3
 80063d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063ee:	460b      	mov	r3, r1
 80063f0:	18db      	adds	r3, r3, r3
 80063f2:	653b      	str	r3, [r7, #80]	; 0x50
 80063f4:	4613      	mov	r3, r2
 80063f6:	eb42 0303 	adc.w	r3, r2, r3
 80063fa:	657b      	str	r3, [r7, #84]	; 0x54
 80063fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006400:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006404:	f7fa fc60 	bl	8000cc8 <__aeabi_uldivmod>
 8006408:	4602      	mov	r2, r0
 800640a:	460b      	mov	r3, r1
 800640c:	4b61      	ldr	r3, [pc, #388]	; (8006594 <UART_SetConfig+0x2d4>)
 800640e:	fba3 2302 	umull	r2, r3, r3, r2
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	011c      	lsls	r4, r3, #4
 8006416:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800641a:	2200      	movs	r2, #0
 800641c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006420:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006424:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006428:	4642      	mov	r2, r8
 800642a:	464b      	mov	r3, r9
 800642c:	1891      	adds	r1, r2, r2
 800642e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006430:	415b      	adcs	r3, r3
 8006432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006434:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006438:	4641      	mov	r1, r8
 800643a:	eb12 0a01 	adds.w	sl, r2, r1
 800643e:	4649      	mov	r1, r9
 8006440:	eb43 0b01 	adc.w	fp, r3, r1
 8006444:	f04f 0200 	mov.w	r2, #0
 8006448:	f04f 0300 	mov.w	r3, #0
 800644c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006450:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006454:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006458:	4692      	mov	sl, r2
 800645a:	469b      	mov	fp, r3
 800645c:	4643      	mov	r3, r8
 800645e:	eb1a 0303 	adds.w	r3, sl, r3
 8006462:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006466:	464b      	mov	r3, r9
 8006468:	eb4b 0303 	adc.w	r3, fp, r3
 800646c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800647c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006480:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006484:	460b      	mov	r3, r1
 8006486:	18db      	adds	r3, r3, r3
 8006488:	643b      	str	r3, [r7, #64]	; 0x40
 800648a:	4613      	mov	r3, r2
 800648c:	eb42 0303 	adc.w	r3, r2, r3
 8006490:	647b      	str	r3, [r7, #68]	; 0x44
 8006492:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006496:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800649a:	f7fa fc15 	bl	8000cc8 <__aeabi_uldivmod>
 800649e:	4602      	mov	r2, r0
 80064a0:	460b      	mov	r3, r1
 80064a2:	4611      	mov	r1, r2
 80064a4:	4b3b      	ldr	r3, [pc, #236]	; (8006594 <UART_SetConfig+0x2d4>)
 80064a6:	fba3 2301 	umull	r2, r3, r3, r1
 80064aa:	095b      	lsrs	r3, r3, #5
 80064ac:	2264      	movs	r2, #100	; 0x64
 80064ae:	fb02 f303 	mul.w	r3, r2, r3
 80064b2:	1acb      	subs	r3, r1, r3
 80064b4:	00db      	lsls	r3, r3, #3
 80064b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064ba:	4b36      	ldr	r3, [pc, #216]	; (8006594 <UART_SetConfig+0x2d4>)
 80064bc:	fba3 2302 	umull	r2, r3, r3, r2
 80064c0:	095b      	lsrs	r3, r3, #5
 80064c2:	005b      	lsls	r3, r3, #1
 80064c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064c8:	441c      	add	r4, r3
 80064ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064dc:	4642      	mov	r2, r8
 80064de:	464b      	mov	r3, r9
 80064e0:	1891      	adds	r1, r2, r2
 80064e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80064e4:	415b      	adcs	r3, r3
 80064e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064ec:	4641      	mov	r1, r8
 80064ee:	1851      	adds	r1, r2, r1
 80064f0:	6339      	str	r1, [r7, #48]	; 0x30
 80064f2:	4649      	mov	r1, r9
 80064f4:	414b      	adcs	r3, r1
 80064f6:	637b      	str	r3, [r7, #52]	; 0x34
 80064f8:	f04f 0200 	mov.w	r2, #0
 80064fc:	f04f 0300 	mov.w	r3, #0
 8006500:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006504:	4659      	mov	r1, fp
 8006506:	00cb      	lsls	r3, r1, #3
 8006508:	4651      	mov	r1, sl
 800650a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800650e:	4651      	mov	r1, sl
 8006510:	00ca      	lsls	r2, r1, #3
 8006512:	4610      	mov	r0, r2
 8006514:	4619      	mov	r1, r3
 8006516:	4603      	mov	r3, r0
 8006518:	4642      	mov	r2, r8
 800651a:	189b      	adds	r3, r3, r2
 800651c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006520:	464b      	mov	r3, r9
 8006522:	460a      	mov	r2, r1
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800652c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	2200      	movs	r2, #0
 8006534:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006538:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800653c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006540:	460b      	mov	r3, r1
 8006542:	18db      	adds	r3, r3, r3
 8006544:	62bb      	str	r3, [r7, #40]	; 0x28
 8006546:	4613      	mov	r3, r2
 8006548:	eb42 0303 	adc.w	r3, r2, r3
 800654c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800654e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006552:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006556:	f7fa fbb7 	bl	8000cc8 <__aeabi_uldivmod>
 800655a:	4602      	mov	r2, r0
 800655c:	460b      	mov	r3, r1
 800655e:	4b0d      	ldr	r3, [pc, #52]	; (8006594 <UART_SetConfig+0x2d4>)
 8006560:	fba3 1302 	umull	r1, r3, r3, r2
 8006564:	095b      	lsrs	r3, r3, #5
 8006566:	2164      	movs	r1, #100	; 0x64
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	1ad3      	subs	r3, r2, r3
 800656e:	00db      	lsls	r3, r3, #3
 8006570:	3332      	adds	r3, #50	; 0x32
 8006572:	4a08      	ldr	r2, [pc, #32]	; (8006594 <UART_SetConfig+0x2d4>)
 8006574:	fba2 2303 	umull	r2, r3, r2, r3
 8006578:	095b      	lsrs	r3, r3, #5
 800657a:	f003 0207 	and.w	r2, r3, #7
 800657e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4422      	add	r2, r4
 8006586:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006588:	e106      	b.n	8006798 <UART_SetConfig+0x4d8>
 800658a:	bf00      	nop
 800658c:	40011000 	.word	0x40011000
 8006590:	40011400 	.word	0x40011400
 8006594:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006598:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800659c:	2200      	movs	r2, #0
 800659e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065aa:	4642      	mov	r2, r8
 80065ac:	464b      	mov	r3, r9
 80065ae:	1891      	adds	r1, r2, r2
 80065b0:	6239      	str	r1, [r7, #32]
 80065b2:	415b      	adcs	r3, r3
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
 80065b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065ba:	4641      	mov	r1, r8
 80065bc:	1854      	adds	r4, r2, r1
 80065be:	4649      	mov	r1, r9
 80065c0:	eb43 0501 	adc.w	r5, r3, r1
 80065c4:	f04f 0200 	mov.w	r2, #0
 80065c8:	f04f 0300 	mov.w	r3, #0
 80065cc:	00eb      	lsls	r3, r5, #3
 80065ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065d2:	00e2      	lsls	r2, r4, #3
 80065d4:	4614      	mov	r4, r2
 80065d6:	461d      	mov	r5, r3
 80065d8:	4643      	mov	r3, r8
 80065da:	18e3      	adds	r3, r4, r3
 80065dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065e0:	464b      	mov	r3, r9
 80065e2:	eb45 0303 	adc.w	r3, r5, r3
 80065e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	f04f 0300 	mov.w	r3, #0
 8006602:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006606:	4629      	mov	r1, r5
 8006608:	008b      	lsls	r3, r1, #2
 800660a:	4621      	mov	r1, r4
 800660c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006610:	4621      	mov	r1, r4
 8006612:	008a      	lsls	r2, r1, #2
 8006614:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006618:	f7fa fb56 	bl	8000cc8 <__aeabi_uldivmod>
 800661c:	4602      	mov	r2, r0
 800661e:	460b      	mov	r3, r1
 8006620:	4b60      	ldr	r3, [pc, #384]	; (80067a4 <UART_SetConfig+0x4e4>)
 8006622:	fba3 2302 	umull	r2, r3, r3, r2
 8006626:	095b      	lsrs	r3, r3, #5
 8006628:	011c      	lsls	r4, r3, #4
 800662a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800662e:	2200      	movs	r2, #0
 8006630:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006634:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006638:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800663c:	4642      	mov	r2, r8
 800663e:	464b      	mov	r3, r9
 8006640:	1891      	adds	r1, r2, r2
 8006642:	61b9      	str	r1, [r7, #24]
 8006644:	415b      	adcs	r3, r3
 8006646:	61fb      	str	r3, [r7, #28]
 8006648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800664c:	4641      	mov	r1, r8
 800664e:	1851      	adds	r1, r2, r1
 8006650:	6139      	str	r1, [r7, #16]
 8006652:	4649      	mov	r1, r9
 8006654:	414b      	adcs	r3, r1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	f04f 0200 	mov.w	r2, #0
 800665c:	f04f 0300 	mov.w	r3, #0
 8006660:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006664:	4659      	mov	r1, fp
 8006666:	00cb      	lsls	r3, r1, #3
 8006668:	4651      	mov	r1, sl
 800666a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800666e:	4651      	mov	r1, sl
 8006670:	00ca      	lsls	r2, r1, #3
 8006672:	4610      	mov	r0, r2
 8006674:	4619      	mov	r1, r3
 8006676:	4603      	mov	r3, r0
 8006678:	4642      	mov	r2, r8
 800667a:	189b      	adds	r3, r3, r2
 800667c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006680:	464b      	mov	r3, r9
 8006682:	460a      	mov	r2, r1
 8006684:	eb42 0303 	adc.w	r3, r2, r3
 8006688:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800668c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	2200      	movs	r2, #0
 8006694:	67bb      	str	r3, [r7, #120]	; 0x78
 8006696:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066a4:	4649      	mov	r1, r9
 80066a6:	008b      	lsls	r3, r1, #2
 80066a8:	4641      	mov	r1, r8
 80066aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ae:	4641      	mov	r1, r8
 80066b0:	008a      	lsls	r2, r1, #2
 80066b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066b6:	f7fa fb07 	bl	8000cc8 <__aeabi_uldivmod>
 80066ba:	4602      	mov	r2, r0
 80066bc:	460b      	mov	r3, r1
 80066be:	4611      	mov	r1, r2
 80066c0:	4b38      	ldr	r3, [pc, #224]	; (80067a4 <UART_SetConfig+0x4e4>)
 80066c2:	fba3 2301 	umull	r2, r3, r3, r1
 80066c6:	095b      	lsrs	r3, r3, #5
 80066c8:	2264      	movs	r2, #100	; 0x64
 80066ca:	fb02 f303 	mul.w	r3, r2, r3
 80066ce:	1acb      	subs	r3, r1, r3
 80066d0:	011b      	lsls	r3, r3, #4
 80066d2:	3332      	adds	r3, #50	; 0x32
 80066d4:	4a33      	ldr	r2, [pc, #204]	; (80067a4 <UART_SetConfig+0x4e4>)
 80066d6:	fba2 2303 	umull	r2, r3, r2, r3
 80066da:	095b      	lsrs	r3, r3, #5
 80066dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066e0:	441c      	add	r4, r3
 80066e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066e6:	2200      	movs	r2, #0
 80066e8:	673b      	str	r3, [r7, #112]	; 0x70
 80066ea:	677a      	str	r2, [r7, #116]	; 0x74
 80066ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066f0:	4642      	mov	r2, r8
 80066f2:	464b      	mov	r3, r9
 80066f4:	1891      	adds	r1, r2, r2
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	415b      	adcs	r3, r3
 80066fa:	60fb      	str	r3, [r7, #12]
 80066fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006700:	4641      	mov	r1, r8
 8006702:	1851      	adds	r1, r2, r1
 8006704:	6039      	str	r1, [r7, #0]
 8006706:	4649      	mov	r1, r9
 8006708:	414b      	adcs	r3, r1
 800670a:	607b      	str	r3, [r7, #4]
 800670c:	f04f 0200 	mov.w	r2, #0
 8006710:	f04f 0300 	mov.w	r3, #0
 8006714:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006718:	4659      	mov	r1, fp
 800671a:	00cb      	lsls	r3, r1, #3
 800671c:	4651      	mov	r1, sl
 800671e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006722:	4651      	mov	r1, sl
 8006724:	00ca      	lsls	r2, r1, #3
 8006726:	4610      	mov	r0, r2
 8006728:	4619      	mov	r1, r3
 800672a:	4603      	mov	r3, r0
 800672c:	4642      	mov	r2, r8
 800672e:	189b      	adds	r3, r3, r2
 8006730:	66bb      	str	r3, [r7, #104]	; 0x68
 8006732:	464b      	mov	r3, r9
 8006734:	460a      	mov	r2, r1
 8006736:	eb42 0303 	adc.w	r3, r2, r3
 800673a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800673c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	663b      	str	r3, [r7, #96]	; 0x60
 8006746:	667a      	str	r2, [r7, #100]	; 0x64
 8006748:	f04f 0200 	mov.w	r2, #0
 800674c:	f04f 0300 	mov.w	r3, #0
 8006750:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006754:	4649      	mov	r1, r9
 8006756:	008b      	lsls	r3, r1, #2
 8006758:	4641      	mov	r1, r8
 800675a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800675e:	4641      	mov	r1, r8
 8006760:	008a      	lsls	r2, r1, #2
 8006762:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006766:	f7fa faaf 	bl	8000cc8 <__aeabi_uldivmod>
 800676a:	4602      	mov	r2, r0
 800676c:	460b      	mov	r3, r1
 800676e:	4b0d      	ldr	r3, [pc, #52]	; (80067a4 <UART_SetConfig+0x4e4>)
 8006770:	fba3 1302 	umull	r1, r3, r3, r2
 8006774:	095b      	lsrs	r3, r3, #5
 8006776:	2164      	movs	r1, #100	; 0x64
 8006778:	fb01 f303 	mul.w	r3, r1, r3
 800677c:	1ad3      	subs	r3, r2, r3
 800677e:	011b      	lsls	r3, r3, #4
 8006780:	3332      	adds	r3, #50	; 0x32
 8006782:	4a08      	ldr	r2, [pc, #32]	; (80067a4 <UART_SetConfig+0x4e4>)
 8006784:	fba2 2303 	umull	r2, r3, r2, r3
 8006788:	095b      	lsrs	r3, r3, #5
 800678a:	f003 020f 	and.w	r2, r3, #15
 800678e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4422      	add	r2, r4
 8006796:	609a      	str	r2, [r3, #8]
}
 8006798:	bf00      	nop
 800679a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800679e:	46bd      	mov	sp, r7
 80067a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067a4:	51eb851f 	.word	0x51eb851f

080067a8 <atof>:
 80067a8:	2100      	movs	r1, #0
 80067aa:	f000 be13 	b.w	80073d4 <strtod>

080067ae <sulp>:
 80067ae:	b570      	push	{r4, r5, r6, lr}
 80067b0:	4604      	mov	r4, r0
 80067b2:	460d      	mov	r5, r1
 80067b4:	ec45 4b10 	vmov	d0, r4, r5
 80067b8:	4616      	mov	r6, r2
 80067ba:	f003 fcd9 	bl	800a170 <__ulp>
 80067be:	ec51 0b10 	vmov	r0, r1, d0
 80067c2:	b17e      	cbz	r6, 80067e4 <sulp+0x36>
 80067c4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067c8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	dd09      	ble.n	80067e4 <sulp+0x36>
 80067d0:	051b      	lsls	r3, r3, #20
 80067d2:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80067d6:	2400      	movs	r4, #0
 80067d8:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80067dc:	4622      	mov	r2, r4
 80067de:	462b      	mov	r3, r5
 80067e0:	f7f9 ff2a 	bl	8000638 <__aeabi_dmul>
 80067e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080067e8 <_strtod_l>:
 80067e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067ec:	ed2d 8b02 	vpush	{d8}
 80067f0:	b09b      	sub	sp, #108	; 0x6c
 80067f2:	4604      	mov	r4, r0
 80067f4:	9213      	str	r2, [sp, #76]	; 0x4c
 80067f6:	2200      	movs	r2, #0
 80067f8:	9216      	str	r2, [sp, #88]	; 0x58
 80067fa:	460d      	mov	r5, r1
 80067fc:	f04f 0800 	mov.w	r8, #0
 8006800:	f04f 0900 	mov.w	r9, #0
 8006804:	460a      	mov	r2, r1
 8006806:	9215      	str	r2, [sp, #84]	; 0x54
 8006808:	7811      	ldrb	r1, [r2, #0]
 800680a:	292b      	cmp	r1, #43	; 0x2b
 800680c:	d04c      	beq.n	80068a8 <_strtod_l+0xc0>
 800680e:	d83a      	bhi.n	8006886 <_strtod_l+0x9e>
 8006810:	290d      	cmp	r1, #13
 8006812:	d834      	bhi.n	800687e <_strtod_l+0x96>
 8006814:	2908      	cmp	r1, #8
 8006816:	d834      	bhi.n	8006882 <_strtod_l+0x9a>
 8006818:	2900      	cmp	r1, #0
 800681a:	d03d      	beq.n	8006898 <_strtod_l+0xb0>
 800681c:	2200      	movs	r2, #0
 800681e:	920a      	str	r2, [sp, #40]	; 0x28
 8006820:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8006822:	7832      	ldrb	r2, [r6, #0]
 8006824:	2a30      	cmp	r2, #48	; 0x30
 8006826:	f040 80b4 	bne.w	8006992 <_strtod_l+0x1aa>
 800682a:	7872      	ldrb	r2, [r6, #1]
 800682c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006830:	2a58      	cmp	r2, #88	; 0x58
 8006832:	d170      	bne.n	8006916 <_strtod_l+0x12e>
 8006834:	9302      	str	r3, [sp, #8]
 8006836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	ab16      	add	r3, sp, #88	; 0x58
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4a8e      	ldr	r2, [pc, #568]	; (8006a78 <_strtod_l+0x290>)
 8006840:	ab17      	add	r3, sp, #92	; 0x5c
 8006842:	a915      	add	r1, sp, #84	; 0x54
 8006844:	4620      	mov	r0, r4
 8006846:	f002 fd71 	bl	800932c <__gethex>
 800684a:	f010 070f 	ands.w	r7, r0, #15
 800684e:	4605      	mov	r5, r0
 8006850:	d005      	beq.n	800685e <_strtod_l+0x76>
 8006852:	2f06      	cmp	r7, #6
 8006854:	d12a      	bne.n	80068ac <_strtod_l+0xc4>
 8006856:	3601      	adds	r6, #1
 8006858:	2300      	movs	r3, #0
 800685a:	9615      	str	r6, [sp, #84]	; 0x54
 800685c:	930a      	str	r3, [sp, #40]	; 0x28
 800685e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006860:	2b00      	cmp	r3, #0
 8006862:	f040 857f 	bne.w	8007364 <_strtod_l+0xb7c>
 8006866:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006868:	b1db      	cbz	r3, 80068a2 <_strtod_l+0xba>
 800686a:	4642      	mov	r2, r8
 800686c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006870:	ec43 2b10 	vmov	d0, r2, r3
 8006874:	b01b      	add	sp, #108	; 0x6c
 8006876:	ecbd 8b02 	vpop	{d8}
 800687a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800687e:	2920      	cmp	r1, #32
 8006880:	d1cc      	bne.n	800681c <_strtod_l+0x34>
 8006882:	3201      	adds	r2, #1
 8006884:	e7bf      	b.n	8006806 <_strtod_l+0x1e>
 8006886:	292d      	cmp	r1, #45	; 0x2d
 8006888:	d1c8      	bne.n	800681c <_strtod_l+0x34>
 800688a:	2101      	movs	r1, #1
 800688c:	910a      	str	r1, [sp, #40]	; 0x28
 800688e:	1c51      	adds	r1, r2, #1
 8006890:	9115      	str	r1, [sp, #84]	; 0x54
 8006892:	7852      	ldrb	r2, [r2, #1]
 8006894:	2a00      	cmp	r2, #0
 8006896:	d1c3      	bne.n	8006820 <_strtod_l+0x38>
 8006898:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800689a:	9515      	str	r5, [sp, #84]	; 0x54
 800689c:	2b00      	cmp	r3, #0
 800689e:	f040 855f 	bne.w	8007360 <_strtod_l+0xb78>
 80068a2:	4642      	mov	r2, r8
 80068a4:	464b      	mov	r3, r9
 80068a6:	e7e3      	b.n	8006870 <_strtod_l+0x88>
 80068a8:	2100      	movs	r1, #0
 80068aa:	e7ef      	b.n	800688c <_strtod_l+0xa4>
 80068ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80068ae:	b13a      	cbz	r2, 80068c0 <_strtod_l+0xd8>
 80068b0:	2135      	movs	r1, #53	; 0x35
 80068b2:	a818      	add	r0, sp, #96	; 0x60
 80068b4:	f003 fd59 	bl	800a36a <__copybits>
 80068b8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80068ba:	4620      	mov	r0, r4
 80068bc:	f003 f92c 	bl	8009b18 <_Bfree>
 80068c0:	3f01      	subs	r7, #1
 80068c2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068c4:	2f04      	cmp	r7, #4
 80068c6:	d806      	bhi.n	80068d6 <_strtod_l+0xee>
 80068c8:	e8df f007 	tbb	[pc, r7]
 80068cc:	201d0314 	.word	0x201d0314
 80068d0:	14          	.byte	0x14
 80068d1:	00          	.byte	0x00
 80068d2:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80068d6:	05e9      	lsls	r1, r5, #23
 80068d8:	bf48      	it	mi
 80068da:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80068de:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068e2:	0d1b      	lsrs	r3, r3, #20
 80068e4:	051b      	lsls	r3, r3, #20
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d1b9      	bne.n	800685e <_strtod_l+0x76>
 80068ea:	f001 fda3 	bl	8008434 <__errno>
 80068ee:	2322      	movs	r3, #34	; 0x22
 80068f0:	6003      	str	r3, [r0, #0]
 80068f2:	e7b4      	b.n	800685e <_strtod_l+0x76>
 80068f4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80068f8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068fc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006900:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8006904:	e7e7      	b.n	80068d6 <_strtod_l+0xee>
 8006906:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006a80 <_strtod_l+0x298>
 800690a:	e7e4      	b.n	80068d6 <_strtod_l+0xee>
 800690c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8006910:	f04f 38ff 	mov.w	r8, #4294967295
 8006914:	e7df      	b.n	80068d6 <_strtod_l+0xee>
 8006916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	9215      	str	r2, [sp, #84]	; 0x54
 800691c:	785b      	ldrb	r3, [r3, #1]
 800691e:	2b30      	cmp	r3, #48	; 0x30
 8006920:	d0f9      	beq.n	8006916 <_strtod_l+0x12e>
 8006922:	2b00      	cmp	r3, #0
 8006924:	d09b      	beq.n	800685e <_strtod_l+0x76>
 8006926:	2301      	movs	r3, #1
 8006928:	f04f 0a00 	mov.w	sl, #0
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006930:	930b      	str	r3, [sp, #44]	; 0x2c
 8006932:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8006936:	46d3      	mov	fp, sl
 8006938:	220a      	movs	r2, #10
 800693a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800693c:	7806      	ldrb	r6, [r0, #0]
 800693e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006942:	b2d9      	uxtb	r1, r3
 8006944:	2909      	cmp	r1, #9
 8006946:	d926      	bls.n	8006996 <_strtod_l+0x1ae>
 8006948:	494c      	ldr	r1, [pc, #304]	; (8006a7c <_strtod_l+0x294>)
 800694a:	2201      	movs	r2, #1
 800694c:	f001 fd03 	bl	8008356 <strncmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	d030      	beq.n	80069b6 <_strtod_l+0x1ce>
 8006954:	2000      	movs	r0, #0
 8006956:	4632      	mov	r2, r6
 8006958:	9005      	str	r0, [sp, #20]
 800695a:	465e      	mov	r6, fp
 800695c:	4603      	mov	r3, r0
 800695e:	2a65      	cmp	r2, #101	; 0x65
 8006960:	d001      	beq.n	8006966 <_strtod_l+0x17e>
 8006962:	2a45      	cmp	r2, #69	; 0x45
 8006964:	d113      	bne.n	800698e <_strtod_l+0x1a6>
 8006966:	b91e      	cbnz	r6, 8006970 <_strtod_l+0x188>
 8006968:	9a04      	ldr	r2, [sp, #16]
 800696a:	4302      	orrs	r2, r0
 800696c:	d094      	beq.n	8006898 <_strtod_l+0xb0>
 800696e:	2600      	movs	r6, #0
 8006970:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8006972:	1c6a      	adds	r2, r5, #1
 8006974:	9215      	str	r2, [sp, #84]	; 0x54
 8006976:	786a      	ldrb	r2, [r5, #1]
 8006978:	2a2b      	cmp	r2, #43	; 0x2b
 800697a:	d074      	beq.n	8006a66 <_strtod_l+0x27e>
 800697c:	2a2d      	cmp	r2, #45	; 0x2d
 800697e:	d078      	beq.n	8006a72 <_strtod_l+0x28a>
 8006980:	f04f 0c00 	mov.w	ip, #0
 8006984:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006988:	2909      	cmp	r1, #9
 800698a:	d97f      	bls.n	8006a8c <_strtod_l+0x2a4>
 800698c:	9515      	str	r5, [sp, #84]	; 0x54
 800698e:	2700      	movs	r7, #0
 8006990:	e09e      	b.n	8006ad0 <_strtod_l+0x2e8>
 8006992:	2300      	movs	r3, #0
 8006994:	e7c8      	b.n	8006928 <_strtod_l+0x140>
 8006996:	f1bb 0f08 	cmp.w	fp, #8
 800699a:	bfd8      	it	le
 800699c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800699e:	f100 0001 	add.w	r0, r0, #1
 80069a2:	bfda      	itte	le
 80069a4:	fb02 3301 	mlale	r3, r2, r1, r3
 80069a8:	9309      	strle	r3, [sp, #36]	; 0x24
 80069aa:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80069ae:	f10b 0b01 	add.w	fp, fp, #1
 80069b2:	9015      	str	r0, [sp, #84]	; 0x54
 80069b4:	e7c1      	b.n	800693a <_strtod_l+0x152>
 80069b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069b8:	1c5a      	adds	r2, r3, #1
 80069ba:	9215      	str	r2, [sp, #84]	; 0x54
 80069bc:	785a      	ldrb	r2, [r3, #1]
 80069be:	f1bb 0f00 	cmp.w	fp, #0
 80069c2:	d037      	beq.n	8006a34 <_strtod_l+0x24c>
 80069c4:	9005      	str	r0, [sp, #20]
 80069c6:	465e      	mov	r6, fp
 80069c8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80069cc:	2b09      	cmp	r3, #9
 80069ce:	d912      	bls.n	80069f6 <_strtod_l+0x20e>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e7c4      	b.n	800695e <_strtod_l+0x176>
 80069d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	9215      	str	r2, [sp, #84]	; 0x54
 80069da:	785a      	ldrb	r2, [r3, #1]
 80069dc:	3001      	adds	r0, #1
 80069de:	2a30      	cmp	r2, #48	; 0x30
 80069e0:	d0f8      	beq.n	80069d4 <_strtod_l+0x1ec>
 80069e2:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80069e6:	2b08      	cmp	r3, #8
 80069e8:	f200 84c1 	bhi.w	800736e <_strtod_l+0xb86>
 80069ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069ee:	9005      	str	r0, [sp, #20]
 80069f0:	2000      	movs	r0, #0
 80069f2:	930b      	str	r3, [sp, #44]	; 0x2c
 80069f4:	4606      	mov	r6, r0
 80069f6:	3a30      	subs	r2, #48	; 0x30
 80069f8:	f100 0301 	add.w	r3, r0, #1
 80069fc:	d014      	beq.n	8006a28 <_strtod_l+0x240>
 80069fe:	9905      	ldr	r1, [sp, #20]
 8006a00:	4419      	add	r1, r3
 8006a02:	9105      	str	r1, [sp, #20]
 8006a04:	4633      	mov	r3, r6
 8006a06:	eb00 0c06 	add.w	ip, r0, r6
 8006a0a:	210a      	movs	r1, #10
 8006a0c:	4563      	cmp	r3, ip
 8006a0e:	d113      	bne.n	8006a38 <_strtod_l+0x250>
 8006a10:	1833      	adds	r3, r6, r0
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	f106 0601 	add.w	r6, r6, #1
 8006a18:	4406      	add	r6, r0
 8006a1a:	dc1a      	bgt.n	8006a52 <_strtod_l+0x26a>
 8006a1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a1e:	230a      	movs	r3, #10
 8006a20:	fb03 2301 	mla	r3, r3, r1, r2
 8006a24:	9309      	str	r3, [sp, #36]	; 0x24
 8006a26:	2300      	movs	r3, #0
 8006a28:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a2a:	1c51      	adds	r1, r2, #1
 8006a2c:	9115      	str	r1, [sp, #84]	; 0x54
 8006a2e:	7852      	ldrb	r2, [r2, #1]
 8006a30:	4618      	mov	r0, r3
 8006a32:	e7c9      	b.n	80069c8 <_strtod_l+0x1e0>
 8006a34:	4658      	mov	r0, fp
 8006a36:	e7d2      	b.n	80069de <_strtod_l+0x1f6>
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	f103 0301 	add.w	r3, r3, #1
 8006a3e:	dc03      	bgt.n	8006a48 <_strtod_l+0x260>
 8006a40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a42:	434f      	muls	r7, r1
 8006a44:	9709      	str	r7, [sp, #36]	; 0x24
 8006a46:	e7e1      	b.n	8006a0c <_strtod_l+0x224>
 8006a48:	2b10      	cmp	r3, #16
 8006a4a:	bfd8      	it	le
 8006a4c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006a50:	e7dc      	b.n	8006a0c <_strtod_l+0x224>
 8006a52:	2e10      	cmp	r6, #16
 8006a54:	bfdc      	itt	le
 8006a56:	230a      	movle	r3, #10
 8006a58:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006a5c:	e7e3      	b.n	8006a26 <_strtod_l+0x23e>
 8006a5e:	2300      	movs	r3, #0
 8006a60:	9305      	str	r3, [sp, #20]
 8006a62:	2301      	movs	r3, #1
 8006a64:	e780      	b.n	8006968 <_strtod_l+0x180>
 8006a66:	f04f 0c00 	mov.w	ip, #0
 8006a6a:	1caa      	adds	r2, r5, #2
 8006a6c:	9215      	str	r2, [sp, #84]	; 0x54
 8006a6e:	78aa      	ldrb	r2, [r5, #2]
 8006a70:	e788      	b.n	8006984 <_strtod_l+0x19c>
 8006a72:	f04f 0c01 	mov.w	ip, #1
 8006a76:	e7f8      	b.n	8006a6a <_strtod_l+0x282>
 8006a78:	0800c368 	.word	0x0800c368
 8006a7c:	0800c364 	.word	0x0800c364
 8006a80:	7ff00000 	.word	0x7ff00000
 8006a84:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a86:	1c51      	adds	r1, r2, #1
 8006a88:	9115      	str	r1, [sp, #84]	; 0x54
 8006a8a:	7852      	ldrb	r2, [r2, #1]
 8006a8c:	2a30      	cmp	r2, #48	; 0x30
 8006a8e:	d0f9      	beq.n	8006a84 <_strtod_l+0x29c>
 8006a90:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006a94:	2908      	cmp	r1, #8
 8006a96:	f63f af7a 	bhi.w	800698e <_strtod_l+0x1a6>
 8006a9a:	3a30      	subs	r2, #48	; 0x30
 8006a9c:	9208      	str	r2, [sp, #32]
 8006a9e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006aa0:	920c      	str	r2, [sp, #48]	; 0x30
 8006aa2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006aa4:	1c57      	adds	r7, r2, #1
 8006aa6:	9715      	str	r7, [sp, #84]	; 0x54
 8006aa8:	7852      	ldrb	r2, [r2, #1]
 8006aaa:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006aae:	f1be 0f09 	cmp.w	lr, #9
 8006ab2:	d938      	bls.n	8006b26 <_strtod_l+0x33e>
 8006ab4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ab6:	1a7f      	subs	r7, r7, r1
 8006ab8:	2f08      	cmp	r7, #8
 8006aba:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006abe:	dc03      	bgt.n	8006ac8 <_strtod_l+0x2e0>
 8006ac0:	9908      	ldr	r1, [sp, #32]
 8006ac2:	428f      	cmp	r7, r1
 8006ac4:	bfa8      	it	ge
 8006ac6:	460f      	movge	r7, r1
 8006ac8:	f1bc 0f00 	cmp.w	ip, #0
 8006acc:	d000      	beq.n	8006ad0 <_strtod_l+0x2e8>
 8006ace:	427f      	negs	r7, r7
 8006ad0:	2e00      	cmp	r6, #0
 8006ad2:	d14f      	bne.n	8006b74 <_strtod_l+0x38c>
 8006ad4:	9904      	ldr	r1, [sp, #16]
 8006ad6:	4301      	orrs	r1, r0
 8006ad8:	f47f aec1 	bne.w	800685e <_strtod_l+0x76>
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f47f aedb 	bne.w	8006898 <_strtod_l+0xb0>
 8006ae2:	2a69      	cmp	r2, #105	; 0x69
 8006ae4:	d029      	beq.n	8006b3a <_strtod_l+0x352>
 8006ae6:	dc26      	bgt.n	8006b36 <_strtod_l+0x34e>
 8006ae8:	2a49      	cmp	r2, #73	; 0x49
 8006aea:	d026      	beq.n	8006b3a <_strtod_l+0x352>
 8006aec:	2a4e      	cmp	r2, #78	; 0x4e
 8006aee:	f47f aed3 	bne.w	8006898 <_strtod_l+0xb0>
 8006af2:	499b      	ldr	r1, [pc, #620]	; (8006d60 <_strtod_l+0x578>)
 8006af4:	a815      	add	r0, sp, #84	; 0x54
 8006af6:	f002 fe59 	bl	80097ac <__match>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f43f aecc 	beq.w	8006898 <_strtod_l+0xb0>
 8006b00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	2b28      	cmp	r3, #40	; 0x28
 8006b06:	d12f      	bne.n	8006b68 <_strtod_l+0x380>
 8006b08:	4996      	ldr	r1, [pc, #600]	; (8006d64 <_strtod_l+0x57c>)
 8006b0a:	aa18      	add	r2, sp, #96	; 0x60
 8006b0c:	a815      	add	r0, sp, #84	; 0x54
 8006b0e:	f002 fe61 	bl	80097d4 <__hexnan>
 8006b12:	2805      	cmp	r0, #5
 8006b14:	d128      	bne.n	8006b68 <_strtod_l+0x380>
 8006b16:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b1c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006b20:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006b24:	e69b      	b.n	800685e <_strtod_l+0x76>
 8006b26:	9f08      	ldr	r7, [sp, #32]
 8006b28:	210a      	movs	r1, #10
 8006b2a:	fb01 2107 	mla	r1, r1, r7, r2
 8006b2e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006b32:	9208      	str	r2, [sp, #32]
 8006b34:	e7b5      	b.n	8006aa2 <_strtod_l+0x2ba>
 8006b36:	2a6e      	cmp	r2, #110	; 0x6e
 8006b38:	e7d9      	b.n	8006aee <_strtod_l+0x306>
 8006b3a:	498b      	ldr	r1, [pc, #556]	; (8006d68 <_strtod_l+0x580>)
 8006b3c:	a815      	add	r0, sp, #84	; 0x54
 8006b3e:	f002 fe35 	bl	80097ac <__match>
 8006b42:	2800      	cmp	r0, #0
 8006b44:	f43f aea8 	beq.w	8006898 <_strtod_l+0xb0>
 8006b48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b4a:	4988      	ldr	r1, [pc, #544]	; (8006d6c <_strtod_l+0x584>)
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	a815      	add	r0, sp, #84	; 0x54
 8006b50:	9315      	str	r3, [sp, #84]	; 0x54
 8006b52:	f002 fe2b 	bl	80097ac <__match>
 8006b56:	b910      	cbnz	r0, 8006b5e <_strtod_l+0x376>
 8006b58:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	9315      	str	r3, [sp, #84]	; 0x54
 8006b5e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006d7c <_strtod_l+0x594>
 8006b62:	f04f 0800 	mov.w	r8, #0
 8006b66:	e67a      	b.n	800685e <_strtod_l+0x76>
 8006b68:	4881      	ldr	r0, [pc, #516]	; (8006d70 <_strtod_l+0x588>)
 8006b6a:	f001 fca1 	bl	80084b0 <nan>
 8006b6e:	ec59 8b10 	vmov	r8, r9, d0
 8006b72:	e674      	b.n	800685e <_strtod_l+0x76>
 8006b74:	9b05      	ldr	r3, [sp, #20]
 8006b76:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b78:	1afb      	subs	r3, r7, r3
 8006b7a:	f1bb 0f00 	cmp.w	fp, #0
 8006b7e:	bf08      	it	eq
 8006b80:	46b3      	moveq	fp, r6
 8006b82:	2e10      	cmp	r6, #16
 8006b84:	9308      	str	r3, [sp, #32]
 8006b86:	4635      	mov	r5, r6
 8006b88:	bfa8      	it	ge
 8006b8a:	2510      	movge	r5, #16
 8006b8c:	f7f9 fcda 	bl	8000544 <__aeabi_ui2d>
 8006b90:	2e09      	cmp	r6, #9
 8006b92:	4680      	mov	r8, r0
 8006b94:	4689      	mov	r9, r1
 8006b96:	dd13      	ble.n	8006bc0 <_strtod_l+0x3d8>
 8006b98:	4b76      	ldr	r3, [pc, #472]	; (8006d74 <_strtod_l+0x58c>)
 8006b9a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006b9e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006ba2:	f7f9 fd49 	bl	8000638 <__aeabi_dmul>
 8006ba6:	4680      	mov	r8, r0
 8006ba8:	4650      	mov	r0, sl
 8006baa:	4689      	mov	r9, r1
 8006bac:	f7f9 fcca 	bl	8000544 <__aeabi_ui2d>
 8006bb0:	4602      	mov	r2, r0
 8006bb2:	460b      	mov	r3, r1
 8006bb4:	4640      	mov	r0, r8
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	f7f9 fb88 	bl	80002cc <__adddf3>
 8006bbc:	4680      	mov	r8, r0
 8006bbe:	4689      	mov	r9, r1
 8006bc0:	2e0f      	cmp	r6, #15
 8006bc2:	dc38      	bgt.n	8006c36 <_strtod_l+0x44e>
 8006bc4:	9b08      	ldr	r3, [sp, #32]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f43f ae49 	beq.w	800685e <_strtod_l+0x76>
 8006bcc:	dd24      	ble.n	8006c18 <_strtod_l+0x430>
 8006bce:	2b16      	cmp	r3, #22
 8006bd0:	dc0b      	bgt.n	8006bea <_strtod_l+0x402>
 8006bd2:	4968      	ldr	r1, [pc, #416]	; (8006d74 <_strtod_l+0x58c>)
 8006bd4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bdc:	4642      	mov	r2, r8
 8006bde:	464b      	mov	r3, r9
 8006be0:	f7f9 fd2a 	bl	8000638 <__aeabi_dmul>
 8006be4:	4680      	mov	r8, r0
 8006be6:	4689      	mov	r9, r1
 8006be8:	e639      	b.n	800685e <_strtod_l+0x76>
 8006bea:	9a08      	ldr	r2, [sp, #32]
 8006bec:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	db20      	blt.n	8006c36 <_strtod_l+0x44e>
 8006bf4:	4c5f      	ldr	r4, [pc, #380]	; (8006d74 <_strtod_l+0x58c>)
 8006bf6:	f1c6 060f 	rsb	r6, r6, #15
 8006bfa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006bfe:	4642      	mov	r2, r8
 8006c00:	464b      	mov	r3, r9
 8006c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c06:	f7f9 fd17 	bl	8000638 <__aeabi_dmul>
 8006c0a:	9b08      	ldr	r3, [sp, #32]
 8006c0c:	1b9e      	subs	r6, r3, r6
 8006c0e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006c12:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c16:	e7e3      	b.n	8006be0 <_strtod_l+0x3f8>
 8006c18:	9b08      	ldr	r3, [sp, #32]
 8006c1a:	3316      	adds	r3, #22
 8006c1c:	db0b      	blt.n	8006c36 <_strtod_l+0x44e>
 8006c1e:	9b05      	ldr	r3, [sp, #20]
 8006c20:	1bdf      	subs	r7, r3, r7
 8006c22:	4b54      	ldr	r3, [pc, #336]	; (8006d74 <_strtod_l+0x58c>)
 8006c24:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	4649      	mov	r1, r9
 8006c30:	f7f9 fe2c 	bl	800088c <__aeabi_ddiv>
 8006c34:	e7d6      	b.n	8006be4 <_strtod_l+0x3fc>
 8006c36:	9b08      	ldr	r3, [sp, #32]
 8006c38:	1b75      	subs	r5, r6, r5
 8006c3a:	441d      	add	r5, r3
 8006c3c:	2d00      	cmp	r5, #0
 8006c3e:	dd70      	ble.n	8006d22 <_strtod_l+0x53a>
 8006c40:	f015 030f 	ands.w	r3, r5, #15
 8006c44:	d00a      	beq.n	8006c5c <_strtod_l+0x474>
 8006c46:	494b      	ldr	r1, [pc, #300]	; (8006d74 <_strtod_l+0x58c>)
 8006c48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c4c:	4642      	mov	r2, r8
 8006c4e:	464b      	mov	r3, r9
 8006c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c54:	f7f9 fcf0 	bl	8000638 <__aeabi_dmul>
 8006c58:	4680      	mov	r8, r0
 8006c5a:	4689      	mov	r9, r1
 8006c5c:	f035 050f 	bics.w	r5, r5, #15
 8006c60:	d04d      	beq.n	8006cfe <_strtod_l+0x516>
 8006c62:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006c66:	dd22      	ble.n	8006cae <_strtod_l+0x4c6>
 8006c68:	2500      	movs	r5, #0
 8006c6a:	46ab      	mov	fp, r5
 8006c6c:	9509      	str	r5, [sp, #36]	; 0x24
 8006c6e:	9505      	str	r5, [sp, #20]
 8006c70:	2322      	movs	r3, #34	; 0x22
 8006c72:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006d7c <_strtod_l+0x594>
 8006c76:	6023      	str	r3, [r4, #0]
 8006c78:	f04f 0800 	mov.w	r8, #0
 8006c7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f43f aded 	beq.w	800685e <_strtod_l+0x76>
 8006c84:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c86:	4620      	mov	r0, r4
 8006c88:	f002 ff46 	bl	8009b18 <_Bfree>
 8006c8c:	9905      	ldr	r1, [sp, #20]
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f002 ff42 	bl	8009b18 <_Bfree>
 8006c94:	4659      	mov	r1, fp
 8006c96:	4620      	mov	r0, r4
 8006c98:	f002 ff3e 	bl	8009b18 <_Bfree>
 8006c9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	f002 ff3a 	bl	8009b18 <_Bfree>
 8006ca4:	4629      	mov	r1, r5
 8006ca6:	4620      	mov	r0, r4
 8006ca8:	f002 ff36 	bl	8009b18 <_Bfree>
 8006cac:	e5d7      	b.n	800685e <_strtod_l+0x76>
 8006cae:	4b32      	ldr	r3, [pc, #200]	; (8006d78 <_strtod_l+0x590>)
 8006cb0:	9304      	str	r3, [sp, #16]
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	112d      	asrs	r5, r5, #4
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	4649      	mov	r1, r9
 8006cba:	469a      	mov	sl, r3
 8006cbc:	2d01      	cmp	r5, #1
 8006cbe:	dc21      	bgt.n	8006d04 <_strtod_l+0x51c>
 8006cc0:	b10b      	cbz	r3, 8006cc6 <_strtod_l+0x4de>
 8006cc2:	4680      	mov	r8, r0
 8006cc4:	4689      	mov	r9, r1
 8006cc6:	492c      	ldr	r1, [pc, #176]	; (8006d78 <_strtod_l+0x590>)
 8006cc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006ccc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cd8:	f7f9 fcae 	bl	8000638 <__aeabi_dmul>
 8006cdc:	4b27      	ldr	r3, [pc, #156]	; (8006d7c <_strtod_l+0x594>)
 8006cde:	460a      	mov	r2, r1
 8006ce0:	400b      	ands	r3, r1
 8006ce2:	4927      	ldr	r1, [pc, #156]	; (8006d80 <_strtod_l+0x598>)
 8006ce4:	428b      	cmp	r3, r1
 8006ce6:	4680      	mov	r8, r0
 8006ce8:	d8be      	bhi.n	8006c68 <_strtod_l+0x480>
 8006cea:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006cee:	428b      	cmp	r3, r1
 8006cf0:	bf86      	itte	hi
 8006cf2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006d84 <_strtod_l+0x59c>
 8006cf6:	f04f 38ff 	movhi.w	r8, #4294967295
 8006cfa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006cfe:	2300      	movs	r3, #0
 8006d00:	9304      	str	r3, [sp, #16]
 8006d02:	e07b      	b.n	8006dfc <_strtod_l+0x614>
 8006d04:	07ea      	lsls	r2, r5, #31
 8006d06:	d505      	bpl.n	8006d14 <_strtod_l+0x52c>
 8006d08:	9b04      	ldr	r3, [sp, #16]
 8006d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d0e:	f7f9 fc93 	bl	8000638 <__aeabi_dmul>
 8006d12:	2301      	movs	r3, #1
 8006d14:	9a04      	ldr	r2, [sp, #16]
 8006d16:	3208      	adds	r2, #8
 8006d18:	f10a 0a01 	add.w	sl, sl, #1
 8006d1c:	106d      	asrs	r5, r5, #1
 8006d1e:	9204      	str	r2, [sp, #16]
 8006d20:	e7cc      	b.n	8006cbc <_strtod_l+0x4d4>
 8006d22:	d0ec      	beq.n	8006cfe <_strtod_l+0x516>
 8006d24:	426d      	negs	r5, r5
 8006d26:	f015 020f 	ands.w	r2, r5, #15
 8006d2a:	d00a      	beq.n	8006d42 <_strtod_l+0x55a>
 8006d2c:	4b11      	ldr	r3, [pc, #68]	; (8006d74 <_strtod_l+0x58c>)
 8006d2e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d32:	4640      	mov	r0, r8
 8006d34:	4649      	mov	r1, r9
 8006d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d3a:	f7f9 fda7 	bl	800088c <__aeabi_ddiv>
 8006d3e:	4680      	mov	r8, r0
 8006d40:	4689      	mov	r9, r1
 8006d42:	112d      	asrs	r5, r5, #4
 8006d44:	d0db      	beq.n	8006cfe <_strtod_l+0x516>
 8006d46:	2d1f      	cmp	r5, #31
 8006d48:	dd1e      	ble.n	8006d88 <_strtod_l+0x5a0>
 8006d4a:	2500      	movs	r5, #0
 8006d4c:	46ab      	mov	fp, r5
 8006d4e:	9509      	str	r5, [sp, #36]	; 0x24
 8006d50:	9505      	str	r5, [sp, #20]
 8006d52:	2322      	movs	r3, #34	; 0x22
 8006d54:	f04f 0800 	mov.w	r8, #0
 8006d58:	f04f 0900 	mov.w	r9, #0
 8006d5c:	6023      	str	r3, [r4, #0]
 8006d5e:	e78d      	b.n	8006c7c <_strtod_l+0x494>
 8006d60:	0800c3c5 	.word	0x0800c3c5
 8006d64:	0800c37c 	.word	0x0800c37c
 8006d68:	0800c3bd 	.word	0x0800c3bd
 8006d6c:	0800c3fc 	.word	0x0800c3fc
 8006d70:	0800c789 	.word	0x0800c789
 8006d74:	0800c568 	.word	0x0800c568
 8006d78:	0800c540 	.word	0x0800c540
 8006d7c:	7ff00000 	.word	0x7ff00000
 8006d80:	7ca00000 	.word	0x7ca00000
 8006d84:	7fefffff 	.word	0x7fefffff
 8006d88:	f015 0310 	ands.w	r3, r5, #16
 8006d8c:	bf18      	it	ne
 8006d8e:	236a      	movne	r3, #106	; 0x6a
 8006d90:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007134 <_strtod_l+0x94c>
 8006d94:	9304      	str	r3, [sp, #16]
 8006d96:	4640      	mov	r0, r8
 8006d98:	4649      	mov	r1, r9
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	07ea      	lsls	r2, r5, #31
 8006d9e:	d504      	bpl.n	8006daa <_strtod_l+0x5c2>
 8006da0:	e9da 2300 	ldrd	r2, r3, [sl]
 8006da4:	f7f9 fc48 	bl	8000638 <__aeabi_dmul>
 8006da8:	2301      	movs	r3, #1
 8006daa:	106d      	asrs	r5, r5, #1
 8006dac:	f10a 0a08 	add.w	sl, sl, #8
 8006db0:	d1f4      	bne.n	8006d9c <_strtod_l+0x5b4>
 8006db2:	b10b      	cbz	r3, 8006db8 <_strtod_l+0x5d0>
 8006db4:	4680      	mov	r8, r0
 8006db6:	4689      	mov	r9, r1
 8006db8:	9b04      	ldr	r3, [sp, #16]
 8006dba:	b1bb      	cbz	r3, 8006dec <_strtod_l+0x604>
 8006dbc:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006dc0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	4649      	mov	r1, r9
 8006dc8:	dd10      	ble.n	8006dec <_strtod_l+0x604>
 8006dca:	2b1f      	cmp	r3, #31
 8006dcc:	f340 811e 	ble.w	800700c <_strtod_l+0x824>
 8006dd0:	2b34      	cmp	r3, #52	; 0x34
 8006dd2:	bfde      	ittt	le
 8006dd4:	f04f 33ff 	movle.w	r3, #4294967295
 8006dd8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006ddc:	4093      	lslle	r3, r2
 8006dde:	f04f 0800 	mov.w	r8, #0
 8006de2:	bfcc      	ite	gt
 8006de4:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006de8:	ea03 0901 	andle.w	r9, r3, r1
 8006dec:	2200      	movs	r2, #0
 8006dee:	2300      	movs	r3, #0
 8006df0:	4640      	mov	r0, r8
 8006df2:	4649      	mov	r1, r9
 8006df4:	f7f9 fe88 	bl	8000b08 <__aeabi_dcmpeq>
 8006df8:	2800      	cmp	r0, #0
 8006dfa:	d1a6      	bne.n	8006d4a <_strtod_l+0x562>
 8006dfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006e02:	4633      	mov	r3, r6
 8006e04:	465a      	mov	r2, fp
 8006e06:	4620      	mov	r0, r4
 8006e08:	f002 feee 	bl	8009be8 <__s2b>
 8006e0c:	9009      	str	r0, [sp, #36]	; 0x24
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f43f af2a 	beq.w	8006c68 <_strtod_l+0x480>
 8006e14:	9a08      	ldr	r2, [sp, #32]
 8006e16:	9b05      	ldr	r3, [sp, #20]
 8006e18:	2a00      	cmp	r2, #0
 8006e1a:	eba3 0307 	sub.w	r3, r3, r7
 8006e1e:	bfa8      	it	ge
 8006e20:	2300      	movge	r3, #0
 8006e22:	930c      	str	r3, [sp, #48]	; 0x30
 8006e24:	2500      	movs	r5, #0
 8006e26:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e2a:	9312      	str	r3, [sp, #72]	; 0x48
 8006e2c:	46ab      	mov	fp, r5
 8006e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e30:	4620      	mov	r0, r4
 8006e32:	6859      	ldr	r1, [r3, #4]
 8006e34:	f002 fe30 	bl	8009a98 <_Balloc>
 8006e38:	9005      	str	r0, [sp, #20]
 8006e3a:	2800      	cmp	r0, #0
 8006e3c:	f43f af18 	beq.w	8006c70 <_strtod_l+0x488>
 8006e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e42:	691a      	ldr	r2, [r3, #16]
 8006e44:	3202      	adds	r2, #2
 8006e46:	f103 010c 	add.w	r1, r3, #12
 8006e4a:	0092      	lsls	r2, r2, #2
 8006e4c:	300c      	adds	r0, #12
 8006e4e:	f001 fb1e 	bl	800848e <memcpy>
 8006e52:	ec49 8b10 	vmov	d0, r8, r9
 8006e56:	aa18      	add	r2, sp, #96	; 0x60
 8006e58:	a917      	add	r1, sp, #92	; 0x5c
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f003 f9f8 	bl	800a250 <__d2b>
 8006e60:	ec49 8b18 	vmov	d8, r8, r9
 8006e64:	9016      	str	r0, [sp, #88]	; 0x58
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f43f af02 	beq.w	8006c70 <_strtod_l+0x488>
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4620      	mov	r0, r4
 8006e70:	f002 ff52 	bl	8009d18 <__i2b>
 8006e74:	4683      	mov	fp, r0
 8006e76:	2800      	cmp	r0, #0
 8006e78:	f43f aefa 	beq.w	8006c70 <_strtod_l+0x488>
 8006e7c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006e7e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e80:	2e00      	cmp	r6, #0
 8006e82:	bfab      	itete	ge
 8006e84:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006e86:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006e88:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006e8a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006e8e:	bfac      	ite	ge
 8006e90:	eb06 0a03 	addge.w	sl, r6, r3
 8006e94:	1b9f      	sublt	r7, r3, r6
 8006e96:	9b04      	ldr	r3, [sp, #16]
 8006e98:	1af6      	subs	r6, r6, r3
 8006e9a:	4416      	add	r6, r2
 8006e9c:	4ba0      	ldr	r3, [pc, #640]	; (8007120 <_strtod_l+0x938>)
 8006e9e:	3e01      	subs	r6, #1
 8006ea0:	429e      	cmp	r6, r3
 8006ea2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006ea6:	f280 80c4 	bge.w	8007032 <_strtod_l+0x84a>
 8006eaa:	1b9b      	subs	r3, r3, r6
 8006eac:	2b1f      	cmp	r3, #31
 8006eae:	eba2 0203 	sub.w	r2, r2, r3
 8006eb2:	f04f 0101 	mov.w	r1, #1
 8006eb6:	f300 80b0 	bgt.w	800701a <_strtod_l+0x832>
 8006eba:	fa01 f303 	lsl.w	r3, r1, r3
 8006ebe:	930e      	str	r3, [sp, #56]	; 0x38
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	930d      	str	r3, [sp, #52]	; 0x34
 8006ec4:	eb0a 0602 	add.w	r6, sl, r2
 8006ec8:	9b04      	ldr	r3, [sp, #16]
 8006eca:	45b2      	cmp	sl, r6
 8006ecc:	4417      	add	r7, r2
 8006ece:	441f      	add	r7, r3
 8006ed0:	4653      	mov	r3, sl
 8006ed2:	bfa8      	it	ge
 8006ed4:	4633      	movge	r3, r6
 8006ed6:	42bb      	cmp	r3, r7
 8006ed8:	bfa8      	it	ge
 8006eda:	463b      	movge	r3, r7
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	bfc2      	ittt	gt
 8006ee0:	1af6      	subgt	r6, r6, r3
 8006ee2:	1aff      	subgt	r7, r7, r3
 8006ee4:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	dd17      	ble.n	8006f1e <_strtod_l+0x736>
 8006eee:	4659      	mov	r1, fp
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	f002 ffd0 	bl	8009e98 <__pow5mult>
 8006ef8:	4683      	mov	fp, r0
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f43f aeb8 	beq.w	8006c70 <_strtod_l+0x488>
 8006f00:	4601      	mov	r1, r0
 8006f02:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006f04:	4620      	mov	r0, r4
 8006f06:	f002 ff1d 	bl	8009d44 <__multiply>
 8006f0a:	900b      	str	r0, [sp, #44]	; 0x2c
 8006f0c:	2800      	cmp	r0, #0
 8006f0e:	f43f aeaf 	beq.w	8006c70 <_strtod_l+0x488>
 8006f12:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f14:	4620      	mov	r0, r4
 8006f16:	f002 fdff 	bl	8009b18 <_Bfree>
 8006f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f1c:	9316      	str	r3, [sp, #88]	; 0x58
 8006f1e:	2e00      	cmp	r6, #0
 8006f20:	f300 808c 	bgt.w	800703c <_strtod_l+0x854>
 8006f24:	9b08      	ldr	r3, [sp, #32]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	dd08      	ble.n	8006f3c <_strtod_l+0x754>
 8006f2a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f2c:	9905      	ldr	r1, [sp, #20]
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f002 ffb2 	bl	8009e98 <__pow5mult>
 8006f34:	9005      	str	r0, [sp, #20]
 8006f36:	2800      	cmp	r0, #0
 8006f38:	f43f ae9a 	beq.w	8006c70 <_strtod_l+0x488>
 8006f3c:	2f00      	cmp	r7, #0
 8006f3e:	dd08      	ble.n	8006f52 <_strtod_l+0x76a>
 8006f40:	9905      	ldr	r1, [sp, #20]
 8006f42:	463a      	mov	r2, r7
 8006f44:	4620      	mov	r0, r4
 8006f46:	f003 f801 	bl	8009f4c <__lshift>
 8006f4a:	9005      	str	r0, [sp, #20]
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	f43f ae8f 	beq.w	8006c70 <_strtod_l+0x488>
 8006f52:	f1ba 0f00 	cmp.w	sl, #0
 8006f56:	dd08      	ble.n	8006f6a <_strtod_l+0x782>
 8006f58:	4659      	mov	r1, fp
 8006f5a:	4652      	mov	r2, sl
 8006f5c:	4620      	mov	r0, r4
 8006f5e:	f002 fff5 	bl	8009f4c <__lshift>
 8006f62:	4683      	mov	fp, r0
 8006f64:	2800      	cmp	r0, #0
 8006f66:	f43f ae83 	beq.w	8006c70 <_strtod_l+0x488>
 8006f6a:	9a05      	ldr	r2, [sp, #20]
 8006f6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f6e:	4620      	mov	r0, r4
 8006f70:	f003 f874 	bl	800a05c <__mdiff>
 8006f74:	4605      	mov	r5, r0
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f43f ae7a 	beq.w	8006c70 <_strtod_l+0x488>
 8006f7c:	68c3      	ldr	r3, [r0, #12]
 8006f7e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f80:	2300      	movs	r3, #0
 8006f82:	60c3      	str	r3, [r0, #12]
 8006f84:	4659      	mov	r1, fp
 8006f86:	f003 f84d 	bl	800a024 <__mcmp>
 8006f8a:	2800      	cmp	r0, #0
 8006f8c:	da60      	bge.n	8007050 <_strtod_l+0x868>
 8006f8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f90:	ea53 0308 	orrs.w	r3, r3, r8
 8006f94:	f040 8084 	bne.w	80070a0 <_strtod_l+0x8b8>
 8006f98:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d17f      	bne.n	80070a0 <_strtod_l+0x8b8>
 8006fa0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006fa4:	0d1b      	lsrs	r3, r3, #20
 8006fa6:	051b      	lsls	r3, r3, #20
 8006fa8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006fac:	d978      	bls.n	80070a0 <_strtod_l+0x8b8>
 8006fae:	696b      	ldr	r3, [r5, #20]
 8006fb0:	b913      	cbnz	r3, 8006fb8 <_strtod_l+0x7d0>
 8006fb2:	692b      	ldr	r3, [r5, #16]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	dd73      	ble.n	80070a0 <_strtod_l+0x8b8>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	2201      	movs	r2, #1
 8006fbc:	4620      	mov	r0, r4
 8006fbe:	f002 ffc5 	bl	8009f4c <__lshift>
 8006fc2:	4659      	mov	r1, fp
 8006fc4:	4605      	mov	r5, r0
 8006fc6:	f003 f82d 	bl	800a024 <__mcmp>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	dd68      	ble.n	80070a0 <_strtod_l+0x8b8>
 8006fce:	9904      	ldr	r1, [sp, #16]
 8006fd0:	4a54      	ldr	r2, [pc, #336]	; (8007124 <_strtod_l+0x93c>)
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	2900      	cmp	r1, #0
 8006fd6:	f000 8084 	beq.w	80070e2 <_strtod_l+0x8fa>
 8006fda:	ea02 0109 	and.w	r1, r2, r9
 8006fde:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006fe2:	dc7e      	bgt.n	80070e2 <_strtod_l+0x8fa>
 8006fe4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006fe8:	f77f aeb3 	ble.w	8006d52 <_strtod_l+0x56a>
 8006fec:	4b4e      	ldr	r3, [pc, #312]	; (8007128 <_strtod_l+0x940>)
 8006fee:	4640      	mov	r0, r8
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f7f9 fb20 	bl	8000638 <__aeabi_dmul>
 8006ff8:	4b4a      	ldr	r3, [pc, #296]	; (8007124 <_strtod_l+0x93c>)
 8006ffa:	400b      	ands	r3, r1
 8006ffc:	4680      	mov	r8, r0
 8006ffe:	4689      	mov	r9, r1
 8007000:	2b00      	cmp	r3, #0
 8007002:	f47f ae3f 	bne.w	8006c84 <_strtod_l+0x49c>
 8007006:	2322      	movs	r3, #34	; 0x22
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	e63b      	b.n	8006c84 <_strtod_l+0x49c>
 800700c:	f04f 32ff 	mov.w	r2, #4294967295
 8007010:	fa02 f303 	lsl.w	r3, r2, r3
 8007014:	ea03 0808 	and.w	r8, r3, r8
 8007018:	e6e8      	b.n	8006dec <_strtod_l+0x604>
 800701a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800701e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8007022:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8007026:	36e2      	adds	r6, #226	; 0xe2
 8007028:	fa01 f306 	lsl.w	r3, r1, r6
 800702c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007030:	e748      	b.n	8006ec4 <_strtod_l+0x6dc>
 8007032:	2100      	movs	r1, #0
 8007034:	2301      	movs	r3, #1
 8007036:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800703a:	e743      	b.n	8006ec4 <_strtod_l+0x6dc>
 800703c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800703e:	4632      	mov	r2, r6
 8007040:	4620      	mov	r0, r4
 8007042:	f002 ff83 	bl	8009f4c <__lshift>
 8007046:	9016      	str	r0, [sp, #88]	; 0x58
 8007048:	2800      	cmp	r0, #0
 800704a:	f47f af6b 	bne.w	8006f24 <_strtod_l+0x73c>
 800704e:	e60f      	b.n	8006c70 <_strtod_l+0x488>
 8007050:	46ca      	mov	sl, r9
 8007052:	d171      	bne.n	8007138 <_strtod_l+0x950>
 8007054:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007056:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800705a:	b352      	cbz	r2, 80070b2 <_strtod_l+0x8ca>
 800705c:	4a33      	ldr	r2, [pc, #204]	; (800712c <_strtod_l+0x944>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d12a      	bne.n	80070b8 <_strtod_l+0x8d0>
 8007062:	9b04      	ldr	r3, [sp, #16]
 8007064:	4641      	mov	r1, r8
 8007066:	b1fb      	cbz	r3, 80070a8 <_strtod_l+0x8c0>
 8007068:	4b2e      	ldr	r3, [pc, #184]	; (8007124 <_strtod_l+0x93c>)
 800706a:	ea09 0303 	and.w	r3, r9, r3
 800706e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007072:	f04f 32ff 	mov.w	r2, #4294967295
 8007076:	d81a      	bhi.n	80070ae <_strtod_l+0x8c6>
 8007078:	0d1b      	lsrs	r3, r3, #20
 800707a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800707e:	fa02 f303 	lsl.w	r3, r2, r3
 8007082:	4299      	cmp	r1, r3
 8007084:	d118      	bne.n	80070b8 <_strtod_l+0x8d0>
 8007086:	4b2a      	ldr	r3, [pc, #168]	; (8007130 <_strtod_l+0x948>)
 8007088:	459a      	cmp	sl, r3
 800708a:	d102      	bne.n	8007092 <_strtod_l+0x8aa>
 800708c:	3101      	adds	r1, #1
 800708e:	f43f adef 	beq.w	8006c70 <_strtod_l+0x488>
 8007092:	4b24      	ldr	r3, [pc, #144]	; (8007124 <_strtod_l+0x93c>)
 8007094:	ea0a 0303 	and.w	r3, sl, r3
 8007098:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800709c:	f04f 0800 	mov.w	r8, #0
 80070a0:	9b04      	ldr	r3, [sp, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1a2      	bne.n	8006fec <_strtod_l+0x804>
 80070a6:	e5ed      	b.n	8006c84 <_strtod_l+0x49c>
 80070a8:	f04f 33ff 	mov.w	r3, #4294967295
 80070ac:	e7e9      	b.n	8007082 <_strtod_l+0x89a>
 80070ae:	4613      	mov	r3, r2
 80070b0:	e7e7      	b.n	8007082 <_strtod_l+0x89a>
 80070b2:	ea53 0308 	orrs.w	r3, r3, r8
 80070b6:	d08a      	beq.n	8006fce <_strtod_l+0x7e6>
 80070b8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070ba:	b1e3      	cbz	r3, 80070f6 <_strtod_l+0x90e>
 80070bc:	ea13 0f0a 	tst.w	r3, sl
 80070c0:	d0ee      	beq.n	80070a0 <_strtod_l+0x8b8>
 80070c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070c4:	9a04      	ldr	r2, [sp, #16]
 80070c6:	4640      	mov	r0, r8
 80070c8:	4649      	mov	r1, r9
 80070ca:	b1c3      	cbz	r3, 80070fe <_strtod_l+0x916>
 80070cc:	f7ff fb6f 	bl	80067ae <sulp>
 80070d0:	4602      	mov	r2, r0
 80070d2:	460b      	mov	r3, r1
 80070d4:	ec51 0b18 	vmov	r0, r1, d8
 80070d8:	f7f9 f8f8 	bl	80002cc <__adddf3>
 80070dc:	4680      	mov	r8, r0
 80070de:	4689      	mov	r9, r1
 80070e0:	e7de      	b.n	80070a0 <_strtod_l+0x8b8>
 80070e2:	4013      	ands	r3, r2
 80070e4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80070e8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80070ec:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80070f0:	f04f 38ff 	mov.w	r8, #4294967295
 80070f4:	e7d4      	b.n	80070a0 <_strtod_l+0x8b8>
 80070f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070f8:	ea13 0f08 	tst.w	r3, r8
 80070fc:	e7e0      	b.n	80070c0 <_strtod_l+0x8d8>
 80070fe:	f7ff fb56 	bl	80067ae <sulp>
 8007102:	4602      	mov	r2, r0
 8007104:	460b      	mov	r3, r1
 8007106:	ec51 0b18 	vmov	r0, r1, d8
 800710a:	f7f9 f8dd 	bl	80002c8 <__aeabi_dsub>
 800710e:	2200      	movs	r2, #0
 8007110:	2300      	movs	r3, #0
 8007112:	4680      	mov	r8, r0
 8007114:	4689      	mov	r9, r1
 8007116:	f7f9 fcf7 	bl	8000b08 <__aeabi_dcmpeq>
 800711a:	2800      	cmp	r0, #0
 800711c:	d0c0      	beq.n	80070a0 <_strtod_l+0x8b8>
 800711e:	e618      	b.n	8006d52 <_strtod_l+0x56a>
 8007120:	fffffc02 	.word	0xfffffc02
 8007124:	7ff00000 	.word	0x7ff00000
 8007128:	39500000 	.word	0x39500000
 800712c:	000fffff 	.word	0x000fffff
 8007130:	7fefffff 	.word	0x7fefffff
 8007134:	0800c390 	.word	0x0800c390
 8007138:	4659      	mov	r1, fp
 800713a:	4628      	mov	r0, r5
 800713c:	f003 f8e2 	bl	800a304 <__ratio>
 8007140:	ec57 6b10 	vmov	r6, r7, d0
 8007144:	ee10 0a10 	vmov	r0, s0
 8007148:	2200      	movs	r2, #0
 800714a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800714e:	4639      	mov	r1, r7
 8007150:	f7f9 fcee 	bl	8000b30 <__aeabi_dcmple>
 8007154:	2800      	cmp	r0, #0
 8007156:	d071      	beq.n	800723c <_strtod_l+0xa54>
 8007158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800715a:	2b00      	cmp	r3, #0
 800715c:	d17c      	bne.n	8007258 <_strtod_l+0xa70>
 800715e:	f1b8 0f00 	cmp.w	r8, #0
 8007162:	d15a      	bne.n	800721a <_strtod_l+0xa32>
 8007164:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007168:	2b00      	cmp	r3, #0
 800716a:	d15d      	bne.n	8007228 <_strtod_l+0xa40>
 800716c:	4b90      	ldr	r3, [pc, #576]	; (80073b0 <_strtod_l+0xbc8>)
 800716e:	2200      	movs	r2, #0
 8007170:	4630      	mov	r0, r6
 8007172:	4639      	mov	r1, r7
 8007174:	f7f9 fcd2 	bl	8000b1c <__aeabi_dcmplt>
 8007178:	2800      	cmp	r0, #0
 800717a:	d15c      	bne.n	8007236 <_strtod_l+0xa4e>
 800717c:	4630      	mov	r0, r6
 800717e:	4639      	mov	r1, r7
 8007180:	4b8c      	ldr	r3, [pc, #560]	; (80073b4 <_strtod_l+0xbcc>)
 8007182:	2200      	movs	r2, #0
 8007184:	f7f9 fa58 	bl	8000638 <__aeabi_dmul>
 8007188:	4606      	mov	r6, r0
 800718a:	460f      	mov	r7, r1
 800718c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007190:	9606      	str	r6, [sp, #24]
 8007192:	9307      	str	r3, [sp, #28]
 8007194:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007198:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800719c:	4b86      	ldr	r3, [pc, #536]	; (80073b8 <_strtod_l+0xbd0>)
 800719e:	ea0a 0303 	and.w	r3, sl, r3
 80071a2:	930d      	str	r3, [sp, #52]	; 0x34
 80071a4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80071a6:	4b85      	ldr	r3, [pc, #532]	; (80073bc <_strtod_l+0xbd4>)
 80071a8:	429a      	cmp	r2, r3
 80071aa:	f040 8090 	bne.w	80072ce <_strtod_l+0xae6>
 80071ae:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80071b2:	ec49 8b10 	vmov	d0, r8, r9
 80071b6:	f002 ffdb 	bl	800a170 <__ulp>
 80071ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071be:	ec51 0b10 	vmov	r0, r1, d0
 80071c2:	f7f9 fa39 	bl	8000638 <__aeabi_dmul>
 80071c6:	4642      	mov	r2, r8
 80071c8:	464b      	mov	r3, r9
 80071ca:	f7f9 f87f 	bl	80002cc <__adddf3>
 80071ce:	460b      	mov	r3, r1
 80071d0:	4979      	ldr	r1, [pc, #484]	; (80073b8 <_strtod_l+0xbd0>)
 80071d2:	4a7b      	ldr	r2, [pc, #492]	; (80073c0 <_strtod_l+0xbd8>)
 80071d4:	4019      	ands	r1, r3
 80071d6:	4291      	cmp	r1, r2
 80071d8:	4680      	mov	r8, r0
 80071da:	d944      	bls.n	8007266 <_strtod_l+0xa7e>
 80071dc:	ee18 2a90 	vmov	r2, s17
 80071e0:	4b78      	ldr	r3, [pc, #480]	; (80073c4 <_strtod_l+0xbdc>)
 80071e2:	429a      	cmp	r2, r3
 80071e4:	d104      	bne.n	80071f0 <_strtod_l+0xa08>
 80071e6:	ee18 3a10 	vmov	r3, s16
 80071ea:	3301      	adds	r3, #1
 80071ec:	f43f ad40 	beq.w	8006c70 <_strtod_l+0x488>
 80071f0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80073c4 <_strtod_l+0xbdc>
 80071f4:	f04f 38ff 	mov.w	r8, #4294967295
 80071f8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80071fa:	4620      	mov	r0, r4
 80071fc:	f002 fc8c 	bl	8009b18 <_Bfree>
 8007200:	9905      	ldr	r1, [sp, #20]
 8007202:	4620      	mov	r0, r4
 8007204:	f002 fc88 	bl	8009b18 <_Bfree>
 8007208:	4659      	mov	r1, fp
 800720a:	4620      	mov	r0, r4
 800720c:	f002 fc84 	bl	8009b18 <_Bfree>
 8007210:	4629      	mov	r1, r5
 8007212:	4620      	mov	r0, r4
 8007214:	f002 fc80 	bl	8009b18 <_Bfree>
 8007218:	e609      	b.n	8006e2e <_strtod_l+0x646>
 800721a:	f1b8 0f01 	cmp.w	r8, #1
 800721e:	d103      	bne.n	8007228 <_strtod_l+0xa40>
 8007220:	f1b9 0f00 	cmp.w	r9, #0
 8007224:	f43f ad95 	beq.w	8006d52 <_strtod_l+0x56a>
 8007228:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007380 <_strtod_l+0xb98>
 800722c:	4f60      	ldr	r7, [pc, #384]	; (80073b0 <_strtod_l+0xbc8>)
 800722e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007232:	2600      	movs	r6, #0
 8007234:	e7ae      	b.n	8007194 <_strtod_l+0x9ac>
 8007236:	4f5f      	ldr	r7, [pc, #380]	; (80073b4 <_strtod_l+0xbcc>)
 8007238:	2600      	movs	r6, #0
 800723a:	e7a7      	b.n	800718c <_strtod_l+0x9a4>
 800723c:	4b5d      	ldr	r3, [pc, #372]	; (80073b4 <_strtod_l+0xbcc>)
 800723e:	4630      	mov	r0, r6
 8007240:	4639      	mov	r1, r7
 8007242:	2200      	movs	r2, #0
 8007244:	f7f9 f9f8 	bl	8000638 <__aeabi_dmul>
 8007248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800724a:	4606      	mov	r6, r0
 800724c:	460f      	mov	r7, r1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d09c      	beq.n	800718c <_strtod_l+0x9a4>
 8007252:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007256:	e79d      	b.n	8007194 <_strtod_l+0x9ac>
 8007258:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007388 <_strtod_l+0xba0>
 800725c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007260:	ec57 6b17 	vmov	r6, r7, d7
 8007264:	e796      	b.n	8007194 <_strtod_l+0x9ac>
 8007266:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800726a:	9b04      	ldr	r3, [sp, #16]
 800726c:	46ca      	mov	sl, r9
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1c2      	bne.n	80071f8 <_strtod_l+0xa10>
 8007272:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007276:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007278:	0d1b      	lsrs	r3, r3, #20
 800727a:	051b      	lsls	r3, r3, #20
 800727c:	429a      	cmp	r2, r3
 800727e:	d1bb      	bne.n	80071f8 <_strtod_l+0xa10>
 8007280:	4630      	mov	r0, r6
 8007282:	4639      	mov	r1, r7
 8007284:	f7f9 fd38 	bl	8000cf8 <__aeabi_d2lz>
 8007288:	f7f9 f9a8 	bl	80005dc <__aeabi_l2d>
 800728c:	4602      	mov	r2, r0
 800728e:	460b      	mov	r3, r1
 8007290:	4630      	mov	r0, r6
 8007292:	4639      	mov	r1, r7
 8007294:	f7f9 f818 	bl	80002c8 <__aeabi_dsub>
 8007298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800729a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800729e:	ea43 0308 	orr.w	r3, r3, r8
 80072a2:	4313      	orrs	r3, r2
 80072a4:	4606      	mov	r6, r0
 80072a6:	460f      	mov	r7, r1
 80072a8:	d054      	beq.n	8007354 <_strtod_l+0xb6c>
 80072aa:	a339      	add	r3, pc, #228	; (adr r3, 8007390 <_strtod_l+0xba8>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	f7f9 fc34 	bl	8000b1c <__aeabi_dcmplt>
 80072b4:	2800      	cmp	r0, #0
 80072b6:	f47f ace5 	bne.w	8006c84 <_strtod_l+0x49c>
 80072ba:	a337      	add	r3, pc, #220	; (adr r3, 8007398 <_strtod_l+0xbb0>)
 80072bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c0:	4630      	mov	r0, r6
 80072c2:	4639      	mov	r1, r7
 80072c4:	f7f9 fc48 	bl	8000b58 <__aeabi_dcmpgt>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	d095      	beq.n	80071f8 <_strtod_l+0xa10>
 80072cc:	e4da      	b.n	8006c84 <_strtod_l+0x49c>
 80072ce:	9b04      	ldr	r3, [sp, #16]
 80072d0:	b333      	cbz	r3, 8007320 <_strtod_l+0xb38>
 80072d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072d4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072d8:	d822      	bhi.n	8007320 <_strtod_l+0xb38>
 80072da:	a331      	add	r3, pc, #196	; (adr r3, 80073a0 <_strtod_l+0xbb8>)
 80072dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e0:	4630      	mov	r0, r6
 80072e2:	4639      	mov	r1, r7
 80072e4:	f7f9 fc24 	bl	8000b30 <__aeabi_dcmple>
 80072e8:	b1a0      	cbz	r0, 8007314 <_strtod_l+0xb2c>
 80072ea:	4639      	mov	r1, r7
 80072ec:	4630      	mov	r0, r6
 80072ee:	f7f9 fc7b 	bl	8000be8 <__aeabi_d2uiz>
 80072f2:	2801      	cmp	r0, #1
 80072f4:	bf38      	it	cc
 80072f6:	2001      	movcc	r0, #1
 80072f8:	f7f9 f924 	bl	8000544 <__aeabi_ui2d>
 80072fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072fe:	4606      	mov	r6, r0
 8007300:	460f      	mov	r7, r1
 8007302:	bb23      	cbnz	r3, 800734e <_strtod_l+0xb66>
 8007304:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007308:	9010      	str	r0, [sp, #64]	; 0x40
 800730a:	9311      	str	r3, [sp, #68]	; 0x44
 800730c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007310:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007314:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007316:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007318:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800731c:	1a9b      	subs	r3, r3, r2
 800731e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007320:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007324:	eeb0 0a48 	vmov.f32	s0, s16
 8007328:	eef0 0a68 	vmov.f32	s1, s17
 800732c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007330:	f002 ff1e 	bl	800a170 <__ulp>
 8007334:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007338:	ec53 2b10 	vmov	r2, r3, d0
 800733c:	f7f9 f97c 	bl	8000638 <__aeabi_dmul>
 8007340:	ec53 2b18 	vmov	r2, r3, d8
 8007344:	f7f8 ffc2 	bl	80002cc <__adddf3>
 8007348:	4680      	mov	r8, r0
 800734a:	4689      	mov	r9, r1
 800734c:	e78d      	b.n	800726a <_strtod_l+0xa82>
 800734e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007352:	e7db      	b.n	800730c <_strtod_l+0xb24>
 8007354:	a314      	add	r3, pc, #80	; (adr r3, 80073a8 <_strtod_l+0xbc0>)
 8007356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800735a:	f7f9 fbdf 	bl	8000b1c <__aeabi_dcmplt>
 800735e:	e7b3      	b.n	80072c8 <_strtod_l+0xae0>
 8007360:	2300      	movs	r3, #0
 8007362:	930a      	str	r3, [sp, #40]	; 0x28
 8007364:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007366:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007368:	6013      	str	r3, [r2, #0]
 800736a:	f7ff ba7c 	b.w	8006866 <_strtod_l+0x7e>
 800736e:	2a65      	cmp	r2, #101	; 0x65
 8007370:	f43f ab75 	beq.w	8006a5e <_strtod_l+0x276>
 8007374:	2a45      	cmp	r2, #69	; 0x45
 8007376:	f43f ab72 	beq.w	8006a5e <_strtod_l+0x276>
 800737a:	2301      	movs	r3, #1
 800737c:	f7ff bbaa 	b.w	8006ad4 <_strtod_l+0x2ec>
 8007380:	00000000 	.word	0x00000000
 8007384:	bff00000 	.word	0xbff00000
 8007388:	00000000 	.word	0x00000000
 800738c:	3ff00000 	.word	0x3ff00000
 8007390:	94a03595 	.word	0x94a03595
 8007394:	3fdfffff 	.word	0x3fdfffff
 8007398:	35afe535 	.word	0x35afe535
 800739c:	3fe00000 	.word	0x3fe00000
 80073a0:	ffc00000 	.word	0xffc00000
 80073a4:	41dfffff 	.word	0x41dfffff
 80073a8:	94a03595 	.word	0x94a03595
 80073ac:	3fcfffff 	.word	0x3fcfffff
 80073b0:	3ff00000 	.word	0x3ff00000
 80073b4:	3fe00000 	.word	0x3fe00000
 80073b8:	7ff00000 	.word	0x7ff00000
 80073bc:	7fe00000 	.word	0x7fe00000
 80073c0:	7c9fffff 	.word	0x7c9fffff
 80073c4:	7fefffff 	.word	0x7fefffff

080073c8 <_strtod_r>:
 80073c8:	4b01      	ldr	r3, [pc, #4]	; (80073d0 <_strtod_r+0x8>)
 80073ca:	f7ff ba0d 	b.w	80067e8 <_strtod_l>
 80073ce:	bf00      	nop
 80073d0:	20000050 	.word	0x20000050

080073d4 <strtod>:
 80073d4:	460a      	mov	r2, r1
 80073d6:	4601      	mov	r1, r0
 80073d8:	4802      	ldr	r0, [pc, #8]	; (80073e4 <strtod+0x10>)
 80073da:	4b03      	ldr	r3, [pc, #12]	; (80073e8 <strtod+0x14>)
 80073dc:	6800      	ldr	r0, [r0, #0]
 80073de:	f7ff ba03 	b.w	80067e8 <_strtod_l>
 80073e2:	bf00      	nop
 80073e4:	20000208 	.word	0x20000208
 80073e8:	20000050 	.word	0x20000050

080073ec <__cvt>:
 80073ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	ec55 4b10 	vmov	r4, r5, d0
 80073f4:	2d00      	cmp	r5, #0
 80073f6:	460e      	mov	r6, r1
 80073f8:	4619      	mov	r1, r3
 80073fa:	462b      	mov	r3, r5
 80073fc:	bfbb      	ittet	lt
 80073fe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007402:	461d      	movlt	r5, r3
 8007404:	2300      	movge	r3, #0
 8007406:	232d      	movlt	r3, #45	; 0x2d
 8007408:	700b      	strb	r3, [r1, #0]
 800740a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800740c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007410:	4691      	mov	r9, r2
 8007412:	f023 0820 	bic.w	r8, r3, #32
 8007416:	bfbc      	itt	lt
 8007418:	4622      	movlt	r2, r4
 800741a:	4614      	movlt	r4, r2
 800741c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007420:	d005      	beq.n	800742e <__cvt+0x42>
 8007422:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007426:	d100      	bne.n	800742a <__cvt+0x3e>
 8007428:	3601      	adds	r6, #1
 800742a:	2102      	movs	r1, #2
 800742c:	e000      	b.n	8007430 <__cvt+0x44>
 800742e:	2103      	movs	r1, #3
 8007430:	ab03      	add	r3, sp, #12
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	ab02      	add	r3, sp, #8
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	ec45 4b10 	vmov	d0, r4, r5
 800743c:	4653      	mov	r3, sl
 800743e:	4632      	mov	r2, r6
 8007440:	f001 f8ce 	bl	80085e0 <_dtoa_r>
 8007444:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007448:	4607      	mov	r7, r0
 800744a:	d102      	bne.n	8007452 <__cvt+0x66>
 800744c:	f019 0f01 	tst.w	r9, #1
 8007450:	d022      	beq.n	8007498 <__cvt+0xac>
 8007452:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007456:	eb07 0906 	add.w	r9, r7, r6
 800745a:	d110      	bne.n	800747e <__cvt+0x92>
 800745c:	783b      	ldrb	r3, [r7, #0]
 800745e:	2b30      	cmp	r3, #48	; 0x30
 8007460:	d10a      	bne.n	8007478 <__cvt+0x8c>
 8007462:	2200      	movs	r2, #0
 8007464:	2300      	movs	r3, #0
 8007466:	4620      	mov	r0, r4
 8007468:	4629      	mov	r1, r5
 800746a:	f7f9 fb4d 	bl	8000b08 <__aeabi_dcmpeq>
 800746e:	b918      	cbnz	r0, 8007478 <__cvt+0x8c>
 8007470:	f1c6 0601 	rsb	r6, r6, #1
 8007474:	f8ca 6000 	str.w	r6, [sl]
 8007478:	f8da 3000 	ldr.w	r3, [sl]
 800747c:	4499      	add	r9, r3
 800747e:	2200      	movs	r2, #0
 8007480:	2300      	movs	r3, #0
 8007482:	4620      	mov	r0, r4
 8007484:	4629      	mov	r1, r5
 8007486:	f7f9 fb3f 	bl	8000b08 <__aeabi_dcmpeq>
 800748a:	b108      	cbz	r0, 8007490 <__cvt+0xa4>
 800748c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007490:	2230      	movs	r2, #48	; 0x30
 8007492:	9b03      	ldr	r3, [sp, #12]
 8007494:	454b      	cmp	r3, r9
 8007496:	d307      	bcc.n	80074a8 <__cvt+0xbc>
 8007498:	9b03      	ldr	r3, [sp, #12]
 800749a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800749c:	1bdb      	subs	r3, r3, r7
 800749e:	4638      	mov	r0, r7
 80074a0:	6013      	str	r3, [r2, #0]
 80074a2:	b004      	add	sp, #16
 80074a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074a8:	1c59      	adds	r1, r3, #1
 80074aa:	9103      	str	r1, [sp, #12]
 80074ac:	701a      	strb	r2, [r3, #0]
 80074ae:	e7f0      	b.n	8007492 <__cvt+0xa6>

080074b0 <__exponent>:
 80074b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074b2:	4603      	mov	r3, r0
 80074b4:	2900      	cmp	r1, #0
 80074b6:	bfb8      	it	lt
 80074b8:	4249      	neglt	r1, r1
 80074ba:	f803 2b02 	strb.w	r2, [r3], #2
 80074be:	bfb4      	ite	lt
 80074c0:	222d      	movlt	r2, #45	; 0x2d
 80074c2:	222b      	movge	r2, #43	; 0x2b
 80074c4:	2909      	cmp	r1, #9
 80074c6:	7042      	strb	r2, [r0, #1]
 80074c8:	dd2a      	ble.n	8007520 <__exponent+0x70>
 80074ca:	f10d 0207 	add.w	r2, sp, #7
 80074ce:	4617      	mov	r7, r2
 80074d0:	260a      	movs	r6, #10
 80074d2:	4694      	mov	ip, r2
 80074d4:	fb91 f5f6 	sdiv	r5, r1, r6
 80074d8:	fb06 1415 	mls	r4, r6, r5, r1
 80074dc:	3430      	adds	r4, #48	; 0x30
 80074de:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80074e2:	460c      	mov	r4, r1
 80074e4:	2c63      	cmp	r4, #99	; 0x63
 80074e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80074ea:	4629      	mov	r1, r5
 80074ec:	dcf1      	bgt.n	80074d2 <__exponent+0x22>
 80074ee:	3130      	adds	r1, #48	; 0x30
 80074f0:	f1ac 0402 	sub.w	r4, ip, #2
 80074f4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074f8:	1c41      	adds	r1, r0, #1
 80074fa:	4622      	mov	r2, r4
 80074fc:	42ba      	cmp	r2, r7
 80074fe:	d30a      	bcc.n	8007516 <__exponent+0x66>
 8007500:	f10d 0209 	add.w	r2, sp, #9
 8007504:	eba2 020c 	sub.w	r2, r2, ip
 8007508:	42bc      	cmp	r4, r7
 800750a:	bf88      	it	hi
 800750c:	2200      	movhi	r2, #0
 800750e:	4413      	add	r3, r2
 8007510:	1a18      	subs	r0, r3, r0
 8007512:	b003      	add	sp, #12
 8007514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007516:	f812 5b01 	ldrb.w	r5, [r2], #1
 800751a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800751e:	e7ed      	b.n	80074fc <__exponent+0x4c>
 8007520:	2330      	movs	r3, #48	; 0x30
 8007522:	3130      	adds	r1, #48	; 0x30
 8007524:	7083      	strb	r3, [r0, #2]
 8007526:	70c1      	strb	r1, [r0, #3]
 8007528:	1d03      	adds	r3, r0, #4
 800752a:	e7f1      	b.n	8007510 <__exponent+0x60>

0800752c <_printf_float>:
 800752c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007530:	ed2d 8b02 	vpush	{d8}
 8007534:	b08d      	sub	sp, #52	; 0x34
 8007536:	460c      	mov	r4, r1
 8007538:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800753c:	4616      	mov	r6, r2
 800753e:	461f      	mov	r7, r3
 8007540:	4605      	mov	r5, r0
 8007542:	f000 ff2d 	bl	80083a0 <_localeconv_r>
 8007546:	f8d0 a000 	ldr.w	sl, [r0]
 800754a:	4650      	mov	r0, sl
 800754c:	f7f8 feb0 	bl	80002b0 <strlen>
 8007550:	2300      	movs	r3, #0
 8007552:	930a      	str	r3, [sp, #40]	; 0x28
 8007554:	6823      	ldr	r3, [r4, #0]
 8007556:	9305      	str	r3, [sp, #20]
 8007558:	f8d8 3000 	ldr.w	r3, [r8]
 800755c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007560:	3307      	adds	r3, #7
 8007562:	f023 0307 	bic.w	r3, r3, #7
 8007566:	f103 0208 	add.w	r2, r3, #8
 800756a:	f8c8 2000 	str.w	r2, [r8]
 800756e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007572:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007576:	9307      	str	r3, [sp, #28]
 8007578:	f8cd 8018 	str.w	r8, [sp, #24]
 800757c:	ee08 0a10 	vmov	s16, r0
 8007580:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007584:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007588:	4b9e      	ldr	r3, [pc, #632]	; (8007804 <_printf_float+0x2d8>)
 800758a:	f04f 32ff 	mov.w	r2, #4294967295
 800758e:	f7f9 faed 	bl	8000b6c <__aeabi_dcmpun>
 8007592:	bb88      	cbnz	r0, 80075f8 <_printf_float+0xcc>
 8007594:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007598:	4b9a      	ldr	r3, [pc, #616]	; (8007804 <_printf_float+0x2d8>)
 800759a:	f04f 32ff 	mov.w	r2, #4294967295
 800759e:	f7f9 fac7 	bl	8000b30 <__aeabi_dcmple>
 80075a2:	bb48      	cbnz	r0, 80075f8 <_printf_float+0xcc>
 80075a4:	2200      	movs	r2, #0
 80075a6:	2300      	movs	r3, #0
 80075a8:	4640      	mov	r0, r8
 80075aa:	4649      	mov	r1, r9
 80075ac:	f7f9 fab6 	bl	8000b1c <__aeabi_dcmplt>
 80075b0:	b110      	cbz	r0, 80075b8 <_printf_float+0x8c>
 80075b2:	232d      	movs	r3, #45	; 0x2d
 80075b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075b8:	4a93      	ldr	r2, [pc, #588]	; (8007808 <_printf_float+0x2dc>)
 80075ba:	4b94      	ldr	r3, [pc, #592]	; (800780c <_printf_float+0x2e0>)
 80075bc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075c0:	bf94      	ite	ls
 80075c2:	4690      	movls	r8, r2
 80075c4:	4698      	movhi	r8, r3
 80075c6:	2303      	movs	r3, #3
 80075c8:	6123      	str	r3, [r4, #16]
 80075ca:	9b05      	ldr	r3, [sp, #20]
 80075cc:	f023 0304 	bic.w	r3, r3, #4
 80075d0:	6023      	str	r3, [r4, #0]
 80075d2:	f04f 0900 	mov.w	r9, #0
 80075d6:	9700      	str	r7, [sp, #0]
 80075d8:	4633      	mov	r3, r6
 80075da:	aa0b      	add	r2, sp, #44	; 0x2c
 80075dc:	4621      	mov	r1, r4
 80075de:	4628      	mov	r0, r5
 80075e0:	f000 f9da 	bl	8007998 <_printf_common>
 80075e4:	3001      	adds	r0, #1
 80075e6:	f040 8090 	bne.w	800770a <_printf_float+0x1de>
 80075ea:	f04f 30ff 	mov.w	r0, #4294967295
 80075ee:	b00d      	add	sp, #52	; 0x34
 80075f0:	ecbd 8b02 	vpop	{d8}
 80075f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075f8:	4642      	mov	r2, r8
 80075fa:	464b      	mov	r3, r9
 80075fc:	4640      	mov	r0, r8
 80075fe:	4649      	mov	r1, r9
 8007600:	f7f9 fab4 	bl	8000b6c <__aeabi_dcmpun>
 8007604:	b140      	cbz	r0, 8007618 <_printf_float+0xec>
 8007606:	464b      	mov	r3, r9
 8007608:	2b00      	cmp	r3, #0
 800760a:	bfbc      	itt	lt
 800760c:	232d      	movlt	r3, #45	; 0x2d
 800760e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007612:	4a7f      	ldr	r2, [pc, #508]	; (8007810 <_printf_float+0x2e4>)
 8007614:	4b7f      	ldr	r3, [pc, #508]	; (8007814 <_printf_float+0x2e8>)
 8007616:	e7d1      	b.n	80075bc <_printf_float+0x90>
 8007618:	6863      	ldr	r3, [r4, #4]
 800761a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800761e:	9206      	str	r2, [sp, #24]
 8007620:	1c5a      	adds	r2, r3, #1
 8007622:	d13f      	bne.n	80076a4 <_printf_float+0x178>
 8007624:	2306      	movs	r3, #6
 8007626:	6063      	str	r3, [r4, #4]
 8007628:	9b05      	ldr	r3, [sp, #20]
 800762a:	6861      	ldr	r1, [r4, #4]
 800762c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007630:	2300      	movs	r3, #0
 8007632:	9303      	str	r3, [sp, #12]
 8007634:	ab0a      	add	r3, sp, #40	; 0x28
 8007636:	e9cd b301 	strd	fp, r3, [sp, #4]
 800763a:	ab09      	add	r3, sp, #36	; 0x24
 800763c:	ec49 8b10 	vmov	d0, r8, r9
 8007640:	9300      	str	r3, [sp, #0]
 8007642:	6022      	str	r2, [r4, #0]
 8007644:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007648:	4628      	mov	r0, r5
 800764a:	f7ff fecf 	bl	80073ec <__cvt>
 800764e:	9b06      	ldr	r3, [sp, #24]
 8007650:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007652:	2b47      	cmp	r3, #71	; 0x47
 8007654:	4680      	mov	r8, r0
 8007656:	d108      	bne.n	800766a <_printf_float+0x13e>
 8007658:	1cc8      	adds	r0, r1, #3
 800765a:	db02      	blt.n	8007662 <_printf_float+0x136>
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	4299      	cmp	r1, r3
 8007660:	dd41      	ble.n	80076e6 <_printf_float+0x1ba>
 8007662:	f1ab 0302 	sub.w	r3, fp, #2
 8007666:	fa5f fb83 	uxtb.w	fp, r3
 800766a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800766e:	d820      	bhi.n	80076b2 <_printf_float+0x186>
 8007670:	3901      	subs	r1, #1
 8007672:	465a      	mov	r2, fp
 8007674:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007678:	9109      	str	r1, [sp, #36]	; 0x24
 800767a:	f7ff ff19 	bl	80074b0 <__exponent>
 800767e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007680:	1813      	adds	r3, r2, r0
 8007682:	2a01      	cmp	r2, #1
 8007684:	4681      	mov	r9, r0
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	dc02      	bgt.n	8007690 <_printf_float+0x164>
 800768a:	6822      	ldr	r2, [r4, #0]
 800768c:	07d2      	lsls	r2, r2, #31
 800768e:	d501      	bpl.n	8007694 <_printf_float+0x168>
 8007690:	3301      	adds	r3, #1
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007698:	2b00      	cmp	r3, #0
 800769a:	d09c      	beq.n	80075d6 <_printf_float+0xaa>
 800769c:	232d      	movs	r3, #45	; 0x2d
 800769e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076a2:	e798      	b.n	80075d6 <_printf_float+0xaa>
 80076a4:	9a06      	ldr	r2, [sp, #24]
 80076a6:	2a47      	cmp	r2, #71	; 0x47
 80076a8:	d1be      	bne.n	8007628 <_printf_float+0xfc>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1bc      	bne.n	8007628 <_printf_float+0xfc>
 80076ae:	2301      	movs	r3, #1
 80076b0:	e7b9      	b.n	8007626 <_printf_float+0xfa>
 80076b2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076b6:	d118      	bne.n	80076ea <_printf_float+0x1be>
 80076b8:	2900      	cmp	r1, #0
 80076ba:	6863      	ldr	r3, [r4, #4]
 80076bc:	dd0b      	ble.n	80076d6 <_printf_float+0x1aa>
 80076be:	6121      	str	r1, [r4, #16]
 80076c0:	b913      	cbnz	r3, 80076c8 <_printf_float+0x19c>
 80076c2:	6822      	ldr	r2, [r4, #0]
 80076c4:	07d0      	lsls	r0, r2, #31
 80076c6:	d502      	bpl.n	80076ce <_printf_float+0x1a2>
 80076c8:	3301      	adds	r3, #1
 80076ca:	440b      	add	r3, r1
 80076cc:	6123      	str	r3, [r4, #16]
 80076ce:	65a1      	str	r1, [r4, #88]	; 0x58
 80076d0:	f04f 0900 	mov.w	r9, #0
 80076d4:	e7de      	b.n	8007694 <_printf_float+0x168>
 80076d6:	b913      	cbnz	r3, 80076de <_printf_float+0x1b2>
 80076d8:	6822      	ldr	r2, [r4, #0]
 80076da:	07d2      	lsls	r2, r2, #31
 80076dc:	d501      	bpl.n	80076e2 <_printf_float+0x1b6>
 80076de:	3302      	adds	r3, #2
 80076e0:	e7f4      	b.n	80076cc <_printf_float+0x1a0>
 80076e2:	2301      	movs	r3, #1
 80076e4:	e7f2      	b.n	80076cc <_printf_float+0x1a0>
 80076e6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076ec:	4299      	cmp	r1, r3
 80076ee:	db05      	blt.n	80076fc <_printf_float+0x1d0>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	6121      	str	r1, [r4, #16]
 80076f4:	07d8      	lsls	r0, r3, #31
 80076f6:	d5ea      	bpl.n	80076ce <_printf_float+0x1a2>
 80076f8:	1c4b      	adds	r3, r1, #1
 80076fa:	e7e7      	b.n	80076cc <_printf_float+0x1a0>
 80076fc:	2900      	cmp	r1, #0
 80076fe:	bfd4      	ite	le
 8007700:	f1c1 0202 	rsble	r2, r1, #2
 8007704:	2201      	movgt	r2, #1
 8007706:	4413      	add	r3, r2
 8007708:	e7e0      	b.n	80076cc <_printf_float+0x1a0>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	055a      	lsls	r2, r3, #21
 800770e:	d407      	bmi.n	8007720 <_printf_float+0x1f4>
 8007710:	6923      	ldr	r3, [r4, #16]
 8007712:	4642      	mov	r2, r8
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	d12c      	bne.n	8007778 <_printf_float+0x24c>
 800771e:	e764      	b.n	80075ea <_printf_float+0xbe>
 8007720:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007724:	f240 80e0 	bls.w	80078e8 <_printf_float+0x3bc>
 8007728:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800772c:	2200      	movs	r2, #0
 800772e:	2300      	movs	r3, #0
 8007730:	f7f9 f9ea 	bl	8000b08 <__aeabi_dcmpeq>
 8007734:	2800      	cmp	r0, #0
 8007736:	d034      	beq.n	80077a2 <_printf_float+0x276>
 8007738:	4a37      	ldr	r2, [pc, #220]	; (8007818 <_printf_float+0x2ec>)
 800773a:	2301      	movs	r3, #1
 800773c:	4631      	mov	r1, r6
 800773e:	4628      	mov	r0, r5
 8007740:	47b8      	blx	r7
 8007742:	3001      	adds	r0, #1
 8007744:	f43f af51 	beq.w	80075ea <_printf_float+0xbe>
 8007748:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800774c:	429a      	cmp	r2, r3
 800774e:	db02      	blt.n	8007756 <_printf_float+0x22a>
 8007750:	6823      	ldr	r3, [r4, #0]
 8007752:	07d8      	lsls	r0, r3, #31
 8007754:	d510      	bpl.n	8007778 <_printf_float+0x24c>
 8007756:	ee18 3a10 	vmov	r3, s16
 800775a:	4652      	mov	r2, sl
 800775c:	4631      	mov	r1, r6
 800775e:	4628      	mov	r0, r5
 8007760:	47b8      	blx	r7
 8007762:	3001      	adds	r0, #1
 8007764:	f43f af41 	beq.w	80075ea <_printf_float+0xbe>
 8007768:	f04f 0800 	mov.w	r8, #0
 800776c:	f104 091a 	add.w	r9, r4, #26
 8007770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007772:	3b01      	subs	r3, #1
 8007774:	4543      	cmp	r3, r8
 8007776:	dc09      	bgt.n	800778c <_printf_float+0x260>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	079b      	lsls	r3, r3, #30
 800777c:	f100 8107 	bmi.w	800798e <_printf_float+0x462>
 8007780:	68e0      	ldr	r0, [r4, #12]
 8007782:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007784:	4298      	cmp	r0, r3
 8007786:	bfb8      	it	lt
 8007788:	4618      	movlt	r0, r3
 800778a:	e730      	b.n	80075ee <_printf_float+0xc2>
 800778c:	2301      	movs	r3, #1
 800778e:	464a      	mov	r2, r9
 8007790:	4631      	mov	r1, r6
 8007792:	4628      	mov	r0, r5
 8007794:	47b8      	blx	r7
 8007796:	3001      	adds	r0, #1
 8007798:	f43f af27 	beq.w	80075ea <_printf_float+0xbe>
 800779c:	f108 0801 	add.w	r8, r8, #1
 80077a0:	e7e6      	b.n	8007770 <_printf_float+0x244>
 80077a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	dc39      	bgt.n	800781c <_printf_float+0x2f0>
 80077a8:	4a1b      	ldr	r2, [pc, #108]	; (8007818 <_printf_float+0x2ec>)
 80077aa:	2301      	movs	r3, #1
 80077ac:	4631      	mov	r1, r6
 80077ae:	4628      	mov	r0, r5
 80077b0:	47b8      	blx	r7
 80077b2:	3001      	adds	r0, #1
 80077b4:	f43f af19 	beq.w	80075ea <_printf_float+0xbe>
 80077b8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077bc:	4313      	orrs	r3, r2
 80077be:	d102      	bne.n	80077c6 <_printf_float+0x29a>
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	07d9      	lsls	r1, r3, #31
 80077c4:	d5d8      	bpl.n	8007778 <_printf_float+0x24c>
 80077c6:	ee18 3a10 	vmov	r3, s16
 80077ca:	4652      	mov	r2, sl
 80077cc:	4631      	mov	r1, r6
 80077ce:	4628      	mov	r0, r5
 80077d0:	47b8      	blx	r7
 80077d2:	3001      	adds	r0, #1
 80077d4:	f43f af09 	beq.w	80075ea <_printf_float+0xbe>
 80077d8:	f04f 0900 	mov.w	r9, #0
 80077dc:	f104 0a1a 	add.w	sl, r4, #26
 80077e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077e2:	425b      	negs	r3, r3
 80077e4:	454b      	cmp	r3, r9
 80077e6:	dc01      	bgt.n	80077ec <_printf_float+0x2c0>
 80077e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ea:	e792      	b.n	8007712 <_printf_float+0x1e6>
 80077ec:	2301      	movs	r3, #1
 80077ee:	4652      	mov	r2, sl
 80077f0:	4631      	mov	r1, r6
 80077f2:	4628      	mov	r0, r5
 80077f4:	47b8      	blx	r7
 80077f6:	3001      	adds	r0, #1
 80077f8:	f43f aef7 	beq.w	80075ea <_printf_float+0xbe>
 80077fc:	f109 0901 	add.w	r9, r9, #1
 8007800:	e7ee      	b.n	80077e0 <_printf_float+0x2b4>
 8007802:	bf00      	nop
 8007804:	7fefffff 	.word	0x7fefffff
 8007808:	0800c3b8 	.word	0x0800c3b8
 800780c:	0800c3bc 	.word	0x0800c3bc
 8007810:	0800c3c0 	.word	0x0800c3c0
 8007814:	0800c3c4 	.word	0x0800c3c4
 8007818:	0800c3c8 	.word	0x0800c3c8
 800781c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800781e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007820:	429a      	cmp	r2, r3
 8007822:	bfa8      	it	ge
 8007824:	461a      	movge	r2, r3
 8007826:	2a00      	cmp	r2, #0
 8007828:	4691      	mov	r9, r2
 800782a:	dc37      	bgt.n	800789c <_printf_float+0x370>
 800782c:	f04f 0b00 	mov.w	fp, #0
 8007830:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007834:	f104 021a 	add.w	r2, r4, #26
 8007838:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	eba3 0309 	sub.w	r3, r3, r9
 8007840:	455b      	cmp	r3, fp
 8007842:	dc33      	bgt.n	80078ac <_printf_float+0x380>
 8007844:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007848:	429a      	cmp	r2, r3
 800784a:	db3b      	blt.n	80078c4 <_printf_float+0x398>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	07da      	lsls	r2, r3, #31
 8007850:	d438      	bmi.n	80078c4 <_printf_float+0x398>
 8007852:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007856:	eba2 0903 	sub.w	r9, r2, r3
 800785a:	9b05      	ldr	r3, [sp, #20]
 800785c:	1ad2      	subs	r2, r2, r3
 800785e:	4591      	cmp	r9, r2
 8007860:	bfa8      	it	ge
 8007862:	4691      	movge	r9, r2
 8007864:	f1b9 0f00 	cmp.w	r9, #0
 8007868:	dc35      	bgt.n	80078d6 <_printf_float+0x3aa>
 800786a:	f04f 0800 	mov.w	r8, #0
 800786e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007872:	f104 0a1a 	add.w	sl, r4, #26
 8007876:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800787a:	1a9b      	subs	r3, r3, r2
 800787c:	eba3 0309 	sub.w	r3, r3, r9
 8007880:	4543      	cmp	r3, r8
 8007882:	f77f af79 	ble.w	8007778 <_printf_float+0x24c>
 8007886:	2301      	movs	r3, #1
 8007888:	4652      	mov	r2, sl
 800788a:	4631      	mov	r1, r6
 800788c:	4628      	mov	r0, r5
 800788e:	47b8      	blx	r7
 8007890:	3001      	adds	r0, #1
 8007892:	f43f aeaa 	beq.w	80075ea <_printf_float+0xbe>
 8007896:	f108 0801 	add.w	r8, r8, #1
 800789a:	e7ec      	b.n	8007876 <_printf_float+0x34a>
 800789c:	4613      	mov	r3, r2
 800789e:	4631      	mov	r1, r6
 80078a0:	4642      	mov	r2, r8
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b8      	blx	r7
 80078a6:	3001      	adds	r0, #1
 80078a8:	d1c0      	bne.n	800782c <_printf_float+0x300>
 80078aa:	e69e      	b.n	80075ea <_printf_float+0xbe>
 80078ac:	2301      	movs	r3, #1
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	9205      	str	r2, [sp, #20]
 80078b4:	47b8      	blx	r7
 80078b6:	3001      	adds	r0, #1
 80078b8:	f43f ae97 	beq.w	80075ea <_printf_float+0xbe>
 80078bc:	9a05      	ldr	r2, [sp, #20]
 80078be:	f10b 0b01 	add.w	fp, fp, #1
 80078c2:	e7b9      	b.n	8007838 <_printf_float+0x30c>
 80078c4:	ee18 3a10 	vmov	r3, s16
 80078c8:	4652      	mov	r2, sl
 80078ca:	4631      	mov	r1, r6
 80078cc:	4628      	mov	r0, r5
 80078ce:	47b8      	blx	r7
 80078d0:	3001      	adds	r0, #1
 80078d2:	d1be      	bne.n	8007852 <_printf_float+0x326>
 80078d4:	e689      	b.n	80075ea <_printf_float+0xbe>
 80078d6:	9a05      	ldr	r2, [sp, #20]
 80078d8:	464b      	mov	r3, r9
 80078da:	4442      	add	r2, r8
 80078dc:	4631      	mov	r1, r6
 80078de:	4628      	mov	r0, r5
 80078e0:	47b8      	blx	r7
 80078e2:	3001      	adds	r0, #1
 80078e4:	d1c1      	bne.n	800786a <_printf_float+0x33e>
 80078e6:	e680      	b.n	80075ea <_printf_float+0xbe>
 80078e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ea:	2a01      	cmp	r2, #1
 80078ec:	dc01      	bgt.n	80078f2 <_printf_float+0x3c6>
 80078ee:	07db      	lsls	r3, r3, #31
 80078f0:	d53a      	bpl.n	8007968 <_printf_float+0x43c>
 80078f2:	2301      	movs	r3, #1
 80078f4:	4642      	mov	r2, r8
 80078f6:	4631      	mov	r1, r6
 80078f8:	4628      	mov	r0, r5
 80078fa:	47b8      	blx	r7
 80078fc:	3001      	adds	r0, #1
 80078fe:	f43f ae74 	beq.w	80075ea <_printf_float+0xbe>
 8007902:	ee18 3a10 	vmov	r3, s16
 8007906:	4652      	mov	r2, sl
 8007908:	4631      	mov	r1, r6
 800790a:	4628      	mov	r0, r5
 800790c:	47b8      	blx	r7
 800790e:	3001      	adds	r0, #1
 8007910:	f43f ae6b 	beq.w	80075ea <_printf_float+0xbe>
 8007914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007918:	2200      	movs	r2, #0
 800791a:	2300      	movs	r3, #0
 800791c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007920:	f7f9 f8f2 	bl	8000b08 <__aeabi_dcmpeq>
 8007924:	b9d8      	cbnz	r0, 800795e <_printf_float+0x432>
 8007926:	f10a 33ff 	add.w	r3, sl, #4294967295
 800792a:	f108 0201 	add.w	r2, r8, #1
 800792e:	4631      	mov	r1, r6
 8007930:	4628      	mov	r0, r5
 8007932:	47b8      	blx	r7
 8007934:	3001      	adds	r0, #1
 8007936:	d10e      	bne.n	8007956 <_printf_float+0x42a>
 8007938:	e657      	b.n	80075ea <_printf_float+0xbe>
 800793a:	2301      	movs	r3, #1
 800793c:	4652      	mov	r2, sl
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f ae50 	beq.w	80075ea <_printf_float+0xbe>
 800794a:	f108 0801 	add.w	r8, r8, #1
 800794e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007950:	3b01      	subs	r3, #1
 8007952:	4543      	cmp	r3, r8
 8007954:	dcf1      	bgt.n	800793a <_printf_float+0x40e>
 8007956:	464b      	mov	r3, r9
 8007958:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800795c:	e6da      	b.n	8007714 <_printf_float+0x1e8>
 800795e:	f04f 0800 	mov.w	r8, #0
 8007962:	f104 0a1a 	add.w	sl, r4, #26
 8007966:	e7f2      	b.n	800794e <_printf_float+0x422>
 8007968:	2301      	movs	r3, #1
 800796a:	4642      	mov	r2, r8
 800796c:	e7df      	b.n	800792e <_printf_float+0x402>
 800796e:	2301      	movs	r3, #1
 8007970:	464a      	mov	r2, r9
 8007972:	4631      	mov	r1, r6
 8007974:	4628      	mov	r0, r5
 8007976:	47b8      	blx	r7
 8007978:	3001      	adds	r0, #1
 800797a:	f43f ae36 	beq.w	80075ea <_printf_float+0xbe>
 800797e:	f108 0801 	add.w	r8, r8, #1
 8007982:	68e3      	ldr	r3, [r4, #12]
 8007984:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007986:	1a5b      	subs	r3, r3, r1
 8007988:	4543      	cmp	r3, r8
 800798a:	dcf0      	bgt.n	800796e <_printf_float+0x442>
 800798c:	e6f8      	b.n	8007780 <_printf_float+0x254>
 800798e:	f04f 0800 	mov.w	r8, #0
 8007992:	f104 0919 	add.w	r9, r4, #25
 8007996:	e7f4      	b.n	8007982 <_printf_float+0x456>

08007998 <_printf_common>:
 8007998:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800799c:	4616      	mov	r6, r2
 800799e:	4699      	mov	r9, r3
 80079a0:	688a      	ldr	r2, [r1, #8]
 80079a2:	690b      	ldr	r3, [r1, #16]
 80079a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079a8:	4293      	cmp	r3, r2
 80079aa:	bfb8      	it	lt
 80079ac:	4613      	movlt	r3, r2
 80079ae:	6033      	str	r3, [r6, #0]
 80079b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079b4:	4607      	mov	r7, r0
 80079b6:	460c      	mov	r4, r1
 80079b8:	b10a      	cbz	r2, 80079be <_printf_common+0x26>
 80079ba:	3301      	adds	r3, #1
 80079bc:	6033      	str	r3, [r6, #0]
 80079be:	6823      	ldr	r3, [r4, #0]
 80079c0:	0699      	lsls	r1, r3, #26
 80079c2:	bf42      	ittt	mi
 80079c4:	6833      	ldrmi	r3, [r6, #0]
 80079c6:	3302      	addmi	r3, #2
 80079c8:	6033      	strmi	r3, [r6, #0]
 80079ca:	6825      	ldr	r5, [r4, #0]
 80079cc:	f015 0506 	ands.w	r5, r5, #6
 80079d0:	d106      	bne.n	80079e0 <_printf_common+0x48>
 80079d2:	f104 0a19 	add.w	sl, r4, #25
 80079d6:	68e3      	ldr	r3, [r4, #12]
 80079d8:	6832      	ldr	r2, [r6, #0]
 80079da:	1a9b      	subs	r3, r3, r2
 80079dc:	42ab      	cmp	r3, r5
 80079de:	dc26      	bgt.n	8007a2e <_printf_common+0x96>
 80079e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079e4:	1e13      	subs	r3, r2, #0
 80079e6:	6822      	ldr	r2, [r4, #0]
 80079e8:	bf18      	it	ne
 80079ea:	2301      	movne	r3, #1
 80079ec:	0692      	lsls	r2, r2, #26
 80079ee:	d42b      	bmi.n	8007a48 <_printf_common+0xb0>
 80079f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079f4:	4649      	mov	r1, r9
 80079f6:	4638      	mov	r0, r7
 80079f8:	47c0      	blx	r8
 80079fa:	3001      	adds	r0, #1
 80079fc:	d01e      	beq.n	8007a3c <_printf_common+0xa4>
 80079fe:	6823      	ldr	r3, [r4, #0]
 8007a00:	6922      	ldr	r2, [r4, #16]
 8007a02:	f003 0306 	and.w	r3, r3, #6
 8007a06:	2b04      	cmp	r3, #4
 8007a08:	bf02      	ittt	eq
 8007a0a:	68e5      	ldreq	r5, [r4, #12]
 8007a0c:	6833      	ldreq	r3, [r6, #0]
 8007a0e:	1aed      	subeq	r5, r5, r3
 8007a10:	68a3      	ldr	r3, [r4, #8]
 8007a12:	bf0c      	ite	eq
 8007a14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a18:	2500      	movne	r5, #0
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	bfc4      	itt	gt
 8007a1e:	1a9b      	subgt	r3, r3, r2
 8007a20:	18ed      	addgt	r5, r5, r3
 8007a22:	2600      	movs	r6, #0
 8007a24:	341a      	adds	r4, #26
 8007a26:	42b5      	cmp	r5, r6
 8007a28:	d11a      	bne.n	8007a60 <_printf_common+0xc8>
 8007a2a:	2000      	movs	r0, #0
 8007a2c:	e008      	b.n	8007a40 <_printf_common+0xa8>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	4652      	mov	r2, sl
 8007a32:	4649      	mov	r1, r9
 8007a34:	4638      	mov	r0, r7
 8007a36:	47c0      	blx	r8
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d103      	bne.n	8007a44 <_printf_common+0xac>
 8007a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a44:	3501      	adds	r5, #1
 8007a46:	e7c6      	b.n	80079d6 <_printf_common+0x3e>
 8007a48:	18e1      	adds	r1, r4, r3
 8007a4a:	1c5a      	adds	r2, r3, #1
 8007a4c:	2030      	movs	r0, #48	; 0x30
 8007a4e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a52:	4422      	add	r2, r4
 8007a54:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a58:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a5c:	3302      	adds	r3, #2
 8007a5e:	e7c7      	b.n	80079f0 <_printf_common+0x58>
 8007a60:	2301      	movs	r3, #1
 8007a62:	4622      	mov	r2, r4
 8007a64:	4649      	mov	r1, r9
 8007a66:	4638      	mov	r0, r7
 8007a68:	47c0      	blx	r8
 8007a6a:	3001      	adds	r0, #1
 8007a6c:	d0e6      	beq.n	8007a3c <_printf_common+0xa4>
 8007a6e:	3601      	adds	r6, #1
 8007a70:	e7d9      	b.n	8007a26 <_printf_common+0x8e>
	...

08007a74 <_printf_i>:
 8007a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a78:	7e0f      	ldrb	r7, [r1, #24]
 8007a7a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a7c:	2f78      	cmp	r7, #120	; 0x78
 8007a7e:	4691      	mov	r9, r2
 8007a80:	4680      	mov	r8, r0
 8007a82:	460c      	mov	r4, r1
 8007a84:	469a      	mov	sl, r3
 8007a86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a8a:	d807      	bhi.n	8007a9c <_printf_i+0x28>
 8007a8c:	2f62      	cmp	r7, #98	; 0x62
 8007a8e:	d80a      	bhi.n	8007aa6 <_printf_i+0x32>
 8007a90:	2f00      	cmp	r7, #0
 8007a92:	f000 80d4 	beq.w	8007c3e <_printf_i+0x1ca>
 8007a96:	2f58      	cmp	r7, #88	; 0x58
 8007a98:	f000 80c0 	beq.w	8007c1c <_printf_i+0x1a8>
 8007a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aa4:	e03a      	b.n	8007b1c <_printf_i+0xa8>
 8007aa6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007aaa:	2b15      	cmp	r3, #21
 8007aac:	d8f6      	bhi.n	8007a9c <_printf_i+0x28>
 8007aae:	a101      	add	r1, pc, #4	; (adr r1, 8007ab4 <_printf_i+0x40>)
 8007ab0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007ab4:	08007b0d 	.word	0x08007b0d
 8007ab8:	08007b21 	.word	0x08007b21
 8007abc:	08007a9d 	.word	0x08007a9d
 8007ac0:	08007a9d 	.word	0x08007a9d
 8007ac4:	08007a9d 	.word	0x08007a9d
 8007ac8:	08007a9d 	.word	0x08007a9d
 8007acc:	08007b21 	.word	0x08007b21
 8007ad0:	08007a9d 	.word	0x08007a9d
 8007ad4:	08007a9d 	.word	0x08007a9d
 8007ad8:	08007a9d 	.word	0x08007a9d
 8007adc:	08007a9d 	.word	0x08007a9d
 8007ae0:	08007c25 	.word	0x08007c25
 8007ae4:	08007b4d 	.word	0x08007b4d
 8007ae8:	08007bdf 	.word	0x08007bdf
 8007aec:	08007a9d 	.word	0x08007a9d
 8007af0:	08007a9d 	.word	0x08007a9d
 8007af4:	08007c47 	.word	0x08007c47
 8007af8:	08007a9d 	.word	0x08007a9d
 8007afc:	08007b4d 	.word	0x08007b4d
 8007b00:	08007a9d 	.word	0x08007a9d
 8007b04:	08007a9d 	.word	0x08007a9d
 8007b08:	08007be7 	.word	0x08007be7
 8007b0c:	682b      	ldr	r3, [r5, #0]
 8007b0e:	1d1a      	adds	r2, r3, #4
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	602a      	str	r2, [r5, #0]
 8007b14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b1c:	2301      	movs	r3, #1
 8007b1e:	e09f      	b.n	8007c60 <_printf_i+0x1ec>
 8007b20:	6820      	ldr	r0, [r4, #0]
 8007b22:	682b      	ldr	r3, [r5, #0]
 8007b24:	0607      	lsls	r7, r0, #24
 8007b26:	f103 0104 	add.w	r1, r3, #4
 8007b2a:	6029      	str	r1, [r5, #0]
 8007b2c:	d501      	bpl.n	8007b32 <_printf_i+0xbe>
 8007b2e:	681e      	ldr	r6, [r3, #0]
 8007b30:	e003      	b.n	8007b3a <_printf_i+0xc6>
 8007b32:	0646      	lsls	r6, r0, #25
 8007b34:	d5fb      	bpl.n	8007b2e <_printf_i+0xba>
 8007b36:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b3a:	2e00      	cmp	r6, #0
 8007b3c:	da03      	bge.n	8007b46 <_printf_i+0xd2>
 8007b3e:	232d      	movs	r3, #45	; 0x2d
 8007b40:	4276      	negs	r6, r6
 8007b42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b46:	485a      	ldr	r0, [pc, #360]	; (8007cb0 <_printf_i+0x23c>)
 8007b48:	230a      	movs	r3, #10
 8007b4a:	e012      	b.n	8007b72 <_printf_i+0xfe>
 8007b4c:	682b      	ldr	r3, [r5, #0]
 8007b4e:	6820      	ldr	r0, [r4, #0]
 8007b50:	1d19      	adds	r1, r3, #4
 8007b52:	6029      	str	r1, [r5, #0]
 8007b54:	0605      	lsls	r5, r0, #24
 8007b56:	d501      	bpl.n	8007b5c <_printf_i+0xe8>
 8007b58:	681e      	ldr	r6, [r3, #0]
 8007b5a:	e002      	b.n	8007b62 <_printf_i+0xee>
 8007b5c:	0641      	lsls	r1, r0, #25
 8007b5e:	d5fb      	bpl.n	8007b58 <_printf_i+0xe4>
 8007b60:	881e      	ldrh	r6, [r3, #0]
 8007b62:	4853      	ldr	r0, [pc, #332]	; (8007cb0 <_printf_i+0x23c>)
 8007b64:	2f6f      	cmp	r7, #111	; 0x6f
 8007b66:	bf0c      	ite	eq
 8007b68:	2308      	moveq	r3, #8
 8007b6a:	230a      	movne	r3, #10
 8007b6c:	2100      	movs	r1, #0
 8007b6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b72:	6865      	ldr	r5, [r4, #4]
 8007b74:	60a5      	str	r5, [r4, #8]
 8007b76:	2d00      	cmp	r5, #0
 8007b78:	bfa2      	ittt	ge
 8007b7a:	6821      	ldrge	r1, [r4, #0]
 8007b7c:	f021 0104 	bicge.w	r1, r1, #4
 8007b80:	6021      	strge	r1, [r4, #0]
 8007b82:	b90e      	cbnz	r6, 8007b88 <_printf_i+0x114>
 8007b84:	2d00      	cmp	r5, #0
 8007b86:	d04b      	beq.n	8007c20 <_printf_i+0x1ac>
 8007b88:	4615      	mov	r5, r2
 8007b8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b8e:	fb03 6711 	mls	r7, r3, r1, r6
 8007b92:	5dc7      	ldrb	r7, [r0, r7]
 8007b94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b98:	4637      	mov	r7, r6
 8007b9a:	42bb      	cmp	r3, r7
 8007b9c:	460e      	mov	r6, r1
 8007b9e:	d9f4      	bls.n	8007b8a <_printf_i+0x116>
 8007ba0:	2b08      	cmp	r3, #8
 8007ba2:	d10b      	bne.n	8007bbc <_printf_i+0x148>
 8007ba4:	6823      	ldr	r3, [r4, #0]
 8007ba6:	07de      	lsls	r6, r3, #31
 8007ba8:	d508      	bpl.n	8007bbc <_printf_i+0x148>
 8007baa:	6923      	ldr	r3, [r4, #16]
 8007bac:	6861      	ldr	r1, [r4, #4]
 8007bae:	4299      	cmp	r1, r3
 8007bb0:	bfde      	ittt	le
 8007bb2:	2330      	movle	r3, #48	; 0x30
 8007bb4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bb8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bbc:	1b52      	subs	r2, r2, r5
 8007bbe:	6122      	str	r2, [r4, #16]
 8007bc0:	f8cd a000 	str.w	sl, [sp]
 8007bc4:	464b      	mov	r3, r9
 8007bc6:	aa03      	add	r2, sp, #12
 8007bc8:	4621      	mov	r1, r4
 8007bca:	4640      	mov	r0, r8
 8007bcc:	f7ff fee4 	bl	8007998 <_printf_common>
 8007bd0:	3001      	adds	r0, #1
 8007bd2:	d14a      	bne.n	8007c6a <_printf_i+0x1f6>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b004      	add	sp, #16
 8007bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bde:	6823      	ldr	r3, [r4, #0]
 8007be0:	f043 0320 	orr.w	r3, r3, #32
 8007be4:	6023      	str	r3, [r4, #0]
 8007be6:	4833      	ldr	r0, [pc, #204]	; (8007cb4 <_printf_i+0x240>)
 8007be8:	2778      	movs	r7, #120	; 0x78
 8007bea:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bee:	6823      	ldr	r3, [r4, #0]
 8007bf0:	6829      	ldr	r1, [r5, #0]
 8007bf2:	061f      	lsls	r7, r3, #24
 8007bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bf8:	d402      	bmi.n	8007c00 <_printf_i+0x18c>
 8007bfa:	065f      	lsls	r7, r3, #25
 8007bfc:	bf48      	it	mi
 8007bfe:	b2b6      	uxthmi	r6, r6
 8007c00:	07df      	lsls	r7, r3, #31
 8007c02:	bf48      	it	mi
 8007c04:	f043 0320 	orrmi.w	r3, r3, #32
 8007c08:	6029      	str	r1, [r5, #0]
 8007c0a:	bf48      	it	mi
 8007c0c:	6023      	strmi	r3, [r4, #0]
 8007c0e:	b91e      	cbnz	r6, 8007c18 <_printf_i+0x1a4>
 8007c10:	6823      	ldr	r3, [r4, #0]
 8007c12:	f023 0320 	bic.w	r3, r3, #32
 8007c16:	6023      	str	r3, [r4, #0]
 8007c18:	2310      	movs	r3, #16
 8007c1a:	e7a7      	b.n	8007b6c <_printf_i+0xf8>
 8007c1c:	4824      	ldr	r0, [pc, #144]	; (8007cb0 <_printf_i+0x23c>)
 8007c1e:	e7e4      	b.n	8007bea <_printf_i+0x176>
 8007c20:	4615      	mov	r5, r2
 8007c22:	e7bd      	b.n	8007ba0 <_printf_i+0x12c>
 8007c24:	682b      	ldr	r3, [r5, #0]
 8007c26:	6826      	ldr	r6, [r4, #0]
 8007c28:	6961      	ldr	r1, [r4, #20]
 8007c2a:	1d18      	adds	r0, r3, #4
 8007c2c:	6028      	str	r0, [r5, #0]
 8007c2e:	0635      	lsls	r5, r6, #24
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	d501      	bpl.n	8007c38 <_printf_i+0x1c4>
 8007c34:	6019      	str	r1, [r3, #0]
 8007c36:	e002      	b.n	8007c3e <_printf_i+0x1ca>
 8007c38:	0670      	lsls	r0, r6, #25
 8007c3a:	d5fb      	bpl.n	8007c34 <_printf_i+0x1c0>
 8007c3c:	8019      	strh	r1, [r3, #0]
 8007c3e:	2300      	movs	r3, #0
 8007c40:	6123      	str	r3, [r4, #16]
 8007c42:	4615      	mov	r5, r2
 8007c44:	e7bc      	b.n	8007bc0 <_printf_i+0x14c>
 8007c46:	682b      	ldr	r3, [r5, #0]
 8007c48:	1d1a      	adds	r2, r3, #4
 8007c4a:	602a      	str	r2, [r5, #0]
 8007c4c:	681d      	ldr	r5, [r3, #0]
 8007c4e:	6862      	ldr	r2, [r4, #4]
 8007c50:	2100      	movs	r1, #0
 8007c52:	4628      	mov	r0, r5
 8007c54:	f7f8 fadc 	bl	8000210 <memchr>
 8007c58:	b108      	cbz	r0, 8007c5e <_printf_i+0x1ea>
 8007c5a:	1b40      	subs	r0, r0, r5
 8007c5c:	6060      	str	r0, [r4, #4]
 8007c5e:	6863      	ldr	r3, [r4, #4]
 8007c60:	6123      	str	r3, [r4, #16]
 8007c62:	2300      	movs	r3, #0
 8007c64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c68:	e7aa      	b.n	8007bc0 <_printf_i+0x14c>
 8007c6a:	6923      	ldr	r3, [r4, #16]
 8007c6c:	462a      	mov	r2, r5
 8007c6e:	4649      	mov	r1, r9
 8007c70:	4640      	mov	r0, r8
 8007c72:	47d0      	blx	sl
 8007c74:	3001      	adds	r0, #1
 8007c76:	d0ad      	beq.n	8007bd4 <_printf_i+0x160>
 8007c78:	6823      	ldr	r3, [r4, #0]
 8007c7a:	079b      	lsls	r3, r3, #30
 8007c7c:	d413      	bmi.n	8007ca6 <_printf_i+0x232>
 8007c7e:	68e0      	ldr	r0, [r4, #12]
 8007c80:	9b03      	ldr	r3, [sp, #12]
 8007c82:	4298      	cmp	r0, r3
 8007c84:	bfb8      	it	lt
 8007c86:	4618      	movlt	r0, r3
 8007c88:	e7a6      	b.n	8007bd8 <_printf_i+0x164>
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	4632      	mov	r2, r6
 8007c8e:	4649      	mov	r1, r9
 8007c90:	4640      	mov	r0, r8
 8007c92:	47d0      	blx	sl
 8007c94:	3001      	adds	r0, #1
 8007c96:	d09d      	beq.n	8007bd4 <_printf_i+0x160>
 8007c98:	3501      	adds	r5, #1
 8007c9a:	68e3      	ldr	r3, [r4, #12]
 8007c9c:	9903      	ldr	r1, [sp, #12]
 8007c9e:	1a5b      	subs	r3, r3, r1
 8007ca0:	42ab      	cmp	r3, r5
 8007ca2:	dcf2      	bgt.n	8007c8a <_printf_i+0x216>
 8007ca4:	e7eb      	b.n	8007c7e <_printf_i+0x20a>
 8007ca6:	2500      	movs	r5, #0
 8007ca8:	f104 0619 	add.w	r6, r4, #25
 8007cac:	e7f5      	b.n	8007c9a <_printf_i+0x226>
 8007cae:	bf00      	nop
 8007cb0:	0800c3ca 	.word	0x0800c3ca
 8007cb4:	0800c3db 	.word	0x0800c3db

08007cb8 <_scanf_float>:
 8007cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cbc:	b087      	sub	sp, #28
 8007cbe:	4617      	mov	r7, r2
 8007cc0:	9303      	str	r3, [sp, #12]
 8007cc2:	688b      	ldr	r3, [r1, #8]
 8007cc4:	1e5a      	subs	r2, r3, #1
 8007cc6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007cca:	bf83      	ittte	hi
 8007ccc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007cd0:	195b      	addhi	r3, r3, r5
 8007cd2:	9302      	strhi	r3, [sp, #8]
 8007cd4:	2300      	movls	r3, #0
 8007cd6:	bf86      	itte	hi
 8007cd8:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007cdc:	608b      	strhi	r3, [r1, #8]
 8007cde:	9302      	strls	r3, [sp, #8]
 8007ce0:	680b      	ldr	r3, [r1, #0]
 8007ce2:	468b      	mov	fp, r1
 8007ce4:	2500      	movs	r5, #0
 8007ce6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007cea:	f84b 3b1c 	str.w	r3, [fp], #28
 8007cee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007cf2:	4680      	mov	r8, r0
 8007cf4:	460c      	mov	r4, r1
 8007cf6:	465e      	mov	r6, fp
 8007cf8:	46aa      	mov	sl, r5
 8007cfa:	46a9      	mov	r9, r5
 8007cfc:	9501      	str	r5, [sp, #4]
 8007cfe:	68a2      	ldr	r2, [r4, #8]
 8007d00:	b152      	cbz	r2, 8007d18 <_scanf_float+0x60>
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	2b4e      	cmp	r3, #78	; 0x4e
 8007d08:	d864      	bhi.n	8007dd4 <_scanf_float+0x11c>
 8007d0a:	2b40      	cmp	r3, #64	; 0x40
 8007d0c:	d83c      	bhi.n	8007d88 <_scanf_float+0xd0>
 8007d0e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007d12:	b2c8      	uxtb	r0, r1
 8007d14:	280e      	cmp	r0, #14
 8007d16:	d93a      	bls.n	8007d8e <_scanf_float+0xd6>
 8007d18:	f1b9 0f00 	cmp.w	r9, #0
 8007d1c:	d003      	beq.n	8007d26 <_scanf_float+0x6e>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d24:	6023      	str	r3, [r4, #0]
 8007d26:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d2a:	f1ba 0f01 	cmp.w	sl, #1
 8007d2e:	f200 8113 	bhi.w	8007f58 <_scanf_float+0x2a0>
 8007d32:	455e      	cmp	r6, fp
 8007d34:	f200 8105 	bhi.w	8007f42 <_scanf_float+0x28a>
 8007d38:	2501      	movs	r5, #1
 8007d3a:	4628      	mov	r0, r5
 8007d3c:	b007      	add	sp, #28
 8007d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d42:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d46:	2a0d      	cmp	r2, #13
 8007d48:	d8e6      	bhi.n	8007d18 <_scanf_float+0x60>
 8007d4a:	a101      	add	r1, pc, #4	; (adr r1, 8007d50 <_scanf_float+0x98>)
 8007d4c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d50:	08007e8f 	.word	0x08007e8f
 8007d54:	08007d19 	.word	0x08007d19
 8007d58:	08007d19 	.word	0x08007d19
 8007d5c:	08007d19 	.word	0x08007d19
 8007d60:	08007eef 	.word	0x08007eef
 8007d64:	08007ec7 	.word	0x08007ec7
 8007d68:	08007d19 	.word	0x08007d19
 8007d6c:	08007d19 	.word	0x08007d19
 8007d70:	08007e9d 	.word	0x08007e9d
 8007d74:	08007d19 	.word	0x08007d19
 8007d78:	08007d19 	.word	0x08007d19
 8007d7c:	08007d19 	.word	0x08007d19
 8007d80:	08007d19 	.word	0x08007d19
 8007d84:	08007e55 	.word	0x08007e55
 8007d88:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007d8c:	e7db      	b.n	8007d46 <_scanf_float+0x8e>
 8007d8e:	290e      	cmp	r1, #14
 8007d90:	d8c2      	bhi.n	8007d18 <_scanf_float+0x60>
 8007d92:	a001      	add	r0, pc, #4	; (adr r0, 8007d98 <_scanf_float+0xe0>)
 8007d94:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d98:	08007e47 	.word	0x08007e47
 8007d9c:	08007d19 	.word	0x08007d19
 8007da0:	08007e47 	.word	0x08007e47
 8007da4:	08007edb 	.word	0x08007edb
 8007da8:	08007d19 	.word	0x08007d19
 8007dac:	08007df5 	.word	0x08007df5
 8007db0:	08007e31 	.word	0x08007e31
 8007db4:	08007e31 	.word	0x08007e31
 8007db8:	08007e31 	.word	0x08007e31
 8007dbc:	08007e31 	.word	0x08007e31
 8007dc0:	08007e31 	.word	0x08007e31
 8007dc4:	08007e31 	.word	0x08007e31
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007e31 	.word	0x08007e31
 8007dd0:	08007e31 	.word	0x08007e31
 8007dd4:	2b6e      	cmp	r3, #110	; 0x6e
 8007dd6:	d809      	bhi.n	8007dec <_scanf_float+0x134>
 8007dd8:	2b60      	cmp	r3, #96	; 0x60
 8007dda:	d8b2      	bhi.n	8007d42 <_scanf_float+0x8a>
 8007ddc:	2b54      	cmp	r3, #84	; 0x54
 8007dde:	d077      	beq.n	8007ed0 <_scanf_float+0x218>
 8007de0:	2b59      	cmp	r3, #89	; 0x59
 8007de2:	d199      	bne.n	8007d18 <_scanf_float+0x60>
 8007de4:	2d07      	cmp	r5, #7
 8007de6:	d197      	bne.n	8007d18 <_scanf_float+0x60>
 8007de8:	2508      	movs	r5, #8
 8007dea:	e029      	b.n	8007e40 <_scanf_float+0x188>
 8007dec:	2b74      	cmp	r3, #116	; 0x74
 8007dee:	d06f      	beq.n	8007ed0 <_scanf_float+0x218>
 8007df0:	2b79      	cmp	r3, #121	; 0x79
 8007df2:	e7f6      	b.n	8007de2 <_scanf_float+0x12a>
 8007df4:	6821      	ldr	r1, [r4, #0]
 8007df6:	05c8      	lsls	r0, r1, #23
 8007df8:	d51a      	bpl.n	8007e30 <_scanf_float+0x178>
 8007dfa:	9b02      	ldr	r3, [sp, #8]
 8007dfc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007e00:	6021      	str	r1, [r4, #0]
 8007e02:	f109 0901 	add.w	r9, r9, #1
 8007e06:	b11b      	cbz	r3, 8007e10 <_scanf_float+0x158>
 8007e08:	3b01      	subs	r3, #1
 8007e0a:	3201      	adds	r2, #1
 8007e0c:	9302      	str	r3, [sp, #8]
 8007e0e:	60a2      	str	r2, [r4, #8]
 8007e10:	68a3      	ldr	r3, [r4, #8]
 8007e12:	3b01      	subs	r3, #1
 8007e14:	60a3      	str	r3, [r4, #8]
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	3301      	adds	r3, #1
 8007e1a:	6123      	str	r3, [r4, #16]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	3b01      	subs	r3, #1
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	607b      	str	r3, [r7, #4]
 8007e24:	f340 8084 	ble.w	8007f30 <_scanf_float+0x278>
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	603b      	str	r3, [r7, #0]
 8007e2e:	e766      	b.n	8007cfe <_scanf_float+0x46>
 8007e30:	eb1a 0f05 	cmn.w	sl, r5
 8007e34:	f47f af70 	bne.w	8007d18 <_scanf_float+0x60>
 8007e38:	6822      	ldr	r2, [r4, #0]
 8007e3a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007e3e:	6022      	str	r2, [r4, #0]
 8007e40:	f806 3b01 	strb.w	r3, [r6], #1
 8007e44:	e7e4      	b.n	8007e10 <_scanf_float+0x158>
 8007e46:	6822      	ldr	r2, [r4, #0]
 8007e48:	0610      	lsls	r0, r2, #24
 8007e4a:	f57f af65 	bpl.w	8007d18 <_scanf_float+0x60>
 8007e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e52:	e7f4      	b.n	8007e3e <_scanf_float+0x186>
 8007e54:	f1ba 0f00 	cmp.w	sl, #0
 8007e58:	d10e      	bne.n	8007e78 <_scanf_float+0x1c0>
 8007e5a:	f1b9 0f00 	cmp.w	r9, #0
 8007e5e:	d10e      	bne.n	8007e7e <_scanf_float+0x1c6>
 8007e60:	6822      	ldr	r2, [r4, #0]
 8007e62:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e66:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e6a:	d108      	bne.n	8007e7e <_scanf_float+0x1c6>
 8007e6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e70:	6022      	str	r2, [r4, #0]
 8007e72:	f04f 0a01 	mov.w	sl, #1
 8007e76:	e7e3      	b.n	8007e40 <_scanf_float+0x188>
 8007e78:	f1ba 0f02 	cmp.w	sl, #2
 8007e7c:	d055      	beq.n	8007f2a <_scanf_float+0x272>
 8007e7e:	2d01      	cmp	r5, #1
 8007e80:	d002      	beq.n	8007e88 <_scanf_float+0x1d0>
 8007e82:	2d04      	cmp	r5, #4
 8007e84:	f47f af48 	bne.w	8007d18 <_scanf_float+0x60>
 8007e88:	3501      	adds	r5, #1
 8007e8a:	b2ed      	uxtb	r5, r5
 8007e8c:	e7d8      	b.n	8007e40 <_scanf_float+0x188>
 8007e8e:	f1ba 0f01 	cmp.w	sl, #1
 8007e92:	f47f af41 	bne.w	8007d18 <_scanf_float+0x60>
 8007e96:	f04f 0a02 	mov.w	sl, #2
 8007e9a:	e7d1      	b.n	8007e40 <_scanf_float+0x188>
 8007e9c:	b97d      	cbnz	r5, 8007ebe <_scanf_float+0x206>
 8007e9e:	f1b9 0f00 	cmp.w	r9, #0
 8007ea2:	f47f af3c 	bne.w	8007d1e <_scanf_float+0x66>
 8007ea6:	6822      	ldr	r2, [r4, #0]
 8007ea8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007eac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007eb0:	f47f af39 	bne.w	8007d26 <_scanf_float+0x6e>
 8007eb4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007eb8:	6022      	str	r2, [r4, #0]
 8007eba:	2501      	movs	r5, #1
 8007ebc:	e7c0      	b.n	8007e40 <_scanf_float+0x188>
 8007ebe:	2d03      	cmp	r5, #3
 8007ec0:	d0e2      	beq.n	8007e88 <_scanf_float+0x1d0>
 8007ec2:	2d05      	cmp	r5, #5
 8007ec4:	e7de      	b.n	8007e84 <_scanf_float+0x1cc>
 8007ec6:	2d02      	cmp	r5, #2
 8007ec8:	f47f af26 	bne.w	8007d18 <_scanf_float+0x60>
 8007ecc:	2503      	movs	r5, #3
 8007ece:	e7b7      	b.n	8007e40 <_scanf_float+0x188>
 8007ed0:	2d06      	cmp	r5, #6
 8007ed2:	f47f af21 	bne.w	8007d18 <_scanf_float+0x60>
 8007ed6:	2507      	movs	r5, #7
 8007ed8:	e7b2      	b.n	8007e40 <_scanf_float+0x188>
 8007eda:	6822      	ldr	r2, [r4, #0]
 8007edc:	0591      	lsls	r1, r2, #22
 8007ede:	f57f af1b 	bpl.w	8007d18 <_scanf_float+0x60>
 8007ee2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007ee6:	6022      	str	r2, [r4, #0]
 8007ee8:	f8cd 9004 	str.w	r9, [sp, #4]
 8007eec:	e7a8      	b.n	8007e40 <_scanf_float+0x188>
 8007eee:	6822      	ldr	r2, [r4, #0]
 8007ef0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007ef4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007ef8:	d006      	beq.n	8007f08 <_scanf_float+0x250>
 8007efa:	0550      	lsls	r0, r2, #21
 8007efc:	f57f af0c 	bpl.w	8007d18 <_scanf_float+0x60>
 8007f00:	f1b9 0f00 	cmp.w	r9, #0
 8007f04:	f43f af0f 	beq.w	8007d26 <_scanf_float+0x6e>
 8007f08:	0591      	lsls	r1, r2, #22
 8007f0a:	bf58      	it	pl
 8007f0c:	9901      	ldrpl	r1, [sp, #4]
 8007f0e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007f12:	bf58      	it	pl
 8007f14:	eba9 0101 	subpl.w	r1, r9, r1
 8007f18:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007f1c:	bf58      	it	pl
 8007f1e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f22:	6022      	str	r2, [r4, #0]
 8007f24:	f04f 0900 	mov.w	r9, #0
 8007f28:	e78a      	b.n	8007e40 <_scanf_float+0x188>
 8007f2a:	f04f 0a03 	mov.w	sl, #3
 8007f2e:	e787      	b.n	8007e40 <_scanf_float+0x188>
 8007f30:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f34:	4639      	mov	r1, r7
 8007f36:	4640      	mov	r0, r8
 8007f38:	4798      	blx	r3
 8007f3a:	2800      	cmp	r0, #0
 8007f3c:	f43f aedf 	beq.w	8007cfe <_scanf_float+0x46>
 8007f40:	e6ea      	b.n	8007d18 <_scanf_float+0x60>
 8007f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f46:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f4a:	463a      	mov	r2, r7
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	4798      	blx	r3
 8007f50:	6923      	ldr	r3, [r4, #16]
 8007f52:	3b01      	subs	r3, #1
 8007f54:	6123      	str	r3, [r4, #16]
 8007f56:	e6ec      	b.n	8007d32 <_scanf_float+0x7a>
 8007f58:	1e6b      	subs	r3, r5, #1
 8007f5a:	2b06      	cmp	r3, #6
 8007f5c:	d825      	bhi.n	8007faa <_scanf_float+0x2f2>
 8007f5e:	2d02      	cmp	r5, #2
 8007f60:	d836      	bhi.n	8007fd0 <_scanf_float+0x318>
 8007f62:	455e      	cmp	r6, fp
 8007f64:	f67f aee8 	bls.w	8007d38 <_scanf_float+0x80>
 8007f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f6c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f70:	463a      	mov	r2, r7
 8007f72:	4640      	mov	r0, r8
 8007f74:	4798      	blx	r3
 8007f76:	6923      	ldr	r3, [r4, #16]
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	6123      	str	r3, [r4, #16]
 8007f7c:	e7f1      	b.n	8007f62 <_scanf_float+0x2aa>
 8007f7e:	9802      	ldr	r0, [sp, #8]
 8007f80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f84:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007f88:	9002      	str	r0, [sp, #8]
 8007f8a:	463a      	mov	r2, r7
 8007f8c:	4640      	mov	r0, r8
 8007f8e:	4798      	blx	r3
 8007f90:	6923      	ldr	r3, [r4, #16]
 8007f92:	3b01      	subs	r3, #1
 8007f94:	6123      	str	r3, [r4, #16]
 8007f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f9a:	fa5f fa8a 	uxtb.w	sl, sl
 8007f9e:	f1ba 0f02 	cmp.w	sl, #2
 8007fa2:	d1ec      	bne.n	8007f7e <_scanf_float+0x2c6>
 8007fa4:	3d03      	subs	r5, #3
 8007fa6:	b2ed      	uxtb	r5, r5
 8007fa8:	1b76      	subs	r6, r6, r5
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	05da      	lsls	r2, r3, #23
 8007fae:	d52f      	bpl.n	8008010 <_scanf_float+0x358>
 8007fb0:	055b      	lsls	r3, r3, #21
 8007fb2:	d510      	bpl.n	8007fd6 <_scanf_float+0x31e>
 8007fb4:	455e      	cmp	r6, fp
 8007fb6:	f67f aebf 	bls.w	8007d38 <_scanf_float+0x80>
 8007fba:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fbe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007fc2:	463a      	mov	r2, r7
 8007fc4:	4640      	mov	r0, r8
 8007fc6:	4798      	blx	r3
 8007fc8:	6923      	ldr	r3, [r4, #16]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	6123      	str	r3, [r4, #16]
 8007fce:	e7f1      	b.n	8007fb4 <_scanf_float+0x2fc>
 8007fd0:	46aa      	mov	sl, r5
 8007fd2:	9602      	str	r6, [sp, #8]
 8007fd4:	e7df      	b.n	8007f96 <_scanf_float+0x2de>
 8007fd6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007fda:	6923      	ldr	r3, [r4, #16]
 8007fdc:	2965      	cmp	r1, #101	; 0x65
 8007fde:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fe2:	f106 35ff 	add.w	r5, r6, #4294967295
 8007fe6:	6123      	str	r3, [r4, #16]
 8007fe8:	d00c      	beq.n	8008004 <_scanf_float+0x34c>
 8007fea:	2945      	cmp	r1, #69	; 0x45
 8007fec:	d00a      	beq.n	8008004 <_scanf_float+0x34c>
 8007fee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ff2:	463a      	mov	r2, r7
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	4798      	blx	r3
 8007ff8:	6923      	ldr	r3, [r4, #16]
 8007ffa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007ffe:	3b01      	subs	r3, #1
 8008000:	1eb5      	subs	r5, r6, #2
 8008002:	6123      	str	r3, [r4, #16]
 8008004:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008008:	463a      	mov	r2, r7
 800800a:	4640      	mov	r0, r8
 800800c:	4798      	blx	r3
 800800e:	462e      	mov	r6, r5
 8008010:	6825      	ldr	r5, [r4, #0]
 8008012:	f015 0510 	ands.w	r5, r5, #16
 8008016:	d158      	bne.n	80080ca <_scanf_float+0x412>
 8008018:	7035      	strb	r5, [r6, #0]
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008020:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008024:	d11c      	bne.n	8008060 <_scanf_float+0x3a8>
 8008026:	9b01      	ldr	r3, [sp, #4]
 8008028:	454b      	cmp	r3, r9
 800802a:	eba3 0209 	sub.w	r2, r3, r9
 800802e:	d124      	bne.n	800807a <_scanf_float+0x3c2>
 8008030:	2200      	movs	r2, #0
 8008032:	4659      	mov	r1, fp
 8008034:	4640      	mov	r0, r8
 8008036:	f7ff f9c7 	bl	80073c8 <_strtod_r>
 800803a:	9b03      	ldr	r3, [sp, #12]
 800803c:	6821      	ldr	r1, [r4, #0]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f011 0f02 	tst.w	r1, #2
 8008044:	ec57 6b10 	vmov	r6, r7, d0
 8008048:	f103 0204 	add.w	r2, r3, #4
 800804c:	d020      	beq.n	8008090 <_scanf_float+0x3d8>
 800804e:	9903      	ldr	r1, [sp, #12]
 8008050:	600a      	str	r2, [r1, #0]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	e9c3 6700 	strd	r6, r7, [r3]
 8008058:	68e3      	ldr	r3, [r4, #12]
 800805a:	3301      	adds	r3, #1
 800805c:	60e3      	str	r3, [r4, #12]
 800805e:	e66c      	b.n	8007d3a <_scanf_float+0x82>
 8008060:	9b04      	ldr	r3, [sp, #16]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d0e4      	beq.n	8008030 <_scanf_float+0x378>
 8008066:	9905      	ldr	r1, [sp, #20]
 8008068:	230a      	movs	r3, #10
 800806a:	462a      	mov	r2, r5
 800806c:	3101      	adds	r1, #1
 800806e:	4640      	mov	r0, r8
 8008070:	f002 fa42 	bl	800a4f8 <_strtol_r>
 8008074:	9b04      	ldr	r3, [sp, #16]
 8008076:	9e05      	ldr	r6, [sp, #20]
 8008078:	1ac2      	subs	r2, r0, r3
 800807a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800807e:	429e      	cmp	r6, r3
 8008080:	bf28      	it	cs
 8008082:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008086:	4912      	ldr	r1, [pc, #72]	; (80080d0 <_scanf_float+0x418>)
 8008088:	4630      	mov	r0, r6
 800808a:	f000 f8f9 	bl	8008280 <siprintf>
 800808e:	e7cf      	b.n	8008030 <_scanf_float+0x378>
 8008090:	f011 0f04 	tst.w	r1, #4
 8008094:	9903      	ldr	r1, [sp, #12]
 8008096:	600a      	str	r2, [r1, #0]
 8008098:	d1db      	bne.n	8008052 <_scanf_float+0x39a>
 800809a:	f8d3 8000 	ldr.w	r8, [r3]
 800809e:	ee10 2a10 	vmov	r2, s0
 80080a2:	ee10 0a10 	vmov	r0, s0
 80080a6:	463b      	mov	r3, r7
 80080a8:	4639      	mov	r1, r7
 80080aa:	f7f8 fd5f 	bl	8000b6c <__aeabi_dcmpun>
 80080ae:	b128      	cbz	r0, 80080bc <_scanf_float+0x404>
 80080b0:	4808      	ldr	r0, [pc, #32]	; (80080d4 <_scanf_float+0x41c>)
 80080b2:	f000 fa05 	bl	80084c0 <nanf>
 80080b6:	ed88 0a00 	vstr	s0, [r8]
 80080ba:	e7cd      	b.n	8008058 <_scanf_float+0x3a0>
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	f7f8 fdb2 	bl	8000c28 <__aeabi_d2f>
 80080c4:	f8c8 0000 	str.w	r0, [r8]
 80080c8:	e7c6      	b.n	8008058 <_scanf_float+0x3a0>
 80080ca:	2500      	movs	r5, #0
 80080cc:	e635      	b.n	8007d3a <_scanf_float+0x82>
 80080ce:	bf00      	nop
 80080d0:	0800c3ec 	.word	0x0800c3ec
 80080d4:	0800c789 	.word	0x0800c789

080080d8 <std>:
 80080d8:	2300      	movs	r3, #0
 80080da:	b510      	push	{r4, lr}
 80080dc:	4604      	mov	r4, r0
 80080de:	e9c0 3300 	strd	r3, r3, [r0]
 80080e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080e6:	6083      	str	r3, [r0, #8]
 80080e8:	8181      	strh	r1, [r0, #12]
 80080ea:	6643      	str	r3, [r0, #100]	; 0x64
 80080ec:	81c2      	strh	r2, [r0, #14]
 80080ee:	6183      	str	r3, [r0, #24]
 80080f0:	4619      	mov	r1, r3
 80080f2:	2208      	movs	r2, #8
 80080f4:	305c      	adds	r0, #92	; 0x5c
 80080f6:	f000 f926 	bl	8008346 <memset>
 80080fa:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <std+0x58>)
 80080fc:	6263      	str	r3, [r4, #36]	; 0x24
 80080fe:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <std+0x5c>)
 8008100:	62a3      	str	r3, [r4, #40]	; 0x28
 8008102:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <std+0x60>)
 8008104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008106:	4b0d      	ldr	r3, [pc, #52]	; (800813c <std+0x64>)
 8008108:	6323      	str	r3, [r4, #48]	; 0x30
 800810a:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <std+0x68>)
 800810c:	6224      	str	r4, [r4, #32]
 800810e:	429c      	cmp	r4, r3
 8008110:	d006      	beq.n	8008120 <std+0x48>
 8008112:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008116:	4294      	cmp	r4, r2
 8008118:	d002      	beq.n	8008120 <std+0x48>
 800811a:	33d0      	adds	r3, #208	; 0xd0
 800811c:	429c      	cmp	r4, r3
 800811e:	d105      	bne.n	800812c <std+0x54>
 8008120:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008128:	f000 b9ae 	b.w	8008488 <__retarget_lock_init_recursive>
 800812c:	bd10      	pop	{r4, pc}
 800812e:	bf00      	nop
 8008130:	080082c1 	.word	0x080082c1
 8008134:	080082e3 	.word	0x080082e3
 8008138:	0800831b 	.word	0x0800831b
 800813c:	0800833f 	.word	0x0800833f
 8008140:	200006b0 	.word	0x200006b0

08008144 <stdio_exit_handler>:
 8008144:	4a02      	ldr	r2, [pc, #8]	; (8008150 <stdio_exit_handler+0xc>)
 8008146:	4903      	ldr	r1, [pc, #12]	; (8008154 <stdio_exit_handler+0x10>)
 8008148:	4803      	ldr	r0, [pc, #12]	; (8008158 <stdio_exit_handler+0x14>)
 800814a:	f000 b869 	b.w	8008220 <_fwalk_sglue>
 800814e:	bf00      	nop
 8008150:	20000044 	.word	0x20000044
 8008154:	0800ab5d 	.word	0x0800ab5d
 8008158:	200001bc 	.word	0x200001bc

0800815c <cleanup_stdio>:
 800815c:	6841      	ldr	r1, [r0, #4]
 800815e:	4b0c      	ldr	r3, [pc, #48]	; (8008190 <cleanup_stdio+0x34>)
 8008160:	4299      	cmp	r1, r3
 8008162:	b510      	push	{r4, lr}
 8008164:	4604      	mov	r4, r0
 8008166:	d001      	beq.n	800816c <cleanup_stdio+0x10>
 8008168:	f002 fcf8 	bl	800ab5c <_fflush_r>
 800816c:	68a1      	ldr	r1, [r4, #8]
 800816e:	4b09      	ldr	r3, [pc, #36]	; (8008194 <cleanup_stdio+0x38>)
 8008170:	4299      	cmp	r1, r3
 8008172:	d002      	beq.n	800817a <cleanup_stdio+0x1e>
 8008174:	4620      	mov	r0, r4
 8008176:	f002 fcf1 	bl	800ab5c <_fflush_r>
 800817a:	68e1      	ldr	r1, [r4, #12]
 800817c:	4b06      	ldr	r3, [pc, #24]	; (8008198 <cleanup_stdio+0x3c>)
 800817e:	4299      	cmp	r1, r3
 8008180:	d004      	beq.n	800818c <cleanup_stdio+0x30>
 8008182:	4620      	mov	r0, r4
 8008184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008188:	f002 bce8 	b.w	800ab5c <_fflush_r>
 800818c:	bd10      	pop	{r4, pc}
 800818e:	bf00      	nop
 8008190:	200006b0 	.word	0x200006b0
 8008194:	20000718 	.word	0x20000718
 8008198:	20000780 	.word	0x20000780

0800819c <global_stdio_init.part.0>:
 800819c:	b510      	push	{r4, lr}
 800819e:	4b0b      	ldr	r3, [pc, #44]	; (80081cc <global_stdio_init.part.0+0x30>)
 80081a0:	4c0b      	ldr	r4, [pc, #44]	; (80081d0 <global_stdio_init.part.0+0x34>)
 80081a2:	4a0c      	ldr	r2, [pc, #48]	; (80081d4 <global_stdio_init.part.0+0x38>)
 80081a4:	601a      	str	r2, [r3, #0]
 80081a6:	4620      	mov	r0, r4
 80081a8:	2200      	movs	r2, #0
 80081aa:	2104      	movs	r1, #4
 80081ac:	f7ff ff94 	bl	80080d8 <std>
 80081b0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80081b4:	2201      	movs	r2, #1
 80081b6:	2109      	movs	r1, #9
 80081b8:	f7ff ff8e 	bl	80080d8 <std>
 80081bc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80081c0:	2202      	movs	r2, #2
 80081c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c6:	2112      	movs	r1, #18
 80081c8:	f7ff bf86 	b.w	80080d8 <std>
 80081cc:	200007e8 	.word	0x200007e8
 80081d0:	200006b0 	.word	0x200006b0
 80081d4:	08008145 	.word	0x08008145

080081d8 <__sfp_lock_acquire>:
 80081d8:	4801      	ldr	r0, [pc, #4]	; (80081e0 <__sfp_lock_acquire+0x8>)
 80081da:	f000 b956 	b.w	800848a <__retarget_lock_acquire_recursive>
 80081de:	bf00      	nop
 80081e0:	200007f1 	.word	0x200007f1

080081e4 <__sfp_lock_release>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__sfp_lock_release+0x8>)
 80081e6:	f000 b951 	b.w	800848c <__retarget_lock_release_recursive>
 80081ea:	bf00      	nop
 80081ec:	200007f1 	.word	0x200007f1

080081f0 <__sinit>:
 80081f0:	b510      	push	{r4, lr}
 80081f2:	4604      	mov	r4, r0
 80081f4:	f7ff fff0 	bl	80081d8 <__sfp_lock_acquire>
 80081f8:	6a23      	ldr	r3, [r4, #32]
 80081fa:	b11b      	cbz	r3, 8008204 <__sinit+0x14>
 80081fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008200:	f7ff bff0 	b.w	80081e4 <__sfp_lock_release>
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <__sinit+0x28>)
 8008206:	6223      	str	r3, [r4, #32]
 8008208:	4b04      	ldr	r3, [pc, #16]	; (800821c <__sinit+0x2c>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d1f5      	bne.n	80081fc <__sinit+0xc>
 8008210:	f7ff ffc4 	bl	800819c <global_stdio_init.part.0>
 8008214:	e7f2      	b.n	80081fc <__sinit+0xc>
 8008216:	bf00      	nop
 8008218:	0800815d 	.word	0x0800815d
 800821c:	200007e8 	.word	0x200007e8

08008220 <_fwalk_sglue>:
 8008220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008224:	4607      	mov	r7, r0
 8008226:	4688      	mov	r8, r1
 8008228:	4614      	mov	r4, r2
 800822a:	2600      	movs	r6, #0
 800822c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008230:	f1b9 0901 	subs.w	r9, r9, #1
 8008234:	d505      	bpl.n	8008242 <_fwalk_sglue+0x22>
 8008236:	6824      	ldr	r4, [r4, #0]
 8008238:	2c00      	cmp	r4, #0
 800823a:	d1f7      	bne.n	800822c <_fwalk_sglue+0xc>
 800823c:	4630      	mov	r0, r6
 800823e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	2b01      	cmp	r3, #1
 8008246:	d907      	bls.n	8008258 <_fwalk_sglue+0x38>
 8008248:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800824c:	3301      	adds	r3, #1
 800824e:	d003      	beq.n	8008258 <_fwalk_sglue+0x38>
 8008250:	4629      	mov	r1, r5
 8008252:	4638      	mov	r0, r7
 8008254:	47c0      	blx	r8
 8008256:	4306      	orrs	r6, r0
 8008258:	3568      	adds	r5, #104	; 0x68
 800825a:	e7e9      	b.n	8008230 <_fwalk_sglue+0x10>

0800825c <iprintf>:
 800825c:	b40f      	push	{r0, r1, r2, r3}
 800825e:	b507      	push	{r0, r1, r2, lr}
 8008260:	4906      	ldr	r1, [pc, #24]	; (800827c <iprintf+0x20>)
 8008262:	ab04      	add	r3, sp, #16
 8008264:	6808      	ldr	r0, [r1, #0]
 8008266:	f853 2b04 	ldr.w	r2, [r3], #4
 800826a:	6881      	ldr	r1, [r0, #8]
 800826c:	9301      	str	r3, [sp, #4]
 800826e:	f002 fad5 	bl	800a81c <_vfiprintf_r>
 8008272:	b003      	add	sp, #12
 8008274:	f85d eb04 	ldr.w	lr, [sp], #4
 8008278:	b004      	add	sp, #16
 800827a:	4770      	bx	lr
 800827c:	20000208 	.word	0x20000208

08008280 <siprintf>:
 8008280:	b40e      	push	{r1, r2, r3}
 8008282:	b500      	push	{lr}
 8008284:	b09c      	sub	sp, #112	; 0x70
 8008286:	ab1d      	add	r3, sp, #116	; 0x74
 8008288:	9002      	str	r0, [sp, #8]
 800828a:	9006      	str	r0, [sp, #24]
 800828c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008290:	4809      	ldr	r0, [pc, #36]	; (80082b8 <siprintf+0x38>)
 8008292:	9107      	str	r1, [sp, #28]
 8008294:	9104      	str	r1, [sp, #16]
 8008296:	4909      	ldr	r1, [pc, #36]	; (80082bc <siprintf+0x3c>)
 8008298:	f853 2b04 	ldr.w	r2, [r3], #4
 800829c:	9105      	str	r1, [sp, #20]
 800829e:	6800      	ldr	r0, [r0, #0]
 80082a0:	9301      	str	r3, [sp, #4]
 80082a2:	a902      	add	r1, sp, #8
 80082a4:	f002 f992 	bl	800a5cc <_svfiprintf_r>
 80082a8:	9b02      	ldr	r3, [sp, #8]
 80082aa:	2200      	movs	r2, #0
 80082ac:	701a      	strb	r2, [r3, #0]
 80082ae:	b01c      	add	sp, #112	; 0x70
 80082b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80082b4:	b003      	add	sp, #12
 80082b6:	4770      	bx	lr
 80082b8:	20000208 	.word	0x20000208
 80082bc:	ffff0208 	.word	0xffff0208

080082c0 <__sread>:
 80082c0:	b510      	push	{r4, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	f000 f890 	bl	80083ec <_read_r>
 80082cc:	2800      	cmp	r0, #0
 80082ce:	bfab      	itete	ge
 80082d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082d2:	89a3      	ldrhlt	r3, [r4, #12]
 80082d4:	181b      	addge	r3, r3, r0
 80082d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082da:	bfac      	ite	ge
 80082dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80082de:	81a3      	strhlt	r3, [r4, #12]
 80082e0:	bd10      	pop	{r4, pc}

080082e2 <__swrite>:
 80082e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082e6:	461f      	mov	r7, r3
 80082e8:	898b      	ldrh	r3, [r1, #12]
 80082ea:	05db      	lsls	r3, r3, #23
 80082ec:	4605      	mov	r5, r0
 80082ee:	460c      	mov	r4, r1
 80082f0:	4616      	mov	r6, r2
 80082f2:	d505      	bpl.n	8008300 <__swrite+0x1e>
 80082f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f8:	2302      	movs	r3, #2
 80082fa:	2200      	movs	r2, #0
 80082fc:	f000 f864 	bl	80083c8 <_lseek_r>
 8008300:	89a3      	ldrh	r3, [r4, #12]
 8008302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800830a:	81a3      	strh	r3, [r4, #12]
 800830c:	4632      	mov	r2, r6
 800830e:	463b      	mov	r3, r7
 8008310:	4628      	mov	r0, r5
 8008312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008316:	f000 b87b 	b.w	8008410 <_write_r>

0800831a <__sseek>:
 800831a:	b510      	push	{r4, lr}
 800831c:	460c      	mov	r4, r1
 800831e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008322:	f000 f851 	bl	80083c8 <_lseek_r>
 8008326:	1c43      	adds	r3, r0, #1
 8008328:	89a3      	ldrh	r3, [r4, #12]
 800832a:	bf15      	itete	ne
 800832c:	6560      	strne	r0, [r4, #84]	; 0x54
 800832e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008336:	81a3      	strheq	r3, [r4, #12]
 8008338:	bf18      	it	ne
 800833a:	81a3      	strhne	r3, [r4, #12]
 800833c:	bd10      	pop	{r4, pc}

0800833e <__sclose>:
 800833e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008342:	f000 b831 	b.w	80083a8 <_close_r>

08008346 <memset>:
 8008346:	4402      	add	r2, r0
 8008348:	4603      	mov	r3, r0
 800834a:	4293      	cmp	r3, r2
 800834c:	d100      	bne.n	8008350 <memset+0xa>
 800834e:	4770      	bx	lr
 8008350:	f803 1b01 	strb.w	r1, [r3], #1
 8008354:	e7f9      	b.n	800834a <memset+0x4>

08008356 <strncmp>:
 8008356:	b510      	push	{r4, lr}
 8008358:	b16a      	cbz	r2, 8008376 <strncmp+0x20>
 800835a:	3901      	subs	r1, #1
 800835c:	1884      	adds	r4, r0, r2
 800835e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008362:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008366:	429a      	cmp	r2, r3
 8008368:	d103      	bne.n	8008372 <strncmp+0x1c>
 800836a:	42a0      	cmp	r0, r4
 800836c:	d001      	beq.n	8008372 <strncmp+0x1c>
 800836e:	2a00      	cmp	r2, #0
 8008370:	d1f5      	bne.n	800835e <strncmp+0x8>
 8008372:	1ad0      	subs	r0, r2, r3
 8008374:	bd10      	pop	{r4, pc}
 8008376:	4610      	mov	r0, r2
 8008378:	e7fc      	b.n	8008374 <strncmp+0x1e>

0800837a <strncpy>:
 800837a:	b510      	push	{r4, lr}
 800837c:	3901      	subs	r1, #1
 800837e:	4603      	mov	r3, r0
 8008380:	b132      	cbz	r2, 8008390 <strncpy+0x16>
 8008382:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008386:	f803 4b01 	strb.w	r4, [r3], #1
 800838a:	3a01      	subs	r2, #1
 800838c:	2c00      	cmp	r4, #0
 800838e:	d1f7      	bne.n	8008380 <strncpy+0x6>
 8008390:	441a      	add	r2, r3
 8008392:	2100      	movs	r1, #0
 8008394:	4293      	cmp	r3, r2
 8008396:	d100      	bne.n	800839a <strncpy+0x20>
 8008398:	bd10      	pop	{r4, pc}
 800839a:	f803 1b01 	strb.w	r1, [r3], #1
 800839e:	e7f9      	b.n	8008394 <strncpy+0x1a>

080083a0 <_localeconv_r>:
 80083a0:	4800      	ldr	r0, [pc, #0]	; (80083a4 <_localeconv_r+0x4>)
 80083a2:	4770      	bx	lr
 80083a4:	20000140 	.word	0x20000140

080083a8 <_close_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	; (80083c4 <_close_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7fa fe79 	bl	80030aa <_close>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_close_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_close_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	200007ec 	.word	0x200007ec

080083c8 <_lseek_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d07      	ldr	r5, [pc, #28]	; (80083e8 <_lseek_r+0x20>)
 80083cc:	4604      	mov	r4, r0
 80083ce:	4608      	mov	r0, r1
 80083d0:	4611      	mov	r1, r2
 80083d2:	2200      	movs	r2, #0
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7fa fe8e 	bl	80030f8 <_lseek>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_lseek_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_lseek_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	200007ec 	.word	0x200007ec

080083ec <_read_r>:
 80083ec:	b538      	push	{r3, r4, r5, lr}
 80083ee:	4d07      	ldr	r5, [pc, #28]	; (800840c <_read_r+0x20>)
 80083f0:	4604      	mov	r4, r0
 80083f2:	4608      	mov	r0, r1
 80083f4:	4611      	mov	r1, r2
 80083f6:	2200      	movs	r2, #0
 80083f8:	602a      	str	r2, [r5, #0]
 80083fa:	461a      	mov	r2, r3
 80083fc:	f7fa fe1c 	bl	8003038 <_read>
 8008400:	1c43      	adds	r3, r0, #1
 8008402:	d102      	bne.n	800840a <_read_r+0x1e>
 8008404:	682b      	ldr	r3, [r5, #0]
 8008406:	b103      	cbz	r3, 800840a <_read_r+0x1e>
 8008408:	6023      	str	r3, [r4, #0]
 800840a:	bd38      	pop	{r3, r4, r5, pc}
 800840c:	200007ec 	.word	0x200007ec

08008410 <_write_r>:
 8008410:	b538      	push	{r3, r4, r5, lr}
 8008412:	4d07      	ldr	r5, [pc, #28]	; (8008430 <_write_r+0x20>)
 8008414:	4604      	mov	r4, r0
 8008416:	4608      	mov	r0, r1
 8008418:	4611      	mov	r1, r2
 800841a:	2200      	movs	r2, #0
 800841c:	602a      	str	r2, [r5, #0]
 800841e:	461a      	mov	r2, r3
 8008420:	f7fa fe27 	bl	8003072 <_write>
 8008424:	1c43      	adds	r3, r0, #1
 8008426:	d102      	bne.n	800842e <_write_r+0x1e>
 8008428:	682b      	ldr	r3, [r5, #0]
 800842a:	b103      	cbz	r3, 800842e <_write_r+0x1e>
 800842c:	6023      	str	r3, [r4, #0]
 800842e:	bd38      	pop	{r3, r4, r5, pc}
 8008430:	200007ec 	.word	0x200007ec

08008434 <__errno>:
 8008434:	4b01      	ldr	r3, [pc, #4]	; (800843c <__errno+0x8>)
 8008436:	6818      	ldr	r0, [r3, #0]
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	20000208 	.word	0x20000208

08008440 <__libc_init_array>:
 8008440:	b570      	push	{r4, r5, r6, lr}
 8008442:	4d0d      	ldr	r5, [pc, #52]	; (8008478 <__libc_init_array+0x38>)
 8008444:	4c0d      	ldr	r4, [pc, #52]	; (800847c <__libc_init_array+0x3c>)
 8008446:	1b64      	subs	r4, r4, r5
 8008448:	10a4      	asrs	r4, r4, #2
 800844a:	2600      	movs	r6, #0
 800844c:	42a6      	cmp	r6, r4
 800844e:	d109      	bne.n	8008464 <__libc_init_array+0x24>
 8008450:	4d0b      	ldr	r5, [pc, #44]	; (8008480 <__libc_init_array+0x40>)
 8008452:	4c0c      	ldr	r4, [pc, #48]	; (8008484 <__libc_init_array+0x44>)
 8008454:	f003 ff54 	bl	800c300 <_init>
 8008458:	1b64      	subs	r4, r4, r5
 800845a:	10a4      	asrs	r4, r4, #2
 800845c:	2600      	movs	r6, #0
 800845e:	42a6      	cmp	r6, r4
 8008460:	d105      	bne.n	800846e <__libc_init_array+0x2e>
 8008462:	bd70      	pop	{r4, r5, r6, pc}
 8008464:	f855 3b04 	ldr.w	r3, [r5], #4
 8008468:	4798      	blx	r3
 800846a:	3601      	adds	r6, #1
 800846c:	e7ee      	b.n	800844c <__libc_init_array+0xc>
 800846e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008472:	4798      	blx	r3
 8008474:	3601      	adds	r6, #1
 8008476:	e7f2      	b.n	800845e <__libc_init_array+0x1e>
 8008478:	0800c970 	.word	0x0800c970
 800847c:	0800c970 	.word	0x0800c970
 8008480:	0800c970 	.word	0x0800c970
 8008484:	0800c974 	.word	0x0800c974

08008488 <__retarget_lock_init_recursive>:
 8008488:	4770      	bx	lr

0800848a <__retarget_lock_acquire_recursive>:
 800848a:	4770      	bx	lr

0800848c <__retarget_lock_release_recursive>:
 800848c:	4770      	bx	lr

0800848e <memcpy>:
 800848e:	440a      	add	r2, r1
 8008490:	4291      	cmp	r1, r2
 8008492:	f100 33ff 	add.w	r3, r0, #4294967295
 8008496:	d100      	bne.n	800849a <memcpy+0xc>
 8008498:	4770      	bx	lr
 800849a:	b510      	push	{r4, lr}
 800849c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084a4:	4291      	cmp	r1, r2
 80084a6:	d1f9      	bne.n	800849c <memcpy+0xe>
 80084a8:	bd10      	pop	{r4, pc}
 80084aa:	0000      	movs	r0, r0
 80084ac:	0000      	movs	r0, r0
	...

080084b0 <nan>:
 80084b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80084b8 <nan+0x8>
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	00000000 	.word	0x00000000
 80084bc:	7ff80000 	.word	0x7ff80000

080084c0 <nanf>:
 80084c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80084c8 <nanf+0x8>
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	7fc00000 	.word	0x7fc00000

080084cc <quorem>:
 80084cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084d0:	6903      	ldr	r3, [r0, #16]
 80084d2:	690c      	ldr	r4, [r1, #16]
 80084d4:	42a3      	cmp	r3, r4
 80084d6:	4607      	mov	r7, r0
 80084d8:	db7e      	blt.n	80085d8 <quorem+0x10c>
 80084da:	3c01      	subs	r4, #1
 80084dc:	f101 0814 	add.w	r8, r1, #20
 80084e0:	f100 0514 	add.w	r5, r0, #20
 80084e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084e8:	9301      	str	r3, [sp, #4]
 80084ea:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084ee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084f2:	3301      	adds	r3, #1
 80084f4:	429a      	cmp	r2, r3
 80084f6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8008502:	d331      	bcc.n	8008568 <quorem+0x9c>
 8008504:	f04f 0e00 	mov.w	lr, #0
 8008508:	4640      	mov	r0, r8
 800850a:	46ac      	mov	ip, r5
 800850c:	46f2      	mov	sl, lr
 800850e:	f850 2b04 	ldr.w	r2, [r0], #4
 8008512:	b293      	uxth	r3, r2
 8008514:	fb06 e303 	mla	r3, r6, r3, lr
 8008518:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800851c:	0c1a      	lsrs	r2, r3, #16
 800851e:	b29b      	uxth	r3, r3
 8008520:	ebaa 0303 	sub.w	r3, sl, r3
 8008524:	f8dc a000 	ldr.w	sl, [ip]
 8008528:	fa13 f38a 	uxtah	r3, r3, sl
 800852c:	fb06 220e 	mla	r2, r6, lr, r2
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	9b00      	ldr	r3, [sp, #0]
 8008534:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008538:	b292      	uxth	r2, r2
 800853a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800853e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008542:	f8bd 3000 	ldrh.w	r3, [sp]
 8008546:	4581      	cmp	r9, r0
 8008548:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800854c:	f84c 3b04 	str.w	r3, [ip], #4
 8008550:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008554:	d2db      	bcs.n	800850e <quorem+0x42>
 8008556:	f855 300b 	ldr.w	r3, [r5, fp]
 800855a:	b92b      	cbnz	r3, 8008568 <quorem+0x9c>
 800855c:	9b01      	ldr	r3, [sp, #4]
 800855e:	3b04      	subs	r3, #4
 8008560:	429d      	cmp	r5, r3
 8008562:	461a      	mov	r2, r3
 8008564:	d32c      	bcc.n	80085c0 <quorem+0xf4>
 8008566:	613c      	str	r4, [r7, #16]
 8008568:	4638      	mov	r0, r7
 800856a:	f001 fd5b 	bl	800a024 <__mcmp>
 800856e:	2800      	cmp	r0, #0
 8008570:	db22      	blt.n	80085b8 <quorem+0xec>
 8008572:	3601      	adds	r6, #1
 8008574:	4629      	mov	r1, r5
 8008576:	2000      	movs	r0, #0
 8008578:	f858 2b04 	ldr.w	r2, [r8], #4
 800857c:	f8d1 c000 	ldr.w	ip, [r1]
 8008580:	b293      	uxth	r3, r2
 8008582:	1ac3      	subs	r3, r0, r3
 8008584:	0c12      	lsrs	r2, r2, #16
 8008586:	fa13 f38c 	uxtah	r3, r3, ip
 800858a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800858e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008592:	b29b      	uxth	r3, r3
 8008594:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008598:	45c1      	cmp	r9, r8
 800859a:	f841 3b04 	str.w	r3, [r1], #4
 800859e:	ea4f 4022 	mov.w	r0, r2, asr #16
 80085a2:	d2e9      	bcs.n	8008578 <quorem+0xac>
 80085a4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80085a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80085ac:	b922      	cbnz	r2, 80085b8 <quorem+0xec>
 80085ae:	3b04      	subs	r3, #4
 80085b0:	429d      	cmp	r5, r3
 80085b2:	461a      	mov	r2, r3
 80085b4:	d30a      	bcc.n	80085cc <quorem+0x100>
 80085b6:	613c      	str	r4, [r7, #16]
 80085b8:	4630      	mov	r0, r6
 80085ba:	b003      	add	sp, #12
 80085bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c0:	6812      	ldr	r2, [r2, #0]
 80085c2:	3b04      	subs	r3, #4
 80085c4:	2a00      	cmp	r2, #0
 80085c6:	d1ce      	bne.n	8008566 <quorem+0x9a>
 80085c8:	3c01      	subs	r4, #1
 80085ca:	e7c9      	b.n	8008560 <quorem+0x94>
 80085cc:	6812      	ldr	r2, [r2, #0]
 80085ce:	3b04      	subs	r3, #4
 80085d0:	2a00      	cmp	r2, #0
 80085d2:	d1f0      	bne.n	80085b6 <quorem+0xea>
 80085d4:	3c01      	subs	r4, #1
 80085d6:	e7eb      	b.n	80085b0 <quorem+0xe4>
 80085d8:	2000      	movs	r0, #0
 80085da:	e7ee      	b.n	80085ba <quorem+0xee>
 80085dc:	0000      	movs	r0, r0
	...

080085e0 <_dtoa_r>:
 80085e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e4:	ed2d 8b04 	vpush	{d8-d9}
 80085e8:	69c5      	ldr	r5, [r0, #28]
 80085ea:	b093      	sub	sp, #76	; 0x4c
 80085ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085f0:	ec57 6b10 	vmov	r6, r7, d0
 80085f4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085f8:	9107      	str	r1, [sp, #28]
 80085fa:	4604      	mov	r4, r0
 80085fc:	920a      	str	r2, [sp, #40]	; 0x28
 80085fe:	930d      	str	r3, [sp, #52]	; 0x34
 8008600:	b975      	cbnz	r5, 8008620 <_dtoa_r+0x40>
 8008602:	2010      	movs	r0, #16
 8008604:	f001 f982 	bl	800990c <malloc>
 8008608:	4602      	mov	r2, r0
 800860a:	61e0      	str	r0, [r4, #28]
 800860c:	b920      	cbnz	r0, 8008618 <_dtoa_r+0x38>
 800860e:	4bae      	ldr	r3, [pc, #696]	; (80088c8 <_dtoa_r+0x2e8>)
 8008610:	21ef      	movs	r1, #239	; 0xef
 8008612:	48ae      	ldr	r0, [pc, #696]	; (80088cc <_dtoa_r+0x2ec>)
 8008614:	f002 fb8a 	bl	800ad2c <__assert_func>
 8008618:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800861c:	6005      	str	r5, [r0, #0]
 800861e:	60c5      	str	r5, [r0, #12]
 8008620:	69e3      	ldr	r3, [r4, #28]
 8008622:	6819      	ldr	r1, [r3, #0]
 8008624:	b151      	cbz	r1, 800863c <_dtoa_r+0x5c>
 8008626:	685a      	ldr	r2, [r3, #4]
 8008628:	604a      	str	r2, [r1, #4]
 800862a:	2301      	movs	r3, #1
 800862c:	4093      	lsls	r3, r2
 800862e:	608b      	str	r3, [r1, #8]
 8008630:	4620      	mov	r0, r4
 8008632:	f001 fa71 	bl	8009b18 <_Bfree>
 8008636:	69e3      	ldr	r3, [r4, #28]
 8008638:	2200      	movs	r2, #0
 800863a:	601a      	str	r2, [r3, #0]
 800863c:	1e3b      	subs	r3, r7, #0
 800863e:	bfbb      	ittet	lt
 8008640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008644:	9303      	strlt	r3, [sp, #12]
 8008646:	2300      	movge	r3, #0
 8008648:	2201      	movlt	r2, #1
 800864a:	bfac      	ite	ge
 800864c:	f8c8 3000 	strge.w	r3, [r8]
 8008650:	f8c8 2000 	strlt.w	r2, [r8]
 8008654:	4b9e      	ldr	r3, [pc, #632]	; (80088d0 <_dtoa_r+0x2f0>)
 8008656:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800865a:	ea33 0308 	bics.w	r3, r3, r8
 800865e:	d11b      	bne.n	8008698 <_dtoa_r+0xb8>
 8008660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008662:	f242 730f 	movw	r3, #9999	; 0x270f
 8008666:	6013      	str	r3, [r2, #0]
 8008668:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800866c:	4333      	orrs	r3, r6
 800866e:	f000 8593 	beq.w	8009198 <_dtoa_r+0xbb8>
 8008672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008674:	b963      	cbnz	r3, 8008690 <_dtoa_r+0xb0>
 8008676:	4b97      	ldr	r3, [pc, #604]	; (80088d4 <_dtoa_r+0x2f4>)
 8008678:	e027      	b.n	80086ca <_dtoa_r+0xea>
 800867a:	4b97      	ldr	r3, [pc, #604]	; (80088d8 <_dtoa_r+0x2f8>)
 800867c:	9300      	str	r3, [sp, #0]
 800867e:	3308      	adds	r3, #8
 8008680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	9800      	ldr	r0, [sp, #0]
 8008686:	b013      	add	sp, #76	; 0x4c
 8008688:	ecbd 8b04 	vpop	{d8-d9}
 800868c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008690:	4b90      	ldr	r3, [pc, #576]	; (80088d4 <_dtoa_r+0x2f4>)
 8008692:	9300      	str	r3, [sp, #0]
 8008694:	3303      	adds	r3, #3
 8008696:	e7f3      	b.n	8008680 <_dtoa_r+0xa0>
 8008698:	ed9d 7b02 	vldr	d7, [sp, #8]
 800869c:	2200      	movs	r2, #0
 800869e:	ec51 0b17 	vmov	r0, r1, d7
 80086a2:	eeb0 8a47 	vmov.f32	s16, s14
 80086a6:	eef0 8a67 	vmov.f32	s17, s15
 80086aa:	2300      	movs	r3, #0
 80086ac:	f7f8 fa2c 	bl	8000b08 <__aeabi_dcmpeq>
 80086b0:	4681      	mov	r9, r0
 80086b2:	b160      	cbz	r0, 80086ce <_dtoa_r+0xee>
 80086b4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80086b6:	2301      	movs	r3, #1
 80086b8:	6013      	str	r3, [r2, #0]
 80086ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086bc:	2b00      	cmp	r3, #0
 80086be:	f000 8568 	beq.w	8009192 <_dtoa_r+0xbb2>
 80086c2:	4b86      	ldr	r3, [pc, #536]	; (80088dc <_dtoa_r+0x2fc>)
 80086c4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086c6:	6013      	str	r3, [r2, #0]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	9300      	str	r3, [sp, #0]
 80086cc:	e7da      	b.n	8008684 <_dtoa_r+0xa4>
 80086ce:	aa10      	add	r2, sp, #64	; 0x40
 80086d0:	a911      	add	r1, sp, #68	; 0x44
 80086d2:	4620      	mov	r0, r4
 80086d4:	eeb0 0a48 	vmov.f32	s0, s16
 80086d8:	eef0 0a68 	vmov.f32	s1, s17
 80086dc:	f001 fdb8 	bl	800a250 <__d2b>
 80086e0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086e4:	4682      	mov	sl, r0
 80086e6:	2d00      	cmp	r5, #0
 80086e8:	d07f      	beq.n	80087ea <_dtoa_r+0x20a>
 80086ea:	ee18 3a90 	vmov	r3, s17
 80086ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086f2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80086f6:	ec51 0b18 	vmov	r0, r1, d8
 80086fa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008702:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008706:	4619      	mov	r1, r3
 8008708:	2200      	movs	r2, #0
 800870a:	4b75      	ldr	r3, [pc, #468]	; (80088e0 <_dtoa_r+0x300>)
 800870c:	f7f7 fddc 	bl	80002c8 <__aeabi_dsub>
 8008710:	a367      	add	r3, pc, #412	; (adr r3, 80088b0 <_dtoa_r+0x2d0>)
 8008712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008716:	f7f7 ff8f 	bl	8000638 <__aeabi_dmul>
 800871a:	a367      	add	r3, pc, #412	; (adr r3, 80088b8 <_dtoa_r+0x2d8>)
 800871c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008720:	f7f7 fdd4 	bl	80002cc <__adddf3>
 8008724:	4606      	mov	r6, r0
 8008726:	4628      	mov	r0, r5
 8008728:	460f      	mov	r7, r1
 800872a:	f7f7 ff1b 	bl	8000564 <__aeabi_i2d>
 800872e:	a364      	add	r3, pc, #400	; (adr r3, 80088c0 <_dtoa_r+0x2e0>)
 8008730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008734:	f7f7 ff80 	bl	8000638 <__aeabi_dmul>
 8008738:	4602      	mov	r2, r0
 800873a:	460b      	mov	r3, r1
 800873c:	4630      	mov	r0, r6
 800873e:	4639      	mov	r1, r7
 8008740:	f7f7 fdc4 	bl	80002cc <__adddf3>
 8008744:	4606      	mov	r6, r0
 8008746:	460f      	mov	r7, r1
 8008748:	f7f8 fa26 	bl	8000b98 <__aeabi_d2iz>
 800874c:	2200      	movs	r2, #0
 800874e:	4683      	mov	fp, r0
 8008750:	2300      	movs	r3, #0
 8008752:	4630      	mov	r0, r6
 8008754:	4639      	mov	r1, r7
 8008756:	f7f8 f9e1 	bl	8000b1c <__aeabi_dcmplt>
 800875a:	b148      	cbz	r0, 8008770 <_dtoa_r+0x190>
 800875c:	4658      	mov	r0, fp
 800875e:	f7f7 ff01 	bl	8000564 <__aeabi_i2d>
 8008762:	4632      	mov	r2, r6
 8008764:	463b      	mov	r3, r7
 8008766:	f7f8 f9cf 	bl	8000b08 <__aeabi_dcmpeq>
 800876a:	b908      	cbnz	r0, 8008770 <_dtoa_r+0x190>
 800876c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008770:	f1bb 0f16 	cmp.w	fp, #22
 8008774:	d857      	bhi.n	8008826 <_dtoa_r+0x246>
 8008776:	4b5b      	ldr	r3, [pc, #364]	; (80088e4 <_dtoa_r+0x304>)
 8008778:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800877c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008780:	ec51 0b18 	vmov	r0, r1, d8
 8008784:	f7f8 f9ca 	bl	8000b1c <__aeabi_dcmplt>
 8008788:	2800      	cmp	r0, #0
 800878a:	d04e      	beq.n	800882a <_dtoa_r+0x24a>
 800878c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008790:	2300      	movs	r3, #0
 8008792:	930c      	str	r3, [sp, #48]	; 0x30
 8008794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008796:	1b5b      	subs	r3, r3, r5
 8008798:	1e5a      	subs	r2, r3, #1
 800879a:	bf45      	ittet	mi
 800879c:	f1c3 0301 	rsbmi	r3, r3, #1
 80087a0:	9305      	strmi	r3, [sp, #20]
 80087a2:	2300      	movpl	r3, #0
 80087a4:	2300      	movmi	r3, #0
 80087a6:	9206      	str	r2, [sp, #24]
 80087a8:	bf54      	ite	pl
 80087aa:	9305      	strpl	r3, [sp, #20]
 80087ac:	9306      	strmi	r3, [sp, #24]
 80087ae:	f1bb 0f00 	cmp.w	fp, #0
 80087b2:	db3c      	blt.n	800882e <_dtoa_r+0x24e>
 80087b4:	9b06      	ldr	r3, [sp, #24]
 80087b6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80087ba:	445b      	add	r3, fp
 80087bc:	9306      	str	r3, [sp, #24]
 80087be:	2300      	movs	r3, #0
 80087c0:	9308      	str	r3, [sp, #32]
 80087c2:	9b07      	ldr	r3, [sp, #28]
 80087c4:	2b09      	cmp	r3, #9
 80087c6:	d868      	bhi.n	800889a <_dtoa_r+0x2ba>
 80087c8:	2b05      	cmp	r3, #5
 80087ca:	bfc4      	itt	gt
 80087cc:	3b04      	subgt	r3, #4
 80087ce:	9307      	strgt	r3, [sp, #28]
 80087d0:	9b07      	ldr	r3, [sp, #28]
 80087d2:	f1a3 0302 	sub.w	r3, r3, #2
 80087d6:	bfcc      	ite	gt
 80087d8:	2500      	movgt	r5, #0
 80087da:	2501      	movle	r5, #1
 80087dc:	2b03      	cmp	r3, #3
 80087de:	f200 8085 	bhi.w	80088ec <_dtoa_r+0x30c>
 80087e2:	e8df f003 	tbb	[pc, r3]
 80087e6:	3b2e      	.short	0x3b2e
 80087e8:	5839      	.short	0x5839
 80087ea:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087ee:	441d      	add	r5, r3
 80087f0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087f4:	2b20      	cmp	r3, #32
 80087f6:	bfc1      	itttt	gt
 80087f8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087fc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008800:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008804:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008808:	bfd6      	itet	le
 800880a:	f1c3 0320 	rsble	r3, r3, #32
 800880e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008812:	fa06 f003 	lslle.w	r0, r6, r3
 8008816:	f7f7 fe95 	bl	8000544 <__aeabi_ui2d>
 800881a:	2201      	movs	r2, #1
 800881c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008820:	3d01      	subs	r5, #1
 8008822:	920e      	str	r2, [sp, #56]	; 0x38
 8008824:	e76f      	b.n	8008706 <_dtoa_r+0x126>
 8008826:	2301      	movs	r3, #1
 8008828:	e7b3      	b.n	8008792 <_dtoa_r+0x1b2>
 800882a:	900c      	str	r0, [sp, #48]	; 0x30
 800882c:	e7b2      	b.n	8008794 <_dtoa_r+0x1b4>
 800882e:	9b05      	ldr	r3, [sp, #20]
 8008830:	eba3 030b 	sub.w	r3, r3, fp
 8008834:	9305      	str	r3, [sp, #20]
 8008836:	f1cb 0300 	rsb	r3, fp, #0
 800883a:	9308      	str	r3, [sp, #32]
 800883c:	2300      	movs	r3, #0
 800883e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008840:	e7bf      	b.n	80087c2 <_dtoa_r+0x1e2>
 8008842:	2300      	movs	r3, #0
 8008844:	9309      	str	r3, [sp, #36]	; 0x24
 8008846:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008848:	2b00      	cmp	r3, #0
 800884a:	dc52      	bgt.n	80088f2 <_dtoa_r+0x312>
 800884c:	2301      	movs	r3, #1
 800884e:	9301      	str	r3, [sp, #4]
 8008850:	9304      	str	r3, [sp, #16]
 8008852:	461a      	mov	r2, r3
 8008854:	920a      	str	r2, [sp, #40]	; 0x28
 8008856:	e00b      	b.n	8008870 <_dtoa_r+0x290>
 8008858:	2301      	movs	r3, #1
 800885a:	e7f3      	b.n	8008844 <_dtoa_r+0x264>
 800885c:	2300      	movs	r3, #0
 800885e:	9309      	str	r3, [sp, #36]	; 0x24
 8008860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008862:	445b      	add	r3, fp
 8008864:	9301      	str	r3, [sp, #4]
 8008866:	3301      	adds	r3, #1
 8008868:	2b01      	cmp	r3, #1
 800886a:	9304      	str	r3, [sp, #16]
 800886c:	bfb8      	it	lt
 800886e:	2301      	movlt	r3, #1
 8008870:	69e0      	ldr	r0, [r4, #28]
 8008872:	2100      	movs	r1, #0
 8008874:	2204      	movs	r2, #4
 8008876:	f102 0614 	add.w	r6, r2, #20
 800887a:	429e      	cmp	r6, r3
 800887c:	d93d      	bls.n	80088fa <_dtoa_r+0x31a>
 800887e:	6041      	str	r1, [r0, #4]
 8008880:	4620      	mov	r0, r4
 8008882:	f001 f909 	bl	8009a98 <_Balloc>
 8008886:	9000      	str	r0, [sp, #0]
 8008888:	2800      	cmp	r0, #0
 800888a:	d139      	bne.n	8008900 <_dtoa_r+0x320>
 800888c:	4b16      	ldr	r3, [pc, #88]	; (80088e8 <_dtoa_r+0x308>)
 800888e:	4602      	mov	r2, r0
 8008890:	f240 11af 	movw	r1, #431	; 0x1af
 8008894:	e6bd      	b.n	8008612 <_dtoa_r+0x32>
 8008896:	2301      	movs	r3, #1
 8008898:	e7e1      	b.n	800885e <_dtoa_r+0x27e>
 800889a:	2501      	movs	r5, #1
 800889c:	2300      	movs	r3, #0
 800889e:	9307      	str	r3, [sp, #28]
 80088a0:	9509      	str	r5, [sp, #36]	; 0x24
 80088a2:	f04f 33ff 	mov.w	r3, #4294967295
 80088a6:	9301      	str	r3, [sp, #4]
 80088a8:	9304      	str	r3, [sp, #16]
 80088aa:	2200      	movs	r2, #0
 80088ac:	2312      	movs	r3, #18
 80088ae:	e7d1      	b.n	8008854 <_dtoa_r+0x274>
 80088b0:	636f4361 	.word	0x636f4361
 80088b4:	3fd287a7 	.word	0x3fd287a7
 80088b8:	8b60c8b3 	.word	0x8b60c8b3
 80088bc:	3fc68a28 	.word	0x3fc68a28
 80088c0:	509f79fb 	.word	0x509f79fb
 80088c4:	3fd34413 	.word	0x3fd34413
 80088c8:	0800c406 	.word	0x0800c406
 80088cc:	0800c41d 	.word	0x0800c41d
 80088d0:	7ff00000 	.word	0x7ff00000
 80088d4:	0800c402 	.word	0x0800c402
 80088d8:	0800c3f9 	.word	0x0800c3f9
 80088dc:	0800c3c9 	.word	0x0800c3c9
 80088e0:	3ff80000 	.word	0x3ff80000
 80088e4:	0800c568 	.word	0x0800c568
 80088e8:	0800c475 	.word	0x0800c475
 80088ec:	2301      	movs	r3, #1
 80088ee:	9309      	str	r3, [sp, #36]	; 0x24
 80088f0:	e7d7      	b.n	80088a2 <_dtoa_r+0x2c2>
 80088f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	9304      	str	r3, [sp, #16]
 80088f8:	e7ba      	b.n	8008870 <_dtoa_r+0x290>
 80088fa:	3101      	adds	r1, #1
 80088fc:	0052      	lsls	r2, r2, #1
 80088fe:	e7ba      	b.n	8008876 <_dtoa_r+0x296>
 8008900:	69e3      	ldr	r3, [r4, #28]
 8008902:	9a00      	ldr	r2, [sp, #0]
 8008904:	601a      	str	r2, [r3, #0]
 8008906:	9b04      	ldr	r3, [sp, #16]
 8008908:	2b0e      	cmp	r3, #14
 800890a:	f200 80a8 	bhi.w	8008a5e <_dtoa_r+0x47e>
 800890e:	2d00      	cmp	r5, #0
 8008910:	f000 80a5 	beq.w	8008a5e <_dtoa_r+0x47e>
 8008914:	f1bb 0f00 	cmp.w	fp, #0
 8008918:	dd38      	ble.n	800898c <_dtoa_r+0x3ac>
 800891a:	4bc0      	ldr	r3, [pc, #768]	; (8008c1c <_dtoa_r+0x63c>)
 800891c:	f00b 020f 	and.w	r2, fp, #15
 8008920:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008924:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008928:	e9d3 6700 	ldrd	r6, r7, [r3]
 800892c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008930:	d019      	beq.n	8008966 <_dtoa_r+0x386>
 8008932:	4bbb      	ldr	r3, [pc, #748]	; (8008c20 <_dtoa_r+0x640>)
 8008934:	ec51 0b18 	vmov	r0, r1, d8
 8008938:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800893c:	f7f7 ffa6 	bl	800088c <__aeabi_ddiv>
 8008940:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008944:	f008 080f 	and.w	r8, r8, #15
 8008948:	2503      	movs	r5, #3
 800894a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008c20 <_dtoa_r+0x640>
 800894e:	f1b8 0f00 	cmp.w	r8, #0
 8008952:	d10a      	bne.n	800896a <_dtoa_r+0x38a>
 8008954:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008958:	4632      	mov	r2, r6
 800895a:	463b      	mov	r3, r7
 800895c:	f7f7 ff96 	bl	800088c <__aeabi_ddiv>
 8008960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008964:	e02b      	b.n	80089be <_dtoa_r+0x3de>
 8008966:	2502      	movs	r5, #2
 8008968:	e7ef      	b.n	800894a <_dtoa_r+0x36a>
 800896a:	f018 0f01 	tst.w	r8, #1
 800896e:	d008      	beq.n	8008982 <_dtoa_r+0x3a2>
 8008970:	4630      	mov	r0, r6
 8008972:	4639      	mov	r1, r7
 8008974:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008978:	f7f7 fe5e 	bl	8000638 <__aeabi_dmul>
 800897c:	3501      	adds	r5, #1
 800897e:	4606      	mov	r6, r0
 8008980:	460f      	mov	r7, r1
 8008982:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008986:	f109 0908 	add.w	r9, r9, #8
 800898a:	e7e0      	b.n	800894e <_dtoa_r+0x36e>
 800898c:	f000 809f 	beq.w	8008ace <_dtoa_r+0x4ee>
 8008990:	f1cb 0600 	rsb	r6, fp, #0
 8008994:	4ba1      	ldr	r3, [pc, #644]	; (8008c1c <_dtoa_r+0x63c>)
 8008996:	4fa2      	ldr	r7, [pc, #648]	; (8008c20 <_dtoa_r+0x640>)
 8008998:	f006 020f 	and.w	r2, r6, #15
 800899c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80089a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089a4:	ec51 0b18 	vmov	r0, r1, d8
 80089a8:	f7f7 fe46 	bl	8000638 <__aeabi_dmul>
 80089ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089b0:	1136      	asrs	r6, r6, #4
 80089b2:	2300      	movs	r3, #0
 80089b4:	2502      	movs	r5, #2
 80089b6:	2e00      	cmp	r6, #0
 80089b8:	d17e      	bne.n	8008ab8 <_dtoa_r+0x4d8>
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d1d0      	bne.n	8008960 <_dtoa_r+0x380>
 80089be:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089c0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 8084 	beq.w	8008ad2 <_dtoa_r+0x4f2>
 80089ca:	4b96      	ldr	r3, [pc, #600]	; (8008c24 <_dtoa_r+0x644>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	4640      	mov	r0, r8
 80089d0:	4649      	mov	r1, r9
 80089d2:	f7f8 f8a3 	bl	8000b1c <__aeabi_dcmplt>
 80089d6:	2800      	cmp	r0, #0
 80089d8:	d07b      	beq.n	8008ad2 <_dtoa_r+0x4f2>
 80089da:	9b04      	ldr	r3, [sp, #16]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d078      	beq.n	8008ad2 <_dtoa_r+0x4f2>
 80089e0:	9b01      	ldr	r3, [sp, #4]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dd39      	ble.n	8008a5a <_dtoa_r+0x47a>
 80089e6:	4b90      	ldr	r3, [pc, #576]	; (8008c28 <_dtoa_r+0x648>)
 80089e8:	2200      	movs	r2, #0
 80089ea:	4640      	mov	r0, r8
 80089ec:	4649      	mov	r1, r9
 80089ee:	f7f7 fe23 	bl	8000638 <__aeabi_dmul>
 80089f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089f6:	9e01      	ldr	r6, [sp, #4]
 80089f8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80089fc:	3501      	adds	r5, #1
 80089fe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008a02:	4628      	mov	r0, r5
 8008a04:	f7f7 fdae 	bl	8000564 <__aeabi_i2d>
 8008a08:	4642      	mov	r2, r8
 8008a0a:	464b      	mov	r3, r9
 8008a0c:	f7f7 fe14 	bl	8000638 <__aeabi_dmul>
 8008a10:	4b86      	ldr	r3, [pc, #536]	; (8008c2c <_dtoa_r+0x64c>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	f7f7 fc5a 	bl	80002cc <__adddf3>
 8008a18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a20:	9303      	str	r3, [sp, #12]
 8008a22:	2e00      	cmp	r6, #0
 8008a24:	d158      	bne.n	8008ad8 <_dtoa_r+0x4f8>
 8008a26:	4b82      	ldr	r3, [pc, #520]	; (8008c30 <_dtoa_r+0x650>)
 8008a28:	2200      	movs	r2, #0
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	f7f7 fc4b 	bl	80002c8 <__aeabi_dsub>
 8008a32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a36:	4680      	mov	r8, r0
 8008a38:	4689      	mov	r9, r1
 8008a3a:	f7f8 f88d 	bl	8000b58 <__aeabi_dcmpgt>
 8008a3e:	2800      	cmp	r0, #0
 8008a40:	f040 8296 	bne.w	8008f70 <_dtoa_r+0x990>
 8008a44:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a48:	4640      	mov	r0, r8
 8008a4a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a4e:	4649      	mov	r1, r9
 8008a50:	f7f8 f864 	bl	8000b1c <__aeabi_dcmplt>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f040 8289 	bne.w	8008f6c <_dtoa_r+0x98c>
 8008a5a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a5e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	f2c0 814e 	blt.w	8008d02 <_dtoa_r+0x722>
 8008a66:	f1bb 0f0e 	cmp.w	fp, #14
 8008a6a:	f300 814a 	bgt.w	8008d02 <_dtoa_r+0x722>
 8008a6e:	4b6b      	ldr	r3, [pc, #428]	; (8008c1c <_dtoa_r+0x63c>)
 8008a70:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a74:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	f280 80dc 	bge.w	8008c38 <_dtoa_r+0x658>
 8008a80:	9b04      	ldr	r3, [sp, #16]
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	f300 80d8 	bgt.w	8008c38 <_dtoa_r+0x658>
 8008a88:	f040 826f 	bne.w	8008f6a <_dtoa_r+0x98a>
 8008a8c:	4b68      	ldr	r3, [pc, #416]	; (8008c30 <_dtoa_r+0x650>)
 8008a8e:	2200      	movs	r2, #0
 8008a90:	4640      	mov	r0, r8
 8008a92:	4649      	mov	r1, r9
 8008a94:	f7f7 fdd0 	bl	8000638 <__aeabi_dmul>
 8008a98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a9c:	f7f8 f852 	bl	8000b44 <__aeabi_dcmpge>
 8008aa0:	9e04      	ldr	r6, [sp, #16]
 8008aa2:	4637      	mov	r7, r6
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	f040 8245 	bne.w	8008f34 <_dtoa_r+0x954>
 8008aaa:	9d00      	ldr	r5, [sp, #0]
 8008aac:	2331      	movs	r3, #49	; 0x31
 8008aae:	f805 3b01 	strb.w	r3, [r5], #1
 8008ab2:	f10b 0b01 	add.w	fp, fp, #1
 8008ab6:	e241      	b.n	8008f3c <_dtoa_r+0x95c>
 8008ab8:	07f2      	lsls	r2, r6, #31
 8008aba:	d505      	bpl.n	8008ac8 <_dtoa_r+0x4e8>
 8008abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ac0:	f7f7 fdba 	bl	8000638 <__aeabi_dmul>
 8008ac4:	3501      	adds	r5, #1
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	1076      	asrs	r6, r6, #1
 8008aca:	3708      	adds	r7, #8
 8008acc:	e773      	b.n	80089b6 <_dtoa_r+0x3d6>
 8008ace:	2502      	movs	r5, #2
 8008ad0:	e775      	b.n	80089be <_dtoa_r+0x3de>
 8008ad2:	9e04      	ldr	r6, [sp, #16]
 8008ad4:	465f      	mov	r7, fp
 8008ad6:	e792      	b.n	80089fe <_dtoa_r+0x41e>
 8008ad8:	9900      	ldr	r1, [sp, #0]
 8008ada:	4b50      	ldr	r3, [pc, #320]	; (8008c1c <_dtoa_r+0x63c>)
 8008adc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ae0:	4431      	add	r1, r6
 8008ae2:	9102      	str	r1, [sp, #8]
 8008ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ae6:	eeb0 9a47 	vmov.f32	s18, s14
 8008aea:	eef0 9a67 	vmov.f32	s19, s15
 8008aee:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008af2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008af6:	2900      	cmp	r1, #0
 8008af8:	d044      	beq.n	8008b84 <_dtoa_r+0x5a4>
 8008afa:	494e      	ldr	r1, [pc, #312]	; (8008c34 <_dtoa_r+0x654>)
 8008afc:	2000      	movs	r0, #0
 8008afe:	f7f7 fec5 	bl	800088c <__aeabi_ddiv>
 8008b02:	ec53 2b19 	vmov	r2, r3, d9
 8008b06:	f7f7 fbdf 	bl	80002c8 <__aeabi_dsub>
 8008b0a:	9d00      	ldr	r5, [sp, #0]
 8008b0c:	ec41 0b19 	vmov	d9, r0, r1
 8008b10:	4649      	mov	r1, r9
 8008b12:	4640      	mov	r0, r8
 8008b14:	f7f8 f840 	bl	8000b98 <__aeabi_d2iz>
 8008b18:	4606      	mov	r6, r0
 8008b1a:	f7f7 fd23 	bl	8000564 <__aeabi_i2d>
 8008b1e:	4602      	mov	r2, r0
 8008b20:	460b      	mov	r3, r1
 8008b22:	4640      	mov	r0, r8
 8008b24:	4649      	mov	r1, r9
 8008b26:	f7f7 fbcf 	bl	80002c8 <__aeabi_dsub>
 8008b2a:	3630      	adds	r6, #48	; 0x30
 8008b2c:	f805 6b01 	strb.w	r6, [r5], #1
 8008b30:	ec53 2b19 	vmov	r2, r3, d9
 8008b34:	4680      	mov	r8, r0
 8008b36:	4689      	mov	r9, r1
 8008b38:	f7f7 fff0 	bl	8000b1c <__aeabi_dcmplt>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	d164      	bne.n	8008c0a <_dtoa_r+0x62a>
 8008b40:	4642      	mov	r2, r8
 8008b42:	464b      	mov	r3, r9
 8008b44:	4937      	ldr	r1, [pc, #220]	; (8008c24 <_dtoa_r+0x644>)
 8008b46:	2000      	movs	r0, #0
 8008b48:	f7f7 fbbe 	bl	80002c8 <__aeabi_dsub>
 8008b4c:	ec53 2b19 	vmov	r2, r3, d9
 8008b50:	f7f7 ffe4 	bl	8000b1c <__aeabi_dcmplt>
 8008b54:	2800      	cmp	r0, #0
 8008b56:	f040 80b6 	bne.w	8008cc6 <_dtoa_r+0x6e6>
 8008b5a:	9b02      	ldr	r3, [sp, #8]
 8008b5c:	429d      	cmp	r5, r3
 8008b5e:	f43f af7c 	beq.w	8008a5a <_dtoa_r+0x47a>
 8008b62:	4b31      	ldr	r3, [pc, #196]	; (8008c28 <_dtoa_r+0x648>)
 8008b64:	ec51 0b19 	vmov	r0, r1, d9
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f7f7 fd65 	bl	8000638 <__aeabi_dmul>
 8008b6e:	4b2e      	ldr	r3, [pc, #184]	; (8008c28 <_dtoa_r+0x648>)
 8008b70:	ec41 0b19 	vmov	d9, r0, r1
 8008b74:	2200      	movs	r2, #0
 8008b76:	4640      	mov	r0, r8
 8008b78:	4649      	mov	r1, r9
 8008b7a:	f7f7 fd5d 	bl	8000638 <__aeabi_dmul>
 8008b7e:	4680      	mov	r8, r0
 8008b80:	4689      	mov	r9, r1
 8008b82:	e7c5      	b.n	8008b10 <_dtoa_r+0x530>
 8008b84:	ec51 0b17 	vmov	r0, r1, d7
 8008b88:	f7f7 fd56 	bl	8000638 <__aeabi_dmul>
 8008b8c:	9b02      	ldr	r3, [sp, #8]
 8008b8e:	9d00      	ldr	r5, [sp, #0]
 8008b90:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b92:	ec41 0b19 	vmov	d9, r0, r1
 8008b96:	4649      	mov	r1, r9
 8008b98:	4640      	mov	r0, r8
 8008b9a:	f7f7 fffd 	bl	8000b98 <__aeabi_d2iz>
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	f7f7 fce0 	bl	8000564 <__aeabi_i2d>
 8008ba4:	3630      	adds	r6, #48	; 0x30
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	460b      	mov	r3, r1
 8008baa:	4640      	mov	r0, r8
 8008bac:	4649      	mov	r1, r9
 8008bae:	f7f7 fb8b 	bl	80002c8 <__aeabi_dsub>
 8008bb2:	f805 6b01 	strb.w	r6, [r5], #1
 8008bb6:	9b02      	ldr	r3, [sp, #8]
 8008bb8:	429d      	cmp	r5, r3
 8008bba:	4680      	mov	r8, r0
 8008bbc:	4689      	mov	r9, r1
 8008bbe:	f04f 0200 	mov.w	r2, #0
 8008bc2:	d124      	bne.n	8008c0e <_dtoa_r+0x62e>
 8008bc4:	4b1b      	ldr	r3, [pc, #108]	; (8008c34 <_dtoa_r+0x654>)
 8008bc6:	ec51 0b19 	vmov	r0, r1, d9
 8008bca:	f7f7 fb7f 	bl	80002cc <__adddf3>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	4640      	mov	r0, r8
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	f7f7 ffbf 	bl	8000b58 <__aeabi_dcmpgt>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	d173      	bne.n	8008cc6 <_dtoa_r+0x6e6>
 8008bde:	ec53 2b19 	vmov	r2, r3, d9
 8008be2:	4914      	ldr	r1, [pc, #80]	; (8008c34 <_dtoa_r+0x654>)
 8008be4:	2000      	movs	r0, #0
 8008be6:	f7f7 fb6f 	bl	80002c8 <__aeabi_dsub>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4640      	mov	r0, r8
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	f7f7 ff93 	bl	8000b1c <__aeabi_dcmplt>
 8008bf6:	2800      	cmp	r0, #0
 8008bf8:	f43f af2f 	beq.w	8008a5a <_dtoa_r+0x47a>
 8008bfc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bfe:	1e6b      	subs	r3, r5, #1
 8008c00:	930f      	str	r3, [sp, #60]	; 0x3c
 8008c02:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008c06:	2b30      	cmp	r3, #48	; 0x30
 8008c08:	d0f8      	beq.n	8008bfc <_dtoa_r+0x61c>
 8008c0a:	46bb      	mov	fp, r7
 8008c0c:	e04a      	b.n	8008ca4 <_dtoa_r+0x6c4>
 8008c0e:	4b06      	ldr	r3, [pc, #24]	; (8008c28 <_dtoa_r+0x648>)
 8008c10:	f7f7 fd12 	bl	8000638 <__aeabi_dmul>
 8008c14:	4680      	mov	r8, r0
 8008c16:	4689      	mov	r9, r1
 8008c18:	e7bd      	b.n	8008b96 <_dtoa_r+0x5b6>
 8008c1a:	bf00      	nop
 8008c1c:	0800c568 	.word	0x0800c568
 8008c20:	0800c540 	.word	0x0800c540
 8008c24:	3ff00000 	.word	0x3ff00000
 8008c28:	40240000 	.word	0x40240000
 8008c2c:	401c0000 	.word	0x401c0000
 8008c30:	40140000 	.word	0x40140000
 8008c34:	3fe00000 	.word	0x3fe00000
 8008c38:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c3c:	9d00      	ldr	r5, [sp, #0]
 8008c3e:	4642      	mov	r2, r8
 8008c40:	464b      	mov	r3, r9
 8008c42:	4630      	mov	r0, r6
 8008c44:	4639      	mov	r1, r7
 8008c46:	f7f7 fe21 	bl	800088c <__aeabi_ddiv>
 8008c4a:	f7f7 ffa5 	bl	8000b98 <__aeabi_d2iz>
 8008c4e:	9001      	str	r0, [sp, #4]
 8008c50:	f7f7 fc88 	bl	8000564 <__aeabi_i2d>
 8008c54:	4642      	mov	r2, r8
 8008c56:	464b      	mov	r3, r9
 8008c58:	f7f7 fcee 	bl	8000638 <__aeabi_dmul>
 8008c5c:	4602      	mov	r2, r0
 8008c5e:	460b      	mov	r3, r1
 8008c60:	4630      	mov	r0, r6
 8008c62:	4639      	mov	r1, r7
 8008c64:	f7f7 fb30 	bl	80002c8 <__aeabi_dsub>
 8008c68:	9e01      	ldr	r6, [sp, #4]
 8008c6a:	9f04      	ldr	r7, [sp, #16]
 8008c6c:	3630      	adds	r6, #48	; 0x30
 8008c6e:	f805 6b01 	strb.w	r6, [r5], #1
 8008c72:	9e00      	ldr	r6, [sp, #0]
 8008c74:	1bae      	subs	r6, r5, r6
 8008c76:	42b7      	cmp	r7, r6
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	d134      	bne.n	8008ce8 <_dtoa_r+0x708>
 8008c7e:	f7f7 fb25 	bl	80002cc <__adddf3>
 8008c82:	4642      	mov	r2, r8
 8008c84:	464b      	mov	r3, r9
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	f7f7 ff65 	bl	8000b58 <__aeabi_dcmpgt>
 8008c8e:	b9c8      	cbnz	r0, 8008cc4 <_dtoa_r+0x6e4>
 8008c90:	4642      	mov	r2, r8
 8008c92:	464b      	mov	r3, r9
 8008c94:	4630      	mov	r0, r6
 8008c96:	4639      	mov	r1, r7
 8008c98:	f7f7 ff36 	bl	8000b08 <__aeabi_dcmpeq>
 8008c9c:	b110      	cbz	r0, 8008ca4 <_dtoa_r+0x6c4>
 8008c9e:	9b01      	ldr	r3, [sp, #4]
 8008ca0:	07db      	lsls	r3, r3, #31
 8008ca2:	d40f      	bmi.n	8008cc4 <_dtoa_r+0x6e4>
 8008ca4:	4651      	mov	r1, sl
 8008ca6:	4620      	mov	r0, r4
 8008ca8:	f000 ff36 	bl	8009b18 <_Bfree>
 8008cac:	2300      	movs	r3, #0
 8008cae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008cb0:	702b      	strb	r3, [r5, #0]
 8008cb2:	f10b 0301 	add.w	r3, fp, #1
 8008cb6:	6013      	str	r3, [r2, #0]
 8008cb8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	f43f ace2 	beq.w	8008684 <_dtoa_r+0xa4>
 8008cc0:	601d      	str	r5, [r3, #0]
 8008cc2:	e4df      	b.n	8008684 <_dtoa_r+0xa4>
 8008cc4:	465f      	mov	r7, fp
 8008cc6:	462b      	mov	r3, r5
 8008cc8:	461d      	mov	r5, r3
 8008cca:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cce:	2a39      	cmp	r2, #57	; 0x39
 8008cd0:	d106      	bne.n	8008ce0 <_dtoa_r+0x700>
 8008cd2:	9a00      	ldr	r2, [sp, #0]
 8008cd4:	429a      	cmp	r2, r3
 8008cd6:	d1f7      	bne.n	8008cc8 <_dtoa_r+0x6e8>
 8008cd8:	9900      	ldr	r1, [sp, #0]
 8008cda:	2230      	movs	r2, #48	; 0x30
 8008cdc:	3701      	adds	r7, #1
 8008cde:	700a      	strb	r2, [r1, #0]
 8008ce0:	781a      	ldrb	r2, [r3, #0]
 8008ce2:	3201      	adds	r2, #1
 8008ce4:	701a      	strb	r2, [r3, #0]
 8008ce6:	e790      	b.n	8008c0a <_dtoa_r+0x62a>
 8008ce8:	4ba3      	ldr	r3, [pc, #652]	; (8008f78 <_dtoa_r+0x998>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	f7f7 fca4 	bl	8000638 <__aeabi_dmul>
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	f7f7 ff06 	bl	8000b08 <__aeabi_dcmpeq>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	d09e      	beq.n	8008c3e <_dtoa_r+0x65e>
 8008d00:	e7d0      	b.n	8008ca4 <_dtoa_r+0x6c4>
 8008d02:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d04:	2a00      	cmp	r2, #0
 8008d06:	f000 80ca 	beq.w	8008e9e <_dtoa_r+0x8be>
 8008d0a:	9a07      	ldr	r2, [sp, #28]
 8008d0c:	2a01      	cmp	r2, #1
 8008d0e:	f300 80ad 	bgt.w	8008e6c <_dtoa_r+0x88c>
 8008d12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008d14:	2a00      	cmp	r2, #0
 8008d16:	f000 80a5 	beq.w	8008e64 <_dtoa_r+0x884>
 8008d1a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d1e:	9e08      	ldr	r6, [sp, #32]
 8008d20:	9d05      	ldr	r5, [sp, #20]
 8008d22:	9a05      	ldr	r2, [sp, #20]
 8008d24:	441a      	add	r2, r3
 8008d26:	9205      	str	r2, [sp, #20]
 8008d28:	9a06      	ldr	r2, [sp, #24]
 8008d2a:	2101      	movs	r1, #1
 8008d2c:	441a      	add	r2, r3
 8008d2e:	4620      	mov	r0, r4
 8008d30:	9206      	str	r2, [sp, #24]
 8008d32:	f000 fff1 	bl	8009d18 <__i2b>
 8008d36:	4607      	mov	r7, r0
 8008d38:	b165      	cbz	r5, 8008d54 <_dtoa_r+0x774>
 8008d3a:	9b06      	ldr	r3, [sp, #24]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	dd09      	ble.n	8008d54 <_dtoa_r+0x774>
 8008d40:	42ab      	cmp	r3, r5
 8008d42:	9a05      	ldr	r2, [sp, #20]
 8008d44:	bfa8      	it	ge
 8008d46:	462b      	movge	r3, r5
 8008d48:	1ad2      	subs	r2, r2, r3
 8008d4a:	9205      	str	r2, [sp, #20]
 8008d4c:	9a06      	ldr	r2, [sp, #24]
 8008d4e:	1aed      	subs	r5, r5, r3
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	9306      	str	r3, [sp, #24]
 8008d54:	9b08      	ldr	r3, [sp, #32]
 8008d56:	b1f3      	cbz	r3, 8008d96 <_dtoa_r+0x7b6>
 8008d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	f000 80a3 	beq.w	8008ea6 <_dtoa_r+0x8c6>
 8008d60:	2e00      	cmp	r6, #0
 8008d62:	dd10      	ble.n	8008d86 <_dtoa_r+0x7a6>
 8008d64:	4639      	mov	r1, r7
 8008d66:	4632      	mov	r2, r6
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f001 f895 	bl	8009e98 <__pow5mult>
 8008d6e:	4652      	mov	r2, sl
 8008d70:	4601      	mov	r1, r0
 8008d72:	4607      	mov	r7, r0
 8008d74:	4620      	mov	r0, r4
 8008d76:	f000 ffe5 	bl	8009d44 <__multiply>
 8008d7a:	4651      	mov	r1, sl
 8008d7c:	4680      	mov	r8, r0
 8008d7e:	4620      	mov	r0, r4
 8008d80:	f000 feca 	bl	8009b18 <_Bfree>
 8008d84:	46c2      	mov	sl, r8
 8008d86:	9b08      	ldr	r3, [sp, #32]
 8008d88:	1b9a      	subs	r2, r3, r6
 8008d8a:	d004      	beq.n	8008d96 <_dtoa_r+0x7b6>
 8008d8c:	4651      	mov	r1, sl
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f001 f882 	bl	8009e98 <__pow5mult>
 8008d94:	4682      	mov	sl, r0
 8008d96:	2101      	movs	r1, #1
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f000 ffbd 	bl	8009d18 <__i2b>
 8008d9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	4606      	mov	r6, r0
 8008da4:	f340 8081 	ble.w	8008eaa <_dtoa_r+0x8ca>
 8008da8:	461a      	mov	r2, r3
 8008daa:	4601      	mov	r1, r0
 8008dac:	4620      	mov	r0, r4
 8008dae:	f001 f873 	bl	8009e98 <__pow5mult>
 8008db2:	9b07      	ldr	r3, [sp, #28]
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	4606      	mov	r6, r0
 8008db8:	dd7a      	ble.n	8008eb0 <_dtoa_r+0x8d0>
 8008dba:	f04f 0800 	mov.w	r8, #0
 8008dbe:	6933      	ldr	r3, [r6, #16]
 8008dc0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008dc4:	6918      	ldr	r0, [r3, #16]
 8008dc6:	f000 ff59 	bl	8009c7c <__hi0bits>
 8008dca:	f1c0 0020 	rsb	r0, r0, #32
 8008dce:	9b06      	ldr	r3, [sp, #24]
 8008dd0:	4418      	add	r0, r3
 8008dd2:	f010 001f 	ands.w	r0, r0, #31
 8008dd6:	f000 8094 	beq.w	8008f02 <_dtoa_r+0x922>
 8008dda:	f1c0 0320 	rsb	r3, r0, #32
 8008dde:	2b04      	cmp	r3, #4
 8008de0:	f340 8085 	ble.w	8008eee <_dtoa_r+0x90e>
 8008de4:	9b05      	ldr	r3, [sp, #20]
 8008de6:	f1c0 001c 	rsb	r0, r0, #28
 8008dea:	4403      	add	r3, r0
 8008dec:	9305      	str	r3, [sp, #20]
 8008dee:	9b06      	ldr	r3, [sp, #24]
 8008df0:	4403      	add	r3, r0
 8008df2:	4405      	add	r5, r0
 8008df4:	9306      	str	r3, [sp, #24]
 8008df6:	9b05      	ldr	r3, [sp, #20]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	dd05      	ble.n	8008e08 <_dtoa_r+0x828>
 8008dfc:	4651      	mov	r1, sl
 8008dfe:	461a      	mov	r2, r3
 8008e00:	4620      	mov	r0, r4
 8008e02:	f001 f8a3 	bl	8009f4c <__lshift>
 8008e06:	4682      	mov	sl, r0
 8008e08:	9b06      	ldr	r3, [sp, #24]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	dd05      	ble.n	8008e1a <_dtoa_r+0x83a>
 8008e0e:	4631      	mov	r1, r6
 8008e10:	461a      	mov	r2, r3
 8008e12:	4620      	mov	r0, r4
 8008e14:	f001 f89a 	bl	8009f4c <__lshift>
 8008e18:	4606      	mov	r6, r0
 8008e1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d072      	beq.n	8008f06 <_dtoa_r+0x926>
 8008e20:	4631      	mov	r1, r6
 8008e22:	4650      	mov	r0, sl
 8008e24:	f001 f8fe 	bl	800a024 <__mcmp>
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	da6c      	bge.n	8008f06 <_dtoa_r+0x926>
 8008e2c:	2300      	movs	r3, #0
 8008e2e:	4651      	mov	r1, sl
 8008e30:	220a      	movs	r2, #10
 8008e32:	4620      	mov	r0, r4
 8008e34:	f000 fe92 	bl	8009b5c <__multadd>
 8008e38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e3e:	4682      	mov	sl, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	f000 81b0 	beq.w	80091a6 <_dtoa_r+0xbc6>
 8008e46:	2300      	movs	r3, #0
 8008e48:	4639      	mov	r1, r7
 8008e4a:	220a      	movs	r2, #10
 8008e4c:	4620      	mov	r0, r4
 8008e4e:	f000 fe85 	bl	8009b5c <__multadd>
 8008e52:	9b01      	ldr	r3, [sp, #4]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	4607      	mov	r7, r0
 8008e58:	f300 8096 	bgt.w	8008f88 <_dtoa_r+0x9a8>
 8008e5c:	9b07      	ldr	r3, [sp, #28]
 8008e5e:	2b02      	cmp	r3, #2
 8008e60:	dc59      	bgt.n	8008f16 <_dtoa_r+0x936>
 8008e62:	e091      	b.n	8008f88 <_dtoa_r+0x9a8>
 8008e64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e6a:	e758      	b.n	8008d1e <_dtoa_r+0x73e>
 8008e6c:	9b04      	ldr	r3, [sp, #16]
 8008e6e:	1e5e      	subs	r6, r3, #1
 8008e70:	9b08      	ldr	r3, [sp, #32]
 8008e72:	42b3      	cmp	r3, r6
 8008e74:	bfbf      	itttt	lt
 8008e76:	9b08      	ldrlt	r3, [sp, #32]
 8008e78:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e7a:	9608      	strlt	r6, [sp, #32]
 8008e7c:	1af3      	sublt	r3, r6, r3
 8008e7e:	bfb4      	ite	lt
 8008e80:	18d2      	addlt	r2, r2, r3
 8008e82:	1b9e      	subge	r6, r3, r6
 8008e84:	9b04      	ldr	r3, [sp, #16]
 8008e86:	bfbc      	itt	lt
 8008e88:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008e8a:	2600      	movlt	r6, #0
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	bfb7      	itett	lt
 8008e90:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008e94:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008e98:	1a9d      	sublt	r5, r3, r2
 8008e9a:	2300      	movlt	r3, #0
 8008e9c:	e741      	b.n	8008d22 <_dtoa_r+0x742>
 8008e9e:	9e08      	ldr	r6, [sp, #32]
 8008ea0:	9d05      	ldr	r5, [sp, #20]
 8008ea2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008ea4:	e748      	b.n	8008d38 <_dtoa_r+0x758>
 8008ea6:	9a08      	ldr	r2, [sp, #32]
 8008ea8:	e770      	b.n	8008d8c <_dtoa_r+0x7ac>
 8008eaa:	9b07      	ldr	r3, [sp, #28]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	dc19      	bgt.n	8008ee4 <_dtoa_r+0x904>
 8008eb0:	9b02      	ldr	r3, [sp, #8]
 8008eb2:	b9bb      	cbnz	r3, 8008ee4 <_dtoa_r+0x904>
 8008eb4:	9b03      	ldr	r3, [sp, #12]
 8008eb6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008eba:	b99b      	cbnz	r3, 8008ee4 <_dtoa_r+0x904>
 8008ebc:	9b03      	ldr	r3, [sp, #12]
 8008ebe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ec2:	0d1b      	lsrs	r3, r3, #20
 8008ec4:	051b      	lsls	r3, r3, #20
 8008ec6:	b183      	cbz	r3, 8008eea <_dtoa_r+0x90a>
 8008ec8:	9b05      	ldr	r3, [sp, #20]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	9305      	str	r3, [sp, #20]
 8008ece:	9b06      	ldr	r3, [sp, #24]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	9306      	str	r3, [sp, #24]
 8008ed4:	f04f 0801 	mov.w	r8, #1
 8008ed8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	f47f af6f 	bne.w	8008dbe <_dtoa_r+0x7de>
 8008ee0:	2001      	movs	r0, #1
 8008ee2:	e774      	b.n	8008dce <_dtoa_r+0x7ee>
 8008ee4:	f04f 0800 	mov.w	r8, #0
 8008ee8:	e7f6      	b.n	8008ed8 <_dtoa_r+0x8f8>
 8008eea:	4698      	mov	r8, r3
 8008eec:	e7f4      	b.n	8008ed8 <_dtoa_r+0x8f8>
 8008eee:	d082      	beq.n	8008df6 <_dtoa_r+0x816>
 8008ef0:	9a05      	ldr	r2, [sp, #20]
 8008ef2:	331c      	adds	r3, #28
 8008ef4:	441a      	add	r2, r3
 8008ef6:	9205      	str	r2, [sp, #20]
 8008ef8:	9a06      	ldr	r2, [sp, #24]
 8008efa:	441a      	add	r2, r3
 8008efc:	441d      	add	r5, r3
 8008efe:	9206      	str	r2, [sp, #24]
 8008f00:	e779      	b.n	8008df6 <_dtoa_r+0x816>
 8008f02:	4603      	mov	r3, r0
 8008f04:	e7f4      	b.n	8008ef0 <_dtoa_r+0x910>
 8008f06:	9b04      	ldr	r3, [sp, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	dc37      	bgt.n	8008f7c <_dtoa_r+0x99c>
 8008f0c:	9b07      	ldr	r3, [sp, #28]
 8008f0e:	2b02      	cmp	r3, #2
 8008f10:	dd34      	ble.n	8008f7c <_dtoa_r+0x99c>
 8008f12:	9b04      	ldr	r3, [sp, #16]
 8008f14:	9301      	str	r3, [sp, #4]
 8008f16:	9b01      	ldr	r3, [sp, #4]
 8008f18:	b963      	cbnz	r3, 8008f34 <_dtoa_r+0x954>
 8008f1a:	4631      	mov	r1, r6
 8008f1c:	2205      	movs	r2, #5
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f000 fe1c 	bl	8009b5c <__multadd>
 8008f24:	4601      	mov	r1, r0
 8008f26:	4606      	mov	r6, r0
 8008f28:	4650      	mov	r0, sl
 8008f2a:	f001 f87b 	bl	800a024 <__mcmp>
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f73f adbb 	bgt.w	8008aaa <_dtoa_r+0x4ca>
 8008f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f36:	9d00      	ldr	r5, [sp, #0]
 8008f38:	ea6f 0b03 	mvn.w	fp, r3
 8008f3c:	f04f 0800 	mov.w	r8, #0
 8008f40:	4631      	mov	r1, r6
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 fde8 	bl	8009b18 <_Bfree>
 8008f48:	2f00      	cmp	r7, #0
 8008f4a:	f43f aeab 	beq.w	8008ca4 <_dtoa_r+0x6c4>
 8008f4e:	f1b8 0f00 	cmp.w	r8, #0
 8008f52:	d005      	beq.n	8008f60 <_dtoa_r+0x980>
 8008f54:	45b8      	cmp	r8, r7
 8008f56:	d003      	beq.n	8008f60 <_dtoa_r+0x980>
 8008f58:	4641      	mov	r1, r8
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	f000 fddc 	bl	8009b18 <_Bfree>
 8008f60:	4639      	mov	r1, r7
 8008f62:	4620      	mov	r0, r4
 8008f64:	f000 fdd8 	bl	8009b18 <_Bfree>
 8008f68:	e69c      	b.n	8008ca4 <_dtoa_r+0x6c4>
 8008f6a:	2600      	movs	r6, #0
 8008f6c:	4637      	mov	r7, r6
 8008f6e:	e7e1      	b.n	8008f34 <_dtoa_r+0x954>
 8008f70:	46bb      	mov	fp, r7
 8008f72:	4637      	mov	r7, r6
 8008f74:	e599      	b.n	8008aaa <_dtoa_r+0x4ca>
 8008f76:	bf00      	nop
 8008f78:	40240000 	.word	0x40240000
 8008f7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	f000 80c8 	beq.w	8009114 <_dtoa_r+0xb34>
 8008f84:	9b04      	ldr	r3, [sp, #16]
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	2d00      	cmp	r5, #0
 8008f8a:	dd05      	ble.n	8008f98 <_dtoa_r+0x9b8>
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	462a      	mov	r2, r5
 8008f90:	4620      	mov	r0, r4
 8008f92:	f000 ffdb 	bl	8009f4c <__lshift>
 8008f96:	4607      	mov	r7, r0
 8008f98:	f1b8 0f00 	cmp.w	r8, #0
 8008f9c:	d05b      	beq.n	8009056 <_dtoa_r+0xa76>
 8008f9e:	6879      	ldr	r1, [r7, #4]
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	f000 fd79 	bl	8009a98 <_Balloc>
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	b928      	cbnz	r0, 8008fb6 <_dtoa_r+0x9d6>
 8008faa:	4b83      	ldr	r3, [pc, #524]	; (80091b8 <_dtoa_r+0xbd8>)
 8008fac:	4602      	mov	r2, r0
 8008fae:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008fb2:	f7ff bb2e 	b.w	8008612 <_dtoa_r+0x32>
 8008fb6:	693a      	ldr	r2, [r7, #16]
 8008fb8:	3202      	adds	r2, #2
 8008fba:	0092      	lsls	r2, r2, #2
 8008fbc:	f107 010c 	add.w	r1, r7, #12
 8008fc0:	300c      	adds	r0, #12
 8008fc2:	f7ff fa64 	bl	800848e <memcpy>
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4629      	mov	r1, r5
 8008fca:	4620      	mov	r0, r4
 8008fcc:	f000 ffbe 	bl	8009f4c <__lshift>
 8008fd0:	9b00      	ldr	r3, [sp, #0]
 8008fd2:	3301      	adds	r3, #1
 8008fd4:	9304      	str	r3, [sp, #16]
 8008fd6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fda:	4413      	add	r3, r2
 8008fdc:	9308      	str	r3, [sp, #32]
 8008fde:	9b02      	ldr	r3, [sp, #8]
 8008fe0:	f003 0301 	and.w	r3, r3, #1
 8008fe4:	46b8      	mov	r8, r7
 8008fe6:	9306      	str	r3, [sp, #24]
 8008fe8:	4607      	mov	r7, r0
 8008fea:	9b04      	ldr	r3, [sp, #16]
 8008fec:	4631      	mov	r1, r6
 8008fee:	3b01      	subs	r3, #1
 8008ff0:	4650      	mov	r0, sl
 8008ff2:	9301      	str	r3, [sp, #4]
 8008ff4:	f7ff fa6a 	bl	80084cc <quorem>
 8008ff8:	4641      	mov	r1, r8
 8008ffa:	9002      	str	r0, [sp, #8]
 8008ffc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009000:	4650      	mov	r0, sl
 8009002:	f001 f80f 	bl	800a024 <__mcmp>
 8009006:	463a      	mov	r2, r7
 8009008:	9005      	str	r0, [sp, #20]
 800900a:	4631      	mov	r1, r6
 800900c:	4620      	mov	r0, r4
 800900e:	f001 f825 	bl	800a05c <__mdiff>
 8009012:	68c2      	ldr	r2, [r0, #12]
 8009014:	4605      	mov	r5, r0
 8009016:	bb02      	cbnz	r2, 800905a <_dtoa_r+0xa7a>
 8009018:	4601      	mov	r1, r0
 800901a:	4650      	mov	r0, sl
 800901c:	f001 f802 	bl	800a024 <__mcmp>
 8009020:	4602      	mov	r2, r0
 8009022:	4629      	mov	r1, r5
 8009024:	4620      	mov	r0, r4
 8009026:	9209      	str	r2, [sp, #36]	; 0x24
 8009028:	f000 fd76 	bl	8009b18 <_Bfree>
 800902c:	9b07      	ldr	r3, [sp, #28]
 800902e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009030:	9d04      	ldr	r5, [sp, #16]
 8009032:	ea43 0102 	orr.w	r1, r3, r2
 8009036:	9b06      	ldr	r3, [sp, #24]
 8009038:	4319      	orrs	r1, r3
 800903a:	d110      	bne.n	800905e <_dtoa_r+0xa7e>
 800903c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009040:	d029      	beq.n	8009096 <_dtoa_r+0xab6>
 8009042:	9b05      	ldr	r3, [sp, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	dd02      	ble.n	800904e <_dtoa_r+0xa6e>
 8009048:	9b02      	ldr	r3, [sp, #8]
 800904a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	f883 9000 	strb.w	r9, [r3]
 8009054:	e774      	b.n	8008f40 <_dtoa_r+0x960>
 8009056:	4638      	mov	r0, r7
 8009058:	e7ba      	b.n	8008fd0 <_dtoa_r+0x9f0>
 800905a:	2201      	movs	r2, #1
 800905c:	e7e1      	b.n	8009022 <_dtoa_r+0xa42>
 800905e:	9b05      	ldr	r3, [sp, #20]
 8009060:	2b00      	cmp	r3, #0
 8009062:	db04      	blt.n	800906e <_dtoa_r+0xa8e>
 8009064:	9907      	ldr	r1, [sp, #28]
 8009066:	430b      	orrs	r3, r1
 8009068:	9906      	ldr	r1, [sp, #24]
 800906a:	430b      	orrs	r3, r1
 800906c:	d120      	bne.n	80090b0 <_dtoa_r+0xad0>
 800906e:	2a00      	cmp	r2, #0
 8009070:	dded      	ble.n	800904e <_dtoa_r+0xa6e>
 8009072:	4651      	mov	r1, sl
 8009074:	2201      	movs	r2, #1
 8009076:	4620      	mov	r0, r4
 8009078:	f000 ff68 	bl	8009f4c <__lshift>
 800907c:	4631      	mov	r1, r6
 800907e:	4682      	mov	sl, r0
 8009080:	f000 ffd0 	bl	800a024 <__mcmp>
 8009084:	2800      	cmp	r0, #0
 8009086:	dc03      	bgt.n	8009090 <_dtoa_r+0xab0>
 8009088:	d1e1      	bne.n	800904e <_dtoa_r+0xa6e>
 800908a:	f019 0f01 	tst.w	r9, #1
 800908e:	d0de      	beq.n	800904e <_dtoa_r+0xa6e>
 8009090:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009094:	d1d8      	bne.n	8009048 <_dtoa_r+0xa68>
 8009096:	9a01      	ldr	r2, [sp, #4]
 8009098:	2339      	movs	r3, #57	; 0x39
 800909a:	7013      	strb	r3, [r2, #0]
 800909c:	462b      	mov	r3, r5
 800909e:	461d      	mov	r5, r3
 80090a0:	3b01      	subs	r3, #1
 80090a2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80090a6:	2a39      	cmp	r2, #57	; 0x39
 80090a8:	d06c      	beq.n	8009184 <_dtoa_r+0xba4>
 80090aa:	3201      	adds	r2, #1
 80090ac:	701a      	strb	r2, [r3, #0]
 80090ae:	e747      	b.n	8008f40 <_dtoa_r+0x960>
 80090b0:	2a00      	cmp	r2, #0
 80090b2:	dd07      	ble.n	80090c4 <_dtoa_r+0xae4>
 80090b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090b8:	d0ed      	beq.n	8009096 <_dtoa_r+0xab6>
 80090ba:	9a01      	ldr	r2, [sp, #4]
 80090bc:	f109 0301 	add.w	r3, r9, #1
 80090c0:	7013      	strb	r3, [r2, #0]
 80090c2:	e73d      	b.n	8008f40 <_dtoa_r+0x960>
 80090c4:	9b04      	ldr	r3, [sp, #16]
 80090c6:	9a08      	ldr	r2, [sp, #32]
 80090c8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d043      	beq.n	8009158 <_dtoa_r+0xb78>
 80090d0:	4651      	mov	r1, sl
 80090d2:	2300      	movs	r3, #0
 80090d4:	220a      	movs	r2, #10
 80090d6:	4620      	mov	r0, r4
 80090d8:	f000 fd40 	bl	8009b5c <__multadd>
 80090dc:	45b8      	cmp	r8, r7
 80090de:	4682      	mov	sl, r0
 80090e0:	f04f 0300 	mov.w	r3, #0
 80090e4:	f04f 020a 	mov.w	r2, #10
 80090e8:	4641      	mov	r1, r8
 80090ea:	4620      	mov	r0, r4
 80090ec:	d107      	bne.n	80090fe <_dtoa_r+0xb1e>
 80090ee:	f000 fd35 	bl	8009b5c <__multadd>
 80090f2:	4680      	mov	r8, r0
 80090f4:	4607      	mov	r7, r0
 80090f6:	9b04      	ldr	r3, [sp, #16]
 80090f8:	3301      	adds	r3, #1
 80090fa:	9304      	str	r3, [sp, #16]
 80090fc:	e775      	b.n	8008fea <_dtoa_r+0xa0a>
 80090fe:	f000 fd2d 	bl	8009b5c <__multadd>
 8009102:	4639      	mov	r1, r7
 8009104:	4680      	mov	r8, r0
 8009106:	2300      	movs	r3, #0
 8009108:	220a      	movs	r2, #10
 800910a:	4620      	mov	r0, r4
 800910c:	f000 fd26 	bl	8009b5c <__multadd>
 8009110:	4607      	mov	r7, r0
 8009112:	e7f0      	b.n	80090f6 <_dtoa_r+0xb16>
 8009114:	9b04      	ldr	r3, [sp, #16]
 8009116:	9301      	str	r3, [sp, #4]
 8009118:	9d00      	ldr	r5, [sp, #0]
 800911a:	4631      	mov	r1, r6
 800911c:	4650      	mov	r0, sl
 800911e:	f7ff f9d5 	bl	80084cc <quorem>
 8009122:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009126:	9b00      	ldr	r3, [sp, #0]
 8009128:	f805 9b01 	strb.w	r9, [r5], #1
 800912c:	1aea      	subs	r2, r5, r3
 800912e:	9b01      	ldr	r3, [sp, #4]
 8009130:	4293      	cmp	r3, r2
 8009132:	dd07      	ble.n	8009144 <_dtoa_r+0xb64>
 8009134:	4651      	mov	r1, sl
 8009136:	2300      	movs	r3, #0
 8009138:	220a      	movs	r2, #10
 800913a:	4620      	mov	r0, r4
 800913c:	f000 fd0e 	bl	8009b5c <__multadd>
 8009140:	4682      	mov	sl, r0
 8009142:	e7ea      	b.n	800911a <_dtoa_r+0xb3a>
 8009144:	9b01      	ldr	r3, [sp, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	bfc8      	it	gt
 800914a:	461d      	movgt	r5, r3
 800914c:	9b00      	ldr	r3, [sp, #0]
 800914e:	bfd8      	it	le
 8009150:	2501      	movle	r5, #1
 8009152:	441d      	add	r5, r3
 8009154:	f04f 0800 	mov.w	r8, #0
 8009158:	4651      	mov	r1, sl
 800915a:	2201      	movs	r2, #1
 800915c:	4620      	mov	r0, r4
 800915e:	f000 fef5 	bl	8009f4c <__lshift>
 8009162:	4631      	mov	r1, r6
 8009164:	4682      	mov	sl, r0
 8009166:	f000 ff5d 	bl	800a024 <__mcmp>
 800916a:	2800      	cmp	r0, #0
 800916c:	dc96      	bgt.n	800909c <_dtoa_r+0xabc>
 800916e:	d102      	bne.n	8009176 <_dtoa_r+0xb96>
 8009170:	f019 0f01 	tst.w	r9, #1
 8009174:	d192      	bne.n	800909c <_dtoa_r+0xabc>
 8009176:	462b      	mov	r3, r5
 8009178:	461d      	mov	r5, r3
 800917a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800917e:	2a30      	cmp	r2, #48	; 0x30
 8009180:	d0fa      	beq.n	8009178 <_dtoa_r+0xb98>
 8009182:	e6dd      	b.n	8008f40 <_dtoa_r+0x960>
 8009184:	9a00      	ldr	r2, [sp, #0]
 8009186:	429a      	cmp	r2, r3
 8009188:	d189      	bne.n	800909e <_dtoa_r+0xabe>
 800918a:	f10b 0b01 	add.w	fp, fp, #1
 800918e:	2331      	movs	r3, #49	; 0x31
 8009190:	e796      	b.n	80090c0 <_dtoa_r+0xae0>
 8009192:	4b0a      	ldr	r3, [pc, #40]	; (80091bc <_dtoa_r+0xbdc>)
 8009194:	f7ff ba99 	b.w	80086ca <_dtoa_r+0xea>
 8009198:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800919a:	2b00      	cmp	r3, #0
 800919c:	f47f aa6d 	bne.w	800867a <_dtoa_r+0x9a>
 80091a0:	4b07      	ldr	r3, [pc, #28]	; (80091c0 <_dtoa_r+0xbe0>)
 80091a2:	f7ff ba92 	b.w	80086ca <_dtoa_r+0xea>
 80091a6:	9b01      	ldr	r3, [sp, #4]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	dcb5      	bgt.n	8009118 <_dtoa_r+0xb38>
 80091ac:	9b07      	ldr	r3, [sp, #28]
 80091ae:	2b02      	cmp	r3, #2
 80091b0:	f73f aeb1 	bgt.w	8008f16 <_dtoa_r+0x936>
 80091b4:	e7b0      	b.n	8009118 <_dtoa_r+0xb38>
 80091b6:	bf00      	nop
 80091b8:	0800c475 	.word	0x0800c475
 80091bc:	0800c3c8 	.word	0x0800c3c8
 80091c0:	0800c3f9 	.word	0x0800c3f9

080091c4 <_free_r>:
 80091c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091c6:	2900      	cmp	r1, #0
 80091c8:	d044      	beq.n	8009254 <_free_r+0x90>
 80091ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091ce:	9001      	str	r0, [sp, #4]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f1a1 0404 	sub.w	r4, r1, #4
 80091d6:	bfb8      	it	lt
 80091d8:	18e4      	addlt	r4, r4, r3
 80091da:	f000 fc51 	bl	8009a80 <__malloc_lock>
 80091de:	4a1e      	ldr	r2, [pc, #120]	; (8009258 <_free_r+0x94>)
 80091e0:	9801      	ldr	r0, [sp, #4]
 80091e2:	6813      	ldr	r3, [r2, #0]
 80091e4:	b933      	cbnz	r3, 80091f4 <_free_r+0x30>
 80091e6:	6063      	str	r3, [r4, #4]
 80091e8:	6014      	str	r4, [r2, #0]
 80091ea:	b003      	add	sp, #12
 80091ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091f0:	f000 bc4c 	b.w	8009a8c <__malloc_unlock>
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d908      	bls.n	800920a <_free_r+0x46>
 80091f8:	6825      	ldr	r5, [r4, #0]
 80091fa:	1961      	adds	r1, r4, r5
 80091fc:	428b      	cmp	r3, r1
 80091fe:	bf01      	itttt	eq
 8009200:	6819      	ldreq	r1, [r3, #0]
 8009202:	685b      	ldreq	r3, [r3, #4]
 8009204:	1949      	addeq	r1, r1, r5
 8009206:	6021      	streq	r1, [r4, #0]
 8009208:	e7ed      	b.n	80091e6 <_free_r+0x22>
 800920a:	461a      	mov	r2, r3
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	b10b      	cbz	r3, 8009214 <_free_r+0x50>
 8009210:	42a3      	cmp	r3, r4
 8009212:	d9fa      	bls.n	800920a <_free_r+0x46>
 8009214:	6811      	ldr	r1, [r2, #0]
 8009216:	1855      	adds	r5, r2, r1
 8009218:	42a5      	cmp	r5, r4
 800921a:	d10b      	bne.n	8009234 <_free_r+0x70>
 800921c:	6824      	ldr	r4, [r4, #0]
 800921e:	4421      	add	r1, r4
 8009220:	1854      	adds	r4, r2, r1
 8009222:	42a3      	cmp	r3, r4
 8009224:	6011      	str	r1, [r2, #0]
 8009226:	d1e0      	bne.n	80091ea <_free_r+0x26>
 8009228:	681c      	ldr	r4, [r3, #0]
 800922a:	685b      	ldr	r3, [r3, #4]
 800922c:	6053      	str	r3, [r2, #4]
 800922e:	440c      	add	r4, r1
 8009230:	6014      	str	r4, [r2, #0]
 8009232:	e7da      	b.n	80091ea <_free_r+0x26>
 8009234:	d902      	bls.n	800923c <_free_r+0x78>
 8009236:	230c      	movs	r3, #12
 8009238:	6003      	str	r3, [r0, #0]
 800923a:	e7d6      	b.n	80091ea <_free_r+0x26>
 800923c:	6825      	ldr	r5, [r4, #0]
 800923e:	1961      	adds	r1, r4, r5
 8009240:	428b      	cmp	r3, r1
 8009242:	bf04      	itt	eq
 8009244:	6819      	ldreq	r1, [r3, #0]
 8009246:	685b      	ldreq	r3, [r3, #4]
 8009248:	6063      	str	r3, [r4, #4]
 800924a:	bf04      	itt	eq
 800924c:	1949      	addeq	r1, r1, r5
 800924e:	6021      	streq	r1, [r4, #0]
 8009250:	6054      	str	r4, [r2, #4]
 8009252:	e7ca      	b.n	80091ea <_free_r+0x26>
 8009254:	b003      	add	sp, #12
 8009256:	bd30      	pop	{r4, r5, pc}
 8009258:	200007f4 	.word	0x200007f4

0800925c <rshift>:
 800925c:	6903      	ldr	r3, [r0, #16]
 800925e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009262:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009266:	ea4f 1261 	mov.w	r2, r1, asr #5
 800926a:	f100 0414 	add.w	r4, r0, #20
 800926e:	dd45      	ble.n	80092fc <rshift+0xa0>
 8009270:	f011 011f 	ands.w	r1, r1, #31
 8009274:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009278:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800927c:	d10c      	bne.n	8009298 <rshift+0x3c>
 800927e:	f100 0710 	add.w	r7, r0, #16
 8009282:	4629      	mov	r1, r5
 8009284:	42b1      	cmp	r1, r6
 8009286:	d334      	bcc.n	80092f2 <rshift+0x96>
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	1eea      	subs	r2, r5, #3
 800928e:	4296      	cmp	r6, r2
 8009290:	bf38      	it	cc
 8009292:	2300      	movcc	r3, #0
 8009294:	4423      	add	r3, r4
 8009296:	e015      	b.n	80092c4 <rshift+0x68>
 8009298:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800929c:	f1c1 0820 	rsb	r8, r1, #32
 80092a0:	40cf      	lsrs	r7, r1
 80092a2:	f105 0e04 	add.w	lr, r5, #4
 80092a6:	46a1      	mov	r9, r4
 80092a8:	4576      	cmp	r6, lr
 80092aa:	46f4      	mov	ip, lr
 80092ac:	d815      	bhi.n	80092da <rshift+0x7e>
 80092ae:	1a9a      	subs	r2, r3, r2
 80092b0:	0092      	lsls	r2, r2, #2
 80092b2:	3a04      	subs	r2, #4
 80092b4:	3501      	adds	r5, #1
 80092b6:	42ae      	cmp	r6, r5
 80092b8:	bf38      	it	cc
 80092ba:	2200      	movcc	r2, #0
 80092bc:	18a3      	adds	r3, r4, r2
 80092be:	50a7      	str	r7, [r4, r2]
 80092c0:	b107      	cbz	r7, 80092c4 <rshift+0x68>
 80092c2:	3304      	adds	r3, #4
 80092c4:	1b1a      	subs	r2, r3, r4
 80092c6:	42a3      	cmp	r3, r4
 80092c8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80092cc:	bf08      	it	eq
 80092ce:	2300      	moveq	r3, #0
 80092d0:	6102      	str	r2, [r0, #16]
 80092d2:	bf08      	it	eq
 80092d4:	6143      	streq	r3, [r0, #20]
 80092d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092da:	f8dc c000 	ldr.w	ip, [ip]
 80092de:	fa0c fc08 	lsl.w	ip, ip, r8
 80092e2:	ea4c 0707 	orr.w	r7, ip, r7
 80092e6:	f849 7b04 	str.w	r7, [r9], #4
 80092ea:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092ee:	40cf      	lsrs	r7, r1
 80092f0:	e7da      	b.n	80092a8 <rshift+0x4c>
 80092f2:	f851 cb04 	ldr.w	ip, [r1], #4
 80092f6:	f847 cf04 	str.w	ip, [r7, #4]!
 80092fa:	e7c3      	b.n	8009284 <rshift+0x28>
 80092fc:	4623      	mov	r3, r4
 80092fe:	e7e1      	b.n	80092c4 <rshift+0x68>

08009300 <__hexdig_fun>:
 8009300:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009304:	2b09      	cmp	r3, #9
 8009306:	d802      	bhi.n	800930e <__hexdig_fun+0xe>
 8009308:	3820      	subs	r0, #32
 800930a:	b2c0      	uxtb	r0, r0
 800930c:	4770      	bx	lr
 800930e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009312:	2b05      	cmp	r3, #5
 8009314:	d801      	bhi.n	800931a <__hexdig_fun+0x1a>
 8009316:	3847      	subs	r0, #71	; 0x47
 8009318:	e7f7      	b.n	800930a <__hexdig_fun+0xa>
 800931a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800931e:	2b05      	cmp	r3, #5
 8009320:	d801      	bhi.n	8009326 <__hexdig_fun+0x26>
 8009322:	3827      	subs	r0, #39	; 0x27
 8009324:	e7f1      	b.n	800930a <__hexdig_fun+0xa>
 8009326:	2000      	movs	r0, #0
 8009328:	4770      	bx	lr
	...

0800932c <__gethex>:
 800932c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009330:	4617      	mov	r7, r2
 8009332:	680a      	ldr	r2, [r1, #0]
 8009334:	b085      	sub	sp, #20
 8009336:	f102 0b02 	add.w	fp, r2, #2
 800933a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800933e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009342:	4681      	mov	r9, r0
 8009344:	468a      	mov	sl, r1
 8009346:	9302      	str	r3, [sp, #8]
 8009348:	32fe      	adds	r2, #254	; 0xfe
 800934a:	eb02 030b 	add.w	r3, r2, fp
 800934e:	46d8      	mov	r8, fp
 8009350:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	2830      	cmp	r0, #48	; 0x30
 8009358:	d0f7      	beq.n	800934a <__gethex+0x1e>
 800935a:	f7ff ffd1 	bl	8009300 <__hexdig_fun>
 800935e:	4604      	mov	r4, r0
 8009360:	2800      	cmp	r0, #0
 8009362:	d138      	bne.n	80093d6 <__gethex+0xaa>
 8009364:	49a7      	ldr	r1, [pc, #668]	; (8009604 <__gethex+0x2d8>)
 8009366:	2201      	movs	r2, #1
 8009368:	4640      	mov	r0, r8
 800936a:	f7fe fff4 	bl	8008356 <strncmp>
 800936e:	4606      	mov	r6, r0
 8009370:	2800      	cmp	r0, #0
 8009372:	d169      	bne.n	8009448 <__gethex+0x11c>
 8009374:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009378:	465d      	mov	r5, fp
 800937a:	f7ff ffc1 	bl	8009300 <__hexdig_fun>
 800937e:	2800      	cmp	r0, #0
 8009380:	d064      	beq.n	800944c <__gethex+0x120>
 8009382:	465a      	mov	r2, fp
 8009384:	7810      	ldrb	r0, [r2, #0]
 8009386:	2830      	cmp	r0, #48	; 0x30
 8009388:	4690      	mov	r8, r2
 800938a:	f102 0201 	add.w	r2, r2, #1
 800938e:	d0f9      	beq.n	8009384 <__gethex+0x58>
 8009390:	f7ff ffb6 	bl	8009300 <__hexdig_fun>
 8009394:	2301      	movs	r3, #1
 8009396:	fab0 f480 	clz	r4, r0
 800939a:	0964      	lsrs	r4, r4, #5
 800939c:	465e      	mov	r6, fp
 800939e:	9301      	str	r3, [sp, #4]
 80093a0:	4642      	mov	r2, r8
 80093a2:	4615      	mov	r5, r2
 80093a4:	3201      	adds	r2, #1
 80093a6:	7828      	ldrb	r0, [r5, #0]
 80093a8:	f7ff ffaa 	bl	8009300 <__hexdig_fun>
 80093ac:	2800      	cmp	r0, #0
 80093ae:	d1f8      	bne.n	80093a2 <__gethex+0x76>
 80093b0:	4994      	ldr	r1, [pc, #592]	; (8009604 <__gethex+0x2d8>)
 80093b2:	2201      	movs	r2, #1
 80093b4:	4628      	mov	r0, r5
 80093b6:	f7fe ffce 	bl	8008356 <strncmp>
 80093ba:	b978      	cbnz	r0, 80093dc <__gethex+0xb0>
 80093bc:	b946      	cbnz	r6, 80093d0 <__gethex+0xa4>
 80093be:	1c6e      	adds	r6, r5, #1
 80093c0:	4632      	mov	r2, r6
 80093c2:	4615      	mov	r5, r2
 80093c4:	3201      	adds	r2, #1
 80093c6:	7828      	ldrb	r0, [r5, #0]
 80093c8:	f7ff ff9a 	bl	8009300 <__hexdig_fun>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	d1f8      	bne.n	80093c2 <__gethex+0x96>
 80093d0:	1b73      	subs	r3, r6, r5
 80093d2:	009e      	lsls	r6, r3, #2
 80093d4:	e004      	b.n	80093e0 <__gethex+0xb4>
 80093d6:	2400      	movs	r4, #0
 80093d8:	4626      	mov	r6, r4
 80093da:	e7e1      	b.n	80093a0 <__gethex+0x74>
 80093dc:	2e00      	cmp	r6, #0
 80093de:	d1f7      	bne.n	80093d0 <__gethex+0xa4>
 80093e0:	782b      	ldrb	r3, [r5, #0]
 80093e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093e6:	2b50      	cmp	r3, #80	; 0x50
 80093e8:	d13d      	bne.n	8009466 <__gethex+0x13a>
 80093ea:	786b      	ldrb	r3, [r5, #1]
 80093ec:	2b2b      	cmp	r3, #43	; 0x2b
 80093ee:	d02f      	beq.n	8009450 <__gethex+0x124>
 80093f0:	2b2d      	cmp	r3, #45	; 0x2d
 80093f2:	d031      	beq.n	8009458 <__gethex+0x12c>
 80093f4:	1c69      	adds	r1, r5, #1
 80093f6:	f04f 0b00 	mov.w	fp, #0
 80093fa:	7808      	ldrb	r0, [r1, #0]
 80093fc:	f7ff ff80 	bl	8009300 <__hexdig_fun>
 8009400:	1e42      	subs	r2, r0, #1
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	2a18      	cmp	r2, #24
 8009406:	d82e      	bhi.n	8009466 <__gethex+0x13a>
 8009408:	f1a0 0210 	sub.w	r2, r0, #16
 800940c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009410:	f7ff ff76 	bl	8009300 <__hexdig_fun>
 8009414:	f100 3cff 	add.w	ip, r0, #4294967295
 8009418:	fa5f fc8c 	uxtb.w	ip, ip
 800941c:	f1bc 0f18 	cmp.w	ip, #24
 8009420:	d91d      	bls.n	800945e <__gethex+0x132>
 8009422:	f1bb 0f00 	cmp.w	fp, #0
 8009426:	d000      	beq.n	800942a <__gethex+0xfe>
 8009428:	4252      	negs	r2, r2
 800942a:	4416      	add	r6, r2
 800942c:	f8ca 1000 	str.w	r1, [sl]
 8009430:	b1dc      	cbz	r4, 800946a <__gethex+0x13e>
 8009432:	9b01      	ldr	r3, [sp, #4]
 8009434:	2b00      	cmp	r3, #0
 8009436:	bf14      	ite	ne
 8009438:	f04f 0800 	movne.w	r8, #0
 800943c:	f04f 0806 	moveq.w	r8, #6
 8009440:	4640      	mov	r0, r8
 8009442:	b005      	add	sp, #20
 8009444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009448:	4645      	mov	r5, r8
 800944a:	4626      	mov	r6, r4
 800944c:	2401      	movs	r4, #1
 800944e:	e7c7      	b.n	80093e0 <__gethex+0xb4>
 8009450:	f04f 0b00 	mov.w	fp, #0
 8009454:	1ca9      	adds	r1, r5, #2
 8009456:	e7d0      	b.n	80093fa <__gethex+0xce>
 8009458:	f04f 0b01 	mov.w	fp, #1
 800945c:	e7fa      	b.n	8009454 <__gethex+0x128>
 800945e:	230a      	movs	r3, #10
 8009460:	fb03 0002 	mla	r0, r3, r2, r0
 8009464:	e7d0      	b.n	8009408 <__gethex+0xdc>
 8009466:	4629      	mov	r1, r5
 8009468:	e7e0      	b.n	800942c <__gethex+0x100>
 800946a:	eba5 0308 	sub.w	r3, r5, r8
 800946e:	3b01      	subs	r3, #1
 8009470:	4621      	mov	r1, r4
 8009472:	2b07      	cmp	r3, #7
 8009474:	dc0a      	bgt.n	800948c <__gethex+0x160>
 8009476:	4648      	mov	r0, r9
 8009478:	f000 fb0e 	bl	8009a98 <_Balloc>
 800947c:	4604      	mov	r4, r0
 800947e:	b940      	cbnz	r0, 8009492 <__gethex+0x166>
 8009480:	4b61      	ldr	r3, [pc, #388]	; (8009608 <__gethex+0x2dc>)
 8009482:	4602      	mov	r2, r0
 8009484:	21e4      	movs	r1, #228	; 0xe4
 8009486:	4861      	ldr	r0, [pc, #388]	; (800960c <__gethex+0x2e0>)
 8009488:	f001 fc50 	bl	800ad2c <__assert_func>
 800948c:	3101      	adds	r1, #1
 800948e:	105b      	asrs	r3, r3, #1
 8009490:	e7ef      	b.n	8009472 <__gethex+0x146>
 8009492:	f100 0a14 	add.w	sl, r0, #20
 8009496:	2300      	movs	r3, #0
 8009498:	495a      	ldr	r1, [pc, #360]	; (8009604 <__gethex+0x2d8>)
 800949a:	f8cd a004 	str.w	sl, [sp, #4]
 800949e:	469b      	mov	fp, r3
 80094a0:	45a8      	cmp	r8, r5
 80094a2:	d342      	bcc.n	800952a <__gethex+0x1fe>
 80094a4:	9801      	ldr	r0, [sp, #4]
 80094a6:	f840 bb04 	str.w	fp, [r0], #4
 80094aa:	eba0 000a 	sub.w	r0, r0, sl
 80094ae:	1080      	asrs	r0, r0, #2
 80094b0:	6120      	str	r0, [r4, #16]
 80094b2:	ea4f 1840 	mov.w	r8, r0, lsl #5
 80094b6:	4658      	mov	r0, fp
 80094b8:	f000 fbe0 	bl	8009c7c <__hi0bits>
 80094bc:	683d      	ldr	r5, [r7, #0]
 80094be:	eba8 0000 	sub.w	r0, r8, r0
 80094c2:	42a8      	cmp	r0, r5
 80094c4:	dd59      	ble.n	800957a <__gethex+0x24e>
 80094c6:	eba0 0805 	sub.w	r8, r0, r5
 80094ca:	4641      	mov	r1, r8
 80094cc:	4620      	mov	r0, r4
 80094ce:	f000 ff6f 	bl	800a3b0 <__any_on>
 80094d2:	4683      	mov	fp, r0
 80094d4:	b1b8      	cbz	r0, 8009506 <__gethex+0x1da>
 80094d6:	f108 33ff 	add.w	r3, r8, #4294967295
 80094da:	1159      	asrs	r1, r3, #5
 80094dc:	f003 021f 	and.w	r2, r3, #31
 80094e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80094e4:	f04f 0b01 	mov.w	fp, #1
 80094e8:	fa0b f202 	lsl.w	r2, fp, r2
 80094ec:	420a      	tst	r2, r1
 80094ee:	d00a      	beq.n	8009506 <__gethex+0x1da>
 80094f0:	455b      	cmp	r3, fp
 80094f2:	dd06      	ble.n	8009502 <__gethex+0x1d6>
 80094f4:	f1a8 0102 	sub.w	r1, r8, #2
 80094f8:	4620      	mov	r0, r4
 80094fa:	f000 ff59 	bl	800a3b0 <__any_on>
 80094fe:	2800      	cmp	r0, #0
 8009500:	d138      	bne.n	8009574 <__gethex+0x248>
 8009502:	f04f 0b02 	mov.w	fp, #2
 8009506:	4641      	mov	r1, r8
 8009508:	4620      	mov	r0, r4
 800950a:	f7ff fea7 	bl	800925c <rshift>
 800950e:	4446      	add	r6, r8
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	42b3      	cmp	r3, r6
 8009514:	da41      	bge.n	800959a <__gethex+0x26e>
 8009516:	4621      	mov	r1, r4
 8009518:	4648      	mov	r0, r9
 800951a:	f000 fafd 	bl	8009b18 <_Bfree>
 800951e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009520:	2300      	movs	r3, #0
 8009522:	6013      	str	r3, [r2, #0]
 8009524:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009528:	e78a      	b.n	8009440 <__gethex+0x114>
 800952a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800952e:	2a2e      	cmp	r2, #46	; 0x2e
 8009530:	d014      	beq.n	800955c <__gethex+0x230>
 8009532:	2b20      	cmp	r3, #32
 8009534:	d106      	bne.n	8009544 <__gethex+0x218>
 8009536:	9b01      	ldr	r3, [sp, #4]
 8009538:	f843 bb04 	str.w	fp, [r3], #4
 800953c:	f04f 0b00 	mov.w	fp, #0
 8009540:	9301      	str	r3, [sp, #4]
 8009542:	465b      	mov	r3, fp
 8009544:	7828      	ldrb	r0, [r5, #0]
 8009546:	9303      	str	r3, [sp, #12]
 8009548:	f7ff feda 	bl	8009300 <__hexdig_fun>
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	f000 000f 	and.w	r0, r0, #15
 8009552:	4098      	lsls	r0, r3
 8009554:	ea4b 0b00 	orr.w	fp, fp, r0
 8009558:	3304      	adds	r3, #4
 800955a:	e7a1      	b.n	80094a0 <__gethex+0x174>
 800955c:	45a8      	cmp	r8, r5
 800955e:	d8e8      	bhi.n	8009532 <__gethex+0x206>
 8009560:	2201      	movs	r2, #1
 8009562:	4628      	mov	r0, r5
 8009564:	9303      	str	r3, [sp, #12]
 8009566:	f7fe fef6 	bl	8008356 <strncmp>
 800956a:	4926      	ldr	r1, [pc, #152]	; (8009604 <__gethex+0x2d8>)
 800956c:	9b03      	ldr	r3, [sp, #12]
 800956e:	2800      	cmp	r0, #0
 8009570:	d1df      	bne.n	8009532 <__gethex+0x206>
 8009572:	e795      	b.n	80094a0 <__gethex+0x174>
 8009574:	f04f 0b03 	mov.w	fp, #3
 8009578:	e7c5      	b.n	8009506 <__gethex+0x1da>
 800957a:	da0b      	bge.n	8009594 <__gethex+0x268>
 800957c:	eba5 0800 	sub.w	r8, r5, r0
 8009580:	4621      	mov	r1, r4
 8009582:	4642      	mov	r2, r8
 8009584:	4648      	mov	r0, r9
 8009586:	f000 fce1 	bl	8009f4c <__lshift>
 800958a:	eba6 0608 	sub.w	r6, r6, r8
 800958e:	4604      	mov	r4, r0
 8009590:	f100 0a14 	add.w	sl, r0, #20
 8009594:	f04f 0b00 	mov.w	fp, #0
 8009598:	e7ba      	b.n	8009510 <__gethex+0x1e4>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	42b3      	cmp	r3, r6
 800959e:	dd73      	ble.n	8009688 <__gethex+0x35c>
 80095a0:	1b9e      	subs	r6, r3, r6
 80095a2:	42b5      	cmp	r5, r6
 80095a4:	dc34      	bgt.n	8009610 <__gethex+0x2e4>
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	2b02      	cmp	r3, #2
 80095aa:	d023      	beq.n	80095f4 <__gethex+0x2c8>
 80095ac:	2b03      	cmp	r3, #3
 80095ae:	d025      	beq.n	80095fc <__gethex+0x2d0>
 80095b0:	2b01      	cmp	r3, #1
 80095b2:	d115      	bne.n	80095e0 <__gethex+0x2b4>
 80095b4:	42b5      	cmp	r5, r6
 80095b6:	d113      	bne.n	80095e0 <__gethex+0x2b4>
 80095b8:	2d01      	cmp	r5, #1
 80095ba:	d10b      	bne.n	80095d4 <__gethex+0x2a8>
 80095bc:	9a02      	ldr	r2, [sp, #8]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6013      	str	r3, [r2, #0]
 80095c2:	2301      	movs	r3, #1
 80095c4:	6123      	str	r3, [r4, #16]
 80095c6:	f8ca 3000 	str.w	r3, [sl]
 80095ca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095cc:	f04f 0862 	mov.w	r8, #98	; 0x62
 80095d0:	601c      	str	r4, [r3, #0]
 80095d2:	e735      	b.n	8009440 <__gethex+0x114>
 80095d4:	1e69      	subs	r1, r5, #1
 80095d6:	4620      	mov	r0, r4
 80095d8:	f000 feea 	bl	800a3b0 <__any_on>
 80095dc:	2800      	cmp	r0, #0
 80095de:	d1ed      	bne.n	80095bc <__gethex+0x290>
 80095e0:	4621      	mov	r1, r4
 80095e2:	4648      	mov	r0, r9
 80095e4:	f000 fa98 	bl	8009b18 <_Bfree>
 80095e8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095ea:	2300      	movs	r3, #0
 80095ec:	6013      	str	r3, [r2, #0]
 80095ee:	f04f 0850 	mov.w	r8, #80	; 0x50
 80095f2:	e725      	b.n	8009440 <__gethex+0x114>
 80095f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d1f2      	bne.n	80095e0 <__gethex+0x2b4>
 80095fa:	e7df      	b.n	80095bc <__gethex+0x290>
 80095fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d1dc      	bne.n	80095bc <__gethex+0x290>
 8009602:	e7ed      	b.n	80095e0 <__gethex+0x2b4>
 8009604:	0800c364 	.word	0x0800c364
 8009608:	0800c475 	.word	0x0800c475
 800960c:	0800c486 	.word	0x0800c486
 8009610:	f106 38ff 	add.w	r8, r6, #4294967295
 8009614:	f1bb 0f00 	cmp.w	fp, #0
 8009618:	d133      	bne.n	8009682 <__gethex+0x356>
 800961a:	f1b8 0f00 	cmp.w	r8, #0
 800961e:	d004      	beq.n	800962a <__gethex+0x2fe>
 8009620:	4641      	mov	r1, r8
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fec4 	bl	800a3b0 <__any_on>
 8009628:	4683      	mov	fp, r0
 800962a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800962e:	2301      	movs	r3, #1
 8009630:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009634:	f008 081f 	and.w	r8, r8, #31
 8009638:	fa03 f308 	lsl.w	r3, r3, r8
 800963c:	4213      	tst	r3, r2
 800963e:	4631      	mov	r1, r6
 8009640:	4620      	mov	r0, r4
 8009642:	bf18      	it	ne
 8009644:	f04b 0b02 	orrne.w	fp, fp, #2
 8009648:	1bad      	subs	r5, r5, r6
 800964a:	f7ff fe07 	bl	800925c <rshift>
 800964e:	687e      	ldr	r6, [r7, #4]
 8009650:	f04f 0802 	mov.w	r8, #2
 8009654:	f1bb 0f00 	cmp.w	fp, #0
 8009658:	d04a      	beq.n	80096f0 <__gethex+0x3c4>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2b02      	cmp	r3, #2
 800965e:	d016      	beq.n	800968e <__gethex+0x362>
 8009660:	2b03      	cmp	r3, #3
 8009662:	d018      	beq.n	8009696 <__gethex+0x36a>
 8009664:	2b01      	cmp	r3, #1
 8009666:	d109      	bne.n	800967c <__gethex+0x350>
 8009668:	f01b 0f02 	tst.w	fp, #2
 800966c:	d006      	beq.n	800967c <__gethex+0x350>
 800966e:	f8da 3000 	ldr.w	r3, [sl]
 8009672:	ea4b 0b03 	orr.w	fp, fp, r3
 8009676:	f01b 0f01 	tst.w	fp, #1
 800967a:	d10f      	bne.n	800969c <__gethex+0x370>
 800967c:	f048 0810 	orr.w	r8, r8, #16
 8009680:	e036      	b.n	80096f0 <__gethex+0x3c4>
 8009682:	f04f 0b01 	mov.w	fp, #1
 8009686:	e7d0      	b.n	800962a <__gethex+0x2fe>
 8009688:	f04f 0801 	mov.w	r8, #1
 800968c:	e7e2      	b.n	8009654 <__gethex+0x328>
 800968e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009690:	f1c3 0301 	rsb	r3, r3, #1
 8009694:	930f      	str	r3, [sp, #60]	; 0x3c
 8009696:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009698:	2b00      	cmp	r3, #0
 800969a:	d0ef      	beq.n	800967c <__gethex+0x350>
 800969c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80096a0:	f104 0214 	add.w	r2, r4, #20
 80096a4:	ea4f 038b 	mov.w	r3, fp, lsl #2
 80096a8:	9301      	str	r3, [sp, #4]
 80096aa:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 80096ae:	2300      	movs	r3, #0
 80096b0:	4694      	mov	ip, r2
 80096b2:	f852 1b04 	ldr.w	r1, [r2], #4
 80096b6:	f1b1 3fff 	cmp.w	r1, #4294967295
 80096ba:	d01e      	beq.n	80096fa <__gethex+0x3ce>
 80096bc:	3101      	adds	r1, #1
 80096be:	f8cc 1000 	str.w	r1, [ip]
 80096c2:	f1b8 0f02 	cmp.w	r8, #2
 80096c6:	f104 0214 	add.w	r2, r4, #20
 80096ca:	d13d      	bne.n	8009748 <__gethex+0x41c>
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	3b01      	subs	r3, #1
 80096d0:	42ab      	cmp	r3, r5
 80096d2:	d10b      	bne.n	80096ec <__gethex+0x3c0>
 80096d4:	1169      	asrs	r1, r5, #5
 80096d6:	2301      	movs	r3, #1
 80096d8:	f005 051f 	and.w	r5, r5, #31
 80096dc:	fa03 f505 	lsl.w	r5, r3, r5
 80096e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096e4:	421d      	tst	r5, r3
 80096e6:	bf18      	it	ne
 80096e8:	f04f 0801 	movne.w	r8, #1
 80096ec:	f048 0820 	orr.w	r8, r8, #32
 80096f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096f2:	601c      	str	r4, [r3, #0]
 80096f4:	9b02      	ldr	r3, [sp, #8]
 80096f6:	601e      	str	r6, [r3, #0]
 80096f8:	e6a2      	b.n	8009440 <__gethex+0x114>
 80096fa:	4290      	cmp	r0, r2
 80096fc:	f842 3c04 	str.w	r3, [r2, #-4]
 8009700:	d8d6      	bhi.n	80096b0 <__gethex+0x384>
 8009702:	68a2      	ldr	r2, [r4, #8]
 8009704:	4593      	cmp	fp, r2
 8009706:	db17      	blt.n	8009738 <__gethex+0x40c>
 8009708:	6861      	ldr	r1, [r4, #4]
 800970a:	4648      	mov	r0, r9
 800970c:	3101      	adds	r1, #1
 800970e:	f000 f9c3 	bl	8009a98 <_Balloc>
 8009712:	4682      	mov	sl, r0
 8009714:	b918      	cbnz	r0, 800971e <__gethex+0x3f2>
 8009716:	4b1b      	ldr	r3, [pc, #108]	; (8009784 <__gethex+0x458>)
 8009718:	4602      	mov	r2, r0
 800971a:	2184      	movs	r1, #132	; 0x84
 800971c:	e6b3      	b.n	8009486 <__gethex+0x15a>
 800971e:	6922      	ldr	r2, [r4, #16]
 8009720:	3202      	adds	r2, #2
 8009722:	f104 010c 	add.w	r1, r4, #12
 8009726:	0092      	lsls	r2, r2, #2
 8009728:	300c      	adds	r0, #12
 800972a:	f7fe feb0 	bl	800848e <memcpy>
 800972e:	4621      	mov	r1, r4
 8009730:	4648      	mov	r0, r9
 8009732:	f000 f9f1 	bl	8009b18 <_Bfree>
 8009736:	4654      	mov	r4, sl
 8009738:	6922      	ldr	r2, [r4, #16]
 800973a:	1c51      	adds	r1, r2, #1
 800973c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009740:	6121      	str	r1, [r4, #16]
 8009742:	2101      	movs	r1, #1
 8009744:	6151      	str	r1, [r2, #20]
 8009746:	e7bc      	b.n	80096c2 <__gethex+0x396>
 8009748:	6921      	ldr	r1, [r4, #16]
 800974a:	4559      	cmp	r1, fp
 800974c:	dd0b      	ble.n	8009766 <__gethex+0x43a>
 800974e:	2101      	movs	r1, #1
 8009750:	4620      	mov	r0, r4
 8009752:	f7ff fd83 	bl	800925c <rshift>
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	3601      	adds	r6, #1
 800975a:	42b3      	cmp	r3, r6
 800975c:	f6ff aedb 	blt.w	8009516 <__gethex+0x1ea>
 8009760:	f04f 0801 	mov.w	r8, #1
 8009764:	e7c2      	b.n	80096ec <__gethex+0x3c0>
 8009766:	f015 051f 	ands.w	r5, r5, #31
 800976a:	d0f9      	beq.n	8009760 <__gethex+0x434>
 800976c:	9b01      	ldr	r3, [sp, #4]
 800976e:	441a      	add	r2, r3
 8009770:	f1c5 0520 	rsb	r5, r5, #32
 8009774:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009778:	f000 fa80 	bl	8009c7c <__hi0bits>
 800977c:	42a8      	cmp	r0, r5
 800977e:	dbe6      	blt.n	800974e <__gethex+0x422>
 8009780:	e7ee      	b.n	8009760 <__gethex+0x434>
 8009782:	bf00      	nop
 8009784:	0800c475 	.word	0x0800c475

08009788 <L_shift>:
 8009788:	f1c2 0208 	rsb	r2, r2, #8
 800978c:	0092      	lsls	r2, r2, #2
 800978e:	b570      	push	{r4, r5, r6, lr}
 8009790:	f1c2 0620 	rsb	r6, r2, #32
 8009794:	6843      	ldr	r3, [r0, #4]
 8009796:	6804      	ldr	r4, [r0, #0]
 8009798:	fa03 f506 	lsl.w	r5, r3, r6
 800979c:	432c      	orrs	r4, r5
 800979e:	40d3      	lsrs	r3, r2
 80097a0:	6004      	str	r4, [r0, #0]
 80097a2:	f840 3f04 	str.w	r3, [r0, #4]!
 80097a6:	4288      	cmp	r0, r1
 80097a8:	d3f4      	bcc.n	8009794 <L_shift+0xc>
 80097aa:	bd70      	pop	{r4, r5, r6, pc}

080097ac <__match>:
 80097ac:	b530      	push	{r4, r5, lr}
 80097ae:	6803      	ldr	r3, [r0, #0]
 80097b0:	3301      	adds	r3, #1
 80097b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097b6:	b914      	cbnz	r4, 80097be <__match+0x12>
 80097b8:	6003      	str	r3, [r0, #0]
 80097ba:	2001      	movs	r0, #1
 80097bc:	bd30      	pop	{r4, r5, pc}
 80097be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097c2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80097c6:	2d19      	cmp	r5, #25
 80097c8:	bf98      	it	ls
 80097ca:	3220      	addls	r2, #32
 80097cc:	42a2      	cmp	r2, r4
 80097ce:	d0f0      	beq.n	80097b2 <__match+0x6>
 80097d0:	2000      	movs	r0, #0
 80097d2:	e7f3      	b.n	80097bc <__match+0x10>

080097d4 <__hexnan>:
 80097d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097d8:	680b      	ldr	r3, [r1, #0]
 80097da:	6801      	ldr	r1, [r0, #0]
 80097dc:	115e      	asrs	r6, r3, #5
 80097de:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097e2:	f013 031f 	ands.w	r3, r3, #31
 80097e6:	b087      	sub	sp, #28
 80097e8:	bf18      	it	ne
 80097ea:	3604      	addne	r6, #4
 80097ec:	2500      	movs	r5, #0
 80097ee:	1f37      	subs	r7, r6, #4
 80097f0:	4682      	mov	sl, r0
 80097f2:	4690      	mov	r8, r2
 80097f4:	9301      	str	r3, [sp, #4]
 80097f6:	f846 5c04 	str.w	r5, [r6, #-4]
 80097fa:	46b9      	mov	r9, r7
 80097fc:	463c      	mov	r4, r7
 80097fe:	9502      	str	r5, [sp, #8]
 8009800:	46ab      	mov	fp, r5
 8009802:	784a      	ldrb	r2, [r1, #1]
 8009804:	1c4b      	adds	r3, r1, #1
 8009806:	9303      	str	r3, [sp, #12]
 8009808:	b342      	cbz	r2, 800985c <__hexnan+0x88>
 800980a:	4610      	mov	r0, r2
 800980c:	9105      	str	r1, [sp, #20]
 800980e:	9204      	str	r2, [sp, #16]
 8009810:	f7ff fd76 	bl	8009300 <__hexdig_fun>
 8009814:	2800      	cmp	r0, #0
 8009816:	d14f      	bne.n	80098b8 <__hexnan+0xe4>
 8009818:	9a04      	ldr	r2, [sp, #16]
 800981a:	9905      	ldr	r1, [sp, #20]
 800981c:	2a20      	cmp	r2, #32
 800981e:	d818      	bhi.n	8009852 <__hexnan+0x7e>
 8009820:	9b02      	ldr	r3, [sp, #8]
 8009822:	459b      	cmp	fp, r3
 8009824:	dd13      	ble.n	800984e <__hexnan+0x7a>
 8009826:	454c      	cmp	r4, r9
 8009828:	d206      	bcs.n	8009838 <__hexnan+0x64>
 800982a:	2d07      	cmp	r5, #7
 800982c:	dc04      	bgt.n	8009838 <__hexnan+0x64>
 800982e:	462a      	mov	r2, r5
 8009830:	4649      	mov	r1, r9
 8009832:	4620      	mov	r0, r4
 8009834:	f7ff ffa8 	bl	8009788 <L_shift>
 8009838:	4544      	cmp	r4, r8
 800983a:	d950      	bls.n	80098de <__hexnan+0x10a>
 800983c:	2300      	movs	r3, #0
 800983e:	f1a4 0904 	sub.w	r9, r4, #4
 8009842:	f844 3c04 	str.w	r3, [r4, #-4]
 8009846:	f8cd b008 	str.w	fp, [sp, #8]
 800984a:	464c      	mov	r4, r9
 800984c:	461d      	mov	r5, r3
 800984e:	9903      	ldr	r1, [sp, #12]
 8009850:	e7d7      	b.n	8009802 <__hexnan+0x2e>
 8009852:	2a29      	cmp	r2, #41	; 0x29
 8009854:	d155      	bne.n	8009902 <__hexnan+0x12e>
 8009856:	3102      	adds	r1, #2
 8009858:	f8ca 1000 	str.w	r1, [sl]
 800985c:	f1bb 0f00 	cmp.w	fp, #0
 8009860:	d04f      	beq.n	8009902 <__hexnan+0x12e>
 8009862:	454c      	cmp	r4, r9
 8009864:	d206      	bcs.n	8009874 <__hexnan+0xa0>
 8009866:	2d07      	cmp	r5, #7
 8009868:	dc04      	bgt.n	8009874 <__hexnan+0xa0>
 800986a:	462a      	mov	r2, r5
 800986c:	4649      	mov	r1, r9
 800986e:	4620      	mov	r0, r4
 8009870:	f7ff ff8a 	bl	8009788 <L_shift>
 8009874:	4544      	cmp	r4, r8
 8009876:	d934      	bls.n	80098e2 <__hexnan+0x10e>
 8009878:	f1a8 0204 	sub.w	r2, r8, #4
 800987c:	4623      	mov	r3, r4
 800987e:	f853 1b04 	ldr.w	r1, [r3], #4
 8009882:	f842 1f04 	str.w	r1, [r2, #4]!
 8009886:	429f      	cmp	r7, r3
 8009888:	d2f9      	bcs.n	800987e <__hexnan+0xaa>
 800988a:	1b3b      	subs	r3, r7, r4
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	3304      	adds	r3, #4
 8009892:	3e03      	subs	r6, #3
 8009894:	3401      	adds	r4, #1
 8009896:	42a6      	cmp	r6, r4
 8009898:	bf38      	it	cc
 800989a:	2304      	movcc	r3, #4
 800989c:	4443      	add	r3, r8
 800989e:	2200      	movs	r2, #0
 80098a0:	f843 2b04 	str.w	r2, [r3], #4
 80098a4:	429f      	cmp	r7, r3
 80098a6:	d2fb      	bcs.n	80098a0 <__hexnan+0xcc>
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	b91b      	cbnz	r3, 80098b4 <__hexnan+0xe0>
 80098ac:	4547      	cmp	r7, r8
 80098ae:	d126      	bne.n	80098fe <__hexnan+0x12a>
 80098b0:	2301      	movs	r3, #1
 80098b2:	603b      	str	r3, [r7, #0]
 80098b4:	2005      	movs	r0, #5
 80098b6:	e025      	b.n	8009904 <__hexnan+0x130>
 80098b8:	3501      	adds	r5, #1
 80098ba:	2d08      	cmp	r5, #8
 80098bc:	f10b 0b01 	add.w	fp, fp, #1
 80098c0:	dd06      	ble.n	80098d0 <__hexnan+0xfc>
 80098c2:	4544      	cmp	r4, r8
 80098c4:	d9c3      	bls.n	800984e <__hexnan+0x7a>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f844 3c04 	str.w	r3, [r4, #-4]
 80098cc:	2501      	movs	r5, #1
 80098ce:	3c04      	subs	r4, #4
 80098d0:	6822      	ldr	r2, [r4, #0]
 80098d2:	f000 000f 	and.w	r0, r0, #15
 80098d6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80098da:	6020      	str	r0, [r4, #0]
 80098dc:	e7b7      	b.n	800984e <__hexnan+0x7a>
 80098de:	2508      	movs	r5, #8
 80098e0:	e7b5      	b.n	800984e <__hexnan+0x7a>
 80098e2:	9b01      	ldr	r3, [sp, #4]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d0df      	beq.n	80098a8 <__hexnan+0xd4>
 80098e8:	f1c3 0320 	rsb	r3, r3, #32
 80098ec:	f04f 32ff 	mov.w	r2, #4294967295
 80098f0:	40da      	lsrs	r2, r3
 80098f2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098f6:	4013      	ands	r3, r2
 80098f8:	f846 3c04 	str.w	r3, [r6, #-4]
 80098fc:	e7d4      	b.n	80098a8 <__hexnan+0xd4>
 80098fe:	3f04      	subs	r7, #4
 8009900:	e7d2      	b.n	80098a8 <__hexnan+0xd4>
 8009902:	2004      	movs	r0, #4
 8009904:	b007      	add	sp, #28
 8009906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800990c <malloc>:
 800990c:	4b02      	ldr	r3, [pc, #8]	; (8009918 <malloc+0xc>)
 800990e:	4601      	mov	r1, r0
 8009910:	6818      	ldr	r0, [r3, #0]
 8009912:	f000 b823 	b.w	800995c <_malloc_r>
 8009916:	bf00      	nop
 8009918:	20000208 	.word	0x20000208

0800991c <sbrk_aligned>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	4e0e      	ldr	r6, [pc, #56]	; (8009958 <sbrk_aligned+0x3c>)
 8009920:	460c      	mov	r4, r1
 8009922:	6831      	ldr	r1, [r6, #0]
 8009924:	4605      	mov	r5, r0
 8009926:	b911      	cbnz	r1, 800992e <sbrk_aligned+0x12>
 8009928:	f001 f9f0 	bl	800ad0c <_sbrk_r>
 800992c:	6030      	str	r0, [r6, #0]
 800992e:	4621      	mov	r1, r4
 8009930:	4628      	mov	r0, r5
 8009932:	f001 f9eb 	bl	800ad0c <_sbrk_r>
 8009936:	1c43      	adds	r3, r0, #1
 8009938:	d00a      	beq.n	8009950 <sbrk_aligned+0x34>
 800993a:	1cc4      	adds	r4, r0, #3
 800993c:	f024 0403 	bic.w	r4, r4, #3
 8009940:	42a0      	cmp	r0, r4
 8009942:	d007      	beq.n	8009954 <sbrk_aligned+0x38>
 8009944:	1a21      	subs	r1, r4, r0
 8009946:	4628      	mov	r0, r5
 8009948:	f001 f9e0 	bl	800ad0c <_sbrk_r>
 800994c:	3001      	adds	r0, #1
 800994e:	d101      	bne.n	8009954 <sbrk_aligned+0x38>
 8009950:	f04f 34ff 	mov.w	r4, #4294967295
 8009954:	4620      	mov	r0, r4
 8009956:	bd70      	pop	{r4, r5, r6, pc}
 8009958:	200007f8 	.word	0x200007f8

0800995c <_malloc_r>:
 800995c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009960:	1ccd      	adds	r5, r1, #3
 8009962:	f025 0503 	bic.w	r5, r5, #3
 8009966:	3508      	adds	r5, #8
 8009968:	2d0c      	cmp	r5, #12
 800996a:	bf38      	it	cc
 800996c:	250c      	movcc	r5, #12
 800996e:	2d00      	cmp	r5, #0
 8009970:	4607      	mov	r7, r0
 8009972:	db01      	blt.n	8009978 <_malloc_r+0x1c>
 8009974:	42a9      	cmp	r1, r5
 8009976:	d905      	bls.n	8009984 <_malloc_r+0x28>
 8009978:	230c      	movs	r3, #12
 800997a:	603b      	str	r3, [r7, #0]
 800997c:	2600      	movs	r6, #0
 800997e:	4630      	mov	r0, r6
 8009980:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009984:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a58 <_malloc_r+0xfc>
 8009988:	f000 f87a 	bl	8009a80 <__malloc_lock>
 800998c:	f8d8 3000 	ldr.w	r3, [r8]
 8009990:	461c      	mov	r4, r3
 8009992:	bb5c      	cbnz	r4, 80099ec <_malloc_r+0x90>
 8009994:	4629      	mov	r1, r5
 8009996:	4638      	mov	r0, r7
 8009998:	f7ff ffc0 	bl	800991c <sbrk_aligned>
 800999c:	1c43      	adds	r3, r0, #1
 800999e:	4604      	mov	r4, r0
 80099a0:	d155      	bne.n	8009a4e <_malloc_r+0xf2>
 80099a2:	f8d8 4000 	ldr.w	r4, [r8]
 80099a6:	4626      	mov	r6, r4
 80099a8:	2e00      	cmp	r6, #0
 80099aa:	d145      	bne.n	8009a38 <_malloc_r+0xdc>
 80099ac:	2c00      	cmp	r4, #0
 80099ae:	d048      	beq.n	8009a42 <_malloc_r+0xe6>
 80099b0:	6823      	ldr	r3, [r4, #0]
 80099b2:	4631      	mov	r1, r6
 80099b4:	4638      	mov	r0, r7
 80099b6:	eb04 0903 	add.w	r9, r4, r3
 80099ba:	f001 f9a7 	bl	800ad0c <_sbrk_r>
 80099be:	4581      	cmp	r9, r0
 80099c0:	d13f      	bne.n	8009a42 <_malloc_r+0xe6>
 80099c2:	6821      	ldr	r1, [r4, #0]
 80099c4:	1a6d      	subs	r5, r5, r1
 80099c6:	4629      	mov	r1, r5
 80099c8:	4638      	mov	r0, r7
 80099ca:	f7ff ffa7 	bl	800991c <sbrk_aligned>
 80099ce:	3001      	adds	r0, #1
 80099d0:	d037      	beq.n	8009a42 <_malloc_r+0xe6>
 80099d2:	6823      	ldr	r3, [r4, #0]
 80099d4:	442b      	add	r3, r5
 80099d6:	6023      	str	r3, [r4, #0]
 80099d8:	f8d8 3000 	ldr.w	r3, [r8]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d038      	beq.n	8009a52 <_malloc_r+0xf6>
 80099e0:	685a      	ldr	r2, [r3, #4]
 80099e2:	42a2      	cmp	r2, r4
 80099e4:	d12b      	bne.n	8009a3e <_malloc_r+0xe2>
 80099e6:	2200      	movs	r2, #0
 80099e8:	605a      	str	r2, [r3, #4]
 80099ea:	e00f      	b.n	8009a0c <_malloc_r+0xb0>
 80099ec:	6822      	ldr	r2, [r4, #0]
 80099ee:	1b52      	subs	r2, r2, r5
 80099f0:	d41f      	bmi.n	8009a32 <_malloc_r+0xd6>
 80099f2:	2a0b      	cmp	r2, #11
 80099f4:	d917      	bls.n	8009a26 <_malloc_r+0xca>
 80099f6:	1961      	adds	r1, r4, r5
 80099f8:	42a3      	cmp	r3, r4
 80099fa:	6025      	str	r5, [r4, #0]
 80099fc:	bf18      	it	ne
 80099fe:	6059      	strne	r1, [r3, #4]
 8009a00:	6863      	ldr	r3, [r4, #4]
 8009a02:	bf08      	it	eq
 8009a04:	f8c8 1000 	streq.w	r1, [r8]
 8009a08:	5162      	str	r2, [r4, r5]
 8009a0a:	604b      	str	r3, [r1, #4]
 8009a0c:	4638      	mov	r0, r7
 8009a0e:	f104 060b 	add.w	r6, r4, #11
 8009a12:	f000 f83b 	bl	8009a8c <__malloc_unlock>
 8009a16:	f026 0607 	bic.w	r6, r6, #7
 8009a1a:	1d23      	adds	r3, r4, #4
 8009a1c:	1af2      	subs	r2, r6, r3
 8009a1e:	d0ae      	beq.n	800997e <_malloc_r+0x22>
 8009a20:	1b9b      	subs	r3, r3, r6
 8009a22:	50a3      	str	r3, [r4, r2]
 8009a24:	e7ab      	b.n	800997e <_malloc_r+0x22>
 8009a26:	42a3      	cmp	r3, r4
 8009a28:	6862      	ldr	r2, [r4, #4]
 8009a2a:	d1dd      	bne.n	80099e8 <_malloc_r+0x8c>
 8009a2c:	f8c8 2000 	str.w	r2, [r8]
 8009a30:	e7ec      	b.n	8009a0c <_malloc_r+0xb0>
 8009a32:	4623      	mov	r3, r4
 8009a34:	6864      	ldr	r4, [r4, #4]
 8009a36:	e7ac      	b.n	8009992 <_malloc_r+0x36>
 8009a38:	4634      	mov	r4, r6
 8009a3a:	6876      	ldr	r6, [r6, #4]
 8009a3c:	e7b4      	b.n	80099a8 <_malloc_r+0x4c>
 8009a3e:	4613      	mov	r3, r2
 8009a40:	e7cc      	b.n	80099dc <_malloc_r+0x80>
 8009a42:	230c      	movs	r3, #12
 8009a44:	603b      	str	r3, [r7, #0]
 8009a46:	4638      	mov	r0, r7
 8009a48:	f000 f820 	bl	8009a8c <__malloc_unlock>
 8009a4c:	e797      	b.n	800997e <_malloc_r+0x22>
 8009a4e:	6025      	str	r5, [r4, #0]
 8009a50:	e7dc      	b.n	8009a0c <_malloc_r+0xb0>
 8009a52:	605b      	str	r3, [r3, #4]
 8009a54:	deff      	udf	#255	; 0xff
 8009a56:	bf00      	nop
 8009a58:	200007f4 	.word	0x200007f4

08009a5c <__ascii_mbtowc>:
 8009a5c:	b082      	sub	sp, #8
 8009a5e:	b901      	cbnz	r1, 8009a62 <__ascii_mbtowc+0x6>
 8009a60:	a901      	add	r1, sp, #4
 8009a62:	b142      	cbz	r2, 8009a76 <__ascii_mbtowc+0x1a>
 8009a64:	b14b      	cbz	r3, 8009a7a <__ascii_mbtowc+0x1e>
 8009a66:	7813      	ldrb	r3, [r2, #0]
 8009a68:	600b      	str	r3, [r1, #0]
 8009a6a:	7812      	ldrb	r2, [r2, #0]
 8009a6c:	1e10      	subs	r0, r2, #0
 8009a6e:	bf18      	it	ne
 8009a70:	2001      	movne	r0, #1
 8009a72:	b002      	add	sp, #8
 8009a74:	4770      	bx	lr
 8009a76:	4610      	mov	r0, r2
 8009a78:	e7fb      	b.n	8009a72 <__ascii_mbtowc+0x16>
 8009a7a:	f06f 0001 	mvn.w	r0, #1
 8009a7e:	e7f8      	b.n	8009a72 <__ascii_mbtowc+0x16>

08009a80 <__malloc_lock>:
 8009a80:	4801      	ldr	r0, [pc, #4]	; (8009a88 <__malloc_lock+0x8>)
 8009a82:	f7fe bd02 	b.w	800848a <__retarget_lock_acquire_recursive>
 8009a86:	bf00      	nop
 8009a88:	200007f0 	.word	0x200007f0

08009a8c <__malloc_unlock>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__malloc_unlock+0x8>)
 8009a8e:	f7fe bcfd 	b.w	800848c <__retarget_lock_release_recursive>
 8009a92:	bf00      	nop
 8009a94:	200007f0 	.word	0x200007f0

08009a98 <_Balloc>:
 8009a98:	b570      	push	{r4, r5, r6, lr}
 8009a9a:	69c6      	ldr	r6, [r0, #28]
 8009a9c:	4604      	mov	r4, r0
 8009a9e:	460d      	mov	r5, r1
 8009aa0:	b976      	cbnz	r6, 8009ac0 <_Balloc+0x28>
 8009aa2:	2010      	movs	r0, #16
 8009aa4:	f7ff ff32 	bl	800990c <malloc>
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	61e0      	str	r0, [r4, #28]
 8009aac:	b920      	cbnz	r0, 8009ab8 <_Balloc+0x20>
 8009aae:	4b18      	ldr	r3, [pc, #96]	; (8009b10 <_Balloc+0x78>)
 8009ab0:	4818      	ldr	r0, [pc, #96]	; (8009b14 <_Balloc+0x7c>)
 8009ab2:	216b      	movs	r1, #107	; 0x6b
 8009ab4:	f001 f93a 	bl	800ad2c <__assert_func>
 8009ab8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009abc:	6006      	str	r6, [r0, #0]
 8009abe:	60c6      	str	r6, [r0, #12]
 8009ac0:	69e6      	ldr	r6, [r4, #28]
 8009ac2:	68f3      	ldr	r3, [r6, #12]
 8009ac4:	b183      	cbz	r3, 8009ae8 <_Balloc+0x50>
 8009ac6:	69e3      	ldr	r3, [r4, #28]
 8009ac8:	68db      	ldr	r3, [r3, #12]
 8009aca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ace:	b9b8      	cbnz	r0, 8009b00 <_Balloc+0x68>
 8009ad0:	2101      	movs	r1, #1
 8009ad2:	fa01 f605 	lsl.w	r6, r1, r5
 8009ad6:	1d72      	adds	r2, r6, #5
 8009ad8:	0092      	lsls	r2, r2, #2
 8009ada:	4620      	mov	r0, r4
 8009adc:	f001 f944 	bl	800ad68 <_calloc_r>
 8009ae0:	b160      	cbz	r0, 8009afc <_Balloc+0x64>
 8009ae2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ae6:	e00e      	b.n	8009b06 <_Balloc+0x6e>
 8009ae8:	2221      	movs	r2, #33	; 0x21
 8009aea:	2104      	movs	r1, #4
 8009aec:	4620      	mov	r0, r4
 8009aee:	f001 f93b 	bl	800ad68 <_calloc_r>
 8009af2:	69e3      	ldr	r3, [r4, #28]
 8009af4:	60f0      	str	r0, [r6, #12]
 8009af6:	68db      	ldr	r3, [r3, #12]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d1e4      	bne.n	8009ac6 <_Balloc+0x2e>
 8009afc:	2000      	movs	r0, #0
 8009afe:	bd70      	pop	{r4, r5, r6, pc}
 8009b00:	6802      	ldr	r2, [r0, #0]
 8009b02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b06:	2300      	movs	r3, #0
 8009b08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b0c:	e7f7      	b.n	8009afe <_Balloc+0x66>
 8009b0e:	bf00      	nop
 8009b10:	0800c406 	.word	0x0800c406
 8009b14:	0800c4e6 	.word	0x0800c4e6

08009b18 <_Bfree>:
 8009b18:	b570      	push	{r4, r5, r6, lr}
 8009b1a:	69c6      	ldr	r6, [r0, #28]
 8009b1c:	4605      	mov	r5, r0
 8009b1e:	460c      	mov	r4, r1
 8009b20:	b976      	cbnz	r6, 8009b40 <_Bfree+0x28>
 8009b22:	2010      	movs	r0, #16
 8009b24:	f7ff fef2 	bl	800990c <malloc>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	61e8      	str	r0, [r5, #28]
 8009b2c:	b920      	cbnz	r0, 8009b38 <_Bfree+0x20>
 8009b2e:	4b09      	ldr	r3, [pc, #36]	; (8009b54 <_Bfree+0x3c>)
 8009b30:	4809      	ldr	r0, [pc, #36]	; (8009b58 <_Bfree+0x40>)
 8009b32:	218f      	movs	r1, #143	; 0x8f
 8009b34:	f001 f8fa 	bl	800ad2c <__assert_func>
 8009b38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b3c:	6006      	str	r6, [r0, #0]
 8009b3e:	60c6      	str	r6, [r0, #12]
 8009b40:	b13c      	cbz	r4, 8009b52 <_Bfree+0x3a>
 8009b42:	69eb      	ldr	r3, [r5, #28]
 8009b44:	6862      	ldr	r2, [r4, #4]
 8009b46:	68db      	ldr	r3, [r3, #12]
 8009b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b4c:	6021      	str	r1, [r4, #0]
 8009b4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b52:	bd70      	pop	{r4, r5, r6, pc}
 8009b54:	0800c406 	.word	0x0800c406
 8009b58:	0800c4e6 	.word	0x0800c4e6

08009b5c <__multadd>:
 8009b5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b60:	690d      	ldr	r5, [r1, #16]
 8009b62:	4607      	mov	r7, r0
 8009b64:	460c      	mov	r4, r1
 8009b66:	461e      	mov	r6, r3
 8009b68:	f101 0c14 	add.w	ip, r1, #20
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f8dc 3000 	ldr.w	r3, [ip]
 8009b72:	b299      	uxth	r1, r3
 8009b74:	fb02 6101 	mla	r1, r2, r1, r6
 8009b78:	0c1e      	lsrs	r6, r3, #16
 8009b7a:	0c0b      	lsrs	r3, r1, #16
 8009b7c:	fb02 3306 	mla	r3, r2, r6, r3
 8009b80:	b289      	uxth	r1, r1
 8009b82:	3001      	adds	r0, #1
 8009b84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b88:	4285      	cmp	r5, r0
 8009b8a:	f84c 1b04 	str.w	r1, [ip], #4
 8009b8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b92:	dcec      	bgt.n	8009b6e <__multadd+0x12>
 8009b94:	b30e      	cbz	r6, 8009bda <__multadd+0x7e>
 8009b96:	68a3      	ldr	r3, [r4, #8]
 8009b98:	42ab      	cmp	r3, r5
 8009b9a:	dc19      	bgt.n	8009bd0 <__multadd+0x74>
 8009b9c:	6861      	ldr	r1, [r4, #4]
 8009b9e:	4638      	mov	r0, r7
 8009ba0:	3101      	adds	r1, #1
 8009ba2:	f7ff ff79 	bl	8009a98 <_Balloc>
 8009ba6:	4680      	mov	r8, r0
 8009ba8:	b928      	cbnz	r0, 8009bb6 <__multadd+0x5a>
 8009baa:	4602      	mov	r2, r0
 8009bac:	4b0c      	ldr	r3, [pc, #48]	; (8009be0 <__multadd+0x84>)
 8009bae:	480d      	ldr	r0, [pc, #52]	; (8009be4 <__multadd+0x88>)
 8009bb0:	21ba      	movs	r1, #186	; 0xba
 8009bb2:	f001 f8bb 	bl	800ad2c <__assert_func>
 8009bb6:	6922      	ldr	r2, [r4, #16]
 8009bb8:	3202      	adds	r2, #2
 8009bba:	f104 010c 	add.w	r1, r4, #12
 8009bbe:	0092      	lsls	r2, r2, #2
 8009bc0:	300c      	adds	r0, #12
 8009bc2:	f7fe fc64 	bl	800848e <memcpy>
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4638      	mov	r0, r7
 8009bca:	f7ff ffa5 	bl	8009b18 <_Bfree>
 8009bce:	4644      	mov	r4, r8
 8009bd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bd4:	3501      	adds	r5, #1
 8009bd6:	615e      	str	r6, [r3, #20]
 8009bd8:	6125      	str	r5, [r4, #16]
 8009bda:	4620      	mov	r0, r4
 8009bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009be0:	0800c475 	.word	0x0800c475
 8009be4:	0800c4e6 	.word	0x0800c4e6

08009be8 <__s2b>:
 8009be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bec:	460c      	mov	r4, r1
 8009bee:	4615      	mov	r5, r2
 8009bf0:	461f      	mov	r7, r3
 8009bf2:	2209      	movs	r2, #9
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	4606      	mov	r6, r0
 8009bf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bfc:	2100      	movs	r1, #0
 8009bfe:	2201      	movs	r2, #1
 8009c00:	429a      	cmp	r2, r3
 8009c02:	db09      	blt.n	8009c18 <__s2b+0x30>
 8009c04:	4630      	mov	r0, r6
 8009c06:	f7ff ff47 	bl	8009a98 <_Balloc>
 8009c0a:	b940      	cbnz	r0, 8009c1e <__s2b+0x36>
 8009c0c:	4602      	mov	r2, r0
 8009c0e:	4b19      	ldr	r3, [pc, #100]	; (8009c74 <__s2b+0x8c>)
 8009c10:	4819      	ldr	r0, [pc, #100]	; (8009c78 <__s2b+0x90>)
 8009c12:	21d3      	movs	r1, #211	; 0xd3
 8009c14:	f001 f88a 	bl	800ad2c <__assert_func>
 8009c18:	0052      	lsls	r2, r2, #1
 8009c1a:	3101      	adds	r1, #1
 8009c1c:	e7f0      	b.n	8009c00 <__s2b+0x18>
 8009c1e:	9b08      	ldr	r3, [sp, #32]
 8009c20:	6143      	str	r3, [r0, #20]
 8009c22:	2d09      	cmp	r5, #9
 8009c24:	f04f 0301 	mov.w	r3, #1
 8009c28:	6103      	str	r3, [r0, #16]
 8009c2a:	dd16      	ble.n	8009c5a <__s2b+0x72>
 8009c2c:	f104 0909 	add.w	r9, r4, #9
 8009c30:	46c8      	mov	r8, r9
 8009c32:	442c      	add	r4, r5
 8009c34:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c38:	4601      	mov	r1, r0
 8009c3a:	3b30      	subs	r3, #48	; 0x30
 8009c3c:	220a      	movs	r2, #10
 8009c3e:	4630      	mov	r0, r6
 8009c40:	f7ff ff8c 	bl	8009b5c <__multadd>
 8009c44:	45a0      	cmp	r8, r4
 8009c46:	d1f5      	bne.n	8009c34 <__s2b+0x4c>
 8009c48:	f1a5 0408 	sub.w	r4, r5, #8
 8009c4c:	444c      	add	r4, r9
 8009c4e:	1b2d      	subs	r5, r5, r4
 8009c50:	1963      	adds	r3, r4, r5
 8009c52:	42bb      	cmp	r3, r7
 8009c54:	db04      	blt.n	8009c60 <__s2b+0x78>
 8009c56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c5a:	340a      	adds	r4, #10
 8009c5c:	2509      	movs	r5, #9
 8009c5e:	e7f6      	b.n	8009c4e <__s2b+0x66>
 8009c60:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c64:	4601      	mov	r1, r0
 8009c66:	3b30      	subs	r3, #48	; 0x30
 8009c68:	220a      	movs	r2, #10
 8009c6a:	4630      	mov	r0, r6
 8009c6c:	f7ff ff76 	bl	8009b5c <__multadd>
 8009c70:	e7ee      	b.n	8009c50 <__s2b+0x68>
 8009c72:	bf00      	nop
 8009c74:	0800c475 	.word	0x0800c475
 8009c78:	0800c4e6 	.word	0x0800c4e6

08009c7c <__hi0bits>:
 8009c7c:	0c03      	lsrs	r3, r0, #16
 8009c7e:	041b      	lsls	r3, r3, #16
 8009c80:	b9d3      	cbnz	r3, 8009cb8 <__hi0bits+0x3c>
 8009c82:	0400      	lsls	r0, r0, #16
 8009c84:	2310      	movs	r3, #16
 8009c86:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c8a:	bf04      	itt	eq
 8009c8c:	0200      	lsleq	r0, r0, #8
 8009c8e:	3308      	addeq	r3, #8
 8009c90:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c94:	bf04      	itt	eq
 8009c96:	0100      	lsleq	r0, r0, #4
 8009c98:	3304      	addeq	r3, #4
 8009c9a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c9e:	bf04      	itt	eq
 8009ca0:	0080      	lsleq	r0, r0, #2
 8009ca2:	3302      	addeq	r3, #2
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	db05      	blt.n	8009cb4 <__hi0bits+0x38>
 8009ca8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009cac:	f103 0301 	add.w	r3, r3, #1
 8009cb0:	bf08      	it	eq
 8009cb2:	2320      	moveq	r3, #32
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	4770      	bx	lr
 8009cb8:	2300      	movs	r3, #0
 8009cba:	e7e4      	b.n	8009c86 <__hi0bits+0xa>

08009cbc <__lo0bits>:
 8009cbc:	6803      	ldr	r3, [r0, #0]
 8009cbe:	f013 0207 	ands.w	r2, r3, #7
 8009cc2:	d00c      	beq.n	8009cde <__lo0bits+0x22>
 8009cc4:	07d9      	lsls	r1, r3, #31
 8009cc6:	d422      	bmi.n	8009d0e <__lo0bits+0x52>
 8009cc8:	079a      	lsls	r2, r3, #30
 8009cca:	bf49      	itett	mi
 8009ccc:	085b      	lsrmi	r3, r3, #1
 8009cce:	089b      	lsrpl	r3, r3, #2
 8009cd0:	6003      	strmi	r3, [r0, #0]
 8009cd2:	2201      	movmi	r2, #1
 8009cd4:	bf5c      	itt	pl
 8009cd6:	6003      	strpl	r3, [r0, #0]
 8009cd8:	2202      	movpl	r2, #2
 8009cda:	4610      	mov	r0, r2
 8009cdc:	4770      	bx	lr
 8009cde:	b299      	uxth	r1, r3
 8009ce0:	b909      	cbnz	r1, 8009ce6 <__lo0bits+0x2a>
 8009ce2:	0c1b      	lsrs	r3, r3, #16
 8009ce4:	2210      	movs	r2, #16
 8009ce6:	b2d9      	uxtb	r1, r3
 8009ce8:	b909      	cbnz	r1, 8009cee <__lo0bits+0x32>
 8009cea:	3208      	adds	r2, #8
 8009cec:	0a1b      	lsrs	r3, r3, #8
 8009cee:	0719      	lsls	r1, r3, #28
 8009cf0:	bf04      	itt	eq
 8009cf2:	091b      	lsreq	r3, r3, #4
 8009cf4:	3204      	addeq	r2, #4
 8009cf6:	0799      	lsls	r1, r3, #30
 8009cf8:	bf04      	itt	eq
 8009cfa:	089b      	lsreq	r3, r3, #2
 8009cfc:	3202      	addeq	r2, #2
 8009cfe:	07d9      	lsls	r1, r3, #31
 8009d00:	d403      	bmi.n	8009d0a <__lo0bits+0x4e>
 8009d02:	085b      	lsrs	r3, r3, #1
 8009d04:	f102 0201 	add.w	r2, r2, #1
 8009d08:	d003      	beq.n	8009d12 <__lo0bits+0x56>
 8009d0a:	6003      	str	r3, [r0, #0]
 8009d0c:	e7e5      	b.n	8009cda <__lo0bits+0x1e>
 8009d0e:	2200      	movs	r2, #0
 8009d10:	e7e3      	b.n	8009cda <__lo0bits+0x1e>
 8009d12:	2220      	movs	r2, #32
 8009d14:	e7e1      	b.n	8009cda <__lo0bits+0x1e>
	...

08009d18 <__i2b>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	f7ff febb 	bl	8009a98 <_Balloc>
 8009d22:	4602      	mov	r2, r0
 8009d24:	b928      	cbnz	r0, 8009d32 <__i2b+0x1a>
 8009d26:	4b05      	ldr	r3, [pc, #20]	; (8009d3c <__i2b+0x24>)
 8009d28:	4805      	ldr	r0, [pc, #20]	; (8009d40 <__i2b+0x28>)
 8009d2a:	f240 1145 	movw	r1, #325	; 0x145
 8009d2e:	f000 fffd 	bl	800ad2c <__assert_func>
 8009d32:	2301      	movs	r3, #1
 8009d34:	6144      	str	r4, [r0, #20]
 8009d36:	6103      	str	r3, [r0, #16]
 8009d38:	bd10      	pop	{r4, pc}
 8009d3a:	bf00      	nop
 8009d3c:	0800c475 	.word	0x0800c475
 8009d40:	0800c4e6 	.word	0x0800c4e6

08009d44 <__multiply>:
 8009d44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d48:	4691      	mov	r9, r2
 8009d4a:	690a      	ldr	r2, [r1, #16]
 8009d4c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	bfb8      	it	lt
 8009d54:	460b      	movlt	r3, r1
 8009d56:	460c      	mov	r4, r1
 8009d58:	bfbc      	itt	lt
 8009d5a:	464c      	movlt	r4, r9
 8009d5c:	4699      	movlt	r9, r3
 8009d5e:	6927      	ldr	r7, [r4, #16]
 8009d60:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d64:	68a3      	ldr	r3, [r4, #8]
 8009d66:	6861      	ldr	r1, [r4, #4]
 8009d68:	eb07 060a 	add.w	r6, r7, sl
 8009d6c:	42b3      	cmp	r3, r6
 8009d6e:	b085      	sub	sp, #20
 8009d70:	bfb8      	it	lt
 8009d72:	3101      	addlt	r1, #1
 8009d74:	f7ff fe90 	bl	8009a98 <_Balloc>
 8009d78:	b930      	cbnz	r0, 8009d88 <__multiply+0x44>
 8009d7a:	4602      	mov	r2, r0
 8009d7c:	4b44      	ldr	r3, [pc, #272]	; (8009e90 <__multiply+0x14c>)
 8009d7e:	4845      	ldr	r0, [pc, #276]	; (8009e94 <__multiply+0x150>)
 8009d80:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d84:	f000 ffd2 	bl	800ad2c <__assert_func>
 8009d88:	f100 0514 	add.w	r5, r0, #20
 8009d8c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d90:	462b      	mov	r3, r5
 8009d92:	2200      	movs	r2, #0
 8009d94:	4543      	cmp	r3, r8
 8009d96:	d321      	bcc.n	8009ddc <__multiply+0x98>
 8009d98:	f104 0314 	add.w	r3, r4, #20
 8009d9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009da0:	f109 0314 	add.w	r3, r9, #20
 8009da4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009da8:	9202      	str	r2, [sp, #8]
 8009daa:	1b3a      	subs	r2, r7, r4
 8009dac:	3a15      	subs	r2, #21
 8009dae:	f022 0203 	bic.w	r2, r2, #3
 8009db2:	3204      	adds	r2, #4
 8009db4:	f104 0115 	add.w	r1, r4, #21
 8009db8:	428f      	cmp	r7, r1
 8009dba:	bf38      	it	cc
 8009dbc:	2204      	movcc	r2, #4
 8009dbe:	9201      	str	r2, [sp, #4]
 8009dc0:	9a02      	ldr	r2, [sp, #8]
 8009dc2:	9303      	str	r3, [sp, #12]
 8009dc4:	429a      	cmp	r2, r3
 8009dc6:	d80c      	bhi.n	8009de2 <__multiply+0x9e>
 8009dc8:	2e00      	cmp	r6, #0
 8009dca:	dd03      	ble.n	8009dd4 <__multiply+0x90>
 8009dcc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d05b      	beq.n	8009e8c <__multiply+0x148>
 8009dd4:	6106      	str	r6, [r0, #16]
 8009dd6:	b005      	add	sp, #20
 8009dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ddc:	f843 2b04 	str.w	r2, [r3], #4
 8009de0:	e7d8      	b.n	8009d94 <__multiply+0x50>
 8009de2:	f8b3 a000 	ldrh.w	sl, [r3]
 8009de6:	f1ba 0f00 	cmp.w	sl, #0
 8009dea:	d024      	beq.n	8009e36 <__multiply+0xf2>
 8009dec:	f104 0e14 	add.w	lr, r4, #20
 8009df0:	46a9      	mov	r9, r5
 8009df2:	f04f 0c00 	mov.w	ip, #0
 8009df6:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009dfa:	f8d9 1000 	ldr.w	r1, [r9]
 8009dfe:	fa1f fb82 	uxth.w	fp, r2
 8009e02:	b289      	uxth	r1, r1
 8009e04:	fb0a 110b 	mla	r1, sl, fp, r1
 8009e08:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009e0c:	f8d9 2000 	ldr.w	r2, [r9]
 8009e10:	4461      	add	r1, ip
 8009e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e16:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e1a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e1e:	b289      	uxth	r1, r1
 8009e20:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e24:	4577      	cmp	r7, lr
 8009e26:	f849 1b04 	str.w	r1, [r9], #4
 8009e2a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e2e:	d8e2      	bhi.n	8009df6 <__multiply+0xb2>
 8009e30:	9a01      	ldr	r2, [sp, #4]
 8009e32:	f845 c002 	str.w	ip, [r5, r2]
 8009e36:	9a03      	ldr	r2, [sp, #12]
 8009e38:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e3c:	3304      	adds	r3, #4
 8009e3e:	f1b9 0f00 	cmp.w	r9, #0
 8009e42:	d021      	beq.n	8009e88 <__multiply+0x144>
 8009e44:	6829      	ldr	r1, [r5, #0]
 8009e46:	f104 0c14 	add.w	ip, r4, #20
 8009e4a:	46ae      	mov	lr, r5
 8009e4c:	f04f 0a00 	mov.w	sl, #0
 8009e50:	f8bc b000 	ldrh.w	fp, [ip]
 8009e54:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e58:	fb09 220b 	mla	r2, r9, fp, r2
 8009e5c:	4452      	add	r2, sl
 8009e5e:	b289      	uxth	r1, r1
 8009e60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e64:	f84e 1b04 	str.w	r1, [lr], #4
 8009e68:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e6c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e70:	f8be 1000 	ldrh.w	r1, [lr]
 8009e74:	fb09 110a 	mla	r1, r9, sl, r1
 8009e78:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e7c:	4567      	cmp	r7, ip
 8009e7e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e82:	d8e5      	bhi.n	8009e50 <__multiply+0x10c>
 8009e84:	9a01      	ldr	r2, [sp, #4]
 8009e86:	50a9      	str	r1, [r5, r2]
 8009e88:	3504      	adds	r5, #4
 8009e8a:	e799      	b.n	8009dc0 <__multiply+0x7c>
 8009e8c:	3e01      	subs	r6, #1
 8009e8e:	e79b      	b.n	8009dc8 <__multiply+0x84>
 8009e90:	0800c475 	.word	0x0800c475
 8009e94:	0800c4e6 	.word	0x0800c4e6

08009e98 <__pow5mult>:
 8009e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e9c:	4615      	mov	r5, r2
 8009e9e:	f012 0203 	ands.w	r2, r2, #3
 8009ea2:	4606      	mov	r6, r0
 8009ea4:	460f      	mov	r7, r1
 8009ea6:	d007      	beq.n	8009eb8 <__pow5mult+0x20>
 8009ea8:	4c25      	ldr	r4, [pc, #148]	; (8009f40 <__pow5mult+0xa8>)
 8009eaa:	3a01      	subs	r2, #1
 8009eac:	2300      	movs	r3, #0
 8009eae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009eb2:	f7ff fe53 	bl	8009b5c <__multadd>
 8009eb6:	4607      	mov	r7, r0
 8009eb8:	10ad      	asrs	r5, r5, #2
 8009eba:	d03d      	beq.n	8009f38 <__pow5mult+0xa0>
 8009ebc:	69f4      	ldr	r4, [r6, #28]
 8009ebe:	b97c      	cbnz	r4, 8009ee0 <__pow5mult+0x48>
 8009ec0:	2010      	movs	r0, #16
 8009ec2:	f7ff fd23 	bl	800990c <malloc>
 8009ec6:	4602      	mov	r2, r0
 8009ec8:	61f0      	str	r0, [r6, #28]
 8009eca:	b928      	cbnz	r0, 8009ed8 <__pow5mult+0x40>
 8009ecc:	4b1d      	ldr	r3, [pc, #116]	; (8009f44 <__pow5mult+0xac>)
 8009ece:	481e      	ldr	r0, [pc, #120]	; (8009f48 <__pow5mult+0xb0>)
 8009ed0:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ed4:	f000 ff2a 	bl	800ad2c <__assert_func>
 8009ed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009edc:	6004      	str	r4, [r0, #0]
 8009ede:	60c4      	str	r4, [r0, #12]
 8009ee0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ee8:	b94c      	cbnz	r4, 8009efe <__pow5mult+0x66>
 8009eea:	f240 2171 	movw	r1, #625	; 0x271
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f7ff ff12 	bl	8009d18 <__i2b>
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	f8c8 0008 	str.w	r0, [r8, #8]
 8009efa:	4604      	mov	r4, r0
 8009efc:	6003      	str	r3, [r0, #0]
 8009efe:	f04f 0900 	mov.w	r9, #0
 8009f02:	07eb      	lsls	r3, r5, #31
 8009f04:	d50a      	bpl.n	8009f1c <__pow5mult+0x84>
 8009f06:	4639      	mov	r1, r7
 8009f08:	4622      	mov	r2, r4
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f7ff ff1a 	bl	8009d44 <__multiply>
 8009f10:	4639      	mov	r1, r7
 8009f12:	4680      	mov	r8, r0
 8009f14:	4630      	mov	r0, r6
 8009f16:	f7ff fdff 	bl	8009b18 <_Bfree>
 8009f1a:	4647      	mov	r7, r8
 8009f1c:	106d      	asrs	r5, r5, #1
 8009f1e:	d00b      	beq.n	8009f38 <__pow5mult+0xa0>
 8009f20:	6820      	ldr	r0, [r4, #0]
 8009f22:	b938      	cbnz	r0, 8009f34 <__pow5mult+0x9c>
 8009f24:	4622      	mov	r2, r4
 8009f26:	4621      	mov	r1, r4
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f7ff ff0b 	bl	8009d44 <__multiply>
 8009f2e:	6020      	str	r0, [r4, #0]
 8009f30:	f8c0 9000 	str.w	r9, [r0]
 8009f34:	4604      	mov	r4, r0
 8009f36:	e7e4      	b.n	8009f02 <__pow5mult+0x6a>
 8009f38:	4638      	mov	r0, r7
 8009f3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f3e:	bf00      	nop
 8009f40:	0800c630 	.word	0x0800c630
 8009f44:	0800c406 	.word	0x0800c406
 8009f48:	0800c4e6 	.word	0x0800c4e6

08009f4c <__lshift>:
 8009f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f50:	460c      	mov	r4, r1
 8009f52:	6849      	ldr	r1, [r1, #4]
 8009f54:	6923      	ldr	r3, [r4, #16]
 8009f56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f5a:	68a3      	ldr	r3, [r4, #8]
 8009f5c:	4607      	mov	r7, r0
 8009f5e:	4691      	mov	r9, r2
 8009f60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f64:	f108 0601 	add.w	r6, r8, #1
 8009f68:	42b3      	cmp	r3, r6
 8009f6a:	db0b      	blt.n	8009f84 <__lshift+0x38>
 8009f6c:	4638      	mov	r0, r7
 8009f6e:	f7ff fd93 	bl	8009a98 <_Balloc>
 8009f72:	4605      	mov	r5, r0
 8009f74:	b948      	cbnz	r0, 8009f8a <__lshift+0x3e>
 8009f76:	4602      	mov	r2, r0
 8009f78:	4b28      	ldr	r3, [pc, #160]	; (800a01c <__lshift+0xd0>)
 8009f7a:	4829      	ldr	r0, [pc, #164]	; (800a020 <__lshift+0xd4>)
 8009f7c:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f80:	f000 fed4 	bl	800ad2c <__assert_func>
 8009f84:	3101      	adds	r1, #1
 8009f86:	005b      	lsls	r3, r3, #1
 8009f88:	e7ee      	b.n	8009f68 <__lshift+0x1c>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	f100 0114 	add.w	r1, r0, #20
 8009f90:	f100 0210 	add.w	r2, r0, #16
 8009f94:	4618      	mov	r0, r3
 8009f96:	4553      	cmp	r3, sl
 8009f98:	db33      	blt.n	800a002 <__lshift+0xb6>
 8009f9a:	6920      	ldr	r0, [r4, #16]
 8009f9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009fa0:	f104 0314 	add.w	r3, r4, #20
 8009fa4:	f019 091f 	ands.w	r9, r9, #31
 8009fa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009fac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009fb0:	d02b      	beq.n	800a00a <__lshift+0xbe>
 8009fb2:	f1c9 0e20 	rsb	lr, r9, #32
 8009fb6:	468a      	mov	sl, r1
 8009fb8:	2200      	movs	r2, #0
 8009fba:	6818      	ldr	r0, [r3, #0]
 8009fbc:	fa00 f009 	lsl.w	r0, r0, r9
 8009fc0:	4310      	orrs	r0, r2
 8009fc2:	f84a 0b04 	str.w	r0, [sl], #4
 8009fc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fca:	459c      	cmp	ip, r3
 8009fcc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fd0:	d8f3      	bhi.n	8009fba <__lshift+0x6e>
 8009fd2:	ebac 0304 	sub.w	r3, ip, r4
 8009fd6:	3b15      	subs	r3, #21
 8009fd8:	f023 0303 	bic.w	r3, r3, #3
 8009fdc:	3304      	adds	r3, #4
 8009fde:	f104 0015 	add.w	r0, r4, #21
 8009fe2:	4584      	cmp	ip, r0
 8009fe4:	bf38      	it	cc
 8009fe6:	2304      	movcc	r3, #4
 8009fe8:	50ca      	str	r2, [r1, r3]
 8009fea:	b10a      	cbz	r2, 8009ff0 <__lshift+0xa4>
 8009fec:	f108 0602 	add.w	r6, r8, #2
 8009ff0:	3e01      	subs	r6, #1
 8009ff2:	4638      	mov	r0, r7
 8009ff4:	612e      	str	r6, [r5, #16]
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	f7ff fd8e 	bl	8009b18 <_Bfree>
 8009ffc:	4628      	mov	r0, r5
 8009ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a002:	f842 0f04 	str.w	r0, [r2, #4]!
 800a006:	3301      	adds	r3, #1
 800a008:	e7c5      	b.n	8009f96 <__lshift+0x4a>
 800a00a:	3904      	subs	r1, #4
 800a00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a010:	f841 2f04 	str.w	r2, [r1, #4]!
 800a014:	459c      	cmp	ip, r3
 800a016:	d8f9      	bhi.n	800a00c <__lshift+0xc0>
 800a018:	e7ea      	b.n	8009ff0 <__lshift+0xa4>
 800a01a:	bf00      	nop
 800a01c:	0800c475 	.word	0x0800c475
 800a020:	0800c4e6 	.word	0x0800c4e6

0800a024 <__mcmp>:
 800a024:	b530      	push	{r4, r5, lr}
 800a026:	6902      	ldr	r2, [r0, #16]
 800a028:	690c      	ldr	r4, [r1, #16]
 800a02a:	1b12      	subs	r2, r2, r4
 800a02c:	d10e      	bne.n	800a04c <__mcmp+0x28>
 800a02e:	f100 0314 	add.w	r3, r0, #20
 800a032:	3114      	adds	r1, #20
 800a034:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a038:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a03c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a040:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a044:	42a5      	cmp	r5, r4
 800a046:	d003      	beq.n	800a050 <__mcmp+0x2c>
 800a048:	d305      	bcc.n	800a056 <__mcmp+0x32>
 800a04a:	2201      	movs	r2, #1
 800a04c:	4610      	mov	r0, r2
 800a04e:	bd30      	pop	{r4, r5, pc}
 800a050:	4283      	cmp	r3, r0
 800a052:	d3f3      	bcc.n	800a03c <__mcmp+0x18>
 800a054:	e7fa      	b.n	800a04c <__mcmp+0x28>
 800a056:	f04f 32ff 	mov.w	r2, #4294967295
 800a05a:	e7f7      	b.n	800a04c <__mcmp+0x28>

0800a05c <__mdiff>:
 800a05c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a060:	460c      	mov	r4, r1
 800a062:	4606      	mov	r6, r0
 800a064:	4611      	mov	r1, r2
 800a066:	4620      	mov	r0, r4
 800a068:	4690      	mov	r8, r2
 800a06a:	f7ff ffdb 	bl	800a024 <__mcmp>
 800a06e:	1e05      	subs	r5, r0, #0
 800a070:	d110      	bne.n	800a094 <__mdiff+0x38>
 800a072:	4629      	mov	r1, r5
 800a074:	4630      	mov	r0, r6
 800a076:	f7ff fd0f 	bl	8009a98 <_Balloc>
 800a07a:	b930      	cbnz	r0, 800a08a <__mdiff+0x2e>
 800a07c:	4b3a      	ldr	r3, [pc, #232]	; (800a168 <__mdiff+0x10c>)
 800a07e:	4602      	mov	r2, r0
 800a080:	f240 2137 	movw	r1, #567	; 0x237
 800a084:	4839      	ldr	r0, [pc, #228]	; (800a16c <__mdiff+0x110>)
 800a086:	f000 fe51 	bl	800ad2c <__assert_func>
 800a08a:	2301      	movs	r3, #1
 800a08c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a094:	bfa4      	itt	ge
 800a096:	4643      	movge	r3, r8
 800a098:	46a0      	movge	r8, r4
 800a09a:	4630      	mov	r0, r6
 800a09c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a0a0:	bfa6      	itte	ge
 800a0a2:	461c      	movge	r4, r3
 800a0a4:	2500      	movge	r5, #0
 800a0a6:	2501      	movlt	r5, #1
 800a0a8:	f7ff fcf6 	bl	8009a98 <_Balloc>
 800a0ac:	b920      	cbnz	r0, 800a0b8 <__mdiff+0x5c>
 800a0ae:	4b2e      	ldr	r3, [pc, #184]	; (800a168 <__mdiff+0x10c>)
 800a0b0:	4602      	mov	r2, r0
 800a0b2:	f240 2145 	movw	r1, #581	; 0x245
 800a0b6:	e7e5      	b.n	800a084 <__mdiff+0x28>
 800a0b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0bc:	6926      	ldr	r6, [r4, #16]
 800a0be:	60c5      	str	r5, [r0, #12]
 800a0c0:	f104 0914 	add.w	r9, r4, #20
 800a0c4:	f108 0514 	add.w	r5, r8, #20
 800a0c8:	f100 0e14 	add.w	lr, r0, #20
 800a0cc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a0d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0d4:	f108 0210 	add.w	r2, r8, #16
 800a0d8:	46f2      	mov	sl, lr
 800a0da:	2100      	movs	r1, #0
 800a0dc:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0e0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0e4:	fa11 f88b 	uxtah	r8, r1, fp
 800a0e8:	b299      	uxth	r1, r3
 800a0ea:	0c1b      	lsrs	r3, r3, #16
 800a0ec:	eba8 0801 	sub.w	r8, r8, r1
 800a0f0:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0f4:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0f8:	fa1f f888 	uxth.w	r8, r8
 800a0fc:	1419      	asrs	r1, r3, #16
 800a0fe:	454e      	cmp	r6, r9
 800a100:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a104:	f84a 3b04 	str.w	r3, [sl], #4
 800a108:	d8e8      	bhi.n	800a0dc <__mdiff+0x80>
 800a10a:	1b33      	subs	r3, r6, r4
 800a10c:	3b15      	subs	r3, #21
 800a10e:	f023 0303 	bic.w	r3, r3, #3
 800a112:	3304      	adds	r3, #4
 800a114:	3415      	adds	r4, #21
 800a116:	42a6      	cmp	r6, r4
 800a118:	bf38      	it	cc
 800a11a:	2304      	movcc	r3, #4
 800a11c:	441d      	add	r5, r3
 800a11e:	4473      	add	r3, lr
 800a120:	469e      	mov	lr, r3
 800a122:	462e      	mov	r6, r5
 800a124:	4566      	cmp	r6, ip
 800a126:	d30e      	bcc.n	800a146 <__mdiff+0xea>
 800a128:	f10c 0203 	add.w	r2, ip, #3
 800a12c:	1b52      	subs	r2, r2, r5
 800a12e:	f022 0203 	bic.w	r2, r2, #3
 800a132:	3d03      	subs	r5, #3
 800a134:	45ac      	cmp	ip, r5
 800a136:	bf38      	it	cc
 800a138:	2200      	movcc	r2, #0
 800a13a:	4413      	add	r3, r2
 800a13c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a140:	b17a      	cbz	r2, 800a162 <__mdiff+0x106>
 800a142:	6107      	str	r7, [r0, #16]
 800a144:	e7a4      	b.n	800a090 <__mdiff+0x34>
 800a146:	f856 8b04 	ldr.w	r8, [r6], #4
 800a14a:	fa11 f288 	uxtah	r2, r1, r8
 800a14e:	1414      	asrs	r4, r2, #16
 800a150:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a154:	b292      	uxth	r2, r2
 800a156:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a15a:	f84e 2b04 	str.w	r2, [lr], #4
 800a15e:	1421      	asrs	r1, r4, #16
 800a160:	e7e0      	b.n	800a124 <__mdiff+0xc8>
 800a162:	3f01      	subs	r7, #1
 800a164:	e7ea      	b.n	800a13c <__mdiff+0xe0>
 800a166:	bf00      	nop
 800a168:	0800c475 	.word	0x0800c475
 800a16c:	0800c4e6 	.word	0x0800c4e6

0800a170 <__ulp>:
 800a170:	b082      	sub	sp, #8
 800a172:	ed8d 0b00 	vstr	d0, [sp]
 800a176:	9a01      	ldr	r2, [sp, #4]
 800a178:	4b0f      	ldr	r3, [pc, #60]	; (800a1b8 <__ulp+0x48>)
 800a17a:	4013      	ands	r3, r2
 800a17c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a180:	2b00      	cmp	r3, #0
 800a182:	dc08      	bgt.n	800a196 <__ulp+0x26>
 800a184:	425b      	negs	r3, r3
 800a186:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a18a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a18e:	da04      	bge.n	800a19a <__ulp+0x2a>
 800a190:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a194:	4113      	asrs	r3, r2
 800a196:	2200      	movs	r2, #0
 800a198:	e008      	b.n	800a1ac <__ulp+0x3c>
 800a19a:	f1a2 0314 	sub.w	r3, r2, #20
 800a19e:	2b1e      	cmp	r3, #30
 800a1a0:	bfda      	itte	le
 800a1a2:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a1a6:	40da      	lsrle	r2, r3
 800a1a8:	2201      	movgt	r2, #1
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	4610      	mov	r0, r2
 800a1b0:	ec41 0b10 	vmov	d0, r0, r1
 800a1b4:	b002      	add	sp, #8
 800a1b6:	4770      	bx	lr
 800a1b8:	7ff00000 	.word	0x7ff00000

0800a1bc <__b2d>:
 800a1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1c0:	6906      	ldr	r6, [r0, #16]
 800a1c2:	f100 0814 	add.w	r8, r0, #20
 800a1c6:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a1ca:	1f37      	subs	r7, r6, #4
 800a1cc:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a1d0:	4610      	mov	r0, r2
 800a1d2:	f7ff fd53 	bl	8009c7c <__hi0bits>
 800a1d6:	f1c0 0320 	rsb	r3, r0, #32
 800a1da:	280a      	cmp	r0, #10
 800a1dc:	600b      	str	r3, [r1, #0]
 800a1de:	491b      	ldr	r1, [pc, #108]	; (800a24c <__b2d+0x90>)
 800a1e0:	dc15      	bgt.n	800a20e <__b2d+0x52>
 800a1e2:	f1c0 0c0b 	rsb	ip, r0, #11
 800a1e6:	fa22 f30c 	lsr.w	r3, r2, ip
 800a1ea:	45b8      	cmp	r8, r7
 800a1ec:	ea43 0501 	orr.w	r5, r3, r1
 800a1f0:	bf34      	ite	cc
 800a1f2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1f6:	2300      	movcs	r3, #0
 800a1f8:	3015      	adds	r0, #21
 800a1fa:	fa02 f000 	lsl.w	r0, r2, r0
 800a1fe:	fa23 f30c 	lsr.w	r3, r3, ip
 800a202:	4303      	orrs	r3, r0
 800a204:	461c      	mov	r4, r3
 800a206:	ec45 4b10 	vmov	d0, r4, r5
 800a20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a20e:	45b8      	cmp	r8, r7
 800a210:	bf3a      	itte	cc
 800a212:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a216:	f1a6 0708 	subcc.w	r7, r6, #8
 800a21a:	2300      	movcs	r3, #0
 800a21c:	380b      	subs	r0, #11
 800a21e:	d012      	beq.n	800a246 <__b2d+0x8a>
 800a220:	f1c0 0120 	rsb	r1, r0, #32
 800a224:	fa23 f401 	lsr.w	r4, r3, r1
 800a228:	4082      	lsls	r2, r0
 800a22a:	4322      	orrs	r2, r4
 800a22c:	4547      	cmp	r7, r8
 800a22e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a232:	bf8c      	ite	hi
 800a234:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a238:	2200      	movls	r2, #0
 800a23a:	4083      	lsls	r3, r0
 800a23c:	40ca      	lsrs	r2, r1
 800a23e:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a242:	4313      	orrs	r3, r2
 800a244:	e7de      	b.n	800a204 <__b2d+0x48>
 800a246:	ea42 0501 	orr.w	r5, r2, r1
 800a24a:	e7db      	b.n	800a204 <__b2d+0x48>
 800a24c:	3ff00000 	.word	0x3ff00000

0800a250 <__d2b>:
 800a250:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a254:	460f      	mov	r7, r1
 800a256:	2101      	movs	r1, #1
 800a258:	ec59 8b10 	vmov	r8, r9, d0
 800a25c:	4616      	mov	r6, r2
 800a25e:	f7ff fc1b 	bl	8009a98 <_Balloc>
 800a262:	4604      	mov	r4, r0
 800a264:	b930      	cbnz	r0, 800a274 <__d2b+0x24>
 800a266:	4602      	mov	r2, r0
 800a268:	4b24      	ldr	r3, [pc, #144]	; (800a2fc <__d2b+0xac>)
 800a26a:	4825      	ldr	r0, [pc, #148]	; (800a300 <__d2b+0xb0>)
 800a26c:	f240 310f 	movw	r1, #783	; 0x30f
 800a270:	f000 fd5c 	bl	800ad2c <__assert_func>
 800a274:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a27c:	bb2d      	cbnz	r5, 800a2ca <__d2b+0x7a>
 800a27e:	9301      	str	r3, [sp, #4]
 800a280:	f1b8 0300 	subs.w	r3, r8, #0
 800a284:	d026      	beq.n	800a2d4 <__d2b+0x84>
 800a286:	4668      	mov	r0, sp
 800a288:	9300      	str	r3, [sp, #0]
 800a28a:	f7ff fd17 	bl	8009cbc <__lo0bits>
 800a28e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a292:	b1e8      	cbz	r0, 800a2d0 <__d2b+0x80>
 800a294:	f1c0 0320 	rsb	r3, r0, #32
 800a298:	fa02 f303 	lsl.w	r3, r2, r3
 800a29c:	430b      	orrs	r3, r1
 800a29e:	40c2      	lsrs	r2, r0
 800a2a0:	6163      	str	r3, [r4, #20]
 800a2a2:	9201      	str	r2, [sp, #4]
 800a2a4:	9b01      	ldr	r3, [sp, #4]
 800a2a6:	61a3      	str	r3, [r4, #24]
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	bf14      	ite	ne
 800a2ac:	2202      	movne	r2, #2
 800a2ae:	2201      	moveq	r2, #1
 800a2b0:	6122      	str	r2, [r4, #16]
 800a2b2:	b1bd      	cbz	r5, 800a2e4 <__d2b+0x94>
 800a2b4:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2b8:	4405      	add	r5, r0
 800a2ba:	603d      	str	r5, [r7, #0]
 800a2bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2c0:	6030      	str	r0, [r6, #0]
 800a2c2:	4620      	mov	r0, r4
 800a2c4:	b003      	add	sp, #12
 800a2c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2ce:	e7d6      	b.n	800a27e <__d2b+0x2e>
 800a2d0:	6161      	str	r1, [r4, #20]
 800a2d2:	e7e7      	b.n	800a2a4 <__d2b+0x54>
 800a2d4:	a801      	add	r0, sp, #4
 800a2d6:	f7ff fcf1 	bl	8009cbc <__lo0bits>
 800a2da:	9b01      	ldr	r3, [sp, #4]
 800a2dc:	6163      	str	r3, [r4, #20]
 800a2de:	3020      	adds	r0, #32
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	e7e5      	b.n	800a2b0 <__d2b+0x60>
 800a2e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2ec:	6038      	str	r0, [r7, #0]
 800a2ee:	6918      	ldr	r0, [r3, #16]
 800a2f0:	f7ff fcc4 	bl	8009c7c <__hi0bits>
 800a2f4:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2f8:	e7e2      	b.n	800a2c0 <__d2b+0x70>
 800a2fa:	bf00      	nop
 800a2fc:	0800c475 	.word	0x0800c475
 800a300:	0800c4e6 	.word	0x0800c4e6

0800a304 <__ratio>:
 800a304:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a308:	4688      	mov	r8, r1
 800a30a:	4669      	mov	r1, sp
 800a30c:	4681      	mov	r9, r0
 800a30e:	f7ff ff55 	bl	800a1bc <__b2d>
 800a312:	a901      	add	r1, sp, #4
 800a314:	4640      	mov	r0, r8
 800a316:	ec55 4b10 	vmov	r4, r5, d0
 800a31a:	f7ff ff4f 	bl	800a1bc <__b2d>
 800a31e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a322:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a326:	eba3 0c02 	sub.w	ip, r3, r2
 800a32a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a32e:	1a9b      	subs	r3, r3, r2
 800a330:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a334:	ec51 0b10 	vmov	r0, r1, d0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	bfd6      	itet	le
 800a33c:	460a      	movle	r2, r1
 800a33e:	462a      	movgt	r2, r5
 800a340:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a344:	468b      	mov	fp, r1
 800a346:	462f      	mov	r7, r5
 800a348:	bfd4      	ite	le
 800a34a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a34e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a352:	4620      	mov	r0, r4
 800a354:	ee10 2a10 	vmov	r2, s0
 800a358:	465b      	mov	r3, fp
 800a35a:	4639      	mov	r1, r7
 800a35c:	f7f6 fa96 	bl	800088c <__aeabi_ddiv>
 800a360:	ec41 0b10 	vmov	d0, r0, r1
 800a364:	b003      	add	sp, #12
 800a366:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a36a <__copybits>:
 800a36a:	3901      	subs	r1, #1
 800a36c:	b570      	push	{r4, r5, r6, lr}
 800a36e:	1149      	asrs	r1, r1, #5
 800a370:	6914      	ldr	r4, [r2, #16]
 800a372:	3101      	adds	r1, #1
 800a374:	f102 0314 	add.w	r3, r2, #20
 800a378:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a37c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a380:	1f05      	subs	r5, r0, #4
 800a382:	42a3      	cmp	r3, r4
 800a384:	d30c      	bcc.n	800a3a0 <__copybits+0x36>
 800a386:	1aa3      	subs	r3, r4, r2
 800a388:	3b11      	subs	r3, #17
 800a38a:	f023 0303 	bic.w	r3, r3, #3
 800a38e:	3211      	adds	r2, #17
 800a390:	42a2      	cmp	r2, r4
 800a392:	bf88      	it	hi
 800a394:	2300      	movhi	r3, #0
 800a396:	4418      	add	r0, r3
 800a398:	2300      	movs	r3, #0
 800a39a:	4288      	cmp	r0, r1
 800a39c:	d305      	bcc.n	800a3aa <__copybits+0x40>
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800a3a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800a3a8:	e7eb      	b.n	800a382 <__copybits+0x18>
 800a3aa:	f840 3b04 	str.w	r3, [r0], #4
 800a3ae:	e7f4      	b.n	800a39a <__copybits+0x30>

0800a3b0 <__any_on>:
 800a3b0:	f100 0214 	add.w	r2, r0, #20
 800a3b4:	6900      	ldr	r0, [r0, #16]
 800a3b6:	114b      	asrs	r3, r1, #5
 800a3b8:	4298      	cmp	r0, r3
 800a3ba:	b510      	push	{r4, lr}
 800a3bc:	db11      	blt.n	800a3e2 <__any_on+0x32>
 800a3be:	dd0a      	ble.n	800a3d6 <__any_on+0x26>
 800a3c0:	f011 011f 	ands.w	r1, r1, #31
 800a3c4:	d007      	beq.n	800a3d6 <__any_on+0x26>
 800a3c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a3ca:	fa24 f001 	lsr.w	r0, r4, r1
 800a3ce:	fa00 f101 	lsl.w	r1, r0, r1
 800a3d2:	428c      	cmp	r4, r1
 800a3d4:	d10b      	bne.n	800a3ee <__any_on+0x3e>
 800a3d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d803      	bhi.n	800a3e6 <__any_on+0x36>
 800a3de:	2000      	movs	r0, #0
 800a3e0:	bd10      	pop	{r4, pc}
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	e7f7      	b.n	800a3d6 <__any_on+0x26>
 800a3e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3ea:	2900      	cmp	r1, #0
 800a3ec:	d0f5      	beq.n	800a3da <__any_on+0x2a>
 800a3ee:	2001      	movs	r0, #1
 800a3f0:	e7f6      	b.n	800a3e0 <__any_on+0x30>
	...

0800a3f4 <_strtol_l.constprop.0>:
 800a3f4:	2b01      	cmp	r3, #1
 800a3f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3fa:	d001      	beq.n	800a400 <_strtol_l.constprop.0+0xc>
 800a3fc:	2b24      	cmp	r3, #36	; 0x24
 800a3fe:	d906      	bls.n	800a40e <_strtol_l.constprop.0+0x1a>
 800a400:	f7fe f818 	bl	8008434 <__errno>
 800a404:	2316      	movs	r3, #22
 800a406:	6003      	str	r3, [r0, #0]
 800a408:	2000      	movs	r0, #0
 800a40a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a40e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a4f4 <_strtol_l.constprop.0+0x100>
 800a412:	460d      	mov	r5, r1
 800a414:	462e      	mov	r6, r5
 800a416:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a41a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a41e:	f017 0708 	ands.w	r7, r7, #8
 800a422:	d1f7      	bne.n	800a414 <_strtol_l.constprop.0+0x20>
 800a424:	2c2d      	cmp	r4, #45	; 0x2d
 800a426:	d132      	bne.n	800a48e <_strtol_l.constprop.0+0x9a>
 800a428:	782c      	ldrb	r4, [r5, #0]
 800a42a:	2701      	movs	r7, #1
 800a42c:	1cb5      	adds	r5, r6, #2
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d05b      	beq.n	800a4ea <_strtol_l.constprop.0+0xf6>
 800a432:	2b10      	cmp	r3, #16
 800a434:	d109      	bne.n	800a44a <_strtol_l.constprop.0+0x56>
 800a436:	2c30      	cmp	r4, #48	; 0x30
 800a438:	d107      	bne.n	800a44a <_strtol_l.constprop.0+0x56>
 800a43a:	782c      	ldrb	r4, [r5, #0]
 800a43c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a440:	2c58      	cmp	r4, #88	; 0x58
 800a442:	d14d      	bne.n	800a4e0 <_strtol_l.constprop.0+0xec>
 800a444:	786c      	ldrb	r4, [r5, #1]
 800a446:	2310      	movs	r3, #16
 800a448:	3502      	adds	r5, #2
 800a44a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a44e:	f108 38ff 	add.w	r8, r8, #4294967295
 800a452:	f04f 0e00 	mov.w	lr, #0
 800a456:	fbb8 f9f3 	udiv	r9, r8, r3
 800a45a:	4676      	mov	r6, lr
 800a45c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a460:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a464:	f1bc 0f09 	cmp.w	ip, #9
 800a468:	d816      	bhi.n	800a498 <_strtol_l.constprop.0+0xa4>
 800a46a:	4664      	mov	r4, ip
 800a46c:	42a3      	cmp	r3, r4
 800a46e:	dd24      	ble.n	800a4ba <_strtol_l.constprop.0+0xc6>
 800a470:	f1be 3fff 	cmp.w	lr, #4294967295
 800a474:	d008      	beq.n	800a488 <_strtol_l.constprop.0+0x94>
 800a476:	45b1      	cmp	r9, r6
 800a478:	d31c      	bcc.n	800a4b4 <_strtol_l.constprop.0+0xc0>
 800a47a:	d101      	bne.n	800a480 <_strtol_l.constprop.0+0x8c>
 800a47c:	45a2      	cmp	sl, r4
 800a47e:	db19      	blt.n	800a4b4 <_strtol_l.constprop.0+0xc0>
 800a480:	fb06 4603 	mla	r6, r6, r3, r4
 800a484:	f04f 0e01 	mov.w	lr, #1
 800a488:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a48c:	e7e8      	b.n	800a460 <_strtol_l.constprop.0+0x6c>
 800a48e:	2c2b      	cmp	r4, #43	; 0x2b
 800a490:	bf04      	itt	eq
 800a492:	782c      	ldrbeq	r4, [r5, #0]
 800a494:	1cb5      	addeq	r5, r6, #2
 800a496:	e7ca      	b.n	800a42e <_strtol_l.constprop.0+0x3a>
 800a498:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a49c:	f1bc 0f19 	cmp.w	ip, #25
 800a4a0:	d801      	bhi.n	800a4a6 <_strtol_l.constprop.0+0xb2>
 800a4a2:	3c37      	subs	r4, #55	; 0x37
 800a4a4:	e7e2      	b.n	800a46c <_strtol_l.constprop.0+0x78>
 800a4a6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a4aa:	f1bc 0f19 	cmp.w	ip, #25
 800a4ae:	d804      	bhi.n	800a4ba <_strtol_l.constprop.0+0xc6>
 800a4b0:	3c57      	subs	r4, #87	; 0x57
 800a4b2:	e7db      	b.n	800a46c <_strtol_l.constprop.0+0x78>
 800a4b4:	f04f 3eff 	mov.w	lr, #4294967295
 800a4b8:	e7e6      	b.n	800a488 <_strtol_l.constprop.0+0x94>
 800a4ba:	f1be 3fff 	cmp.w	lr, #4294967295
 800a4be:	d105      	bne.n	800a4cc <_strtol_l.constprop.0+0xd8>
 800a4c0:	2322      	movs	r3, #34	; 0x22
 800a4c2:	6003      	str	r3, [r0, #0]
 800a4c4:	4646      	mov	r6, r8
 800a4c6:	b942      	cbnz	r2, 800a4da <_strtol_l.constprop.0+0xe6>
 800a4c8:	4630      	mov	r0, r6
 800a4ca:	e79e      	b.n	800a40a <_strtol_l.constprop.0+0x16>
 800a4cc:	b107      	cbz	r7, 800a4d0 <_strtol_l.constprop.0+0xdc>
 800a4ce:	4276      	negs	r6, r6
 800a4d0:	2a00      	cmp	r2, #0
 800a4d2:	d0f9      	beq.n	800a4c8 <_strtol_l.constprop.0+0xd4>
 800a4d4:	f1be 0f00 	cmp.w	lr, #0
 800a4d8:	d000      	beq.n	800a4dc <_strtol_l.constprop.0+0xe8>
 800a4da:	1e69      	subs	r1, r5, #1
 800a4dc:	6011      	str	r1, [r2, #0]
 800a4de:	e7f3      	b.n	800a4c8 <_strtol_l.constprop.0+0xd4>
 800a4e0:	2430      	movs	r4, #48	; 0x30
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d1b1      	bne.n	800a44a <_strtol_l.constprop.0+0x56>
 800a4e6:	2308      	movs	r3, #8
 800a4e8:	e7af      	b.n	800a44a <_strtol_l.constprop.0+0x56>
 800a4ea:	2c30      	cmp	r4, #48	; 0x30
 800a4ec:	d0a5      	beq.n	800a43a <_strtol_l.constprop.0+0x46>
 800a4ee:	230a      	movs	r3, #10
 800a4f0:	e7ab      	b.n	800a44a <_strtol_l.constprop.0+0x56>
 800a4f2:	bf00      	nop
 800a4f4:	0800c63d 	.word	0x0800c63d

0800a4f8 <_strtol_r>:
 800a4f8:	f7ff bf7c 	b.w	800a3f4 <_strtol_l.constprop.0>

0800a4fc <__ascii_wctomb>:
 800a4fc:	b149      	cbz	r1, 800a512 <__ascii_wctomb+0x16>
 800a4fe:	2aff      	cmp	r2, #255	; 0xff
 800a500:	bf85      	ittet	hi
 800a502:	238a      	movhi	r3, #138	; 0x8a
 800a504:	6003      	strhi	r3, [r0, #0]
 800a506:	700a      	strbls	r2, [r1, #0]
 800a508:	f04f 30ff 	movhi.w	r0, #4294967295
 800a50c:	bf98      	it	ls
 800a50e:	2001      	movls	r0, #1
 800a510:	4770      	bx	lr
 800a512:	4608      	mov	r0, r1
 800a514:	4770      	bx	lr

0800a516 <__ssputs_r>:
 800a516:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a51a:	688e      	ldr	r6, [r1, #8]
 800a51c:	461f      	mov	r7, r3
 800a51e:	42be      	cmp	r6, r7
 800a520:	680b      	ldr	r3, [r1, #0]
 800a522:	4682      	mov	sl, r0
 800a524:	460c      	mov	r4, r1
 800a526:	4690      	mov	r8, r2
 800a528:	d82c      	bhi.n	800a584 <__ssputs_r+0x6e>
 800a52a:	898a      	ldrh	r2, [r1, #12]
 800a52c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a530:	d026      	beq.n	800a580 <__ssputs_r+0x6a>
 800a532:	6965      	ldr	r5, [r4, #20]
 800a534:	6909      	ldr	r1, [r1, #16]
 800a536:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a53a:	eba3 0901 	sub.w	r9, r3, r1
 800a53e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a542:	1c7b      	adds	r3, r7, #1
 800a544:	444b      	add	r3, r9
 800a546:	106d      	asrs	r5, r5, #1
 800a548:	429d      	cmp	r5, r3
 800a54a:	bf38      	it	cc
 800a54c:	461d      	movcc	r5, r3
 800a54e:	0553      	lsls	r3, r2, #21
 800a550:	d527      	bpl.n	800a5a2 <__ssputs_r+0x8c>
 800a552:	4629      	mov	r1, r5
 800a554:	f7ff fa02 	bl	800995c <_malloc_r>
 800a558:	4606      	mov	r6, r0
 800a55a:	b360      	cbz	r0, 800a5b6 <__ssputs_r+0xa0>
 800a55c:	6921      	ldr	r1, [r4, #16]
 800a55e:	464a      	mov	r2, r9
 800a560:	f7fd ff95 	bl	800848e <memcpy>
 800a564:	89a3      	ldrh	r3, [r4, #12]
 800a566:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a56a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a56e:	81a3      	strh	r3, [r4, #12]
 800a570:	6126      	str	r6, [r4, #16]
 800a572:	6165      	str	r5, [r4, #20]
 800a574:	444e      	add	r6, r9
 800a576:	eba5 0509 	sub.w	r5, r5, r9
 800a57a:	6026      	str	r6, [r4, #0]
 800a57c:	60a5      	str	r5, [r4, #8]
 800a57e:	463e      	mov	r6, r7
 800a580:	42be      	cmp	r6, r7
 800a582:	d900      	bls.n	800a586 <__ssputs_r+0x70>
 800a584:	463e      	mov	r6, r7
 800a586:	6820      	ldr	r0, [r4, #0]
 800a588:	4632      	mov	r2, r6
 800a58a:	4641      	mov	r1, r8
 800a58c:	f000 fba4 	bl	800acd8 <memmove>
 800a590:	68a3      	ldr	r3, [r4, #8]
 800a592:	1b9b      	subs	r3, r3, r6
 800a594:	60a3      	str	r3, [r4, #8]
 800a596:	6823      	ldr	r3, [r4, #0]
 800a598:	4433      	add	r3, r6
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	2000      	movs	r0, #0
 800a59e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5a2:	462a      	mov	r2, r5
 800a5a4:	f000 fbf6 	bl	800ad94 <_realloc_r>
 800a5a8:	4606      	mov	r6, r0
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d1e0      	bne.n	800a570 <__ssputs_r+0x5a>
 800a5ae:	6921      	ldr	r1, [r4, #16]
 800a5b0:	4650      	mov	r0, sl
 800a5b2:	f7fe fe07 	bl	80091c4 <_free_r>
 800a5b6:	230c      	movs	r3, #12
 800a5b8:	f8ca 3000 	str.w	r3, [sl]
 800a5bc:	89a3      	ldrh	r3, [r4, #12]
 800a5be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5c2:	81a3      	strh	r3, [r4, #12]
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	e7e9      	b.n	800a59e <__ssputs_r+0x88>
	...

0800a5cc <_svfiprintf_r>:
 800a5cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5d0:	4698      	mov	r8, r3
 800a5d2:	898b      	ldrh	r3, [r1, #12]
 800a5d4:	061b      	lsls	r3, r3, #24
 800a5d6:	b09d      	sub	sp, #116	; 0x74
 800a5d8:	4607      	mov	r7, r0
 800a5da:	460d      	mov	r5, r1
 800a5dc:	4614      	mov	r4, r2
 800a5de:	d50e      	bpl.n	800a5fe <_svfiprintf_r+0x32>
 800a5e0:	690b      	ldr	r3, [r1, #16]
 800a5e2:	b963      	cbnz	r3, 800a5fe <_svfiprintf_r+0x32>
 800a5e4:	2140      	movs	r1, #64	; 0x40
 800a5e6:	f7ff f9b9 	bl	800995c <_malloc_r>
 800a5ea:	6028      	str	r0, [r5, #0]
 800a5ec:	6128      	str	r0, [r5, #16]
 800a5ee:	b920      	cbnz	r0, 800a5fa <_svfiprintf_r+0x2e>
 800a5f0:	230c      	movs	r3, #12
 800a5f2:	603b      	str	r3, [r7, #0]
 800a5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f8:	e0d0      	b.n	800a79c <_svfiprintf_r+0x1d0>
 800a5fa:	2340      	movs	r3, #64	; 0x40
 800a5fc:	616b      	str	r3, [r5, #20]
 800a5fe:	2300      	movs	r3, #0
 800a600:	9309      	str	r3, [sp, #36]	; 0x24
 800a602:	2320      	movs	r3, #32
 800a604:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a608:	f8cd 800c 	str.w	r8, [sp, #12]
 800a60c:	2330      	movs	r3, #48	; 0x30
 800a60e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a7b4 <_svfiprintf_r+0x1e8>
 800a612:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a616:	f04f 0901 	mov.w	r9, #1
 800a61a:	4623      	mov	r3, r4
 800a61c:	469a      	mov	sl, r3
 800a61e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a622:	b10a      	cbz	r2, 800a628 <_svfiprintf_r+0x5c>
 800a624:	2a25      	cmp	r2, #37	; 0x25
 800a626:	d1f9      	bne.n	800a61c <_svfiprintf_r+0x50>
 800a628:	ebba 0b04 	subs.w	fp, sl, r4
 800a62c:	d00b      	beq.n	800a646 <_svfiprintf_r+0x7a>
 800a62e:	465b      	mov	r3, fp
 800a630:	4622      	mov	r2, r4
 800a632:	4629      	mov	r1, r5
 800a634:	4638      	mov	r0, r7
 800a636:	f7ff ff6e 	bl	800a516 <__ssputs_r>
 800a63a:	3001      	adds	r0, #1
 800a63c:	f000 80a9 	beq.w	800a792 <_svfiprintf_r+0x1c6>
 800a640:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a642:	445a      	add	r2, fp
 800a644:	9209      	str	r2, [sp, #36]	; 0x24
 800a646:	f89a 3000 	ldrb.w	r3, [sl]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	f000 80a1 	beq.w	800a792 <_svfiprintf_r+0x1c6>
 800a650:	2300      	movs	r3, #0
 800a652:	f04f 32ff 	mov.w	r2, #4294967295
 800a656:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a65a:	f10a 0a01 	add.w	sl, sl, #1
 800a65e:	9304      	str	r3, [sp, #16]
 800a660:	9307      	str	r3, [sp, #28]
 800a662:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a666:	931a      	str	r3, [sp, #104]	; 0x68
 800a668:	4654      	mov	r4, sl
 800a66a:	2205      	movs	r2, #5
 800a66c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a670:	4850      	ldr	r0, [pc, #320]	; (800a7b4 <_svfiprintf_r+0x1e8>)
 800a672:	f7f5 fdcd 	bl	8000210 <memchr>
 800a676:	9a04      	ldr	r2, [sp, #16]
 800a678:	b9d8      	cbnz	r0, 800a6b2 <_svfiprintf_r+0xe6>
 800a67a:	06d0      	lsls	r0, r2, #27
 800a67c:	bf44      	itt	mi
 800a67e:	2320      	movmi	r3, #32
 800a680:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a684:	0711      	lsls	r1, r2, #28
 800a686:	bf44      	itt	mi
 800a688:	232b      	movmi	r3, #43	; 0x2b
 800a68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a68e:	f89a 3000 	ldrb.w	r3, [sl]
 800a692:	2b2a      	cmp	r3, #42	; 0x2a
 800a694:	d015      	beq.n	800a6c2 <_svfiprintf_r+0xf6>
 800a696:	9a07      	ldr	r2, [sp, #28]
 800a698:	4654      	mov	r4, sl
 800a69a:	2000      	movs	r0, #0
 800a69c:	f04f 0c0a 	mov.w	ip, #10
 800a6a0:	4621      	mov	r1, r4
 800a6a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6a6:	3b30      	subs	r3, #48	; 0x30
 800a6a8:	2b09      	cmp	r3, #9
 800a6aa:	d94d      	bls.n	800a748 <_svfiprintf_r+0x17c>
 800a6ac:	b1b0      	cbz	r0, 800a6dc <_svfiprintf_r+0x110>
 800a6ae:	9207      	str	r2, [sp, #28]
 800a6b0:	e014      	b.n	800a6dc <_svfiprintf_r+0x110>
 800a6b2:	eba0 0308 	sub.w	r3, r0, r8
 800a6b6:	fa09 f303 	lsl.w	r3, r9, r3
 800a6ba:	4313      	orrs	r3, r2
 800a6bc:	9304      	str	r3, [sp, #16]
 800a6be:	46a2      	mov	sl, r4
 800a6c0:	e7d2      	b.n	800a668 <_svfiprintf_r+0x9c>
 800a6c2:	9b03      	ldr	r3, [sp, #12]
 800a6c4:	1d19      	adds	r1, r3, #4
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	9103      	str	r1, [sp, #12]
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	bfbb      	ittet	lt
 800a6ce:	425b      	neglt	r3, r3
 800a6d0:	f042 0202 	orrlt.w	r2, r2, #2
 800a6d4:	9307      	strge	r3, [sp, #28]
 800a6d6:	9307      	strlt	r3, [sp, #28]
 800a6d8:	bfb8      	it	lt
 800a6da:	9204      	strlt	r2, [sp, #16]
 800a6dc:	7823      	ldrb	r3, [r4, #0]
 800a6de:	2b2e      	cmp	r3, #46	; 0x2e
 800a6e0:	d10c      	bne.n	800a6fc <_svfiprintf_r+0x130>
 800a6e2:	7863      	ldrb	r3, [r4, #1]
 800a6e4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6e6:	d134      	bne.n	800a752 <_svfiprintf_r+0x186>
 800a6e8:	9b03      	ldr	r3, [sp, #12]
 800a6ea:	1d1a      	adds	r2, r3, #4
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	9203      	str	r2, [sp, #12]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	bfb8      	it	lt
 800a6f4:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6f8:	3402      	adds	r4, #2
 800a6fa:	9305      	str	r3, [sp, #20]
 800a6fc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a7c4 <_svfiprintf_r+0x1f8>
 800a700:	7821      	ldrb	r1, [r4, #0]
 800a702:	2203      	movs	r2, #3
 800a704:	4650      	mov	r0, sl
 800a706:	f7f5 fd83 	bl	8000210 <memchr>
 800a70a:	b138      	cbz	r0, 800a71c <_svfiprintf_r+0x150>
 800a70c:	9b04      	ldr	r3, [sp, #16]
 800a70e:	eba0 000a 	sub.w	r0, r0, sl
 800a712:	2240      	movs	r2, #64	; 0x40
 800a714:	4082      	lsls	r2, r0
 800a716:	4313      	orrs	r3, r2
 800a718:	3401      	adds	r4, #1
 800a71a:	9304      	str	r3, [sp, #16]
 800a71c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a720:	4825      	ldr	r0, [pc, #148]	; (800a7b8 <_svfiprintf_r+0x1ec>)
 800a722:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a726:	2206      	movs	r2, #6
 800a728:	f7f5 fd72 	bl	8000210 <memchr>
 800a72c:	2800      	cmp	r0, #0
 800a72e:	d038      	beq.n	800a7a2 <_svfiprintf_r+0x1d6>
 800a730:	4b22      	ldr	r3, [pc, #136]	; (800a7bc <_svfiprintf_r+0x1f0>)
 800a732:	bb1b      	cbnz	r3, 800a77c <_svfiprintf_r+0x1b0>
 800a734:	9b03      	ldr	r3, [sp, #12]
 800a736:	3307      	adds	r3, #7
 800a738:	f023 0307 	bic.w	r3, r3, #7
 800a73c:	3308      	adds	r3, #8
 800a73e:	9303      	str	r3, [sp, #12]
 800a740:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a742:	4433      	add	r3, r6
 800a744:	9309      	str	r3, [sp, #36]	; 0x24
 800a746:	e768      	b.n	800a61a <_svfiprintf_r+0x4e>
 800a748:	fb0c 3202 	mla	r2, ip, r2, r3
 800a74c:	460c      	mov	r4, r1
 800a74e:	2001      	movs	r0, #1
 800a750:	e7a6      	b.n	800a6a0 <_svfiprintf_r+0xd4>
 800a752:	2300      	movs	r3, #0
 800a754:	3401      	adds	r4, #1
 800a756:	9305      	str	r3, [sp, #20]
 800a758:	4619      	mov	r1, r3
 800a75a:	f04f 0c0a 	mov.w	ip, #10
 800a75e:	4620      	mov	r0, r4
 800a760:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a764:	3a30      	subs	r2, #48	; 0x30
 800a766:	2a09      	cmp	r2, #9
 800a768:	d903      	bls.n	800a772 <_svfiprintf_r+0x1a6>
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d0c6      	beq.n	800a6fc <_svfiprintf_r+0x130>
 800a76e:	9105      	str	r1, [sp, #20]
 800a770:	e7c4      	b.n	800a6fc <_svfiprintf_r+0x130>
 800a772:	fb0c 2101 	mla	r1, ip, r1, r2
 800a776:	4604      	mov	r4, r0
 800a778:	2301      	movs	r3, #1
 800a77a:	e7f0      	b.n	800a75e <_svfiprintf_r+0x192>
 800a77c:	ab03      	add	r3, sp, #12
 800a77e:	9300      	str	r3, [sp, #0]
 800a780:	462a      	mov	r2, r5
 800a782:	4b0f      	ldr	r3, [pc, #60]	; (800a7c0 <_svfiprintf_r+0x1f4>)
 800a784:	a904      	add	r1, sp, #16
 800a786:	4638      	mov	r0, r7
 800a788:	f7fc fed0 	bl	800752c <_printf_float>
 800a78c:	1c42      	adds	r2, r0, #1
 800a78e:	4606      	mov	r6, r0
 800a790:	d1d6      	bne.n	800a740 <_svfiprintf_r+0x174>
 800a792:	89ab      	ldrh	r3, [r5, #12]
 800a794:	065b      	lsls	r3, r3, #25
 800a796:	f53f af2d 	bmi.w	800a5f4 <_svfiprintf_r+0x28>
 800a79a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a79c:	b01d      	add	sp, #116	; 0x74
 800a79e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7a2:	ab03      	add	r3, sp, #12
 800a7a4:	9300      	str	r3, [sp, #0]
 800a7a6:	462a      	mov	r2, r5
 800a7a8:	4b05      	ldr	r3, [pc, #20]	; (800a7c0 <_svfiprintf_r+0x1f4>)
 800a7aa:	a904      	add	r1, sp, #16
 800a7ac:	4638      	mov	r0, r7
 800a7ae:	f7fd f961 	bl	8007a74 <_printf_i>
 800a7b2:	e7eb      	b.n	800a78c <_svfiprintf_r+0x1c0>
 800a7b4:	0800c73d 	.word	0x0800c73d
 800a7b8:	0800c747 	.word	0x0800c747
 800a7bc:	0800752d 	.word	0x0800752d
 800a7c0:	0800a517 	.word	0x0800a517
 800a7c4:	0800c743 	.word	0x0800c743

0800a7c8 <__sfputc_r>:
 800a7c8:	6893      	ldr	r3, [r2, #8]
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	b410      	push	{r4}
 800a7d0:	6093      	str	r3, [r2, #8]
 800a7d2:	da08      	bge.n	800a7e6 <__sfputc_r+0x1e>
 800a7d4:	6994      	ldr	r4, [r2, #24]
 800a7d6:	42a3      	cmp	r3, r4
 800a7d8:	db01      	blt.n	800a7de <__sfputc_r+0x16>
 800a7da:	290a      	cmp	r1, #10
 800a7dc:	d103      	bne.n	800a7e6 <__sfputc_r+0x1e>
 800a7de:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7e2:	f000 b9e3 	b.w	800abac <__swbuf_r>
 800a7e6:	6813      	ldr	r3, [r2, #0]
 800a7e8:	1c58      	adds	r0, r3, #1
 800a7ea:	6010      	str	r0, [r2, #0]
 800a7ec:	7019      	strb	r1, [r3, #0]
 800a7ee:	4608      	mov	r0, r1
 800a7f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7f4:	4770      	bx	lr

0800a7f6 <__sfputs_r>:
 800a7f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	460f      	mov	r7, r1
 800a7fc:	4614      	mov	r4, r2
 800a7fe:	18d5      	adds	r5, r2, r3
 800a800:	42ac      	cmp	r4, r5
 800a802:	d101      	bne.n	800a808 <__sfputs_r+0x12>
 800a804:	2000      	movs	r0, #0
 800a806:	e007      	b.n	800a818 <__sfputs_r+0x22>
 800a808:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a80c:	463a      	mov	r2, r7
 800a80e:	4630      	mov	r0, r6
 800a810:	f7ff ffda 	bl	800a7c8 <__sfputc_r>
 800a814:	1c43      	adds	r3, r0, #1
 800a816:	d1f3      	bne.n	800a800 <__sfputs_r+0xa>
 800a818:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a81c <_vfiprintf_r>:
 800a81c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a820:	460d      	mov	r5, r1
 800a822:	b09d      	sub	sp, #116	; 0x74
 800a824:	4614      	mov	r4, r2
 800a826:	4698      	mov	r8, r3
 800a828:	4606      	mov	r6, r0
 800a82a:	b118      	cbz	r0, 800a834 <_vfiprintf_r+0x18>
 800a82c:	6a03      	ldr	r3, [r0, #32]
 800a82e:	b90b      	cbnz	r3, 800a834 <_vfiprintf_r+0x18>
 800a830:	f7fd fcde 	bl	80081f0 <__sinit>
 800a834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a836:	07d9      	lsls	r1, r3, #31
 800a838:	d405      	bmi.n	800a846 <_vfiprintf_r+0x2a>
 800a83a:	89ab      	ldrh	r3, [r5, #12]
 800a83c:	059a      	lsls	r2, r3, #22
 800a83e:	d402      	bmi.n	800a846 <_vfiprintf_r+0x2a>
 800a840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a842:	f7fd fe22 	bl	800848a <__retarget_lock_acquire_recursive>
 800a846:	89ab      	ldrh	r3, [r5, #12]
 800a848:	071b      	lsls	r3, r3, #28
 800a84a:	d501      	bpl.n	800a850 <_vfiprintf_r+0x34>
 800a84c:	692b      	ldr	r3, [r5, #16]
 800a84e:	b99b      	cbnz	r3, 800a878 <_vfiprintf_r+0x5c>
 800a850:	4629      	mov	r1, r5
 800a852:	4630      	mov	r0, r6
 800a854:	f000 f9e8 	bl	800ac28 <__swsetup_r>
 800a858:	b170      	cbz	r0, 800a878 <_vfiprintf_r+0x5c>
 800a85a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a85c:	07dc      	lsls	r4, r3, #31
 800a85e:	d504      	bpl.n	800a86a <_vfiprintf_r+0x4e>
 800a860:	f04f 30ff 	mov.w	r0, #4294967295
 800a864:	b01d      	add	sp, #116	; 0x74
 800a866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	0598      	lsls	r0, r3, #22
 800a86e:	d4f7      	bmi.n	800a860 <_vfiprintf_r+0x44>
 800a870:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a872:	f7fd fe0b 	bl	800848c <__retarget_lock_release_recursive>
 800a876:	e7f3      	b.n	800a860 <_vfiprintf_r+0x44>
 800a878:	2300      	movs	r3, #0
 800a87a:	9309      	str	r3, [sp, #36]	; 0x24
 800a87c:	2320      	movs	r3, #32
 800a87e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a882:	f8cd 800c 	str.w	r8, [sp, #12]
 800a886:	2330      	movs	r3, #48	; 0x30
 800a888:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aa3c <_vfiprintf_r+0x220>
 800a88c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a890:	f04f 0901 	mov.w	r9, #1
 800a894:	4623      	mov	r3, r4
 800a896:	469a      	mov	sl, r3
 800a898:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a89c:	b10a      	cbz	r2, 800a8a2 <_vfiprintf_r+0x86>
 800a89e:	2a25      	cmp	r2, #37	; 0x25
 800a8a0:	d1f9      	bne.n	800a896 <_vfiprintf_r+0x7a>
 800a8a2:	ebba 0b04 	subs.w	fp, sl, r4
 800a8a6:	d00b      	beq.n	800a8c0 <_vfiprintf_r+0xa4>
 800a8a8:	465b      	mov	r3, fp
 800a8aa:	4622      	mov	r2, r4
 800a8ac:	4629      	mov	r1, r5
 800a8ae:	4630      	mov	r0, r6
 800a8b0:	f7ff ffa1 	bl	800a7f6 <__sfputs_r>
 800a8b4:	3001      	adds	r0, #1
 800a8b6:	f000 80a9 	beq.w	800aa0c <_vfiprintf_r+0x1f0>
 800a8ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8bc:	445a      	add	r2, fp
 800a8be:	9209      	str	r2, [sp, #36]	; 0x24
 800a8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	f000 80a1 	beq.w	800aa0c <_vfiprintf_r+0x1f0>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a8d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8d4:	f10a 0a01 	add.w	sl, sl, #1
 800a8d8:	9304      	str	r3, [sp, #16]
 800a8da:	9307      	str	r3, [sp, #28]
 800a8dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8e0:	931a      	str	r3, [sp, #104]	; 0x68
 800a8e2:	4654      	mov	r4, sl
 800a8e4:	2205      	movs	r2, #5
 800a8e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8ea:	4854      	ldr	r0, [pc, #336]	; (800aa3c <_vfiprintf_r+0x220>)
 800a8ec:	f7f5 fc90 	bl	8000210 <memchr>
 800a8f0:	9a04      	ldr	r2, [sp, #16]
 800a8f2:	b9d8      	cbnz	r0, 800a92c <_vfiprintf_r+0x110>
 800a8f4:	06d1      	lsls	r1, r2, #27
 800a8f6:	bf44      	itt	mi
 800a8f8:	2320      	movmi	r3, #32
 800a8fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8fe:	0713      	lsls	r3, r2, #28
 800a900:	bf44      	itt	mi
 800a902:	232b      	movmi	r3, #43	; 0x2b
 800a904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a908:	f89a 3000 	ldrb.w	r3, [sl]
 800a90c:	2b2a      	cmp	r3, #42	; 0x2a
 800a90e:	d015      	beq.n	800a93c <_vfiprintf_r+0x120>
 800a910:	9a07      	ldr	r2, [sp, #28]
 800a912:	4654      	mov	r4, sl
 800a914:	2000      	movs	r0, #0
 800a916:	f04f 0c0a 	mov.w	ip, #10
 800a91a:	4621      	mov	r1, r4
 800a91c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a920:	3b30      	subs	r3, #48	; 0x30
 800a922:	2b09      	cmp	r3, #9
 800a924:	d94d      	bls.n	800a9c2 <_vfiprintf_r+0x1a6>
 800a926:	b1b0      	cbz	r0, 800a956 <_vfiprintf_r+0x13a>
 800a928:	9207      	str	r2, [sp, #28]
 800a92a:	e014      	b.n	800a956 <_vfiprintf_r+0x13a>
 800a92c:	eba0 0308 	sub.w	r3, r0, r8
 800a930:	fa09 f303 	lsl.w	r3, r9, r3
 800a934:	4313      	orrs	r3, r2
 800a936:	9304      	str	r3, [sp, #16]
 800a938:	46a2      	mov	sl, r4
 800a93a:	e7d2      	b.n	800a8e2 <_vfiprintf_r+0xc6>
 800a93c:	9b03      	ldr	r3, [sp, #12]
 800a93e:	1d19      	adds	r1, r3, #4
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	9103      	str	r1, [sp, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	bfbb      	ittet	lt
 800a948:	425b      	neglt	r3, r3
 800a94a:	f042 0202 	orrlt.w	r2, r2, #2
 800a94e:	9307      	strge	r3, [sp, #28]
 800a950:	9307      	strlt	r3, [sp, #28]
 800a952:	bfb8      	it	lt
 800a954:	9204      	strlt	r2, [sp, #16]
 800a956:	7823      	ldrb	r3, [r4, #0]
 800a958:	2b2e      	cmp	r3, #46	; 0x2e
 800a95a:	d10c      	bne.n	800a976 <_vfiprintf_r+0x15a>
 800a95c:	7863      	ldrb	r3, [r4, #1]
 800a95e:	2b2a      	cmp	r3, #42	; 0x2a
 800a960:	d134      	bne.n	800a9cc <_vfiprintf_r+0x1b0>
 800a962:	9b03      	ldr	r3, [sp, #12]
 800a964:	1d1a      	adds	r2, r3, #4
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	9203      	str	r2, [sp, #12]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	bfb8      	it	lt
 800a96e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a972:	3402      	adds	r4, #2
 800a974:	9305      	str	r3, [sp, #20]
 800a976:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aa4c <_vfiprintf_r+0x230>
 800a97a:	7821      	ldrb	r1, [r4, #0]
 800a97c:	2203      	movs	r2, #3
 800a97e:	4650      	mov	r0, sl
 800a980:	f7f5 fc46 	bl	8000210 <memchr>
 800a984:	b138      	cbz	r0, 800a996 <_vfiprintf_r+0x17a>
 800a986:	9b04      	ldr	r3, [sp, #16]
 800a988:	eba0 000a 	sub.w	r0, r0, sl
 800a98c:	2240      	movs	r2, #64	; 0x40
 800a98e:	4082      	lsls	r2, r0
 800a990:	4313      	orrs	r3, r2
 800a992:	3401      	adds	r4, #1
 800a994:	9304      	str	r3, [sp, #16]
 800a996:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a99a:	4829      	ldr	r0, [pc, #164]	; (800aa40 <_vfiprintf_r+0x224>)
 800a99c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a9a0:	2206      	movs	r2, #6
 800a9a2:	f7f5 fc35 	bl	8000210 <memchr>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	d03f      	beq.n	800aa2a <_vfiprintf_r+0x20e>
 800a9aa:	4b26      	ldr	r3, [pc, #152]	; (800aa44 <_vfiprintf_r+0x228>)
 800a9ac:	bb1b      	cbnz	r3, 800a9f6 <_vfiprintf_r+0x1da>
 800a9ae:	9b03      	ldr	r3, [sp, #12]
 800a9b0:	3307      	adds	r3, #7
 800a9b2:	f023 0307 	bic.w	r3, r3, #7
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	9303      	str	r3, [sp, #12]
 800a9ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9bc:	443b      	add	r3, r7
 800a9be:	9309      	str	r3, [sp, #36]	; 0x24
 800a9c0:	e768      	b.n	800a894 <_vfiprintf_r+0x78>
 800a9c2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	2001      	movs	r0, #1
 800a9ca:	e7a6      	b.n	800a91a <_vfiprintf_r+0xfe>
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	3401      	adds	r4, #1
 800a9d0:	9305      	str	r3, [sp, #20]
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	f04f 0c0a 	mov.w	ip, #10
 800a9d8:	4620      	mov	r0, r4
 800a9da:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9de:	3a30      	subs	r2, #48	; 0x30
 800a9e0:	2a09      	cmp	r2, #9
 800a9e2:	d903      	bls.n	800a9ec <_vfiprintf_r+0x1d0>
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d0c6      	beq.n	800a976 <_vfiprintf_r+0x15a>
 800a9e8:	9105      	str	r1, [sp, #20]
 800a9ea:	e7c4      	b.n	800a976 <_vfiprintf_r+0x15a>
 800a9ec:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9f0:	4604      	mov	r4, r0
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	e7f0      	b.n	800a9d8 <_vfiprintf_r+0x1bc>
 800a9f6:	ab03      	add	r3, sp, #12
 800a9f8:	9300      	str	r3, [sp, #0]
 800a9fa:	462a      	mov	r2, r5
 800a9fc:	4b12      	ldr	r3, [pc, #72]	; (800aa48 <_vfiprintf_r+0x22c>)
 800a9fe:	a904      	add	r1, sp, #16
 800aa00:	4630      	mov	r0, r6
 800aa02:	f7fc fd93 	bl	800752c <_printf_float>
 800aa06:	4607      	mov	r7, r0
 800aa08:	1c78      	adds	r0, r7, #1
 800aa0a:	d1d6      	bne.n	800a9ba <_vfiprintf_r+0x19e>
 800aa0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aa0e:	07d9      	lsls	r1, r3, #31
 800aa10:	d405      	bmi.n	800aa1e <_vfiprintf_r+0x202>
 800aa12:	89ab      	ldrh	r3, [r5, #12]
 800aa14:	059a      	lsls	r2, r3, #22
 800aa16:	d402      	bmi.n	800aa1e <_vfiprintf_r+0x202>
 800aa18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa1a:	f7fd fd37 	bl	800848c <__retarget_lock_release_recursive>
 800aa1e:	89ab      	ldrh	r3, [r5, #12]
 800aa20:	065b      	lsls	r3, r3, #25
 800aa22:	f53f af1d 	bmi.w	800a860 <_vfiprintf_r+0x44>
 800aa26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa28:	e71c      	b.n	800a864 <_vfiprintf_r+0x48>
 800aa2a:	ab03      	add	r3, sp, #12
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	462a      	mov	r2, r5
 800aa30:	4b05      	ldr	r3, [pc, #20]	; (800aa48 <_vfiprintf_r+0x22c>)
 800aa32:	a904      	add	r1, sp, #16
 800aa34:	4630      	mov	r0, r6
 800aa36:	f7fd f81d 	bl	8007a74 <_printf_i>
 800aa3a:	e7e4      	b.n	800aa06 <_vfiprintf_r+0x1ea>
 800aa3c:	0800c73d 	.word	0x0800c73d
 800aa40:	0800c747 	.word	0x0800c747
 800aa44:	0800752d 	.word	0x0800752d
 800aa48:	0800a7f7 	.word	0x0800a7f7
 800aa4c:	0800c743 	.word	0x0800c743

0800aa50 <__sflush_r>:
 800aa50:	898a      	ldrh	r2, [r1, #12]
 800aa52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa56:	4605      	mov	r5, r0
 800aa58:	0710      	lsls	r0, r2, #28
 800aa5a:	460c      	mov	r4, r1
 800aa5c:	d458      	bmi.n	800ab10 <__sflush_r+0xc0>
 800aa5e:	684b      	ldr	r3, [r1, #4]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	dc05      	bgt.n	800aa70 <__sflush_r+0x20>
 800aa64:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dc02      	bgt.n	800aa70 <__sflush_r+0x20>
 800aa6a:	2000      	movs	r0, #0
 800aa6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa72:	2e00      	cmp	r6, #0
 800aa74:	d0f9      	beq.n	800aa6a <__sflush_r+0x1a>
 800aa76:	2300      	movs	r3, #0
 800aa78:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa7c:	682f      	ldr	r7, [r5, #0]
 800aa7e:	6a21      	ldr	r1, [r4, #32]
 800aa80:	602b      	str	r3, [r5, #0]
 800aa82:	d032      	beq.n	800aaea <__sflush_r+0x9a>
 800aa84:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa86:	89a3      	ldrh	r3, [r4, #12]
 800aa88:	075a      	lsls	r2, r3, #29
 800aa8a:	d505      	bpl.n	800aa98 <__sflush_r+0x48>
 800aa8c:	6863      	ldr	r3, [r4, #4]
 800aa8e:	1ac0      	subs	r0, r0, r3
 800aa90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa92:	b10b      	cbz	r3, 800aa98 <__sflush_r+0x48>
 800aa94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa96:	1ac0      	subs	r0, r0, r3
 800aa98:	2300      	movs	r3, #0
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa9e:	6a21      	ldr	r1, [r4, #32]
 800aaa0:	4628      	mov	r0, r5
 800aaa2:	47b0      	blx	r6
 800aaa4:	1c43      	adds	r3, r0, #1
 800aaa6:	89a3      	ldrh	r3, [r4, #12]
 800aaa8:	d106      	bne.n	800aab8 <__sflush_r+0x68>
 800aaaa:	6829      	ldr	r1, [r5, #0]
 800aaac:	291d      	cmp	r1, #29
 800aaae:	d82b      	bhi.n	800ab08 <__sflush_r+0xb8>
 800aab0:	4a29      	ldr	r2, [pc, #164]	; (800ab58 <__sflush_r+0x108>)
 800aab2:	410a      	asrs	r2, r1
 800aab4:	07d6      	lsls	r6, r2, #31
 800aab6:	d427      	bmi.n	800ab08 <__sflush_r+0xb8>
 800aab8:	2200      	movs	r2, #0
 800aaba:	6062      	str	r2, [r4, #4]
 800aabc:	04d9      	lsls	r1, r3, #19
 800aabe:	6922      	ldr	r2, [r4, #16]
 800aac0:	6022      	str	r2, [r4, #0]
 800aac2:	d504      	bpl.n	800aace <__sflush_r+0x7e>
 800aac4:	1c42      	adds	r2, r0, #1
 800aac6:	d101      	bne.n	800aacc <__sflush_r+0x7c>
 800aac8:	682b      	ldr	r3, [r5, #0]
 800aaca:	b903      	cbnz	r3, 800aace <__sflush_r+0x7e>
 800aacc:	6560      	str	r0, [r4, #84]	; 0x54
 800aace:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aad0:	602f      	str	r7, [r5, #0]
 800aad2:	2900      	cmp	r1, #0
 800aad4:	d0c9      	beq.n	800aa6a <__sflush_r+0x1a>
 800aad6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aada:	4299      	cmp	r1, r3
 800aadc:	d002      	beq.n	800aae4 <__sflush_r+0x94>
 800aade:	4628      	mov	r0, r5
 800aae0:	f7fe fb70 	bl	80091c4 <_free_r>
 800aae4:	2000      	movs	r0, #0
 800aae6:	6360      	str	r0, [r4, #52]	; 0x34
 800aae8:	e7c0      	b.n	800aa6c <__sflush_r+0x1c>
 800aaea:	2301      	movs	r3, #1
 800aaec:	4628      	mov	r0, r5
 800aaee:	47b0      	blx	r6
 800aaf0:	1c41      	adds	r1, r0, #1
 800aaf2:	d1c8      	bne.n	800aa86 <__sflush_r+0x36>
 800aaf4:	682b      	ldr	r3, [r5, #0]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d0c5      	beq.n	800aa86 <__sflush_r+0x36>
 800aafa:	2b1d      	cmp	r3, #29
 800aafc:	d001      	beq.n	800ab02 <__sflush_r+0xb2>
 800aafe:	2b16      	cmp	r3, #22
 800ab00:	d101      	bne.n	800ab06 <__sflush_r+0xb6>
 800ab02:	602f      	str	r7, [r5, #0]
 800ab04:	e7b1      	b.n	800aa6a <__sflush_r+0x1a>
 800ab06:	89a3      	ldrh	r3, [r4, #12]
 800ab08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab0c:	81a3      	strh	r3, [r4, #12]
 800ab0e:	e7ad      	b.n	800aa6c <__sflush_r+0x1c>
 800ab10:	690f      	ldr	r7, [r1, #16]
 800ab12:	2f00      	cmp	r7, #0
 800ab14:	d0a9      	beq.n	800aa6a <__sflush_r+0x1a>
 800ab16:	0793      	lsls	r3, r2, #30
 800ab18:	680e      	ldr	r6, [r1, #0]
 800ab1a:	bf08      	it	eq
 800ab1c:	694b      	ldreq	r3, [r1, #20]
 800ab1e:	600f      	str	r7, [r1, #0]
 800ab20:	bf18      	it	ne
 800ab22:	2300      	movne	r3, #0
 800ab24:	eba6 0807 	sub.w	r8, r6, r7
 800ab28:	608b      	str	r3, [r1, #8]
 800ab2a:	f1b8 0f00 	cmp.w	r8, #0
 800ab2e:	dd9c      	ble.n	800aa6a <__sflush_r+0x1a>
 800ab30:	6a21      	ldr	r1, [r4, #32]
 800ab32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab34:	4643      	mov	r3, r8
 800ab36:	463a      	mov	r2, r7
 800ab38:	4628      	mov	r0, r5
 800ab3a:	47b0      	blx	r6
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	dc06      	bgt.n	800ab4e <__sflush_r+0xfe>
 800ab40:	89a3      	ldrh	r3, [r4, #12]
 800ab42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab46:	81a3      	strh	r3, [r4, #12]
 800ab48:	f04f 30ff 	mov.w	r0, #4294967295
 800ab4c:	e78e      	b.n	800aa6c <__sflush_r+0x1c>
 800ab4e:	4407      	add	r7, r0
 800ab50:	eba8 0800 	sub.w	r8, r8, r0
 800ab54:	e7e9      	b.n	800ab2a <__sflush_r+0xda>
 800ab56:	bf00      	nop
 800ab58:	dfbffffe 	.word	0xdfbffffe

0800ab5c <_fflush_r>:
 800ab5c:	b538      	push	{r3, r4, r5, lr}
 800ab5e:	690b      	ldr	r3, [r1, #16]
 800ab60:	4605      	mov	r5, r0
 800ab62:	460c      	mov	r4, r1
 800ab64:	b913      	cbnz	r3, 800ab6c <_fflush_r+0x10>
 800ab66:	2500      	movs	r5, #0
 800ab68:	4628      	mov	r0, r5
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	b118      	cbz	r0, 800ab76 <_fflush_r+0x1a>
 800ab6e:	6a03      	ldr	r3, [r0, #32]
 800ab70:	b90b      	cbnz	r3, 800ab76 <_fflush_r+0x1a>
 800ab72:	f7fd fb3d 	bl	80081f0 <__sinit>
 800ab76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d0f3      	beq.n	800ab66 <_fflush_r+0xa>
 800ab7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab80:	07d0      	lsls	r0, r2, #31
 800ab82:	d404      	bmi.n	800ab8e <_fflush_r+0x32>
 800ab84:	0599      	lsls	r1, r3, #22
 800ab86:	d402      	bmi.n	800ab8e <_fflush_r+0x32>
 800ab88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab8a:	f7fd fc7e 	bl	800848a <__retarget_lock_acquire_recursive>
 800ab8e:	4628      	mov	r0, r5
 800ab90:	4621      	mov	r1, r4
 800ab92:	f7ff ff5d 	bl	800aa50 <__sflush_r>
 800ab96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab98:	07da      	lsls	r2, r3, #31
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	d4e4      	bmi.n	800ab68 <_fflush_r+0xc>
 800ab9e:	89a3      	ldrh	r3, [r4, #12]
 800aba0:	059b      	lsls	r3, r3, #22
 800aba2:	d4e1      	bmi.n	800ab68 <_fflush_r+0xc>
 800aba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800aba6:	f7fd fc71 	bl	800848c <__retarget_lock_release_recursive>
 800abaa:	e7dd      	b.n	800ab68 <_fflush_r+0xc>

0800abac <__swbuf_r>:
 800abac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abae:	460e      	mov	r6, r1
 800abb0:	4614      	mov	r4, r2
 800abb2:	4605      	mov	r5, r0
 800abb4:	b118      	cbz	r0, 800abbe <__swbuf_r+0x12>
 800abb6:	6a03      	ldr	r3, [r0, #32]
 800abb8:	b90b      	cbnz	r3, 800abbe <__swbuf_r+0x12>
 800abba:	f7fd fb19 	bl	80081f0 <__sinit>
 800abbe:	69a3      	ldr	r3, [r4, #24]
 800abc0:	60a3      	str	r3, [r4, #8]
 800abc2:	89a3      	ldrh	r3, [r4, #12]
 800abc4:	071a      	lsls	r2, r3, #28
 800abc6:	d525      	bpl.n	800ac14 <__swbuf_r+0x68>
 800abc8:	6923      	ldr	r3, [r4, #16]
 800abca:	b31b      	cbz	r3, 800ac14 <__swbuf_r+0x68>
 800abcc:	6823      	ldr	r3, [r4, #0]
 800abce:	6922      	ldr	r2, [r4, #16]
 800abd0:	1a98      	subs	r0, r3, r2
 800abd2:	6963      	ldr	r3, [r4, #20]
 800abd4:	b2f6      	uxtb	r6, r6
 800abd6:	4283      	cmp	r3, r0
 800abd8:	4637      	mov	r7, r6
 800abda:	dc04      	bgt.n	800abe6 <__swbuf_r+0x3a>
 800abdc:	4621      	mov	r1, r4
 800abde:	4628      	mov	r0, r5
 800abe0:	f7ff ffbc 	bl	800ab5c <_fflush_r>
 800abe4:	b9e0      	cbnz	r0, 800ac20 <__swbuf_r+0x74>
 800abe6:	68a3      	ldr	r3, [r4, #8]
 800abe8:	3b01      	subs	r3, #1
 800abea:	60a3      	str	r3, [r4, #8]
 800abec:	6823      	ldr	r3, [r4, #0]
 800abee:	1c5a      	adds	r2, r3, #1
 800abf0:	6022      	str	r2, [r4, #0]
 800abf2:	701e      	strb	r6, [r3, #0]
 800abf4:	6962      	ldr	r2, [r4, #20]
 800abf6:	1c43      	adds	r3, r0, #1
 800abf8:	429a      	cmp	r2, r3
 800abfa:	d004      	beq.n	800ac06 <__swbuf_r+0x5a>
 800abfc:	89a3      	ldrh	r3, [r4, #12]
 800abfe:	07db      	lsls	r3, r3, #31
 800ac00:	d506      	bpl.n	800ac10 <__swbuf_r+0x64>
 800ac02:	2e0a      	cmp	r6, #10
 800ac04:	d104      	bne.n	800ac10 <__swbuf_r+0x64>
 800ac06:	4621      	mov	r1, r4
 800ac08:	4628      	mov	r0, r5
 800ac0a:	f7ff ffa7 	bl	800ab5c <_fflush_r>
 800ac0e:	b938      	cbnz	r0, 800ac20 <__swbuf_r+0x74>
 800ac10:	4638      	mov	r0, r7
 800ac12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac14:	4621      	mov	r1, r4
 800ac16:	4628      	mov	r0, r5
 800ac18:	f000 f806 	bl	800ac28 <__swsetup_r>
 800ac1c:	2800      	cmp	r0, #0
 800ac1e:	d0d5      	beq.n	800abcc <__swbuf_r+0x20>
 800ac20:	f04f 37ff 	mov.w	r7, #4294967295
 800ac24:	e7f4      	b.n	800ac10 <__swbuf_r+0x64>
	...

0800ac28 <__swsetup_r>:
 800ac28:	b538      	push	{r3, r4, r5, lr}
 800ac2a:	4b2a      	ldr	r3, [pc, #168]	; (800acd4 <__swsetup_r+0xac>)
 800ac2c:	4605      	mov	r5, r0
 800ac2e:	6818      	ldr	r0, [r3, #0]
 800ac30:	460c      	mov	r4, r1
 800ac32:	b118      	cbz	r0, 800ac3c <__swsetup_r+0x14>
 800ac34:	6a03      	ldr	r3, [r0, #32]
 800ac36:	b90b      	cbnz	r3, 800ac3c <__swsetup_r+0x14>
 800ac38:	f7fd fada 	bl	80081f0 <__sinit>
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac42:	0718      	lsls	r0, r3, #28
 800ac44:	d422      	bmi.n	800ac8c <__swsetup_r+0x64>
 800ac46:	06d9      	lsls	r1, r3, #27
 800ac48:	d407      	bmi.n	800ac5a <__swsetup_r+0x32>
 800ac4a:	2309      	movs	r3, #9
 800ac4c:	602b      	str	r3, [r5, #0]
 800ac4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	f04f 30ff 	mov.w	r0, #4294967295
 800ac58:	e034      	b.n	800acc4 <__swsetup_r+0x9c>
 800ac5a:	0758      	lsls	r0, r3, #29
 800ac5c:	d512      	bpl.n	800ac84 <__swsetup_r+0x5c>
 800ac5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac60:	b141      	cbz	r1, 800ac74 <__swsetup_r+0x4c>
 800ac62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac66:	4299      	cmp	r1, r3
 800ac68:	d002      	beq.n	800ac70 <__swsetup_r+0x48>
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	f7fe faaa 	bl	80091c4 <_free_r>
 800ac70:	2300      	movs	r3, #0
 800ac72:	6363      	str	r3, [r4, #52]	; 0x34
 800ac74:	89a3      	ldrh	r3, [r4, #12]
 800ac76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac7a:	81a3      	strh	r3, [r4, #12]
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	6063      	str	r3, [r4, #4]
 800ac80:	6923      	ldr	r3, [r4, #16]
 800ac82:	6023      	str	r3, [r4, #0]
 800ac84:	89a3      	ldrh	r3, [r4, #12]
 800ac86:	f043 0308 	orr.w	r3, r3, #8
 800ac8a:	81a3      	strh	r3, [r4, #12]
 800ac8c:	6923      	ldr	r3, [r4, #16]
 800ac8e:	b94b      	cbnz	r3, 800aca4 <__swsetup_r+0x7c>
 800ac90:	89a3      	ldrh	r3, [r4, #12]
 800ac92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac9a:	d003      	beq.n	800aca4 <__swsetup_r+0x7c>
 800ac9c:	4621      	mov	r1, r4
 800ac9e:	4628      	mov	r0, r5
 800aca0:	f000 f8e0 	bl	800ae64 <__smakebuf_r>
 800aca4:	89a0      	ldrh	r0, [r4, #12]
 800aca6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800acaa:	f010 0301 	ands.w	r3, r0, #1
 800acae:	d00a      	beq.n	800acc6 <__swsetup_r+0x9e>
 800acb0:	2300      	movs	r3, #0
 800acb2:	60a3      	str	r3, [r4, #8]
 800acb4:	6963      	ldr	r3, [r4, #20]
 800acb6:	425b      	negs	r3, r3
 800acb8:	61a3      	str	r3, [r4, #24]
 800acba:	6923      	ldr	r3, [r4, #16]
 800acbc:	b943      	cbnz	r3, 800acd0 <__swsetup_r+0xa8>
 800acbe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acc2:	d1c4      	bne.n	800ac4e <__swsetup_r+0x26>
 800acc4:	bd38      	pop	{r3, r4, r5, pc}
 800acc6:	0781      	lsls	r1, r0, #30
 800acc8:	bf58      	it	pl
 800acca:	6963      	ldrpl	r3, [r4, #20]
 800accc:	60a3      	str	r3, [r4, #8]
 800acce:	e7f4      	b.n	800acba <__swsetup_r+0x92>
 800acd0:	2000      	movs	r0, #0
 800acd2:	e7f7      	b.n	800acc4 <__swsetup_r+0x9c>
 800acd4:	20000208 	.word	0x20000208

0800acd8 <memmove>:
 800acd8:	4288      	cmp	r0, r1
 800acda:	b510      	push	{r4, lr}
 800acdc:	eb01 0402 	add.w	r4, r1, r2
 800ace0:	d902      	bls.n	800ace8 <memmove+0x10>
 800ace2:	4284      	cmp	r4, r0
 800ace4:	4623      	mov	r3, r4
 800ace6:	d807      	bhi.n	800acf8 <memmove+0x20>
 800ace8:	1e43      	subs	r3, r0, #1
 800acea:	42a1      	cmp	r1, r4
 800acec:	d008      	beq.n	800ad00 <memmove+0x28>
 800acee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acf6:	e7f8      	b.n	800acea <memmove+0x12>
 800acf8:	4402      	add	r2, r0
 800acfa:	4601      	mov	r1, r0
 800acfc:	428a      	cmp	r2, r1
 800acfe:	d100      	bne.n	800ad02 <memmove+0x2a>
 800ad00:	bd10      	pop	{r4, pc}
 800ad02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ad06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ad0a:	e7f7      	b.n	800acfc <memmove+0x24>

0800ad0c <_sbrk_r>:
 800ad0c:	b538      	push	{r3, r4, r5, lr}
 800ad0e:	4d06      	ldr	r5, [pc, #24]	; (800ad28 <_sbrk_r+0x1c>)
 800ad10:	2300      	movs	r3, #0
 800ad12:	4604      	mov	r4, r0
 800ad14:	4608      	mov	r0, r1
 800ad16:	602b      	str	r3, [r5, #0]
 800ad18:	f7f8 f9fc 	bl	8003114 <_sbrk>
 800ad1c:	1c43      	adds	r3, r0, #1
 800ad1e:	d102      	bne.n	800ad26 <_sbrk_r+0x1a>
 800ad20:	682b      	ldr	r3, [r5, #0]
 800ad22:	b103      	cbz	r3, 800ad26 <_sbrk_r+0x1a>
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	bd38      	pop	{r3, r4, r5, pc}
 800ad28:	200007ec 	.word	0x200007ec

0800ad2c <__assert_func>:
 800ad2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad2e:	4614      	mov	r4, r2
 800ad30:	461a      	mov	r2, r3
 800ad32:	4b09      	ldr	r3, [pc, #36]	; (800ad58 <__assert_func+0x2c>)
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	4605      	mov	r5, r0
 800ad38:	68d8      	ldr	r0, [r3, #12]
 800ad3a:	b14c      	cbz	r4, 800ad50 <__assert_func+0x24>
 800ad3c:	4b07      	ldr	r3, [pc, #28]	; (800ad5c <__assert_func+0x30>)
 800ad3e:	9100      	str	r1, [sp, #0]
 800ad40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad44:	4906      	ldr	r1, [pc, #24]	; (800ad60 <__assert_func+0x34>)
 800ad46:	462b      	mov	r3, r5
 800ad48:	f000 f854 	bl	800adf4 <fiprintf>
 800ad4c:	f000 f8e8 	bl	800af20 <abort>
 800ad50:	4b04      	ldr	r3, [pc, #16]	; (800ad64 <__assert_func+0x38>)
 800ad52:	461c      	mov	r4, r3
 800ad54:	e7f3      	b.n	800ad3e <__assert_func+0x12>
 800ad56:	bf00      	nop
 800ad58:	20000208 	.word	0x20000208
 800ad5c:	0800c74e 	.word	0x0800c74e
 800ad60:	0800c75b 	.word	0x0800c75b
 800ad64:	0800c789 	.word	0x0800c789

0800ad68 <_calloc_r>:
 800ad68:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad6a:	fba1 2402 	umull	r2, r4, r1, r2
 800ad6e:	b94c      	cbnz	r4, 800ad84 <_calloc_r+0x1c>
 800ad70:	4611      	mov	r1, r2
 800ad72:	9201      	str	r2, [sp, #4]
 800ad74:	f7fe fdf2 	bl	800995c <_malloc_r>
 800ad78:	9a01      	ldr	r2, [sp, #4]
 800ad7a:	4605      	mov	r5, r0
 800ad7c:	b930      	cbnz	r0, 800ad8c <_calloc_r+0x24>
 800ad7e:	4628      	mov	r0, r5
 800ad80:	b003      	add	sp, #12
 800ad82:	bd30      	pop	{r4, r5, pc}
 800ad84:	220c      	movs	r2, #12
 800ad86:	6002      	str	r2, [r0, #0]
 800ad88:	2500      	movs	r5, #0
 800ad8a:	e7f8      	b.n	800ad7e <_calloc_r+0x16>
 800ad8c:	4621      	mov	r1, r4
 800ad8e:	f7fd fada 	bl	8008346 <memset>
 800ad92:	e7f4      	b.n	800ad7e <_calloc_r+0x16>

0800ad94 <_realloc_r>:
 800ad94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad98:	4680      	mov	r8, r0
 800ad9a:	4614      	mov	r4, r2
 800ad9c:	460e      	mov	r6, r1
 800ad9e:	b921      	cbnz	r1, 800adaa <_realloc_r+0x16>
 800ada0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ada4:	4611      	mov	r1, r2
 800ada6:	f7fe bdd9 	b.w	800995c <_malloc_r>
 800adaa:	b92a      	cbnz	r2, 800adb8 <_realloc_r+0x24>
 800adac:	f7fe fa0a 	bl	80091c4 <_free_r>
 800adb0:	4625      	mov	r5, r4
 800adb2:	4628      	mov	r0, r5
 800adb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adb8:	f000 f8b9 	bl	800af2e <_malloc_usable_size_r>
 800adbc:	4284      	cmp	r4, r0
 800adbe:	4607      	mov	r7, r0
 800adc0:	d802      	bhi.n	800adc8 <_realloc_r+0x34>
 800adc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adc6:	d812      	bhi.n	800adee <_realloc_r+0x5a>
 800adc8:	4621      	mov	r1, r4
 800adca:	4640      	mov	r0, r8
 800adcc:	f7fe fdc6 	bl	800995c <_malloc_r>
 800add0:	4605      	mov	r5, r0
 800add2:	2800      	cmp	r0, #0
 800add4:	d0ed      	beq.n	800adb2 <_realloc_r+0x1e>
 800add6:	42bc      	cmp	r4, r7
 800add8:	4622      	mov	r2, r4
 800adda:	4631      	mov	r1, r6
 800addc:	bf28      	it	cs
 800adde:	463a      	movcs	r2, r7
 800ade0:	f7fd fb55 	bl	800848e <memcpy>
 800ade4:	4631      	mov	r1, r6
 800ade6:	4640      	mov	r0, r8
 800ade8:	f7fe f9ec 	bl	80091c4 <_free_r>
 800adec:	e7e1      	b.n	800adb2 <_realloc_r+0x1e>
 800adee:	4635      	mov	r5, r6
 800adf0:	e7df      	b.n	800adb2 <_realloc_r+0x1e>
	...

0800adf4 <fiprintf>:
 800adf4:	b40e      	push	{r1, r2, r3}
 800adf6:	b503      	push	{r0, r1, lr}
 800adf8:	4601      	mov	r1, r0
 800adfa:	ab03      	add	r3, sp, #12
 800adfc:	4805      	ldr	r0, [pc, #20]	; (800ae14 <fiprintf+0x20>)
 800adfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae02:	6800      	ldr	r0, [r0, #0]
 800ae04:	9301      	str	r3, [sp, #4]
 800ae06:	f7ff fd09 	bl	800a81c <_vfiprintf_r>
 800ae0a:	b002      	add	sp, #8
 800ae0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae10:	b003      	add	sp, #12
 800ae12:	4770      	bx	lr
 800ae14:	20000208 	.word	0x20000208

0800ae18 <__swhatbuf_r>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	460c      	mov	r4, r1
 800ae1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae20:	2900      	cmp	r1, #0
 800ae22:	b096      	sub	sp, #88	; 0x58
 800ae24:	4615      	mov	r5, r2
 800ae26:	461e      	mov	r6, r3
 800ae28:	da0d      	bge.n	800ae46 <__swhatbuf_r+0x2e>
 800ae2a:	89a3      	ldrh	r3, [r4, #12]
 800ae2c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae30:	f04f 0100 	mov.w	r1, #0
 800ae34:	bf0c      	ite	eq
 800ae36:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ae3a:	2340      	movne	r3, #64	; 0x40
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	6031      	str	r1, [r6, #0]
 800ae40:	602b      	str	r3, [r5, #0]
 800ae42:	b016      	add	sp, #88	; 0x58
 800ae44:	bd70      	pop	{r4, r5, r6, pc}
 800ae46:	466a      	mov	r2, sp
 800ae48:	f000 f848 	bl	800aedc <_fstat_r>
 800ae4c:	2800      	cmp	r0, #0
 800ae4e:	dbec      	blt.n	800ae2a <__swhatbuf_r+0x12>
 800ae50:	9901      	ldr	r1, [sp, #4]
 800ae52:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ae56:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ae5a:	4259      	negs	r1, r3
 800ae5c:	4159      	adcs	r1, r3
 800ae5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae62:	e7eb      	b.n	800ae3c <__swhatbuf_r+0x24>

0800ae64 <__smakebuf_r>:
 800ae64:	898b      	ldrh	r3, [r1, #12]
 800ae66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae68:	079d      	lsls	r5, r3, #30
 800ae6a:	4606      	mov	r6, r0
 800ae6c:	460c      	mov	r4, r1
 800ae6e:	d507      	bpl.n	800ae80 <__smakebuf_r+0x1c>
 800ae70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	6123      	str	r3, [r4, #16]
 800ae78:	2301      	movs	r3, #1
 800ae7a:	6163      	str	r3, [r4, #20]
 800ae7c:	b002      	add	sp, #8
 800ae7e:	bd70      	pop	{r4, r5, r6, pc}
 800ae80:	ab01      	add	r3, sp, #4
 800ae82:	466a      	mov	r2, sp
 800ae84:	f7ff ffc8 	bl	800ae18 <__swhatbuf_r>
 800ae88:	9900      	ldr	r1, [sp, #0]
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	4630      	mov	r0, r6
 800ae8e:	f7fe fd65 	bl	800995c <_malloc_r>
 800ae92:	b948      	cbnz	r0, 800aea8 <__smakebuf_r+0x44>
 800ae94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae98:	059a      	lsls	r2, r3, #22
 800ae9a:	d4ef      	bmi.n	800ae7c <__smakebuf_r+0x18>
 800ae9c:	f023 0303 	bic.w	r3, r3, #3
 800aea0:	f043 0302 	orr.w	r3, r3, #2
 800aea4:	81a3      	strh	r3, [r4, #12]
 800aea6:	e7e3      	b.n	800ae70 <__smakebuf_r+0xc>
 800aea8:	89a3      	ldrh	r3, [r4, #12]
 800aeaa:	6020      	str	r0, [r4, #0]
 800aeac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aeb0:	81a3      	strh	r3, [r4, #12]
 800aeb2:	9b00      	ldr	r3, [sp, #0]
 800aeb4:	6163      	str	r3, [r4, #20]
 800aeb6:	9b01      	ldr	r3, [sp, #4]
 800aeb8:	6120      	str	r0, [r4, #16]
 800aeba:	b15b      	cbz	r3, 800aed4 <__smakebuf_r+0x70>
 800aebc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aec0:	4630      	mov	r0, r6
 800aec2:	f000 f81d 	bl	800af00 <_isatty_r>
 800aec6:	b128      	cbz	r0, 800aed4 <__smakebuf_r+0x70>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	f023 0303 	bic.w	r3, r3, #3
 800aece:	f043 0301 	orr.w	r3, r3, #1
 800aed2:	81a3      	strh	r3, [r4, #12]
 800aed4:	89a3      	ldrh	r3, [r4, #12]
 800aed6:	431d      	orrs	r5, r3
 800aed8:	81a5      	strh	r5, [r4, #12]
 800aeda:	e7cf      	b.n	800ae7c <__smakebuf_r+0x18>

0800aedc <_fstat_r>:
 800aedc:	b538      	push	{r3, r4, r5, lr}
 800aede:	4d07      	ldr	r5, [pc, #28]	; (800aefc <_fstat_r+0x20>)
 800aee0:	2300      	movs	r3, #0
 800aee2:	4604      	mov	r4, r0
 800aee4:	4608      	mov	r0, r1
 800aee6:	4611      	mov	r1, r2
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	f7f8 f8ea 	bl	80030c2 <_fstat>
 800aeee:	1c43      	adds	r3, r0, #1
 800aef0:	d102      	bne.n	800aef8 <_fstat_r+0x1c>
 800aef2:	682b      	ldr	r3, [r5, #0]
 800aef4:	b103      	cbz	r3, 800aef8 <_fstat_r+0x1c>
 800aef6:	6023      	str	r3, [r4, #0]
 800aef8:	bd38      	pop	{r3, r4, r5, pc}
 800aefa:	bf00      	nop
 800aefc:	200007ec 	.word	0x200007ec

0800af00 <_isatty_r>:
 800af00:	b538      	push	{r3, r4, r5, lr}
 800af02:	4d06      	ldr	r5, [pc, #24]	; (800af1c <_isatty_r+0x1c>)
 800af04:	2300      	movs	r3, #0
 800af06:	4604      	mov	r4, r0
 800af08:	4608      	mov	r0, r1
 800af0a:	602b      	str	r3, [r5, #0]
 800af0c:	f7f8 f8e9 	bl	80030e2 <_isatty>
 800af10:	1c43      	adds	r3, r0, #1
 800af12:	d102      	bne.n	800af1a <_isatty_r+0x1a>
 800af14:	682b      	ldr	r3, [r5, #0]
 800af16:	b103      	cbz	r3, 800af1a <_isatty_r+0x1a>
 800af18:	6023      	str	r3, [r4, #0]
 800af1a:	bd38      	pop	{r3, r4, r5, pc}
 800af1c:	200007ec 	.word	0x200007ec

0800af20 <abort>:
 800af20:	b508      	push	{r3, lr}
 800af22:	2006      	movs	r0, #6
 800af24:	f000 f834 	bl	800af90 <raise>
 800af28:	2001      	movs	r0, #1
 800af2a:	f7f8 f87b 	bl	8003024 <_exit>

0800af2e <_malloc_usable_size_r>:
 800af2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af32:	1f18      	subs	r0, r3, #4
 800af34:	2b00      	cmp	r3, #0
 800af36:	bfbc      	itt	lt
 800af38:	580b      	ldrlt	r3, [r1, r0]
 800af3a:	18c0      	addlt	r0, r0, r3
 800af3c:	4770      	bx	lr

0800af3e <_raise_r>:
 800af3e:	291f      	cmp	r1, #31
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	4604      	mov	r4, r0
 800af44:	460d      	mov	r5, r1
 800af46:	d904      	bls.n	800af52 <_raise_r+0x14>
 800af48:	2316      	movs	r3, #22
 800af4a:	6003      	str	r3, [r0, #0]
 800af4c:	f04f 30ff 	mov.w	r0, #4294967295
 800af50:	bd38      	pop	{r3, r4, r5, pc}
 800af52:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af54:	b112      	cbz	r2, 800af5c <_raise_r+0x1e>
 800af56:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af5a:	b94b      	cbnz	r3, 800af70 <_raise_r+0x32>
 800af5c:	4620      	mov	r0, r4
 800af5e:	f000 f831 	bl	800afc4 <_getpid_r>
 800af62:	462a      	mov	r2, r5
 800af64:	4601      	mov	r1, r0
 800af66:	4620      	mov	r0, r4
 800af68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af6c:	f000 b818 	b.w	800afa0 <_kill_r>
 800af70:	2b01      	cmp	r3, #1
 800af72:	d00a      	beq.n	800af8a <_raise_r+0x4c>
 800af74:	1c59      	adds	r1, r3, #1
 800af76:	d103      	bne.n	800af80 <_raise_r+0x42>
 800af78:	2316      	movs	r3, #22
 800af7a:	6003      	str	r3, [r0, #0]
 800af7c:	2001      	movs	r0, #1
 800af7e:	e7e7      	b.n	800af50 <_raise_r+0x12>
 800af80:	2400      	movs	r4, #0
 800af82:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af86:	4628      	mov	r0, r5
 800af88:	4798      	blx	r3
 800af8a:	2000      	movs	r0, #0
 800af8c:	e7e0      	b.n	800af50 <_raise_r+0x12>
	...

0800af90 <raise>:
 800af90:	4b02      	ldr	r3, [pc, #8]	; (800af9c <raise+0xc>)
 800af92:	4601      	mov	r1, r0
 800af94:	6818      	ldr	r0, [r3, #0]
 800af96:	f7ff bfd2 	b.w	800af3e <_raise_r>
 800af9a:	bf00      	nop
 800af9c:	20000208 	.word	0x20000208

0800afa0 <_kill_r>:
 800afa0:	b538      	push	{r3, r4, r5, lr}
 800afa2:	4d07      	ldr	r5, [pc, #28]	; (800afc0 <_kill_r+0x20>)
 800afa4:	2300      	movs	r3, #0
 800afa6:	4604      	mov	r4, r0
 800afa8:	4608      	mov	r0, r1
 800afaa:	4611      	mov	r1, r2
 800afac:	602b      	str	r3, [r5, #0]
 800afae:	f7f8 f829 	bl	8003004 <_kill>
 800afb2:	1c43      	adds	r3, r0, #1
 800afb4:	d102      	bne.n	800afbc <_kill_r+0x1c>
 800afb6:	682b      	ldr	r3, [r5, #0]
 800afb8:	b103      	cbz	r3, 800afbc <_kill_r+0x1c>
 800afba:	6023      	str	r3, [r4, #0]
 800afbc:	bd38      	pop	{r3, r4, r5, pc}
 800afbe:	bf00      	nop
 800afc0:	200007ec 	.word	0x200007ec

0800afc4 <_getpid_r>:
 800afc4:	f7f8 b816 	b.w	8002ff4 <_getpid>

0800afc8 <sqrt>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	ed2d 8b02 	vpush	{d8}
 800afce:	ec55 4b10 	vmov	r4, r5, d0
 800afd2:	f000 f8d1 	bl	800b178 <__ieee754_sqrt>
 800afd6:	4622      	mov	r2, r4
 800afd8:	462b      	mov	r3, r5
 800afda:	4620      	mov	r0, r4
 800afdc:	4629      	mov	r1, r5
 800afde:	eeb0 8a40 	vmov.f32	s16, s0
 800afe2:	eef0 8a60 	vmov.f32	s17, s1
 800afe6:	f7f5 fdc1 	bl	8000b6c <__aeabi_dcmpun>
 800afea:	b990      	cbnz	r0, 800b012 <sqrt+0x4a>
 800afec:	2200      	movs	r2, #0
 800afee:	2300      	movs	r3, #0
 800aff0:	4620      	mov	r0, r4
 800aff2:	4629      	mov	r1, r5
 800aff4:	f7f5 fd92 	bl	8000b1c <__aeabi_dcmplt>
 800aff8:	b158      	cbz	r0, 800b012 <sqrt+0x4a>
 800affa:	f7fd fa1b 	bl	8008434 <__errno>
 800affe:	2321      	movs	r3, #33	; 0x21
 800b000:	6003      	str	r3, [r0, #0]
 800b002:	2200      	movs	r2, #0
 800b004:	2300      	movs	r3, #0
 800b006:	4610      	mov	r0, r2
 800b008:	4619      	mov	r1, r3
 800b00a:	f7f5 fc3f 	bl	800088c <__aeabi_ddiv>
 800b00e:	ec41 0b18 	vmov	d8, r0, r1
 800b012:	eeb0 0a48 	vmov.f32	s0, s16
 800b016:	eef0 0a68 	vmov.f32	s1, s17
 800b01a:	ecbd 8b02 	vpop	{d8}
 800b01e:	bd38      	pop	{r3, r4, r5, pc}

0800b020 <cos>:
 800b020:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b022:	ec53 2b10 	vmov	r2, r3, d0
 800b026:	4826      	ldr	r0, [pc, #152]	; (800b0c0 <cos+0xa0>)
 800b028:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b02c:	4281      	cmp	r1, r0
 800b02e:	dc06      	bgt.n	800b03e <cos+0x1e>
 800b030:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b0b8 <cos+0x98>
 800b034:	b005      	add	sp, #20
 800b036:	f85d eb04 	ldr.w	lr, [sp], #4
 800b03a:	f000 b979 	b.w	800b330 <__kernel_cos>
 800b03e:	4821      	ldr	r0, [pc, #132]	; (800b0c4 <cos+0xa4>)
 800b040:	4281      	cmp	r1, r0
 800b042:	dd09      	ble.n	800b058 <cos+0x38>
 800b044:	ee10 0a10 	vmov	r0, s0
 800b048:	4619      	mov	r1, r3
 800b04a:	f7f5 f93d 	bl	80002c8 <__aeabi_dsub>
 800b04e:	ec41 0b10 	vmov	d0, r0, r1
 800b052:	b005      	add	sp, #20
 800b054:	f85d fb04 	ldr.w	pc, [sp], #4
 800b058:	4668      	mov	r0, sp
 800b05a:	f000 faf1 	bl	800b640 <__ieee754_rem_pio2>
 800b05e:	f000 0003 	and.w	r0, r0, #3
 800b062:	2801      	cmp	r0, #1
 800b064:	d00b      	beq.n	800b07e <cos+0x5e>
 800b066:	2802      	cmp	r0, #2
 800b068:	d016      	beq.n	800b098 <cos+0x78>
 800b06a:	b9e0      	cbnz	r0, 800b0a6 <cos+0x86>
 800b06c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b070:	ed9d 0b00 	vldr	d0, [sp]
 800b074:	f000 f95c 	bl	800b330 <__kernel_cos>
 800b078:	ec51 0b10 	vmov	r0, r1, d0
 800b07c:	e7e7      	b.n	800b04e <cos+0x2e>
 800b07e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b082:	ed9d 0b00 	vldr	d0, [sp]
 800b086:	f000 fa1b 	bl	800b4c0 <__kernel_sin>
 800b08a:	ec53 2b10 	vmov	r2, r3, d0
 800b08e:	ee10 0a10 	vmov	r0, s0
 800b092:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b096:	e7da      	b.n	800b04e <cos+0x2e>
 800b098:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b09c:	ed9d 0b00 	vldr	d0, [sp]
 800b0a0:	f000 f946 	bl	800b330 <__kernel_cos>
 800b0a4:	e7f1      	b.n	800b08a <cos+0x6a>
 800b0a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0aa:	ed9d 0b00 	vldr	d0, [sp]
 800b0ae:	2001      	movs	r0, #1
 800b0b0:	f000 fa06 	bl	800b4c0 <__kernel_sin>
 800b0b4:	e7e0      	b.n	800b078 <cos+0x58>
 800b0b6:	bf00      	nop
	...
 800b0c0:	3fe921fb 	.word	0x3fe921fb
 800b0c4:	7fefffff 	.word	0x7fefffff

0800b0c8 <sin>:
 800b0c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0ca:	ec53 2b10 	vmov	r2, r3, d0
 800b0ce:	4828      	ldr	r0, [pc, #160]	; (800b170 <sin+0xa8>)
 800b0d0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0d4:	4281      	cmp	r1, r0
 800b0d6:	dc07      	bgt.n	800b0e8 <sin+0x20>
 800b0d8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b168 <sin+0xa0>
 800b0dc:	2000      	movs	r0, #0
 800b0de:	b005      	add	sp, #20
 800b0e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0e4:	f000 b9ec 	b.w	800b4c0 <__kernel_sin>
 800b0e8:	4822      	ldr	r0, [pc, #136]	; (800b174 <sin+0xac>)
 800b0ea:	4281      	cmp	r1, r0
 800b0ec:	dd09      	ble.n	800b102 <sin+0x3a>
 800b0ee:	ee10 0a10 	vmov	r0, s0
 800b0f2:	4619      	mov	r1, r3
 800b0f4:	f7f5 f8e8 	bl	80002c8 <__aeabi_dsub>
 800b0f8:	ec41 0b10 	vmov	d0, r0, r1
 800b0fc:	b005      	add	sp, #20
 800b0fe:	f85d fb04 	ldr.w	pc, [sp], #4
 800b102:	4668      	mov	r0, sp
 800b104:	f000 fa9c 	bl	800b640 <__ieee754_rem_pio2>
 800b108:	f000 0003 	and.w	r0, r0, #3
 800b10c:	2801      	cmp	r0, #1
 800b10e:	d00c      	beq.n	800b12a <sin+0x62>
 800b110:	2802      	cmp	r0, #2
 800b112:	d011      	beq.n	800b138 <sin+0x70>
 800b114:	b9f0      	cbnz	r0, 800b154 <sin+0x8c>
 800b116:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b11a:	ed9d 0b00 	vldr	d0, [sp]
 800b11e:	2001      	movs	r0, #1
 800b120:	f000 f9ce 	bl	800b4c0 <__kernel_sin>
 800b124:	ec51 0b10 	vmov	r0, r1, d0
 800b128:	e7e6      	b.n	800b0f8 <sin+0x30>
 800b12a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b12e:	ed9d 0b00 	vldr	d0, [sp]
 800b132:	f000 f8fd 	bl	800b330 <__kernel_cos>
 800b136:	e7f5      	b.n	800b124 <sin+0x5c>
 800b138:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b13c:	ed9d 0b00 	vldr	d0, [sp]
 800b140:	2001      	movs	r0, #1
 800b142:	f000 f9bd 	bl	800b4c0 <__kernel_sin>
 800b146:	ec53 2b10 	vmov	r2, r3, d0
 800b14a:	ee10 0a10 	vmov	r0, s0
 800b14e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b152:	e7d1      	b.n	800b0f8 <sin+0x30>
 800b154:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b158:	ed9d 0b00 	vldr	d0, [sp]
 800b15c:	f000 f8e8 	bl	800b330 <__kernel_cos>
 800b160:	e7f1      	b.n	800b146 <sin+0x7e>
 800b162:	bf00      	nop
 800b164:	f3af 8000 	nop.w
	...
 800b170:	3fe921fb 	.word	0x3fe921fb
 800b174:	7fefffff 	.word	0x7fefffff

0800b178 <__ieee754_sqrt>:
 800b178:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	ec55 4b10 	vmov	r4, r5, d0
 800b180:	4e67      	ldr	r6, [pc, #412]	; (800b320 <__ieee754_sqrt+0x1a8>)
 800b182:	43ae      	bics	r6, r5
 800b184:	ee10 0a10 	vmov	r0, s0
 800b188:	ee10 2a10 	vmov	r2, s0
 800b18c:	4629      	mov	r1, r5
 800b18e:	462b      	mov	r3, r5
 800b190:	d10d      	bne.n	800b1ae <__ieee754_sqrt+0x36>
 800b192:	f7f5 fa51 	bl	8000638 <__aeabi_dmul>
 800b196:	4602      	mov	r2, r0
 800b198:	460b      	mov	r3, r1
 800b19a:	4620      	mov	r0, r4
 800b19c:	4629      	mov	r1, r5
 800b19e:	f7f5 f895 	bl	80002cc <__adddf3>
 800b1a2:	4604      	mov	r4, r0
 800b1a4:	460d      	mov	r5, r1
 800b1a6:	ec45 4b10 	vmov	d0, r4, r5
 800b1aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ae:	2d00      	cmp	r5, #0
 800b1b0:	dc0b      	bgt.n	800b1ca <__ieee754_sqrt+0x52>
 800b1b2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b1b6:	4326      	orrs	r6, r4
 800b1b8:	d0f5      	beq.n	800b1a6 <__ieee754_sqrt+0x2e>
 800b1ba:	b135      	cbz	r5, 800b1ca <__ieee754_sqrt+0x52>
 800b1bc:	f7f5 f884 	bl	80002c8 <__aeabi_dsub>
 800b1c0:	4602      	mov	r2, r0
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	f7f5 fb62 	bl	800088c <__aeabi_ddiv>
 800b1c8:	e7eb      	b.n	800b1a2 <__ieee754_sqrt+0x2a>
 800b1ca:	1509      	asrs	r1, r1, #20
 800b1cc:	f000 808d 	beq.w	800b2ea <__ieee754_sqrt+0x172>
 800b1d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1d4:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b1d8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1dc:	07c9      	lsls	r1, r1, #31
 800b1de:	bf5c      	itt	pl
 800b1e0:	005b      	lslpl	r3, r3, #1
 800b1e2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b1e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1ea:	bf58      	it	pl
 800b1ec:	0052      	lslpl	r2, r2, #1
 800b1ee:	2500      	movs	r5, #0
 800b1f0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b1f4:	1076      	asrs	r6, r6, #1
 800b1f6:	0052      	lsls	r2, r2, #1
 800b1f8:	f04f 0e16 	mov.w	lr, #22
 800b1fc:	46ac      	mov	ip, r5
 800b1fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b202:	eb0c 0001 	add.w	r0, ip, r1
 800b206:	4298      	cmp	r0, r3
 800b208:	bfde      	ittt	le
 800b20a:	1a1b      	suble	r3, r3, r0
 800b20c:	eb00 0c01 	addle.w	ip, r0, r1
 800b210:	186d      	addle	r5, r5, r1
 800b212:	005b      	lsls	r3, r3, #1
 800b214:	f1be 0e01 	subs.w	lr, lr, #1
 800b218:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b21c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b220:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b224:	d1ed      	bne.n	800b202 <__ieee754_sqrt+0x8a>
 800b226:	4674      	mov	r4, lr
 800b228:	2720      	movs	r7, #32
 800b22a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b22e:	4563      	cmp	r3, ip
 800b230:	eb01 000e 	add.w	r0, r1, lr
 800b234:	dc02      	bgt.n	800b23c <__ieee754_sqrt+0xc4>
 800b236:	d113      	bne.n	800b260 <__ieee754_sqrt+0xe8>
 800b238:	4290      	cmp	r0, r2
 800b23a:	d811      	bhi.n	800b260 <__ieee754_sqrt+0xe8>
 800b23c:	2800      	cmp	r0, #0
 800b23e:	eb00 0e01 	add.w	lr, r0, r1
 800b242:	da57      	bge.n	800b2f4 <__ieee754_sqrt+0x17c>
 800b244:	f1be 0f00 	cmp.w	lr, #0
 800b248:	db54      	blt.n	800b2f4 <__ieee754_sqrt+0x17c>
 800b24a:	f10c 0801 	add.w	r8, ip, #1
 800b24e:	eba3 030c 	sub.w	r3, r3, ip
 800b252:	4290      	cmp	r0, r2
 800b254:	bf88      	it	hi
 800b256:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b25a:	1a12      	subs	r2, r2, r0
 800b25c:	440c      	add	r4, r1
 800b25e:	46c4      	mov	ip, r8
 800b260:	005b      	lsls	r3, r3, #1
 800b262:	3f01      	subs	r7, #1
 800b264:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b268:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b26c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b270:	d1dd      	bne.n	800b22e <__ieee754_sqrt+0xb6>
 800b272:	4313      	orrs	r3, r2
 800b274:	d01b      	beq.n	800b2ae <__ieee754_sqrt+0x136>
 800b276:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b324 <__ieee754_sqrt+0x1ac>
 800b27a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b328 <__ieee754_sqrt+0x1b0>
 800b27e:	e9da 0100 	ldrd	r0, r1, [sl]
 800b282:	e9db 2300 	ldrd	r2, r3, [fp]
 800b286:	f7f5 f81f 	bl	80002c8 <__aeabi_dsub>
 800b28a:	e9da 8900 	ldrd	r8, r9, [sl]
 800b28e:	4602      	mov	r2, r0
 800b290:	460b      	mov	r3, r1
 800b292:	4640      	mov	r0, r8
 800b294:	4649      	mov	r1, r9
 800b296:	f7f5 fc4b 	bl	8000b30 <__aeabi_dcmple>
 800b29a:	b140      	cbz	r0, 800b2ae <__ieee754_sqrt+0x136>
 800b29c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b2a0:	e9da 0100 	ldrd	r0, r1, [sl]
 800b2a4:	e9db 2300 	ldrd	r2, r3, [fp]
 800b2a8:	d126      	bne.n	800b2f8 <__ieee754_sqrt+0x180>
 800b2aa:	3501      	adds	r5, #1
 800b2ac:	463c      	mov	r4, r7
 800b2ae:	106a      	asrs	r2, r5, #1
 800b2b0:	0863      	lsrs	r3, r4, #1
 800b2b2:	07e9      	lsls	r1, r5, #31
 800b2b4:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b2b8:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b2bc:	bf48      	it	mi
 800b2be:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b2c2:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b2c6:	461c      	mov	r4, r3
 800b2c8:	e76d      	b.n	800b1a6 <__ieee754_sqrt+0x2e>
 800b2ca:	0ad3      	lsrs	r3, r2, #11
 800b2cc:	3815      	subs	r0, #21
 800b2ce:	0552      	lsls	r2, r2, #21
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d0fa      	beq.n	800b2ca <__ieee754_sqrt+0x152>
 800b2d4:	02dc      	lsls	r4, r3, #11
 800b2d6:	d50a      	bpl.n	800b2ee <__ieee754_sqrt+0x176>
 800b2d8:	f1c1 0420 	rsb	r4, r1, #32
 800b2dc:	fa22 f404 	lsr.w	r4, r2, r4
 800b2e0:	1e4d      	subs	r5, r1, #1
 800b2e2:	408a      	lsls	r2, r1
 800b2e4:	4323      	orrs	r3, r4
 800b2e6:	1b41      	subs	r1, r0, r5
 800b2e8:	e772      	b.n	800b1d0 <__ieee754_sqrt+0x58>
 800b2ea:	4608      	mov	r0, r1
 800b2ec:	e7f0      	b.n	800b2d0 <__ieee754_sqrt+0x158>
 800b2ee:	005b      	lsls	r3, r3, #1
 800b2f0:	3101      	adds	r1, #1
 800b2f2:	e7ef      	b.n	800b2d4 <__ieee754_sqrt+0x15c>
 800b2f4:	46e0      	mov	r8, ip
 800b2f6:	e7aa      	b.n	800b24e <__ieee754_sqrt+0xd6>
 800b2f8:	f7f4 ffe8 	bl	80002cc <__adddf3>
 800b2fc:	e9da 8900 	ldrd	r8, r9, [sl]
 800b300:	4602      	mov	r2, r0
 800b302:	460b      	mov	r3, r1
 800b304:	4640      	mov	r0, r8
 800b306:	4649      	mov	r1, r9
 800b308:	f7f5 fc08 	bl	8000b1c <__aeabi_dcmplt>
 800b30c:	b120      	cbz	r0, 800b318 <__ieee754_sqrt+0x1a0>
 800b30e:	1ca0      	adds	r0, r4, #2
 800b310:	bf08      	it	eq
 800b312:	3501      	addeq	r5, #1
 800b314:	3402      	adds	r4, #2
 800b316:	e7ca      	b.n	800b2ae <__ieee754_sqrt+0x136>
 800b318:	3401      	adds	r4, #1
 800b31a:	f024 0401 	bic.w	r4, r4, #1
 800b31e:	e7c6      	b.n	800b2ae <__ieee754_sqrt+0x136>
 800b320:	7ff00000 	.word	0x7ff00000
 800b324:	20000210 	.word	0x20000210
 800b328:	20000218 	.word	0x20000218
 800b32c:	00000000 	.word	0x00000000

0800b330 <__kernel_cos>:
 800b330:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b334:	ec57 6b10 	vmov	r6, r7, d0
 800b338:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b33c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b340:	ed8d 1b00 	vstr	d1, [sp]
 800b344:	da07      	bge.n	800b356 <__kernel_cos+0x26>
 800b346:	ee10 0a10 	vmov	r0, s0
 800b34a:	4639      	mov	r1, r7
 800b34c:	f7f5 fc24 	bl	8000b98 <__aeabi_d2iz>
 800b350:	2800      	cmp	r0, #0
 800b352:	f000 8088 	beq.w	800b466 <__kernel_cos+0x136>
 800b356:	4632      	mov	r2, r6
 800b358:	463b      	mov	r3, r7
 800b35a:	4630      	mov	r0, r6
 800b35c:	4639      	mov	r1, r7
 800b35e:	f7f5 f96b 	bl	8000638 <__aeabi_dmul>
 800b362:	4b51      	ldr	r3, [pc, #324]	; (800b4a8 <__kernel_cos+0x178>)
 800b364:	2200      	movs	r2, #0
 800b366:	4604      	mov	r4, r0
 800b368:	460d      	mov	r5, r1
 800b36a:	f7f5 f965 	bl	8000638 <__aeabi_dmul>
 800b36e:	a340      	add	r3, pc, #256	; (adr r3, 800b470 <__kernel_cos+0x140>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	4682      	mov	sl, r0
 800b376:	468b      	mov	fp, r1
 800b378:	4620      	mov	r0, r4
 800b37a:	4629      	mov	r1, r5
 800b37c:	f7f5 f95c 	bl	8000638 <__aeabi_dmul>
 800b380:	a33d      	add	r3, pc, #244	; (adr r3, 800b478 <__kernel_cos+0x148>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	f7f4 ffa1 	bl	80002cc <__adddf3>
 800b38a:	4622      	mov	r2, r4
 800b38c:	462b      	mov	r3, r5
 800b38e:	f7f5 f953 	bl	8000638 <__aeabi_dmul>
 800b392:	a33b      	add	r3, pc, #236	; (adr r3, 800b480 <__kernel_cos+0x150>)
 800b394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b398:	f7f4 ff96 	bl	80002c8 <__aeabi_dsub>
 800b39c:	4622      	mov	r2, r4
 800b39e:	462b      	mov	r3, r5
 800b3a0:	f7f5 f94a 	bl	8000638 <__aeabi_dmul>
 800b3a4:	a338      	add	r3, pc, #224	; (adr r3, 800b488 <__kernel_cos+0x158>)
 800b3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3aa:	f7f4 ff8f 	bl	80002cc <__adddf3>
 800b3ae:	4622      	mov	r2, r4
 800b3b0:	462b      	mov	r3, r5
 800b3b2:	f7f5 f941 	bl	8000638 <__aeabi_dmul>
 800b3b6:	a336      	add	r3, pc, #216	; (adr r3, 800b490 <__kernel_cos+0x160>)
 800b3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3bc:	f7f4 ff84 	bl	80002c8 <__aeabi_dsub>
 800b3c0:	4622      	mov	r2, r4
 800b3c2:	462b      	mov	r3, r5
 800b3c4:	f7f5 f938 	bl	8000638 <__aeabi_dmul>
 800b3c8:	a333      	add	r3, pc, #204	; (adr r3, 800b498 <__kernel_cos+0x168>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	f7f4 ff7d 	bl	80002cc <__adddf3>
 800b3d2:	4622      	mov	r2, r4
 800b3d4:	462b      	mov	r3, r5
 800b3d6:	f7f5 f92f 	bl	8000638 <__aeabi_dmul>
 800b3da:	4622      	mov	r2, r4
 800b3dc:	462b      	mov	r3, r5
 800b3de:	f7f5 f92b 	bl	8000638 <__aeabi_dmul>
 800b3e2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3e6:	4604      	mov	r4, r0
 800b3e8:	460d      	mov	r5, r1
 800b3ea:	4630      	mov	r0, r6
 800b3ec:	4639      	mov	r1, r7
 800b3ee:	f7f5 f923 	bl	8000638 <__aeabi_dmul>
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4602      	mov	r2, r0
 800b3f6:	4629      	mov	r1, r5
 800b3f8:	4620      	mov	r0, r4
 800b3fa:	f7f4 ff65 	bl	80002c8 <__aeabi_dsub>
 800b3fe:	4b2b      	ldr	r3, [pc, #172]	; (800b4ac <__kernel_cos+0x17c>)
 800b400:	4598      	cmp	r8, r3
 800b402:	4606      	mov	r6, r0
 800b404:	460f      	mov	r7, r1
 800b406:	dc10      	bgt.n	800b42a <__kernel_cos+0xfa>
 800b408:	4602      	mov	r2, r0
 800b40a:	460b      	mov	r3, r1
 800b40c:	4650      	mov	r0, sl
 800b40e:	4659      	mov	r1, fp
 800b410:	f7f4 ff5a 	bl	80002c8 <__aeabi_dsub>
 800b414:	460b      	mov	r3, r1
 800b416:	4926      	ldr	r1, [pc, #152]	; (800b4b0 <__kernel_cos+0x180>)
 800b418:	4602      	mov	r2, r0
 800b41a:	2000      	movs	r0, #0
 800b41c:	f7f4 ff54 	bl	80002c8 <__aeabi_dsub>
 800b420:	ec41 0b10 	vmov	d0, r0, r1
 800b424:	b003      	add	sp, #12
 800b426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42a:	4b22      	ldr	r3, [pc, #136]	; (800b4b4 <__kernel_cos+0x184>)
 800b42c:	4920      	ldr	r1, [pc, #128]	; (800b4b0 <__kernel_cos+0x180>)
 800b42e:	4598      	cmp	r8, r3
 800b430:	bfcc      	ite	gt
 800b432:	4d21      	ldrgt	r5, [pc, #132]	; (800b4b8 <__kernel_cos+0x188>)
 800b434:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b438:	2400      	movs	r4, #0
 800b43a:	4622      	mov	r2, r4
 800b43c:	462b      	mov	r3, r5
 800b43e:	2000      	movs	r0, #0
 800b440:	f7f4 ff42 	bl	80002c8 <__aeabi_dsub>
 800b444:	4622      	mov	r2, r4
 800b446:	4680      	mov	r8, r0
 800b448:	4689      	mov	r9, r1
 800b44a:	462b      	mov	r3, r5
 800b44c:	4650      	mov	r0, sl
 800b44e:	4659      	mov	r1, fp
 800b450:	f7f4 ff3a 	bl	80002c8 <__aeabi_dsub>
 800b454:	4632      	mov	r2, r6
 800b456:	463b      	mov	r3, r7
 800b458:	f7f4 ff36 	bl	80002c8 <__aeabi_dsub>
 800b45c:	4602      	mov	r2, r0
 800b45e:	460b      	mov	r3, r1
 800b460:	4640      	mov	r0, r8
 800b462:	4649      	mov	r1, r9
 800b464:	e7da      	b.n	800b41c <__kernel_cos+0xec>
 800b466:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b4a0 <__kernel_cos+0x170>
 800b46a:	e7db      	b.n	800b424 <__kernel_cos+0xf4>
 800b46c:	f3af 8000 	nop.w
 800b470:	be8838d4 	.word	0xbe8838d4
 800b474:	bda8fae9 	.word	0xbda8fae9
 800b478:	bdb4b1c4 	.word	0xbdb4b1c4
 800b47c:	3e21ee9e 	.word	0x3e21ee9e
 800b480:	809c52ad 	.word	0x809c52ad
 800b484:	3e927e4f 	.word	0x3e927e4f
 800b488:	19cb1590 	.word	0x19cb1590
 800b48c:	3efa01a0 	.word	0x3efa01a0
 800b490:	16c15177 	.word	0x16c15177
 800b494:	3f56c16c 	.word	0x3f56c16c
 800b498:	5555554c 	.word	0x5555554c
 800b49c:	3fa55555 	.word	0x3fa55555
 800b4a0:	00000000 	.word	0x00000000
 800b4a4:	3ff00000 	.word	0x3ff00000
 800b4a8:	3fe00000 	.word	0x3fe00000
 800b4ac:	3fd33332 	.word	0x3fd33332
 800b4b0:	3ff00000 	.word	0x3ff00000
 800b4b4:	3fe90000 	.word	0x3fe90000
 800b4b8:	3fd20000 	.word	0x3fd20000
 800b4bc:	00000000 	.word	0x00000000

0800b4c0 <__kernel_sin>:
 800b4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4c4:	ed2d 8b04 	vpush	{d8-d9}
 800b4c8:	eeb0 8a41 	vmov.f32	s16, s2
 800b4cc:	eef0 8a61 	vmov.f32	s17, s3
 800b4d0:	ec55 4b10 	vmov	r4, r5, d0
 800b4d4:	b083      	sub	sp, #12
 800b4d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b4da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b4de:	9001      	str	r0, [sp, #4]
 800b4e0:	da06      	bge.n	800b4f0 <__kernel_sin+0x30>
 800b4e2:	ee10 0a10 	vmov	r0, s0
 800b4e6:	4629      	mov	r1, r5
 800b4e8:	f7f5 fb56 	bl	8000b98 <__aeabi_d2iz>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d051      	beq.n	800b594 <__kernel_sin+0xd4>
 800b4f0:	4622      	mov	r2, r4
 800b4f2:	462b      	mov	r3, r5
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	4629      	mov	r1, r5
 800b4f8:	f7f5 f89e 	bl	8000638 <__aeabi_dmul>
 800b4fc:	4682      	mov	sl, r0
 800b4fe:	468b      	mov	fp, r1
 800b500:	4602      	mov	r2, r0
 800b502:	460b      	mov	r3, r1
 800b504:	4620      	mov	r0, r4
 800b506:	4629      	mov	r1, r5
 800b508:	f7f5 f896 	bl	8000638 <__aeabi_dmul>
 800b50c:	a341      	add	r3, pc, #260	; (adr r3, 800b614 <__kernel_sin+0x154>)
 800b50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b512:	4680      	mov	r8, r0
 800b514:	4689      	mov	r9, r1
 800b516:	4650      	mov	r0, sl
 800b518:	4659      	mov	r1, fp
 800b51a:	f7f5 f88d 	bl	8000638 <__aeabi_dmul>
 800b51e:	a33f      	add	r3, pc, #252	; (adr r3, 800b61c <__kernel_sin+0x15c>)
 800b520:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b524:	f7f4 fed0 	bl	80002c8 <__aeabi_dsub>
 800b528:	4652      	mov	r2, sl
 800b52a:	465b      	mov	r3, fp
 800b52c:	f7f5 f884 	bl	8000638 <__aeabi_dmul>
 800b530:	a33c      	add	r3, pc, #240	; (adr r3, 800b624 <__kernel_sin+0x164>)
 800b532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b536:	f7f4 fec9 	bl	80002cc <__adddf3>
 800b53a:	4652      	mov	r2, sl
 800b53c:	465b      	mov	r3, fp
 800b53e:	f7f5 f87b 	bl	8000638 <__aeabi_dmul>
 800b542:	a33a      	add	r3, pc, #232	; (adr r3, 800b62c <__kernel_sin+0x16c>)
 800b544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b548:	f7f4 febe 	bl	80002c8 <__aeabi_dsub>
 800b54c:	4652      	mov	r2, sl
 800b54e:	465b      	mov	r3, fp
 800b550:	f7f5 f872 	bl	8000638 <__aeabi_dmul>
 800b554:	a337      	add	r3, pc, #220	; (adr r3, 800b634 <__kernel_sin+0x174>)
 800b556:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b55a:	f7f4 feb7 	bl	80002cc <__adddf3>
 800b55e:	9b01      	ldr	r3, [sp, #4]
 800b560:	4606      	mov	r6, r0
 800b562:	460f      	mov	r7, r1
 800b564:	b9eb      	cbnz	r3, 800b5a2 <__kernel_sin+0xe2>
 800b566:	4602      	mov	r2, r0
 800b568:	460b      	mov	r3, r1
 800b56a:	4650      	mov	r0, sl
 800b56c:	4659      	mov	r1, fp
 800b56e:	f7f5 f863 	bl	8000638 <__aeabi_dmul>
 800b572:	a325      	add	r3, pc, #148	; (adr r3, 800b608 <__kernel_sin+0x148>)
 800b574:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b578:	f7f4 fea6 	bl	80002c8 <__aeabi_dsub>
 800b57c:	4642      	mov	r2, r8
 800b57e:	464b      	mov	r3, r9
 800b580:	f7f5 f85a 	bl	8000638 <__aeabi_dmul>
 800b584:	4602      	mov	r2, r0
 800b586:	460b      	mov	r3, r1
 800b588:	4620      	mov	r0, r4
 800b58a:	4629      	mov	r1, r5
 800b58c:	f7f4 fe9e 	bl	80002cc <__adddf3>
 800b590:	4604      	mov	r4, r0
 800b592:	460d      	mov	r5, r1
 800b594:	ec45 4b10 	vmov	d0, r4, r5
 800b598:	b003      	add	sp, #12
 800b59a:	ecbd 8b04 	vpop	{d8-d9}
 800b59e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5a2:	4b1b      	ldr	r3, [pc, #108]	; (800b610 <__kernel_sin+0x150>)
 800b5a4:	ec51 0b18 	vmov	r0, r1, d8
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	f7f5 f845 	bl	8000638 <__aeabi_dmul>
 800b5ae:	4632      	mov	r2, r6
 800b5b0:	ec41 0b19 	vmov	d9, r0, r1
 800b5b4:	463b      	mov	r3, r7
 800b5b6:	4640      	mov	r0, r8
 800b5b8:	4649      	mov	r1, r9
 800b5ba:	f7f5 f83d 	bl	8000638 <__aeabi_dmul>
 800b5be:	4602      	mov	r2, r0
 800b5c0:	460b      	mov	r3, r1
 800b5c2:	ec51 0b19 	vmov	r0, r1, d9
 800b5c6:	f7f4 fe7f 	bl	80002c8 <__aeabi_dsub>
 800b5ca:	4652      	mov	r2, sl
 800b5cc:	465b      	mov	r3, fp
 800b5ce:	f7f5 f833 	bl	8000638 <__aeabi_dmul>
 800b5d2:	ec53 2b18 	vmov	r2, r3, d8
 800b5d6:	f7f4 fe77 	bl	80002c8 <__aeabi_dsub>
 800b5da:	a30b      	add	r3, pc, #44	; (adr r3, 800b608 <__kernel_sin+0x148>)
 800b5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	460f      	mov	r7, r1
 800b5e4:	4640      	mov	r0, r8
 800b5e6:	4649      	mov	r1, r9
 800b5e8:	f7f5 f826 	bl	8000638 <__aeabi_dmul>
 800b5ec:	4602      	mov	r2, r0
 800b5ee:	460b      	mov	r3, r1
 800b5f0:	4630      	mov	r0, r6
 800b5f2:	4639      	mov	r1, r7
 800b5f4:	f7f4 fe6a 	bl	80002cc <__adddf3>
 800b5f8:	4602      	mov	r2, r0
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	4620      	mov	r0, r4
 800b5fe:	4629      	mov	r1, r5
 800b600:	f7f4 fe62 	bl	80002c8 <__aeabi_dsub>
 800b604:	e7c4      	b.n	800b590 <__kernel_sin+0xd0>
 800b606:	bf00      	nop
 800b608:	55555549 	.word	0x55555549
 800b60c:	3fc55555 	.word	0x3fc55555
 800b610:	3fe00000 	.word	0x3fe00000
 800b614:	5acfd57c 	.word	0x5acfd57c
 800b618:	3de5d93a 	.word	0x3de5d93a
 800b61c:	8a2b9ceb 	.word	0x8a2b9ceb
 800b620:	3e5ae5e6 	.word	0x3e5ae5e6
 800b624:	57b1fe7d 	.word	0x57b1fe7d
 800b628:	3ec71de3 	.word	0x3ec71de3
 800b62c:	19c161d5 	.word	0x19c161d5
 800b630:	3f2a01a0 	.word	0x3f2a01a0
 800b634:	1110f8a6 	.word	0x1110f8a6
 800b638:	3f811111 	.word	0x3f811111
 800b63c:	00000000 	.word	0x00000000

0800b640 <__ieee754_rem_pio2>:
 800b640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b644:	ed2d 8b02 	vpush	{d8}
 800b648:	ec55 4b10 	vmov	r4, r5, d0
 800b64c:	4bca      	ldr	r3, [pc, #808]	; (800b978 <__ieee754_rem_pio2+0x338>)
 800b64e:	b08b      	sub	sp, #44	; 0x2c
 800b650:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b654:	4598      	cmp	r8, r3
 800b656:	4682      	mov	sl, r0
 800b658:	9502      	str	r5, [sp, #8]
 800b65a:	dc08      	bgt.n	800b66e <__ieee754_rem_pio2+0x2e>
 800b65c:	2200      	movs	r2, #0
 800b65e:	2300      	movs	r3, #0
 800b660:	ed80 0b00 	vstr	d0, [r0]
 800b664:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b668:	f04f 0b00 	mov.w	fp, #0
 800b66c:	e028      	b.n	800b6c0 <__ieee754_rem_pio2+0x80>
 800b66e:	4bc3      	ldr	r3, [pc, #780]	; (800b97c <__ieee754_rem_pio2+0x33c>)
 800b670:	4598      	cmp	r8, r3
 800b672:	dc78      	bgt.n	800b766 <__ieee754_rem_pio2+0x126>
 800b674:	9b02      	ldr	r3, [sp, #8]
 800b676:	4ec2      	ldr	r6, [pc, #776]	; (800b980 <__ieee754_rem_pio2+0x340>)
 800b678:	2b00      	cmp	r3, #0
 800b67a:	ee10 0a10 	vmov	r0, s0
 800b67e:	a3b0      	add	r3, pc, #704	; (adr r3, 800b940 <__ieee754_rem_pio2+0x300>)
 800b680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b684:	4629      	mov	r1, r5
 800b686:	dd39      	ble.n	800b6fc <__ieee754_rem_pio2+0xbc>
 800b688:	f7f4 fe1e 	bl	80002c8 <__aeabi_dsub>
 800b68c:	45b0      	cmp	r8, r6
 800b68e:	4604      	mov	r4, r0
 800b690:	460d      	mov	r5, r1
 800b692:	d01b      	beq.n	800b6cc <__ieee754_rem_pio2+0x8c>
 800b694:	a3ac      	add	r3, pc, #688	; (adr r3, 800b948 <__ieee754_rem_pio2+0x308>)
 800b696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69a:	f7f4 fe15 	bl	80002c8 <__aeabi_dsub>
 800b69e:	4602      	mov	r2, r0
 800b6a0:	460b      	mov	r3, r1
 800b6a2:	e9ca 2300 	strd	r2, r3, [sl]
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	f7f4 fe0d 	bl	80002c8 <__aeabi_dsub>
 800b6ae:	a3a6      	add	r3, pc, #664	; (adr r3, 800b948 <__ieee754_rem_pio2+0x308>)
 800b6b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b4:	f7f4 fe08 	bl	80002c8 <__aeabi_dsub>
 800b6b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6bc:	f04f 0b01 	mov.w	fp, #1
 800b6c0:	4658      	mov	r0, fp
 800b6c2:	b00b      	add	sp, #44	; 0x2c
 800b6c4:	ecbd 8b02 	vpop	{d8}
 800b6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6cc:	a3a0      	add	r3, pc, #640	; (adr r3, 800b950 <__ieee754_rem_pio2+0x310>)
 800b6ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6d2:	f7f4 fdf9 	bl	80002c8 <__aeabi_dsub>
 800b6d6:	a3a0      	add	r3, pc, #640	; (adr r3, 800b958 <__ieee754_rem_pio2+0x318>)
 800b6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6dc:	4604      	mov	r4, r0
 800b6de:	460d      	mov	r5, r1
 800b6e0:	f7f4 fdf2 	bl	80002c8 <__aeabi_dsub>
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	460b      	mov	r3, r1
 800b6e8:	e9ca 2300 	strd	r2, r3, [sl]
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	4629      	mov	r1, r5
 800b6f0:	f7f4 fdea 	bl	80002c8 <__aeabi_dsub>
 800b6f4:	a398      	add	r3, pc, #608	; (adr r3, 800b958 <__ieee754_rem_pio2+0x318>)
 800b6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fa:	e7db      	b.n	800b6b4 <__ieee754_rem_pio2+0x74>
 800b6fc:	f7f4 fde6 	bl	80002cc <__adddf3>
 800b700:	45b0      	cmp	r8, r6
 800b702:	4604      	mov	r4, r0
 800b704:	460d      	mov	r5, r1
 800b706:	d016      	beq.n	800b736 <__ieee754_rem_pio2+0xf6>
 800b708:	a38f      	add	r3, pc, #572	; (adr r3, 800b948 <__ieee754_rem_pio2+0x308>)
 800b70a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b70e:	f7f4 fddd 	bl	80002cc <__adddf3>
 800b712:	4602      	mov	r2, r0
 800b714:	460b      	mov	r3, r1
 800b716:	e9ca 2300 	strd	r2, r3, [sl]
 800b71a:	4620      	mov	r0, r4
 800b71c:	4629      	mov	r1, r5
 800b71e:	f7f4 fdd3 	bl	80002c8 <__aeabi_dsub>
 800b722:	a389      	add	r3, pc, #548	; (adr r3, 800b948 <__ieee754_rem_pio2+0x308>)
 800b724:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b728:	f7f4 fdd0 	bl	80002cc <__adddf3>
 800b72c:	f04f 3bff 	mov.w	fp, #4294967295
 800b730:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b734:	e7c4      	b.n	800b6c0 <__ieee754_rem_pio2+0x80>
 800b736:	a386      	add	r3, pc, #536	; (adr r3, 800b950 <__ieee754_rem_pio2+0x310>)
 800b738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b73c:	f7f4 fdc6 	bl	80002cc <__adddf3>
 800b740:	a385      	add	r3, pc, #532	; (adr r3, 800b958 <__ieee754_rem_pio2+0x318>)
 800b742:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b746:	4604      	mov	r4, r0
 800b748:	460d      	mov	r5, r1
 800b74a:	f7f4 fdbf 	bl	80002cc <__adddf3>
 800b74e:	4602      	mov	r2, r0
 800b750:	460b      	mov	r3, r1
 800b752:	e9ca 2300 	strd	r2, r3, [sl]
 800b756:	4620      	mov	r0, r4
 800b758:	4629      	mov	r1, r5
 800b75a:	f7f4 fdb5 	bl	80002c8 <__aeabi_dsub>
 800b75e:	a37e      	add	r3, pc, #504	; (adr r3, 800b958 <__ieee754_rem_pio2+0x318>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	e7e0      	b.n	800b728 <__ieee754_rem_pio2+0xe8>
 800b766:	4b87      	ldr	r3, [pc, #540]	; (800b984 <__ieee754_rem_pio2+0x344>)
 800b768:	4598      	cmp	r8, r3
 800b76a:	f300 80d8 	bgt.w	800b91e <__ieee754_rem_pio2+0x2de>
 800b76e:	f000 f96d 	bl	800ba4c <fabs>
 800b772:	ec55 4b10 	vmov	r4, r5, d0
 800b776:	ee10 0a10 	vmov	r0, s0
 800b77a:	a379      	add	r3, pc, #484	; (adr r3, 800b960 <__ieee754_rem_pio2+0x320>)
 800b77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b780:	4629      	mov	r1, r5
 800b782:	f7f4 ff59 	bl	8000638 <__aeabi_dmul>
 800b786:	4b80      	ldr	r3, [pc, #512]	; (800b988 <__ieee754_rem_pio2+0x348>)
 800b788:	2200      	movs	r2, #0
 800b78a:	f7f4 fd9f 	bl	80002cc <__adddf3>
 800b78e:	f7f5 fa03 	bl	8000b98 <__aeabi_d2iz>
 800b792:	4683      	mov	fp, r0
 800b794:	f7f4 fee6 	bl	8000564 <__aeabi_i2d>
 800b798:	4602      	mov	r2, r0
 800b79a:	460b      	mov	r3, r1
 800b79c:	ec43 2b18 	vmov	d8, r2, r3
 800b7a0:	a367      	add	r3, pc, #412	; (adr r3, 800b940 <__ieee754_rem_pio2+0x300>)
 800b7a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a6:	f7f4 ff47 	bl	8000638 <__aeabi_dmul>
 800b7aa:	4602      	mov	r2, r0
 800b7ac:	460b      	mov	r3, r1
 800b7ae:	4620      	mov	r0, r4
 800b7b0:	4629      	mov	r1, r5
 800b7b2:	f7f4 fd89 	bl	80002c8 <__aeabi_dsub>
 800b7b6:	a364      	add	r3, pc, #400	; (adr r3, 800b948 <__ieee754_rem_pio2+0x308>)
 800b7b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7bc:	4606      	mov	r6, r0
 800b7be:	460f      	mov	r7, r1
 800b7c0:	ec51 0b18 	vmov	r0, r1, d8
 800b7c4:	f7f4 ff38 	bl	8000638 <__aeabi_dmul>
 800b7c8:	f1bb 0f1f 	cmp.w	fp, #31
 800b7cc:	4604      	mov	r4, r0
 800b7ce:	460d      	mov	r5, r1
 800b7d0:	dc0d      	bgt.n	800b7ee <__ieee754_rem_pio2+0x1ae>
 800b7d2:	4b6e      	ldr	r3, [pc, #440]	; (800b98c <__ieee754_rem_pio2+0x34c>)
 800b7d4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b7d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7dc:	4543      	cmp	r3, r8
 800b7de:	d006      	beq.n	800b7ee <__ieee754_rem_pio2+0x1ae>
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	462b      	mov	r3, r5
 800b7e4:	4630      	mov	r0, r6
 800b7e6:	4639      	mov	r1, r7
 800b7e8:	f7f4 fd6e 	bl	80002c8 <__aeabi_dsub>
 800b7ec:	e00e      	b.n	800b80c <__ieee754_rem_pio2+0x1cc>
 800b7ee:	462b      	mov	r3, r5
 800b7f0:	4622      	mov	r2, r4
 800b7f2:	4630      	mov	r0, r6
 800b7f4:	4639      	mov	r1, r7
 800b7f6:	f7f4 fd67 	bl	80002c8 <__aeabi_dsub>
 800b7fa:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b7fe:	9303      	str	r3, [sp, #12]
 800b800:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b804:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b808:	2b10      	cmp	r3, #16
 800b80a:	dc02      	bgt.n	800b812 <__ieee754_rem_pio2+0x1d2>
 800b80c:	e9ca 0100 	strd	r0, r1, [sl]
 800b810:	e039      	b.n	800b886 <__ieee754_rem_pio2+0x246>
 800b812:	a34f      	add	r3, pc, #316	; (adr r3, 800b950 <__ieee754_rem_pio2+0x310>)
 800b814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b818:	ec51 0b18 	vmov	r0, r1, d8
 800b81c:	f7f4 ff0c 	bl	8000638 <__aeabi_dmul>
 800b820:	4604      	mov	r4, r0
 800b822:	460d      	mov	r5, r1
 800b824:	4602      	mov	r2, r0
 800b826:	460b      	mov	r3, r1
 800b828:	4630      	mov	r0, r6
 800b82a:	4639      	mov	r1, r7
 800b82c:	f7f4 fd4c 	bl	80002c8 <__aeabi_dsub>
 800b830:	4602      	mov	r2, r0
 800b832:	460b      	mov	r3, r1
 800b834:	4680      	mov	r8, r0
 800b836:	4689      	mov	r9, r1
 800b838:	4630      	mov	r0, r6
 800b83a:	4639      	mov	r1, r7
 800b83c:	f7f4 fd44 	bl	80002c8 <__aeabi_dsub>
 800b840:	4622      	mov	r2, r4
 800b842:	462b      	mov	r3, r5
 800b844:	f7f4 fd40 	bl	80002c8 <__aeabi_dsub>
 800b848:	a343      	add	r3, pc, #268	; (adr r3, 800b958 <__ieee754_rem_pio2+0x318>)
 800b84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b84e:	4604      	mov	r4, r0
 800b850:	460d      	mov	r5, r1
 800b852:	ec51 0b18 	vmov	r0, r1, d8
 800b856:	f7f4 feef 	bl	8000638 <__aeabi_dmul>
 800b85a:	4622      	mov	r2, r4
 800b85c:	462b      	mov	r3, r5
 800b85e:	f7f4 fd33 	bl	80002c8 <__aeabi_dsub>
 800b862:	4602      	mov	r2, r0
 800b864:	460b      	mov	r3, r1
 800b866:	4604      	mov	r4, r0
 800b868:	460d      	mov	r5, r1
 800b86a:	4640      	mov	r0, r8
 800b86c:	4649      	mov	r1, r9
 800b86e:	f7f4 fd2b 	bl	80002c8 <__aeabi_dsub>
 800b872:	9a03      	ldr	r2, [sp, #12]
 800b874:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b878:	1ad3      	subs	r3, r2, r3
 800b87a:	2b31      	cmp	r3, #49	; 0x31
 800b87c:	dc24      	bgt.n	800b8c8 <__ieee754_rem_pio2+0x288>
 800b87e:	e9ca 0100 	strd	r0, r1, [sl]
 800b882:	4646      	mov	r6, r8
 800b884:	464f      	mov	r7, r9
 800b886:	e9da 8900 	ldrd	r8, r9, [sl]
 800b88a:	4630      	mov	r0, r6
 800b88c:	4642      	mov	r2, r8
 800b88e:	464b      	mov	r3, r9
 800b890:	4639      	mov	r1, r7
 800b892:	f7f4 fd19 	bl	80002c8 <__aeabi_dsub>
 800b896:	462b      	mov	r3, r5
 800b898:	4622      	mov	r2, r4
 800b89a:	f7f4 fd15 	bl	80002c8 <__aeabi_dsub>
 800b89e:	9b02      	ldr	r3, [sp, #8]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b8a6:	f6bf af0b 	bge.w	800b6c0 <__ieee754_rem_pio2+0x80>
 800b8aa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b8ae:	f8ca 3004 	str.w	r3, [sl, #4]
 800b8b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8b6:	f8ca 8000 	str.w	r8, [sl]
 800b8ba:	f8ca 0008 	str.w	r0, [sl, #8]
 800b8be:	f8ca 300c 	str.w	r3, [sl, #12]
 800b8c2:	f1cb 0b00 	rsb	fp, fp, #0
 800b8c6:	e6fb      	b.n	800b6c0 <__ieee754_rem_pio2+0x80>
 800b8c8:	a327      	add	r3, pc, #156	; (adr r3, 800b968 <__ieee754_rem_pio2+0x328>)
 800b8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ce:	ec51 0b18 	vmov	r0, r1, d8
 800b8d2:	f7f4 feb1 	bl	8000638 <__aeabi_dmul>
 800b8d6:	4604      	mov	r4, r0
 800b8d8:	460d      	mov	r5, r1
 800b8da:	4602      	mov	r2, r0
 800b8dc:	460b      	mov	r3, r1
 800b8de:	4640      	mov	r0, r8
 800b8e0:	4649      	mov	r1, r9
 800b8e2:	f7f4 fcf1 	bl	80002c8 <__aeabi_dsub>
 800b8e6:	4602      	mov	r2, r0
 800b8e8:	460b      	mov	r3, r1
 800b8ea:	4606      	mov	r6, r0
 800b8ec:	460f      	mov	r7, r1
 800b8ee:	4640      	mov	r0, r8
 800b8f0:	4649      	mov	r1, r9
 800b8f2:	f7f4 fce9 	bl	80002c8 <__aeabi_dsub>
 800b8f6:	4622      	mov	r2, r4
 800b8f8:	462b      	mov	r3, r5
 800b8fa:	f7f4 fce5 	bl	80002c8 <__aeabi_dsub>
 800b8fe:	a31c      	add	r3, pc, #112	; (adr r3, 800b970 <__ieee754_rem_pio2+0x330>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	4604      	mov	r4, r0
 800b906:	460d      	mov	r5, r1
 800b908:	ec51 0b18 	vmov	r0, r1, d8
 800b90c:	f7f4 fe94 	bl	8000638 <__aeabi_dmul>
 800b910:	4622      	mov	r2, r4
 800b912:	462b      	mov	r3, r5
 800b914:	f7f4 fcd8 	bl	80002c8 <__aeabi_dsub>
 800b918:	4604      	mov	r4, r0
 800b91a:	460d      	mov	r5, r1
 800b91c:	e760      	b.n	800b7e0 <__ieee754_rem_pio2+0x1a0>
 800b91e:	4b1c      	ldr	r3, [pc, #112]	; (800b990 <__ieee754_rem_pio2+0x350>)
 800b920:	4598      	cmp	r8, r3
 800b922:	dd37      	ble.n	800b994 <__ieee754_rem_pio2+0x354>
 800b924:	ee10 2a10 	vmov	r2, s0
 800b928:	462b      	mov	r3, r5
 800b92a:	4620      	mov	r0, r4
 800b92c:	4629      	mov	r1, r5
 800b92e:	f7f4 fccb 	bl	80002c8 <__aeabi_dsub>
 800b932:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b936:	e9ca 0100 	strd	r0, r1, [sl]
 800b93a:	e695      	b.n	800b668 <__ieee754_rem_pio2+0x28>
 800b93c:	f3af 8000 	nop.w
 800b940:	54400000 	.word	0x54400000
 800b944:	3ff921fb 	.word	0x3ff921fb
 800b948:	1a626331 	.word	0x1a626331
 800b94c:	3dd0b461 	.word	0x3dd0b461
 800b950:	1a600000 	.word	0x1a600000
 800b954:	3dd0b461 	.word	0x3dd0b461
 800b958:	2e037073 	.word	0x2e037073
 800b95c:	3ba3198a 	.word	0x3ba3198a
 800b960:	6dc9c883 	.word	0x6dc9c883
 800b964:	3fe45f30 	.word	0x3fe45f30
 800b968:	2e000000 	.word	0x2e000000
 800b96c:	3ba3198a 	.word	0x3ba3198a
 800b970:	252049c1 	.word	0x252049c1
 800b974:	397b839a 	.word	0x397b839a
 800b978:	3fe921fb 	.word	0x3fe921fb
 800b97c:	4002d97b 	.word	0x4002d97b
 800b980:	3ff921fb 	.word	0x3ff921fb
 800b984:	413921fb 	.word	0x413921fb
 800b988:	3fe00000 	.word	0x3fe00000
 800b98c:	0800c78c 	.word	0x0800c78c
 800b990:	7fefffff 	.word	0x7fefffff
 800b994:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b998:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b99c:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b9a0:	4620      	mov	r0, r4
 800b9a2:	460d      	mov	r5, r1
 800b9a4:	f7f5 f8f8 	bl	8000b98 <__aeabi_d2iz>
 800b9a8:	f7f4 fddc 	bl	8000564 <__aeabi_i2d>
 800b9ac:	4602      	mov	r2, r0
 800b9ae:	460b      	mov	r3, r1
 800b9b0:	4620      	mov	r0, r4
 800b9b2:	4629      	mov	r1, r5
 800b9b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9b8:	f7f4 fc86 	bl	80002c8 <__aeabi_dsub>
 800b9bc:	4b21      	ldr	r3, [pc, #132]	; (800ba44 <__ieee754_rem_pio2+0x404>)
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f7f4 fe3a 	bl	8000638 <__aeabi_dmul>
 800b9c4:	460d      	mov	r5, r1
 800b9c6:	4604      	mov	r4, r0
 800b9c8:	f7f5 f8e6 	bl	8000b98 <__aeabi_d2iz>
 800b9cc:	f7f4 fdca 	bl	8000564 <__aeabi_i2d>
 800b9d0:	4602      	mov	r2, r0
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	4620      	mov	r0, r4
 800b9d6:	4629      	mov	r1, r5
 800b9d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b9dc:	f7f4 fc74 	bl	80002c8 <__aeabi_dsub>
 800b9e0:	4b18      	ldr	r3, [pc, #96]	; (800ba44 <__ieee754_rem_pio2+0x404>)
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	f7f4 fe28 	bl	8000638 <__aeabi_dmul>
 800b9e8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9ec:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b9f0:	2703      	movs	r7, #3
 800b9f2:	2400      	movs	r4, #0
 800b9f4:	2500      	movs	r5, #0
 800b9f6:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b9fa:	4622      	mov	r2, r4
 800b9fc:	462b      	mov	r3, r5
 800b9fe:	46b9      	mov	r9, r7
 800ba00:	3f01      	subs	r7, #1
 800ba02:	f7f5 f881 	bl	8000b08 <__aeabi_dcmpeq>
 800ba06:	2800      	cmp	r0, #0
 800ba08:	d1f5      	bne.n	800b9f6 <__ieee754_rem_pio2+0x3b6>
 800ba0a:	4b0f      	ldr	r3, [pc, #60]	; (800ba48 <__ieee754_rem_pio2+0x408>)
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	2302      	movs	r3, #2
 800ba10:	9300      	str	r3, [sp, #0]
 800ba12:	4632      	mov	r2, r6
 800ba14:	464b      	mov	r3, r9
 800ba16:	4651      	mov	r1, sl
 800ba18:	a804      	add	r0, sp, #16
 800ba1a:	f000 f821 	bl	800ba60 <__kernel_rem_pio2>
 800ba1e:	9b02      	ldr	r3, [sp, #8]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	4683      	mov	fp, r0
 800ba24:	f6bf ae4c 	bge.w	800b6c0 <__ieee754_rem_pio2+0x80>
 800ba28:	e9da 2100 	ldrd	r2, r1, [sl]
 800ba2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba30:	e9ca 2300 	strd	r2, r3, [sl]
 800ba34:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ba38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba3c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ba40:	e73f      	b.n	800b8c2 <__ieee754_rem_pio2+0x282>
 800ba42:	bf00      	nop
 800ba44:	41700000 	.word	0x41700000
 800ba48:	0800c80c 	.word	0x0800c80c

0800ba4c <fabs>:
 800ba4c:	ec51 0b10 	vmov	r0, r1, d0
 800ba50:	ee10 2a10 	vmov	r2, s0
 800ba54:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba58:	ec43 2b10 	vmov	d0, r2, r3
 800ba5c:	4770      	bx	lr
	...

0800ba60 <__kernel_rem_pio2>:
 800ba60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba64:	ed2d 8b02 	vpush	{d8}
 800ba68:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ba6c:	f112 0f14 	cmn.w	r2, #20
 800ba70:	9306      	str	r3, [sp, #24]
 800ba72:	9104      	str	r1, [sp, #16]
 800ba74:	4bc2      	ldr	r3, [pc, #776]	; (800bd80 <__kernel_rem_pio2+0x320>)
 800ba76:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ba78:	9009      	str	r0, [sp, #36]	; 0x24
 800ba7a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba7e:	9300      	str	r3, [sp, #0]
 800ba80:	9b06      	ldr	r3, [sp, #24]
 800ba82:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba86:	bfa8      	it	ge
 800ba88:	1ed4      	subge	r4, r2, #3
 800ba8a:	9305      	str	r3, [sp, #20]
 800ba8c:	bfb2      	itee	lt
 800ba8e:	2400      	movlt	r4, #0
 800ba90:	2318      	movge	r3, #24
 800ba92:	fb94 f4f3 	sdivge	r4, r4, r3
 800ba96:	f06f 0317 	mvn.w	r3, #23
 800ba9a:	fb04 3303 	mla	r3, r4, r3, r3
 800ba9e:	eb03 0a02 	add.w	sl, r3, r2
 800baa2:	9b00      	ldr	r3, [sp, #0]
 800baa4:	9a05      	ldr	r2, [sp, #20]
 800baa6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800bd70 <__kernel_rem_pio2+0x310>
 800baaa:	eb03 0802 	add.w	r8, r3, r2
 800baae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bab0:	1aa7      	subs	r7, r4, r2
 800bab2:	ae20      	add	r6, sp, #128	; 0x80
 800bab4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800bab8:	2500      	movs	r5, #0
 800baba:	4545      	cmp	r5, r8
 800babc:	dd13      	ble.n	800bae6 <__kernel_rem_pio2+0x86>
 800babe:	9b06      	ldr	r3, [sp, #24]
 800bac0:	aa20      	add	r2, sp, #128	; 0x80
 800bac2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800bac6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800baca:	f04f 0800 	mov.w	r8, #0
 800bace:	9b00      	ldr	r3, [sp, #0]
 800bad0:	4598      	cmp	r8, r3
 800bad2:	dc31      	bgt.n	800bb38 <__kernel_rem_pio2+0xd8>
 800bad4:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800bd70 <__kernel_rem_pio2+0x310>
 800bad8:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800badc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bae0:	462f      	mov	r7, r5
 800bae2:	2600      	movs	r6, #0
 800bae4:	e01b      	b.n	800bb1e <__kernel_rem_pio2+0xbe>
 800bae6:	42ef      	cmn	r7, r5
 800bae8:	d407      	bmi.n	800bafa <__kernel_rem_pio2+0x9a>
 800baea:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800baee:	f7f4 fd39 	bl	8000564 <__aeabi_i2d>
 800baf2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800baf6:	3501      	adds	r5, #1
 800baf8:	e7df      	b.n	800baba <__kernel_rem_pio2+0x5a>
 800bafa:	ec51 0b18 	vmov	r0, r1, d8
 800bafe:	e7f8      	b.n	800baf2 <__kernel_rem_pio2+0x92>
 800bb00:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb04:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bb08:	f7f4 fd96 	bl	8000638 <__aeabi_dmul>
 800bb0c:	4602      	mov	r2, r0
 800bb0e:	460b      	mov	r3, r1
 800bb10:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb14:	f7f4 fbda 	bl	80002cc <__adddf3>
 800bb18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb1c:	3601      	adds	r6, #1
 800bb1e:	9b05      	ldr	r3, [sp, #20]
 800bb20:	429e      	cmp	r6, r3
 800bb22:	f1a7 0708 	sub.w	r7, r7, #8
 800bb26:	ddeb      	ble.n	800bb00 <__kernel_rem_pio2+0xa0>
 800bb28:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb2c:	f108 0801 	add.w	r8, r8, #1
 800bb30:	ecab 7b02 	vstmia	fp!, {d7}
 800bb34:	3508      	adds	r5, #8
 800bb36:	e7ca      	b.n	800bace <__kernel_rem_pio2+0x6e>
 800bb38:	9b00      	ldr	r3, [sp, #0]
 800bb3a:	aa0c      	add	r2, sp, #48	; 0x30
 800bb3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb40:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb42:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bb44:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bb48:	9c00      	ldr	r4, [sp, #0]
 800bb4a:	930a      	str	r3, [sp, #40]	; 0x28
 800bb4c:	00e3      	lsls	r3, r4, #3
 800bb4e:	9308      	str	r3, [sp, #32]
 800bb50:	ab98      	add	r3, sp, #608	; 0x260
 800bb52:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb56:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bb5a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800bb5e:	ab70      	add	r3, sp, #448	; 0x1c0
 800bb60:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bb64:	46c3      	mov	fp, r8
 800bb66:	46a1      	mov	r9, r4
 800bb68:	f1b9 0f00 	cmp.w	r9, #0
 800bb6c:	f1a5 0508 	sub.w	r5, r5, #8
 800bb70:	dc77      	bgt.n	800bc62 <__kernel_rem_pio2+0x202>
 800bb72:	ec47 6b10 	vmov	d0, r6, r7
 800bb76:	4650      	mov	r0, sl
 800bb78:	f000 fac2 	bl	800c100 <scalbn>
 800bb7c:	ec57 6b10 	vmov	r6, r7, d0
 800bb80:	2200      	movs	r2, #0
 800bb82:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bb86:	ee10 0a10 	vmov	r0, s0
 800bb8a:	4639      	mov	r1, r7
 800bb8c:	f7f4 fd54 	bl	8000638 <__aeabi_dmul>
 800bb90:	ec41 0b10 	vmov	d0, r0, r1
 800bb94:	f000 fb34 	bl	800c200 <floor>
 800bb98:	4b7a      	ldr	r3, [pc, #488]	; (800bd84 <__kernel_rem_pio2+0x324>)
 800bb9a:	ec51 0b10 	vmov	r0, r1, d0
 800bb9e:	2200      	movs	r2, #0
 800bba0:	f7f4 fd4a 	bl	8000638 <__aeabi_dmul>
 800bba4:	4602      	mov	r2, r0
 800bba6:	460b      	mov	r3, r1
 800bba8:	4630      	mov	r0, r6
 800bbaa:	4639      	mov	r1, r7
 800bbac:	f7f4 fb8c 	bl	80002c8 <__aeabi_dsub>
 800bbb0:	460f      	mov	r7, r1
 800bbb2:	4606      	mov	r6, r0
 800bbb4:	f7f4 fff0 	bl	8000b98 <__aeabi_d2iz>
 800bbb8:	9002      	str	r0, [sp, #8]
 800bbba:	f7f4 fcd3 	bl	8000564 <__aeabi_i2d>
 800bbbe:	4602      	mov	r2, r0
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	4630      	mov	r0, r6
 800bbc4:	4639      	mov	r1, r7
 800bbc6:	f7f4 fb7f 	bl	80002c8 <__aeabi_dsub>
 800bbca:	f1ba 0f00 	cmp.w	sl, #0
 800bbce:	4606      	mov	r6, r0
 800bbd0:	460f      	mov	r7, r1
 800bbd2:	dd6d      	ble.n	800bcb0 <__kernel_rem_pio2+0x250>
 800bbd4:	1e61      	subs	r1, r4, #1
 800bbd6:	ab0c      	add	r3, sp, #48	; 0x30
 800bbd8:	9d02      	ldr	r5, [sp, #8]
 800bbda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bbde:	f1ca 0018 	rsb	r0, sl, #24
 800bbe2:	fa43 f200 	asr.w	r2, r3, r0
 800bbe6:	4415      	add	r5, r2
 800bbe8:	4082      	lsls	r2, r0
 800bbea:	1a9b      	subs	r3, r3, r2
 800bbec:	aa0c      	add	r2, sp, #48	; 0x30
 800bbee:	9502      	str	r5, [sp, #8]
 800bbf0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bbf4:	f1ca 0217 	rsb	r2, sl, #23
 800bbf8:	fa43 fb02 	asr.w	fp, r3, r2
 800bbfc:	f1bb 0f00 	cmp.w	fp, #0
 800bc00:	dd65      	ble.n	800bcce <__kernel_rem_pio2+0x26e>
 800bc02:	9b02      	ldr	r3, [sp, #8]
 800bc04:	2200      	movs	r2, #0
 800bc06:	3301      	adds	r3, #1
 800bc08:	9302      	str	r3, [sp, #8]
 800bc0a:	4615      	mov	r5, r2
 800bc0c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bc10:	4294      	cmp	r4, r2
 800bc12:	f300 809f 	bgt.w	800bd54 <__kernel_rem_pio2+0x2f4>
 800bc16:	f1ba 0f00 	cmp.w	sl, #0
 800bc1a:	dd07      	ble.n	800bc2c <__kernel_rem_pio2+0x1cc>
 800bc1c:	f1ba 0f01 	cmp.w	sl, #1
 800bc20:	f000 80c1 	beq.w	800bda6 <__kernel_rem_pio2+0x346>
 800bc24:	f1ba 0f02 	cmp.w	sl, #2
 800bc28:	f000 80c7 	beq.w	800bdba <__kernel_rem_pio2+0x35a>
 800bc2c:	f1bb 0f02 	cmp.w	fp, #2
 800bc30:	d14d      	bne.n	800bcce <__kernel_rem_pio2+0x26e>
 800bc32:	4632      	mov	r2, r6
 800bc34:	463b      	mov	r3, r7
 800bc36:	4954      	ldr	r1, [pc, #336]	; (800bd88 <__kernel_rem_pio2+0x328>)
 800bc38:	2000      	movs	r0, #0
 800bc3a:	f7f4 fb45 	bl	80002c8 <__aeabi_dsub>
 800bc3e:	4606      	mov	r6, r0
 800bc40:	460f      	mov	r7, r1
 800bc42:	2d00      	cmp	r5, #0
 800bc44:	d043      	beq.n	800bcce <__kernel_rem_pio2+0x26e>
 800bc46:	4650      	mov	r0, sl
 800bc48:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800bd78 <__kernel_rem_pio2+0x318>
 800bc4c:	f000 fa58 	bl	800c100 <scalbn>
 800bc50:	4630      	mov	r0, r6
 800bc52:	4639      	mov	r1, r7
 800bc54:	ec53 2b10 	vmov	r2, r3, d0
 800bc58:	f7f4 fb36 	bl	80002c8 <__aeabi_dsub>
 800bc5c:	4606      	mov	r6, r0
 800bc5e:	460f      	mov	r7, r1
 800bc60:	e035      	b.n	800bcce <__kernel_rem_pio2+0x26e>
 800bc62:	4b4a      	ldr	r3, [pc, #296]	; (800bd8c <__kernel_rem_pio2+0x32c>)
 800bc64:	2200      	movs	r2, #0
 800bc66:	4630      	mov	r0, r6
 800bc68:	4639      	mov	r1, r7
 800bc6a:	f7f4 fce5 	bl	8000638 <__aeabi_dmul>
 800bc6e:	f7f4 ff93 	bl	8000b98 <__aeabi_d2iz>
 800bc72:	f7f4 fc77 	bl	8000564 <__aeabi_i2d>
 800bc76:	4602      	mov	r2, r0
 800bc78:	460b      	mov	r3, r1
 800bc7a:	ec43 2b18 	vmov	d8, r2, r3
 800bc7e:	4b44      	ldr	r3, [pc, #272]	; (800bd90 <__kernel_rem_pio2+0x330>)
 800bc80:	2200      	movs	r2, #0
 800bc82:	f7f4 fcd9 	bl	8000638 <__aeabi_dmul>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	f7f4 fb1b 	bl	80002c8 <__aeabi_dsub>
 800bc92:	f7f4 ff81 	bl	8000b98 <__aeabi_d2iz>
 800bc96:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc9a:	f84b 0b04 	str.w	r0, [fp], #4
 800bc9e:	ec51 0b18 	vmov	r0, r1, d8
 800bca2:	f7f4 fb13 	bl	80002cc <__adddf3>
 800bca6:	f109 39ff 	add.w	r9, r9, #4294967295
 800bcaa:	4606      	mov	r6, r0
 800bcac:	460f      	mov	r7, r1
 800bcae:	e75b      	b.n	800bb68 <__kernel_rem_pio2+0x108>
 800bcb0:	d106      	bne.n	800bcc0 <__kernel_rem_pio2+0x260>
 800bcb2:	1e63      	subs	r3, r4, #1
 800bcb4:	aa0c      	add	r2, sp, #48	; 0x30
 800bcb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bcba:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800bcbe:	e79d      	b.n	800bbfc <__kernel_rem_pio2+0x19c>
 800bcc0:	4b34      	ldr	r3, [pc, #208]	; (800bd94 <__kernel_rem_pio2+0x334>)
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f7f4 ff3e 	bl	8000b44 <__aeabi_dcmpge>
 800bcc8:	2800      	cmp	r0, #0
 800bcca:	d140      	bne.n	800bd4e <__kernel_rem_pio2+0x2ee>
 800bccc:	4683      	mov	fp, r0
 800bcce:	2200      	movs	r2, #0
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	4630      	mov	r0, r6
 800bcd4:	4639      	mov	r1, r7
 800bcd6:	f7f4 ff17 	bl	8000b08 <__aeabi_dcmpeq>
 800bcda:	2800      	cmp	r0, #0
 800bcdc:	f000 80c1 	beq.w	800be62 <__kernel_rem_pio2+0x402>
 800bce0:	1e65      	subs	r5, r4, #1
 800bce2:	462b      	mov	r3, r5
 800bce4:	2200      	movs	r2, #0
 800bce6:	9900      	ldr	r1, [sp, #0]
 800bce8:	428b      	cmp	r3, r1
 800bcea:	da6d      	bge.n	800bdc8 <__kernel_rem_pio2+0x368>
 800bcec:	2a00      	cmp	r2, #0
 800bcee:	f000 808a 	beq.w	800be06 <__kernel_rem_pio2+0x3a6>
 800bcf2:	ab0c      	add	r3, sp, #48	; 0x30
 800bcf4:	f1aa 0a18 	sub.w	sl, sl, #24
 800bcf8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	f000 80ae 	beq.w	800be5e <__kernel_rem_pio2+0x3fe>
 800bd02:	4650      	mov	r0, sl
 800bd04:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800bd78 <__kernel_rem_pio2+0x318>
 800bd08:	f000 f9fa 	bl	800c100 <scalbn>
 800bd0c:	1c6b      	adds	r3, r5, #1
 800bd0e:	00da      	lsls	r2, r3, #3
 800bd10:	9205      	str	r2, [sp, #20]
 800bd12:	ec57 6b10 	vmov	r6, r7, d0
 800bd16:	aa70      	add	r2, sp, #448	; 0x1c0
 800bd18:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800bd8c <__kernel_rem_pio2+0x32c>
 800bd1c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800bd20:	462c      	mov	r4, r5
 800bd22:	f04f 0800 	mov.w	r8, #0
 800bd26:	2c00      	cmp	r4, #0
 800bd28:	f280 80d4 	bge.w	800bed4 <__kernel_rem_pio2+0x474>
 800bd2c:	462c      	mov	r4, r5
 800bd2e:	2c00      	cmp	r4, #0
 800bd30:	f2c0 8102 	blt.w	800bf38 <__kernel_rem_pio2+0x4d8>
 800bd34:	4b18      	ldr	r3, [pc, #96]	; (800bd98 <__kernel_rem_pio2+0x338>)
 800bd36:	461e      	mov	r6, r3
 800bd38:	ab70      	add	r3, sp, #448	; 0x1c0
 800bd3a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800bd3e:	1b2b      	subs	r3, r5, r4
 800bd40:	f04f 0900 	mov.w	r9, #0
 800bd44:	f04f 0a00 	mov.w	sl, #0
 800bd48:	2700      	movs	r7, #0
 800bd4a:	9306      	str	r3, [sp, #24]
 800bd4c:	e0e6      	b.n	800bf1c <__kernel_rem_pio2+0x4bc>
 800bd4e:	f04f 0b02 	mov.w	fp, #2
 800bd52:	e756      	b.n	800bc02 <__kernel_rem_pio2+0x1a2>
 800bd54:	f8d8 3000 	ldr.w	r3, [r8]
 800bd58:	bb05      	cbnz	r5, 800bd9c <__kernel_rem_pio2+0x33c>
 800bd5a:	b123      	cbz	r3, 800bd66 <__kernel_rem_pio2+0x306>
 800bd5c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bd60:	f8c8 3000 	str.w	r3, [r8]
 800bd64:	2301      	movs	r3, #1
 800bd66:	3201      	adds	r2, #1
 800bd68:	f108 0804 	add.w	r8, r8, #4
 800bd6c:	461d      	mov	r5, r3
 800bd6e:	e74f      	b.n	800bc10 <__kernel_rem_pio2+0x1b0>
	...
 800bd7c:	3ff00000 	.word	0x3ff00000
 800bd80:	0800c958 	.word	0x0800c958
 800bd84:	40200000 	.word	0x40200000
 800bd88:	3ff00000 	.word	0x3ff00000
 800bd8c:	3e700000 	.word	0x3e700000
 800bd90:	41700000 	.word	0x41700000
 800bd94:	3fe00000 	.word	0x3fe00000
 800bd98:	0800c918 	.word	0x0800c918
 800bd9c:	1acb      	subs	r3, r1, r3
 800bd9e:	f8c8 3000 	str.w	r3, [r8]
 800bda2:	462b      	mov	r3, r5
 800bda4:	e7df      	b.n	800bd66 <__kernel_rem_pio2+0x306>
 800bda6:	1e62      	subs	r2, r4, #1
 800bda8:	ab0c      	add	r3, sp, #48	; 0x30
 800bdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdae:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bdb2:	a90c      	add	r1, sp, #48	; 0x30
 800bdb4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bdb8:	e738      	b.n	800bc2c <__kernel_rem_pio2+0x1cc>
 800bdba:	1e62      	subs	r2, r4, #1
 800bdbc:	ab0c      	add	r3, sp, #48	; 0x30
 800bdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdc2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bdc6:	e7f4      	b.n	800bdb2 <__kernel_rem_pio2+0x352>
 800bdc8:	a90c      	add	r1, sp, #48	; 0x30
 800bdca:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bdce:	3b01      	subs	r3, #1
 800bdd0:	430a      	orrs	r2, r1
 800bdd2:	e788      	b.n	800bce6 <__kernel_rem_pio2+0x286>
 800bdd4:	3301      	adds	r3, #1
 800bdd6:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bdda:	2900      	cmp	r1, #0
 800bddc:	d0fa      	beq.n	800bdd4 <__kernel_rem_pio2+0x374>
 800bdde:	9a08      	ldr	r2, [sp, #32]
 800bde0:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800bde4:	446a      	add	r2, sp
 800bde6:	3a98      	subs	r2, #152	; 0x98
 800bde8:	9208      	str	r2, [sp, #32]
 800bdea:	9a06      	ldr	r2, [sp, #24]
 800bdec:	a920      	add	r1, sp, #128	; 0x80
 800bdee:	18a2      	adds	r2, r4, r2
 800bdf0:	18e3      	adds	r3, r4, r3
 800bdf2:	f104 0801 	add.w	r8, r4, #1
 800bdf6:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800bdfa:	9302      	str	r3, [sp, #8]
 800bdfc:	9b02      	ldr	r3, [sp, #8]
 800bdfe:	4543      	cmp	r3, r8
 800be00:	da04      	bge.n	800be0c <__kernel_rem_pio2+0x3ac>
 800be02:	461c      	mov	r4, r3
 800be04:	e6a2      	b.n	800bb4c <__kernel_rem_pio2+0xec>
 800be06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800be08:	2301      	movs	r3, #1
 800be0a:	e7e4      	b.n	800bdd6 <__kernel_rem_pio2+0x376>
 800be0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be0e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800be12:	f7f4 fba7 	bl	8000564 <__aeabi_i2d>
 800be16:	e8e5 0102 	strd	r0, r1, [r5], #8
 800be1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be1c:	46ab      	mov	fp, r5
 800be1e:	461c      	mov	r4, r3
 800be20:	f04f 0900 	mov.w	r9, #0
 800be24:	2600      	movs	r6, #0
 800be26:	2700      	movs	r7, #0
 800be28:	9b05      	ldr	r3, [sp, #20]
 800be2a:	4599      	cmp	r9, r3
 800be2c:	dd06      	ble.n	800be3c <__kernel_rem_pio2+0x3dc>
 800be2e:	9b08      	ldr	r3, [sp, #32]
 800be30:	e8e3 6702 	strd	r6, r7, [r3], #8
 800be34:	f108 0801 	add.w	r8, r8, #1
 800be38:	9308      	str	r3, [sp, #32]
 800be3a:	e7df      	b.n	800bdfc <__kernel_rem_pio2+0x39c>
 800be3c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800be40:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800be44:	f7f4 fbf8 	bl	8000638 <__aeabi_dmul>
 800be48:	4602      	mov	r2, r0
 800be4a:	460b      	mov	r3, r1
 800be4c:	4630      	mov	r0, r6
 800be4e:	4639      	mov	r1, r7
 800be50:	f7f4 fa3c 	bl	80002cc <__adddf3>
 800be54:	f109 0901 	add.w	r9, r9, #1
 800be58:	4606      	mov	r6, r0
 800be5a:	460f      	mov	r7, r1
 800be5c:	e7e4      	b.n	800be28 <__kernel_rem_pio2+0x3c8>
 800be5e:	3d01      	subs	r5, #1
 800be60:	e747      	b.n	800bcf2 <__kernel_rem_pio2+0x292>
 800be62:	ec47 6b10 	vmov	d0, r6, r7
 800be66:	f1ca 0000 	rsb	r0, sl, #0
 800be6a:	f000 f949 	bl	800c100 <scalbn>
 800be6e:	ec57 6b10 	vmov	r6, r7, d0
 800be72:	4ba0      	ldr	r3, [pc, #640]	; (800c0f4 <__kernel_rem_pio2+0x694>)
 800be74:	ee10 0a10 	vmov	r0, s0
 800be78:	2200      	movs	r2, #0
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fe62 	bl	8000b44 <__aeabi_dcmpge>
 800be80:	b1f8      	cbz	r0, 800bec2 <__kernel_rem_pio2+0x462>
 800be82:	4b9d      	ldr	r3, [pc, #628]	; (800c0f8 <__kernel_rem_pio2+0x698>)
 800be84:	2200      	movs	r2, #0
 800be86:	4630      	mov	r0, r6
 800be88:	4639      	mov	r1, r7
 800be8a:	f7f4 fbd5 	bl	8000638 <__aeabi_dmul>
 800be8e:	f7f4 fe83 	bl	8000b98 <__aeabi_d2iz>
 800be92:	4680      	mov	r8, r0
 800be94:	f7f4 fb66 	bl	8000564 <__aeabi_i2d>
 800be98:	4b96      	ldr	r3, [pc, #600]	; (800c0f4 <__kernel_rem_pio2+0x694>)
 800be9a:	2200      	movs	r2, #0
 800be9c:	f7f4 fbcc 	bl	8000638 <__aeabi_dmul>
 800bea0:	460b      	mov	r3, r1
 800bea2:	4602      	mov	r2, r0
 800bea4:	4639      	mov	r1, r7
 800bea6:	4630      	mov	r0, r6
 800bea8:	f7f4 fa0e 	bl	80002c8 <__aeabi_dsub>
 800beac:	f7f4 fe74 	bl	8000b98 <__aeabi_d2iz>
 800beb0:	1c65      	adds	r5, r4, #1
 800beb2:	ab0c      	add	r3, sp, #48	; 0x30
 800beb4:	f10a 0a18 	add.w	sl, sl, #24
 800beb8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bebc:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bec0:	e71f      	b.n	800bd02 <__kernel_rem_pio2+0x2a2>
 800bec2:	4630      	mov	r0, r6
 800bec4:	4639      	mov	r1, r7
 800bec6:	f7f4 fe67 	bl	8000b98 <__aeabi_d2iz>
 800beca:	ab0c      	add	r3, sp, #48	; 0x30
 800becc:	4625      	mov	r5, r4
 800bece:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bed2:	e716      	b.n	800bd02 <__kernel_rem_pio2+0x2a2>
 800bed4:	ab0c      	add	r3, sp, #48	; 0x30
 800bed6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800beda:	f7f4 fb43 	bl	8000564 <__aeabi_i2d>
 800bede:	4632      	mov	r2, r6
 800bee0:	463b      	mov	r3, r7
 800bee2:	f7f4 fba9 	bl	8000638 <__aeabi_dmul>
 800bee6:	4642      	mov	r2, r8
 800bee8:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800beec:	464b      	mov	r3, r9
 800beee:	4630      	mov	r0, r6
 800bef0:	4639      	mov	r1, r7
 800bef2:	f7f4 fba1 	bl	8000638 <__aeabi_dmul>
 800bef6:	3c01      	subs	r4, #1
 800bef8:	4606      	mov	r6, r0
 800befa:	460f      	mov	r7, r1
 800befc:	e713      	b.n	800bd26 <__kernel_rem_pio2+0x2c6>
 800befe:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800bf02:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800bf06:	f7f4 fb97 	bl	8000638 <__aeabi_dmul>
 800bf0a:	4602      	mov	r2, r0
 800bf0c:	460b      	mov	r3, r1
 800bf0e:	4648      	mov	r0, r9
 800bf10:	4651      	mov	r1, sl
 800bf12:	f7f4 f9db 	bl	80002cc <__adddf3>
 800bf16:	3701      	adds	r7, #1
 800bf18:	4681      	mov	r9, r0
 800bf1a:	468a      	mov	sl, r1
 800bf1c:	9b00      	ldr	r3, [sp, #0]
 800bf1e:	429f      	cmp	r7, r3
 800bf20:	dc02      	bgt.n	800bf28 <__kernel_rem_pio2+0x4c8>
 800bf22:	9b06      	ldr	r3, [sp, #24]
 800bf24:	429f      	cmp	r7, r3
 800bf26:	ddea      	ble.n	800befe <__kernel_rem_pio2+0x49e>
 800bf28:	9a06      	ldr	r2, [sp, #24]
 800bf2a:	ab48      	add	r3, sp, #288	; 0x120
 800bf2c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800bf30:	e9c6 9a00 	strd	r9, sl, [r6]
 800bf34:	3c01      	subs	r4, #1
 800bf36:	e6fa      	b.n	800bd2e <__kernel_rem_pio2+0x2ce>
 800bf38:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bf3a:	2b02      	cmp	r3, #2
 800bf3c:	dc0b      	bgt.n	800bf56 <__kernel_rem_pio2+0x4f6>
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	dc39      	bgt.n	800bfb6 <__kernel_rem_pio2+0x556>
 800bf42:	d05d      	beq.n	800c000 <__kernel_rem_pio2+0x5a0>
 800bf44:	9b02      	ldr	r3, [sp, #8]
 800bf46:	f003 0007 	and.w	r0, r3, #7
 800bf4a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bf4e:	ecbd 8b02 	vpop	{d8}
 800bf52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bf58:	2b03      	cmp	r3, #3
 800bf5a:	d1f3      	bne.n	800bf44 <__kernel_rem_pio2+0x4e4>
 800bf5c:	9b05      	ldr	r3, [sp, #20]
 800bf5e:	9500      	str	r5, [sp, #0]
 800bf60:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bf64:	eb0d 0403 	add.w	r4, sp, r3
 800bf68:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800bf6c:	46a2      	mov	sl, r4
 800bf6e:	9b00      	ldr	r3, [sp, #0]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f1aa 0a08 	sub.w	sl, sl, #8
 800bf76:	dc69      	bgt.n	800c04c <__kernel_rem_pio2+0x5ec>
 800bf78:	46aa      	mov	sl, r5
 800bf7a:	f1ba 0f01 	cmp.w	sl, #1
 800bf7e:	f1a4 0408 	sub.w	r4, r4, #8
 800bf82:	f300 8083 	bgt.w	800c08c <__kernel_rem_pio2+0x62c>
 800bf86:	9c05      	ldr	r4, [sp, #20]
 800bf88:	ab48      	add	r3, sp, #288	; 0x120
 800bf8a:	441c      	add	r4, r3
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	2100      	movs	r1, #0
 800bf90:	2d01      	cmp	r5, #1
 800bf92:	f300 809a 	bgt.w	800c0ca <__kernel_rem_pio2+0x66a>
 800bf96:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800bf9a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800bf9e:	f1bb 0f00 	cmp.w	fp, #0
 800bfa2:	f040 8098 	bne.w	800c0d6 <__kernel_rem_pio2+0x676>
 800bfa6:	9b04      	ldr	r3, [sp, #16]
 800bfa8:	e9c3 7800 	strd	r7, r8, [r3]
 800bfac:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bfb0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bfb4:	e7c6      	b.n	800bf44 <__kernel_rem_pio2+0x4e4>
 800bfb6:	9e05      	ldr	r6, [sp, #20]
 800bfb8:	ab48      	add	r3, sp, #288	; 0x120
 800bfba:	441e      	add	r6, r3
 800bfbc:	462c      	mov	r4, r5
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	2c00      	cmp	r4, #0
 800bfc4:	da33      	bge.n	800c02e <__kernel_rem_pio2+0x5ce>
 800bfc6:	f1bb 0f00 	cmp.w	fp, #0
 800bfca:	d036      	beq.n	800c03a <__kernel_rem_pio2+0x5da>
 800bfcc:	4602      	mov	r2, r0
 800bfce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfd2:	9c04      	ldr	r4, [sp, #16]
 800bfd4:	e9c4 2300 	strd	r2, r3, [r4]
 800bfd8:	4602      	mov	r2, r0
 800bfda:	460b      	mov	r3, r1
 800bfdc:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bfe0:	f7f4 f972 	bl	80002c8 <__aeabi_dsub>
 800bfe4:	ae4a      	add	r6, sp, #296	; 0x128
 800bfe6:	2401      	movs	r4, #1
 800bfe8:	42a5      	cmp	r5, r4
 800bfea:	da29      	bge.n	800c040 <__kernel_rem_pio2+0x5e0>
 800bfec:	f1bb 0f00 	cmp.w	fp, #0
 800bff0:	d002      	beq.n	800bff8 <__kernel_rem_pio2+0x598>
 800bff2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bff6:	4619      	mov	r1, r3
 800bff8:	9b04      	ldr	r3, [sp, #16]
 800bffa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bffe:	e7a1      	b.n	800bf44 <__kernel_rem_pio2+0x4e4>
 800c000:	9c05      	ldr	r4, [sp, #20]
 800c002:	ab48      	add	r3, sp, #288	; 0x120
 800c004:	441c      	add	r4, r3
 800c006:	2000      	movs	r0, #0
 800c008:	2100      	movs	r1, #0
 800c00a:	2d00      	cmp	r5, #0
 800c00c:	da09      	bge.n	800c022 <__kernel_rem_pio2+0x5c2>
 800c00e:	f1bb 0f00 	cmp.w	fp, #0
 800c012:	d002      	beq.n	800c01a <__kernel_rem_pio2+0x5ba>
 800c014:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c018:	4619      	mov	r1, r3
 800c01a:	9b04      	ldr	r3, [sp, #16]
 800c01c:	e9c3 0100 	strd	r0, r1, [r3]
 800c020:	e790      	b.n	800bf44 <__kernel_rem_pio2+0x4e4>
 800c022:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c026:	f7f4 f951 	bl	80002cc <__adddf3>
 800c02a:	3d01      	subs	r5, #1
 800c02c:	e7ed      	b.n	800c00a <__kernel_rem_pio2+0x5aa>
 800c02e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c032:	f7f4 f94b 	bl	80002cc <__adddf3>
 800c036:	3c01      	subs	r4, #1
 800c038:	e7c3      	b.n	800bfc2 <__kernel_rem_pio2+0x562>
 800c03a:	4602      	mov	r2, r0
 800c03c:	460b      	mov	r3, r1
 800c03e:	e7c8      	b.n	800bfd2 <__kernel_rem_pio2+0x572>
 800c040:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c044:	f7f4 f942 	bl	80002cc <__adddf3>
 800c048:	3401      	adds	r4, #1
 800c04a:	e7cd      	b.n	800bfe8 <__kernel_rem_pio2+0x588>
 800c04c:	e9da 8900 	ldrd	r8, r9, [sl]
 800c050:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c054:	9b00      	ldr	r3, [sp, #0]
 800c056:	3b01      	subs	r3, #1
 800c058:	9300      	str	r3, [sp, #0]
 800c05a:	4632      	mov	r2, r6
 800c05c:	463b      	mov	r3, r7
 800c05e:	4640      	mov	r0, r8
 800c060:	4649      	mov	r1, r9
 800c062:	f7f4 f933 	bl	80002cc <__adddf3>
 800c066:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c06a:	4602      	mov	r2, r0
 800c06c:	460b      	mov	r3, r1
 800c06e:	4640      	mov	r0, r8
 800c070:	4649      	mov	r1, r9
 800c072:	f7f4 f929 	bl	80002c8 <__aeabi_dsub>
 800c076:	4632      	mov	r2, r6
 800c078:	463b      	mov	r3, r7
 800c07a:	f7f4 f927 	bl	80002cc <__adddf3>
 800c07e:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c082:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c086:	ed8a 7b00 	vstr	d7, [sl]
 800c08a:	e770      	b.n	800bf6e <__kernel_rem_pio2+0x50e>
 800c08c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c090:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c094:	4640      	mov	r0, r8
 800c096:	4632      	mov	r2, r6
 800c098:	463b      	mov	r3, r7
 800c09a:	4649      	mov	r1, r9
 800c09c:	f7f4 f916 	bl	80002cc <__adddf3>
 800c0a0:	e9cd 0100 	strd	r0, r1, [sp]
 800c0a4:	4602      	mov	r2, r0
 800c0a6:	460b      	mov	r3, r1
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	4649      	mov	r1, r9
 800c0ac:	f7f4 f90c 	bl	80002c8 <__aeabi_dsub>
 800c0b0:	4632      	mov	r2, r6
 800c0b2:	463b      	mov	r3, r7
 800c0b4:	f7f4 f90a 	bl	80002cc <__adddf3>
 800c0b8:	ed9d 7b00 	vldr	d7, [sp]
 800c0bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0c0:	ed84 7b00 	vstr	d7, [r4]
 800c0c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0c8:	e757      	b.n	800bf7a <__kernel_rem_pio2+0x51a>
 800c0ca:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c0ce:	f7f4 f8fd 	bl	80002cc <__adddf3>
 800c0d2:	3d01      	subs	r5, #1
 800c0d4:	e75c      	b.n	800bf90 <__kernel_rem_pio2+0x530>
 800c0d6:	9b04      	ldr	r3, [sp, #16]
 800c0d8:	9a04      	ldr	r2, [sp, #16]
 800c0da:	601f      	str	r7, [r3, #0]
 800c0dc:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c0e0:	605c      	str	r4, [r3, #4]
 800c0e2:	609d      	str	r5, [r3, #8]
 800c0e4:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c0e8:	60d3      	str	r3, [r2, #12]
 800c0ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0ee:	6110      	str	r0, [r2, #16]
 800c0f0:	6153      	str	r3, [r2, #20]
 800c0f2:	e727      	b.n	800bf44 <__kernel_rem_pio2+0x4e4>
 800c0f4:	41700000 	.word	0x41700000
 800c0f8:	3e700000 	.word	0x3e700000
 800c0fc:	00000000 	.word	0x00000000

0800c100 <scalbn>:
 800c100:	b570      	push	{r4, r5, r6, lr}
 800c102:	ec55 4b10 	vmov	r4, r5, d0
 800c106:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c10a:	4606      	mov	r6, r0
 800c10c:	462b      	mov	r3, r5
 800c10e:	b999      	cbnz	r1, 800c138 <scalbn+0x38>
 800c110:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c114:	4323      	orrs	r3, r4
 800c116:	d03f      	beq.n	800c198 <scalbn+0x98>
 800c118:	4b35      	ldr	r3, [pc, #212]	; (800c1f0 <scalbn+0xf0>)
 800c11a:	4629      	mov	r1, r5
 800c11c:	ee10 0a10 	vmov	r0, s0
 800c120:	2200      	movs	r2, #0
 800c122:	f7f4 fa89 	bl	8000638 <__aeabi_dmul>
 800c126:	4b33      	ldr	r3, [pc, #204]	; (800c1f4 <scalbn+0xf4>)
 800c128:	429e      	cmp	r6, r3
 800c12a:	4604      	mov	r4, r0
 800c12c:	460d      	mov	r5, r1
 800c12e:	da10      	bge.n	800c152 <scalbn+0x52>
 800c130:	a327      	add	r3, pc, #156	; (adr r3, 800c1d0 <scalbn+0xd0>)
 800c132:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c136:	e01f      	b.n	800c178 <scalbn+0x78>
 800c138:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c13c:	4291      	cmp	r1, r2
 800c13e:	d10c      	bne.n	800c15a <scalbn+0x5a>
 800c140:	ee10 2a10 	vmov	r2, s0
 800c144:	4620      	mov	r0, r4
 800c146:	4629      	mov	r1, r5
 800c148:	f7f4 f8c0 	bl	80002cc <__adddf3>
 800c14c:	4604      	mov	r4, r0
 800c14e:	460d      	mov	r5, r1
 800c150:	e022      	b.n	800c198 <scalbn+0x98>
 800c152:	460b      	mov	r3, r1
 800c154:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c158:	3936      	subs	r1, #54	; 0x36
 800c15a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c15e:	4296      	cmp	r6, r2
 800c160:	dd0d      	ble.n	800c17e <scalbn+0x7e>
 800c162:	2d00      	cmp	r5, #0
 800c164:	a11c      	add	r1, pc, #112	; (adr r1, 800c1d8 <scalbn+0xd8>)
 800c166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c16a:	da02      	bge.n	800c172 <scalbn+0x72>
 800c16c:	a11c      	add	r1, pc, #112	; (adr r1, 800c1e0 <scalbn+0xe0>)
 800c16e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c172:	a319      	add	r3, pc, #100	; (adr r3, 800c1d8 <scalbn+0xd8>)
 800c174:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c178:	f7f4 fa5e 	bl	8000638 <__aeabi_dmul>
 800c17c:	e7e6      	b.n	800c14c <scalbn+0x4c>
 800c17e:	1872      	adds	r2, r6, r1
 800c180:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c184:	428a      	cmp	r2, r1
 800c186:	dcec      	bgt.n	800c162 <scalbn+0x62>
 800c188:	2a00      	cmp	r2, #0
 800c18a:	dd08      	ble.n	800c19e <scalbn+0x9e>
 800c18c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c190:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c194:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c198:	ec45 4b10 	vmov	d0, r4, r5
 800c19c:	bd70      	pop	{r4, r5, r6, pc}
 800c19e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c1a2:	da08      	bge.n	800c1b6 <scalbn+0xb6>
 800c1a4:	2d00      	cmp	r5, #0
 800c1a6:	a10a      	add	r1, pc, #40	; (adr r1, 800c1d0 <scalbn+0xd0>)
 800c1a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1ac:	dac0      	bge.n	800c130 <scalbn+0x30>
 800c1ae:	a10e      	add	r1, pc, #56	; (adr r1, 800c1e8 <scalbn+0xe8>)
 800c1b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c1b4:	e7bc      	b.n	800c130 <scalbn+0x30>
 800c1b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1ba:	3236      	adds	r2, #54	; 0x36
 800c1bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c1c4:	4620      	mov	r0, r4
 800c1c6:	4b0c      	ldr	r3, [pc, #48]	; (800c1f8 <scalbn+0xf8>)
 800c1c8:	2200      	movs	r2, #0
 800c1ca:	e7d5      	b.n	800c178 <scalbn+0x78>
 800c1cc:	f3af 8000 	nop.w
 800c1d0:	c2f8f359 	.word	0xc2f8f359
 800c1d4:	01a56e1f 	.word	0x01a56e1f
 800c1d8:	8800759c 	.word	0x8800759c
 800c1dc:	7e37e43c 	.word	0x7e37e43c
 800c1e0:	8800759c 	.word	0x8800759c
 800c1e4:	fe37e43c 	.word	0xfe37e43c
 800c1e8:	c2f8f359 	.word	0xc2f8f359
 800c1ec:	81a56e1f 	.word	0x81a56e1f
 800c1f0:	43500000 	.word	0x43500000
 800c1f4:	ffff3cb0 	.word	0xffff3cb0
 800c1f8:	3c900000 	.word	0x3c900000
 800c1fc:	00000000 	.word	0x00000000

0800c200 <floor>:
 800c200:	ec51 0b10 	vmov	r0, r1, d0
 800c204:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c20c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c210:	2e13      	cmp	r6, #19
 800c212:	ee10 5a10 	vmov	r5, s0
 800c216:	ee10 8a10 	vmov	r8, s0
 800c21a:	460c      	mov	r4, r1
 800c21c:	dc31      	bgt.n	800c282 <floor+0x82>
 800c21e:	2e00      	cmp	r6, #0
 800c220:	da14      	bge.n	800c24c <floor+0x4c>
 800c222:	a333      	add	r3, pc, #204	; (adr r3, 800c2f0 <floor+0xf0>)
 800c224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c228:	f7f4 f850 	bl	80002cc <__adddf3>
 800c22c:	2200      	movs	r2, #0
 800c22e:	2300      	movs	r3, #0
 800c230:	f7f4 fc92 	bl	8000b58 <__aeabi_dcmpgt>
 800c234:	b138      	cbz	r0, 800c246 <floor+0x46>
 800c236:	2c00      	cmp	r4, #0
 800c238:	da53      	bge.n	800c2e2 <floor+0xe2>
 800c23a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c23e:	4325      	orrs	r5, r4
 800c240:	d052      	beq.n	800c2e8 <floor+0xe8>
 800c242:	4c2d      	ldr	r4, [pc, #180]	; (800c2f8 <floor+0xf8>)
 800c244:	2500      	movs	r5, #0
 800c246:	4621      	mov	r1, r4
 800c248:	4628      	mov	r0, r5
 800c24a:	e024      	b.n	800c296 <floor+0x96>
 800c24c:	4f2b      	ldr	r7, [pc, #172]	; (800c2fc <floor+0xfc>)
 800c24e:	4137      	asrs	r7, r6
 800c250:	ea01 0307 	and.w	r3, r1, r7
 800c254:	4303      	orrs	r3, r0
 800c256:	d01e      	beq.n	800c296 <floor+0x96>
 800c258:	a325      	add	r3, pc, #148	; (adr r3, 800c2f0 <floor+0xf0>)
 800c25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c25e:	f7f4 f835 	bl	80002cc <__adddf3>
 800c262:	2200      	movs	r2, #0
 800c264:	2300      	movs	r3, #0
 800c266:	f7f4 fc77 	bl	8000b58 <__aeabi_dcmpgt>
 800c26a:	2800      	cmp	r0, #0
 800c26c:	d0eb      	beq.n	800c246 <floor+0x46>
 800c26e:	2c00      	cmp	r4, #0
 800c270:	bfbe      	ittt	lt
 800c272:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c276:	4133      	asrlt	r3, r6
 800c278:	18e4      	addlt	r4, r4, r3
 800c27a:	ea24 0407 	bic.w	r4, r4, r7
 800c27e:	2500      	movs	r5, #0
 800c280:	e7e1      	b.n	800c246 <floor+0x46>
 800c282:	2e33      	cmp	r6, #51	; 0x33
 800c284:	dd0b      	ble.n	800c29e <floor+0x9e>
 800c286:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c28a:	d104      	bne.n	800c296 <floor+0x96>
 800c28c:	ee10 2a10 	vmov	r2, s0
 800c290:	460b      	mov	r3, r1
 800c292:	f7f4 f81b 	bl	80002cc <__adddf3>
 800c296:	ec41 0b10 	vmov	d0, r0, r1
 800c29a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c29e:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c2a2:	f04f 37ff 	mov.w	r7, #4294967295
 800c2a6:	40df      	lsrs	r7, r3
 800c2a8:	4238      	tst	r0, r7
 800c2aa:	d0f4      	beq.n	800c296 <floor+0x96>
 800c2ac:	a310      	add	r3, pc, #64	; (adr r3, 800c2f0 <floor+0xf0>)
 800c2ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2b2:	f7f4 f80b 	bl	80002cc <__adddf3>
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	f7f4 fc4d 	bl	8000b58 <__aeabi_dcmpgt>
 800c2be:	2800      	cmp	r0, #0
 800c2c0:	d0c1      	beq.n	800c246 <floor+0x46>
 800c2c2:	2c00      	cmp	r4, #0
 800c2c4:	da0a      	bge.n	800c2dc <floor+0xdc>
 800c2c6:	2e14      	cmp	r6, #20
 800c2c8:	d101      	bne.n	800c2ce <floor+0xce>
 800c2ca:	3401      	adds	r4, #1
 800c2cc:	e006      	b.n	800c2dc <floor+0xdc>
 800c2ce:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	40b3      	lsls	r3, r6
 800c2d6:	441d      	add	r5, r3
 800c2d8:	45a8      	cmp	r8, r5
 800c2da:	d8f6      	bhi.n	800c2ca <floor+0xca>
 800c2dc:	ea25 0507 	bic.w	r5, r5, r7
 800c2e0:	e7b1      	b.n	800c246 <floor+0x46>
 800c2e2:	2500      	movs	r5, #0
 800c2e4:	462c      	mov	r4, r5
 800c2e6:	e7ae      	b.n	800c246 <floor+0x46>
 800c2e8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c2ec:	e7ab      	b.n	800c246 <floor+0x46>
 800c2ee:	bf00      	nop
 800c2f0:	8800759c 	.word	0x8800759c
 800c2f4:	7e37e43c 	.word	0x7e37e43c
 800c2f8:	bff00000 	.word	0xbff00000
 800c2fc:	000fffff 	.word	0x000fffff

0800c300 <_init>:
 800c300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c302:	bf00      	nop
 800c304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c306:	bc08      	pop	{r3}
 800c308:	469e      	mov	lr, r3
 800c30a:	4770      	bx	lr

0800c30c <_fini>:
 800c30c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c30e:	bf00      	nop
 800c310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c312:	bc08      	pop	{r3}
 800c314:	469e      	mov	lr, r3
 800c316:	4770      	bx	lr
