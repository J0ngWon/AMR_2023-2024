<?xml version="1.0"?>
<launch>
    <!-- Arguments for Kinect -->
    <arg name="camera" default="camera" />
    <arg name="rgb_frame_id"   default="$(arg camera)_rgb_optical_frame" />
    <arg name="depth_frame_id" default="$(arg camera)_depth_optical_frame" />
    <arg name="data_skip" default="0" />
    <arg name="device_id" default="#1" />
    <arg name="rgb_camera_info_url"   default="" />
    <arg name="depth_camera_info_url" default="" />
    <arg name="depth_registration" default="false" />
    <arg name="rgb"              default="rgb" />
    <arg name="ir"               default="ir" />
    <arg name="depth"            default="depth" />
    <arg name="depth_registered" default="depth_registered" />
    <arg name="projector"        default="projector" />
    <arg name="load_driver" default="true" />
    <arg name="publish_tf" default="true" />
    <arg name="rgb_processing"                  default="true"/>
    <arg name="ir_processing"                   default="true"/>
    <arg name="depth_processing"                default="true"/>
    <arg name="depth_registered_processing"     default="true"/>
    <arg name="disparity_processing"            default="true"/>
    <arg name="disparity_registered_processing" default="true"/>
    <arg name="hw_registered_processing"        default="true" />
    <arg name="sw_registered_processing"        default="true" />
    <arg name="bond" default="false" />
    <arg name="respawn" default="$(arg bond)" />
    <arg name="num_worker_threads" default="4" />
    <arg name="libfreenect_debug" default="false" />
    <arg name="enable_rgb_diagnostics" default="false" />
    <arg name="enable_ir_diagnostics" default="false" />
    <arg name="enable_depth_diagnostics" default="false" />
    <arg name="diagnostics_max_frequency" default="30.0" />
    <arg name="diagnostics_min_frequency" default="30.0" />
    <arg name="diagnostics_tolerance" default="0.05" />
    <arg name="diagnostics_window_time" default="5.0" />

    <!-- Arguments for Jetson Inference -->
    <!-- arg name="input" default="/camera/rgb/image_color"/ -->
    <arg name="input" default="dev/video0"/>
    <arg name="input_width" default="0"/>
    <arg name="input_height" default="0"/>
    <arg name="input_codec" default="unknown"/>
    <arg name="input_loop" default="0"/>
    <arg name="model_name" default="ssd-mobilenet-v2"/>
    <arg name="model_path" default="/home/k2c1/Downloads/ssd-mobilenet.onnx"/>
    <arg name="prototxt_path" default=""/>
    <arg name="class_labels_path" default="/home/k2c1/Downloads/labels.txt"/>
    <arg name="input_blob" default="input_0"/>
    <arg name="output_cvg" default="scores"/>
    <arg name="output_bbox" default="boxes"/>
    <arg name="overlay_flags" default="box,labels,conf"/>
    <arg name="mean_pixel_value" default="0.0"/>
    <arg name="threshold" default="0.5"/>
    <arg name="output" default="display://0"/>
    <arg name="output_codec" default="unknown"/>
    <arg name="output_bitrate" default="0"/>

    <!-- Kinect Launch -->
    <group ns="$(arg camera)">
        <arg name="manager" value="$(arg camera)_nodelet_manager" />
        <arg name="debug" default="false" />
        <include file="$(find rgbd_launch)/launch/includes/manager.launch.xml">
            <arg name="name" value="$(arg manager)" />
            <arg name="debug" value="$(arg debug)" />
            <arg name="num_worker_threads" value="$(arg num_worker_threads)" />
        </include>

        <include if="$(arg load_driver)" file="$(find freenect_launch)/launch/includes/device.launch.xml">
            <arg name="manager" value="$(arg manager)" />
            <arg name="device_id" value="$(arg device_id)" />
            <arg name="rgb_frame_id" value="$(arg rgb_frame_id)" />
            <arg name="depth_frame_id" value="$(arg depth_frame_id)" />
            <arg name="rgb_camera_info_url" value="$(arg rgb_camera_info_url)" />
            <arg name="depth_camera_info_url" value="$(arg depth_camera_info_url)" />
            <arg name="depth_registration" value="$(arg depth_registration)" />
            <arg name="data_skip" value="$(arg data_skip)" />
            <arg name="rgb" value="$(arg rgb)" />
            <arg name="ir" value="$(arg ir)" />
            <arg name="depth" value="$(arg depth)" />
            <arg name="depth_registered" value="$(arg depth_registered)" />
            <arg name="projector" value="$(arg projector)" />
            <arg name="respawn" value="$(arg respawn)" />
            <arg name="libfreenect_debug" value="$(arg libfreenect_debug)" />
            <arg name="enable_rgb_diagnostics" value="$(arg enable_rgb_diagnostics)" />
            <arg name="enable_ir_diagnostics" value="$(arg enable_ir_diagnostics)" />
            <arg name="enable_depth_diagnostics" value="$(arg enable_depth_diagnostics)" />
            <arg name="diagnostics_max_frequency" value="$(arg diagnostics_max_frequency)" />
            <arg name="diagnostics_min_frequency" value="$(arg diagnostics_min_frequency)" />
            <arg name="diagnostics_tolerance" value="$(arg diagnostics_tolerance)" />
            <arg name="diagnostics_window_time" value="$(arg diagnostics_window_time)" />
            <!-- FPS settings -->
            <!-- arg name="depth_mode" value="VGA_30Hz" / -->
            <!-- arg name="rgb_mode" value="VGA_30Hz" / -->
        </include>

        <include file="$(find rgbd_launch)/launch/includes/processing.launch.xml">
            <arg name="manager" value="$(arg manager)" />
            <arg name="rgb" value="$(arg rgb)" />
            <arg name="ir" value="$(arg ir)" />
            <arg name="depth" value="$(arg depth)" />
            <arg name="depth_registered" value="$(arg depth_registered)" />
            <arg name="projector" value="$(arg projector)" />
            <arg name="respawn" value="$(arg respawn)" />
            <arg name="rgb_processing" value="$(arg rgb_processing)" />
            <arg name="ir_processing" value="$(arg ir_processing)" />
            <arg name="depth_processing" value="$(arg depth_processing)" />
            <arg name="depth_registered_processing" value="$(arg depth_registered_processing)" />
            <arg name="disparity_processing" value="$(arg disparity_processing)" />
            <arg name="disparity_registered_processing" value="$(arg disparity_registered_processing)" />
            <arg name="hw_registered_processing" value="$(arg hw_registered_processing)" />
            <arg name="sw_registered_processing" value="$(arg sw_registered_processing)" />
        </include>
    </group>

    <include if="$(arg publish_tf)" file="$(find rgbd_launch)/launch/kinect_frames.launch">
        <arg name="camera" value="$(arg camera)" />
    </include>

    <!-- Jetson Inference Launch -->
    <include file="$(find ros_deep_learning)/launch/video_source.ros1.launch">
        <arg name="input" value="$(arg input)"/>
        <arg name="input_width" value="$(arg input_width)"/>
        <arg name="input_height" value="$(arg input_height)"/>
        <arg name="input_codec" value="$(arg input_codec)"/>
        <arg name="input_loop" value="$(arg input_loop)"/>
    </include>

    <node pkg="ros_deep_learning" type="detectnet" name="detectnet" output="screen">
        <remap from="/detectnet/image_in" to="/camera/rgb/image_color"/>
        <param name="model_name" value="$(arg model_name)"/>
        <param name="model_path" value="$(arg model_path)"/>
        <param name="prototxt_path" value="$(arg prototxt_path)"/>
        <param name="class_labels_path" value="$(arg class_labels_path)"/>
        <param name="input_blob" value="$(arg input_blob)"/>
        <param name="output_cvg" value="$(arg output_cvg)"/>
        <param name="output_bbox" value="$(arg output_bbox)"/>
        <param name="overlay_flags" value="$(arg overlay_flags)"/>
        <param name="mean_pixel_value" value="$(arg mean_pixel_value)"/>
        <param name="threshold" value="$(arg threshold)"/>
    </node>

    <include file="$(find ros_deep_learning)/launch/video_output.ros1.launch">
        <arg name="topic" value="/detectnet/overlay"/>
        <arg name="output" value="$(arg output)"/>
        <arg name="output_codec" value="$(arg output_codec)"/>
        <arg name="output_bitrate" value="$(arg output_bitrate)"/>
    </include>

    <!-- rosbridge_server 실행 -->
    <include file="$(find rosbridge_server)/launch/rosbridge_websocket.launch"/>

    <!-- Python ROS 노드 실행 -->
    <node pkg="ros_web" type="ros_web.py" name="ros_web" output="screen"/>

    <!-- Python HTTP 서버 실행 -->
    <node pkg="ros_web" type="start_http_server.py" name="http_server" output="screen"/>
    
    <!-- web_video_server 실행 -->
    <node pkg="web_video_server" type="web_video_server" name="web_video_server" output="screen"/>

    <!--node name="rviz" pkg="rviz" type="rviz" args="-d $(find ros_deep_learning)/rviz/display.rviz" /-->

</launch>

