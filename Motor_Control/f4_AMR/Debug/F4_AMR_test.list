
F4_AMR_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c100  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800c2d0  0800c2d0  0001c2d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c920  0800c920  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800c920  0800c920  0001c920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c928  0800c928  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c928  0800c928  0001c928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c92c  0800c92c  0001c92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800c930  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005c4  20000220  0800cb50  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007e4  0800cb50  000207e4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f3b2  00000000  00000000  00020293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000225f  00000000  00000000  0002f645  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000318a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b30  00000000  00000000  000326f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022ea5  00000000  00000000  00033228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010b0f  00000000  00000000  000560cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3cd2  00000000  00000000  00066bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054f4  00000000  00000000  0013a8b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  0013fda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c2b8 	.word	0x0800c2b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800c2b8 	.word	0x0800c2b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001088:	f3bf 8f4f 	dsb	sy
}
 800108c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800108e:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <__NVIC_SystemReset+0x24>)
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001096:	4904      	ldr	r1, [pc, #16]	; (80010a8 <__NVIC_SystemReset+0x24>)
 8001098:	4b04      	ldr	r3, [pc, #16]	; (80010ac <__NVIC_SystemReset+0x28>)
 800109a:	4313      	orrs	r3, r2
 800109c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800109e:	f3bf 8f4f 	dsb	sy
}
 80010a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80010a4:	bf00      	nop
 80010a6:	e7fd      	b.n	80010a4 <__NVIC_SystemReset+0x20>
 80010a8:	e000ed00 	.word	0xe000ed00
 80010ac:	05fa0004 	.word	0x05fa0004

080010b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3b01      	subs	r3, #1
 80010bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010c0:	d301      	bcc.n	80010c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00f      	b.n	80010e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010c6:	4a0a      	ldr	r2, [pc, #40]	; (80010f0 <SysTick_Config+0x40>)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	3b01      	subs	r3, #1
 80010cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ce:	210f      	movs	r1, #15
 80010d0:	f04f 30ff 	mov.w	r0, #4294967295
 80010d4:	f7ff ffac 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <SysTick_Config+0x40>)
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010de:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <SysTick_Config+0x40>)
 80010e0:	2207      	movs	r2, #7
 80010e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	e000e010 	.word	0xe000e010

080010f4 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2b0a      	cmp	r3, #10
 8001100:	d106      	bne.n	8001110 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8001102:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001106:	2201      	movs	r2, #1
 8001108:	4907      	ldr	r1, [pc, #28]	; (8001128 <__io_putchar+0x34>)
 800110a:	4808      	ldr	r0, [pc, #32]	; (800112c <__io_putchar+0x38>)
 800110c:	f004 fb20 	bl	8005750 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001110:	1d39      	adds	r1, r7, #4
 8001112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001116:	2201      	movs	r2, #1
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <__io_putchar+0x38>)
 800111a:	f004 fb19 	bl	8005750 <HAL_UART_Transmit>
	return ch;
 800111e:	687b      	ldr	r3, [r7, #4]
}
 8001120:	4618      	mov	r0, r3
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	0800c2d0 	.word	0x0800c2d0
 800112c:	200003a4 	.word	0x200003a4

08001130 <radiansToDegrees>:
/******************** Time *********************/
extern volatile uint32_t msTicks;
uint32_t time=0;

/******************** O.W *********************/
float radiansToDegrees(float radians) {
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	ed87 0a01 	vstr	s0, [r7, #4]
	return radians * (180.0 / M_PI);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fa24 	bl	8000588 <__aeabi_f2d>
 8001140:	a309      	add	r3, pc, #36	; (adr r3, 8001168 <radiansToDegrees+0x38>)
 8001142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001146:	f7ff fa77 	bl	8000638 <__aeabi_dmul>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	4610      	mov	r0, r2
 8001150:	4619      	mov	r1, r3
 8001152:	f7ff fd69 	bl	8000c28 <__aeabi_d2f>
 8001156:	4603      	mov	r3, r0
 8001158:	ee07 3a90 	vmov	s15, r3
}
 800115c:	eeb0 0a67 	vmov.f32	s0, s15
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	1a63c1f8 	.word	0x1a63c1f8
 800116c:	404ca5dc 	.word	0x404ca5dc

08001170 <angleToPulse>:

uint16_t angleToPulse(uint8_t angle) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	return (MIN_PULSE + (MAX_PULSE - MIN_PULSE) * (angle * 0.55555556) / 180);
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff f9f1 	bl	8000564 <__aeabi_i2d>
 8001182:	a319      	add	r3, pc, #100	; (adr r3, 80011e8 <angleToPulse+0x78>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f7ff fa56 	bl	8000638 <__aeabi_dmul>
 800118c:	4602      	mov	r2, r0
 800118e:	460b      	mov	r3, r1
 8001190:	4610      	mov	r0, r2
 8001192:	4619      	mov	r1, r3
 8001194:	a316      	add	r3, pc, #88	; (adr r3, 80011f0 <angleToPulse+0x80>)
 8001196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800119a:	f7ff fa4d 	bl	8000638 <__aeabi_dmul>
 800119e:	4602      	mov	r2, r0
 80011a0:	460b      	mov	r3, r1
 80011a2:	4610      	mov	r0, r2
 80011a4:	4619      	mov	r1, r3
 80011a6:	f04f 0200 	mov.w	r2, #0
 80011aa:	4b0d      	ldr	r3, [pc, #52]	; (80011e0 <angleToPulse+0x70>)
 80011ac:	f7ff fb6e 	bl	800088c <__aeabi_ddiv>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	f04f 0200 	mov.w	r2, #0
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <angleToPulse+0x74>)
 80011be:	f7ff f885 	bl	80002cc <__adddf3>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4610      	mov	r0, r2
 80011c8:	4619      	mov	r1, r3
 80011ca:	f7ff fd0d 	bl	8000be8 <__aeabi_d2uiz>
 80011ce:	4603      	mov	r3, r0
 80011d0:	b29b      	uxth	r3, r3
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	f3af 8000 	nop.w
 80011e0:	40668000 	.word	0x40668000
 80011e4:	407f4000 	.word	0x407f4000
 80011e8:	7429f36e 	.word	0x7429f36e
 80011ec:	3fe1c71c 	.word	0x3fe1c71c
 80011f0:	00000000 	.word	0x00000000
 80011f4:	40ab5800 	.word	0x40ab5800

080011f8 <limitAngle>:

uint8_t limitAngle(uint8_t angle, uint8_t minAngle, uint8_t maxAngle) {
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	71fb      	strb	r3, [r7, #7]
 8001202:	460b      	mov	r3, r1
 8001204:	71bb      	strb	r3, [r7, #6]
 8001206:	4613      	mov	r3, r2
 8001208:	717b      	strb	r3, [r7, #5]
	if (angle <= minAngle) return minAngle;
 800120a:	79fa      	ldrb	r2, [r7, #7]
 800120c:	79bb      	ldrb	r3, [r7, #6]
 800120e:	429a      	cmp	r2, r3
 8001210:	d801      	bhi.n	8001216 <limitAngle+0x1e>
 8001212:	79bb      	ldrb	r3, [r7, #6]
 8001214:	e006      	b.n	8001224 <limitAngle+0x2c>
	if (angle >= maxAngle) return maxAngle;
 8001216:	79fa      	ldrb	r2, [r7, #7]
 8001218:	797b      	ldrb	r3, [r7, #5]
 800121a:	429a      	cmp	r2, r3
 800121c:	d301      	bcc.n	8001222 <limitAngle+0x2a>
 800121e:	797b      	ldrb	r3, [r7, #5]
 8001220:	e000      	b.n	8001224 <limitAngle+0x2c>
	return angle;
 8001222:	79fb      	ldrb	r3, [r7, #7]
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <setMotorAngle>:

void setMotorAngle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle, uint8_t minAngle, uint8_t maxAngle) {
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	4611      	mov	r1, r2
 800123c:	461a      	mov	r2, r3
 800123e:	460b      	mov	r3, r1
 8001240:	71fb      	strb	r3, [r7, #7]
 8001242:	4613      	mov	r3, r2
 8001244:	71bb      	strb	r3, [r7, #6]
	uint8_t limitedAngle = limitAngle(angle, minAngle, maxAngle);
 8001246:	f897 2020 	ldrb.w	r2, [r7, #32]
 800124a:	79b9      	ldrb	r1, [r7, #6]
 800124c:	79fb      	ldrb	r3, [r7, #7]
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffd2 	bl	80011f8 <limitAngle>
 8001254:	4603      	mov	r3, r0
 8001256:	75fb      	strb	r3, [r7, #23]
	uint16_t pulse = angleToPulse(limitedAngle);
 8001258:	7dfb      	ldrb	r3, [r7, #23]
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff88 	bl	8001170 <angleToPulse>
 8001260:	4603      	mov	r3, r0
 8001262:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d104      	bne.n	8001274 <setMotorAngle+0x44>
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	8aba      	ldrh	r2, [r7, #20]
 8001270:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001272:	e013      	b.n	800129c <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2b04      	cmp	r3, #4
 8001278:	d104      	bne.n	8001284 <setMotorAngle+0x54>
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	8abb      	ldrh	r3, [r7, #20]
 8001280:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001282:	e00b      	b.n	800129c <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b08      	cmp	r3, #8
 8001288:	d104      	bne.n	8001294 <setMotorAngle+0x64>
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	8abb      	ldrh	r3, [r7, #20]
 8001290:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8001292:	e003      	b.n	800129c <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	8abb      	ldrh	r3, [r7, #20]
 800129a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800129c:	bf00      	nop
 800129e:	3718      	adds	r7, #24
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	0000      	movs	r0, r0
	...

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012ac:	ed2d 8b0a 	vpush	{d8-d12}
 80012b0:	b0a0      	sub	sp, #128	; 0x80
 80012b2:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b4:	f001 fffa 	bl	80032ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b8:	f000 fc62 	bl	8001b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012bc:	f000 ff22 	bl	8002104 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012c0:	f000 fef6 	bl	80020b0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80012c4:	f000 fcca 	bl	8001c5c <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c8:	f000 fd48 	bl	8001d5c <MX_TIM3_Init>
  MX_TIM4_Init();
 80012cc:	f000 fdc8 	bl	8001e60 <MX_TIM4_Init>
  MX_TIM14_Init();
 80012d0:	f000 fea0 	bl	8002014 <MX_TIM14_Init>
  MX_TIM5_Init();
 80012d4:	f000 fe3a 	bl	8001f4c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, shield_power_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2140      	movs	r1, #64	; 0x40
 80012dc:	48b3      	ldr	r0, [pc, #716]	; (80015ac <main+0x304>)
 80012de:	f002 fba7 	bl	8003a30 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 80012e2:	48b3      	ldr	r0, [pc, #716]	; (80015b0 <main+0x308>)
 80012e4:	f003 fa0e 	bl	8004704 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012e8:	2104      	movs	r1, #4
 80012ea:	48b1      	ldr	r0, [pc, #708]	; (80015b0 <main+0x308>)
 80012ec:	f003 faca 	bl	8004884 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012f0:	2108      	movs	r1, #8
 80012f2:	48af      	ldr	r0, [pc, #700]	; (80015b0 <main+0x308>)
 80012f4:	f003 fac6 	bl	8004884 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012f8:	2100      	movs	r1, #0
 80012fa:	48ae      	ldr	r0, [pc, #696]	; (80015b4 <main+0x30c>)
 80012fc:	f003 fac2 	bl	8004884 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001300:	2104      	movs	r1, #4
 8001302:	48ac      	ldr	r0, [pc, #688]	; (80015b4 <main+0x30c>)
 8001304:	f003 fabe 	bl	8004884 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001308:	2100      	movs	r1, #0
 800130a:	48ab      	ldr	r0, [pc, #684]	; (80015b8 <main+0x310>)
 800130c:	f003 faba 	bl	8004884 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001310:	2100      	movs	r1, #0
 8001312:	48aa      	ldr	r0, [pc, #680]	; (80015bc <main+0x314>)
 8001314:	f003 fab6 	bl	8004884 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001318:	2100      	movs	r1, #0
 800131a:	48a9      	ldr	r0, [pc, #676]	; (80015c0 <main+0x318>)
 800131c:	f003 fab2 	bl	8004884 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001320:	2104      	movs	r1, #4
 8001322:	48a7      	ldr	r0, [pc, #668]	; (80015c0 <main+0x318>)
 8001324:	f003 faae 	bl	8004884 <HAL_TIM_PWM_Start>

	motorControl(control_1, control_2);
 8001328:	4ba6      	ldr	r3, [pc, #664]	; (80015c4 <main+0x31c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4aa6      	ldr	r2, [pc, #664]	; (80015c8 <main+0x320>)
 800132e:	6812      	ldr	r2, [r2, #0]
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f001 f8f6 	bl	8002524 <motorControl>
	motorControl_r(control_1_r, control_2_r);
 8001338:	4ba4      	ldr	r3, [pc, #656]	; (80015cc <main+0x324>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4aa4      	ldr	r2, [pc, #656]	; (80015d0 <main+0x328>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f001 f91c 	bl	8002580 <motorControl_r>
	SystemCoreClockUpdate();
 8001348:	f001 ff06 	bl	8003158 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 800134c:	4ba1      	ldr	r3, [pc, #644]	; (80015d4 <main+0x32c>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4aa1      	ldr	r2, [pc, #644]	; (80015d8 <main+0x330>)
 8001352:	fba2 2303 	umull	r2, r3, r2, r3
 8001356:	099b      	lsrs	r3, r3, #6
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fea9 	bl	80010b0 <SysTick_Config>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rx_data, 1);
 800135e:	2201      	movs	r2, #1
 8001360:	499e      	ldr	r1, [pc, #632]	; (80015dc <main+0x334>)
 8001362:	489f      	ldr	r0, [pc, #636]	; (80015e0 <main+0x338>)
 8001364:	f004 fa7f 	bl	8005866 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		motorControl(control_1, control_2);
 8001368:	4b96      	ldr	r3, [pc, #600]	; (80015c4 <main+0x31c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a96      	ldr	r2, [pc, #600]	; (80015c8 <main+0x320>)
 800136e:	6812      	ldr	r2, [r2, #0]
 8001370:	4611      	mov	r1, r2
 8001372:	4618      	mov	r0, r3
 8001374:	f001 f8d6 	bl	8002524 <motorControl>
		motorControl_r(control_1_r, control_2_r);
 8001378:	4b94      	ldr	r3, [pc, #592]	; (80015cc <main+0x324>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a94      	ldr	r2, [pc, #592]	; (80015d0 <main+0x328>)
 800137e:	6812      	ldr	r2, [r2, #0]
 8001380:	4611      	mov	r1, r2
 8001382:	4618      	mov	r0, r3
 8001384:	f001 f8fc 	bl	8002580 <motorControl_r>

		Pwm_Left(abs(speed));
 8001388:	4b96      	ldr	r3, [pc, #600]	; (80015e4 <main+0x33c>)
 800138a:	edd3 7a00 	vldr	s15, [r3]
 800138e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001392:	ee17 3a90 	vmov	r3, s15
 8001396:	2b00      	cmp	r3, #0
 8001398:	bfb8      	it	lt
 800139a:	425b      	neglt	r3, r3
 800139c:	4618      	mov	r0, r3
 800139e:	f000 ff6d 	bl	800227c <Pwm_Left>
		Pwm_Right(abs(speed_r));
 80013a2:	4b91      	ldr	r3, [pc, #580]	; (80015e8 <main+0x340>)
 80013a4:	edd3 7a00 	vldr	s15, [r3]
 80013a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ac:	ee17 3a90 	vmov	r3, s15
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	bfb8      	it	lt
 80013b4:	425b      	neglt	r3, r3
 80013b6:	4618      	mov	r0, r3
 80013b8:	f000 ff70 	bl	800229c <Pwm_Right>


		/******************** Dead Reckoning ***********************/
		if(msTicks>=39){
 80013bc:	4b8b      	ldr	r3, [pc, #556]	; (80015ec <main+0x344>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b26      	cmp	r3, #38	; 0x26
 80013c2:	d9d1      	bls.n	8001368 <main+0xc0>
			time=msTicks;
 80013c4:	4b89      	ldr	r3, [pc, #548]	; (80015ec <main+0x344>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a89      	ldr	r2, [pc, #548]	; (80015f0 <main+0x348>)
 80013ca:	6013      	str	r3, [r2, #0]
			current_angle = ((rpm_encoderCount - pr_encoderCount) * angle);
 80013cc:	4b89      	ldr	r3, [pc, #548]	; (80015f4 <main+0x34c>)
 80013ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d2:	4b89      	ldr	r3, [pc, #548]	; (80015f8 <main+0x350>)
 80013d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d8:	1a84      	subs	r4, r0, r2
 80013da:	623c      	str	r4, [r7, #32]
 80013dc:	eb61 0303 	sbc.w	r3, r1, r3
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
 80013e2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013e6:	f7ff f8f9 	bl	80005dc <__aeabi_l2d>
 80013ea:	4b84      	ldr	r3, [pc, #528]	; (80015fc <main+0x354>)
 80013ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f0:	f7ff f922 	bl	8000638 <__aeabi_dmul>
 80013f4:	4602      	mov	r2, r0
 80013f6:	460b      	mov	r3, r1
 80013f8:	4981      	ldr	r1, [pc, #516]	; (8001600 <main+0x358>)
 80013fa:	e9c1 2300 	strd	r2, r3, [r1]
			current_angle_r = ((rpm_encoderCount_r - pr_encoderCount_r) * angle);
 80013fe:	4b81      	ldr	r3, [pc, #516]	; (8001604 <main+0x35c>)
 8001400:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001404:	4b80      	ldr	r3, [pc, #512]	; (8001608 <main+0x360>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	1a84      	subs	r4, r0, r2
 800140c:	61bc      	str	r4, [r7, #24]
 800140e:	eb61 0303 	sbc.w	r3, r1, r3
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001418:	f7ff f8e0 	bl	80005dc <__aeabi_l2d>
 800141c:	4b77      	ldr	r3, [pc, #476]	; (80015fc <main+0x354>)
 800141e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001422:	f7ff f909 	bl	8000638 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4978      	ldr	r1, [pc, #480]	; (800160c <main+0x364>)
 800142c:	e9c1 2300 	strd	r2, r3, [r1]

			pr_encoderCount=rpm_encoderCount;
 8001430:	4b70      	ldr	r3, [pc, #448]	; (80015f4 <main+0x34c>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	4970      	ldr	r1, [pc, #448]	; (80015f8 <main+0x350>)
 8001438:	e9c1 2300 	strd	r2, r3, [r1]
			pr_encoderCount_r=rpm_encoderCount_r;
 800143c:	4b71      	ldr	r3, [pc, #452]	; (8001604 <main+0x35c>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	4971      	ldr	r1, [pc, #452]	; (8001608 <main+0x360>)
 8001444:	e9c1 2300 	strd	r2, r3, [r1]

			delta_s = ((current_angle_r + current_angle) * rr) / 2;
 8001448:	4b70      	ldr	r3, [pc, #448]	; (800160c <main+0x364>)
 800144a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800144e:	4b6c      	ldr	r3, [pc, #432]	; (8001600 <main+0x358>)
 8001450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001454:	f7fe ff3a 	bl	80002cc <__adddf3>
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4610      	mov	r0, r2
 800145e:	4619      	mov	r1, r3
 8001460:	4b6b      	ldr	r3, [pc, #428]	; (8001610 <main+0x368>)
 8001462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001466:	f7ff f8e7 	bl	8000638 <__aeabi_dmul>
 800146a:	4602      	mov	r2, r0
 800146c:	460b      	mov	r3, r1
 800146e:	4610      	mov	r0, r2
 8001470:	4619      	mov	r1, r3
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800147a:	f7ff fa07 	bl	800088c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4964      	ldr	r1, [pc, #400]	; (8001614 <main+0x36c>)
 8001484:	e9c1 2300 	strd	r2, r3, [r1]
			delta_o = ((current_angle_r - current_angle) * rr) / ll;
 8001488:	4b60      	ldr	r3, [pc, #384]	; (800160c <main+0x364>)
 800148a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800148e:	4b5c      	ldr	r3, [pc, #368]	; (8001600 <main+0x358>)
 8001490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001494:	f7fe ff18 	bl	80002c8 <__aeabi_dsub>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	4610      	mov	r0, r2
 800149e:	4619      	mov	r1, r3
 80014a0:	4b5b      	ldr	r3, [pc, #364]	; (8001610 <main+0x368>)
 80014a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a6:	f7ff f8c7 	bl	8000638 <__aeabi_dmul>
 80014aa:	4602      	mov	r2, r0
 80014ac:	460b      	mov	r3, r1
 80014ae:	4610      	mov	r0, r2
 80014b0:	4619      	mov	r1, r3
 80014b2:	4b59      	ldr	r3, [pc, #356]	; (8001618 <main+0x370>)
 80014b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b8:	f7ff f9e8 	bl	800088c <__aeabi_ddiv>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	4956      	ldr	r1, [pc, #344]	; (800161c <main+0x374>)
 80014c2:	e9c1 2300 	strd	r2, r3, [r1]
			input_delta_o = previous_car_angle + (delta_o / 2); //Real
 80014c6:	4b55      	ldr	r3, [pc, #340]	; (800161c <main+0x374>)
 80014c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014cc:	f04f 0200 	mov.w	r2, #0
 80014d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014d4:	f7ff f9da 	bl	800088c <__aeabi_ddiv>
 80014d8:	4602      	mov	r2, r0
 80014da:	460b      	mov	r3, r1
 80014dc:	4610      	mov	r0, r2
 80014de:	4619      	mov	r1, r3
 80014e0:	4b4f      	ldr	r3, [pc, #316]	; (8001620 <main+0x378>)
 80014e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e6:	f7fe fef1 	bl	80002cc <__adddf3>
 80014ea:	4602      	mov	r2, r0
 80014ec:	460b      	mov	r3, r1
 80014ee:	494d      	ldr	r1, [pc, #308]	; (8001624 <main+0x37c>)
 80014f0:	e9c1 2300 	strd	r2, r3, [r1]


			current_x = previous_current_x + cos((input_delta_o)) * delta_s;
 80014f4:	4b4b      	ldr	r3, [pc, #300]	; (8001624 <main+0x37c>)
 80014f6:	ed93 7b00 	vldr	d7, [r3]
 80014fa:	eeb0 0a47 	vmov.f32	s0, s14
 80014fe:	eef0 0a67 	vmov.f32	s1, s15
 8001502:	f009 fd69 	bl	800afd8 <cos>
 8001506:	ec51 0b10 	vmov	r0, r1, d0
 800150a:	4b42      	ldr	r3, [pc, #264]	; (8001614 <main+0x36c>)
 800150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001510:	f7ff f892 	bl	8000638 <__aeabi_dmul>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	4610      	mov	r0, r2
 800151a:	4619      	mov	r1, r3
 800151c:	4b42      	ldr	r3, [pc, #264]	; (8001628 <main+0x380>)
 800151e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001522:	f7fe fed3 	bl	80002cc <__adddf3>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4940      	ldr	r1, [pc, #256]	; (800162c <main+0x384>)
 800152c:	e9c1 2300 	strd	r2, r3, [r1]
			current_y = previous_current_y + sin((input_delta_o)) * delta_s;
 8001530:	4b3c      	ldr	r3, [pc, #240]	; (8001624 <main+0x37c>)
 8001532:	ed93 7b00 	vldr	d7, [r3]
 8001536:	eeb0 0a47 	vmov.f32	s0, s14
 800153a:	eef0 0a67 	vmov.f32	s1, s15
 800153e:	f009 fd9f 	bl	800b080 <sin>
 8001542:	ec51 0b10 	vmov	r0, r1, d0
 8001546:	4b33      	ldr	r3, [pc, #204]	; (8001614 <main+0x36c>)
 8001548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800154c:	f7ff f874 	bl	8000638 <__aeabi_dmul>
 8001550:	4602      	mov	r2, r0
 8001552:	460b      	mov	r3, r1
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	4b35      	ldr	r3, [pc, #212]	; (8001630 <main+0x388>)
 800155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155e:	f7fe feb5 	bl	80002cc <__adddf3>
 8001562:	4602      	mov	r2, r0
 8001564:	460b      	mov	r3, r1
 8001566:	4933      	ldr	r1, [pc, #204]	; (8001634 <main+0x38c>)
 8001568:	e9c1 2300 	strd	r2, r3, [r1]
			car_angle = previous_car_angle + delta_o;
 800156c:	4b2c      	ldr	r3, [pc, #176]	; (8001620 <main+0x378>)
 800156e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001572:	4b2a      	ldr	r3, [pc, #168]	; (800161c <main+0x374>)
 8001574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001578:	f7fe fea8 	bl	80002cc <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	492d      	ldr	r1, [pc, #180]	; (8001638 <main+0x390>)
 8001582:	e9c1 2300 	strd	r2, r3, [r1]

			pid_delta_o = delta_o;
 8001586:	4b25      	ldr	r3, [pc, #148]	; (800161c <main+0x374>)
 8001588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800158c:	492b      	ldr	r1, [pc, #172]	; (800163c <main+0x394>)
 800158e:	e9c1 2300 	strd	r2, r3, [r1]
			dt = time;
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <main+0x348>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7fe ffd4 	bl	8000544 <__aeabi_ui2d>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4927      	ldr	r1, [pc, #156]	; (8001640 <main+0x398>)
 80015a2:	e9c1 2300 	strd	r2, r3, [r1]

			topic_x = delta_s/(dt / 1000.0);
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <main+0x36c>)
 80015a8:	e04c      	b.n	8001644 <main+0x39c>
 80015aa:	bf00      	nop
 80015ac:	40020000 	.word	0x40020000
 80015b0:	2000023c 	.word	0x2000023c
 80015b4:	20000284 	.word	0x20000284
 80015b8:	200002cc 	.word	0x200002cc
 80015bc:	2000035c 	.word	0x2000035c
 80015c0:	20000314 	.word	0x20000314
 80015c4:	200004f0 	.word	0x200004f0
 80015c8:	20000030 	.word	0x20000030
 80015cc:	20000034 	.word	0x20000034
 80015d0:	200004f4 	.word	0x200004f4
 80015d4:	20000038 	.word	0x20000038
 80015d8:	10624dd3 	.word	0x10624dd3
 80015dc:	20000600 	.word	0x20000600
 80015e0:	200003a4 	.word	0x200003a4
 80015e4:	20000430 	.word	0x20000430
 80015e8:	20000434 	.word	0x20000434
 80015ec:	2000068c 	.word	0x2000068c
 80015f0:	20000688 	.word	0x20000688
 80015f4:	20000400 	.word	0x20000400
 80015f8:	20000410 	.word	0x20000410
 80015fc:	20000000 	.word	0x20000000
 8001600:	20000420 	.word	0x20000420
 8001604:	20000408 	.word	0x20000408
 8001608:	20000418 	.word	0x20000418
 800160c:	20000428 	.word	0x20000428
 8001610:	20000028 	.word	0x20000028
 8001614:	200004c0 	.word	0x200004c0
 8001618:	20000020 	.word	0x20000020
 800161c:	200004c8 	.word	0x200004c8
 8001620:	200004a8 	.word	0x200004a8
 8001624:	200004e0 	.word	0x200004e0
 8001628:	200004b0 	.word	0x200004b0
 800162c:	20000480 	.word	0x20000480
 8001630:	200004b8 	.word	0x200004b8
 8001634:	20000488 	.word	0x20000488
 8001638:	20000478 	.word	0x20000478
 800163c:	200004e8 	.word	0x200004e8
 8001640:	20000670 	.word	0x20000670
 8001644:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001648:	4bb5      	ldr	r3, [pc, #724]	; (8001920 <main+0x678>)
 800164a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800164e:	f04f 0200 	mov.w	r2, #0
 8001652:	4bb4      	ldr	r3, [pc, #720]	; (8001924 <main+0x67c>)
 8001654:	f7ff f91a 	bl	800088c <__aeabi_ddiv>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4620      	mov	r0, r4
 800165e:	4629      	mov	r1, r5
 8001660:	f7ff f914 	bl	800088c <__aeabi_ddiv>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	49af      	ldr	r1, [pc, #700]	; (8001928 <main+0x680>)
 800166a:	e9c1 2300 	strd	r2, r3, [r1]
			topic_th = car_angle;
 800166e:	4baf      	ldr	r3, [pc, #700]	; (800192c <main+0x684>)
 8001670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001674:	49ae      	ldr	r1, [pc, #696]	; (8001930 <main+0x688>)
 8001676:	e9c1 2300 	strd	r2, r3, [r1]
			topic_vth=(car_angle-previous_car_angle)*1000/dt;
 800167a:	4bac      	ldr	r3, [pc, #688]	; (800192c <main+0x684>)
 800167c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001680:	4bac      	ldr	r3, [pc, #688]	; (8001934 <main+0x68c>)
 8001682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001686:	f7fe fe1f 	bl	80002c8 <__aeabi_dsub>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	4610      	mov	r0, r2
 8001690:	4619      	mov	r1, r3
 8001692:	f04f 0200 	mov.w	r2, #0
 8001696:	4ba3      	ldr	r3, [pc, #652]	; (8001924 <main+0x67c>)
 8001698:	f7fe ffce 	bl	8000638 <__aeabi_dmul>
 800169c:	4602      	mov	r2, r0
 800169e:	460b      	mov	r3, r1
 80016a0:	4610      	mov	r0, r2
 80016a2:	4619      	mov	r1, r3
 80016a4:	4b9e      	ldr	r3, [pc, #632]	; (8001920 <main+0x678>)
 80016a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016aa:	f7ff f8ef 	bl	800088c <__aeabi_ddiv>
 80016ae:	4602      	mov	r2, r0
 80016b0:	460b      	mov	r3, r1
 80016b2:	49a1      	ldr	r1, [pc, #644]	; (8001938 <main+0x690>)
 80016b4:	e9c1 2300 	strd	r2, r3, [r1]

			printf("# %f %f %f %f %f %f | %f %f %f %f %f %f \n",current_x,current_y,topic_th,dt,topic_x,topic_vth, motor_degree[0], motor_degree[1], motor_degree[2], motor_degree[3], motor_degree[4], motor_degree[5]);
 80016b8:	4ba0      	ldr	r3, [pc, #640]	; (800193c <main+0x694>)
 80016ba:	ed93 7b00 	vldr	d7, [r3]
 80016be:	ed87 7b04 	vstr	d7, [r7, #16]
 80016c2:	4b9f      	ldr	r3, [pc, #636]	; (8001940 <main+0x698>)
 80016c4:	ed93 9b00 	vldr	d9, [r3]
 80016c8:	4b99      	ldr	r3, [pc, #612]	; (8001930 <main+0x688>)
 80016ca:	ed93 ab00 	vldr	d10, [r3]
 80016ce:	4b94      	ldr	r3, [pc, #592]	; (8001920 <main+0x678>)
 80016d0:	ed93 bb00 	vldr	d11, [r3]
 80016d4:	4b94      	ldr	r3, [pc, #592]	; (8001928 <main+0x680>)
 80016d6:	ed93 cb00 	vldr	d12, [r3]
 80016da:	4b97      	ldr	r3, [pc, #604]	; (8001938 <main+0x690>)
 80016dc:	ed93 8b00 	vldr	d8, [r3]
 80016e0:	4b98      	ldr	r3, [pc, #608]	; (8001944 <main+0x69c>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7fe ff4f 	bl	8000588 <__aeabi_f2d>
 80016ea:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016ee:	4b95      	ldr	r3, [pc, #596]	; (8001944 <main+0x69c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f7fe ff48 	bl	8000588 <__aeabi_f2d>
 80016f8:	e9c7 0100 	strd	r0, r1, [r7]
 80016fc:	4b91      	ldr	r3, [pc, #580]	; (8001944 <main+0x69c>)
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe ff41 	bl	8000588 <__aeabi_f2d>
 8001706:	4682      	mov	sl, r0
 8001708:	468b      	mov	fp, r1
 800170a:	4b8e      	ldr	r3, [pc, #568]	; (8001944 <main+0x69c>)
 800170c:	68db      	ldr	r3, [r3, #12]
 800170e:	4618      	mov	r0, r3
 8001710:	f7fe ff3a 	bl	8000588 <__aeabi_f2d>
 8001714:	4680      	mov	r8, r0
 8001716:	4689      	mov	r9, r1
 8001718:	4b8a      	ldr	r3, [pc, #552]	; (8001944 <main+0x69c>)
 800171a:	691b      	ldr	r3, [r3, #16]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe ff33 	bl	8000588 <__aeabi_f2d>
 8001722:	4604      	mov	r4, r0
 8001724:	460d      	mov	r5, r1
 8001726:	4b87      	ldr	r3, [pc, #540]	; (8001944 <main+0x69c>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff2c 	bl	8000588 <__aeabi_f2d>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001738:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800173c:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8001740:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8001744:	ed97 7b00 	vldr	d7, [r7]
 8001748:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800174c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001750:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001754:	ed8d 8b08 	vstr	d8, [sp, #32]
 8001758:	ed8d cb06 	vstr	d12, [sp, #24]
 800175c:	ed8d bb04 	vstr	d11, [sp, #16]
 8001760:	ed8d ab02 	vstr	d10, [sp, #8]
 8001764:	ed8d 9b00 	vstr	d9, [sp]
 8001768:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800176c:	4876      	ldr	r0, [pc, #472]	; (8001948 <main+0x6a0>)
 800176e:	f006 fd51 	bl	8008214 <iprintf>

			previous_car_angle = car_angle;
 8001772:	4b6e      	ldr	r3, [pc, #440]	; (800192c <main+0x684>)
 8001774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001778:	496e      	ldr	r1, [pc, #440]	; (8001934 <main+0x68c>)
 800177a:	e9c1 2300 	strd	r2, r3, [r1]
			previous_current_x = current_x;
 800177e:	4b6f      	ldr	r3, [pc, #444]	; (800193c <main+0x694>)
 8001780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001784:	4971      	ldr	r1, [pc, #452]	; (800194c <main+0x6a4>)
 8001786:	e9c1 2300 	strd	r2, r3, [r1]
			previous_current_y = current_y;
 800178a:	4b6d      	ldr	r3, [pc, #436]	; (8001940 <main+0x698>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	496f      	ldr	r1, [pc, #444]	; (8001950 <main+0x6a8>)
 8001792:	e9c1 2300 	strd	r2, r3, [r1]

			encoderCount = 0;
 8001796:	496f      	ldr	r1, [pc, #444]	; (8001954 <main+0x6ac>)
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	e9c1 2300 	strd	r2, r3, [r1]
			encoderCount_r = 0;
 80017a4:	496c      	ldr	r1, [pc, #432]	; (8001958 <main+0x6b0>)
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	f04f 0300 	mov.w	r3, #0
 80017ae:	e9c1 2300 	strd	r2, r3, [r1]

			last_delta_s = sqrt((current_x - last_x) * (current_x - last_x) + (current_y - last_y) * (current_y - last_y));
 80017b2:	4b62      	ldr	r3, [pc, #392]	; (800193c <main+0x694>)
 80017b4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b8:	4b68      	ldr	r3, [pc, #416]	; (800195c <main+0x6b4>)
 80017ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017be:	f7fe fd83 	bl	80002c8 <__aeabi_dsub>
 80017c2:	4602      	mov	r2, r0
 80017c4:	460b      	mov	r3, r1
 80017c6:	4614      	mov	r4, r2
 80017c8:	461d      	mov	r5, r3
 80017ca:	4b5c      	ldr	r3, [pc, #368]	; (800193c <main+0x694>)
 80017cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017d0:	4b62      	ldr	r3, [pc, #392]	; (800195c <main+0x6b4>)
 80017d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d6:	f7fe fd77 	bl	80002c8 <__aeabi_dsub>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4620      	mov	r0, r4
 80017e0:	4629      	mov	r1, r5
 80017e2:	f7fe ff29 	bl	8000638 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4614      	mov	r4, r2
 80017ec:	461d      	mov	r5, r3
 80017ee:	4b54      	ldr	r3, [pc, #336]	; (8001940 <main+0x698>)
 80017f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f4:	4b5a      	ldr	r3, [pc, #360]	; (8001960 <main+0x6b8>)
 80017f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017fa:	f7fe fd65 	bl	80002c8 <__aeabi_dsub>
 80017fe:	4602      	mov	r2, r0
 8001800:	460b      	mov	r3, r1
 8001802:	4690      	mov	r8, r2
 8001804:	4699      	mov	r9, r3
 8001806:	4b4e      	ldr	r3, [pc, #312]	; (8001940 <main+0x698>)
 8001808:	e9d3 0100 	ldrd	r0, r1, [r3]
 800180c:	4b54      	ldr	r3, [pc, #336]	; (8001960 <main+0x6b8>)
 800180e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001812:	f7fe fd59 	bl	80002c8 <__aeabi_dsub>
 8001816:	4602      	mov	r2, r0
 8001818:	460b      	mov	r3, r1
 800181a:	4640      	mov	r0, r8
 800181c:	4649      	mov	r1, r9
 800181e:	f7fe ff0b 	bl	8000638 <__aeabi_dmul>
 8001822:	4602      	mov	r2, r0
 8001824:	460b      	mov	r3, r1
 8001826:	4620      	mov	r0, r4
 8001828:	4629      	mov	r1, r5
 800182a:	f7fe fd4f 	bl	80002cc <__adddf3>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	ec43 2b17 	vmov	d7, r2, r3
 8001836:	eeb0 0a47 	vmov.f32	s0, s14
 800183a:	eef0 0a67 	vmov.f32	s1, s15
 800183e:	f009 fb9f 	bl	800af80 <sqrt>
 8001842:	eeb0 7a40 	vmov.f32	s14, s0
 8001846:	eef0 7a60 	vmov.f32	s15, s1
 800184a:	4b46      	ldr	r3, [pc, #280]	; (8001964 <main+0x6bc>)
 800184c:	ed83 7b00 	vstr	d7, [r3]
			last_delta_o = (car_angle - last_th);
 8001850:	4b36      	ldr	r3, [pc, #216]	; (800192c <main+0x684>)
 8001852:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001856:	4b44      	ldr	r3, [pc, #272]	; (8001968 <main+0x6c0>)
 8001858:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185c:	f7fe fd34 	bl	80002c8 <__aeabi_dsub>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4941      	ldr	r1, [pc, #260]	; (800196c <main+0x6c4>)
 8001866:	e9c1 2300 	strd	r2, r3, [r1]

			/******************** PID ***********************/
			error = (cmd_vel_s - (delta_s / 0.039));
 800186a:	4b41      	ldr	r3, [pc, #260]	; (8001970 <main+0x6c8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4618      	mov	r0, r3
 8001870:	f7fe fe8a 	bl	8000588 <__aeabi_f2d>
 8001874:	4604      	mov	r4, r0
 8001876:	460d      	mov	r5, r1
 8001878:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <main+0x6cc>)
 800187a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800187e:	a326      	add	r3, pc, #152	; (adr r3, 8001918 <main+0x670>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7ff f802 	bl	800088c <__aeabi_ddiv>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4620      	mov	r0, r4
 800188e:	4629      	mov	r1, r5
 8001890:	f7fe fd1a 	bl	80002c8 <__aeabi_dsub>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4610      	mov	r0, r2
 800189a:	4619      	mov	r1, r3
 800189c:	f7ff f9c4 	bl	8000c28 <__aeabi_d2f>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a35      	ldr	r2, [pc, #212]	; (8001978 <main+0x6d0>)
 80018a4:	6013      	str	r3, [r2, #0]
			error_a = (cmd_vel_th - (pid_delta_o / 0.039));
 80018a6:	4b35      	ldr	r3, [pc, #212]	; (800197c <main+0x6d4>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7fe fe6c 	bl	8000588 <__aeabi_f2d>
 80018b0:	4604      	mov	r4, r0
 80018b2:	460d      	mov	r5, r1
 80018b4:	4b32      	ldr	r3, [pc, #200]	; (8001980 <main+0x6d8>)
 80018b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018ba:	a317      	add	r3, pc, #92	; (adr r3, 8001918 <main+0x670>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe ffe4 	bl	800088c <__aeabi_ddiv>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4620      	mov	r0, r4
 80018ca:	4629      	mov	r1, r5
 80018cc:	f7fe fcfc 	bl	80002c8 <__aeabi_dsub>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f9a6 	bl	8000c28 <__aeabi_d2f>
 80018dc:	4603      	mov	r3, r0
 80018de:	4a29      	ldr	r2, [pc, #164]	; (8001984 <main+0x6dc>)
 80018e0:	6013      	str	r3, [r2, #0]
			P_term = (error - previous_error) * Kp;
 80018e2:	4b25      	ldr	r3, [pc, #148]	; (8001978 <main+0x6d0>)
 80018e4:	ed93 7a00 	vldr	s14, [r3]
 80018e8:	4b27      	ldr	r3, [pc, #156]	; (8001988 <main+0x6e0>)
 80018ea:	edd3 7a00 	vldr	s15, [r3]
 80018ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018f2:	4b26      	ldr	r3, [pc, #152]	; (800198c <main+0x6e4>)
 80018f4:	edd3 7a00 	vldr	s15, [r3]
 80018f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <main+0x6e8>)
 80018fe:	edc3 7a00 	vstr	s15, [r3]
			D_term = (error - 2 * previous_error + old_error) * Kd;
 8001902:	4b1d      	ldr	r3, [pc, #116]	; (8001978 <main+0x6d0>)
 8001904:	ed93 7a00 	vldr	s14, [r3]
 8001908:	4b1f      	ldr	r3, [pc, #124]	; (8001988 <main+0x6e0>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001912:	e03f      	b.n	8001994 <main+0x6ec>
 8001914:	f3af 8000 	nop.w
 8001918:	d916872b 	.word	0xd916872b
 800191c:	3fa3f7ce 	.word	0x3fa3f7ce
 8001920:	20000670 	.word	0x20000670
 8001924:	408f4000 	.word	0x408f4000
 8001928:	20000658 	.word	0x20000658
 800192c:	20000478 	.word	0x20000478
 8001930:	20000668 	.word	0x20000668
 8001934:	200004a8 	.word	0x200004a8
 8001938:	20000660 	.word	0x20000660
 800193c:	20000480 	.word	0x20000480
 8001940:	20000488 	.word	0x20000488
 8001944:	2000063c 	.word	0x2000063c
 8001948:	0800c2d4 	.word	0x0800c2d4
 800194c:	200004b0 	.word	0x200004b0
 8001950:	200004b8 	.word	0x200004b8
 8001954:	200003f0 	.word	0x200003f0
 8001958:	200003f8 	.word	0x200003f8
 800195c:	20000490 	.word	0x20000490
 8001960:	20000498 	.word	0x20000498
 8001964:	200004d0 	.word	0x200004d0
 8001968:	200004a0 	.word	0x200004a0
 800196c:	200004d8 	.word	0x200004d8
 8001970:	20000680 	.word	0x20000680
 8001974:	200004c0 	.word	0x200004c0
 8001978:	20000458 	.word	0x20000458
 800197c:	20000684 	.word	0x20000684
 8001980:	200004e8 	.word	0x200004e8
 8001984:	20000464 	.word	0x20000464
 8001988:	2000045c 	.word	0x2000045c
 800198c:	20000008 	.word	0x20000008
 8001990:	20000438 	.word	0x20000438
 8001994:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001998:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <main+0x880>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019a2:	4b62      	ldr	r3, [pc, #392]	; (8001b2c <main+0x884>)
 80019a4:	edd3 7a00 	vldr	s15, [r3]
 80019a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ac:	4b60      	ldr	r3, [pc, #384]	; (8001b30 <main+0x888>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]
			I_term = error * Ki;
 80019b2:	4b60      	ldr	r3, [pc, #384]	; (8001b34 <main+0x88c>)
 80019b4:	ed93 7a00 	vldr	s14, [r3]
 80019b8:	4b5f      	ldr	r3, [pc, #380]	; (8001b38 <main+0x890>)
 80019ba:	edd3 7a00 	vldr	s15, [r3]
 80019be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019c2:	4b5e      	ldr	r3, [pc, #376]	; (8001b3c <main+0x894>)
 80019c4:	edc3 7a00 	vstr	s15, [r3]
			pid = P_term + D_term + I_term;
 80019c8:	4b5d      	ldr	r3, [pc, #372]	; (8001b40 <main+0x898>)
 80019ca:	ed93 7a00 	vldr	s14, [r3]
 80019ce:	4b58      	ldr	r3, [pc, #352]	; (8001b30 <main+0x888>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d8:	4b58      	ldr	r3, [pc, #352]	; (8001b3c <main+0x894>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019e2:	4b58      	ldr	r3, [pc, #352]	; (8001b44 <main+0x89c>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]

			P_term_a = (error_a - previous_error_a) * Kp_a;
 80019e8:	4b57      	ldr	r3, [pc, #348]	; (8001b48 <main+0x8a0>)
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <main+0x8a4>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019f8:	4b55      	ldr	r3, [pc, #340]	; (8001b50 <main+0x8a8>)
 80019fa:	edd3 7a00 	vldr	s15, [r3]
 80019fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a02:	4b54      	ldr	r3, [pc, #336]	; (8001b54 <main+0x8ac>)
 8001a04:	edc3 7a00 	vstr	s15, [r3]
			D_term_a = (error_a - 2 * previous_error_a + old_error_a) * Kd_a;
 8001a08:	4b4f      	ldr	r3, [pc, #316]	; (8001b48 <main+0x8a0>)
 8001a0a:	ed93 7a00 	vldr	s14, [r3]
 8001a0e:	4b4f      	ldr	r3, [pc, #316]	; (8001b4c <main+0x8a4>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a1c:	4b4e      	ldr	r3, [pc, #312]	; (8001b58 <main+0x8b0>)
 8001a1e:	edd3 7a00 	vldr	s15, [r3]
 8001a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a26:	4b4d      	ldr	r3, [pc, #308]	; (8001b5c <main+0x8b4>)
 8001a28:	edd3 7a00 	vldr	s15, [r3]
 8001a2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a30:	4b4b      	ldr	r3, [pc, #300]	; (8001b60 <main+0x8b8>)
 8001a32:	edc3 7a00 	vstr	s15, [r3]
			I_term_a = error_a * Ki_a;
 8001a36:	4b44      	ldr	r3, [pc, #272]	; (8001b48 <main+0x8a0>)
 8001a38:	ed93 7a00 	vldr	s14, [r3]
 8001a3c:	4b49      	ldr	r3, [pc, #292]	; (8001b64 <main+0x8bc>)
 8001a3e:	edd3 7a00 	vldr	s15, [r3]
 8001a42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a46:	4b48      	ldr	r3, [pc, #288]	; (8001b68 <main+0x8c0>)
 8001a48:	edc3 7a00 	vstr	s15, [r3]
			pid_a = P_term_a + D_term_a + I_term_a;
 8001a4c:	4b41      	ldr	r3, [pc, #260]	; (8001b54 <main+0x8ac>)
 8001a4e:	ed93 7a00 	vldr	s14, [r3]
 8001a52:	4b43      	ldr	r3, [pc, #268]	; (8001b60 <main+0x8b8>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5c:	4b42      	ldr	r3, [pc, #264]	; (8001b68 <main+0x8c0>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a66:	4b41      	ldr	r3, [pc, #260]	; (8001b6c <main+0x8c4>)
 8001a68:	edc3 7a00 	vstr	s15, [r3]
			if (stop_flag == 0) {
 8001a6c:	4b40      	ldr	r3, [pc, #256]	; (8001b70 <main+0x8c8>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d120      	bne.n	8001ab6 <main+0x80e>
				speed = speed + pid - pid_a;
 8001a74:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <main+0x8cc>)
 8001a76:	ed93 7a00 	vldr	s14, [r3]
 8001a7a:	4b32      	ldr	r3, [pc, #200]	; (8001b44 <main+0x89c>)
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a84:	4b39      	ldr	r3, [pc, #228]	; (8001b6c <main+0x8c4>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <main+0x8cc>)
 8001a90:	edc3 7a00 	vstr	s15, [r3]
				speed_r = speed_r + pid + pid_a;
 8001a94:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <main+0x8d0>)
 8001a96:	ed93 7a00 	vldr	s14, [r3]
 8001a9a:	4b2a      	ldr	r3, [pc, #168]	; (8001b44 <main+0x89c>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aa4:	4b31      	ldr	r3, [pc, #196]	; (8001b6c <main+0x8c4>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aae:	4b32      	ldr	r3, [pc, #200]	; (8001b78 <main+0x8d0>)
 8001ab0:	edc3 7a00 	vstr	s15, [r3]
 8001ab4:	e01d      	b.n	8001af2 <main+0x84a>
			} else {
				speed = speed - (speed) / 5;
 8001ab6:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <main+0x8cc>)
 8001ab8:	ed93 7a00 	vldr	s14, [r3]
 8001abc:	4b2d      	ldr	r3, [pc, #180]	; (8001b74 <main+0x8cc>)
 8001abe:	edd3 6a00 	vldr	s13, [r3]
 8001ac2:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001ac6:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001aca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ace:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <main+0x8cc>)
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
				speed_r = speed_r - (speed_r) / 5;
 8001ad4:	4b28      	ldr	r3, [pc, #160]	; (8001b78 <main+0x8d0>)
 8001ad6:	ed93 7a00 	vldr	s14, [r3]
 8001ada:	4b27      	ldr	r3, [pc, #156]	; (8001b78 <main+0x8d0>)
 8001adc:	edd3 6a00 	vldr	s13, [r3]
 8001ae0:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001ae4:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ae8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aec:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <main+0x8d0>)
 8001aee:	edc3 7a00 	vstr	s15, [r3]
			}

			old_error = previous_error;
 8001af2:	4b22      	ldr	r3, [pc, #136]	; (8001b7c <main+0x8d4>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a0c      	ldr	r2, [pc, #48]	; (8001b28 <main+0x880>)
 8001af8:	6013      	str	r3, [r2, #0]
			old_error_a = previous_error_a;
 8001afa:	4b14      	ldr	r3, [pc, #80]	; (8001b4c <main+0x8a4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a16      	ldr	r2, [pc, #88]	; (8001b58 <main+0x8b0>)
 8001b00:	6013      	str	r3, [r2, #0]
			previous_error = error;
 8001b02:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <main+0x88c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <main+0x8d4>)
 8001b08:	6013      	str	r3, [r2, #0]
			previous_error_a = error_a;
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <main+0x8a0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4a0f      	ldr	r2, [pc, #60]	; (8001b4c <main+0x8a4>)
 8001b10:	6013      	str	r3, [r2, #0]

			check_pwm();
 8001b12:	f000 fd61 	bl	80025d8 <check_pwm>
			check_pwm_r();
 8001b16:	f000 fd8d 	bl	8002634 <check_pwm_r>

			check_move_state();
 8001b1a:	f000 fdb9 	bl	8002690 <check_move_state>
			check_move_state_r();
 8001b1e:	f000 fde1 	bl	80026e4 <check_move_state_r>

			cmd_vel_calculate();
 8001b22:	f000 fe09 	bl	8002738 <cmd_vel_calculate>
		motorControl(control_1, control_2);
 8001b26:	e41f      	b.n	8001368 <main+0xc0>
 8001b28:	20000460 	.word	0x20000460
 8001b2c:	2000000c 	.word	0x2000000c
 8001b30:	2000043c 	.word	0x2000043c
 8001b34:	20000458 	.word	0x20000458
 8001b38:	20000010 	.word	0x20000010
 8001b3c:	20000440 	.word	0x20000440
 8001b40:	20000438 	.word	0x20000438
 8001b44:	20000444 	.word	0x20000444
 8001b48:	20000464 	.word	0x20000464
 8001b4c:	20000468 	.word	0x20000468
 8001b50:	20000014 	.word	0x20000014
 8001b54:	20000448 	.word	0x20000448
 8001b58:	2000046c 	.word	0x2000046c
 8001b5c:	20000018 	.word	0x20000018
 8001b60:	2000044c 	.word	0x2000044c
 8001b64:	2000001c 	.word	0x2000001c
 8001b68:	20000450 	.word	0x20000450
 8001b6c:	20000454 	.word	0x20000454
 8001b70:	20000470 	.word	0x20000470
 8001b74:	20000430 	.word	0x20000430
 8001b78:	20000434 	.word	0x20000434
 8001b7c:	2000045c 	.word	0x2000045c

08001b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b094      	sub	sp, #80	; 0x50
 8001b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b86:	f107 031c 	add.w	r3, r7, #28
 8001b8a:	2234      	movs	r2, #52	; 0x34
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f006 fbb5 	bl	80082fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b94:	f107 0308 	add.w	r3, r7, #8
 8001b98:	2200      	movs	r2, #0
 8001b9a:	601a      	str	r2, [r3, #0]
 8001b9c:	605a      	str	r2, [r3, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
 8001ba0:	60da      	str	r2, [r3, #12]
 8001ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	607b      	str	r3, [r7, #4]
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <SystemClock_Config+0xd4>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	4a29      	ldr	r2, [pc, #164]	; (8001c54 <SystemClock_Config+0xd4>)
 8001bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <SystemClock_Config+0xd4>)
 8001bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bbc:	607b      	str	r3, [r7, #4]
 8001bbe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	603b      	str	r3, [r7, #0]
 8001bc4:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <SystemClock_Config+0xd8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bcc:	4a22      	ldr	r2, [pc, #136]	; (8001c58 <SystemClock_Config+0xd8>)
 8001bce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	4b20      	ldr	r3, [pc, #128]	; (8001c58 <SystemClock_Config+0xd8>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bdc:	603b      	str	r3, [r7, #0]
 8001bde:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001be0:	2302      	movs	r3, #2
 8001be2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be4:	2301      	movs	r3, #1
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001be8:	2310      	movs	r3, #16
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bec:	2302      	movs	r3, #2
 8001bee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001bf4:	2310      	movs	r3, #16
 8001bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001bf8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001bfc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001bfe:	2304      	movs	r3, #4
 8001c00:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c02:	2302      	movs	r3, #2
 8001c04:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c06:	2302      	movs	r3, #2
 8001c08:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0a:	f107 031c 	add.w	r3, r7, #28
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fa8a 	bl	8004128 <HAL_RCC_OscConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c1a:	f000 ff27 	bl	8002a6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1e:	230f      	movs	r3, #15
 8001c20:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c22:	2302      	movs	r3, #2
 8001c24:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c30:	2300      	movs	r3, #0
 8001c32:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c34:	f107 0308 	add.w	r3, r7, #8
 8001c38:	2102      	movs	r1, #2
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f001 ff2a 	bl	8003a94 <HAL_RCC_ClockConfig>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c46:	f000 ff11 	bl	8002a6c <Error_Handler>
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	3750      	adds	r7, #80	; 0x50
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40023800 	.word	0x40023800
 8001c58:	40007000 	.word	0x40007000

08001c5c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b08e      	sub	sp, #56	; 0x38
 8001c60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c70:	f107 0320 	add.w	r3, r7, #32
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	601a      	str	r2, [r3, #0]
 8001c80:	605a      	str	r2, [r3, #4]
 8001c82:	609a      	str	r2, [r3, #8]
 8001c84:	60da      	str	r2, [r3, #12]
 8001c86:	611a      	str	r2, [r3, #16]
 8001c88:	615a      	str	r2, [r3, #20]
 8001c8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c8c:	4b32      	ldr	r3, [pc, #200]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001c8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001c94:	4b30      	ldr	r3, [pc, #192]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001c96:	2253      	movs	r2, #83	; 0x53
 8001c98:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	4b2f      	ldr	r3, [pc, #188]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001ca0:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001ca2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ca6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cb4:	4828      	ldr	r0, [pc, #160]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001cb6:	f002 fcd5 	bl	8004664 <HAL_TIM_Base_Init>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001cc0:	f000 fed4 	bl	8002a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4821      	ldr	r0, [pc, #132]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001cd2:	f003 f851 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cdc:	f000 fec6 	bl	8002a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001ce0:	481d      	ldr	r0, [pc, #116]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001ce2:	f002 fd7f 	bl	80047e4 <HAL_TIM_PWM_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001cec:	f000 febe 	bl	8002a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf8:	f107 0320 	add.w	r3, r7, #32
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4816      	ldr	r0, [pc, #88]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001d00:	f003 fc46 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d0a:	f000 feaf 	bl	8002a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0e:	2360      	movs	r3, #96	; 0x60
 8001d10:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	2204      	movs	r2, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	480c      	ldr	r0, [pc, #48]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001d26:	f002 ff65 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d30:	f000 fe9c 	bl	8002a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2208      	movs	r2, #8
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4807      	ldr	r0, [pc, #28]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001d3c:	f002 ff5a 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001d46:	f000 fe91 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d4a:	4803      	ldr	r0, [pc, #12]	; (8001d58 <MX_TIM2_Init+0xfc>)
 8001d4c:	f000 ff64 	bl	8002c18 <HAL_TIM_MspPostInit>

}
 8001d50:	bf00      	nop
 8001d52:	3738      	adds	r7, #56	; 0x38
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}
 8001d58:	2000023c 	.word	0x2000023c

08001d5c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b08e      	sub	sp, #56	; 0x38
 8001d60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d66:	2200      	movs	r2, #0
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	605a      	str	r2, [r3, #4]
 8001d6c:	609a      	str	r2, [r3, #8]
 8001d6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d70:	f107 0320 	add.w	r3, r7, #32
 8001d74:	2200      	movs	r2, #0
 8001d76:	601a      	str	r2, [r3, #0]
 8001d78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]
 8001d80:	605a      	str	r2, [r3, #4]
 8001d82:	609a      	str	r2, [r3, #8]
 8001d84:	60da      	str	r2, [r3, #12]
 8001d86:	611a      	str	r2, [r3, #16]
 8001d88:	615a      	str	r2, [r3, #20]
 8001d8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d8c:	4b32      	ldr	r3, [pc, #200]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001d8e:	4a33      	ldr	r2, [pc, #204]	; (8001e5c <MX_TIM3_Init+0x100>)
 8001d90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001d92:	4b31      	ldr	r3, [pc, #196]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001d94:	2253      	movs	r2, #83	; 0x53
 8001d96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b2f      	ldr	r3, [pc, #188]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001d9e:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001da0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001da4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da6:	4b2c      	ldr	r3, [pc, #176]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dac:	4b2a      	ldr	r3, [pc, #168]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001db2:	4829      	ldr	r0, [pc, #164]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001db4:	f002 fc56 	bl	8004664 <HAL_TIM_Base_Init>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dbe:	f000 fe55 	bl	8002a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4822      	ldr	r0, [pc, #136]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001dd0:	f002 ffd2 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001dda:	f000 fe47 	bl	8002a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dde:	481e      	ldr	r0, [pc, #120]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001de0:	f002 fd00 	bl	80047e4 <HAL_TIM_PWM_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001dea:	f000 fe3f 	bl	8002a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df6:	f107 0320 	add.w	r3, r7, #32
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4816      	ldr	r0, [pc, #88]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001dfe:	f003 fbc7 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e08:	f000 fe30 	bl	8002a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e0c:	2360      	movs	r3, #96	; 0x60
 8001e0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e18:	2300      	movs	r3, #0
 8001e1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1c:	1d3b      	adds	r3, r7, #4
 8001e1e:	2200      	movs	r2, #0
 8001e20:	4619      	mov	r1, r3
 8001e22:	480d      	ldr	r0, [pc, #52]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001e24:	f002 fee6 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e2e:	f000 fe1d 	bl	8002a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2204      	movs	r2, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4807      	ldr	r0, [pc, #28]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001e3a:	f002 fedb 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e44:	f000 fe12 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <MX_TIM3_Init+0xfc>)
 8001e4a:	f000 fee5 	bl	8002c18 <HAL_TIM_MspPostInit>

}
 8001e4e:	bf00      	nop
 8001e50:	3738      	adds	r7, #56	; 0x38
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000284 	.word	0x20000284
 8001e5c:	40000400 	.word	0x40000400

08001e60 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b08e      	sub	sp, #56	; 0x38
 8001e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	605a      	str	r2, [r3, #4]
 8001e70:	609a      	str	r2, [r3, #8]
 8001e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e74:	f107 0320 	add.w	r3, r7, #32
 8001e78:	2200      	movs	r2, #0
 8001e7a:	601a      	str	r2, [r3, #0]
 8001e7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e7e:	1d3b      	adds	r3, r7, #4
 8001e80:	2200      	movs	r2, #0
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	605a      	str	r2, [r3, #4]
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	60da      	str	r2, [r3, #12]
 8001e8a:	611a      	str	r2, [r3, #16]
 8001e8c:	615a      	str	r2, [r3, #20]
 8001e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e90:	4b2c      	ldr	r3, [pc, #176]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001e92:	4a2d      	ldr	r2, [pc, #180]	; (8001f48 <MX_TIM4_Init+0xe8>)
 8001e94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001e96:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001e98:	2253      	movs	r2, #83	; 0x53
 8001e9a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b29      	ldr	r3, [pc, #164]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001ea2:	4b28      	ldr	r3, [pc, #160]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001ea4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ea8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eb0:	4b24      	ldr	r3, [pc, #144]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001eb6:	4823      	ldr	r0, [pc, #140]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001eb8:	f002 fbd4 	bl	8004664 <HAL_TIM_Base_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ec2:	f000 fdd3 	bl	8002a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001eca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	481c      	ldr	r0, [pc, #112]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001ed4:	f002 ff50 	bl	8004d78 <HAL_TIM_ConfigClockSource>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ede:	f000 fdc5 	bl	8002a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ee2:	4818      	ldr	r0, [pc, #96]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001ee4:	f002 fc7e 	bl	80047e4 <HAL_TIM_PWM_Init>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d001      	beq.n	8001ef2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001eee:	f000 fdbd 	bl	8002a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001efa:	f107 0320 	add.w	r3, r7, #32
 8001efe:	4619      	mov	r1, r3
 8001f00:	4810      	ldr	r0, [pc, #64]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001f02:	f003 fb45 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f0c:	f000 fdae 	bl	8002a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f10:	2360      	movs	r3, #96	; 0x60
 8001f12:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f20:	1d3b      	adds	r3, r7, #4
 8001f22:	2200      	movs	r2, #0
 8001f24:	4619      	mov	r1, r3
 8001f26:	4807      	ldr	r0, [pc, #28]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001f28:	f002 fe64 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f32:	f000 fd9b 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f36:	4803      	ldr	r0, [pc, #12]	; (8001f44 <MX_TIM4_Init+0xe4>)
 8001f38:	f000 fe6e 	bl	8002c18 <HAL_TIM_MspPostInit>

}
 8001f3c:	bf00      	nop
 8001f3e:	3738      	adds	r7, #56	; 0x38
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	200002cc 	.word	0x200002cc
 8001f48:	40000800 	.word	0x40000800

08001f4c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f52:	f107 0320 	add.w	r3, r7, #32
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f5c:	1d3b      	adds	r3, r7, #4
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
 8001f62:	605a      	str	r2, [r3, #4]
 8001f64:	609a      	str	r2, [r3, #8]
 8001f66:	60da      	str	r2, [r3, #12]
 8001f68:	611a      	str	r2, [r3, #16]
 8001f6a:	615a      	str	r2, [r3, #20]
 8001f6c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f6e:	4b27      	ldr	r3, [pc, #156]	; (800200c <MX_TIM5_Init+0xc0>)
 8001f70:	4a27      	ldr	r2, [pc, #156]	; (8002010 <MX_TIM5_Init+0xc4>)
 8001f72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 8001f74:	4b25      	ldr	r3, [pc, #148]	; (800200c <MX_TIM5_Init+0xc0>)
 8001f76:	2229      	movs	r2, #41	; 0x29
 8001f78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7a:	4b24      	ldr	r3, [pc, #144]	; (800200c <MX_TIM5_Init+0xc0>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8001f80:	4b22      	ldr	r3, [pc, #136]	; (800200c <MX_TIM5_Init+0xc0>)
 8001f82:	22ff      	movs	r2, #255	; 0xff
 8001f84:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f86:	4b21      	ldr	r3, [pc, #132]	; (800200c <MX_TIM5_Init+0xc0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f8c:	4b1f      	ldr	r3, [pc, #124]	; (800200c <MX_TIM5_Init+0xc0>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001f92:	481e      	ldr	r0, [pc, #120]	; (800200c <MX_TIM5_Init+0xc0>)
 8001f94:	f002 fc26 	bl	80047e4 <HAL_TIM_PWM_Init>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001f9e:	f000 fd65 	bl	8002a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001faa:	f107 0320 	add.w	r3, r7, #32
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4816      	ldr	r0, [pc, #88]	; (800200c <MX_TIM5_Init+0xc0>)
 8001fb2:	f003 faed 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001fbc:	f000 fd56 	bl	8002a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fc0:	2360      	movs	r3, #96	; 0x60
 8001fc2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fd0:	1d3b      	adds	r3, r7, #4
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	480d      	ldr	r0, [pc, #52]	; (800200c <MX_TIM5_Init+0xc0>)
 8001fd8:	f002 fe0c 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d001      	beq.n	8001fe6 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001fe2:	f000 fd43 	bl	8002a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fe6:	1d3b      	adds	r3, r7, #4
 8001fe8:	2204      	movs	r2, #4
 8001fea:	4619      	mov	r1, r3
 8001fec:	4807      	ldr	r0, [pc, #28]	; (800200c <MX_TIM5_Init+0xc0>)
 8001fee:	f002 fe01 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d001      	beq.n	8001ffc <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001ff8:	f000 fd38 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001ffc:	4803      	ldr	r0, [pc, #12]	; (800200c <MX_TIM5_Init+0xc0>)
 8001ffe:	f000 fe0b 	bl	8002c18 <HAL_TIM_MspPostInit>

}
 8002002:	bf00      	nop
 8002004:	3728      	adds	r7, #40	; 0x28
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20000314 	.word	0x20000314
 8002010:	40000c00 	.word	0x40000c00

08002014 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b088      	sub	sp, #32
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800201a:	1d3b      	adds	r3, r7, #4
 800201c:	2200      	movs	r2, #0
 800201e:	601a      	str	r2, [r3, #0]
 8002020:	605a      	str	r2, [r3, #4]
 8002022:	609a      	str	r2, [r3, #8]
 8002024:	60da      	str	r2, [r3, #12]
 8002026:	611a      	str	r2, [r3, #16]
 8002028:	615a      	str	r2, [r3, #20]
 800202a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800202c:	4b1e      	ldr	r3, [pc, #120]	; (80020a8 <MX_TIM14_Init+0x94>)
 800202e:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <MX_TIM14_Init+0x98>)
 8002030:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 8002032:	4b1d      	ldr	r3, [pc, #116]	; (80020a8 <MX_TIM14_Init+0x94>)
 8002034:	2253      	movs	r2, #83	; 0x53
 8002036:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <MX_TIM14_Init+0x94>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 800203e:	4b1a      	ldr	r3, [pc, #104]	; (80020a8 <MX_TIM14_Init+0x94>)
 8002040:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002044:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002046:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <MX_TIM14_Init+0x94>)
 8002048:	2200      	movs	r2, #0
 800204a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800204c:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <MX_TIM14_Init+0x94>)
 800204e:	2200      	movs	r2, #0
 8002050:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8002052:	4815      	ldr	r0, [pc, #84]	; (80020a8 <MX_TIM14_Init+0x94>)
 8002054:	f002 fb06 	bl	8004664 <HAL_TIM_Base_Init>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800205e:	f000 fd05 	bl	8002a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8002062:	4811      	ldr	r0, [pc, #68]	; (80020a8 <MX_TIM14_Init+0x94>)
 8002064:	f002 fbbe 	bl	80047e4 <HAL_TIM_PWM_Init>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800206e:	f000 fcfd 	bl	8002a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002072:	2360      	movs	r3, #96	; 0x60
 8002074:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800207a:	2300      	movs	r3, #0
 800207c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002082:	1d3b      	adds	r3, r7, #4
 8002084:	2200      	movs	r2, #0
 8002086:	4619      	mov	r1, r3
 8002088:	4807      	ldr	r0, [pc, #28]	; (80020a8 <MX_TIM14_Init+0x94>)
 800208a:	f002 fdb3 	bl	8004bf4 <HAL_TIM_PWM_ConfigChannel>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	d001      	beq.n	8002098 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8002094:	f000 fcea 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8002098:	4803      	ldr	r0, [pc, #12]	; (80020a8 <MX_TIM14_Init+0x94>)
 800209a:	f000 fdbd 	bl	8002c18 <HAL_TIM_MspPostInit>

}
 800209e:	bf00      	nop
 80020a0:	3720      	adds	r7, #32
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000035c 	.word	0x2000035c
 80020ac:	40002000 	.word	0x40002000

080020b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <MX_USART2_UART_Init+0x4c>)
 80020b6:	4a12      	ldr	r2, [pc, #72]	; (8002100 <MX_USART2_UART_Init+0x50>)
 80020b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <MX_USART2_UART_Init+0x4c>)
 80020bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020c2:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <MX_USART2_UART_Init+0x4c>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <MX_USART2_UART_Init+0x4c>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <MX_USART2_UART_Init+0x4c>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020d4:	4b09      	ldr	r3, [pc, #36]	; (80020fc <MX_USART2_UART_Init+0x4c>)
 80020d6:	220c      	movs	r2, #12
 80020d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <MX_USART2_UART_Init+0x4c>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <MX_USART2_UART_Init+0x4c>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020e6:	4805      	ldr	r0, [pc, #20]	; (80020fc <MX_USART2_UART_Init+0x4c>)
 80020e8:	f003 fae2 	bl	80056b0 <HAL_UART_Init>
 80020ec:	4603      	mov	r3, r0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80020f2:	f000 fcbb 	bl	8002a6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200003a4 	.word	0x200003a4
 8002100:	40004400 	.word	0x40004400

08002104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
 8002112:	605a      	str	r2, [r3, #4]
 8002114:	609a      	str	r2, [r3, #8]
 8002116:	60da      	str	r2, [r3, #12]
 8002118:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
 800211e:	4b53      	ldr	r3, [pc, #332]	; (800226c <MX_GPIO_Init+0x168>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002122:	4a52      	ldr	r2, [pc, #328]	; (800226c <MX_GPIO_Init+0x168>)
 8002124:	f043 0304 	orr.w	r3, r3, #4
 8002128:	6313      	str	r3, [r2, #48]	; 0x30
 800212a:	4b50      	ldr	r3, [pc, #320]	; (800226c <MX_GPIO_Init+0x168>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	4b4c      	ldr	r3, [pc, #304]	; (800226c <MX_GPIO_Init+0x168>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a4b      	ldr	r2, [pc, #300]	; (800226c <MX_GPIO_Init+0x168>)
 8002140:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b49      	ldr	r3, [pc, #292]	; (800226c <MX_GPIO_Init+0x168>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800214e:	60fb      	str	r3, [r7, #12]
 8002150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b45      	ldr	r3, [pc, #276]	; (800226c <MX_GPIO_Init+0x168>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a44      	ldr	r2, [pc, #272]	; (800226c <MX_GPIO_Init+0x168>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b42      	ldr	r3, [pc, #264]	; (800226c <MX_GPIO_Init+0x168>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	607b      	str	r3, [r7, #4]
 8002172:	4b3e      	ldr	r3, [pc, #248]	; (800226c <MX_GPIO_Init+0x168>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a3d      	ldr	r2, [pc, #244]	; (800226c <MX_GPIO_Init+0x168>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b3b      	ldr	r3, [pc, #236]	; (800226c <MX_GPIO_Init+0x168>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	607b      	str	r3, [r7, #4]
 8002188:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|shield_power_Pin, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	2160      	movs	r1, #96	; 0x60
 800218e:	4838      	ldr	r0, [pc, #224]	; (8002270 <MX_GPIO_Init+0x16c>)
 8002190:	f001 fc4e 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Left_IN2_Pin|Right_IN1_Pin|Right_IN2_Pin, GPIO_PIN_RESET);
 8002194:	2200      	movs	r2, #0
 8002196:	2170      	movs	r1, #112	; 0x70
 8002198:	4836      	ldr	r0, [pc, #216]	; (8002274 <MX_GPIO_Init+0x170>)
 800219a:	f001 fc49 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Left_IN1_GPIO_Port, Left_IN1_Pin, GPIO_PIN_RESET);
 800219e:	2200      	movs	r2, #0
 80021a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80021a4:	4834      	ldr	r0, [pc, #208]	; (8002278 <MX_GPIO_Init+0x174>)
 80021a6:	f001 fc43 	bl	8003a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80021ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021b0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80021b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021ba:	f107 0314 	add.w	r3, r7, #20
 80021be:	4619      	mov	r1, r3
 80021c0:	482c      	ldr	r0, [pc, #176]	; (8002274 <MX_GPIO_Init+0x170>)
 80021c2:	f001 fa89 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin shield_power_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|shield_power_Pin;
 80021c6:	2360      	movs	r3, #96	; 0x60
 80021c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021ca:	2301      	movs	r3, #1
 80021cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4824      	ldr	r0, [pc, #144]	; (8002270 <MX_GPIO_Init+0x16c>)
 80021de:	f001 fa7b 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IN2_Pin Right_IN1_Pin Right_IN2_Pin */
  GPIO_InitStruct.Pin = Left_IN2_Pin|Right_IN1_Pin|Right_IN2_Pin;
 80021e2:	2370      	movs	r3, #112	; 0x70
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	481e      	ldr	r0, [pc, #120]	; (8002274 <MX_GPIO_Init+0x170>)
 80021fa:	f001 fa6d 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_IN1_Pin */
  GPIO_InitStruct.Pin = Left_IN1_Pin;
 80021fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002202:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002204:	2301      	movs	r3, #1
 8002206:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Left_IN1_GPIO_Port, &GPIO_InitStruct);
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	4619      	mov	r1, r3
 8002216:	4818      	ldr	r0, [pc, #96]	; (8002278 <MX_GPIO_Init+0x174>)
 8002218:	f001 fa5e 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_pulse_B_Pin Left_pulse_A_Pin */
  GPIO_InitStruct.Pin = Left_pulse_B_Pin|Left_pulse_A_Pin;
 800221c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002220:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002222:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4811      	ldr	r0, [pc, #68]	; (8002278 <MX_GPIO_Init+0x174>)
 8002234:	f001 fa50 	bl	80036d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_pulse_B_Pin Right_pulse_A_Pin */
  GPIO_InitStruct.Pin = Right_pulse_B_Pin|Right_pulse_A_Pin;
 8002238:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800223e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	4808      	ldr	r0, [pc, #32]	; (8002270 <MX_GPIO_Init+0x16c>)
 8002250:	f001 fa42 	bl	80036d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8002254:	2201      	movs	r2, #1
 8002256:	2100      	movs	r1, #0
 8002258:	2028      	movs	r0, #40	; 0x28
 800225a:	f001 f974 	bl	8003546 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800225e:	2028      	movs	r0, #40	; 0x28
 8002260:	f001 f98d 	bl	800357e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002264:	bf00      	nop
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40023800 	.word	0x40023800
 8002270:	40020000 	.word	0x40020000
 8002274:	40020800 	.word	0x40020800
 8002278:	40020400 	.word	0x40020400

0800227c <Pwm_Left>:

/* USER CODE BEGIN 4 */
void Pwm_Left(int pwm_input) {
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
	htim5.Instance->CCR1 = pwm_input;
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <Pwm_Left+0x1c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr
 8002298:	20000314 	.word	0x20000314

0800229c <Pwm_Right>:

void Pwm_Right(int pwm_input) {
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
	htim5.Instance->CCR2 = pwm_input;
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <Pwm_Right+0x1c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	639a      	str	r2, [r3, #56]	; 0x38
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	20000314 	.word	0x20000314

080022bc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80022bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022c0:	b09d      	sub	sp, #116	; 0x74
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	4603      	mov	r3, r0
 80022c6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	/* Prevent unused argument(s) compilation warning */

	if (GPIO_Pin == Left_pulse_A_Pin) {
 80022ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80022ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d2:	d13d      	bne.n	8002350 <HAL_GPIO_EXTI_Callback+0x94>
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 80022d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80022d8:	488c      	ldr	r0, [pc, #560]	; (800250c <HAL_GPIO_EXTI_Callback+0x250>)
 80022da:	f001 fb91 	bl	8003a00 <HAL_GPIO_ReadPin>
 80022de:	4603      	mov	r3, r0
 80022e0:	461e      	mov	r6, r3
				== HAL_GPIO_ReadPin(GPIOB, Left_pulse_B_Pin)) {
 80022e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022e6:	4889      	ldr	r0, [pc, #548]	; (800250c <HAL_GPIO_EXTI_Callback+0x250>)
 80022e8:	f001 fb8a 	bl	8003a00 <HAL_GPIO_ReadPin>
 80022ec:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 80022ee:	429e      	cmp	r6, r3
 80022f0:	d117      	bne.n	8002322 <HAL_GPIO_EXTI_Callback+0x66>
			encoderCount--;
 80022f2:	4b87      	ldr	r3, [pc, #540]	; (8002510 <HAL_GPIO_EXTI_Callback+0x254>)
 80022f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022f8:	f112 38ff 	adds.w	r8, r2, #4294967295
 80022fc:	f143 39ff 	adc.w	r9, r3, #4294967295
 8002300:	4b83      	ldr	r3, [pc, #524]	; (8002510 <HAL_GPIO_EXTI_Callback+0x254>)
 8002302:	e9c3 8900 	strd	r8, r9, [r3]
			rpm_encoderCount--;
 8002306:	4b83      	ldr	r3, [pc, #524]	; (8002514 <HAL_GPIO_EXTI_Callback+0x258>)
 8002308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800230c:	1e51      	subs	r1, r2, #1
 800230e:	6639      	str	r1, [r7, #96]	; 0x60
 8002310:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002314:	667b      	str	r3, [r7, #100]	; 0x64
 8002316:	4b7f      	ldr	r3, [pc, #508]	; (8002514 <HAL_GPIO_EXTI_Callback+0x258>)
 8002318:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800231c:	e9c3 1200 	strd	r1, r2, [r3]
 8002320:	e05c      	b.n	80023dc <HAL_GPIO_EXTI_Callback+0x120>

		} else {
			encoderCount++;
 8002322:	4b7b      	ldr	r3, [pc, #492]	; (8002510 <HAL_GPIO_EXTI_Callback+0x254>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	1c54      	adds	r4, r2, #1
 800232a:	f143 0500 	adc.w	r5, r3, #0
 800232e:	4b78      	ldr	r3, [pc, #480]	; (8002510 <HAL_GPIO_EXTI_Callback+0x254>)
 8002330:	e9c3 4500 	strd	r4, r5, [r3]
			rpm_encoderCount++;
 8002334:	4b77      	ldr	r3, [pc, #476]	; (8002514 <HAL_GPIO_EXTI_Callback+0x258>)
 8002336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800233a:	1c51      	adds	r1, r2, #1
 800233c:	65b9      	str	r1, [r7, #88]	; 0x58
 800233e:	f143 0300 	adc.w	r3, r3, #0
 8002342:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002344:	4b73      	ldr	r3, [pc, #460]	; (8002514 <HAL_GPIO_EXTI_Callback+0x258>)
 8002346:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800234a:	e9c3 1200 	strd	r1, r2, [r3]
 800234e:	e045      	b.n	80023dc <HAL_GPIO_EXTI_Callback+0x120>
		}
	} else if (GPIO_Pin == Left_pulse_B_Pin) {
 8002350:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002354:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002358:	d140      	bne.n	80023dc <HAL_GPIO_EXTI_Callback+0x120>
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 800235a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800235e:	486b      	ldr	r0, [pc, #428]	; (800250c <HAL_GPIO_EXTI_Callback+0x250>)
 8002360:	f001 fb4e 	bl	8003a00 <HAL_GPIO_ReadPin>
 8002364:	4603      	mov	r3, r0
 8002366:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOB, Left_pulse_B_Pin)) {
 8002368:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800236c:	4867      	ldr	r0, [pc, #412]	; (800250c <HAL_GPIO_EXTI_Callback+0x250>)
 800236e:	f001 fb47 	bl	8003a00 <HAL_GPIO_ReadPin>
 8002372:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 8002374:	429c      	cmp	r4, r3
 8002376:	d11a      	bne.n	80023ae <HAL_GPIO_EXTI_Callback+0xf2>
			encoderCount++;
 8002378:	4b65      	ldr	r3, [pc, #404]	; (8002510 <HAL_GPIO_EXTI_Callback+0x254>)
 800237a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800237e:	1c51      	adds	r1, r2, #1
 8002380:	6539      	str	r1, [r7, #80]	; 0x50
 8002382:	f143 0300 	adc.w	r3, r3, #0
 8002386:	657b      	str	r3, [r7, #84]	; 0x54
 8002388:	4b61      	ldr	r3, [pc, #388]	; (8002510 <HAL_GPIO_EXTI_Callback+0x254>)
 800238a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800238e:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount++;
 8002392:	4b60      	ldr	r3, [pc, #384]	; (8002514 <HAL_GPIO_EXTI_Callback+0x258>)
 8002394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002398:	1c51      	adds	r1, r2, #1
 800239a:	64b9      	str	r1, [r7, #72]	; 0x48
 800239c:	f143 0300 	adc.w	r3, r3, #0
 80023a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023a2:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_GPIO_EXTI_Callback+0x258>)
 80023a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80023a8:	e9c3 1200 	strd	r1, r2, [r3]
 80023ac:	e016      	b.n	80023dc <HAL_GPIO_EXTI_Callback+0x120>
		} else {
			encoderCount--;
 80023ae:	4b58      	ldr	r3, [pc, #352]	; (8002510 <HAL_GPIO_EXTI_Callback+0x254>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f112 3aff 	adds.w	sl, r2, #4294967295
 80023b8:	f143 3bff 	adc.w	fp, r3, #4294967295
 80023bc:	4b54      	ldr	r3, [pc, #336]	; (8002510 <HAL_GPIO_EXTI_Callback+0x254>)
 80023be:	e9c3 ab00 	strd	sl, fp, [r3]
			rpm_encoderCount--;
 80023c2:	4b54      	ldr	r3, [pc, #336]	; (8002514 <HAL_GPIO_EXTI_Callback+0x258>)
 80023c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023c8:	1e51      	subs	r1, r2, #1
 80023ca:	6439      	str	r1, [r7, #64]	; 0x40
 80023cc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80023d0:	647b      	str	r3, [r7, #68]	; 0x44
 80023d2:	4b50      	ldr	r3, [pc, #320]	; (8002514 <HAL_GPIO_EXTI_Callback+0x258>)
 80023d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80023d8:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
	if (GPIO_Pin == Right_pulse_A_Pin) {
 80023dc:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80023e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023e4:	d144      	bne.n	8002470 <HAL_GPIO_EXTI_Callback+0x1b4>
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 80023e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80023ea:	484b      	ldr	r0, [pc, #300]	; (8002518 <HAL_GPIO_EXTI_Callback+0x25c>)
 80023ec:	f001 fb08 	bl	8003a00 <HAL_GPIO_ReadPin>
 80023f0:	4603      	mov	r3, r0
 80023f2:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, Right_pulse_B_Pin)) {
 80023f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023f8:	4847      	ldr	r0, [pc, #284]	; (8002518 <HAL_GPIO_EXTI_Callback+0x25c>)
 80023fa:	f001 fb01 	bl	8003a00 <HAL_GPIO_ReadPin>
 80023fe:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 8002400:	429c      	cmp	r4, r3
 8002402:	d11a      	bne.n	800243a <HAL_GPIO_EXTI_Callback+0x17e>
			encoderCount_r++;
 8002404:	4b45      	ldr	r3, [pc, #276]	; (800251c <HAL_GPIO_EXTI_Callback+0x260>)
 8002406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800240a:	1c51      	adds	r1, r2, #1
 800240c:	63b9      	str	r1, [r7, #56]	; 0x38
 800240e:	f143 0300 	adc.w	r3, r3, #0
 8002412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_GPIO_EXTI_Callback+0x260>)
 8002416:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800241a:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r++;
 800241e:	4b40      	ldr	r3, [pc, #256]	; (8002520 <HAL_GPIO_EXTI_Callback+0x264>)
 8002420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002424:	1c51      	adds	r1, r2, #1
 8002426:	6339      	str	r1, [r7, #48]	; 0x30
 8002428:	f143 0300 	adc.w	r3, r3, #0
 800242c:	637b      	str	r3, [r7, #52]	; 0x34
 800242e:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <HAL_GPIO_EXTI_Callback+0x264>)
 8002430:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002434:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file */
}
 8002438:	e063      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x246>
			encoderCount_r--;
 800243a:	4b38      	ldr	r3, [pc, #224]	; (800251c <HAL_GPIO_EXTI_Callback+0x260>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	1e51      	subs	r1, r2, #1
 8002442:	62b9      	str	r1, [r7, #40]	; 0x28
 8002444:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002448:	62fb      	str	r3, [r7, #44]	; 0x2c
 800244a:	4b34      	ldr	r3, [pc, #208]	; (800251c <HAL_GPIO_EXTI_Callback+0x260>)
 800244c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8002450:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r--;
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HAL_GPIO_EXTI_Callback+0x264>)
 8002456:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245a:	1e51      	subs	r1, r2, #1
 800245c:	6239      	str	r1, [r7, #32]
 800245e:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
 8002464:	4b2e      	ldr	r3, [pc, #184]	; (8002520 <HAL_GPIO_EXTI_Callback+0x264>)
 8002466:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800246a:	e9c3 1200 	strd	r1, r2, [r3]
}
 800246e:	e048      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x246>
	} else if (GPIO_Pin == Right_pulse_B_Pin) {
 8002470:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002478:	d143      	bne.n	8002502 <HAL_GPIO_EXTI_Callback+0x246>
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 800247a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800247e:	4826      	ldr	r0, [pc, #152]	; (8002518 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002480:	f001 fabe 	bl	8003a00 <HAL_GPIO_ReadPin>
 8002484:	4603      	mov	r3, r0
 8002486:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, Right_pulse_B_Pin)) {
 8002488:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800248c:	4822      	ldr	r0, [pc, #136]	; (8002518 <HAL_GPIO_EXTI_Callback+0x25c>)
 800248e:	f001 fab7 	bl	8003a00 <HAL_GPIO_ReadPin>
 8002492:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 8002494:	429c      	cmp	r4, r3
 8002496:	d11a      	bne.n	80024ce <HAL_GPIO_EXTI_Callback+0x212>
			encoderCount_r--;
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_GPIO_EXTI_Callback+0x260>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	1e51      	subs	r1, r2, #1
 80024a0:	61b9      	str	r1, [r7, #24]
 80024a2:	f143 33ff 	adc.w	r3, r3, #4294967295
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	4b1c      	ldr	r3, [pc, #112]	; (800251c <HAL_GPIO_EXTI_Callback+0x260>)
 80024aa:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80024ae:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r--;
 80024b2:	4b1b      	ldr	r3, [pc, #108]	; (8002520 <HAL_GPIO_EXTI_Callback+0x264>)
 80024b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024b8:	1e51      	subs	r1, r2, #1
 80024ba:	6139      	str	r1, [r7, #16]
 80024bc:	f143 33ff 	adc.w	r3, r3, #4294967295
 80024c0:	617b      	str	r3, [r7, #20]
 80024c2:	4b17      	ldr	r3, [pc, #92]	; (8002520 <HAL_GPIO_EXTI_Callback+0x264>)
 80024c4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80024c8:	e9c3 1200 	strd	r1, r2, [r3]
}
 80024cc:	e019      	b.n	8002502 <HAL_GPIO_EXTI_Callback+0x246>
			encoderCount_r++;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <HAL_GPIO_EXTI_Callback+0x260>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	1c51      	adds	r1, r2, #1
 80024d6:	60b9      	str	r1, [r7, #8]
 80024d8:	f143 0300 	adc.w	r3, r3, #0
 80024dc:	60fb      	str	r3, [r7, #12]
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_GPIO_EXTI_Callback+0x260>)
 80024e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80024e4:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r++;
 80024e8:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <HAL_GPIO_EXTI_Callback+0x264>)
 80024ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ee:	1c51      	adds	r1, r2, #1
 80024f0:	6039      	str	r1, [r7, #0]
 80024f2:	f143 0300 	adc.w	r3, r3, #0
 80024f6:	607b      	str	r3, [r7, #4]
 80024f8:	4b09      	ldr	r3, [pc, #36]	; (8002520 <HAL_GPIO_EXTI_Callback+0x264>)
 80024fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80024fe:	e9c3 1200 	strd	r1, r2, [r3]
}
 8002502:	bf00      	nop
 8002504:	3774      	adds	r7, #116	; 0x74
 8002506:	46bd      	mov	sp, r7
 8002508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800250c:	40020400 	.word	0x40020400
 8002510:	200003f0 	.word	0x200003f0
 8002514:	20000400 	.word	0x20000400
 8002518:	40020000 	.word	0x40020000
 800251c:	200003f8 	.word	0x200003f8
 8002520:	20000408 	.word	0x20000408

08002524 <motorControl>:
 * @brief  모터 드라이버 제어 코드.
 * @note   1,O ->Forward 0,1->Reverse
 * @param  in1: 모터 드라이버 IN1
 * @param  in2: 모터 드라이버 IN2
 */
void motorControl(int in1, int in2) {
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
 800252c:	6039      	str	r1, [r7, #0]
	GPIO_PinState state1=GPIO_PIN_RESET,state2=GPIO_PIN_RESET;
 800252e:	2300      	movs	r3, #0
 8002530:	73fb      	strb	r3, [r7, #15]
 8002532:	2300      	movs	r3, #0
 8002534:	73bb      	strb	r3, [r7, #14]
	if(in1==1){
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d102      	bne.n	8002542 <motorControl+0x1e>
		state1=GPIO_PIN_SET;
 800253c:	2301      	movs	r3, #1
 800253e:	73fb      	strb	r3, [r7, #15]
 8002540:	e001      	b.n	8002546 <motorControl+0x22>
	}
	else{
		state1=GPIO_PIN_RESET;
 8002542:	2300      	movs	r3, #0
 8002544:	73fb      	strb	r3, [r7, #15]
	}
	if(in2==1){
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d102      	bne.n	8002552 <motorControl+0x2e>
		state2=GPIO_PIN_SET;
 800254c:	2301      	movs	r3, #1
 800254e:	73bb      	strb	r3, [r7, #14]
 8002550:	e001      	b.n	8002556 <motorControl+0x32>
	}
	else{
		state2=GPIO_PIN_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	73bb      	strb	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(GPIOB, Left_IN1_Pin, state1);
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	461a      	mov	r2, r3
 800255a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800255e:	4806      	ldr	r0, [pc, #24]	; (8002578 <motorControl+0x54>)
 8002560:	f001 fa66 	bl	8003a30 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Left_IN2_Pin, state2);
 8002564:	7bbb      	ldrb	r3, [r7, #14]
 8002566:	461a      	mov	r2, r3
 8002568:	2110      	movs	r1, #16
 800256a:	4804      	ldr	r0, [pc, #16]	; (800257c <motorControl+0x58>)
 800256c:	f001 fa60 	bl	8003a30 <HAL_GPIO_WritePin>

}
 8002570:	bf00      	nop
 8002572:	3710      	adds	r7, #16
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	40020400 	.word	0x40020400
 800257c:	40020800 	.word	0x40020800

08002580 <motorControl_r>:
 * @brief  모터 드라이버 제어 코드.
 * @note   1,O ->Forward 0,1->Reverse
 * @param  in1: 모터 드라이버 IN1
 * @param  in2: 모터 드라이버 IN2
 */
void motorControl_r(int in1, int in2) {
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
	GPIO_PinState state1=GPIO_PIN_RESET,state2=GPIO_PIN_RESET;
 800258a:	2300      	movs	r3, #0
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	2300      	movs	r3, #0
 8002590:	73bb      	strb	r3, [r7, #14]
	if(in1==1){
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d102      	bne.n	800259e <motorControl_r+0x1e>
		state1=GPIO_PIN_SET;
 8002598:	2301      	movs	r3, #1
 800259a:	73fb      	strb	r3, [r7, #15]
 800259c:	e001      	b.n	80025a2 <motorControl_r+0x22>
	}
	else{
		state1=GPIO_PIN_RESET;
 800259e:	2300      	movs	r3, #0
 80025a0:	73fb      	strb	r3, [r7, #15]
	}
	if(in2==1){
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d102      	bne.n	80025ae <motorControl_r+0x2e>
		state2=GPIO_PIN_SET;
 80025a8:	2301      	movs	r3, #1
 80025aa:	73bb      	strb	r3, [r7, #14]
 80025ac:	e001      	b.n	80025b2 <motorControl_r+0x32>
	}
	else{
		state2=GPIO_PIN_RESET;
 80025ae:	2300      	movs	r3, #0
 80025b0:	73bb      	strb	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(GPIOC, Right_IN1_Pin, state1);
 80025b2:	7bfb      	ldrb	r3, [r7, #15]
 80025b4:	461a      	mov	r2, r3
 80025b6:	2120      	movs	r1, #32
 80025b8:	4806      	ldr	r0, [pc, #24]	; (80025d4 <motorControl_r+0x54>)
 80025ba:	f001 fa39 	bl	8003a30 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOC, Right_IN2_Pin, state2);
 80025be:	7bbb      	ldrb	r3, [r7, #14]
 80025c0:	461a      	mov	r2, r3
 80025c2:	2140      	movs	r1, #64	; 0x40
 80025c4:	4803      	ldr	r0, [pc, #12]	; (80025d4 <motorControl_r+0x54>)
 80025c6:	f001 fa33 	bl	8003a30 <HAL_GPIO_WritePin>
}
 80025ca:	bf00      	nop
 80025cc:	3710      	adds	r7, #16
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40020800 	.word	0x40020800

080025d8 <check_pwm>:
/**
 * @brief  PWM 입력값 범위 제한 함수.
 * @note   -180 ~ 180
 */
void check_pwm() {
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
	if (speed >= 180) {
 80025dc:	4b10      	ldr	r3, [pc, #64]	; (8002620 <check_pwm+0x48>)
 80025de:	edd3 7a00 	vldr	s15, [r3]
 80025e2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002624 <check_pwm+0x4c>
 80025e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ee:	db03      	blt.n	80025f8 <check_pwm+0x20>
		speed = 180;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <check_pwm+0x48>)
 80025f2:	4a0d      	ldr	r2, [pc, #52]	; (8002628 <check_pwm+0x50>)
 80025f4:	601a      	str	r2, [r3, #0]
	} else if (speed <= -180) {
		speed = -180;
	}
}
 80025f6:	e00d      	b.n	8002614 <check_pwm+0x3c>
	} else if (speed <= -180) {
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <check_pwm+0x48>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800262c <check_pwm+0x54>
 8002602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	d900      	bls.n	800260e <check_pwm+0x36>
}
 800260c:	e002      	b.n	8002614 <check_pwm+0x3c>
		speed = -180;
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <check_pwm+0x48>)
 8002610:	4a07      	ldr	r2, [pc, #28]	; (8002630 <check_pwm+0x58>)
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	20000430 	.word	0x20000430
 8002624:	43340000 	.word	0x43340000
 8002628:	43340000 	.word	0x43340000
 800262c:	c3340000 	.word	0xc3340000
 8002630:	c3340000 	.word	0xc3340000

08002634 <check_pwm_r>:
/**
 * @brief  PWM 입력값 범위 제한 함수.
 * @note   -180 ~ 180
 */
void check_pwm_r() {
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
	if (speed_r >= 180) {
 8002638:	4b10      	ldr	r3, [pc, #64]	; (800267c <check_pwm_r+0x48>)
 800263a:	edd3 7a00 	vldr	s15, [r3]
 800263e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002680 <check_pwm_r+0x4c>
 8002642:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264a:	db03      	blt.n	8002654 <check_pwm_r+0x20>
		speed_r = 180;
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <check_pwm_r+0x48>)
 800264e:	4a0d      	ldr	r2, [pc, #52]	; (8002684 <check_pwm_r+0x50>)
 8002650:	601a      	str	r2, [r3, #0]
	} else if (speed_r <= -180) {
		speed_r = -180;
	}
}
 8002652:	e00d      	b.n	8002670 <check_pwm_r+0x3c>
	} else if (speed_r <= -180) {
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <check_pwm_r+0x48>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002688 <check_pwm_r+0x54>
 800265e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002666:	d900      	bls.n	800266a <check_pwm_r+0x36>
}
 8002668:	e002      	b.n	8002670 <check_pwm_r+0x3c>
		speed_r = -180;
 800266a:	4b04      	ldr	r3, [pc, #16]	; (800267c <check_pwm_r+0x48>)
 800266c:	4a07      	ldr	r2, [pc, #28]	; (800268c <check_pwm_r+0x58>)
 800266e:	601a      	str	r2, [r3, #0]
}
 8002670:	bf00      	nop
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	20000434 	.word	0x20000434
 8002680:	43340000 	.word	0x43340000
 8002684:	43340000 	.word	0x43340000
 8002688:	c3340000 	.word	0xc3340000
 800268c:	c3340000 	.word	0xc3340000

08002690 <check_move_state>:
/**
 * @brief  현재 입력 속도에 따라 회전 방향 변경함.
 * @note   전역변수 control_x를 수정하는 방식임
 */
void check_move_state() {
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
	if (speed >= 0) {
 8002694:	4b0f      	ldr	r3, [pc, #60]	; (80026d4 <check_move_state+0x44>)
 8002696:	edd3 7a00 	vldr	s15, [r3]
 800269a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800269e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a2:	db09      	blt.n	80026b8 <check_move_state+0x28>
		move_state = 0;
 80026a4:	4b0c      	ldr	r3, [pc, #48]	; (80026d8 <check_move_state+0x48>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
		control_1 = 0, control_2 = 1;
 80026aa:	4b0c      	ldr	r3, [pc, #48]	; (80026dc <check_move_state+0x4c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <check_move_state+0x50>)
 80026b2:	2201      	movs	r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
	} else {
		move_state = 1;
		control_1 = 1, control_2 = 0;
	}
}
 80026b6:	e008      	b.n	80026ca <check_move_state+0x3a>
		move_state = 1;
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <check_move_state+0x48>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
		control_1 = 1, control_2 = 0;
 80026be:	4b07      	ldr	r3, [pc, #28]	; (80026dc <check_move_state+0x4c>)
 80026c0:	2201      	movs	r2, #1
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	4b06      	ldr	r3, [pc, #24]	; (80026e0 <check_move_state+0x50>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	20000430 	.word	0x20000430
 80026d8:	200004f8 	.word	0x200004f8
 80026dc:	200004f0 	.word	0x200004f0
 80026e0:	20000030 	.word	0x20000030

080026e4 <check_move_state_r>:
/**
 * @brief  현재 입력 속도에 따라 회전 방향 변경함.
 * @note   전역변수 control_x_r 를 수정하는 방식임
 */
void check_move_state_r() {
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
	if (speed_r >= 0) {
 80026e8:	4b0f      	ldr	r3, [pc, #60]	; (8002728 <check_move_state_r+0x44>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f6:	db09      	blt.n	800270c <check_move_state_r+0x28>
		move_state_r = 0;
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <check_move_state_r+0x48>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	601a      	str	r2, [r3, #0]
		control_1_r = 1, control_2_r = 0;
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <check_move_state_r+0x4c>)
 8002700:	2201      	movs	r2, #1
 8002702:	601a      	str	r2, [r3, #0]
 8002704:	4b0b      	ldr	r3, [pc, #44]	; (8002734 <check_move_state_r+0x50>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
	} else {
		move_state_r = 1;
		control_1_r = 0, control_2_r = 1;
	}
}
 800270a:	e008      	b.n	800271e <check_move_state_r+0x3a>
		move_state_r = 1;
 800270c:	4b07      	ldr	r3, [pc, #28]	; (800272c <check_move_state_r+0x48>)
 800270e:	2201      	movs	r2, #1
 8002710:	601a      	str	r2, [r3, #0]
		control_1_r = 0, control_2_r = 1;
 8002712:	4b07      	ldr	r3, [pc, #28]	; (8002730 <check_move_state_r+0x4c>)
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	4b06      	ldr	r3, [pc, #24]	; (8002734 <check_move_state_r+0x50>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	20000434 	.word	0x20000434
 800272c:	200004fc 	.word	0x200004fc
 8002730:	20000034 	.word	0x20000034
 8002734:	200004f4 	.word	0x200004f4

08002738 <cmd_vel_calculate>:
/**
 * @brief  선속도 각속도 변수전달 함수
 * @note   0,0 주어진경우 정지
 */
void cmd_vel_calculate(void) {
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
	cmd_vel_s = cmd_vel_x;
 800273c:	4b12      	ldr	r3, [pc, #72]	; (8002788 <cmd_vel_calculate+0x50>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a12      	ldr	r2, [pc, #72]	; (800278c <cmd_vel_calculate+0x54>)
 8002742:	6013      	str	r3, [r2, #0]
	cmd_vel_th = cmd_vel_z;
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <cmd_vel_calculate+0x58>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a12      	ldr	r2, [pc, #72]	; (8002794 <cmd_vel_calculate+0x5c>)
 800274a:	6013      	str	r3, [r2, #0]
	if (cmd_vel_x == 0 && cmd_vel_z == 0) {
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <cmd_vel_calculate+0x50>)
 800274e:	edd3 7a00 	vldr	s15, [r3]
 8002752:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800275a:	d10b      	bne.n	8002774 <cmd_vel_calculate+0x3c>
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <cmd_vel_calculate+0x58>)
 800275e:	edd3 7a00 	vldr	s15, [r3]
 8002762:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800276a:	d103      	bne.n	8002774 <cmd_vel_calculate+0x3c>
		stop_flag = 1;
 800276c:	4b0a      	ldr	r3, [pc, #40]	; (8002798 <cmd_vel_calculate+0x60>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	e003      	b.n	800277c <cmd_vel_calculate+0x44>
	} else {
		stop_flag = 0;
 8002774:	4b08      	ldr	r3, [pc, #32]	; (8002798 <cmd_vel_calculate+0x60>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
	}
}
 800277a:	bf00      	nop
 800277c:	bf00      	nop
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	20000678 	.word	0x20000678
 800278c:	20000680 	.word	0x20000680
 8002790:	2000067c 	.word	0x2000067c
 8002794:	20000684 	.word	0x20000684
 8002798:	20000470 	.word	0x20000470

0800279c <HAL_TIM_PeriodElapsedCallback>:
}
/**
 * @brief  mstick 초기화함수
 * @note   if(msTicks>변수) -->변수 수정하면 주기 바뀜
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ac:	d106      	bne.n	80027bc <HAL_TIM_PeriodElapsedCallback+0x20>
		if(msTicks>39){
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b27      	cmp	r3, #39	; 0x27
 80027b4:	d902      	bls.n	80027bc <HAL_TIM_PeriodElapsedCallback+0x20>
			msTicks = 0;
 80027b6:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
		}
	}
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	2000068c 	.word	0x2000068c

080027cc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b090      	sub	sp, #64	; 0x40
 80027d0:	af02      	add	r7, sp, #8
 80027d2:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a95      	ldr	r2, [pc, #596]	; (8002a30 <HAL_UART_RxCpltCallback+0x264>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	f040 811f 	bne.w	8002a1e <HAL_UART_RxCpltCallback+0x252>
		if (rx_data != '\n') {
 80027e0:	4b94      	ldr	r3, [pc, #592]	; (8002a34 <HAL_UART_RxCpltCallback+0x268>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b0a      	cmp	r3, #10
 80027e6:	d009      	beq.n	80027fc <HAL_UART_RxCpltCallback+0x30>
			rx_buffer[rx_index++] = rx_data;
 80027e8:	4b93      	ldr	r3, [pc, #588]	; (8002a38 <HAL_UART_RxCpltCallback+0x26c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	1c5a      	adds	r2, r3, #1
 80027ee:	4992      	ldr	r1, [pc, #584]	; (8002a38 <HAL_UART_RxCpltCallback+0x26c>)
 80027f0:	600a      	str	r2, [r1, #0]
 80027f2:	4a90      	ldr	r2, [pc, #576]	; (8002a34 <HAL_UART_RxCpltCallback+0x268>)
 80027f4:	7811      	ldrb	r1, [r2, #0]
 80027f6:	4a91      	ldr	r2, [pc, #580]	; (8002a3c <HAL_UART_RxCpltCallback+0x270>)
 80027f8:	54d1      	strb	r1, [r2, r3]
 80027fa:	e110      	b.n	8002a1e <HAL_UART_RxCpltCallback+0x252>
		}
		else {
			rx_buffer[rx_index] = '\0';
 80027fc:	4b8e      	ldr	r3, [pc, #568]	; (8002a38 <HAL_UART_RxCpltCallback+0x26c>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a8e      	ldr	r2, [pc, #568]	; (8002a3c <HAL_UART_RxCpltCallback+0x270>)
 8002802:	2100      	movs	r1, #0
 8002804:	54d1      	strb	r1, [r2, r3]
			//printf("Data: %s\n", rx_buffer);

			if (rx_buffer[0] == '1') {
 8002806:	4b8d      	ldr	r3, [pc, #564]	; (8002a3c <HAL_UART_RxCpltCallback+0x270>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b31      	cmp	r3, #49	; 0x31
 800280c:	d148      	bne.n	80028a0 <HAL_UART_RxCpltCallback+0xd4>
				//printf("[1] Data: %s\n", rx_buffer);

				char first_number[10];

				strncpy(first_number, &rx_buffer[2], 9);
 800280e:	f107 0320 	add.w	r3, r7, #32
 8002812:	2209      	movs	r2, #9
 8002814:	498a      	ldr	r1, [pc, #552]	; (8002a40 <HAL_UART_RxCpltCallback+0x274>)
 8002816:	4618      	mov	r0, r3
 8002818:	f005 fd8b 	bl	8008332 <strncpy>
				first_number[10] = '\0';
 800281c:	2300      	movs	r3, #0
 800281e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

				cmd_vel_x = atof(first_number);
 8002822:	f107 0320 	add.w	r3, r7, #32
 8002826:	4618      	mov	r0, r3
 8002828:	f003 ff98 	bl	800675c <atof>
 800282c:	ec53 2b10 	vmov	r2, r3, d0
 8002830:	4610      	mov	r0, r2
 8002832:	4619      	mov	r1, r3
 8002834:	f7fe f9f8 	bl	8000c28 <__aeabi_d2f>
 8002838:	4603      	mov	r3, r0
 800283a:	4a82      	ldr	r2, [pc, #520]	; (8002a44 <HAL_UART_RxCpltCallback+0x278>)
 800283c:	6013      	str	r3, [r2, #0]
				if (rx_buffer[1] == '0') { // ?��?��?�� 경우
 800283e:	4b7f      	ldr	r3, [pc, #508]	; (8002a3c <HAL_UART_RxCpltCallback+0x270>)
 8002840:	785b      	ldrb	r3, [r3, #1]
 8002842:	2b30      	cmp	r3, #48	; 0x30
 8002844:	d107      	bne.n	8002856 <HAL_UART_RxCpltCallback+0x8a>
					cmd_vel_x = -cmd_vel_x;
 8002846:	4b7f      	ldr	r3, [pc, #508]	; (8002a44 <HAL_UART_RxCpltCallback+0x278>)
 8002848:	edd3 7a00 	vldr	s15, [r3]
 800284c:	eef1 7a67 	vneg.f32	s15, s15
 8002850:	4b7c      	ldr	r3, [pc, #496]	; (8002a44 <HAL_UART_RxCpltCallback+0x278>)
 8002852:	edc3 7a00 	vstr	s15, [r3]
				}

				char second_number[10];
				strncpy(second_number, &rx_buffer[12], 9);
 8002856:	f107 0314 	add.w	r3, r7, #20
 800285a:	2209      	movs	r2, #9
 800285c:	497a      	ldr	r1, [pc, #488]	; (8002a48 <HAL_UART_RxCpltCallback+0x27c>)
 800285e:	4618      	mov	r0, r3
 8002860:	f005 fd67 	bl	8008332 <strncpy>
				second_number[10] = '\0';
 8002864:	2300      	movs	r3, #0
 8002866:	77bb      	strb	r3, [r7, #30]

				cmd_vel_z = atof(second_number);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4618      	mov	r0, r3
 800286e:	f003 ff75 	bl	800675c <atof>
 8002872:	ec53 2b10 	vmov	r2, r3, d0
 8002876:	4610      	mov	r0, r2
 8002878:	4619      	mov	r1, r3
 800287a:	f7fe f9d5 	bl	8000c28 <__aeabi_d2f>
 800287e:	4603      	mov	r3, r0
 8002880:	4a72      	ldr	r2, [pc, #456]	; (8002a4c <HAL_UART_RxCpltCallback+0x280>)
 8002882:	6013      	str	r3, [r2, #0]
				if (rx_buffer[11] == '0') { // ?��?��?�� 경우
 8002884:	4b6d      	ldr	r3, [pc, #436]	; (8002a3c <HAL_UART_RxCpltCallback+0x270>)
 8002886:	7adb      	ldrb	r3, [r3, #11]
 8002888:	2b30      	cmp	r3, #48	; 0x30
 800288a:	f040 80bf 	bne.w	8002a0c <HAL_UART_RxCpltCallback+0x240>
					cmd_vel_z = -cmd_vel_z;
 800288e:	4b6f      	ldr	r3, [pc, #444]	; (8002a4c <HAL_UART_RxCpltCallback+0x280>)
 8002890:	edd3 7a00 	vldr	s15, [r3]
 8002894:	eef1 7a67 	vneg.f32	s15, s15
 8002898:	4b6c      	ldr	r3, [pc, #432]	; (8002a4c <HAL_UART_RxCpltCallback+0x280>)
 800289a:	edc3 7a00 	vstr	s15, [r3]
 800289e:	e0b5      	b.n	8002a0c <HAL_UART_RxCpltCallback+0x240>
				}
			}
			else if (rx_buffer[0] == '2') {
 80028a0:	4b66      	ldr	r3, [pc, #408]	; (8002a3c <HAL_UART_RxCpltCallback+0x270>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b32      	cmp	r3, #50	; 0x32
 80028a6:	f040 80ab 	bne.w	8002a00 <HAL_UART_RxCpltCallback+0x234>
				//printf("[2] Data: %s\n", rx_buffer);

				//Data_import
				for (int i = 0; i < 48; i++) {
 80028aa:	2300      	movs	r3, #0
 80028ac:	637b      	str	r3, [r7, #52]	; 0x34
 80028ae:	e00b      	b.n	80028c8 <HAL_UART_RxCpltCallback+0xfc>
					motor_buffer[i] = rx_buffer[i + 1];
 80028b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b2:	3301      	adds	r3, #1
 80028b4:	4a61      	ldr	r2, [pc, #388]	; (8002a3c <HAL_UART_RxCpltCallback+0x270>)
 80028b6:	5cd1      	ldrb	r1, [r2, r3]
 80028b8:	4a65      	ldr	r2, [pc, #404]	; (8002a50 <HAL_UART_RxCpltCallback+0x284>)
 80028ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028bc:	4413      	add	r3, r2
 80028be:	460a      	mov	r2, r1
 80028c0:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 48; i++) {
 80028c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028c4:	3301      	adds	r3, #1
 80028c6:	637b      	str	r3, [r7, #52]	; 0x34
 80028c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028ca:	2b2f      	cmp	r3, #47	; 0x2f
 80028cc:	ddf0      	ble.n	80028b0 <HAL_UART_RxCpltCallback+0xe4>
				}

				//Slicing Data and char to float
				for (int i = 0; i < 6; i++) {
 80028ce:	2300      	movs	r3, #0
 80028d0:	633b      	str	r3, [r7, #48]	; 0x30
 80028d2:	e031      	b.n	8002938 <HAL_UART_RxCpltCallback+0x16c>
					char temp[9];

					for (int j = 0; j < 8; j++) {
 80028d4:	2300      	movs	r3, #0
 80028d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028d8:	e00e      	b.n	80028f8 <HAL_UART_RxCpltCallback+0x12c>
						temp[j] = motor_buffer[i * 8 + j];
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	00da      	lsls	r2, r3, #3
 80028de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e0:	4413      	add	r3, r2
 80028e2:	4a5b      	ldr	r2, [pc, #364]	; (8002a50 <HAL_UART_RxCpltCallback+0x284>)
 80028e4:	5cd1      	ldrb	r1, [r2, r3]
 80028e6:	f107 0208 	add.w	r2, r7, #8
 80028ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028ec:	4413      	add	r3, r2
 80028ee:	460a      	mov	r2, r1
 80028f0:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++) {
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	3301      	adds	r3, #1
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fa:	2b07      	cmp	r3, #7
 80028fc:	dded      	ble.n	80028da <HAL_UART_RxCpltCallback+0x10e>
					}
					temp[8] = '\0';
 80028fe:	2300      	movs	r3, #0
 8002900:	743b      	strb	r3, [r7, #16]

					motor_degree[i] = radiansToDegrees(atof(temp));;
 8002902:	f107 0308 	add.w	r3, r7, #8
 8002906:	4618      	mov	r0, r3
 8002908:	f003 ff28 	bl	800675c <atof>
 800290c:	ec53 2b10 	vmov	r2, r3, d0
 8002910:	4610      	mov	r0, r2
 8002912:	4619      	mov	r1, r3
 8002914:	f7fe f988 	bl	8000c28 <__aeabi_d2f>
 8002918:	4603      	mov	r3, r0
 800291a:	ee00 3a10 	vmov	s0, r3
 800291e:	f7fe fc07 	bl	8001130 <radiansToDegrees>
 8002922:	eef0 7a40 	vmov.f32	s15, s0
 8002926:	4a4b      	ldr	r2, [pc, #300]	; (8002a54 <HAL_UART_RxCpltCallback+0x288>)
 8002928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292a:	009b      	lsls	r3, r3, #2
 800292c:	4413      	add	r3, r2
 800292e:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 6; i++) {
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	3301      	adds	r3, #1
 8002936:	633b      	str	r3, [r7, #48]	; 0x30
 8002938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293a:	2b05      	cmp	r3, #5
 800293c:	ddca      	ble.n	80028d4 <HAL_UART_RxCpltCallback+0x108>
				}


				//move motor
				setMotorAngle(&htim14, TIM_CHANNEL_1, motor_degree[0], MOTOR1_MIN_ANGLE, MOTOR1_MAX_ANGLE);
 800293e:	4b45      	ldr	r3, [pc, #276]	; (8002a54 <HAL_UART_RxCpltCallback+0x288>)
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002948:	edc7 7a00 	vstr	s15, [r7]
 800294c:	783b      	ldrb	r3, [r7, #0]
 800294e:	b2da      	uxtb	r2, r3
 8002950:	23b4      	movs	r3, #180	; 0xb4
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	2300      	movs	r3, #0
 8002956:	2100      	movs	r1, #0
 8002958:	483f      	ldr	r0, [pc, #252]	; (8002a58 <HAL_UART_RxCpltCallback+0x28c>)
 800295a:	f7fe fc69 	bl	8001230 <setMotorAngle>
				setMotorAngle(&htim4, TIM_CHANNEL_1, motor_degree[1], MOTOR2_MIN_ANGLE, MOTOR2_MAX_ANGLE);
 800295e:	4b3d      	ldr	r3, [pc, #244]	; (8002a54 <HAL_UART_RxCpltCallback+0x288>)
 8002960:	edd3 7a01 	vldr	s15, [r3, #4]
 8002964:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002968:	edc7 7a00 	vstr	s15, [r7]
 800296c:	783b      	ldrb	r3, [r7, #0]
 800296e:	b2da      	uxtb	r2, r3
 8002970:	23a5      	movs	r3, #165	; 0xa5
 8002972:	9300      	str	r3, [sp, #0]
 8002974:	230f      	movs	r3, #15
 8002976:	2100      	movs	r1, #0
 8002978:	4838      	ldr	r0, [pc, #224]	; (8002a5c <HAL_UART_RxCpltCallback+0x290>)
 800297a:	f7fe fc59 	bl	8001230 <setMotorAngle>
				setMotorAngle(&htim3, TIM_CHANNEL_2, motor_degree[2], MOTOR3_MIN_ANGLE, MOTOR3_MAX_ANGLE);
 800297e:	4b35      	ldr	r3, [pc, #212]	; (8002a54 <HAL_UART_RxCpltCallback+0x288>)
 8002980:	edd3 7a02 	vldr	s15, [r3, #8]
 8002984:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002988:	edc7 7a00 	vstr	s15, [r7]
 800298c:	783b      	ldrb	r3, [r7, #0]
 800298e:	b2da      	uxtb	r2, r3
 8002990:	23b4      	movs	r3, #180	; 0xb4
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	2300      	movs	r3, #0
 8002996:	2104      	movs	r1, #4
 8002998:	4831      	ldr	r0, [pc, #196]	; (8002a60 <HAL_UART_RxCpltCallback+0x294>)
 800299a:	f7fe fc49 	bl	8001230 <setMotorAngle>
				setMotorAngle(&htim2, TIM_CHANNEL_3, motor_degree[3], MOTOR4_MIN_ANGLE, MOTOR4_MAX_ANGLE);
 800299e:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <HAL_UART_RxCpltCallback+0x288>)
 80029a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80029a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a8:	edc7 7a00 	vstr	s15, [r7]
 80029ac:	783b      	ldrb	r3, [r7, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	23b4      	movs	r3, #180	; 0xb4
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2300      	movs	r3, #0
 80029b6:	2108      	movs	r1, #8
 80029b8:	482a      	ldr	r0, [pc, #168]	; (8002a64 <HAL_UART_RxCpltCallback+0x298>)
 80029ba:	f7fe fc39 	bl	8001230 <setMotorAngle>
				setMotorAngle(&htim3, TIM_CHANNEL_1, motor_degree[4], MOTOR5_MIN_ANGLE, MOTOR5_MAX_ANGLE);
 80029be:	4b25      	ldr	r3, [pc, #148]	; (8002a54 <HAL_UART_RxCpltCallback+0x288>)
 80029c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80029c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c8:	edc7 7a00 	vstr	s15, [r7]
 80029cc:	783b      	ldrb	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	23b4      	movs	r3, #180	; 0xb4
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	2300      	movs	r3, #0
 80029d6:	2100      	movs	r1, #0
 80029d8:	4821      	ldr	r0, [pc, #132]	; (8002a60 <HAL_UART_RxCpltCallback+0x294>)
 80029da:	f7fe fc29 	bl	8001230 <setMotorAngle>
				setMotorAngle(&htim2, TIM_CHANNEL_2, motor_degree[5], MOTOR6_MIN_ANGLE, MOTOR6_MAX_ANGLE);
 80029de:	4b1d      	ldr	r3, [pc, #116]	; (8002a54 <HAL_UART_RxCpltCallback+0x288>)
 80029e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80029e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e8:	edc7 7a00 	vstr	s15, [r7]
 80029ec:	783b      	ldrb	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	2349      	movs	r3, #73	; 0x49
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	230a      	movs	r3, #10
 80029f6:	2104      	movs	r1, #4
 80029f8:	481a      	ldr	r0, [pc, #104]	; (8002a64 <HAL_UART_RxCpltCallback+0x298>)
 80029fa:	f7fe fc19 	bl	8001230 <setMotorAngle>
 80029fe:	e005      	b.n	8002a0c <HAL_UART_RxCpltCallback+0x240>
			}
			else if (rx_buffer[0] == '3') {
 8002a00:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <HAL_UART_RxCpltCallback+0x270>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b33      	cmp	r3, #51	; 0x33
 8002a06:	d101      	bne.n	8002a0c <HAL_UART_RxCpltCallback+0x240>
				NVIC_SystemReset();
 8002a08:	f7fe fb3c 	bl	8001084 <__NVIC_SystemReset>

			}


			//reset huart2 buffer
			rx_index = 0;
 8002a0c:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_UART_RxCpltCallback+0x26c>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	601a      	str	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8002a12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a16:	2100      	movs	r1, #0
 8002a18:	4808      	ldr	r0, [pc, #32]	; (8002a3c <HAL_UART_RxCpltCallback+0x270>)
 8002a1a:	f005 fc70 	bl	80082fe <memset>
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rx_data, 1);
 8002a1e:	2201      	movs	r2, #1
 8002a20:	4904      	ldr	r1, [pc, #16]	; (8002a34 <HAL_UART_RxCpltCallback+0x268>)
 8002a22:	4811      	ldr	r0, [pc, #68]	; (8002a68 <HAL_UART_RxCpltCallback+0x29c>)
 8002a24:	f002 ff1f 	bl	8005866 <HAL_UART_Receive_IT>
}
 8002a28:	bf00      	nop
 8002a2a:	3738      	adds	r7, #56	; 0x38
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40004400 	.word	0x40004400
 8002a34:	20000600 	.word	0x20000600
 8002a38:	20000604 	.word	0x20000604
 8002a3c:	20000500 	.word	0x20000500
 8002a40:	20000502 	.word	0x20000502
 8002a44:	20000678 	.word	0x20000678
 8002a48:	2000050c 	.word	0x2000050c
 8002a4c:	2000067c 	.word	0x2000067c
 8002a50:	20000608 	.word	0x20000608
 8002a54:	2000063c 	.word	0x2000063c
 8002a58:	2000035c 	.word	0x2000035c
 8002a5c:	200002cc 	.word	0x200002cc
 8002a60:	20000284 	.word	0x20000284
 8002a64:	2000023c 	.word	0x2000023c
 8002a68:	200003a4 	.word	0x200003a4

08002a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a70:	b672      	cpsid	i
}
 8002a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a74:	e7fe      	b.n	8002a74 <Error_Handler+0x8>
	...

08002a78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	4b10      	ldr	r3, [pc, #64]	; (8002ac4 <HAL_MspInit+0x4c>)
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	4a0f      	ldr	r2, [pc, #60]	; (8002ac4 <HAL_MspInit+0x4c>)
 8002a88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a8e:	4b0d      	ldr	r3, [pc, #52]	; (8002ac4 <HAL_MspInit+0x4c>)
 8002a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a96:	607b      	str	r3, [r7, #4]
 8002a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <HAL_MspInit+0x4c>)
 8002aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa2:	4a08      	ldr	r2, [pc, #32]	; (8002ac4 <HAL_MspInit+0x4c>)
 8002aa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aa8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aaa:	4b06      	ldr	r3, [pc, #24]	; (8002ac4 <HAL_MspInit+0x4c>)
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ab6:	2007      	movs	r0, #7
 8002ab8:	f000 fd3a 	bl	8003530 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002abc:	bf00      	nop
 8002abe:	3708      	adds	r7, #8
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40023800 	.word	0x40023800

08002ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d116      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]
 8002ade:	4b36      	ldr	r3, [pc, #216]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a35      	ldr	r2, [pc, #212]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b33      	ldr	r3, [pc, #204]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8002af6:	2201      	movs	r2, #1
 8002af8:	2100      	movs	r1, #0
 8002afa:	201c      	movs	r0, #28
 8002afc:	f000 fd23 	bl	8003546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b00:	201c      	movs	r0, #28
 8002b02:	f000 fd3c 	bl	800357e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002b06:	e052      	b.n	8002bae <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a2b      	ldr	r2, [pc, #172]	; (8002bbc <HAL_TIM_Base_MspInit+0xf4>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d116      	bne.n	8002b40 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	613b      	str	r3, [r7, #16]
 8002b16:	4b28      	ldr	r3, [pc, #160]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a27      	ldr	r2, [pc, #156]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002b1c:	f043 0302 	orr.w	r3, r3, #2
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8002b2e:	2201      	movs	r2, #1
 8002b30:	2100      	movs	r1, #0
 8002b32:	201d      	movs	r0, #29
 8002b34:	f000 fd07 	bl	8003546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b38:	201d      	movs	r0, #29
 8002b3a:	f000 fd20 	bl	800357e <HAL_NVIC_EnableIRQ>
}
 8002b3e:	e036      	b.n	8002bae <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <HAL_TIM_Base_MspInit+0xf8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d116      	bne.n	8002b78 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	4b1a      	ldr	r3, [pc, #104]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a19      	ldr	r2, [pc, #100]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b17      	ldr	r3, [pc, #92]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 0304 	and.w	r3, r3, #4
 8002b62:	60fb      	str	r3, [r7, #12]
 8002b64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8002b66:	2201      	movs	r2, #1
 8002b68:	2100      	movs	r1, #0
 8002b6a:	201e      	movs	r0, #30
 8002b6c:	f000 fceb 	bl	8003546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b70:	201e      	movs	r0, #30
 8002b72:	f000 fd04 	bl	800357e <HAL_NVIC_EnableIRQ>
}
 8002b76:	e01a      	b.n	8002bae <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM14)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a11      	ldr	r2, [pc, #68]	; (8002bc4 <HAL_TIM_Base_MspInit+0xfc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d115      	bne.n	8002bae <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	4b0c      	ldr	r3, [pc, #48]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a0b      	ldr	r2, [pc, #44]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002b8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b09      	ldr	r3, [pc, #36]	; (8002bb8 <HAL_TIM_Base_MspInit+0xf0>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b9a:	60bb      	str	r3, [r7, #8]
 8002b9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 1);
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	2100      	movs	r1, #0
 8002ba2:	202d      	movs	r0, #45	; 0x2d
 8002ba4:	f000 fccf 	bl	8003546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002ba8:	202d      	movs	r0, #45	; 0x2d
 8002baa:	f000 fce8 	bl	800357e <HAL_NVIC_EnableIRQ>
}
 8002bae:	bf00      	nop
 8002bb0:	3718      	adds	r7, #24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	40023800 	.word	0x40023800
 8002bbc:	40000400 	.word	0x40000400
 8002bc0:	40000800 	.word	0x40000800
 8002bc4:	40002000 	.word	0x40002000

08002bc8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b084      	sub	sp, #16
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a0e      	ldr	r2, [pc, #56]	; (8002c10 <HAL_TIM_PWM_MspInit+0x48>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d115      	bne.n	8002c06 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
 8002bde:	4b0d      	ldr	r3, [pc, #52]	; (8002c14 <HAL_TIM_PWM_MspInit+0x4c>)
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	4a0c      	ldr	r2, [pc, #48]	; (8002c14 <HAL_TIM_PWM_MspInit+0x4c>)
 8002be4:	f043 0308 	orr.w	r3, r3, #8
 8002be8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bea:	4b0a      	ldr	r3, [pc, #40]	; (8002c14 <HAL_TIM_PWM_MspInit+0x4c>)
 8002bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	60fb      	str	r3, [r7, #12]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 8002bf6:	2201      	movs	r2, #1
 8002bf8:	2100      	movs	r1, #0
 8002bfa:	2032      	movs	r0, #50	; 0x32
 8002bfc:	f000 fca3 	bl	8003546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c00:	2032      	movs	r0, #50	; 0x32
 8002c02:	f000 fcbc 	bl	800357e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c06:	bf00      	nop
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	40000c00 	.word	0x40000c00
 8002c14:	40023800 	.word	0x40023800

08002c18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08e      	sub	sp, #56	; 0x38
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c24:	2200      	movs	r2, #0
 8002c26:	601a      	str	r2, [r3, #0]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	609a      	str	r2, [r3, #8]
 8002c2c:	60da      	str	r2, [r3, #12]
 8002c2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c38:	d11f      	bne.n	8002c7a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	623b      	str	r3, [r7, #32]
 8002c3e:	4b67      	ldr	r3, [pc, #412]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c42:	4a66      	ldr	r2, [pc, #408]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002c44:	f043 0302 	orr.w	r3, r3, #2
 8002c48:	6313      	str	r3, [r2, #48]	; 0x30
 8002c4a:	4b64      	ldr	r3, [pc, #400]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	623b      	str	r3, [r7, #32]
 8002c54:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM_wrist_rot_Pin|TIM_gripper_Pin;
 8002c56:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002c5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c64:	2300      	movs	r3, #0
 8002c66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c70:	4619      	mov	r1, r3
 8002c72:	485b      	ldr	r0, [pc, #364]	; (8002de0 <HAL_TIM_MspPostInit+0x1c8>)
 8002c74:	f000 fd30 	bl	80036d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002c78:	e0ac      	b.n	8002dd4 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM3)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a59      	ldr	r2, [pc, #356]	; (8002de4 <HAL_TIM_MspPostInit+0x1cc>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d13c      	bne.n	8002cfe <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c84:	2300      	movs	r3, #0
 8002c86:	61fb      	str	r3, [r7, #28]
 8002c88:	4b54      	ldr	r3, [pc, #336]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8c:	4a53      	ldr	r2, [pc, #332]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002c8e:	f043 0304 	orr.w	r3, r3, #4
 8002c92:	6313      	str	r3, [r2, #48]	; 0x30
 8002c94:	4b51      	ldr	r3, [pc, #324]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	f003 0304 	and.w	r3, r3, #4
 8002c9c:	61fb      	str	r3, [r7, #28]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	4b4d      	ldr	r3, [pc, #308]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca8:	4a4c      	ldr	r2, [pc, #304]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002caa:	f043 0302 	orr.w	r3, r3, #2
 8002cae:	6313      	str	r3, [r2, #48]	; 0x30
 8002cb0:	4b4a      	ldr	r3, [pc, #296]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb4:	f003 0302 	and.w	r3, r3, #2
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM_elbow_Pin;
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cc0:	2302      	movs	r3, #2
 8002cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_elbow_GPIO_Port, &GPIO_InitStruct);
 8002cd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	4844      	ldr	r0, [pc, #272]	; (8002de8 <HAL_TIM_MspPostInit+0x1d0>)
 8002cd8:	f000 fcfe 	bl	80036d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_wrist_var_Pin;
 8002cdc:	2310      	movs	r3, #16
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002cec:	2302      	movs	r3, #2
 8002cee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_wrist_var_GPIO_Port, &GPIO_InitStruct);
 8002cf0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	483a      	ldr	r0, [pc, #232]	; (8002de0 <HAL_TIM_MspPostInit+0x1c8>)
 8002cf8:	f000 fcee 	bl	80036d8 <HAL_GPIO_Init>
}
 8002cfc:	e06a      	b.n	8002dd4 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM4)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a3a      	ldr	r2, [pc, #232]	; (8002dec <HAL_TIM_MspPostInit+0x1d4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d11e      	bne.n	8002d46 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d08:	2300      	movs	r3, #0
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	4b33      	ldr	r3, [pc, #204]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	4a32      	ldr	r2, [pc, #200]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002d12:	f043 0302 	orr.w	r3, r3, #2
 8002d16:	6313      	str	r3, [r2, #48]	; 0x30
 8002d18:	4b30      	ldr	r3, [pc, #192]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002d1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM_shoulder_Pin;
 8002d24:	2340      	movs	r3, #64	; 0x40
 8002d26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d28:	2302      	movs	r3, #2
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d30:	2300      	movs	r3, #0
 8002d32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d34:	2302      	movs	r3, #2
 8002d36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_shoulder_GPIO_Port, &GPIO_InitStruct);
 8002d38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	4828      	ldr	r0, [pc, #160]	; (8002de0 <HAL_TIM_MspPostInit+0x1c8>)
 8002d40:	f000 fcca 	bl	80036d8 <HAL_GPIO_Init>
}
 8002d44:	e046      	b.n	8002dd4 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM5)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a29      	ldr	r2, [pc, #164]	; (8002df0 <HAL_TIM_MspPostInit+0x1d8>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d11e      	bne.n	8002d8e <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d50:	2300      	movs	r3, #0
 8002d52:	613b      	str	r3, [r7, #16]
 8002d54:	4b21      	ldr	r3, [pc, #132]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	4a20      	ldr	r2, [pc, #128]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002d5a:	f043 0301 	orr.w	r3, r3, #1
 8002d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d60:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	613b      	str	r3, [r7, #16]
 8002d6a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Left_Pwm_Pin|Right_Pwm_Pin;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d70:	2302      	movs	r3, #2
 8002d72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d74:	2300      	movs	r3, #0
 8002d76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d84:	4619      	mov	r1, r3
 8002d86:	481b      	ldr	r0, [pc, #108]	; (8002df4 <HAL_TIM_MspPostInit+0x1dc>)
 8002d88:	f000 fca6 	bl	80036d8 <HAL_GPIO_Init>
}
 8002d8c:	e022      	b.n	8002dd4 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM14)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a19      	ldr	r2, [pc, #100]	; (8002df8 <HAL_TIM_MspPostInit+0x1e0>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d11d      	bne.n	8002dd4 <HAL_TIM_MspPostInit+0x1bc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d98:	2300      	movs	r3, #0
 8002d9a:	60fb      	str	r3, [r7, #12]
 8002d9c:	4b0f      	ldr	r3, [pc, #60]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	4a0e      	ldr	r2, [pc, #56]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002da2:	f043 0301 	orr.w	r3, r3, #1
 8002da6:	6313      	str	r3, [r2, #48]	; 0x30
 8002da8:	4b0c      	ldr	r3, [pc, #48]	; (8002ddc <HAL_TIM_MspPostInit+0x1c4>)
 8002daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dac:	f003 0301 	and.w	r3, r3, #1
 8002db0:	60fb      	str	r3, [r7, #12]
 8002db2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_base_Pin;
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db8:	2302      	movs	r3, #2
 8002dba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002dc4:	2309      	movs	r3, #9
 8002dc6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_base_GPIO_Port, &GPIO_InitStruct);
 8002dc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002dcc:	4619      	mov	r1, r3
 8002dce:	4809      	ldr	r0, [pc, #36]	; (8002df4 <HAL_TIM_MspPostInit+0x1dc>)
 8002dd0:	f000 fc82 	bl	80036d8 <HAL_GPIO_Init>
}
 8002dd4:	bf00      	nop
 8002dd6:	3738      	adds	r7, #56	; 0x38
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40020400 	.word	0x40020400
 8002de4:	40000400 	.word	0x40000400
 8002de8:	40020800 	.word	0x40020800
 8002dec:	40000800 	.word	0x40000800
 8002df0:	40000c00 	.word	0x40000c00
 8002df4:	40020000 	.word	0x40020000
 8002df8:	40002000 	.word	0x40002000

08002dfc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e04:	f107 0314 	add.w	r3, r7, #20
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	605a      	str	r2, [r3, #4]
 8002e0e:	609a      	str	r2, [r3, #8]
 8002e10:	60da      	str	r2, [r3, #12]
 8002e12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <HAL_UART_MspInit+0x94>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d133      	bne.n	8002e86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e26:	4a1b      	ldr	r2, [pc, #108]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e2e:	4b19      	ldr	r3, [pc, #100]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a14      	ldr	r2, [pc, #80]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e44:	f043 0301 	orr.w	r3, r3, #1
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b12      	ldr	r3, [pc, #72]	; (8002e94 <HAL_UART_MspInit+0x98>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0301 	and.w	r3, r3, #1
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e56:	230c      	movs	r3, #12
 8002e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e66:	2307      	movs	r3, #7
 8002e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e6a:	f107 0314 	add.w	r3, r7, #20
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4809      	ldr	r0, [pc, #36]	; (8002e98 <HAL_UART_MspInit+0x9c>)
 8002e72:	f000 fc31 	bl	80036d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e76:	2200      	movs	r2, #0
 8002e78:	2100      	movs	r1, #0
 8002e7a:	2026      	movs	r0, #38	; 0x26
 8002e7c:	f000 fb63 	bl	8003546 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e80:	2026      	movs	r0, #38	; 0x26
 8002e82:	f000 fb7c 	bl	800357e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002e86:	bf00      	nop
 8002e88:	3728      	adds	r7, #40	; 0x28
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40004400 	.word	0x40004400
 8002e94:	40023800 	.word	0x40023800
 8002e98:	40020000 	.word	0x40020000

08002e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ea0:	e7fe      	b.n	8002ea0 <NMI_Handler+0x4>

08002ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ea2:	b480      	push	{r7}
 8002ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ea6:	e7fe      	b.n	8002ea6 <HardFault_Handler+0x4>

08002ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eac:	e7fe      	b.n	8002eac <MemManage_Handler+0x4>

08002eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eb2:	e7fe      	b.n	8002eb2 <BusFault_Handler+0x4>

08002eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eb8:	e7fe      	b.n	8002eb8 <UsageFault_Handler+0x4>

08002eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ebe:	bf00      	nop
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec6:	4770      	bx	lr

08002ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ecc:	bf00      	nop
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr

08002ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002eda:	bf00      	nop
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ee8:	f000 fa32 	bl	8003350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  msTicks++;
 8002eec:	4b03      	ldr	r3, [pc, #12]	; (8002efc <SysTick_Handler+0x18>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	4a02      	ldr	r2, [pc, #8]	; (8002efc <SysTick_Handler+0x18>)
 8002ef4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef6:	bf00      	nop
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	2000068c 	.word	0x2000068c

08002f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f04:	4802      	ldr	r0, [pc, #8]	; (8002f10 <TIM2_IRQHandler+0x10>)
 8002f06:	f001 fd85 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f0a:	bf00      	nop
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	2000023c 	.word	0x2000023c

08002f14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f18:	4802      	ldr	r0, [pc, #8]	; (8002f24 <TIM3_IRQHandler+0x10>)
 8002f1a:	f001 fd7b 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000284 	.word	0x20000284

08002f28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f2c:	4802      	ldr	r0, [pc, #8]	; (8002f38 <TIM4_IRQHandler+0x10>)
 8002f2e:	f001 fd71 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200002cc 	.word	0x200002cc

08002f3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f40:	4802      	ldr	r0, [pc, #8]	; (8002f4c <USART2_IRQHandler+0x10>)
 8002f42:	f002 fcb5 	bl	80058b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	200003a4 	.word	0x200003a4

08002f50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_pulse_B_Pin);
 8002f54:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002f58:	f000 fd84 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Right_pulse_A_Pin);
 8002f5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f60:	f000 fd80 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f64:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f68:	f000 fd7c 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_pulse_B_Pin);
 8002f6c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002f70:	f000 fd78 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_pulse_A_Pin);
 8002f74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f78:	f000 fd74 	bl	8003a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f7c:	bf00      	nop
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002f84:	4802      	ldr	r0, [pc, #8]	; (8002f90 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002f86:	f001 fd45 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	2000035c 	.word	0x2000035c

08002f94 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002f98:	4802      	ldr	r0, [pc, #8]	; (8002fa4 <TIM5_IRQHandler+0x10>)
 8002f9a:	f001 fd3b 	bl	8004a14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	20000314 	.word	0x20000314

08002fa8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return 1;
 8002fac:	2301      	movs	r3, #1
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr

08002fb8 <_kill>:

int _kill(int pid, int sig)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
 8002fc0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fc2:	f005 fa13 	bl	80083ec <__errno>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2216      	movs	r2, #22
 8002fca:	601a      	str	r2, [r3, #0]
  return -1;
 8002fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <_exit>:

void _exit (int status)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f7ff ffe7 	bl	8002fb8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002fea:	e7fe      	b.n	8002fea <_exit+0x12>

08002fec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b086      	sub	sp, #24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	617b      	str	r3, [r7, #20]
 8002ffc:	e00a      	b.n	8003014 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ffe:	f3af 8000 	nop.w
 8003002:	4601      	mov	r1, r0
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	60ba      	str	r2, [r7, #8]
 800300a:	b2ca      	uxtb	r2, r1
 800300c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	3301      	adds	r3, #1
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	697a      	ldr	r2, [r7, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	dbf0      	blt.n	8002ffe <_read+0x12>
  }

  return len;
 800301c:	687b      	ldr	r3, [r7, #4]
}
 800301e:	4618      	mov	r0, r3
 8003020:	3718      	adds	r7, #24
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}

08003026 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003026:	b580      	push	{r7, lr}
 8003028:	b086      	sub	sp, #24
 800302a:	af00      	add	r7, sp, #0
 800302c:	60f8      	str	r0, [r7, #12]
 800302e:	60b9      	str	r1, [r7, #8]
 8003030:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003032:	2300      	movs	r3, #0
 8003034:	617b      	str	r3, [r7, #20]
 8003036:	e009      	b.n	800304c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	60ba      	str	r2, [r7, #8]
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fe f857 	bl	80010f4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	3301      	adds	r3, #1
 800304a:	617b      	str	r3, [r7, #20]
 800304c:	697a      	ldr	r2, [r7, #20]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	429a      	cmp	r2, r3
 8003052:	dbf1      	blt.n	8003038 <_write+0x12>
  }
  return len;
 8003054:	687b      	ldr	r3, [r7, #4]
}
 8003056:	4618      	mov	r0, r3
 8003058:	3718      	adds	r7, #24
 800305a:	46bd      	mov	sp, r7
 800305c:	bd80      	pop	{r7, pc}

0800305e <_close>:

int _close(int file)
{
 800305e:	b480      	push	{r7}
 8003060:	b083      	sub	sp, #12
 8003062:	af00      	add	r7, sp, #0
 8003064:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003066:	f04f 33ff 	mov.w	r3, #4294967295
}
 800306a:	4618      	mov	r0, r3
 800306c:	370c      	adds	r7, #12
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003076:	b480      	push	{r7}
 8003078:	b083      	sub	sp, #12
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
 800307e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003086:	605a      	str	r2, [r3, #4]
  return 0;
 8003088:	2300      	movs	r3, #0
}
 800308a:	4618      	mov	r0, r3
 800308c:	370c      	adds	r7, #12
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <_isatty>:

int _isatty(int file)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800309e:	2301      	movs	r3, #1
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	370c      	adds	r7, #12
 80030a4:	46bd      	mov	sp, r7
 80030a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030aa:	4770      	bx	lr

080030ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b085      	sub	sp, #20
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3714      	adds	r7, #20
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
	...

080030c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030d0:	4a14      	ldr	r2, [pc, #80]	; (8003124 <_sbrk+0x5c>)
 80030d2:	4b15      	ldr	r3, [pc, #84]	; (8003128 <_sbrk+0x60>)
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80030d8:	697b      	ldr	r3, [r7, #20]
 80030da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80030dc:	4b13      	ldr	r3, [pc, #76]	; (800312c <_sbrk+0x64>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d102      	bne.n	80030ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80030e4:	4b11      	ldr	r3, [pc, #68]	; (800312c <_sbrk+0x64>)
 80030e6:	4a12      	ldr	r2, [pc, #72]	; (8003130 <_sbrk+0x68>)
 80030e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80030ea:	4b10      	ldr	r3, [pc, #64]	; (800312c <_sbrk+0x64>)
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4413      	add	r3, r2
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d207      	bcs.n	8003108 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80030f8:	f005 f978 	bl	80083ec <__errno>
 80030fc:	4603      	mov	r3, r0
 80030fe:	220c      	movs	r2, #12
 8003100:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003102:	f04f 33ff 	mov.w	r3, #4294967295
 8003106:	e009      	b.n	800311c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <_sbrk+0x64>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800310e:	4b07      	ldr	r3, [pc, #28]	; (800312c <_sbrk+0x64>)
 8003110:	681a      	ldr	r2, [r3, #0]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4413      	add	r3, r2
 8003116:	4a05      	ldr	r2, [pc, #20]	; (800312c <_sbrk+0x64>)
 8003118:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800311a:	68fb      	ldr	r3, [r7, #12]
}
 800311c:	4618      	mov	r0, r3
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20020000 	.word	0x20020000
 8003128:	00000400 	.word	0x00000400
 800312c:	20000690 	.word	0x20000690
 8003130:	200007e8 	.word	0x200007e8

08003134 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003138:	4b06      	ldr	r3, [pc, #24]	; (8003154 <SystemInit+0x20>)
 800313a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313e:	4a05      	ldr	r2, [pc, #20]	; (8003154 <SystemInit+0x20>)
 8003140:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003144:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003148:	bf00      	nop
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
 8003152:	bf00      	nop
 8003154:	e000ed00 	.word	0xe000ed00

08003158 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003158:	b480      	push	{r7}
 800315a:	b087      	sub	sp, #28
 800315c:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 800315e:	2300      	movs	r3, #0
 8003160:	613b      	str	r3, [r7, #16]
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	2302      	movs	r3, #2
 8003168:	60fb      	str	r3, [r7, #12]
 800316a:	2300      	movs	r3, #0
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	2302      	movs	r3, #2
 8003170:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8003172:	4b34      	ldr	r3, [pc, #208]	; (8003244 <SystemCoreClockUpdate+0xec>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
 800317a:	613b      	str	r3, [r7, #16]

  switch (tmp)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b08      	cmp	r3, #8
 8003180:	d011      	beq.n	80031a6 <SystemCoreClockUpdate+0x4e>
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	2b08      	cmp	r3, #8
 8003186:	d844      	bhi.n	8003212 <SystemCoreClockUpdate+0xba>
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d003      	beq.n	8003196 <SystemCoreClockUpdate+0x3e>
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b04      	cmp	r3, #4
 8003192:	d004      	beq.n	800319e <SystemCoreClockUpdate+0x46>
 8003194:	e03d      	b.n	8003212 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8003196:	4b2c      	ldr	r3, [pc, #176]	; (8003248 <SystemCoreClockUpdate+0xf0>)
 8003198:	4a2c      	ldr	r2, [pc, #176]	; (800324c <SystemCoreClockUpdate+0xf4>)
 800319a:	601a      	str	r2, [r3, #0]
      break;
 800319c:	e03d      	b.n	800321a <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 800319e:	4b2a      	ldr	r3, [pc, #168]	; (8003248 <SystemCoreClockUpdate+0xf0>)
 80031a0:	4a2b      	ldr	r2, [pc, #172]	; (8003250 <SystemCoreClockUpdate+0xf8>)
 80031a2:	601a      	str	r2, [r3, #0]
      break;
 80031a4:	e039      	b.n	800321a <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80031a6:	4b27      	ldr	r3, [pc, #156]	; (8003244 <SystemCoreClockUpdate+0xec>)
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	0d9b      	lsrs	r3, r3, #22
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031b2:	4b24      	ldr	r3, [pc, #144]	; (8003244 <SystemCoreClockUpdate+0xec>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ba:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00c      	beq.n	80031dc <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031c2:	4a23      	ldr	r2, [pc, #140]	; (8003250 <SystemCoreClockUpdate+0xf8>)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ca:	4a1e      	ldr	r2, [pc, #120]	; (8003244 <SystemCoreClockUpdate+0xec>)
 80031cc:	6852      	ldr	r2, [r2, #4]
 80031ce:	0992      	lsrs	r2, r2, #6
 80031d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031d4:	fb02 f303 	mul.w	r3, r2, r3
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	e00b      	b.n	80031f4 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031dc:	4a1b      	ldr	r2, [pc, #108]	; (800324c <SystemCoreClockUpdate+0xf4>)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e4:	4a17      	ldr	r2, [pc, #92]	; (8003244 <SystemCoreClockUpdate+0xec>)
 80031e6:	6852      	ldr	r2, [r2, #4]
 80031e8:	0992      	lsrs	r2, r2, #6
 80031ea:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031ee:	fb02 f303 	mul.w	r3, r2, r3
 80031f2:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 80031f4:	4b13      	ldr	r3, [pc, #76]	; (8003244 <SystemCoreClockUpdate+0xec>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	0c1b      	lsrs	r3, r3, #16
 80031fa:	f003 0303 	and.w	r3, r3, #3
 80031fe:	3301      	adds	r3, #1
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003204:	697a      	ldr	r2, [r7, #20]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	4a0e      	ldr	r2, [pc, #56]	; (8003248 <SystemCoreClockUpdate+0xf0>)
 800320e:	6013      	str	r3, [r2, #0]
      break;
 8003210:	e003      	b.n	800321a <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8003212:	4b0d      	ldr	r3, [pc, #52]	; (8003248 <SystemCoreClockUpdate+0xf0>)
 8003214:	4a0d      	ldr	r2, [pc, #52]	; (800324c <SystemCoreClockUpdate+0xf4>)
 8003216:	601a      	str	r2, [r3, #0]
      break;
 8003218:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800321a:	4b0a      	ldr	r3, [pc, #40]	; (8003244 <SystemCoreClockUpdate+0xec>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	091b      	lsrs	r3, r3, #4
 8003220:	f003 030f 	and.w	r3, r3, #15
 8003224:	4a0b      	ldr	r2, [pc, #44]	; (8003254 <SystemCoreClockUpdate+0xfc>)
 8003226:	5cd3      	ldrb	r3, [r2, r3]
 8003228:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800322a:	4b07      	ldr	r3, [pc, #28]	; (8003248 <SystemCoreClockUpdate+0xf0>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	fa22 f303 	lsr.w	r3, r2, r3
 8003234:	4a04      	ldr	r2, [pc, #16]	; (8003248 <SystemCoreClockUpdate+0xf0>)
 8003236:	6013      	str	r3, [r2, #0]
}
 8003238:	bf00      	nop
 800323a:	371c      	adds	r7, #28
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40023800 	.word	0x40023800
 8003248:	20000038 	.word	0x20000038
 800324c:	00f42400 	.word	0x00f42400
 8003250:	007a1200 	.word	0x007a1200
 8003254:	0800c300 	.word	0x0800c300

08003258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8003258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003290 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800325c:	f7ff ff6a 	bl	8003134 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003260:	480c      	ldr	r0, [pc, #48]	; (8003294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003262:	490d      	ldr	r1, [pc, #52]	; (8003298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003264:	4a0d      	ldr	r2, [pc, #52]	; (800329c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003268:	e002      	b.n	8003270 <LoopCopyDataInit>

0800326a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800326a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800326c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800326e:	3304      	adds	r3, #4

08003270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003274:	d3f9      	bcc.n	800326a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003276:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003278:	4c0a      	ldr	r4, [pc, #40]	; (80032a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800327a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800327c:	e001      	b.n	8003282 <LoopFillZerobss>

0800327e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800327e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003280:	3204      	adds	r2, #4

08003282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003284:	d3fb      	bcc.n	800327e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003286:	f005 f8b7 	bl	80083f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800328a:	f7fe f80d 	bl	80012a8 <main>
  bx  lr    
 800328e:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 8003290:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003298:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 800329c:	0800c930 	.word	0x0800c930
  ldr r2, =_sbss
 80032a0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80032a4:	200007e4 	.word	0x200007e4

080032a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032a8:	e7fe      	b.n	80032a8 <ADC_IRQHandler>
	...

080032ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032b0:	4b0e      	ldr	r3, [pc, #56]	; (80032ec <HAL_Init+0x40>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a0d      	ldr	r2, [pc, #52]	; (80032ec <HAL_Init+0x40>)
 80032b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032bc:	4b0b      	ldr	r3, [pc, #44]	; (80032ec <HAL_Init+0x40>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a0a      	ldr	r2, [pc, #40]	; (80032ec <HAL_Init+0x40>)
 80032c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032c8:	4b08      	ldr	r3, [pc, #32]	; (80032ec <HAL_Init+0x40>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a07      	ldr	r2, [pc, #28]	; (80032ec <HAL_Init+0x40>)
 80032ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d4:	2003      	movs	r0, #3
 80032d6:	f000 f92b 	bl	8003530 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032da:	2000      	movs	r0, #0
 80032dc:	f000 f808 	bl	80032f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e0:	f7ff fbca 	bl	8002a78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	40023c00 	.word	0x40023c00

080032f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032f8:	4b12      	ldr	r3, [pc, #72]	; (8003344 <HAL_InitTick+0x54>)
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	4b12      	ldr	r3, [pc, #72]	; (8003348 <HAL_InitTick+0x58>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	4619      	mov	r1, r3
 8003302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003306:	fbb3 f3f1 	udiv	r3, r3, r1
 800330a:	fbb2 f3f3 	udiv	r3, r2, r3
 800330e:	4618      	mov	r0, r3
 8003310:	f000 f943 	bl	800359a <HAL_SYSTICK_Config>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e00e      	b.n	800333c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b0f      	cmp	r3, #15
 8003322:	d80a      	bhi.n	800333a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003324:	2200      	movs	r2, #0
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	f04f 30ff 	mov.w	r0, #4294967295
 800332c:	f000 f90b 	bl	8003546 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003330:	4a06      	ldr	r2, [pc, #24]	; (800334c <HAL_InitTick+0x5c>)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
 8003338:	e000      	b.n	800333c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
}
 800333c:	4618      	mov	r0, r3
 800333e:	3708      	adds	r7, #8
 8003340:	46bd      	mov	sp, r7
 8003342:	bd80      	pop	{r7, pc}
 8003344:	20000038 	.word	0x20000038
 8003348:	20000040 	.word	0x20000040
 800334c:	2000003c 	.word	0x2000003c

08003350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003354:	4b06      	ldr	r3, [pc, #24]	; (8003370 <HAL_IncTick+0x20>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	461a      	mov	r2, r3
 800335a:	4b06      	ldr	r3, [pc, #24]	; (8003374 <HAL_IncTick+0x24>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4413      	add	r3, r2
 8003360:	4a04      	ldr	r2, [pc, #16]	; (8003374 <HAL_IncTick+0x24>)
 8003362:	6013      	str	r3, [r2, #0]
}
 8003364:	bf00      	nop
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	20000040 	.word	0x20000040
 8003374:	20000694 	.word	0x20000694

08003378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return uwTick;
 800337c:	4b03      	ldr	r3, [pc, #12]	; (800338c <HAL_GetTick+0x14>)
 800337e:	681b      	ldr	r3, [r3, #0]
}
 8003380:	4618      	mov	r0, r3
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	20000694 	.word	0x20000694

08003390 <__NVIC_SetPriorityGrouping>:
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <__NVIC_SetPriorityGrouping+0x44>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ac:	4013      	ands	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c2:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	60d3      	str	r3, [r2, #12]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_GetPriorityGrouping>:
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <__NVIC_GetPriorityGrouping+0x18>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	f003 0307 	and.w	r3, r3, #7
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <__NVIC_EnableIRQ>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	2b00      	cmp	r3, #0
 8003404:	db0b      	blt.n	800341e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	f003 021f 	and.w	r2, r3, #31
 800340c:	4907      	ldr	r1, [pc, #28]	; (800342c <__NVIC_EnableIRQ+0x38>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	2001      	movs	r0, #1
 8003416:	fa00 f202 	lsl.w	r2, r0, r2
 800341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000e100 	.word	0xe000e100

08003430 <__NVIC_SetPriority>:
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	2b00      	cmp	r3, #0
 8003442:	db0a      	blt.n	800345a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	490c      	ldr	r1, [pc, #48]	; (800347c <__NVIC_SetPriority+0x4c>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	0112      	lsls	r2, r2, #4
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	440b      	add	r3, r1
 8003454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003458:	e00a      	b.n	8003470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4908      	ldr	r1, [pc, #32]	; (8003480 <__NVIC_SetPriority+0x50>)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3b04      	subs	r3, #4
 8003468:	0112      	lsls	r2, r2, #4
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	440b      	add	r3, r1
 800346e:	761a      	strb	r2, [r3, #24]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000e100 	.word	0xe000e100
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <NVIC_EncodePriority>:
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f1c3 0307 	rsb	r3, r3, #7
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf28      	it	cs
 80034a2:	2304      	movcs	r3, #4
 80034a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d902      	bls.n	80034b4 <NVIC_EncodePriority+0x30>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3b03      	subs	r3, #3
 80034b2:	e000      	b.n	80034b6 <NVIC_EncodePriority+0x32>
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	401a      	ands	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034cc:	f04f 31ff 	mov.w	r1, #4294967295
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	43d9      	mvns	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	4313      	orrs	r3, r2
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr
	...

080034ec <SysTick_Config>:
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3b01      	subs	r3, #1
 80034f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034fc:	d301      	bcc.n	8003502 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80034fe:	2301      	movs	r3, #1
 8003500:	e00f      	b.n	8003522 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003502:	4a0a      	ldr	r2, [pc, #40]	; (800352c <SysTick_Config+0x40>)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	3b01      	subs	r3, #1
 8003508:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800350a:	210f      	movs	r1, #15
 800350c:	f04f 30ff 	mov.w	r0, #4294967295
 8003510:	f7ff ff8e 	bl	8003430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003514:	4b05      	ldr	r3, [pc, #20]	; (800352c <SysTick_Config+0x40>)
 8003516:	2200      	movs	r2, #0
 8003518:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800351a:	4b04      	ldr	r3, [pc, #16]	; (800352c <SysTick_Config+0x40>)
 800351c:	2207      	movs	r2, #7
 800351e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	e000e010 	.word	0xe000e010

08003530 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f7ff ff29 	bl	8003390 <__NVIC_SetPriorityGrouping>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003546:	b580      	push	{r7, lr}
 8003548:	b086      	sub	sp, #24
 800354a:	af00      	add	r7, sp, #0
 800354c:	4603      	mov	r3, r0
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	607a      	str	r2, [r7, #4]
 8003552:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003558:	f7ff ff3e 	bl	80033d8 <__NVIC_GetPriorityGrouping>
 800355c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	68b9      	ldr	r1, [r7, #8]
 8003562:	6978      	ldr	r0, [r7, #20]
 8003564:	f7ff ff8e 	bl	8003484 <NVIC_EncodePriority>
 8003568:	4602      	mov	r2, r0
 800356a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800356e:	4611      	mov	r1, r2
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff ff5d 	bl	8003430 <__NVIC_SetPriority>
}
 8003576:	bf00      	nop
 8003578:	3718      	adds	r7, #24
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b082      	sub	sp, #8
 8003582:	af00      	add	r7, sp, #0
 8003584:	4603      	mov	r3, r0
 8003586:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003588:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff31 	bl	80033f4 <__NVIC_EnableIRQ>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f7ff ffa2 	bl	80034ec <SysTick_Config>
 80035a8:	4603      	mov	r3, r0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b084      	sub	sp, #16
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035c0:	f7ff feda 	bl	8003378 <HAL_GetTick>
 80035c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d008      	beq.n	80035e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2280      	movs	r2, #128	; 0x80
 80035d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e052      	b.n	800368a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f022 0216 	bic.w	r2, r2, #22
 80035f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695a      	ldr	r2, [r3, #20]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003602:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003608:	2b00      	cmp	r3, #0
 800360a:	d103      	bne.n	8003614 <HAL_DMA_Abort+0x62>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003610:	2b00      	cmp	r3, #0
 8003612:	d007      	beq.n	8003624 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0208 	bic.w	r2, r2, #8
 8003622:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f022 0201 	bic.w	r2, r2, #1
 8003632:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003634:	e013      	b.n	800365e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003636:	f7ff fe9f 	bl	8003378 <HAL_GetTick>
 800363a:	4602      	mov	r2, r0
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	1ad3      	subs	r3, r2, r3
 8003640:	2b05      	cmp	r3, #5
 8003642:	d90c      	bls.n	800365e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2220      	movs	r2, #32
 8003648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2203      	movs	r2, #3
 800364e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e015      	b.n	800368a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e4      	bne.n	8003636 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003670:	223f      	movs	r2, #63	; 0x3f
 8003672:	409a      	lsls	r2, r3
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3710      	adds	r7, #16
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}

08003692 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d004      	beq.n	80036b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e00c      	b.n	80036ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2205      	movs	r2, #5
 80036b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f022 0201 	bic.w	r2, r2, #1
 80036c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	370c      	adds	r7, #12
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
	...

080036d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80036d8:	b480      	push	{r7}
 80036da:	b089      	sub	sp, #36	; 0x24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80036e6:	2300      	movs	r3, #0
 80036e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ee:	2300      	movs	r3, #0
 80036f0:	61fb      	str	r3, [r7, #28]
 80036f2:	e165      	b.n	80039c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80036f4:	2201      	movs	r2, #1
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	fa02 f303 	lsl.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	697a      	ldr	r2, [r7, #20]
 8003704:	4013      	ands	r3, r2
 8003706:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003708:	693a      	ldr	r2, [r7, #16]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	f040 8154 	bne.w	80039ba <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b01      	cmp	r3, #1
 800371c:	d005      	beq.n	800372a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003726:	2b02      	cmp	r3, #2
 8003728:	d130      	bne.n	800378c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003730:	69fb      	ldr	r3, [r7, #28]
 8003732:	005b      	lsls	r3, r3, #1
 8003734:	2203      	movs	r2, #3
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43db      	mvns	r3, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	4013      	ands	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	68da      	ldr	r2, [r3, #12]
 8003746:	69fb      	ldr	r3, [r7, #28]
 8003748:	005b      	lsls	r3, r3, #1
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	69ba      	ldr	r2, [r7, #24]
 8003750:	4313      	orrs	r3, r2
 8003752:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003760:	2201      	movs	r2, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43db      	mvns	r3, r3
 800376a:	69ba      	ldr	r2, [r7, #24]
 800376c:	4013      	ands	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	091b      	lsrs	r3, r3, #4
 8003776:	f003 0201 	and.w	r2, r3, #1
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	fa02 f303 	lsl.w	r3, r2, r3
 8003780:	69ba      	ldr	r2, [r7, #24]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	69ba      	ldr	r2, [r7, #24]
 800378a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f003 0303 	and.w	r3, r3, #3
 8003794:	2b03      	cmp	r3, #3
 8003796:	d017      	beq.n	80037c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	2203      	movs	r2, #3
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	43db      	mvns	r3, r3
 80037aa:	69ba      	ldr	r2, [r7, #24]
 80037ac:	4013      	ands	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d123      	bne.n	800381c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	08da      	lsrs	r2, r3, #3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	3208      	adds	r2, #8
 80037dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f003 0307 	and.w	r3, r3, #7
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	220f      	movs	r2, #15
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	69ba      	ldr	r2, [r7, #24]
 80037f4:	4013      	ands	r3, r2
 80037f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	691a      	ldr	r2, [r3, #16]
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	69ba      	ldr	r2, [r7, #24]
 800380a:	4313      	orrs	r3, r2
 800380c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	08da      	lsrs	r2, r3, #3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	3208      	adds	r2, #8
 8003816:	69b9      	ldr	r1, [r7, #24]
 8003818:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003822:	69fb      	ldr	r3, [r7, #28]
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	2203      	movs	r2, #3
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f003 0203 	and.w	r2, r3, #3
 800383c:	69fb      	ldr	r3, [r7, #28]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69ba      	ldr	r2, [r7, #24]
 800384e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80ae 	beq.w	80039ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800385e:	2300      	movs	r3, #0
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	4b5d      	ldr	r3, [pc, #372]	; (80039d8 <HAL_GPIO_Init+0x300>)
 8003864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003866:	4a5c      	ldr	r2, [pc, #368]	; (80039d8 <HAL_GPIO_Init+0x300>)
 8003868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800386c:	6453      	str	r3, [r2, #68]	; 0x44
 800386e:	4b5a      	ldr	r3, [pc, #360]	; (80039d8 <HAL_GPIO_Init+0x300>)
 8003870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800387a:	4a58      	ldr	r2, [pc, #352]	; (80039dc <HAL_GPIO_Init+0x304>)
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	089b      	lsrs	r3, r3, #2
 8003880:	3302      	adds	r3, #2
 8003882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003886:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003888:	69fb      	ldr	r3, [r7, #28]
 800388a:	f003 0303 	and.w	r3, r3, #3
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	220f      	movs	r2, #15
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43db      	mvns	r3, r3
 8003898:	69ba      	ldr	r2, [r7, #24]
 800389a:	4013      	ands	r3, r2
 800389c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	4a4f      	ldr	r2, [pc, #316]	; (80039e0 <HAL_GPIO_Init+0x308>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d025      	beq.n	80038f2 <HAL_GPIO_Init+0x21a>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a4e      	ldr	r2, [pc, #312]	; (80039e4 <HAL_GPIO_Init+0x30c>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d01f      	beq.n	80038ee <HAL_GPIO_Init+0x216>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a4d      	ldr	r2, [pc, #308]	; (80039e8 <HAL_GPIO_Init+0x310>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d019      	beq.n	80038ea <HAL_GPIO_Init+0x212>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	4a4c      	ldr	r2, [pc, #304]	; (80039ec <HAL_GPIO_Init+0x314>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d013      	beq.n	80038e6 <HAL_GPIO_Init+0x20e>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	4a4b      	ldr	r2, [pc, #300]	; (80039f0 <HAL_GPIO_Init+0x318>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d00d      	beq.n	80038e2 <HAL_GPIO_Init+0x20a>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4a      	ldr	r2, [pc, #296]	; (80039f4 <HAL_GPIO_Init+0x31c>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d007      	beq.n	80038de <HAL_GPIO_Init+0x206>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a49      	ldr	r2, [pc, #292]	; (80039f8 <HAL_GPIO_Init+0x320>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d101      	bne.n	80038da <HAL_GPIO_Init+0x202>
 80038d6:	2306      	movs	r3, #6
 80038d8:	e00c      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038da:	2307      	movs	r3, #7
 80038dc:	e00a      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038de:	2305      	movs	r3, #5
 80038e0:	e008      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038e2:	2304      	movs	r3, #4
 80038e4:	e006      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038e6:	2303      	movs	r3, #3
 80038e8:	e004      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038ea:	2302      	movs	r3, #2
 80038ec:	e002      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038ee:	2301      	movs	r3, #1
 80038f0:	e000      	b.n	80038f4 <HAL_GPIO_Init+0x21c>
 80038f2:	2300      	movs	r3, #0
 80038f4:	69fa      	ldr	r2, [r7, #28]
 80038f6:	f002 0203 	and.w	r2, r2, #3
 80038fa:	0092      	lsls	r2, r2, #2
 80038fc:	4093      	lsls	r3, r2
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4313      	orrs	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003904:	4935      	ldr	r1, [pc, #212]	; (80039dc <HAL_GPIO_Init+0x304>)
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	089b      	lsrs	r3, r3, #2
 800390a:	3302      	adds	r3, #2
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003912:	4b3a      	ldr	r3, [pc, #232]	; (80039fc <HAL_GPIO_Init+0x324>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d003      	beq.n	8003936 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003936:	4a31      	ldr	r2, [pc, #196]	; (80039fc <HAL_GPIO_Init+0x324>)
 8003938:	69bb      	ldr	r3, [r7, #24]
 800393a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800393c:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <HAL_GPIO_Init+0x324>)
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d003      	beq.n	8003960 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003958:	69ba      	ldr	r2, [r7, #24]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	4313      	orrs	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003960:	4a26      	ldr	r2, [pc, #152]	; (80039fc <HAL_GPIO_Init+0x324>)
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003966:	4b25      	ldr	r3, [pc, #148]	; (80039fc <HAL_GPIO_Init+0x324>)
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	43db      	mvns	r3, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4013      	ands	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d003      	beq.n	800398a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	4313      	orrs	r3, r2
 8003988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800398a:	4a1c      	ldr	r2, [pc, #112]	; (80039fc <HAL_GPIO_Init+0x324>)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003990:	4b1a      	ldr	r3, [pc, #104]	; (80039fc <HAL_GPIO_Init+0x324>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	43db      	mvns	r3, r3
 800399a:	69ba      	ldr	r2, [r7, #24]
 800399c:	4013      	ands	r3, r2
 800399e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d003      	beq.n	80039b4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	4313      	orrs	r3, r2
 80039b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039b4:	4a11      	ldr	r2, [pc, #68]	; (80039fc <HAL_GPIO_Init+0x324>)
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	3301      	adds	r3, #1
 80039be:	61fb      	str	r3, [r7, #28]
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b0f      	cmp	r3, #15
 80039c4:	f67f ae96 	bls.w	80036f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039c8:	bf00      	nop
 80039ca:	bf00      	nop
 80039cc:	3724      	adds	r7, #36	; 0x24
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40013800 	.word	0x40013800
 80039e0:	40020000 	.word	0x40020000
 80039e4:	40020400 	.word	0x40020400
 80039e8:	40020800 	.word	0x40020800
 80039ec:	40020c00 	.word	0x40020c00
 80039f0:	40021000 	.word	0x40021000
 80039f4:	40021400 	.word	0x40021400
 80039f8:	40021800 	.word	0x40021800
 80039fc:	40013c00 	.word	0x40013c00

08003a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a00:	b480      	push	{r7}
 8003a02:	b085      	sub	sp, #20
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	460b      	mov	r3, r1
 8003a0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691a      	ldr	r2, [r3, #16]
 8003a10:	887b      	ldrh	r3, [r7, #2]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d002      	beq.n	8003a1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	73fb      	strb	r3, [r7, #15]
 8003a1c:	e001      	b.n	8003a22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	460b      	mov	r3, r1
 8003a3a:	807b      	strh	r3, [r7, #2]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a40:	787b      	ldrb	r3, [r7, #1]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a46:	887a      	ldrh	r2, [r7, #2]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a4c:	e003      	b.n	8003a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a4e:	887b      	ldrh	r3, [r7, #2]
 8003a50:	041a      	lsls	r2, r3, #16
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	619a      	str	r2, [r3, #24]
}
 8003a56:	bf00      	nop
 8003a58:	370c      	adds	r7, #12
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a70:	695a      	ldr	r2, [r3, #20]
 8003a72:	88fb      	ldrh	r3, [r7, #6]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a7c:	88fb      	ldrh	r3, [r7, #6]
 8003a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a80:	88fb      	ldrh	r3, [r7, #6]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe fc1a 	bl	80022bc <HAL_GPIO_EXTI_Callback>
  }
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	40013c00 	.word	0x40013c00

08003a94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d101      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e0cc      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa8:	4b68      	ldr	r3, [pc, #416]	; (8003c4c <HAL_RCC_ClockConfig+0x1b8>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f003 030f 	and.w	r3, r3, #15
 8003ab0:	683a      	ldr	r2, [r7, #0]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d90c      	bls.n	8003ad0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab6:	4b65      	ldr	r3, [pc, #404]	; (8003c4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ab8:	683a      	ldr	r2, [r7, #0]
 8003aba:	b2d2      	uxtb	r2, r2
 8003abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003abe:	4b63      	ldr	r3, [pc, #396]	; (8003c4c <HAL_RCC_ClockConfig+0x1b8>)
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	683a      	ldr	r2, [r7, #0]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d001      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0b8      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d020      	beq.n	8003b1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae8:	4b59      	ldr	r3, [pc, #356]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	4a58      	ldr	r2, [pc, #352]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003aee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003af2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b00:	4b53      	ldr	r3, [pc, #332]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4a52      	ldr	r2, [pc, #328]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b0c:	4b50      	ldr	r3, [pc, #320]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	494d      	ldr	r1, [pc, #308]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d044      	beq.n	8003bb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	2b01      	cmp	r3, #1
 8003b30:	d107      	bne.n	8003b42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b32:	4b47      	ldr	r3, [pc, #284]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d119      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e07f      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d003      	beq.n	8003b52 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4e:	2b03      	cmp	r3, #3
 8003b50:	d107      	bne.n	8003b62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b52:	4b3f      	ldr	r3, [pc, #252]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d109      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e06f      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b62:	4b3b      	ldr	r3, [pc, #236]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 0302 	and.w	r3, r3, #2
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e067      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b72:	4b37      	ldr	r3, [pc, #220]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f023 0203 	bic.w	r2, r3, #3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	4934      	ldr	r1, [pc, #208]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b84:	f7ff fbf8 	bl	8003378 <HAL_GetTick>
 8003b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b8a:	e00a      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b8c:	f7ff fbf4 	bl	8003378 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e04f      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f003 020c 	and.w	r2, r3, #12
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d1eb      	bne.n	8003b8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b25      	ldr	r3, [pc, #148]	; (8003c4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 030f 	and.w	r3, r3, #15
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d20c      	bcs.n	8003bdc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b22      	ldr	r3, [pc, #136]	; (8003c4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bca:	4b20      	ldr	r3, [pc, #128]	; (8003c4c <HAL_RCC_ClockConfig+0x1b8>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 030f 	and.w	r3, r3, #15
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d001      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	e032      	b.n	8003c42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 0304 	and.w	r3, r3, #4
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d008      	beq.n	8003bfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	4916      	ldr	r1, [pc, #88]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 0308 	and.w	r3, r3, #8
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d009      	beq.n	8003c1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c06:	4b12      	ldr	r3, [pc, #72]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	490e      	ldr	r1, [pc, #56]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	4313      	orrs	r3, r2
 8003c18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c1a:	f000 f855 	bl	8003cc8 <HAL_RCC_GetSysClockFreq>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b0b      	ldr	r3, [pc, #44]	; (8003c50 <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	689b      	ldr	r3, [r3, #8]
 8003c24:	091b      	lsrs	r3, r3, #4
 8003c26:	f003 030f 	and.w	r3, r3, #15
 8003c2a:	490a      	ldr	r1, [pc, #40]	; (8003c54 <HAL_RCC_ClockConfig+0x1c0>)
 8003c2c:	5ccb      	ldrb	r3, [r1, r3]
 8003c2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c32:	4a09      	ldr	r2, [pc, #36]	; (8003c58 <HAL_RCC_ClockConfig+0x1c4>)
 8003c34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c36:	4b09      	ldr	r3, [pc, #36]	; (8003c5c <HAL_RCC_ClockConfig+0x1c8>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7ff fb58 	bl	80032f0 <HAL_InitTick>

  return HAL_OK;
 8003c40:	2300      	movs	r3, #0
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40023c00 	.word	0x40023c00
 8003c50:	40023800 	.word	0x40023800
 8003c54:	0800c300 	.word	0x0800c300
 8003c58:	20000038 	.word	0x20000038
 8003c5c:	2000003c 	.word	0x2000003c

08003c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c64:	4b03      	ldr	r3, [pc, #12]	; (8003c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c66:	681b      	ldr	r3, [r3, #0]
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	20000038 	.word	0x20000038

08003c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c7c:	f7ff fff0 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003c80:	4602      	mov	r2, r0
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0a9b      	lsrs	r3, r3, #10
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	4903      	ldr	r1, [pc, #12]	; (8003c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c8e:	5ccb      	ldrb	r3, [r1, r3]
 8003c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	0800c310 	.word	0x0800c310

08003ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ca4:	f7ff ffdc 	bl	8003c60 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	0b5b      	lsrs	r3, r3, #13
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4903      	ldr	r1, [pc, #12]	; (8003cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	0800c310 	.word	0x0800c310

08003cc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ccc:	b0ae      	sub	sp, #184	; 0xb8
 8003cce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cee:	4bcb      	ldr	r3, [pc, #812]	; (800401c <HAL_RCC_GetSysClockFreq+0x354>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b0c      	cmp	r3, #12
 8003cf8:	f200 8206 	bhi.w	8004108 <HAL_RCC_GetSysClockFreq+0x440>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d39 	.word	0x08003d39
 8003d08:	08004109 	.word	0x08004109
 8003d0c:	08004109 	.word	0x08004109
 8003d10:	08004109 	.word	0x08004109
 8003d14:	08003d41 	.word	0x08003d41
 8003d18:	08004109 	.word	0x08004109
 8003d1c:	08004109 	.word	0x08004109
 8003d20:	08004109 	.word	0x08004109
 8003d24:	08003d49 	.word	0x08003d49
 8003d28:	08004109 	.word	0x08004109
 8003d2c:	08004109 	.word	0x08004109
 8003d30:	08004109 	.word	0x08004109
 8003d34:	08003f39 	.word	0x08003f39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d38:	4bb9      	ldr	r3, [pc, #740]	; (8004020 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d3e:	e1e7      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d40:	4bb8      	ldr	r3, [pc, #736]	; (8004024 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d46:	e1e3      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d48:	4bb4      	ldr	r3, [pc, #720]	; (800401c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d54:	4bb1      	ldr	r3, [pc, #708]	; (800401c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d071      	beq.n	8003e44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d60:	4bae      	ldr	r3, [pc, #696]	; (800401c <HAL_RCC_GetSysClockFreq+0x354>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	099b      	lsrs	r3, r3, #6
 8003d66:	2200      	movs	r2, #0
 8003d68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d6c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003d74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d78:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d86:	4622      	mov	r2, r4
 8003d88:	462b      	mov	r3, r5
 8003d8a:	f04f 0000 	mov.w	r0, #0
 8003d8e:	f04f 0100 	mov.w	r1, #0
 8003d92:	0159      	lsls	r1, r3, #5
 8003d94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d98:	0150      	lsls	r0, r2, #5
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4621      	mov	r1, r4
 8003da0:	1a51      	subs	r1, r2, r1
 8003da2:	6439      	str	r1, [r7, #64]	; 0x40
 8003da4:	4629      	mov	r1, r5
 8003da6:	eb63 0301 	sbc.w	r3, r3, r1
 8003daa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003db8:	4649      	mov	r1, r9
 8003dba:	018b      	lsls	r3, r1, #6
 8003dbc:	4641      	mov	r1, r8
 8003dbe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dc2:	4641      	mov	r1, r8
 8003dc4:	018a      	lsls	r2, r1, #6
 8003dc6:	4641      	mov	r1, r8
 8003dc8:	1a51      	subs	r1, r2, r1
 8003dca:	63b9      	str	r1, [r7, #56]	; 0x38
 8003dcc:	4649      	mov	r1, r9
 8003dce:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003de0:	4649      	mov	r1, r9
 8003de2:	00cb      	lsls	r3, r1, #3
 8003de4:	4641      	mov	r1, r8
 8003de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dea:	4641      	mov	r1, r8
 8003dec:	00ca      	lsls	r2, r1, #3
 8003dee:	4610      	mov	r0, r2
 8003df0:	4619      	mov	r1, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	4622      	mov	r2, r4
 8003df6:	189b      	adds	r3, r3, r2
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dfa:	462b      	mov	r3, r5
 8003dfc:	460a      	mov	r2, r1
 8003dfe:	eb42 0303 	adc.w	r3, r2, r3
 8003e02:	637b      	str	r3, [r7, #52]	; 0x34
 8003e04:	f04f 0200 	mov.w	r2, #0
 8003e08:	f04f 0300 	mov.w	r3, #0
 8003e0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e10:	4629      	mov	r1, r5
 8003e12:	024b      	lsls	r3, r1, #9
 8003e14:	4621      	mov	r1, r4
 8003e16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	024a      	lsls	r2, r1, #9
 8003e1e:	4610      	mov	r0, r2
 8003e20:	4619      	mov	r1, r3
 8003e22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e26:	2200      	movs	r2, #0
 8003e28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e34:	f7fc ff48 	bl	8000cc8 <__aeabi_uldivmod>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e42:	e067      	b.n	8003f14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e44:	4b75      	ldr	r3, [pc, #468]	; (800401c <HAL_RCC_GetSysClockFreq+0x354>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	099b      	lsrs	r3, r3, #6
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e50:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e5c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e5e:	2300      	movs	r3, #0
 8003e60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003e66:	4622      	mov	r2, r4
 8003e68:	462b      	mov	r3, r5
 8003e6a:	f04f 0000 	mov.w	r0, #0
 8003e6e:	f04f 0100 	mov.w	r1, #0
 8003e72:	0159      	lsls	r1, r3, #5
 8003e74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e78:	0150      	lsls	r0, r2, #5
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4621      	mov	r1, r4
 8003e80:	1a51      	subs	r1, r2, r1
 8003e82:	62b9      	str	r1, [r7, #40]	; 0x28
 8003e84:	4629      	mov	r1, r5
 8003e86:	eb63 0301 	sbc.w	r3, r3, r1
 8003e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003e98:	4649      	mov	r1, r9
 8003e9a:	018b      	lsls	r3, r1, #6
 8003e9c:	4641      	mov	r1, r8
 8003e9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ea2:	4641      	mov	r1, r8
 8003ea4:	018a      	lsls	r2, r1, #6
 8003ea6:	4641      	mov	r1, r8
 8003ea8:	ebb2 0a01 	subs.w	sl, r2, r1
 8003eac:	4649      	mov	r1, r9
 8003eae:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	f04f 0300 	mov.w	r3, #0
 8003eba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ebe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ec2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec6:	4692      	mov	sl, r2
 8003ec8:	469b      	mov	fp, r3
 8003eca:	4623      	mov	r3, r4
 8003ecc:	eb1a 0303 	adds.w	r3, sl, r3
 8003ed0:	623b      	str	r3, [r7, #32]
 8003ed2:	462b      	mov	r3, r5
 8003ed4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	028b      	lsls	r3, r1, #10
 8003eea:	4621      	mov	r1, r4
 8003eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ef0:	4621      	mov	r1, r4
 8003ef2:	028a      	lsls	r2, r1, #10
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4619      	mov	r1, r3
 8003ef8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003efc:	2200      	movs	r2, #0
 8003efe:	673b      	str	r3, [r7, #112]	; 0x70
 8003f00:	677a      	str	r2, [r7, #116]	; 0x74
 8003f02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f06:	f7fc fedf 	bl	8000cc8 <__aeabi_uldivmod>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4613      	mov	r3, r2
 8003f10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f14:	4b41      	ldr	r3, [pc, #260]	; (800401c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	0c1b      	lsrs	r3, r3, #16
 8003f1a:	f003 0303 	and.w	r3, r3, #3
 8003f1e:	3301      	adds	r3, #1
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f32:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f36:	e0eb      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f38:	4b38      	ldr	r3, [pc, #224]	; (800401c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f44:	4b35      	ldr	r3, [pc, #212]	; (800401c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d06b      	beq.n	8004028 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f50:	4b32      	ldr	r3, [pc, #200]	; (800401c <HAL_RCC_GetSysClockFreq+0x354>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	099b      	lsrs	r3, r3, #6
 8003f56:	2200      	movs	r2, #0
 8003f58:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f5c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f62:	663b      	str	r3, [r7, #96]	; 0x60
 8003f64:	2300      	movs	r3, #0
 8003f66:	667b      	str	r3, [r7, #100]	; 0x64
 8003f68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003f6c:	4622      	mov	r2, r4
 8003f6e:	462b      	mov	r3, r5
 8003f70:	f04f 0000 	mov.w	r0, #0
 8003f74:	f04f 0100 	mov.w	r1, #0
 8003f78:	0159      	lsls	r1, r3, #5
 8003f7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f7e:	0150      	lsls	r0, r2, #5
 8003f80:	4602      	mov	r2, r0
 8003f82:	460b      	mov	r3, r1
 8003f84:	4621      	mov	r1, r4
 8003f86:	1a51      	subs	r1, r2, r1
 8003f88:	61b9      	str	r1, [r7, #24]
 8003f8a:	4629      	mov	r1, r5
 8003f8c:	eb63 0301 	sbc.w	r3, r3, r1
 8003f90:	61fb      	str	r3, [r7, #28]
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003f9e:	4659      	mov	r1, fp
 8003fa0:	018b      	lsls	r3, r1, #6
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fa8:	4651      	mov	r1, sl
 8003faa:	018a      	lsls	r2, r1, #6
 8003fac:	4651      	mov	r1, sl
 8003fae:	ebb2 0801 	subs.w	r8, r2, r1
 8003fb2:	4659      	mov	r1, fp
 8003fb4:	eb63 0901 	sbc.w	r9, r3, r1
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fcc:	4690      	mov	r8, r2
 8003fce:	4699      	mov	r9, r3
 8003fd0:	4623      	mov	r3, r4
 8003fd2:	eb18 0303 	adds.w	r3, r8, r3
 8003fd6:	613b      	str	r3, [r7, #16]
 8003fd8:	462b      	mov	r3, r5
 8003fda:	eb49 0303 	adc.w	r3, r9, r3
 8003fde:	617b      	str	r3, [r7, #20]
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003fec:	4629      	mov	r1, r5
 8003fee:	024b      	lsls	r3, r1, #9
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ff6:	4621      	mov	r1, r4
 8003ff8:	024a      	lsls	r2, r1, #9
 8003ffa:	4610      	mov	r0, r2
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004002:	2200      	movs	r2, #0
 8004004:	65bb      	str	r3, [r7, #88]	; 0x58
 8004006:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004008:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800400c:	f7fc fe5c 	bl	8000cc8 <__aeabi_uldivmod>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4613      	mov	r3, r2
 8004016:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800401a:	e065      	b.n	80040e8 <HAL_RCC_GetSysClockFreq+0x420>
 800401c:	40023800 	.word	0x40023800
 8004020:	00f42400 	.word	0x00f42400
 8004024:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004028:	4b3d      	ldr	r3, [pc, #244]	; (8004120 <HAL_RCC_GetSysClockFreq+0x458>)
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	099b      	lsrs	r3, r3, #6
 800402e:	2200      	movs	r2, #0
 8004030:	4618      	mov	r0, r3
 8004032:	4611      	mov	r1, r2
 8004034:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004038:	653b      	str	r3, [r7, #80]	; 0x50
 800403a:	2300      	movs	r3, #0
 800403c:	657b      	str	r3, [r7, #84]	; 0x54
 800403e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004042:	4642      	mov	r2, r8
 8004044:	464b      	mov	r3, r9
 8004046:	f04f 0000 	mov.w	r0, #0
 800404a:	f04f 0100 	mov.w	r1, #0
 800404e:	0159      	lsls	r1, r3, #5
 8004050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004054:	0150      	lsls	r0, r2, #5
 8004056:	4602      	mov	r2, r0
 8004058:	460b      	mov	r3, r1
 800405a:	4641      	mov	r1, r8
 800405c:	1a51      	subs	r1, r2, r1
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	4649      	mov	r1, r9
 8004062:	eb63 0301 	sbc.w	r3, r3, r1
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004074:	4659      	mov	r1, fp
 8004076:	018b      	lsls	r3, r1, #6
 8004078:	4651      	mov	r1, sl
 800407a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800407e:	4651      	mov	r1, sl
 8004080:	018a      	lsls	r2, r1, #6
 8004082:	4651      	mov	r1, sl
 8004084:	1a54      	subs	r4, r2, r1
 8004086:	4659      	mov	r1, fp
 8004088:	eb63 0501 	sbc.w	r5, r3, r1
 800408c:	f04f 0200 	mov.w	r2, #0
 8004090:	f04f 0300 	mov.w	r3, #0
 8004094:	00eb      	lsls	r3, r5, #3
 8004096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800409a:	00e2      	lsls	r2, r4, #3
 800409c:	4614      	mov	r4, r2
 800409e:	461d      	mov	r5, r3
 80040a0:	4643      	mov	r3, r8
 80040a2:	18e3      	adds	r3, r4, r3
 80040a4:	603b      	str	r3, [r7, #0]
 80040a6:	464b      	mov	r3, r9
 80040a8:	eb45 0303 	adc.w	r3, r5, r3
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ba:	4629      	mov	r1, r5
 80040bc:	028b      	lsls	r3, r1, #10
 80040be:	4621      	mov	r1, r4
 80040c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040c4:	4621      	mov	r1, r4
 80040c6:	028a      	lsls	r2, r1, #10
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80040d0:	2200      	movs	r2, #0
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80040d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040da:	f7fc fdf5 	bl	8000cc8 <__aeabi_uldivmod>
 80040de:	4602      	mov	r2, r0
 80040e0:	460b      	mov	r3, r1
 80040e2:	4613      	mov	r3, r2
 80040e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80040e8:	4b0d      	ldr	r3, [pc, #52]	; (8004120 <HAL_RCC_GetSysClockFreq+0x458>)
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	0f1b      	lsrs	r3, r3, #28
 80040ee:	f003 0307 	and.w	r3, r3, #7
 80040f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80040f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80040fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80040fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8004102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004106:	e003      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004108:	4b06      	ldr	r3, [pc, #24]	; (8004124 <HAL_RCC_GetSysClockFreq+0x45c>)
 800410a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800410e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004110:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004114:	4618      	mov	r0, r3
 8004116:	37b8      	adds	r7, #184	; 0xb8
 8004118:	46bd      	mov	sp, r7
 800411a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800411e:	bf00      	nop
 8004120:	40023800 	.word	0x40023800
 8004124:	00f42400 	.word	0x00f42400

08004128 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b086      	sub	sp, #24
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e28d      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 0301 	and.w	r3, r3, #1
 8004142:	2b00      	cmp	r3, #0
 8004144:	f000 8083 	beq.w	800424e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004148:	4b94      	ldr	r3, [pc, #592]	; (800439c <HAL_RCC_OscConfig+0x274>)
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b04      	cmp	r3, #4
 8004152:	d019      	beq.n	8004188 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004154:	4b91      	ldr	r3, [pc, #580]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800415c:	2b08      	cmp	r3, #8
 800415e:	d106      	bne.n	800416e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004160:	4b8e      	ldr	r3, [pc, #568]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004168:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800416c:	d00c      	beq.n	8004188 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800416e:	4b8b      	ldr	r3, [pc, #556]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d112      	bne.n	80041a0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800417a:	4b88      	ldr	r3, [pc, #544]	; (800439c <HAL_RCC_OscConfig+0x274>)
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004182:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004186:	d10b      	bne.n	80041a0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	4b84      	ldr	r3, [pc, #528]	; (800439c <HAL_RCC_OscConfig+0x274>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d05b      	beq.n	800424c <HAL_RCC_OscConfig+0x124>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d157      	bne.n	800424c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e25a      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a8:	d106      	bne.n	80041b8 <HAL_RCC_OscConfig+0x90>
 80041aa:	4b7c      	ldr	r3, [pc, #496]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a7b      	ldr	r2, [pc, #492]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b4:	6013      	str	r3, [r2, #0]
 80041b6:	e01d      	b.n	80041f4 <HAL_RCC_OscConfig+0xcc>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041c0:	d10c      	bne.n	80041dc <HAL_RCC_OscConfig+0xb4>
 80041c2:	4b76      	ldr	r3, [pc, #472]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a75      	ldr	r2, [pc, #468]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041cc:	6013      	str	r3, [r2, #0]
 80041ce:	4b73      	ldr	r3, [pc, #460]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a72      	ldr	r2, [pc, #456]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041d8:	6013      	str	r3, [r2, #0]
 80041da:	e00b      	b.n	80041f4 <HAL_RCC_OscConfig+0xcc>
 80041dc:	4b6f      	ldr	r3, [pc, #444]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a6e      	ldr	r2, [pc, #440]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e6:	6013      	str	r3, [r2, #0]
 80041e8:	4b6c      	ldr	r3, [pc, #432]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4a6b      	ldr	r2, [pc, #428]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80041ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d013      	beq.n	8004224 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7ff f8bc 	bl	8003378 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004204:	f7ff f8b8 	bl	8003378 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b64      	cmp	r3, #100	; 0x64
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e21f      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004216:	4b61      	ldr	r3, [pc, #388]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0xdc>
 8004222:	e014      	b.n	800424e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7ff f8a8 	bl	8003378 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422c:	f7ff f8a4 	bl	8003378 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	; 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e20b      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800423e:	4b57      	ldr	r3, [pc, #348]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f0      	bne.n	800422c <HAL_RCC_OscConfig+0x104>
 800424a:	e000      	b.n	800424e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800424c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b00      	cmp	r3, #0
 8004258:	d06f      	beq.n	800433a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800425a:	4b50      	ldr	r3, [pc, #320]	; (800439c <HAL_RCC_OscConfig+0x274>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
 8004262:	2b00      	cmp	r3, #0
 8004264:	d017      	beq.n	8004296 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004266:	4b4d      	ldr	r3, [pc, #308]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800426e:	2b08      	cmp	r3, #8
 8004270:	d105      	bne.n	800427e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004272:	4b4a      	ldr	r3, [pc, #296]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00b      	beq.n	8004296 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800427e:	4b47      	ldr	r3, [pc, #284]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8004286:	2b0c      	cmp	r3, #12
 8004288:	d11c      	bne.n	80042c4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800428a:	4b44      	ldr	r3, [pc, #272]	; (800439c <HAL_RCC_OscConfig+0x274>)
 800428c:	685b      	ldr	r3, [r3, #4]
 800428e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004292:	2b00      	cmp	r3, #0
 8004294:	d116      	bne.n	80042c4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004296:	4b41      	ldr	r3, [pc, #260]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d005      	beq.n	80042ae <HAL_RCC_OscConfig+0x186>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68db      	ldr	r3, [r3, #12]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d001      	beq.n	80042ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e1d3      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042ae:	4b3b      	ldr	r3, [pc, #236]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	00db      	lsls	r3, r3, #3
 80042bc:	4937      	ldr	r1, [pc, #220]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80042be:	4313      	orrs	r3, r2
 80042c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042c2:	e03a      	b.n	800433a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d020      	beq.n	800430e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042cc:	4b34      	ldr	r3, [pc, #208]	; (80043a0 <HAL_RCC_OscConfig+0x278>)
 80042ce:	2201      	movs	r2, #1
 80042d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d2:	f7ff f851 	bl	8003378 <HAL_GetTick>
 80042d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042d8:	e008      	b.n	80042ec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042da:	f7ff f84d 	bl	8003378 <HAL_GetTick>
 80042de:	4602      	mov	r2, r0
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	1ad3      	subs	r3, r2, r3
 80042e4:	2b02      	cmp	r3, #2
 80042e6:	d901      	bls.n	80042ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80042e8:	2303      	movs	r3, #3
 80042ea:	e1b4      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ec:	4b2b      	ldr	r3, [pc, #172]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d0f0      	beq.n	80042da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042f8:	4b28      	ldr	r3, [pc, #160]	; (800439c <HAL_RCC_OscConfig+0x274>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	4925      	ldr	r1, [pc, #148]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004308:	4313      	orrs	r3, r2
 800430a:	600b      	str	r3, [r1, #0]
 800430c:	e015      	b.n	800433a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800430e:	4b24      	ldr	r3, [pc, #144]	; (80043a0 <HAL_RCC_OscConfig+0x278>)
 8004310:	2200      	movs	r2, #0
 8004312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004314:	f7ff f830 	bl	8003378 <HAL_GetTick>
 8004318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800431a:	e008      	b.n	800432e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800431c:	f7ff f82c 	bl	8003378 <HAL_GetTick>
 8004320:	4602      	mov	r2, r0
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	1ad3      	subs	r3, r2, r3
 8004326:	2b02      	cmp	r3, #2
 8004328:	d901      	bls.n	800432e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e193      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800432e:	4b1b      	ldr	r3, [pc, #108]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0302 	and.w	r3, r3, #2
 8004336:	2b00      	cmp	r3, #0
 8004338:	d1f0      	bne.n	800431c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0308 	and.w	r3, r3, #8
 8004342:	2b00      	cmp	r3, #0
 8004344:	d036      	beq.n	80043b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d016      	beq.n	800437c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800434e:	4b15      	ldr	r3, [pc, #84]	; (80043a4 <HAL_RCC_OscConfig+0x27c>)
 8004350:	2201      	movs	r2, #1
 8004352:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004354:	f7ff f810 	bl	8003378 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800435c:	f7ff f80c 	bl	8003378 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e173      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800436e:	4b0b      	ldr	r3, [pc, #44]	; (800439c <HAL_RCC_OscConfig+0x274>)
 8004370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d0f0      	beq.n	800435c <HAL_RCC_OscConfig+0x234>
 800437a:	e01b      	b.n	80043b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800437c:	4b09      	ldr	r3, [pc, #36]	; (80043a4 <HAL_RCC_OscConfig+0x27c>)
 800437e:	2200      	movs	r2, #0
 8004380:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004382:	f7fe fff9 	bl	8003378 <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	e00e      	b.n	80043a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800438a:	f7fe fff5 	bl	8003378 <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d907      	bls.n	80043a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e15c      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
 800439c:	40023800 	.word	0x40023800
 80043a0:	42470000 	.word	0x42470000
 80043a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043a8:	4b8a      	ldr	r3, [pc, #552]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80043aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043ac:	f003 0302 	and.w	r3, r3, #2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1ea      	bne.n	800438a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	f000 8097 	beq.w	80044f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c2:	2300      	movs	r3, #0
 80043c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043c6:	4b83      	ldr	r3, [pc, #524]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10f      	bne.n	80043f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043d2:	2300      	movs	r3, #0
 80043d4:	60bb      	str	r3, [r7, #8]
 80043d6:	4b7f      	ldr	r3, [pc, #508]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	4a7e      	ldr	r2, [pc, #504]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80043dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e0:	6413      	str	r3, [r2, #64]	; 0x40
 80043e2:	4b7c      	ldr	r3, [pc, #496]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80043e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ea:	60bb      	str	r3, [r7, #8]
 80043ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ee:	2301      	movs	r3, #1
 80043f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f2:	4b79      	ldr	r3, [pc, #484]	; (80045d8 <HAL_RCC_OscConfig+0x4b0>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d118      	bne.n	8004430 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043fe:	4b76      	ldr	r3, [pc, #472]	; (80045d8 <HAL_RCC_OscConfig+0x4b0>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a75      	ldr	r2, [pc, #468]	; (80045d8 <HAL_RCC_OscConfig+0x4b0>)
 8004404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004408:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800440a:	f7fe ffb5 	bl	8003378 <HAL_GetTick>
 800440e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004410:	e008      	b.n	8004424 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004412:	f7fe ffb1 	bl	8003378 <HAL_GetTick>
 8004416:	4602      	mov	r2, r0
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	1ad3      	subs	r3, r2, r3
 800441c:	2b02      	cmp	r3, #2
 800441e:	d901      	bls.n	8004424 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004420:	2303      	movs	r3, #3
 8004422:	e118      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004424:	4b6c      	ldr	r3, [pc, #432]	; (80045d8 <HAL_RCC_OscConfig+0x4b0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442c:	2b00      	cmp	r3, #0
 800442e:	d0f0      	beq.n	8004412 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2b01      	cmp	r3, #1
 8004436:	d106      	bne.n	8004446 <HAL_RCC_OscConfig+0x31e>
 8004438:	4b66      	ldr	r3, [pc, #408]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 800443a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443c:	4a65      	ldr	r2, [pc, #404]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 800443e:	f043 0301 	orr.w	r3, r3, #1
 8004442:	6713      	str	r3, [r2, #112]	; 0x70
 8004444:	e01c      	b.n	8004480 <HAL_RCC_OscConfig+0x358>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	2b05      	cmp	r3, #5
 800444c:	d10c      	bne.n	8004468 <HAL_RCC_OscConfig+0x340>
 800444e:	4b61      	ldr	r3, [pc, #388]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 8004450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004452:	4a60      	ldr	r2, [pc, #384]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 8004454:	f043 0304 	orr.w	r3, r3, #4
 8004458:	6713      	str	r3, [r2, #112]	; 0x70
 800445a:	4b5e      	ldr	r3, [pc, #376]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 800445c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445e:	4a5d      	ldr	r2, [pc, #372]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 8004460:	f043 0301 	orr.w	r3, r3, #1
 8004464:	6713      	str	r3, [r2, #112]	; 0x70
 8004466:	e00b      	b.n	8004480 <HAL_RCC_OscConfig+0x358>
 8004468:	4b5a      	ldr	r3, [pc, #360]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 800446a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800446c:	4a59      	ldr	r2, [pc, #356]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 800446e:	f023 0301 	bic.w	r3, r3, #1
 8004472:	6713      	str	r3, [r2, #112]	; 0x70
 8004474:	4b57      	ldr	r3, [pc, #348]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	4a56      	ldr	r2, [pc, #344]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 800447a:	f023 0304 	bic.w	r3, r3, #4
 800447e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d015      	beq.n	80044b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004488:	f7fe ff76 	bl	8003378 <HAL_GetTick>
 800448c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800448e:	e00a      	b.n	80044a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004490:	f7fe ff72 	bl	8003378 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	f241 3288 	movw	r2, #5000	; 0x1388
 800449e:	4293      	cmp	r3, r2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e0d7      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044a6:	4b4b      	ldr	r3, [pc, #300]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0ee      	beq.n	8004490 <HAL_RCC_OscConfig+0x368>
 80044b2:	e014      	b.n	80044de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b4:	f7fe ff60 	bl	8003378 <HAL_GetTick>
 80044b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ba:	e00a      	b.n	80044d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044bc:	f7fe ff5c 	bl	8003378 <HAL_GetTick>
 80044c0:	4602      	mov	r2, r0
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e0c1      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044d2:	4b40      	ldr	r3, [pc, #256]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80044d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d6:	f003 0302 	and.w	r3, r3, #2
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1ee      	bne.n	80044bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044de:	7dfb      	ldrb	r3, [r7, #23]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d105      	bne.n	80044f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044e4:	4b3b      	ldr	r3, [pc, #236]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80044ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 80ad 	beq.w	8004654 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044fa:	4b36      	ldr	r3, [pc, #216]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80044fc:	689b      	ldr	r3, [r3, #8]
 80044fe:	f003 030c 	and.w	r3, r3, #12
 8004502:	2b08      	cmp	r3, #8
 8004504:	d060      	beq.n	80045c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	2b02      	cmp	r3, #2
 800450c:	d145      	bne.n	800459a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800450e:	4b33      	ldr	r3, [pc, #204]	; (80045dc <HAL_RCC_OscConfig+0x4b4>)
 8004510:	2200      	movs	r2, #0
 8004512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004514:	f7fe ff30 	bl	8003378 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800451a:	e008      	b.n	800452e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800451c:	f7fe ff2c 	bl	8003378 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b02      	cmp	r3, #2
 8004528:	d901      	bls.n	800452e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e093      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800452e:	4b29      	ldr	r3, [pc, #164]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1f0      	bne.n	800451c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	69da      	ldr	r2, [r3, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a1b      	ldr	r3, [r3, #32]
 8004542:	431a      	orrs	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	019b      	lsls	r3, r3, #6
 800454a:	431a      	orrs	r2, r3
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004550:	085b      	lsrs	r3, r3, #1
 8004552:	3b01      	subs	r3, #1
 8004554:	041b      	lsls	r3, r3, #16
 8004556:	431a      	orrs	r2, r3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455c:	061b      	lsls	r3, r3, #24
 800455e:	431a      	orrs	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004564:	071b      	lsls	r3, r3, #28
 8004566:	491b      	ldr	r1, [pc, #108]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 8004568:	4313      	orrs	r3, r2
 800456a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <HAL_RCC_OscConfig+0x4b4>)
 800456e:	2201      	movs	r2, #1
 8004570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004572:	f7fe ff01 	bl	8003378 <HAL_GetTick>
 8004576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004578:	e008      	b.n	800458c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800457a:	f7fe fefd 	bl	8003378 <HAL_GetTick>
 800457e:	4602      	mov	r2, r0
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	1ad3      	subs	r3, r2, r3
 8004584:	2b02      	cmp	r3, #2
 8004586:	d901      	bls.n	800458c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e064      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800458c:	4b11      	ldr	r3, [pc, #68]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004594:	2b00      	cmp	r3, #0
 8004596:	d0f0      	beq.n	800457a <HAL_RCC_OscConfig+0x452>
 8004598:	e05c      	b.n	8004654 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459a:	4b10      	ldr	r3, [pc, #64]	; (80045dc <HAL_RCC_OscConfig+0x4b4>)
 800459c:	2200      	movs	r2, #0
 800459e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a0:	f7fe feea 	bl	8003378 <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a8:	f7fe fee6 	bl	8003378 <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e04d      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ba:	4b06      	ldr	r3, [pc, #24]	; (80045d4 <HAL_RCC_OscConfig+0x4ac>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1f0      	bne.n	80045a8 <HAL_RCC_OscConfig+0x480>
 80045c6:	e045      	b.n	8004654 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	699b      	ldr	r3, [r3, #24]
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d107      	bne.n	80045e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e040      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
 80045d4:	40023800 	.word	0x40023800
 80045d8:	40007000 	.word	0x40007000
 80045dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045e0:	4b1f      	ldr	r3, [pc, #124]	; (8004660 <HAL_RCC_OscConfig+0x538>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d030      	beq.n	8004650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d129      	bne.n	8004650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004606:	429a      	cmp	r2, r3
 8004608:	d122      	bne.n	8004650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800460a:	68fa      	ldr	r2, [r7, #12]
 800460c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004610:	4013      	ands	r3, r2
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004616:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004618:	4293      	cmp	r3, r2
 800461a:	d119      	bne.n	8004650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004626:	085b      	lsrs	r3, r3, #1
 8004628:	3b01      	subs	r3, #1
 800462a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d10f      	bne.n	8004650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d107      	bne.n	8004650 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800464c:	429a      	cmp	r2, r3
 800464e:	d001      	beq.n	8004654 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004650:	2301      	movs	r3, #1
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004654:	2300      	movs	r3, #0
}
 8004656:	4618      	mov	r0, r3
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800

08004664 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e041      	b.n	80046fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f7fe fa1c 	bl	8002ac8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f000 fc58 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
	...

08004704 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004704:	b480      	push	{r7}
 8004706:	b085      	sub	sp, #20
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	d001      	beq.n	800471c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e04e      	b.n	80047ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2202      	movs	r2, #2
 8004720:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68da      	ldr	r2, [r3, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a23      	ldr	r2, [pc, #140]	; (80047c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d022      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0x80>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004746:	d01d      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0x80>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a1f      	ldr	r2, [pc, #124]	; (80047cc <HAL_TIM_Base_Start_IT+0xc8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d018      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0x80>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a1e      	ldr	r2, [pc, #120]	; (80047d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d013      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0x80>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a1c      	ldr	r2, [pc, #112]	; (80047d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d00e      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0x80>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a1b      	ldr	r2, [pc, #108]	; (80047d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d009      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0x80>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a19      	ldr	r2, [pc, #100]	; (80047dc <HAL_TIM_Base_Start_IT+0xd8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <HAL_TIM_Base_Start_IT+0x80>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a18      	ldr	r2, [pc, #96]	; (80047e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d111      	bne.n	80047a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 0307 	and.w	r3, r3, #7
 800478e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2b06      	cmp	r3, #6
 8004794:	d010      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f042 0201 	orr.w	r2, r2, #1
 80047a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047a6:	e007      	b.n	80047b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047b8:	2300      	movs	r3, #0
}
 80047ba:	4618      	mov	r0, r3
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	40010000 	.word	0x40010000
 80047cc:	40000400 	.word	0x40000400
 80047d0:	40000800 	.word	0x40000800
 80047d4:	40000c00 	.word	0x40000c00
 80047d8:	40010400 	.word	0x40010400
 80047dc:	40014000 	.word	0x40014000
 80047e0:	40001800 	.word	0x40001800

080047e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b082      	sub	sp, #8
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e041      	b.n	800487a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d106      	bne.n	8004810 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fe f9dc 	bl	8002bc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	3304      	adds	r3, #4
 8004820:	4619      	mov	r1, r3
 8004822:	4610      	mov	r0, r2
 8004824:	f000 fb98 	bl	8004f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3708      	adds	r7, #8
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
	...

08004884 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d109      	bne.n	80048a8 <HAL_TIM_PWM_Start+0x24>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	bf14      	ite	ne
 80048a0:	2301      	movne	r3, #1
 80048a2:	2300      	moveq	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	e022      	b.n	80048ee <HAL_TIM_PWM_Start+0x6a>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	2b04      	cmp	r3, #4
 80048ac:	d109      	bne.n	80048c2 <HAL_TIM_PWM_Start+0x3e>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	bf14      	ite	ne
 80048ba:	2301      	movne	r3, #1
 80048bc:	2300      	moveq	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	e015      	b.n	80048ee <HAL_TIM_PWM_Start+0x6a>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b08      	cmp	r3, #8
 80048c6:	d109      	bne.n	80048dc <HAL_TIM_PWM_Start+0x58>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e008      	b.n	80048ee <HAL_TIM_PWM_Start+0x6a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	bf14      	ite	ne
 80048e8:	2301      	movne	r3, #1
 80048ea:	2300      	moveq	r3, #0
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d001      	beq.n	80048f6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e07c      	b.n	80049f0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0x82>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004904:	e013      	b.n	800492e <HAL_TIM_PWM_Start+0xaa>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b04      	cmp	r3, #4
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0x92>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004914:	e00b      	b.n	800492e <HAL_TIM_PWM_Start+0xaa>
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b08      	cmp	r3, #8
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Start+0xa2>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2202      	movs	r2, #2
 8004920:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004924:	e003      	b.n	800492e <HAL_TIM_PWM_Start+0xaa>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2202      	movs	r2, #2
 800492a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2201      	movs	r2, #1
 8004934:	6839      	ldr	r1, [r7, #0]
 8004936:	4618      	mov	r0, r3
 8004938:	f000 fe04 	bl	8005544 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	4a2d      	ldr	r2, [pc, #180]	; (80049f8 <HAL_TIM_PWM_Start+0x174>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d004      	beq.n	8004950 <HAL_TIM_PWM_Start+0xcc>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <HAL_TIM_PWM_Start+0x178>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d101      	bne.n	8004954 <HAL_TIM_PWM_Start+0xd0>
 8004950:	2301      	movs	r3, #1
 8004952:	e000      	b.n	8004956 <HAL_TIM_PWM_Start+0xd2>
 8004954:	2300      	movs	r3, #0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d007      	beq.n	800496a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004968:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a22      	ldr	r2, [pc, #136]	; (80049f8 <HAL_TIM_PWM_Start+0x174>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d022      	beq.n	80049ba <HAL_TIM_PWM_Start+0x136>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497c:	d01d      	beq.n	80049ba <HAL_TIM_PWM_Start+0x136>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1f      	ldr	r2, [pc, #124]	; (8004a00 <HAL_TIM_PWM_Start+0x17c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d018      	beq.n	80049ba <HAL_TIM_PWM_Start+0x136>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <HAL_TIM_PWM_Start+0x180>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d013      	beq.n	80049ba <HAL_TIM_PWM_Start+0x136>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1c      	ldr	r2, [pc, #112]	; (8004a08 <HAL_TIM_PWM_Start+0x184>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d00e      	beq.n	80049ba <HAL_TIM_PWM_Start+0x136>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a16      	ldr	r2, [pc, #88]	; (80049fc <HAL_TIM_PWM_Start+0x178>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d009      	beq.n	80049ba <HAL_TIM_PWM_Start+0x136>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_TIM_PWM_Start+0x188>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d004      	beq.n	80049ba <HAL_TIM_PWM_Start+0x136>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a16      	ldr	r2, [pc, #88]	; (8004a10 <HAL_TIM_PWM_Start+0x18c>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d111      	bne.n	80049de <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	d010      	beq.n	80049ee <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049dc:	e007      	b.n	80049ee <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f042 0201 	orr.w	r2, r2, #1
 80049ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3710      	adds	r7, #16
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40010000 	.word	0x40010000
 80049fc:	40010400 	.word	0x40010400
 8004a00:	40000400 	.word	0x40000400
 8004a04:	40000800 	.word	0x40000800
 8004a08:	40000c00 	.word	0x40000c00
 8004a0c:	40014000 	.word	0x40014000
 8004a10:	40001800 	.word	0x40001800

08004a14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68db      	ldr	r3, [r3, #12]
 8004a22:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d020      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d01b      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0202 	mvn.w	r2, #2
 8004a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	f003 0303 	and.w	r3, r3, #3
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d003      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa5b 	bl	8004f1a <HAL_TIM_IC_CaptureCallback>
 8004a64:	e005      	b.n	8004a72 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 fa4d 	bl	8004f06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 fa5e 	bl	8004f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	f003 0304 	and.w	r3, r3, #4
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d020      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f003 0304 	and.w	r3, r3, #4
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d01b      	beq.n	8004ac4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0204 	mvn.w	r2, #4
 8004a94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d003      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 fa35 	bl	8004f1a <HAL_TIM_IC_CaptureCallback>
 8004ab0:	e005      	b.n	8004abe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 fa27 	bl	8004f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fa38 	bl	8004f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d020      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	f003 0308 	and.w	r3, r3, #8
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d01b      	beq.n	8004b10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0208 	mvn.w	r2, #8
 8004ae0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2204      	movs	r2, #4
 8004ae6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69db      	ldr	r3, [r3, #28]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa0f 	bl	8004f1a <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa01 	bl	8004f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fa12 	bl	8004f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	f003 0310 	and.w	r3, r3, #16
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d020      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f003 0310 	and.w	r3, r3, #16
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01b      	beq.n	8004b5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f06f 0210 	mvn.w	r2, #16
 8004b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2208      	movs	r2, #8
 8004b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	69db      	ldr	r3, [r3, #28]
 8004b3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f000 f9e9 	bl	8004f1a <HAL_TIM_IC_CaptureCallback>
 8004b48:	e005      	b.n	8004b56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 f9db 	bl	8004f06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	f000 f9ec 	bl	8004f2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00c      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f003 0301 	and.w	r3, r3, #1
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d007      	beq.n	8004b80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0201 	mvn.w	r2, #1
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f7fd fe0e 	bl	800279c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d00c      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fd7c 	bl	800569c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00c      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f9bd 	bl	8004f42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	f003 0320 	and.w	r3, r3, #32
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00c      	beq.n	8004bec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d007      	beq.n	8004bec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f06f 0220 	mvn.w	r2, #32
 8004be4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fd4e 	bl	8005688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004bec:	bf00      	nop
 8004bee:	3710      	adds	r7, #16
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b086      	sub	sp, #24
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c00:	2300      	movs	r3, #0
 8004c02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e0ae      	b.n	8004d70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	f200 809f 	bhi.w	8004d60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c22:	a201      	add	r2, pc, #4	; (adr r2, 8004c28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004d61 	.word	0x08004d61
 8004c30:	08004d61 	.word	0x08004d61
 8004c34:	08004d61 	.word	0x08004d61
 8004c38:	08004c9d 	.word	0x08004c9d
 8004c3c:	08004d61 	.word	0x08004d61
 8004c40:	08004d61 	.word	0x08004d61
 8004c44:	08004d61 	.word	0x08004d61
 8004c48:	08004cdf 	.word	0x08004cdf
 8004c4c:	08004d61 	.word	0x08004d61
 8004c50:	08004d61 	.word	0x08004d61
 8004c54:	08004d61 	.word	0x08004d61
 8004c58:	08004d1f 	.word	0x08004d1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68b9      	ldr	r1, [r7, #8]
 8004c62:	4618      	mov	r0, r3
 8004c64:	f000 fa24 	bl	80050b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	699a      	ldr	r2, [r3, #24]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f042 0208 	orr.w	r2, r2, #8
 8004c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	699a      	ldr	r2, [r3, #24]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0204 	bic.w	r2, r2, #4
 8004c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	6999      	ldr	r1, [r3, #24]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	691a      	ldr	r2, [r3, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	430a      	orrs	r2, r1
 8004c98:	619a      	str	r2, [r3, #24]
      break;
 8004c9a:	e064      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f000 fa74 	bl	8005190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	699a      	ldr	r2, [r3, #24]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699a      	ldr	r2, [r3, #24]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6999      	ldr	r1, [r3, #24]
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	021a      	lsls	r2, r3, #8
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	619a      	str	r2, [r3, #24]
      break;
 8004cdc:	e043      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68b9      	ldr	r1, [r7, #8]
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f000 fac9 	bl	800527c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69da      	ldr	r2, [r3, #28]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f042 0208 	orr.w	r2, r2, #8
 8004cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	69da      	ldr	r2, [r3, #28]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	f022 0204 	bic.w	r2, r2, #4
 8004d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	69d9      	ldr	r1, [r3, #28]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	430a      	orrs	r2, r1
 8004d1a:	61da      	str	r2, [r3, #28]
      break;
 8004d1c:	e023      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 fb1d 	bl	8005364 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69da      	ldr	r2, [r3, #28]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	69da      	ldr	r2, [r3, #28]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	69d9      	ldr	r1, [r3, #28]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	021a      	lsls	r2, r3, #8
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	61da      	str	r2, [r3, #28]
      break;
 8004d5e:	e002      	b.n	8004d66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d60:	2301      	movs	r3, #1
 8004d62:	75fb      	strb	r3, [r7, #23]
      break;
 8004d64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3718      	adds	r7, #24
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d82:	2300      	movs	r3, #0
 8004d84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d101      	bne.n	8004d94 <HAL_TIM_ConfigClockSource+0x1c>
 8004d90:	2302      	movs	r3, #2
 8004d92:	e0b4      	b.n	8004efe <HAL_TIM_ConfigClockSource+0x186>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	689b      	ldr	r3, [r3, #8]
 8004daa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dcc:	d03e      	beq.n	8004e4c <HAL_TIM_ConfigClockSource+0xd4>
 8004dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd2:	f200 8087 	bhi.w	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dda:	f000 8086 	beq.w	8004eea <HAL_TIM_ConfigClockSource+0x172>
 8004dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004de2:	d87f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004de4:	2b70      	cmp	r3, #112	; 0x70
 8004de6:	d01a      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0xa6>
 8004de8:	2b70      	cmp	r3, #112	; 0x70
 8004dea:	d87b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dec:	2b60      	cmp	r3, #96	; 0x60
 8004dee:	d050      	beq.n	8004e92 <HAL_TIM_ConfigClockSource+0x11a>
 8004df0:	2b60      	cmp	r3, #96	; 0x60
 8004df2:	d877      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004df4:	2b50      	cmp	r3, #80	; 0x50
 8004df6:	d03c      	beq.n	8004e72 <HAL_TIM_ConfigClockSource+0xfa>
 8004df8:	2b50      	cmp	r3, #80	; 0x50
 8004dfa:	d873      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004dfc:	2b40      	cmp	r3, #64	; 0x40
 8004dfe:	d058      	beq.n	8004eb2 <HAL_TIM_ConfigClockSource+0x13a>
 8004e00:	2b40      	cmp	r3, #64	; 0x40
 8004e02:	d86f      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e04:	2b30      	cmp	r3, #48	; 0x30
 8004e06:	d064      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e08:	2b30      	cmp	r3, #48	; 0x30
 8004e0a:	d86b      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b20      	cmp	r3, #32
 8004e0e:	d060      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e10:	2b20      	cmp	r3, #32
 8004e12:	d867      	bhi.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05c      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e18:	2b10      	cmp	r3, #16
 8004e1a:	d05a      	beq.n	8004ed2 <HAL_TIM_ConfigClockSource+0x15a>
 8004e1c:	e062      	b.n	8004ee4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e2e:	f000 fb69 	bl	8005504 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	609a      	str	r2, [r3, #8]
      break;
 8004e4a:	e04f      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e5c:	f000 fb52 	bl	8005504 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	689a      	ldr	r2, [r3, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e6e:	609a      	str	r2, [r3, #8]
      break;
 8004e70:	e03c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 fac6 	bl	8005410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	2150      	movs	r1, #80	; 0x50
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f000 fb1f 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004e90:	e02c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e9e:	461a      	mov	r2, r3
 8004ea0:	f000 fae5 	bl	800546e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2160      	movs	r1, #96	; 0x60
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fb0f 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004eb0:	e01c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	f000 faa6 	bl	8005410 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2140      	movs	r1, #64	; 0x40
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 faff 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004ed0:	e00c      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681a      	ldr	r2, [r3, #0]
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f000 faf6 	bl	80054ce <TIM_ITRx_SetConfig>
      break;
 8004ee2:	e003      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8004ee8:	e000      	b.n	8004eec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004eea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f06:	b480      	push	{r7}
 8004f08:	b083      	sub	sp, #12
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0e:	bf00      	nop
 8004f10:	370c      	adds	r7, #12
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr

08004f1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b083      	sub	sp, #12
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f22:	bf00      	nop
 8004f24:	370c      	adds	r7, #12
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr

08004f2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	4a46      	ldr	r2, [pc, #280]	; (8005084 <TIM_Base_SetConfig+0x12c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d013      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d00f      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	4a43      	ldr	r2, [pc, #268]	; (8005088 <TIM_Base_SetConfig+0x130>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00b      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4a42      	ldr	r2, [pc, #264]	; (800508c <TIM_Base_SetConfig+0x134>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d007      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a41      	ldr	r2, [pc, #260]	; (8005090 <TIM_Base_SetConfig+0x138>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d003      	beq.n	8004f98 <TIM_Base_SetConfig+0x40>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a40      	ldr	r2, [pc, #256]	; (8005094 <TIM_Base_SetConfig+0x13c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d108      	bne.n	8004faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	68fa      	ldr	r2, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a35      	ldr	r2, [pc, #212]	; (8005084 <TIM_Base_SetConfig+0x12c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d02b      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fb8:	d027      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a32      	ldr	r2, [pc, #200]	; (8005088 <TIM_Base_SetConfig+0x130>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d023      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a31      	ldr	r2, [pc, #196]	; (800508c <TIM_Base_SetConfig+0x134>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d01f      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a30      	ldr	r2, [pc, #192]	; (8005090 <TIM_Base_SetConfig+0x138>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d01b      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a2f      	ldr	r2, [pc, #188]	; (8005094 <TIM_Base_SetConfig+0x13c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d017      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a2e      	ldr	r2, [pc, #184]	; (8005098 <TIM_Base_SetConfig+0x140>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d013      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a2d      	ldr	r2, [pc, #180]	; (800509c <TIM_Base_SetConfig+0x144>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d00f      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a2c      	ldr	r2, [pc, #176]	; (80050a0 <TIM_Base_SetConfig+0x148>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00b      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2b      	ldr	r2, [pc, #172]	; (80050a4 <TIM_Base_SetConfig+0x14c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d007      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2a      	ldr	r2, [pc, #168]	; (80050a8 <TIM_Base_SetConfig+0x150>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d003      	beq.n	800500a <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <TIM_Base_SetConfig+0x154>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d108      	bne.n	800501c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	695b      	ldr	r3, [r3, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68fa      	ldr	r2, [r7, #12]
 800502e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4a10      	ldr	r2, [pc, #64]	; (8005084 <TIM_Base_SetConfig+0x12c>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d003      	beq.n	8005050 <TIM_Base_SetConfig+0xf8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a12      	ldr	r2, [pc, #72]	; (8005094 <TIM_Base_SetConfig+0x13c>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d103      	bne.n	8005058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	691a      	ldr	r2, [r3, #16]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2201      	movs	r2, #1
 800505c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	691b      	ldr	r3, [r3, #16]
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b01      	cmp	r3, #1
 8005068:	d105      	bne.n	8005076 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f023 0201 	bic.w	r2, r3, #1
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]
  }
}
 8005076:	bf00      	nop
 8005078:	3714      	adds	r7, #20
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop
 8005084:	40010000 	.word	0x40010000
 8005088:	40000400 	.word	0x40000400
 800508c:	40000800 	.word	0x40000800
 8005090:	40000c00 	.word	0x40000c00
 8005094:	40010400 	.word	0x40010400
 8005098:	40014000 	.word	0x40014000
 800509c:	40014400 	.word	0x40014400
 80050a0:	40014800 	.word	0x40014800
 80050a4:	40001800 	.word	0x40001800
 80050a8:	40001c00 	.word	0x40001c00
 80050ac:	40002000 	.word	0x40002000

080050b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a1b      	ldr	r3, [r3, #32]
 80050be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f023 0201 	bic.w	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	699b      	ldr	r3, [r3, #24]
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	f023 0303 	bic.w	r3, r3, #3
 80050e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f023 0302 	bic.w	r3, r3, #2
 80050f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	4313      	orrs	r3, r2
 8005102:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a20      	ldr	r2, [pc, #128]	; (8005188 <TIM_OC1_SetConfig+0xd8>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_OC1_SetConfig+0x64>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a1f      	ldr	r2, [pc, #124]	; (800518c <TIM_OC1_SetConfig+0xdc>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d10c      	bne.n	800512e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f023 0308 	bic.w	r3, r3, #8
 800511a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	697a      	ldr	r2, [r7, #20]
 8005122:	4313      	orrs	r3, r2
 8005124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 0304 	bic.w	r3, r3, #4
 800512c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a15      	ldr	r2, [pc, #84]	; (8005188 <TIM_OC1_SetConfig+0xd8>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d003      	beq.n	800513e <TIM_OC1_SetConfig+0x8e>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a14      	ldr	r2, [pc, #80]	; (800518c <TIM_OC1_SetConfig+0xdc>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d111      	bne.n	8005162 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005144:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800514c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	693a      	ldr	r2, [r7, #16]
 8005154:	4313      	orrs	r3, r2
 8005156:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	685a      	ldr	r2, [r3, #4]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	697a      	ldr	r2, [r7, #20]
 800517a:	621a      	str	r2, [r3, #32]
}
 800517c:	bf00      	nop
 800517e:	371c      	adds	r7, #28
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	40010000 	.word	0x40010000
 800518c:	40010400 	.word	0x40010400

08005190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f023 0210 	bic.w	r2, r3, #16
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0320 	bic.w	r3, r3, #32
 80051da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a22      	ldr	r2, [pc, #136]	; (8005274 <TIM_OC2_SetConfig+0xe4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d003      	beq.n	80051f8 <TIM_OC2_SetConfig+0x68>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a21      	ldr	r2, [pc, #132]	; (8005278 <TIM_OC2_SetConfig+0xe8>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d10d      	bne.n	8005214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	697a      	ldr	r2, [r7, #20]
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005212:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a17      	ldr	r2, [pc, #92]	; (8005274 <TIM_OC2_SetConfig+0xe4>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d003      	beq.n	8005224 <TIM_OC2_SetConfig+0x94>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a16      	ldr	r2, [pc, #88]	; (8005278 <TIM_OC2_SetConfig+0xe8>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d113      	bne.n	800524c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800522a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	4313      	orrs	r3, r2
 800523e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	699b      	ldr	r3, [r3, #24]
 8005244:	009b      	lsls	r3, r3, #2
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4313      	orrs	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	693a      	ldr	r2, [r7, #16]
 8005250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685a      	ldr	r2, [r3, #4]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	697a      	ldr	r2, [r7, #20]
 8005264:	621a      	str	r2, [r3, #32]
}
 8005266:	bf00      	nop
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	40010000 	.word	0x40010000
 8005278:	40010400 	.word	0x40010400

0800527c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	f023 0303 	bic.w	r3, r3, #3
 80052b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	68fa      	ldr	r2, [r7, #12]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	021b      	lsls	r3, r3, #8
 80052cc:	697a      	ldr	r2, [r7, #20]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a21      	ldr	r2, [pc, #132]	; (800535c <TIM_OC3_SetConfig+0xe0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d003      	beq.n	80052e2 <TIM_OC3_SetConfig+0x66>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a20      	ldr	r2, [pc, #128]	; (8005360 <TIM_OC3_SetConfig+0xe4>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d10d      	bne.n	80052fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	021b      	lsls	r3, r3, #8
 80052f0:	697a      	ldr	r2, [r7, #20]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	4a16      	ldr	r2, [pc, #88]	; (800535c <TIM_OC3_SetConfig+0xe0>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d003      	beq.n	800530e <TIM_OC3_SetConfig+0x92>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a15      	ldr	r2, [pc, #84]	; (8005360 <TIM_OC3_SetConfig+0xe4>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d113      	bne.n	8005336 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800531c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	011b      	lsls	r3, r3, #4
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4313      	orrs	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	4313      	orrs	r3, r2
 8005334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685a      	ldr	r2, [r3, #4]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	621a      	str	r2, [r3, #32]
}
 8005350:	bf00      	nop
 8005352:	371c      	adds	r7, #28
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40010000 	.word	0x40010000
 8005360:	40010400 	.word	0x40010400

08005364 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005364:	b480      	push	{r7}
 8005366:	b087      	sub	sp, #28
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
 800536c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	69db      	ldr	r3, [r3, #28]
 800538a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005392:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800539a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	021b      	lsls	r3, r3, #8
 80053a2:	68fa      	ldr	r2, [r7, #12]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	031b      	lsls	r3, r3, #12
 80053b6:	693a      	ldr	r2, [r7, #16]
 80053b8:	4313      	orrs	r3, r2
 80053ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a12      	ldr	r2, [pc, #72]	; (8005408 <TIM_OC4_SetConfig+0xa4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d003      	beq.n	80053cc <TIM_OC4_SetConfig+0x68>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a11      	ldr	r2, [pc, #68]	; (800540c <TIM_OC4_SetConfig+0xa8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d109      	bne.n	80053e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
 80053d8:	019b      	lsls	r3, r3, #6
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	4313      	orrs	r3, r2
 80053de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	697a      	ldr	r2, [r7, #20]
 80053e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	693a      	ldr	r2, [r7, #16]
 80053f8:	621a      	str	r2, [r3, #32]
}
 80053fa:	bf00      	nop
 80053fc:	371c      	adds	r7, #28
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40010000 	.word	0x40010000
 800540c:	40010400 	.word	0x40010400

08005410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005410:	b480      	push	{r7}
 8005412:	b087      	sub	sp, #28
 8005414:	af00      	add	r7, sp, #0
 8005416:	60f8      	str	r0, [r7, #12]
 8005418:	60b9      	str	r1, [r7, #8]
 800541a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f023 0201 	bic.w	r2, r3, #1
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	699b      	ldr	r3, [r3, #24]
 8005432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800543a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	011b      	lsls	r3, r3, #4
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	4313      	orrs	r3, r2
 8005444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	f023 030a 	bic.w	r3, r3, #10
 800544c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	4313      	orrs	r3, r2
 8005454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	697a      	ldr	r2, [r7, #20]
 8005460:	621a      	str	r2, [r3, #32]
}
 8005462:	bf00      	nop
 8005464:	371c      	adds	r7, #28
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr

0800546e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800546e:	b480      	push	{r7}
 8005470:	b087      	sub	sp, #28
 8005472:	af00      	add	r7, sp, #0
 8005474:	60f8      	str	r0, [r7, #12]
 8005476:	60b9      	str	r1, [r7, #8]
 8005478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	6a1b      	ldr	r3, [r3, #32]
 8005484:	f023 0210 	bic.w	r2, r3, #16
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	031b      	lsls	r3, r3, #12
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054a4:	697b      	ldr	r3, [r7, #20]
 80054a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	621a      	str	r2, [r3, #32]
}
 80054c2:	bf00      	nop
 80054c4:	371c      	adds	r7, #28
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr

080054ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054ce:	b480      	push	{r7}
 80054d0:	b085      	sub	sp, #20
 80054d2:	af00      	add	r7, sp, #0
 80054d4:	6078      	str	r0, [r7, #4]
 80054d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054e4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f043 0307 	orr.w	r3, r3, #7
 80054f0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68fa      	ldr	r2, [r7, #12]
 80054f6:	609a      	str	r2, [r3, #8]
}
 80054f8:	bf00      	nop
 80054fa:	3714      	adds	r7, #20
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800551e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	021a      	lsls	r2, r3, #8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	431a      	orrs	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	4313      	orrs	r3, r2
 800552c:	697a      	ldr	r2, [r7, #20]
 800552e:	4313      	orrs	r3, r2
 8005530:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	609a      	str	r2, [r3, #8]
}
 8005538:	bf00      	nop
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005544:	b480      	push	{r7}
 8005546:	b087      	sub	sp, #28
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	f003 031f 	and.w	r3, r3, #31
 8005556:	2201      	movs	r2, #1
 8005558:	fa02 f303 	lsl.w	r3, r2, r3
 800555c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	6a1a      	ldr	r2, [r3, #32]
 8005562:	697b      	ldr	r3, [r7, #20]
 8005564:	43db      	mvns	r3, r3
 8005566:	401a      	ands	r2, r3
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6a1a      	ldr	r2, [r3, #32]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f003 031f 	and.w	r3, r3, #31
 8005576:	6879      	ldr	r1, [r7, #4]
 8005578:	fa01 f303 	lsl.w	r3, r1, r3
 800557c:	431a      	orrs	r2, r3
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	621a      	str	r2, [r3, #32]
}
 8005582:	bf00      	nop
 8005584:	371c      	adds	r7, #28
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr
	...

08005590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e05a      	b.n	800565e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a21      	ldr	r2, [pc, #132]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d022      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f4:	d01d      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d018      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1b      	ldr	r2, [pc, #108]	; (8005674 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d013      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1a      	ldr	r2, [pc, #104]	; (8005678 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d00e      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a18      	ldr	r2, [pc, #96]	; (800567c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d009      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a17      	ldr	r2, [pc, #92]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d004      	beq.n	8005632 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a15      	ldr	r2, [pc, #84]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d10c      	bne.n	800564c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005638:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	68ba      	ldr	r2, [r7, #8]
 8005640:	4313      	orrs	r3, r2
 8005642:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800565c:	2300      	movs	r3, #0
}
 800565e:	4618      	mov	r0, r3
 8005660:	3714      	adds	r7, #20
 8005662:	46bd      	mov	sp, r7
 8005664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005668:	4770      	bx	lr
 800566a:	bf00      	nop
 800566c:	40010000 	.word	0x40010000
 8005670:	40000400 	.word	0x40000400
 8005674:	40000800 	.word	0x40000800
 8005678:	40000c00 	.word	0x40000c00
 800567c:	40010400 	.word	0x40010400
 8005680:	40014000 	.word	0x40014000
 8005684:	40001800 	.word	0x40001800

08005688 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b082      	sub	sp, #8
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d101      	bne.n	80056c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e042      	b.n	8005748 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d106      	bne.n	80056dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f7fd fb90 	bl	8002dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2224      	movs	r2, #36	; 0x24
 80056e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68da      	ldr	r2, [r3, #12]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 fdbd 	bl	8006274 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	691a      	ldr	r2, [r3, #16]
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005708:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	695a      	ldr	r2, [r3, #20]
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005718:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005728:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2220      	movs	r2, #32
 8005734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2220      	movs	r2, #32
 800573c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3708      	adds	r7, #8
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b08a      	sub	sp, #40	; 0x28
 8005754:	af02      	add	r7, sp, #8
 8005756:	60f8      	str	r0, [r7, #12]
 8005758:	60b9      	str	r1, [r7, #8]
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	4613      	mov	r3, r2
 800575e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005760:	2300      	movs	r3, #0
 8005762:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2b20      	cmp	r3, #32
 800576e:	d175      	bne.n	800585c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d002      	beq.n	800577c <HAL_UART_Transmit+0x2c>
 8005776:	88fb      	ldrh	r3, [r7, #6]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e06e      	b.n	800585e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	2221      	movs	r2, #33	; 0x21
 800578a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800578e:	f7fd fdf3 	bl	8003378 <HAL_GetTick>
 8005792:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	88fa      	ldrh	r2, [r7, #6]
 8005798:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	88fa      	ldrh	r2, [r7, #6]
 800579e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689b      	ldr	r3, [r3, #8]
 80057a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a8:	d108      	bne.n	80057bc <HAL_UART_Transmit+0x6c>
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	691b      	ldr	r3, [r3, #16]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d104      	bne.n	80057bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057b2:	2300      	movs	r3, #0
 80057b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	61bb      	str	r3, [r7, #24]
 80057ba:	e003      	b.n	80057c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057c4:	e02e      	b.n	8005824 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	9300      	str	r3, [sp, #0]
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	2200      	movs	r2, #0
 80057ce:	2180      	movs	r1, #128	; 0x80
 80057d0:	68f8      	ldr	r0, [r7, #12]
 80057d2:	f000 fb1f 	bl	8005e14 <UART_WaitOnFlagUntilTimeout>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d005      	beq.n	80057e8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2220      	movs	r2, #32
 80057e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80057e4:	2303      	movs	r3, #3
 80057e6:	e03a      	b.n	800585e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d10b      	bne.n	8005806 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ee:	69bb      	ldr	r3, [r7, #24]
 80057f0:	881b      	ldrh	r3, [r3, #0]
 80057f2:	461a      	mov	r2, r3
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	3302      	adds	r3, #2
 8005802:	61bb      	str	r3, [r7, #24]
 8005804:	e007      	b.n	8005816 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005806:	69fb      	ldr	r3, [r7, #28]
 8005808:	781a      	ldrb	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	3301      	adds	r3, #1
 8005814:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800581a:	b29b      	uxth	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b29a      	uxth	r2, r3
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005828:	b29b      	uxth	r3, r3
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1cb      	bne.n	80057c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	2200      	movs	r2, #0
 8005836:	2140      	movs	r1, #64	; 0x40
 8005838:	68f8      	ldr	r0, [r7, #12]
 800583a:	f000 faeb 	bl	8005e14 <UART_WaitOnFlagUntilTimeout>
 800583e:	4603      	mov	r3, r0
 8005840:	2b00      	cmp	r3, #0
 8005842:	d005      	beq.n	8005850 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2220      	movs	r2, #32
 8005848:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 800584c:	2303      	movs	r3, #3
 800584e:	e006      	b.n	800585e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2220      	movs	r2, #32
 8005854:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005858:	2300      	movs	r3, #0
 800585a:	e000      	b.n	800585e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800585c:	2302      	movs	r3, #2
  }
}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	60f8      	str	r0, [r7, #12]
 800586e:	60b9      	str	r1, [r7, #8]
 8005870:	4613      	mov	r3, r2
 8005872:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800587a:	b2db      	uxtb	r3, r3
 800587c:	2b20      	cmp	r3, #32
 800587e:	d112      	bne.n	80058a6 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d002      	beq.n	800588c <HAL_UART_Receive_IT+0x26>
 8005886:	88fb      	ldrh	r3, [r7, #6]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e00b      	b.n	80058a8 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005896:	88fb      	ldrh	r3, [r7, #6]
 8005898:	461a      	mov	r2, r3
 800589a:	68b9      	ldr	r1, [r7, #8]
 800589c:	68f8      	ldr	r0, [r7, #12]
 800589e:	f000 fb12 	bl	8005ec6 <UART_Start_Receive_IT>
 80058a2:	4603      	mov	r3, r0
 80058a4:	e000      	b.n	80058a8 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058a6:	2302      	movs	r3, #2
  }
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b0ba      	sub	sp, #232	; 0xe8
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80058d6:	2300      	movs	r3, #0
 80058d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80058dc:	2300      	movs	r3, #0
 80058de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80058e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80058ee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10f      	bne.n	8005916 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058fa:	f003 0320 	and.w	r3, r3, #32
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d009      	beq.n	8005916 <HAL_UART_IRQHandler+0x66>
 8005902:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005906:	f003 0320 	and.w	r3, r3, #32
 800590a:	2b00      	cmp	r3, #0
 800590c:	d003      	beq.n	8005916 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 fbf2 	bl	80060f8 <UART_Receive_IT>
      return;
 8005914:	e25b      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 80de 	beq.w	8005adc <HAL_UART_IRQHandler+0x22c>
 8005920:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005934:	2b00      	cmp	r3, #0
 8005936:	f000 80d1 	beq.w	8005adc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800593a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800593e:	f003 0301 	and.w	r3, r3, #1
 8005942:	2b00      	cmp	r3, #0
 8005944:	d00b      	beq.n	800595e <HAL_UART_IRQHandler+0xae>
 8005946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800594e:	2b00      	cmp	r3, #0
 8005950:	d005      	beq.n	800595e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	f043 0201 	orr.w	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800595e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00b      	beq.n	8005982 <HAL_UART_IRQHandler+0xd2>
 800596a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800597a:	f043 0202 	orr.w	r2, r3, #2
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005986:	f003 0302 	and.w	r3, r3, #2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <HAL_UART_IRQHandler+0xf6>
 800598e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d005      	beq.n	80059a6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800599e:	f043 0204 	orr.w	r2, r3, #4
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059aa:	f003 0308 	and.w	r3, r3, #8
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d011      	beq.n	80059d6 <HAL_UART_IRQHandler+0x126>
 80059b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059b6:	f003 0320 	and.w	r3, r3, #32
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d105      	bne.n	80059ca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d005      	beq.n	80059d6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ce:	f043 0208 	orr.w	r2, r3, #8
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 81f2 	beq.w	8005dc4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80059e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059e4:	f003 0320 	and.w	r3, r3, #32
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_UART_IRQHandler+0x14e>
 80059ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059f0:	f003 0320 	and.w	r3, r3, #32
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fb7d 	bl	80060f8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
 8005a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a08:	2b40      	cmp	r3, #64	; 0x40
 8005a0a:	bf0c      	ite	eq
 8005a0c:	2301      	moveq	r3, #1
 8005a0e:	2300      	movne	r3, #0
 8005a10:	b2db      	uxtb	r3, r3
 8005a12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a1a:	f003 0308 	and.w	r3, r3, #8
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d103      	bne.n	8005a2a <HAL_UART_IRQHandler+0x17a>
 8005a22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d04f      	beq.n	8005aca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa85 	bl	8005f3a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d141      	bne.n	8005ac2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a4c:	e853 3f00 	ldrex	r3, [r3]
 8005a50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3314      	adds	r3, #20
 8005a66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005a6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005a76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005a7a:	e841 2300 	strex	r3, r2, [r1]
 8005a7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005a82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1d9      	bne.n	8005a3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d013      	beq.n	8005aba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a96:	4a7e      	ldr	r2, [pc, #504]	; (8005c90 <HAL_UART_IRQHandler+0x3e0>)
 8005a98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fd fdf7 	bl	8003692 <HAL_DMA_Abort_IT>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d016      	beq.n	8005ad8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ab0:	687a      	ldr	r2, [r7, #4]
 8005ab2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ab8:	e00e      	b.n	8005ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f994 	bl	8005de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac0:	e00a      	b.n	8005ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f990 	bl	8005de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ac8:	e006      	b.n	8005ad8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 f98c 	bl	8005de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005ad6:	e175      	b.n	8005dc4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ad8:	bf00      	nop
    return;
 8005ada:	e173      	b.n	8005dc4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	f040 814f 	bne.w	8005d84 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aea:	f003 0310 	and.w	r3, r3, #16
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 8148 	beq.w	8005d84 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af8:	f003 0310 	and.w	r3, r3, #16
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8141 	beq.w	8005d84 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b02:	2300      	movs	r3, #0
 8005b04:	60bb      	str	r3, [r7, #8]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	60bb      	str	r3, [r7, #8]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	60bb      	str	r3, [r7, #8]
 8005b16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b22:	2b40      	cmp	r3, #64	; 0x40
 8005b24:	f040 80b6 	bne.w	8005c94 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	f000 8145 	beq.w	8005dc8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b46:	429a      	cmp	r2, r3
 8005b48:	f080 813e 	bcs.w	8005dc8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b5e:	f000 8088 	beq.w	8005c72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	330c      	adds	r3, #12
 8005b68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b70:	e853 3f00 	ldrex	r3, [r3]
 8005b74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005b78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	330c      	adds	r3, #12
 8005b8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005b8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005b9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005b9e:	e841 2300 	strex	r3, r2, [r1]
 8005ba2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005ba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d1d9      	bne.n	8005b62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	3314      	adds	r3, #20
 8005bb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bb8:	e853 3f00 	ldrex	r3, [r3]
 8005bbc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bc0:	f023 0301 	bic.w	r3, r3, #1
 8005bc4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	3314      	adds	r3, #20
 8005bce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005bd2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005bd6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005bda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005bde:	e841 2300 	strex	r3, r2, [r1]
 8005be2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005be4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d1e1      	bne.n	8005bae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3314      	adds	r3, #20
 8005bf0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005bfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005bfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3314      	adds	r3, #20
 8005c0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c16:	e841 2300 	strex	r3, r2, [r1]
 8005c1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1e3      	bne.n	8005bea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	330c      	adds	r3, #12
 8005c36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c42:	f023 0310 	bic.w	r3, r3, #16
 8005c46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	330c      	adds	r3, #12
 8005c50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c54:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c5c:	e841 2300 	strex	r3, r2, [r1]
 8005c60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d1e3      	bne.n	8005c30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fd fca0 	bl	80035b2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2202      	movs	r2, #2
 8005c76:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	4619      	mov	r1, r3
 8005c88:	6878      	ldr	r0, [r7, #4]
 8005c8a:	f000 f8b7 	bl	8005dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c8e:	e09b      	b.n	8005dc8 <HAL_UART_IRQHandler+0x518>
 8005c90:	08006001 	.word	0x08006001
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c9c:	b29b      	uxth	r3, r3
 8005c9e:	1ad3      	subs	r3, r2, r3
 8005ca0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 808e 	beq.w	8005dcc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005cb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	f000 8089 	beq.w	8005dcc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	330c      	adds	r3, #12
 8005cc0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	e853 3f00 	ldrex	r3, [r3]
 8005cc8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ccc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005cd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	330c      	adds	r3, #12
 8005cda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005cde:	647a      	str	r2, [r7, #68]	; 0x44
 8005ce0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e3      	bne.n	8005cba <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3314      	adds	r3, #20
 8005cf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	623b      	str	r3, [r7, #32]
   return(result);
 8005d02:	6a3b      	ldr	r3, [r7, #32]
 8005d04:	f023 0301 	bic.w	r3, r3, #1
 8005d08:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	3314      	adds	r3, #20
 8005d12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d16:	633a      	str	r2, [r7, #48]	; 0x30
 8005d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d1e:	e841 2300 	strex	r3, r2, [r1]
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1e3      	bne.n	8005cf2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	330c      	adds	r3, #12
 8005d3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	e853 3f00 	ldrex	r3, [r3]
 8005d46:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f023 0310 	bic.w	r3, r3, #16
 8005d4e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	330c      	adds	r3, #12
 8005d58:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d5c:	61fa      	str	r2, [r7, #28]
 8005d5e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d60:	69b9      	ldr	r1, [r7, #24]
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	e841 2300 	strex	r3, r2, [r1]
 8005d68:	617b      	str	r3, [r7, #20]
   return(result);
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1e3      	bne.n	8005d38 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2202      	movs	r2, #2
 8005d74:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d76:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f83d 	bl	8005dfc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005d82:	e023      	b.n	8005dcc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <HAL_UART_IRQHandler+0x4f4>
 8005d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d003      	beq.n	8005da4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f000 f943 	bl	8006028 <UART_Transmit_IT>
    return;
 8005da2:	e014      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005da4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d00e      	beq.n	8005dce <HAL_UART_IRQHandler+0x51e>
 8005db0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f983 	bl	80060c8 <UART_EndTransmit_IT>
    return;
 8005dc2:	e004      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
    return;
 8005dc4:	bf00      	nop
 8005dc6:	e002      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
      return;
 8005dc8:	bf00      	nop
 8005dca:	e000      	b.n	8005dce <HAL_UART_IRQHandler+0x51e>
      return;
 8005dcc:	bf00      	nop
  }
}
 8005dce:	37e8      	adds	r7, #232	; 0xe8
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}

08005dd4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b083      	sub	sp, #12
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ddc:	bf00      	nop
 8005dde:	370c      	adds	r7, #12
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr

08005de8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b083      	sub	sp, #12
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005df0:	bf00      	nop
 8005df2:	370c      	adds	r7, #12
 8005df4:	46bd      	mov	sp, r7
 8005df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfa:	4770      	bx	lr

08005dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	60f8      	str	r0, [r7, #12]
 8005e1c:	60b9      	str	r1, [r7, #8]
 8005e1e:	603b      	str	r3, [r7, #0]
 8005e20:	4613      	mov	r3, r2
 8005e22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e24:	e03b      	b.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e26:	6a3b      	ldr	r3, [r7, #32]
 8005e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2c:	d037      	beq.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e2e:	f7fd faa3 	bl	8003378 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	6a3a      	ldr	r2, [r7, #32]
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d302      	bcc.n	8005e44 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e3e:	6a3b      	ldr	r3, [r7, #32]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e03a      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f003 0304 	and.w	r3, r3, #4
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d023      	beq.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2b80      	cmp	r3, #128	; 0x80
 8005e5a:	d020      	beq.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2b40      	cmp	r3, #64	; 0x40
 8005e60:	d01d      	beq.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0308 	and.w	r3, r3, #8
 8005e6c:	2b08      	cmp	r3, #8
 8005e6e:	d116      	bne.n	8005e9e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e70:	2300      	movs	r3, #0
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	617b      	str	r3, [r7, #20]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	685b      	ldr	r3, [r3, #4]
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005e86:	68f8      	ldr	r0, [r7, #12]
 8005e88:	f000 f857 	bl	8005f3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2208      	movs	r2, #8
 8005e90:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e00f      	b.n	8005ebe <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	68ba      	ldr	r2, [r7, #8]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	bf0c      	ite	eq
 8005eae:	2301      	moveq	r3, #1
 8005eb0:	2300      	movne	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	79fb      	ldrb	r3, [r7, #7]
 8005eb8:	429a      	cmp	r2, r3
 8005eba:	d0b4      	beq.n	8005e26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ec6:	b480      	push	{r7}
 8005ec8:	b085      	sub	sp, #20
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	88fa      	ldrh	r2, [r7, #6]
 8005ee4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2222      	movs	r2, #34	; 0x22
 8005ef0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d007      	beq.n	8005f0c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f0a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f042 0201 	orr.w	r2, r2, #1
 8005f1a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	68da      	ldr	r2, [r3, #12]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f042 0220 	orr.w	r2, r2, #32
 8005f2a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3714      	adds	r7, #20
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr

08005f3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f3a:	b480      	push	{r7}
 8005f3c:	b095      	sub	sp, #84	; 0x54
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	330c      	adds	r3, #12
 8005f48:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f54:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f58:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	330c      	adds	r3, #12
 8005f60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f62:	643a      	str	r2, [r7, #64]	; 0x40
 8005f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f66:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f68:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f6a:	e841 2300 	strex	r3, r2, [r1]
 8005f6e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d1e5      	bne.n	8005f42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	3314      	adds	r3, #20
 8005f7c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6a3b      	ldr	r3, [r7, #32]
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	61fb      	str	r3, [r7, #28]
   return(result);
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	f023 0301 	bic.w	r3, r3, #1
 8005f8c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	3314      	adds	r3, #20
 8005f94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005f98:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e5      	bne.n	8005f76 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fae:	2b01      	cmp	r3, #1
 8005fb0:	d119      	bne.n	8005fe6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	330c      	adds	r3, #12
 8005fb8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	f023 0310 	bic.w	r3, r3, #16
 8005fc8:	647b      	str	r3, [r7, #68]	; 0x44
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	330c      	adds	r3, #12
 8005fd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fd2:	61ba      	str	r2, [r7, #24]
 8005fd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fd6:	6979      	ldr	r1, [r7, #20]
 8005fd8:	69ba      	ldr	r2, [r7, #24]
 8005fda:	e841 2300 	strex	r3, r2, [r1]
 8005fde:	613b      	str	r3, [r7, #16]
   return(result);
 8005fe0:	693b      	ldr	r3, [r7, #16]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d1e5      	bne.n	8005fb2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2220      	movs	r2, #32
 8005fea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ff4:	bf00      	nop
 8005ff6:	3754      	adds	r7, #84	; 0x54
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	2200      	movs	r2, #0
 8006018:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f7ff fee4 	bl	8005de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006020:	bf00      	nop
 8006022:	3710      	adds	r7, #16
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006028:	b480      	push	{r7}
 800602a:	b085      	sub	sp, #20
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006036:	b2db      	uxtb	r3, r3
 8006038:	2b21      	cmp	r3, #33	; 0x21
 800603a:	d13e      	bne.n	80060ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006044:	d114      	bne.n	8006070 <UART_Transmit_IT+0x48>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	691b      	ldr	r3, [r3, #16]
 800604a:	2b00      	cmp	r3, #0
 800604c:	d110      	bne.n	8006070 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	881b      	ldrh	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006062:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	1c9a      	adds	r2, r3, #2
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	621a      	str	r2, [r3, #32]
 800606e:	e008      	b.n	8006082 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	1c59      	adds	r1, r3, #1
 8006076:	687a      	ldr	r2, [r7, #4]
 8006078:	6211      	str	r1, [r2, #32]
 800607a:	781a      	ldrb	r2, [r3, #0]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006086:	b29b      	uxth	r3, r3
 8006088:	3b01      	subs	r3, #1
 800608a:	b29b      	uxth	r3, r3
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	4619      	mov	r1, r3
 8006090:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10f      	bne.n	80060b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68da      	ldr	r2, [r3, #12]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	68da      	ldr	r2, [r3, #12]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	e000      	b.n	80060bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060ba:	2302      	movs	r3, #2
  }
}
 80060bc:	4618      	mov	r0, r3
 80060be:	3714      	adds	r7, #20
 80060c0:	46bd      	mov	sp, r7
 80060c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c6:	4770      	bx	lr

080060c8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b082      	sub	sp, #8
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	68da      	ldr	r2, [r3, #12]
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060de:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2220      	movs	r2, #32
 80060e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f7ff fe73 	bl	8005dd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060ee:	2300      	movs	r3, #0
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3708      	adds	r7, #8
 80060f4:	46bd      	mov	sp, r7
 80060f6:	bd80      	pop	{r7, pc}

080060f8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b08c      	sub	sp, #48	; 0x30
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b22      	cmp	r3, #34	; 0x22
 800610a:	f040 80ae 	bne.w	800626a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006116:	d117      	bne.n	8006148 <UART_Receive_IT+0x50>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d113      	bne.n	8006148 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006120:	2300      	movs	r3, #0
 8006122:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006128:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	685b      	ldr	r3, [r3, #4]
 8006130:	b29b      	uxth	r3, r3
 8006132:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006136:	b29a      	uxth	r2, r3
 8006138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800613a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006140:	1c9a      	adds	r2, r3, #2
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	629a      	str	r2, [r3, #40]	; 0x28
 8006146:	e026      	b.n	8006196 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800614e:	2300      	movs	r3, #0
 8006150:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	689b      	ldr	r3, [r3, #8]
 8006156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615a:	d007      	beq.n	800616c <UART_Receive_IT+0x74>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d10a      	bne.n	800617a <UART_Receive_IT+0x82>
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d106      	bne.n	800617a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	b2da      	uxtb	r2, r3
 8006174:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006176:	701a      	strb	r2, [r3, #0]
 8006178:	e008      	b.n	800618c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	b2db      	uxtb	r3, r3
 8006182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006186:	b2da      	uxtb	r2, r3
 8006188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800618a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	1c5a      	adds	r2, r3, #1
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800619a:	b29b      	uxth	r3, r3
 800619c:	3b01      	subs	r3, #1
 800619e:	b29b      	uxth	r3, r3
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	4619      	mov	r1, r3
 80061a4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d15d      	bne.n	8006266 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	68da      	ldr	r2, [r3, #12]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f022 0220 	bic.w	r2, r2, #32
 80061b8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68da      	ldr	r2, [r3, #12]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061c8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	695a      	ldr	r2, [r3, #20]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f022 0201 	bic.w	r2, r2, #1
 80061d8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2220      	movs	r2, #32
 80061de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2200      	movs	r2, #0
 80061e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d135      	bne.n	800625c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	330c      	adds	r3, #12
 80061fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	e853 3f00 	ldrex	r3, [r3]
 8006204:	613b      	str	r3, [r7, #16]
   return(result);
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	f023 0310 	bic.w	r3, r3, #16
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	330c      	adds	r3, #12
 8006214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006216:	623a      	str	r2, [r7, #32]
 8006218:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800621a:	69f9      	ldr	r1, [r7, #28]
 800621c:	6a3a      	ldr	r2, [r7, #32]
 800621e:	e841 2300 	strex	r3, r2, [r1]
 8006222:	61bb      	str	r3, [r7, #24]
   return(result);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1e5      	bne.n	80061f6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b10      	cmp	r3, #16
 8006236:	d10a      	bne.n	800624e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006238:	2300      	movs	r3, #0
 800623a:	60fb      	str	r3, [r7, #12]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	60fb      	str	r3, [r7, #12]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	60fb      	str	r3, [r7, #12]
 800624c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006252:	4619      	mov	r1, r3
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f7ff fdd1 	bl	8005dfc <HAL_UARTEx_RxEventCallback>
 800625a:	e002      	b.n	8006262 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f7fc fab5 	bl	80027cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006262:	2300      	movs	r3, #0
 8006264:	e002      	b.n	800626c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006266:	2300      	movs	r3, #0
 8006268:	e000      	b.n	800626c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800626a:	2302      	movs	r3, #2
  }
}
 800626c:	4618      	mov	r0, r3
 800626e:	3730      	adds	r7, #48	; 0x30
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006274:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006278:	b0c0      	sub	sp, #256	; 0x100
 800627a:	af00      	add	r7, sp, #0
 800627c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	691b      	ldr	r3, [r3, #16]
 8006288:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800628c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006290:	68d9      	ldr	r1, [r3, #12]
 8006292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	ea40 0301 	orr.w	r3, r0, r1
 800629c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800629e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062a8:	691b      	ldr	r3, [r3, #16]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	431a      	orrs	r2, r3
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80062cc:	f021 010c 	bic.w	r1, r1, #12
 80062d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80062da:	430b      	orrs	r3, r1
 80062dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80062de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80062ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ee:	6999      	ldr	r1, [r3, #24]
 80062f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	ea40 0301 	orr.w	r3, r0, r1
 80062fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80062fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006300:	681a      	ldr	r2, [r3, #0]
 8006302:	4b8f      	ldr	r3, [pc, #572]	; (8006540 <UART_SetConfig+0x2cc>)
 8006304:	429a      	cmp	r2, r3
 8006306:	d005      	beq.n	8006314 <UART_SetConfig+0xa0>
 8006308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	4b8d      	ldr	r3, [pc, #564]	; (8006544 <UART_SetConfig+0x2d0>)
 8006310:	429a      	cmp	r2, r3
 8006312:	d104      	bne.n	800631e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006314:	f7fd fcc4 	bl	8003ca0 <HAL_RCC_GetPCLK2Freq>
 8006318:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800631c:	e003      	b.n	8006326 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800631e:	f7fd fcab 	bl	8003c78 <HAL_RCC_GetPCLK1Freq>
 8006322:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632a:	69db      	ldr	r3, [r3, #28]
 800632c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006330:	f040 810c 	bne.w	800654c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006334:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006338:	2200      	movs	r2, #0
 800633a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800633e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006342:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006346:	4622      	mov	r2, r4
 8006348:	462b      	mov	r3, r5
 800634a:	1891      	adds	r1, r2, r2
 800634c:	65b9      	str	r1, [r7, #88]	; 0x58
 800634e:	415b      	adcs	r3, r3
 8006350:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006352:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006356:	4621      	mov	r1, r4
 8006358:	eb12 0801 	adds.w	r8, r2, r1
 800635c:	4629      	mov	r1, r5
 800635e:	eb43 0901 	adc.w	r9, r3, r1
 8006362:	f04f 0200 	mov.w	r2, #0
 8006366:	f04f 0300 	mov.w	r3, #0
 800636a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800636e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006372:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006376:	4690      	mov	r8, r2
 8006378:	4699      	mov	r9, r3
 800637a:	4623      	mov	r3, r4
 800637c:	eb18 0303 	adds.w	r3, r8, r3
 8006380:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006384:	462b      	mov	r3, r5
 8006386:	eb49 0303 	adc.w	r3, r9, r3
 800638a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800639a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800639e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063a2:	460b      	mov	r3, r1
 80063a4:	18db      	adds	r3, r3, r3
 80063a6:	653b      	str	r3, [r7, #80]	; 0x50
 80063a8:	4613      	mov	r3, r2
 80063aa:	eb42 0303 	adc.w	r3, r2, r3
 80063ae:	657b      	str	r3, [r7, #84]	; 0x54
 80063b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063b8:	f7fa fc86 	bl	8000cc8 <__aeabi_uldivmod>
 80063bc:	4602      	mov	r2, r0
 80063be:	460b      	mov	r3, r1
 80063c0:	4b61      	ldr	r3, [pc, #388]	; (8006548 <UART_SetConfig+0x2d4>)
 80063c2:	fba3 2302 	umull	r2, r3, r3, r2
 80063c6:	095b      	lsrs	r3, r3, #5
 80063c8:	011c      	lsls	r4, r3, #4
 80063ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063ce:	2200      	movs	r2, #0
 80063d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80063d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80063d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80063dc:	4642      	mov	r2, r8
 80063de:	464b      	mov	r3, r9
 80063e0:	1891      	adds	r1, r2, r2
 80063e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80063e4:	415b      	adcs	r3, r3
 80063e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80063ec:	4641      	mov	r1, r8
 80063ee:	eb12 0a01 	adds.w	sl, r2, r1
 80063f2:	4649      	mov	r1, r9
 80063f4:	eb43 0b01 	adc.w	fp, r3, r1
 80063f8:	f04f 0200 	mov.w	r2, #0
 80063fc:	f04f 0300 	mov.w	r3, #0
 8006400:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006404:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006408:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800640c:	4692      	mov	sl, r2
 800640e:	469b      	mov	fp, r3
 8006410:	4643      	mov	r3, r8
 8006412:	eb1a 0303 	adds.w	r3, sl, r3
 8006416:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800641a:	464b      	mov	r3, r9
 800641c:	eb4b 0303 	adc.w	r3, fp, r3
 8006420:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006430:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006434:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006438:	460b      	mov	r3, r1
 800643a:	18db      	adds	r3, r3, r3
 800643c:	643b      	str	r3, [r7, #64]	; 0x40
 800643e:	4613      	mov	r3, r2
 8006440:	eb42 0303 	adc.w	r3, r2, r3
 8006444:	647b      	str	r3, [r7, #68]	; 0x44
 8006446:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800644a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800644e:	f7fa fc3b 	bl	8000cc8 <__aeabi_uldivmod>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4611      	mov	r1, r2
 8006458:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <UART_SetConfig+0x2d4>)
 800645a:	fba3 2301 	umull	r2, r3, r3, r1
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	2264      	movs	r2, #100	; 0x64
 8006462:	fb02 f303 	mul.w	r3, r2, r3
 8006466:	1acb      	subs	r3, r1, r3
 8006468:	00db      	lsls	r3, r3, #3
 800646a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800646e:	4b36      	ldr	r3, [pc, #216]	; (8006548 <UART_SetConfig+0x2d4>)
 8006470:	fba3 2302 	umull	r2, r3, r3, r2
 8006474:	095b      	lsrs	r3, r3, #5
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800647c:	441c      	add	r4, r3
 800647e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006482:	2200      	movs	r2, #0
 8006484:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006488:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800648c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006490:	4642      	mov	r2, r8
 8006492:	464b      	mov	r3, r9
 8006494:	1891      	adds	r1, r2, r2
 8006496:	63b9      	str	r1, [r7, #56]	; 0x38
 8006498:	415b      	adcs	r3, r3
 800649a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800649c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064a0:	4641      	mov	r1, r8
 80064a2:	1851      	adds	r1, r2, r1
 80064a4:	6339      	str	r1, [r7, #48]	; 0x30
 80064a6:	4649      	mov	r1, r9
 80064a8:	414b      	adcs	r3, r1
 80064aa:	637b      	str	r3, [r7, #52]	; 0x34
 80064ac:	f04f 0200 	mov.w	r2, #0
 80064b0:	f04f 0300 	mov.w	r3, #0
 80064b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064b8:	4659      	mov	r1, fp
 80064ba:	00cb      	lsls	r3, r1, #3
 80064bc:	4651      	mov	r1, sl
 80064be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064c2:	4651      	mov	r1, sl
 80064c4:	00ca      	lsls	r2, r1, #3
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	4603      	mov	r3, r0
 80064cc:	4642      	mov	r2, r8
 80064ce:	189b      	adds	r3, r3, r2
 80064d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064d4:	464b      	mov	r3, r9
 80064d6:	460a      	mov	r2, r1
 80064d8:	eb42 0303 	adc.w	r3, r2, r3
 80064dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80064e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	2200      	movs	r2, #0
 80064e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80064ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80064f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80064f4:	460b      	mov	r3, r1
 80064f6:	18db      	adds	r3, r3, r3
 80064f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80064fa:	4613      	mov	r3, r2
 80064fc:	eb42 0303 	adc.w	r3, r2, r3
 8006500:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006502:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006506:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800650a:	f7fa fbdd 	bl	8000cc8 <__aeabi_uldivmod>
 800650e:	4602      	mov	r2, r0
 8006510:	460b      	mov	r3, r1
 8006512:	4b0d      	ldr	r3, [pc, #52]	; (8006548 <UART_SetConfig+0x2d4>)
 8006514:	fba3 1302 	umull	r1, r3, r3, r2
 8006518:	095b      	lsrs	r3, r3, #5
 800651a:	2164      	movs	r1, #100	; 0x64
 800651c:	fb01 f303 	mul.w	r3, r1, r3
 8006520:	1ad3      	subs	r3, r2, r3
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	3332      	adds	r3, #50	; 0x32
 8006526:	4a08      	ldr	r2, [pc, #32]	; (8006548 <UART_SetConfig+0x2d4>)
 8006528:	fba2 2303 	umull	r2, r3, r2, r3
 800652c:	095b      	lsrs	r3, r3, #5
 800652e:	f003 0207 	and.w	r2, r3, #7
 8006532:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4422      	add	r2, r4
 800653a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800653c:	e106      	b.n	800674c <UART_SetConfig+0x4d8>
 800653e:	bf00      	nop
 8006540:	40011000 	.word	0x40011000
 8006544:	40011400 	.word	0x40011400
 8006548:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800654c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006550:	2200      	movs	r2, #0
 8006552:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006556:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800655a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800655e:	4642      	mov	r2, r8
 8006560:	464b      	mov	r3, r9
 8006562:	1891      	adds	r1, r2, r2
 8006564:	6239      	str	r1, [r7, #32]
 8006566:	415b      	adcs	r3, r3
 8006568:	627b      	str	r3, [r7, #36]	; 0x24
 800656a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800656e:	4641      	mov	r1, r8
 8006570:	1854      	adds	r4, r2, r1
 8006572:	4649      	mov	r1, r9
 8006574:	eb43 0501 	adc.w	r5, r3, r1
 8006578:	f04f 0200 	mov.w	r2, #0
 800657c:	f04f 0300 	mov.w	r3, #0
 8006580:	00eb      	lsls	r3, r5, #3
 8006582:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006586:	00e2      	lsls	r2, r4, #3
 8006588:	4614      	mov	r4, r2
 800658a:	461d      	mov	r5, r3
 800658c:	4643      	mov	r3, r8
 800658e:	18e3      	adds	r3, r4, r3
 8006590:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006594:	464b      	mov	r3, r9
 8006596:	eb45 0303 	adc.w	r3, r5, r3
 800659a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800659e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065ae:	f04f 0200 	mov.w	r2, #0
 80065b2:	f04f 0300 	mov.w	r3, #0
 80065b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065ba:	4629      	mov	r1, r5
 80065bc:	008b      	lsls	r3, r1, #2
 80065be:	4621      	mov	r1, r4
 80065c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065c4:	4621      	mov	r1, r4
 80065c6:	008a      	lsls	r2, r1, #2
 80065c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80065cc:	f7fa fb7c 	bl	8000cc8 <__aeabi_uldivmod>
 80065d0:	4602      	mov	r2, r0
 80065d2:	460b      	mov	r3, r1
 80065d4:	4b60      	ldr	r3, [pc, #384]	; (8006758 <UART_SetConfig+0x4e4>)
 80065d6:	fba3 2302 	umull	r2, r3, r3, r2
 80065da:	095b      	lsrs	r3, r3, #5
 80065dc:	011c      	lsls	r4, r3, #4
 80065de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065e2:	2200      	movs	r2, #0
 80065e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80065e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80065ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80065f0:	4642      	mov	r2, r8
 80065f2:	464b      	mov	r3, r9
 80065f4:	1891      	adds	r1, r2, r2
 80065f6:	61b9      	str	r1, [r7, #24]
 80065f8:	415b      	adcs	r3, r3
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006600:	4641      	mov	r1, r8
 8006602:	1851      	adds	r1, r2, r1
 8006604:	6139      	str	r1, [r7, #16]
 8006606:	4649      	mov	r1, r9
 8006608:	414b      	adcs	r3, r1
 800660a:	617b      	str	r3, [r7, #20]
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006618:	4659      	mov	r1, fp
 800661a:	00cb      	lsls	r3, r1, #3
 800661c:	4651      	mov	r1, sl
 800661e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006622:	4651      	mov	r1, sl
 8006624:	00ca      	lsls	r2, r1, #3
 8006626:	4610      	mov	r0, r2
 8006628:	4619      	mov	r1, r3
 800662a:	4603      	mov	r3, r0
 800662c:	4642      	mov	r2, r8
 800662e:	189b      	adds	r3, r3, r2
 8006630:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006634:	464b      	mov	r3, r9
 8006636:	460a      	mov	r2, r1
 8006638:	eb42 0303 	adc.w	r3, r2, r3
 800663c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006644:	685b      	ldr	r3, [r3, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	67bb      	str	r3, [r7, #120]	; 0x78
 800664a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800664c:	f04f 0200 	mov.w	r2, #0
 8006650:	f04f 0300 	mov.w	r3, #0
 8006654:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006658:	4649      	mov	r1, r9
 800665a:	008b      	lsls	r3, r1, #2
 800665c:	4641      	mov	r1, r8
 800665e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006662:	4641      	mov	r1, r8
 8006664:	008a      	lsls	r2, r1, #2
 8006666:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800666a:	f7fa fb2d 	bl	8000cc8 <__aeabi_uldivmod>
 800666e:	4602      	mov	r2, r0
 8006670:	460b      	mov	r3, r1
 8006672:	4611      	mov	r1, r2
 8006674:	4b38      	ldr	r3, [pc, #224]	; (8006758 <UART_SetConfig+0x4e4>)
 8006676:	fba3 2301 	umull	r2, r3, r3, r1
 800667a:	095b      	lsrs	r3, r3, #5
 800667c:	2264      	movs	r2, #100	; 0x64
 800667e:	fb02 f303 	mul.w	r3, r2, r3
 8006682:	1acb      	subs	r3, r1, r3
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	3332      	adds	r3, #50	; 0x32
 8006688:	4a33      	ldr	r2, [pc, #204]	; (8006758 <UART_SetConfig+0x4e4>)
 800668a:	fba2 2303 	umull	r2, r3, r2, r3
 800668e:	095b      	lsrs	r3, r3, #5
 8006690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006694:	441c      	add	r4, r3
 8006696:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800669a:	2200      	movs	r2, #0
 800669c:	673b      	str	r3, [r7, #112]	; 0x70
 800669e:	677a      	str	r2, [r7, #116]	; 0x74
 80066a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066a4:	4642      	mov	r2, r8
 80066a6:	464b      	mov	r3, r9
 80066a8:	1891      	adds	r1, r2, r2
 80066aa:	60b9      	str	r1, [r7, #8]
 80066ac:	415b      	adcs	r3, r3
 80066ae:	60fb      	str	r3, [r7, #12]
 80066b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066b4:	4641      	mov	r1, r8
 80066b6:	1851      	adds	r1, r2, r1
 80066b8:	6039      	str	r1, [r7, #0]
 80066ba:	4649      	mov	r1, r9
 80066bc:	414b      	adcs	r3, r1
 80066be:	607b      	str	r3, [r7, #4]
 80066c0:	f04f 0200 	mov.w	r2, #0
 80066c4:	f04f 0300 	mov.w	r3, #0
 80066c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066cc:	4659      	mov	r1, fp
 80066ce:	00cb      	lsls	r3, r1, #3
 80066d0:	4651      	mov	r1, sl
 80066d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066d6:	4651      	mov	r1, sl
 80066d8:	00ca      	lsls	r2, r1, #3
 80066da:	4610      	mov	r0, r2
 80066dc:	4619      	mov	r1, r3
 80066de:	4603      	mov	r3, r0
 80066e0:	4642      	mov	r2, r8
 80066e2:	189b      	adds	r3, r3, r2
 80066e4:	66bb      	str	r3, [r7, #104]	; 0x68
 80066e6:	464b      	mov	r3, r9
 80066e8:	460a      	mov	r2, r1
 80066ea:	eb42 0303 	adc.w	r3, r2, r3
 80066ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	663b      	str	r3, [r7, #96]	; 0x60
 80066fa:	667a      	str	r2, [r7, #100]	; 0x64
 80066fc:	f04f 0200 	mov.w	r2, #0
 8006700:	f04f 0300 	mov.w	r3, #0
 8006704:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006708:	4649      	mov	r1, r9
 800670a:	008b      	lsls	r3, r1, #2
 800670c:	4641      	mov	r1, r8
 800670e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006712:	4641      	mov	r1, r8
 8006714:	008a      	lsls	r2, r1, #2
 8006716:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800671a:	f7fa fad5 	bl	8000cc8 <__aeabi_uldivmod>
 800671e:	4602      	mov	r2, r0
 8006720:	460b      	mov	r3, r1
 8006722:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <UART_SetConfig+0x4e4>)
 8006724:	fba3 1302 	umull	r1, r3, r3, r2
 8006728:	095b      	lsrs	r3, r3, #5
 800672a:	2164      	movs	r1, #100	; 0x64
 800672c:	fb01 f303 	mul.w	r3, r1, r3
 8006730:	1ad3      	subs	r3, r2, r3
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	3332      	adds	r3, #50	; 0x32
 8006736:	4a08      	ldr	r2, [pc, #32]	; (8006758 <UART_SetConfig+0x4e4>)
 8006738:	fba2 2303 	umull	r2, r3, r2, r3
 800673c:	095b      	lsrs	r3, r3, #5
 800673e:	f003 020f 	and.w	r2, r3, #15
 8006742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4422      	add	r2, r4
 800674a:	609a      	str	r2, [r3, #8]
}
 800674c:	bf00      	nop
 800674e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006752:	46bd      	mov	sp, r7
 8006754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006758:	51eb851f 	.word	0x51eb851f

0800675c <atof>:
 800675c:	2100      	movs	r1, #0
 800675e:	f000 be15 	b.w	800738c <strtod>

08006762 <sulp>:
 8006762:	b570      	push	{r4, r5, r6, lr}
 8006764:	4604      	mov	r4, r0
 8006766:	460d      	mov	r5, r1
 8006768:	ec45 4b10 	vmov	d0, r4, r5
 800676c:	4616      	mov	r6, r2
 800676e:	f003 fcdb 	bl	800a128 <__ulp>
 8006772:	ec51 0b10 	vmov	r0, r1, d0
 8006776:	b17e      	cbz	r6, 8006798 <sulp+0x36>
 8006778:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800677c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006780:	2b00      	cmp	r3, #0
 8006782:	dd09      	ble.n	8006798 <sulp+0x36>
 8006784:	051b      	lsls	r3, r3, #20
 8006786:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800678a:	2400      	movs	r4, #0
 800678c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006790:	4622      	mov	r2, r4
 8006792:	462b      	mov	r3, r5
 8006794:	f7f9 ff50 	bl	8000638 <__aeabi_dmul>
 8006798:	bd70      	pop	{r4, r5, r6, pc}
 800679a:	0000      	movs	r0, r0
 800679c:	0000      	movs	r0, r0
	...

080067a0 <_strtod_l>:
 80067a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a4:	ed2d 8b02 	vpush	{d8}
 80067a8:	b09b      	sub	sp, #108	; 0x6c
 80067aa:	4604      	mov	r4, r0
 80067ac:	9213      	str	r2, [sp, #76]	; 0x4c
 80067ae:	2200      	movs	r2, #0
 80067b0:	9216      	str	r2, [sp, #88]	; 0x58
 80067b2:	460d      	mov	r5, r1
 80067b4:	f04f 0800 	mov.w	r8, #0
 80067b8:	f04f 0900 	mov.w	r9, #0
 80067bc:	460a      	mov	r2, r1
 80067be:	9215      	str	r2, [sp, #84]	; 0x54
 80067c0:	7811      	ldrb	r1, [r2, #0]
 80067c2:	292b      	cmp	r1, #43	; 0x2b
 80067c4:	d04c      	beq.n	8006860 <_strtod_l+0xc0>
 80067c6:	d83a      	bhi.n	800683e <_strtod_l+0x9e>
 80067c8:	290d      	cmp	r1, #13
 80067ca:	d834      	bhi.n	8006836 <_strtod_l+0x96>
 80067cc:	2908      	cmp	r1, #8
 80067ce:	d834      	bhi.n	800683a <_strtod_l+0x9a>
 80067d0:	2900      	cmp	r1, #0
 80067d2:	d03d      	beq.n	8006850 <_strtod_l+0xb0>
 80067d4:	2200      	movs	r2, #0
 80067d6:	920a      	str	r2, [sp, #40]	; 0x28
 80067d8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80067da:	7832      	ldrb	r2, [r6, #0]
 80067dc:	2a30      	cmp	r2, #48	; 0x30
 80067de:	f040 80b4 	bne.w	800694a <_strtod_l+0x1aa>
 80067e2:	7872      	ldrb	r2, [r6, #1]
 80067e4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80067e8:	2a58      	cmp	r2, #88	; 0x58
 80067ea:	d170      	bne.n	80068ce <_strtod_l+0x12e>
 80067ec:	9302      	str	r3, [sp, #8]
 80067ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067f0:	9301      	str	r3, [sp, #4]
 80067f2:	ab16      	add	r3, sp, #88	; 0x58
 80067f4:	9300      	str	r3, [sp, #0]
 80067f6:	4a8e      	ldr	r2, [pc, #568]	; (8006a30 <_strtod_l+0x290>)
 80067f8:	ab17      	add	r3, sp, #92	; 0x5c
 80067fa:	a915      	add	r1, sp, #84	; 0x54
 80067fc:	4620      	mov	r0, r4
 80067fe:	f002 fd71 	bl	80092e4 <__gethex>
 8006802:	f010 070f 	ands.w	r7, r0, #15
 8006806:	4605      	mov	r5, r0
 8006808:	d005      	beq.n	8006816 <_strtod_l+0x76>
 800680a:	2f06      	cmp	r7, #6
 800680c:	d12a      	bne.n	8006864 <_strtod_l+0xc4>
 800680e:	3601      	adds	r6, #1
 8006810:	2300      	movs	r3, #0
 8006812:	9615      	str	r6, [sp, #84]	; 0x54
 8006814:	930a      	str	r3, [sp, #40]	; 0x28
 8006816:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006818:	2b00      	cmp	r3, #0
 800681a:	f040 857f 	bne.w	800731c <_strtod_l+0xb7c>
 800681e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006820:	b1db      	cbz	r3, 800685a <_strtod_l+0xba>
 8006822:	4642      	mov	r2, r8
 8006824:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006828:	ec43 2b10 	vmov	d0, r2, r3
 800682c:	b01b      	add	sp, #108	; 0x6c
 800682e:	ecbd 8b02 	vpop	{d8}
 8006832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006836:	2920      	cmp	r1, #32
 8006838:	d1cc      	bne.n	80067d4 <_strtod_l+0x34>
 800683a:	3201      	adds	r2, #1
 800683c:	e7bf      	b.n	80067be <_strtod_l+0x1e>
 800683e:	292d      	cmp	r1, #45	; 0x2d
 8006840:	d1c8      	bne.n	80067d4 <_strtod_l+0x34>
 8006842:	2101      	movs	r1, #1
 8006844:	910a      	str	r1, [sp, #40]	; 0x28
 8006846:	1c51      	adds	r1, r2, #1
 8006848:	9115      	str	r1, [sp, #84]	; 0x54
 800684a:	7852      	ldrb	r2, [r2, #1]
 800684c:	2a00      	cmp	r2, #0
 800684e:	d1c3      	bne.n	80067d8 <_strtod_l+0x38>
 8006850:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006852:	9515      	str	r5, [sp, #84]	; 0x54
 8006854:	2b00      	cmp	r3, #0
 8006856:	f040 855f 	bne.w	8007318 <_strtod_l+0xb78>
 800685a:	4642      	mov	r2, r8
 800685c:	464b      	mov	r3, r9
 800685e:	e7e3      	b.n	8006828 <_strtod_l+0x88>
 8006860:	2100      	movs	r1, #0
 8006862:	e7ef      	b.n	8006844 <_strtod_l+0xa4>
 8006864:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006866:	b13a      	cbz	r2, 8006878 <_strtod_l+0xd8>
 8006868:	2135      	movs	r1, #53	; 0x35
 800686a:	a818      	add	r0, sp, #96	; 0x60
 800686c:	f003 fd59 	bl	800a322 <__copybits>
 8006870:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006872:	4620      	mov	r0, r4
 8006874:	f003 f92c 	bl	8009ad0 <_Bfree>
 8006878:	3f01      	subs	r7, #1
 800687a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800687c:	2f04      	cmp	r7, #4
 800687e:	d806      	bhi.n	800688e <_strtod_l+0xee>
 8006880:	e8df f007 	tbb	[pc, r7]
 8006884:	201d0314 	.word	0x201d0314
 8006888:	14          	.byte	0x14
 8006889:	00          	.byte	0x00
 800688a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800688e:	05e9      	lsls	r1, r5, #23
 8006890:	bf48      	it	mi
 8006892:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8006896:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800689a:	0d1b      	lsrs	r3, r3, #20
 800689c:	051b      	lsls	r3, r3, #20
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1b9      	bne.n	8006816 <_strtod_l+0x76>
 80068a2:	f001 fda3 	bl	80083ec <__errno>
 80068a6:	2322      	movs	r3, #34	; 0x22
 80068a8:	6003      	str	r3, [r0, #0]
 80068aa:	e7b4      	b.n	8006816 <_strtod_l+0x76>
 80068ac:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80068b0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068b4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068b8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80068bc:	e7e7      	b.n	800688e <_strtod_l+0xee>
 80068be:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006a38 <_strtod_l+0x298>
 80068c2:	e7e4      	b.n	800688e <_strtod_l+0xee>
 80068c4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80068c8:	f04f 38ff 	mov.w	r8, #4294967295
 80068cc:	e7df      	b.n	800688e <_strtod_l+0xee>
 80068ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068d0:	1c5a      	adds	r2, r3, #1
 80068d2:	9215      	str	r2, [sp, #84]	; 0x54
 80068d4:	785b      	ldrb	r3, [r3, #1]
 80068d6:	2b30      	cmp	r3, #48	; 0x30
 80068d8:	d0f9      	beq.n	80068ce <_strtod_l+0x12e>
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d09b      	beq.n	8006816 <_strtod_l+0x76>
 80068de:	2301      	movs	r3, #1
 80068e0:	f04f 0a00 	mov.w	sl, #0
 80068e4:	9304      	str	r3, [sp, #16]
 80068e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80068ea:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80068ee:	46d3      	mov	fp, sl
 80068f0:	220a      	movs	r2, #10
 80068f2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80068f4:	7806      	ldrb	r6, [r0, #0]
 80068f6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80068fa:	b2d9      	uxtb	r1, r3
 80068fc:	2909      	cmp	r1, #9
 80068fe:	d926      	bls.n	800694e <_strtod_l+0x1ae>
 8006900:	494c      	ldr	r1, [pc, #304]	; (8006a34 <_strtod_l+0x294>)
 8006902:	2201      	movs	r2, #1
 8006904:	f001 fd03 	bl	800830e <strncmp>
 8006908:	2800      	cmp	r0, #0
 800690a:	d030      	beq.n	800696e <_strtod_l+0x1ce>
 800690c:	2000      	movs	r0, #0
 800690e:	4632      	mov	r2, r6
 8006910:	9005      	str	r0, [sp, #20]
 8006912:	465e      	mov	r6, fp
 8006914:	4603      	mov	r3, r0
 8006916:	2a65      	cmp	r2, #101	; 0x65
 8006918:	d001      	beq.n	800691e <_strtod_l+0x17e>
 800691a:	2a45      	cmp	r2, #69	; 0x45
 800691c:	d113      	bne.n	8006946 <_strtod_l+0x1a6>
 800691e:	b91e      	cbnz	r6, 8006928 <_strtod_l+0x188>
 8006920:	9a04      	ldr	r2, [sp, #16]
 8006922:	4302      	orrs	r2, r0
 8006924:	d094      	beq.n	8006850 <_strtod_l+0xb0>
 8006926:	2600      	movs	r6, #0
 8006928:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800692a:	1c6a      	adds	r2, r5, #1
 800692c:	9215      	str	r2, [sp, #84]	; 0x54
 800692e:	786a      	ldrb	r2, [r5, #1]
 8006930:	2a2b      	cmp	r2, #43	; 0x2b
 8006932:	d074      	beq.n	8006a1e <_strtod_l+0x27e>
 8006934:	2a2d      	cmp	r2, #45	; 0x2d
 8006936:	d078      	beq.n	8006a2a <_strtod_l+0x28a>
 8006938:	f04f 0c00 	mov.w	ip, #0
 800693c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006940:	2909      	cmp	r1, #9
 8006942:	d97f      	bls.n	8006a44 <_strtod_l+0x2a4>
 8006944:	9515      	str	r5, [sp, #84]	; 0x54
 8006946:	2700      	movs	r7, #0
 8006948:	e09e      	b.n	8006a88 <_strtod_l+0x2e8>
 800694a:	2300      	movs	r3, #0
 800694c:	e7c8      	b.n	80068e0 <_strtod_l+0x140>
 800694e:	f1bb 0f08 	cmp.w	fp, #8
 8006952:	bfd8      	it	le
 8006954:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006956:	f100 0001 	add.w	r0, r0, #1
 800695a:	bfda      	itte	le
 800695c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006960:	9309      	strle	r3, [sp, #36]	; 0x24
 8006962:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006966:	f10b 0b01 	add.w	fp, fp, #1
 800696a:	9015      	str	r0, [sp, #84]	; 0x54
 800696c:	e7c1      	b.n	80068f2 <_strtod_l+0x152>
 800696e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	9215      	str	r2, [sp, #84]	; 0x54
 8006974:	785a      	ldrb	r2, [r3, #1]
 8006976:	f1bb 0f00 	cmp.w	fp, #0
 800697a:	d037      	beq.n	80069ec <_strtod_l+0x24c>
 800697c:	9005      	str	r0, [sp, #20]
 800697e:	465e      	mov	r6, fp
 8006980:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8006984:	2b09      	cmp	r3, #9
 8006986:	d912      	bls.n	80069ae <_strtod_l+0x20e>
 8006988:	2301      	movs	r3, #1
 800698a:	e7c4      	b.n	8006916 <_strtod_l+0x176>
 800698c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800698e:	1c5a      	adds	r2, r3, #1
 8006990:	9215      	str	r2, [sp, #84]	; 0x54
 8006992:	785a      	ldrb	r2, [r3, #1]
 8006994:	3001      	adds	r0, #1
 8006996:	2a30      	cmp	r2, #48	; 0x30
 8006998:	d0f8      	beq.n	800698c <_strtod_l+0x1ec>
 800699a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800699e:	2b08      	cmp	r3, #8
 80069a0:	f200 84c1 	bhi.w	8007326 <_strtod_l+0xb86>
 80069a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069a6:	9005      	str	r0, [sp, #20]
 80069a8:	2000      	movs	r0, #0
 80069aa:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ac:	4606      	mov	r6, r0
 80069ae:	3a30      	subs	r2, #48	; 0x30
 80069b0:	f100 0301 	add.w	r3, r0, #1
 80069b4:	d014      	beq.n	80069e0 <_strtod_l+0x240>
 80069b6:	9905      	ldr	r1, [sp, #20]
 80069b8:	4419      	add	r1, r3
 80069ba:	9105      	str	r1, [sp, #20]
 80069bc:	4633      	mov	r3, r6
 80069be:	eb00 0c06 	add.w	ip, r0, r6
 80069c2:	210a      	movs	r1, #10
 80069c4:	4563      	cmp	r3, ip
 80069c6:	d113      	bne.n	80069f0 <_strtod_l+0x250>
 80069c8:	1833      	adds	r3, r6, r0
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	f106 0601 	add.w	r6, r6, #1
 80069d0:	4406      	add	r6, r0
 80069d2:	dc1a      	bgt.n	8006a0a <_strtod_l+0x26a>
 80069d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80069d6:	230a      	movs	r3, #10
 80069d8:	fb03 2301 	mla	r3, r3, r1, r2
 80069dc:	9309      	str	r3, [sp, #36]	; 0x24
 80069de:	2300      	movs	r3, #0
 80069e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80069e2:	1c51      	adds	r1, r2, #1
 80069e4:	9115      	str	r1, [sp, #84]	; 0x54
 80069e6:	7852      	ldrb	r2, [r2, #1]
 80069e8:	4618      	mov	r0, r3
 80069ea:	e7c9      	b.n	8006980 <_strtod_l+0x1e0>
 80069ec:	4658      	mov	r0, fp
 80069ee:	e7d2      	b.n	8006996 <_strtod_l+0x1f6>
 80069f0:	2b08      	cmp	r3, #8
 80069f2:	f103 0301 	add.w	r3, r3, #1
 80069f6:	dc03      	bgt.n	8006a00 <_strtod_l+0x260>
 80069f8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069fa:	434f      	muls	r7, r1
 80069fc:	9709      	str	r7, [sp, #36]	; 0x24
 80069fe:	e7e1      	b.n	80069c4 <_strtod_l+0x224>
 8006a00:	2b10      	cmp	r3, #16
 8006a02:	bfd8      	it	le
 8006a04:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006a08:	e7dc      	b.n	80069c4 <_strtod_l+0x224>
 8006a0a:	2e10      	cmp	r6, #16
 8006a0c:	bfdc      	itt	le
 8006a0e:	230a      	movle	r3, #10
 8006a10:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006a14:	e7e3      	b.n	80069de <_strtod_l+0x23e>
 8006a16:	2300      	movs	r3, #0
 8006a18:	9305      	str	r3, [sp, #20]
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	e780      	b.n	8006920 <_strtod_l+0x180>
 8006a1e:	f04f 0c00 	mov.w	ip, #0
 8006a22:	1caa      	adds	r2, r5, #2
 8006a24:	9215      	str	r2, [sp, #84]	; 0x54
 8006a26:	78aa      	ldrb	r2, [r5, #2]
 8006a28:	e788      	b.n	800693c <_strtod_l+0x19c>
 8006a2a:	f04f 0c01 	mov.w	ip, #1
 8006a2e:	e7f8      	b.n	8006a22 <_strtod_l+0x282>
 8006a30:	0800c31c 	.word	0x0800c31c
 8006a34:	0800c318 	.word	0x0800c318
 8006a38:	7ff00000 	.word	0x7ff00000
 8006a3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a3e:	1c51      	adds	r1, r2, #1
 8006a40:	9115      	str	r1, [sp, #84]	; 0x54
 8006a42:	7852      	ldrb	r2, [r2, #1]
 8006a44:	2a30      	cmp	r2, #48	; 0x30
 8006a46:	d0f9      	beq.n	8006a3c <_strtod_l+0x29c>
 8006a48:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006a4c:	2908      	cmp	r1, #8
 8006a4e:	f63f af7a 	bhi.w	8006946 <_strtod_l+0x1a6>
 8006a52:	3a30      	subs	r2, #48	; 0x30
 8006a54:	9208      	str	r2, [sp, #32]
 8006a56:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a58:	920c      	str	r2, [sp, #48]	; 0x30
 8006a5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a5c:	1c57      	adds	r7, r2, #1
 8006a5e:	9715      	str	r7, [sp, #84]	; 0x54
 8006a60:	7852      	ldrb	r2, [r2, #1]
 8006a62:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006a66:	f1be 0f09 	cmp.w	lr, #9
 8006a6a:	d938      	bls.n	8006ade <_strtod_l+0x33e>
 8006a6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a6e:	1a7f      	subs	r7, r7, r1
 8006a70:	2f08      	cmp	r7, #8
 8006a72:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006a76:	dc03      	bgt.n	8006a80 <_strtod_l+0x2e0>
 8006a78:	9908      	ldr	r1, [sp, #32]
 8006a7a:	428f      	cmp	r7, r1
 8006a7c:	bfa8      	it	ge
 8006a7e:	460f      	movge	r7, r1
 8006a80:	f1bc 0f00 	cmp.w	ip, #0
 8006a84:	d000      	beq.n	8006a88 <_strtod_l+0x2e8>
 8006a86:	427f      	negs	r7, r7
 8006a88:	2e00      	cmp	r6, #0
 8006a8a:	d14f      	bne.n	8006b2c <_strtod_l+0x38c>
 8006a8c:	9904      	ldr	r1, [sp, #16]
 8006a8e:	4301      	orrs	r1, r0
 8006a90:	f47f aec1 	bne.w	8006816 <_strtod_l+0x76>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	f47f aedb 	bne.w	8006850 <_strtod_l+0xb0>
 8006a9a:	2a69      	cmp	r2, #105	; 0x69
 8006a9c:	d029      	beq.n	8006af2 <_strtod_l+0x352>
 8006a9e:	dc26      	bgt.n	8006aee <_strtod_l+0x34e>
 8006aa0:	2a49      	cmp	r2, #73	; 0x49
 8006aa2:	d026      	beq.n	8006af2 <_strtod_l+0x352>
 8006aa4:	2a4e      	cmp	r2, #78	; 0x4e
 8006aa6:	f47f aed3 	bne.w	8006850 <_strtod_l+0xb0>
 8006aaa:	499b      	ldr	r1, [pc, #620]	; (8006d18 <_strtod_l+0x578>)
 8006aac:	a815      	add	r0, sp, #84	; 0x54
 8006aae:	f002 fe59 	bl	8009764 <__match>
 8006ab2:	2800      	cmp	r0, #0
 8006ab4:	f43f aecc 	beq.w	8006850 <_strtod_l+0xb0>
 8006ab8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b28      	cmp	r3, #40	; 0x28
 8006abe:	d12f      	bne.n	8006b20 <_strtod_l+0x380>
 8006ac0:	4996      	ldr	r1, [pc, #600]	; (8006d1c <_strtod_l+0x57c>)
 8006ac2:	aa18      	add	r2, sp, #96	; 0x60
 8006ac4:	a815      	add	r0, sp, #84	; 0x54
 8006ac6:	f002 fe61 	bl	800978c <__hexnan>
 8006aca:	2805      	cmp	r0, #5
 8006acc:	d128      	bne.n	8006b20 <_strtod_l+0x380>
 8006ace:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006ad0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006ad4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006ad8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006adc:	e69b      	b.n	8006816 <_strtod_l+0x76>
 8006ade:	9f08      	ldr	r7, [sp, #32]
 8006ae0:	210a      	movs	r1, #10
 8006ae2:	fb01 2107 	mla	r1, r1, r7, r2
 8006ae6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006aea:	9208      	str	r2, [sp, #32]
 8006aec:	e7b5      	b.n	8006a5a <_strtod_l+0x2ba>
 8006aee:	2a6e      	cmp	r2, #110	; 0x6e
 8006af0:	e7d9      	b.n	8006aa6 <_strtod_l+0x306>
 8006af2:	498b      	ldr	r1, [pc, #556]	; (8006d20 <_strtod_l+0x580>)
 8006af4:	a815      	add	r0, sp, #84	; 0x54
 8006af6:	f002 fe35 	bl	8009764 <__match>
 8006afa:	2800      	cmp	r0, #0
 8006afc:	f43f aea8 	beq.w	8006850 <_strtod_l+0xb0>
 8006b00:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b02:	4988      	ldr	r1, [pc, #544]	; (8006d24 <_strtod_l+0x584>)
 8006b04:	3b01      	subs	r3, #1
 8006b06:	a815      	add	r0, sp, #84	; 0x54
 8006b08:	9315      	str	r3, [sp, #84]	; 0x54
 8006b0a:	f002 fe2b 	bl	8009764 <__match>
 8006b0e:	b910      	cbnz	r0, 8006b16 <_strtod_l+0x376>
 8006b10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b12:	3301      	adds	r3, #1
 8006b14:	9315      	str	r3, [sp, #84]	; 0x54
 8006b16:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006d34 <_strtod_l+0x594>
 8006b1a:	f04f 0800 	mov.w	r8, #0
 8006b1e:	e67a      	b.n	8006816 <_strtod_l+0x76>
 8006b20:	4881      	ldr	r0, [pc, #516]	; (8006d28 <_strtod_l+0x588>)
 8006b22:	f001 fca1 	bl	8008468 <nan>
 8006b26:	ec59 8b10 	vmov	r8, r9, d0
 8006b2a:	e674      	b.n	8006816 <_strtod_l+0x76>
 8006b2c:	9b05      	ldr	r3, [sp, #20]
 8006b2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b30:	1afb      	subs	r3, r7, r3
 8006b32:	f1bb 0f00 	cmp.w	fp, #0
 8006b36:	bf08      	it	eq
 8006b38:	46b3      	moveq	fp, r6
 8006b3a:	2e10      	cmp	r6, #16
 8006b3c:	9308      	str	r3, [sp, #32]
 8006b3e:	4635      	mov	r5, r6
 8006b40:	bfa8      	it	ge
 8006b42:	2510      	movge	r5, #16
 8006b44:	f7f9 fcfe 	bl	8000544 <__aeabi_ui2d>
 8006b48:	2e09      	cmp	r6, #9
 8006b4a:	4680      	mov	r8, r0
 8006b4c:	4689      	mov	r9, r1
 8006b4e:	dd13      	ble.n	8006b78 <_strtod_l+0x3d8>
 8006b50:	4b76      	ldr	r3, [pc, #472]	; (8006d2c <_strtod_l+0x58c>)
 8006b52:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006b56:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006b5a:	f7f9 fd6d 	bl	8000638 <__aeabi_dmul>
 8006b5e:	4680      	mov	r8, r0
 8006b60:	4650      	mov	r0, sl
 8006b62:	4689      	mov	r9, r1
 8006b64:	f7f9 fcee 	bl	8000544 <__aeabi_ui2d>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4640      	mov	r0, r8
 8006b6e:	4649      	mov	r1, r9
 8006b70:	f7f9 fbac 	bl	80002cc <__adddf3>
 8006b74:	4680      	mov	r8, r0
 8006b76:	4689      	mov	r9, r1
 8006b78:	2e0f      	cmp	r6, #15
 8006b7a:	dc38      	bgt.n	8006bee <_strtod_l+0x44e>
 8006b7c:	9b08      	ldr	r3, [sp, #32]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	f43f ae49 	beq.w	8006816 <_strtod_l+0x76>
 8006b84:	dd24      	ble.n	8006bd0 <_strtod_l+0x430>
 8006b86:	2b16      	cmp	r3, #22
 8006b88:	dc0b      	bgt.n	8006ba2 <_strtod_l+0x402>
 8006b8a:	4968      	ldr	r1, [pc, #416]	; (8006d2c <_strtod_l+0x58c>)
 8006b8c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b94:	4642      	mov	r2, r8
 8006b96:	464b      	mov	r3, r9
 8006b98:	f7f9 fd4e 	bl	8000638 <__aeabi_dmul>
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	4689      	mov	r9, r1
 8006ba0:	e639      	b.n	8006816 <_strtod_l+0x76>
 8006ba2:	9a08      	ldr	r2, [sp, #32]
 8006ba4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	db20      	blt.n	8006bee <_strtod_l+0x44e>
 8006bac:	4c5f      	ldr	r4, [pc, #380]	; (8006d2c <_strtod_l+0x58c>)
 8006bae:	f1c6 060f 	rsb	r6, r6, #15
 8006bb2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006bb6:	4642      	mov	r2, r8
 8006bb8:	464b      	mov	r3, r9
 8006bba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bbe:	f7f9 fd3b 	bl	8000638 <__aeabi_dmul>
 8006bc2:	9b08      	ldr	r3, [sp, #32]
 8006bc4:	1b9e      	subs	r6, r3, r6
 8006bc6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006bca:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006bce:	e7e3      	b.n	8006b98 <_strtod_l+0x3f8>
 8006bd0:	9b08      	ldr	r3, [sp, #32]
 8006bd2:	3316      	adds	r3, #22
 8006bd4:	db0b      	blt.n	8006bee <_strtod_l+0x44e>
 8006bd6:	9b05      	ldr	r3, [sp, #20]
 8006bd8:	1bdf      	subs	r7, r3, r7
 8006bda:	4b54      	ldr	r3, [pc, #336]	; (8006d2c <_strtod_l+0x58c>)
 8006bdc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006be0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006be4:	4640      	mov	r0, r8
 8006be6:	4649      	mov	r1, r9
 8006be8:	f7f9 fe50 	bl	800088c <__aeabi_ddiv>
 8006bec:	e7d6      	b.n	8006b9c <_strtod_l+0x3fc>
 8006bee:	9b08      	ldr	r3, [sp, #32]
 8006bf0:	1b75      	subs	r5, r6, r5
 8006bf2:	441d      	add	r5, r3
 8006bf4:	2d00      	cmp	r5, #0
 8006bf6:	dd70      	ble.n	8006cda <_strtod_l+0x53a>
 8006bf8:	f015 030f 	ands.w	r3, r5, #15
 8006bfc:	d00a      	beq.n	8006c14 <_strtod_l+0x474>
 8006bfe:	494b      	ldr	r1, [pc, #300]	; (8006d2c <_strtod_l+0x58c>)
 8006c00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c04:	4642      	mov	r2, r8
 8006c06:	464b      	mov	r3, r9
 8006c08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c0c:	f7f9 fd14 	bl	8000638 <__aeabi_dmul>
 8006c10:	4680      	mov	r8, r0
 8006c12:	4689      	mov	r9, r1
 8006c14:	f035 050f 	bics.w	r5, r5, #15
 8006c18:	d04d      	beq.n	8006cb6 <_strtod_l+0x516>
 8006c1a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006c1e:	dd22      	ble.n	8006c66 <_strtod_l+0x4c6>
 8006c20:	2500      	movs	r5, #0
 8006c22:	46ab      	mov	fp, r5
 8006c24:	9509      	str	r5, [sp, #36]	; 0x24
 8006c26:	9505      	str	r5, [sp, #20]
 8006c28:	2322      	movs	r3, #34	; 0x22
 8006c2a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006d34 <_strtod_l+0x594>
 8006c2e:	6023      	str	r3, [r4, #0]
 8006c30:	f04f 0800 	mov.w	r8, #0
 8006c34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f43f aded 	beq.w	8006816 <_strtod_l+0x76>
 8006c3c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c3e:	4620      	mov	r0, r4
 8006c40:	f002 ff46 	bl	8009ad0 <_Bfree>
 8006c44:	9905      	ldr	r1, [sp, #20]
 8006c46:	4620      	mov	r0, r4
 8006c48:	f002 ff42 	bl	8009ad0 <_Bfree>
 8006c4c:	4659      	mov	r1, fp
 8006c4e:	4620      	mov	r0, r4
 8006c50:	f002 ff3e 	bl	8009ad0 <_Bfree>
 8006c54:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c56:	4620      	mov	r0, r4
 8006c58:	f002 ff3a 	bl	8009ad0 <_Bfree>
 8006c5c:	4629      	mov	r1, r5
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f002 ff36 	bl	8009ad0 <_Bfree>
 8006c64:	e5d7      	b.n	8006816 <_strtod_l+0x76>
 8006c66:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <_strtod_l+0x590>)
 8006c68:	9304      	str	r3, [sp, #16]
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	112d      	asrs	r5, r5, #4
 8006c6e:	4640      	mov	r0, r8
 8006c70:	4649      	mov	r1, r9
 8006c72:	469a      	mov	sl, r3
 8006c74:	2d01      	cmp	r5, #1
 8006c76:	dc21      	bgt.n	8006cbc <_strtod_l+0x51c>
 8006c78:	b10b      	cbz	r3, 8006c7e <_strtod_l+0x4de>
 8006c7a:	4680      	mov	r8, r0
 8006c7c:	4689      	mov	r9, r1
 8006c7e:	492c      	ldr	r1, [pc, #176]	; (8006d30 <_strtod_l+0x590>)
 8006c80:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006c84:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006c88:	4642      	mov	r2, r8
 8006c8a:	464b      	mov	r3, r9
 8006c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c90:	f7f9 fcd2 	bl	8000638 <__aeabi_dmul>
 8006c94:	4b27      	ldr	r3, [pc, #156]	; (8006d34 <_strtod_l+0x594>)
 8006c96:	460a      	mov	r2, r1
 8006c98:	400b      	ands	r3, r1
 8006c9a:	4927      	ldr	r1, [pc, #156]	; (8006d38 <_strtod_l+0x598>)
 8006c9c:	428b      	cmp	r3, r1
 8006c9e:	4680      	mov	r8, r0
 8006ca0:	d8be      	bhi.n	8006c20 <_strtod_l+0x480>
 8006ca2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006ca6:	428b      	cmp	r3, r1
 8006ca8:	bf86      	itte	hi
 8006caa:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006d3c <_strtod_l+0x59c>
 8006cae:	f04f 38ff 	movhi.w	r8, #4294967295
 8006cb2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	9304      	str	r3, [sp, #16]
 8006cba:	e07b      	b.n	8006db4 <_strtod_l+0x614>
 8006cbc:	07ea      	lsls	r2, r5, #31
 8006cbe:	d505      	bpl.n	8006ccc <_strtod_l+0x52c>
 8006cc0:	9b04      	ldr	r3, [sp, #16]
 8006cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc6:	f7f9 fcb7 	bl	8000638 <__aeabi_dmul>
 8006cca:	2301      	movs	r3, #1
 8006ccc:	9a04      	ldr	r2, [sp, #16]
 8006cce:	3208      	adds	r2, #8
 8006cd0:	f10a 0a01 	add.w	sl, sl, #1
 8006cd4:	106d      	asrs	r5, r5, #1
 8006cd6:	9204      	str	r2, [sp, #16]
 8006cd8:	e7cc      	b.n	8006c74 <_strtod_l+0x4d4>
 8006cda:	d0ec      	beq.n	8006cb6 <_strtod_l+0x516>
 8006cdc:	426d      	negs	r5, r5
 8006cde:	f015 020f 	ands.w	r2, r5, #15
 8006ce2:	d00a      	beq.n	8006cfa <_strtod_l+0x55a>
 8006ce4:	4b11      	ldr	r3, [pc, #68]	; (8006d2c <_strtod_l+0x58c>)
 8006ce6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006cea:	4640      	mov	r0, r8
 8006cec:	4649      	mov	r1, r9
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	f7f9 fdcb 	bl	800088c <__aeabi_ddiv>
 8006cf6:	4680      	mov	r8, r0
 8006cf8:	4689      	mov	r9, r1
 8006cfa:	112d      	asrs	r5, r5, #4
 8006cfc:	d0db      	beq.n	8006cb6 <_strtod_l+0x516>
 8006cfe:	2d1f      	cmp	r5, #31
 8006d00:	dd1e      	ble.n	8006d40 <_strtod_l+0x5a0>
 8006d02:	2500      	movs	r5, #0
 8006d04:	46ab      	mov	fp, r5
 8006d06:	9509      	str	r5, [sp, #36]	; 0x24
 8006d08:	9505      	str	r5, [sp, #20]
 8006d0a:	2322      	movs	r3, #34	; 0x22
 8006d0c:	f04f 0800 	mov.w	r8, #0
 8006d10:	f04f 0900 	mov.w	r9, #0
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	e78d      	b.n	8006c34 <_strtod_l+0x494>
 8006d18:	0800c37d 	.word	0x0800c37d
 8006d1c:	0800c330 	.word	0x0800c330
 8006d20:	0800c375 	.word	0x0800c375
 8006d24:	0800c3b4 	.word	0x0800c3b4
 8006d28:	0800c741 	.word	0x0800c741
 8006d2c:	0800c520 	.word	0x0800c520
 8006d30:	0800c4f8 	.word	0x0800c4f8
 8006d34:	7ff00000 	.word	0x7ff00000
 8006d38:	7ca00000 	.word	0x7ca00000
 8006d3c:	7fefffff 	.word	0x7fefffff
 8006d40:	f015 0310 	ands.w	r3, r5, #16
 8006d44:	bf18      	it	ne
 8006d46:	236a      	movne	r3, #106	; 0x6a
 8006d48:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80070ec <_strtod_l+0x94c>
 8006d4c:	9304      	str	r3, [sp, #16]
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4649      	mov	r1, r9
 8006d52:	2300      	movs	r3, #0
 8006d54:	07ea      	lsls	r2, r5, #31
 8006d56:	d504      	bpl.n	8006d62 <_strtod_l+0x5c2>
 8006d58:	e9da 2300 	ldrd	r2, r3, [sl]
 8006d5c:	f7f9 fc6c 	bl	8000638 <__aeabi_dmul>
 8006d60:	2301      	movs	r3, #1
 8006d62:	106d      	asrs	r5, r5, #1
 8006d64:	f10a 0a08 	add.w	sl, sl, #8
 8006d68:	d1f4      	bne.n	8006d54 <_strtod_l+0x5b4>
 8006d6a:	b10b      	cbz	r3, 8006d70 <_strtod_l+0x5d0>
 8006d6c:	4680      	mov	r8, r0
 8006d6e:	4689      	mov	r9, r1
 8006d70:	9b04      	ldr	r3, [sp, #16]
 8006d72:	b1bb      	cbz	r3, 8006da4 <_strtod_l+0x604>
 8006d74:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006d78:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	4649      	mov	r1, r9
 8006d80:	dd10      	ble.n	8006da4 <_strtod_l+0x604>
 8006d82:	2b1f      	cmp	r3, #31
 8006d84:	f340 811e 	ble.w	8006fc4 <_strtod_l+0x824>
 8006d88:	2b34      	cmp	r3, #52	; 0x34
 8006d8a:	bfde      	ittt	le
 8006d8c:	f04f 33ff 	movle.w	r3, #4294967295
 8006d90:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006d94:	4093      	lslle	r3, r2
 8006d96:	f04f 0800 	mov.w	r8, #0
 8006d9a:	bfcc      	ite	gt
 8006d9c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006da0:	ea03 0901 	andle.w	r9, r3, r1
 8006da4:	2200      	movs	r2, #0
 8006da6:	2300      	movs	r3, #0
 8006da8:	4640      	mov	r0, r8
 8006daa:	4649      	mov	r1, r9
 8006dac:	f7f9 feac 	bl	8000b08 <__aeabi_dcmpeq>
 8006db0:	2800      	cmp	r0, #0
 8006db2:	d1a6      	bne.n	8006d02 <_strtod_l+0x562>
 8006db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dba:	4633      	mov	r3, r6
 8006dbc:	465a      	mov	r2, fp
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f002 feee 	bl	8009ba0 <__s2b>
 8006dc4:	9009      	str	r0, [sp, #36]	; 0x24
 8006dc6:	2800      	cmp	r0, #0
 8006dc8:	f43f af2a 	beq.w	8006c20 <_strtod_l+0x480>
 8006dcc:	9a08      	ldr	r2, [sp, #32]
 8006dce:	9b05      	ldr	r3, [sp, #20]
 8006dd0:	2a00      	cmp	r2, #0
 8006dd2:	eba3 0307 	sub.w	r3, r3, r7
 8006dd6:	bfa8      	it	ge
 8006dd8:	2300      	movge	r3, #0
 8006dda:	930c      	str	r3, [sp, #48]	; 0x30
 8006ddc:	2500      	movs	r5, #0
 8006dde:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006de2:	9312      	str	r3, [sp, #72]	; 0x48
 8006de4:	46ab      	mov	fp, r5
 8006de6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de8:	4620      	mov	r0, r4
 8006dea:	6859      	ldr	r1, [r3, #4]
 8006dec:	f002 fe30 	bl	8009a50 <_Balloc>
 8006df0:	9005      	str	r0, [sp, #20]
 8006df2:	2800      	cmp	r0, #0
 8006df4:	f43f af18 	beq.w	8006c28 <_strtod_l+0x488>
 8006df8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	3202      	adds	r2, #2
 8006dfe:	f103 010c 	add.w	r1, r3, #12
 8006e02:	0092      	lsls	r2, r2, #2
 8006e04:	300c      	adds	r0, #12
 8006e06:	f001 fb1e 	bl	8008446 <memcpy>
 8006e0a:	ec49 8b10 	vmov	d0, r8, r9
 8006e0e:	aa18      	add	r2, sp, #96	; 0x60
 8006e10:	a917      	add	r1, sp, #92	; 0x5c
 8006e12:	4620      	mov	r0, r4
 8006e14:	f003 f9f8 	bl	800a208 <__d2b>
 8006e18:	ec49 8b18 	vmov	d8, r8, r9
 8006e1c:	9016      	str	r0, [sp, #88]	; 0x58
 8006e1e:	2800      	cmp	r0, #0
 8006e20:	f43f af02 	beq.w	8006c28 <_strtod_l+0x488>
 8006e24:	2101      	movs	r1, #1
 8006e26:	4620      	mov	r0, r4
 8006e28:	f002 ff52 	bl	8009cd0 <__i2b>
 8006e2c:	4683      	mov	fp, r0
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	f43f aefa 	beq.w	8006c28 <_strtod_l+0x488>
 8006e34:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006e36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e38:	2e00      	cmp	r6, #0
 8006e3a:	bfab      	itete	ge
 8006e3c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006e3e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006e40:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006e42:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006e46:	bfac      	ite	ge
 8006e48:	eb06 0a03 	addge.w	sl, r6, r3
 8006e4c:	1b9f      	sublt	r7, r3, r6
 8006e4e:	9b04      	ldr	r3, [sp, #16]
 8006e50:	1af6      	subs	r6, r6, r3
 8006e52:	4416      	add	r6, r2
 8006e54:	4ba0      	ldr	r3, [pc, #640]	; (80070d8 <_strtod_l+0x938>)
 8006e56:	3e01      	subs	r6, #1
 8006e58:	429e      	cmp	r6, r3
 8006e5a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e5e:	f280 80c4 	bge.w	8006fea <_strtod_l+0x84a>
 8006e62:	1b9b      	subs	r3, r3, r6
 8006e64:	2b1f      	cmp	r3, #31
 8006e66:	eba2 0203 	sub.w	r2, r2, r3
 8006e6a:	f04f 0101 	mov.w	r1, #1
 8006e6e:	f300 80b0 	bgt.w	8006fd2 <_strtod_l+0x832>
 8006e72:	fa01 f303 	lsl.w	r3, r1, r3
 8006e76:	930e      	str	r3, [sp, #56]	; 0x38
 8006e78:	2300      	movs	r3, #0
 8006e7a:	930d      	str	r3, [sp, #52]	; 0x34
 8006e7c:	eb0a 0602 	add.w	r6, sl, r2
 8006e80:	9b04      	ldr	r3, [sp, #16]
 8006e82:	45b2      	cmp	sl, r6
 8006e84:	4417      	add	r7, r2
 8006e86:	441f      	add	r7, r3
 8006e88:	4653      	mov	r3, sl
 8006e8a:	bfa8      	it	ge
 8006e8c:	4633      	movge	r3, r6
 8006e8e:	42bb      	cmp	r3, r7
 8006e90:	bfa8      	it	ge
 8006e92:	463b      	movge	r3, r7
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	bfc2      	ittt	gt
 8006e98:	1af6      	subgt	r6, r6, r3
 8006e9a:	1aff      	subgt	r7, r7, r3
 8006e9c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006ea0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	dd17      	ble.n	8006ed6 <_strtod_l+0x736>
 8006ea6:	4659      	mov	r1, fp
 8006ea8:	461a      	mov	r2, r3
 8006eaa:	4620      	mov	r0, r4
 8006eac:	f002 ffd0 	bl	8009e50 <__pow5mult>
 8006eb0:	4683      	mov	fp, r0
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	f43f aeb8 	beq.w	8006c28 <_strtod_l+0x488>
 8006eb8:	4601      	mov	r1, r0
 8006eba:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	f002 ff1d 	bl	8009cfc <__multiply>
 8006ec2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	f43f aeaf 	beq.w	8006c28 <_strtod_l+0x488>
 8006eca:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006ecc:	4620      	mov	r0, r4
 8006ece:	f002 fdff 	bl	8009ad0 <_Bfree>
 8006ed2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006ed4:	9316      	str	r3, [sp, #88]	; 0x58
 8006ed6:	2e00      	cmp	r6, #0
 8006ed8:	f300 808c 	bgt.w	8006ff4 <_strtod_l+0x854>
 8006edc:	9b08      	ldr	r3, [sp, #32]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	dd08      	ble.n	8006ef4 <_strtod_l+0x754>
 8006ee2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006ee4:	9905      	ldr	r1, [sp, #20]
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f002 ffb2 	bl	8009e50 <__pow5mult>
 8006eec:	9005      	str	r0, [sp, #20]
 8006eee:	2800      	cmp	r0, #0
 8006ef0:	f43f ae9a 	beq.w	8006c28 <_strtod_l+0x488>
 8006ef4:	2f00      	cmp	r7, #0
 8006ef6:	dd08      	ble.n	8006f0a <_strtod_l+0x76a>
 8006ef8:	9905      	ldr	r1, [sp, #20]
 8006efa:	463a      	mov	r2, r7
 8006efc:	4620      	mov	r0, r4
 8006efe:	f003 f801 	bl	8009f04 <__lshift>
 8006f02:	9005      	str	r0, [sp, #20]
 8006f04:	2800      	cmp	r0, #0
 8006f06:	f43f ae8f 	beq.w	8006c28 <_strtod_l+0x488>
 8006f0a:	f1ba 0f00 	cmp.w	sl, #0
 8006f0e:	dd08      	ble.n	8006f22 <_strtod_l+0x782>
 8006f10:	4659      	mov	r1, fp
 8006f12:	4652      	mov	r2, sl
 8006f14:	4620      	mov	r0, r4
 8006f16:	f002 fff5 	bl	8009f04 <__lshift>
 8006f1a:	4683      	mov	fp, r0
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	f43f ae83 	beq.w	8006c28 <_strtod_l+0x488>
 8006f22:	9a05      	ldr	r2, [sp, #20]
 8006f24:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f26:	4620      	mov	r0, r4
 8006f28:	f003 f874 	bl	800a014 <__mdiff>
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	2800      	cmp	r0, #0
 8006f30:	f43f ae7a 	beq.w	8006c28 <_strtod_l+0x488>
 8006f34:	68c3      	ldr	r3, [r0, #12]
 8006f36:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f38:	2300      	movs	r3, #0
 8006f3a:	60c3      	str	r3, [r0, #12]
 8006f3c:	4659      	mov	r1, fp
 8006f3e:	f003 f84d 	bl	8009fdc <__mcmp>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	da60      	bge.n	8007008 <_strtod_l+0x868>
 8006f46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f48:	ea53 0308 	orrs.w	r3, r3, r8
 8006f4c:	f040 8084 	bne.w	8007058 <_strtod_l+0x8b8>
 8006f50:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d17f      	bne.n	8007058 <_strtod_l+0x8b8>
 8006f58:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f5c:	0d1b      	lsrs	r3, r3, #20
 8006f5e:	051b      	lsls	r3, r3, #20
 8006f60:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f64:	d978      	bls.n	8007058 <_strtod_l+0x8b8>
 8006f66:	696b      	ldr	r3, [r5, #20]
 8006f68:	b913      	cbnz	r3, 8006f70 <_strtod_l+0x7d0>
 8006f6a:	692b      	ldr	r3, [r5, #16]
 8006f6c:	2b01      	cmp	r3, #1
 8006f6e:	dd73      	ble.n	8007058 <_strtod_l+0x8b8>
 8006f70:	4629      	mov	r1, r5
 8006f72:	2201      	movs	r2, #1
 8006f74:	4620      	mov	r0, r4
 8006f76:	f002 ffc5 	bl	8009f04 <__lshift>
 8006f7a:	4659      	mov	r1, fp
 8006f7c:	4605      	mov	r5, r0
 8006f7e:	f003 f82d 	bl	8009fdc <__mcmp>
 8006f82:	2800      	cmp	r0, #0
 8006f84:	dd68      	ble.n	8007058 <_strtod_l+0x8b8>
 8006f86:	9904      	ldr	r1, [sp, #16]
 8006f88:	4a54      	ldr	r2, [pc, #336]	; (80070dc <_strtod_l+0x93c>)
 8006f8a:	464b      	mov	r3, r9
 8006f8c:	2900      	cmp	r1, #0
 8006f8e:	f000 8084 	beq.w	800709a <_strtod_l+0x8fa>
 8006f92:	ea02 0109 	and.w	r1, r2, r9
 8006f96:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006f9a:	dc7e      	bgt.n	800709a <_strtod_l+0x8fa>
 8006f9c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006fa0:	f77f aeb3 	ble.w	8006d0a <_strtod_l+0x56a>
 8006fa4:	4b4e      	ldr	r3, [pc, #312]	; (80070e0 <_strtod_l+0x940>)
 8006fa6:	4640      	mov	r0, r8
 8006fa8:	4649      	mov	r1, r9
 8006faa:	2200      	movs	r2, #0
 8006fac:	f7f9 fb44 	bl	8000638 <__aeabi_dmul>
 8006fb0:	4b4a      	ldr	r3, [pc, #296]	; (80070dc <_strtod_l+0x93c>)
 8006fb2:	400b      	ands	r3, r1
 8006fb4:	4680      	mov	r8, r0
 8006fb6:	4689      	mov	r9, r1
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	f47f ae3f 	bne.w	8006c3c <_strtod_l+0x49c>
 8006fbe:	2322      	movs	r3, #34	; 0x22
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	e63b      	b.n	8006c3c <_strtod_l+0x49c>
 8006fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8006fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006fcc:	ea03 0808 	and.w	r8, r3, r8
 8006fd0:	e6e8      	b.n	8006da4 <_strtod_l+0x604>
 8006fd2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8006fd6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8006fda:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8006fde:	36e2      	adds	r6, #226	; 0xe2
 8006fe0:	fa01 f306 	lsl.w	r3, r1, r6
 8006fe4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8006fe8:	e748      	b.n	8006e7c <_strtod_l+0x6dc>
 8006fea:	2100      	movs	r1, #0
 8006fec:	2301      	movs	r3, #1
 8006fee:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8006ff2:	e743      	b.n	8006e7c <_strtod_l+0x6dc>
 8006ff4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006ff6:	4632      	mov	r2, r6
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f002 ff83 	bl	8009f04 <__lshift>
 8006ffe:	9016      	str	r0, [sp, #88]	; 0x58
 8007000:	2800      	cmp	r0, #0
 8007002:	f47f af6b 	bne.w	8006edc <_strtod_l+0x73c>
 8007006:	e60f      	b.n	8006c28 <_strtod_l+0x488>
 8007008:	46ca      	mov	sl, r9
 800700a:	d171      	bne.n	80070f0 <_strtod_l+0x950>
 800700c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800700e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007012:	b352      	cbz	r2, 800706a <_strtod_l+0x8ca>
 8007014:	4a33      	ldr	r2, [pc, #204]	; (80070e4 <_strtod_l+0x944>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d12a      	bne.n	8007070 <_strtod_l+0x8d0>
 800701a:	9b04      	ldr	r3, [sp, #16]
 800701c:	4641      	mov	r1, r8
 800701e:	b1fb      	cbz	r3, 8007060 <_strtod_l+0x8c0>
 8007020:	4b2e      	ldr	r3, [pc, #184]	; (80070dc <_strtod_l+0x93c>)
 8007022:	ea09 0303 	and.w	r3, r9, r3
 8007026:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800702a:	f04f 32ff 	mov.w	r2, #4294967295
 800702e:	d81a      	bhi.n	8007066 <_strtod_l+0x8c6>
 8007030:	0d1b      	lsrs	r3, r3, #20
 8007032:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007036:	fa02 f303 	lsl.w	r3, r2, r3
 800703a:	4299      	cmp	r1, r3
 800703c:	d118      	bne.n	8007070 <_strtod_l+0x8d0>
 800703e:	4b2a      	ldr	r3, [pc, #168]	; (80070e8 <_strtod_l+0x948>)
 8007040:	459a      	cmp	sl, r3
 8007042:	d102      	bne.n	800704a <_strtod_l+0x8aa>
 8007044:	3101      	adds	r1, #1
 8007046:	f43f adef 	beq.w	8006c28 <_strtod_l+0x488>
 800704a:	4b24      	ldr	r3, [pc, #144]	; (80070dc <_strtod_l+0x93c>)
 800704c:	ea0a 0303 	and.w	r3, sl, r3
 8007050:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007054:	f04f 0800 	mov.w	r8, #0
 8007058:	9b04      	ldr	r3, [sp, #16]
 800705a:	2b00      	cmp	r3, #0
 800705c:	d1a2      	bne.n	8006fa4 <_strtod_l+0x804>
 800705e:	e5ed      	b.n	8006c3c <_strtod_l+0x49c>
 8007060:	f04f 33ff 	mov.w	r3, #4294967295
 8007064:	e7e9      	b.n	800703a <_strtod_l+0x89a>
 8007066:	4613      	mov	r3, r2
 8007068:	e7e7      	b.n	800703a <_strtod_l+0x89a>
 800706a:	ea53 0308 	orrs.w	r3, r3, r8
 800706e:	d08a      	beq.n	8006f86 <_strtod_l+0x7e6>
 8007070:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007072:	b1e3      	cbz	r3, 80070ae <_strtod_l+0x90e>
 8007074:	ea13 0f0a 	tst.w	r3, sl
 8007078:	d0ee      	beq.n	8007058 <_strtod_l+0x8b8>
 800707a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800707c:	9a04      	ldr	r2, [sp, #16]
 800707e:	4640      	mov	r0, r8
 8007080:	4649      	mov	r1, r9
 8007082:	b1c3      	cbz	r3, 80070b6 <_strtod_l+0x916>
 8007084:	f7ff fb6d 	bl	8006762 <sulp>
 8007088:	4602      	mov	r2, r0
 800708a:	460b      	mov	r3, r1
 800708c:	ec51 0b18 	vmov	r0, r1, d8
 8007090:	f7f9 f91c 	bl	80002cc <__adddf3>
 8007094:	4680      	mov	r8, r0
 8007096:	4689      	mov	r9, r1
 8007098:	e7de      	b.n	8007058 <_strtod_l+0x8b8>
 800709a:	4013      	ands	r3, r2
 800709c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80070a0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80070a4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80070a8:	f04f 38ff 	mov.w	r8, #4294967295
 80070ac:	e7d4      	b.n	8007058 <_strtod_l+0x8b8>
 80070ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070b0:	ea13 0f08 	tst.w	r3, r8
 80070b4:	e7e0      	b.n	8007078 <_strtod_l+0x8d8>
 80070b6:	f7ff fb54 	bl	8006762 <sulp>
 80070ba:	4602      	mov	r2, r0
 80070bc:	460b      	mov	r3, r1
 80070be:	ec51 0b18 	vmov	r0, r1, d8
 80070c2:	f7f9 f901 	bl	80002c8 <__aeabi_dsub>
 80070c6:	2200      	movs	r2, #0
 80070c8:	2300      	movs	r3, #0
 80070ca:	4680      	mov	r8, r0
 80070cc:	4689      	mov	r9, r1
 80070ce:	f7f9 fd1b 	bl	8000b08 <__aeabi_dcmpeq>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d0c0      	beq.n	8007058 <_strtod_l+0x8b8>
 80070d6:	e618      	b.n	8006d0a <_strtod_l+0x56a>
 80070d8:	fffffc02 	.word	0xfffffc02
 80070dc:	7ff00000 	.word	0x7ff00000
 80070e0:	39500000 	.word	0x39500000
 80070e4:	000fffff 	.word	0x000fffff
 80070e8:	7fefffff 	.word	0x7fefffff
 80070ec:	0800c348 	.word	0x0800c348
 80070f0:	4659      	mov	r1, fp
 80070f2:	4628      	mov	r0, r5
 80070f4:	f003 f8e2 	bl	800a2bc <__ratio>
 80070f8:	ec57 6b10 	vmov	r6, r7, d0
 80070fc:	ee10 0a10 	vmov	r0, s0
 8007100:	2200      	movs	r2, #0
 8007102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007106:	4639      	mov	r1, r7
 8007108:	f7f9 fd12 	bl	8000b30 <__aeabi_dcmple>
 800710c:	2800      	cmp	r0, #0
 800710e:	d071      	beq.n	80071f4 <_strtod_l+0xa54>
 8007110:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007112:	2b00      	cmp	r3, #0
 8007114:	d17c      	bne.n	8007210 <_strtod_l+0xa70>
 8007116:	f1b8 0f00 	cmp.w	r8, #0
 800711a:	d15a      	bne.n	80071d2 <_strtod_l+0xa32>
 800711c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007120:	2b00      	cmp	r3, #0
 8007122:	d15d      	bne.n	80071e0 <_strtod_l+0xa40>
 8007124:	4b90      	ldr	r3, [pc, #576]	; (8007368 <_strtod_l+0xbc8>)
 8007126:	2200      	movs	r2, #0
 8007128:	4630      	mov	r0, r6
 800712a:	4639      	mov	r1, r7
 800712c:	f7f9 fcf6 	bl	8000b1c <__aeabi_dcmplt>
 8007130:	2800      	cmp	r0, #0
 8007132:	d15c      	bne.n	80071ee <_strtod_l+0xa4e>
 8007134:	4630      	mov	r0, r6
 8007136:	4639      	mov	r1, r7
 8007138:	4b8c      	ldr	r3, [pc, #560]	; (800736c <_strtod_l+0xbcc>)
 800713a:	2200      	movs	r2, #0
 800713c:	f7f9 fa7c 	bl	8000638 <__aeabi_dmul>
 8007140:	4606      	mov	r6, r0
 8007142:	460f      	mov	r7, r1
 8007144:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007148:	9606      	str	r6, [sp, #24]
 800714a:	9307      	str	r3, [sp, #28]
 800714c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007150:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007154:	4b86      	ldr	r3, [pc, #536]	; (8007370 <_strtod_l+0xbd0>)
 8007156:	ea0a 0303 	and.w	r3, sl, r3
 800715a:	930d      	str	r3, [sp, #52]	; 0x34
 800715c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800715e:	4b85      	ldr	r3, [pc, #532]	; (8007374 <_strtod_l+0xbd4>)
 8007160:	429a      	cmp	r2, r3
 8007162:	f040 8090 	bne.w	8007286 <_strtod_l+0xae6>
 8007166:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800716a:	ec49 8b10 	vmov	d0, r8, r9
 800716e:	f002 ffdb 	bl	800a128 <__ulp>
 8007172:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007176:	ec51 0b10 	vmov	r0, r1, d0
 800717a:	f7f9 fa5d 	bl	8000638 <__aeabi_dmul>
 800717e:	4642      	mov	r2, r8
 8007180:	464b      	mov	r3, r9
 8007182:	f7f9 f8a3 	bl	80002cc <__adddf3>
 8007186:	460b      	mov	r3, r1
 8007188:	4979      	ldr	r1, [pc, #484]	; (8007370 <_strtod_l+0xbd0>)
 800718a:	4a7b      	ldr	r2, [pc, #492]	; (8007378 <_strtod_l+0xbd8>)
 800718c:	4019      	ands	r1, r3
 800718e:	4291      	cmp	r1, r2
 8007190:	4680      	mov	r8, r0
 8007192:	d944      	bls.n	800721e <_strtod_l+0xa7e>
 8007194:	ee18 2a90 	vmov	r2, s17
 8007198:	4b78      	ldr	r3, [pc, #480]	; (800737c <_strtod_l+0xbdc>)
 800719a:	429a      	cmp	r2, r3
 800719c:	d104      	bne.n	80071a8 <_strtod_l+0xa08>
 800719e:	ee18 3a10 	vmov	r3, s16
 80071a2:	3301      	adds	r3, #1
 80071a4:	f43f ad40 	beq.w	8006c28 <_strtod_l+0x488>
 80071a8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800737c <_strtod_l+0xbdc>
 80071ac:	f04f 38ff 	mov.w	r8, #4294967295
 80071b0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80071b2:	4620      	mov	r0, r4
 80071b4:	f002 fc8c 	bl	8009ad0 <_Bfree>
 80071b8:	9905      	ldr	r1, [sp, #20]
 80071ba:	4620      	mov	r0, r4
 80071bc:	f002 fc88 	bl	8009ad0 <_Bfree>
 80071c0:	4659      	mov	r1, fp
 80071c2:	4620      	mov	r0, r4
 80071c4:	f002 fc84 	bl	8009ad0 <_Bfree>
 80071c8:	4629      	mov	r1, r5
 80071ca:	4620      	mov	r0, r4
 80071cc:	f002 fc80 	bl	8009ad0 <_Bfree>
 80071d0:	e609      	b.n	8006de6 <_strtod_l+0x646>
 80071d2:	f1b8 0f01 	cmp.w	r8, #1
 80071d6:	d103      	bne.n	80071e0 <_strtod_l+0xa40>
 80071d8:	f1b9 0f00 	cmp.w	r9, #0
 80071dc:	f43f ad95 	beq.w	8006d0a <_strtod_l+0x56a>
 80071e0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007338 <_strtod_l+0xb98>
 80071e4:	4f60      	ldr	r7, [pc, #384]	; (8007368 <_strtod_l+0xbc8>)
 80071e6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071ea:	2600      	movs	r6, #0
 80071ec:	e7ae      	b.n	800714c <_strtod_l+0x9ac>
 80071ee:	4f5f      	ldr	r7, [pc, #380]	; (800736c <_strtod_l+0xbcc>)
 80071f0:	2600      	movs	r6, #0
 80071f2:	e7a7      	b.n	8007144 <_strtod_l+0x9a4>
 80071f4:	4b5d      	ldr	r3, [pc, #372]	; (800736c <_strtod_l+0xbcc>)
 80071f6:	4630      	mov	r0, r6
 80071f8:	4639      	mov	r1, r7
 80071fa:	2200      	movs	r2, #0
 80071fc:	f7f9 fa1c 	bl	8000638 <__aeabi_dmul>
 8007200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007202:	4606      	mov	r6, r0
 8007204:	460f      	mov	r7, r1
 8007206:	2b00      	cmp	r3, #0
 8007208:	d09c      	beq.n	8007144 <_strtod_l+0x9a4>
 800720a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800720e:	e79d      	b.n	800714c <_strtod_l+0x9ac>
 8007210:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007340 <_strtod_l+0xba0>
 8007214:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007218:	ec57 6b17 	vmov	r6, r7, d7
 800721c:	e796      	b.n	800714c <_strtod_l+0x9ac>
 800721e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007222:	9b04      	ldr	r3, [sp, #16]
 8007224:	46ca      	mov	sl, r9
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1c2      	bne.n	80071b0 <_strtod_l+0xa10>
 800722a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800722e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007230:	0d1b      	lsrs	r3, r3, #20
 8007232:	051b      	lsls	r3, r3, #20
 8007234:	429a      	cmp	r2, r3
 8007236:	d1bb      	bne.n	80071b0 <_strtod_l+0xa10>
 8007238:	4630      	mov	r0, r6
 800723a:	4639      	mov	r1, r7
 800723c:	f7f9 fd5c 	bl	8000cf8 <__aeabi_d2lz>
 8007240:	f7f9 f9cc 	bl	80005dc <__aeabi_l2d>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4630      	mov	r0, r6
 800724a:	4639      	mov	r1, r7
 800724c:	f7f9 f83c 	bl	80002c8 <__aeabi_dsub>
 8007250:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007252:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007256:	ea43 0308 	orr.w	r3, r3, r8
 800725a:	4313      	orrs	r3, r2
 800725c:	4606      	mov	r6, r0
 800725e:	460f      	mov	r7, r1
 8007260:	d054      	beq.n	800730c <_strtod_l+0xb6c>
 8007262:	a339      	add	r3, pc, #228	; (adr r3, 8007348 <_strtod_l+0xba8>)
 8007264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007268:	f7f9 fc58 	bl	8000b1c <__aeabi_dcmplt>
 800726c:	2800      	cmp	r0, #0
 800726e:	f47f ace5 	bne.w	8006c3c <_strtod_l+0x49c>
 8007272:	a337      	add	r3, pc, #220	; (adr r3, 8007350 <_strtod_l+0xbb0>)
 8007274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007278:	4630      	mov	r0, r6
 800727a:	4639      	mov	r1, r7
 800727c:	f7f9 fc6c 	bl	8000b58 <__aeabi_dcmpgt>
 8007280:	2800      	cmp	r0, #0
 8007282:	d095      	beq.n	80071b0 <_strtod_l+0xa10>
 8007284:	e4da      	b.n	8006c3c <_strtod_l+0x49c>
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	b333      	cbz	r3, 80072d8 <_strtod_l+0xb38>
 800728a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800728c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007290:	d822      	bhi.n	80072d8 <_strtod_l+0xb38>
 8007292:	a331      	add	r3, pc, #196	; (adr r3, 8007358 <_strtod_l+0xbb8>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	4630      	mov	r0, r6
 800729a:	4639      	mov	r1, r7
 800729c:	f7f9 fc48 	bl	8000b30 <__aeabi_dcmple>
 80072a0:	b1a0      	cbz	r0, 80072cc <_strtod_l+0xb2c>
 80072a2:	4639      	mov	r1, r7
 80072a4:	4630      	mov	r0, r6
 80072a6:	f7f9 fc9f 	bl	8000be8 <__aeabi_d2uiz>
 80072aa:	2801      	cmp	r0, #1
 80072ac:	bf38      	it	cc
 80072ae:	2001      	movcc	r0, #1
 80072b0:	f7f9 f948 	bl	8000544 <__aeabi_ui2d>
 80072b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072b6:	4606      	mov	r6, r0
 80072b8:	460f      	mov	r7, r1
 80072ba:	bb23      	cbnz	r3, 8007306 <_strtod_l+0xb66>
 80072bc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072c0:	9010      	str	r0, [sp, #64]	; 0x40
 80072c2:	9311      	str	r3, [sp, #68]	; 0x44
 80072c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80072cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80072d0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80072d4:	1a9b      	subs	r3, r3, r2
 80072d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80072d8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80072dc:	eeb0 0a48 	vmov.f32	s0, s16
 80072e0:	eef0 0a68 	vmov.f32	s1, s17
 80072e4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80072e8:	f002 ff1e 	bl	800a128 <__ulp>
 80072ec:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80072f0:	ec53 2b10 	vmov	r2, r3, d0
 80072f4:	f7f9 f9a0 	bl	8000638 <__aeabi_dmul>
 80072f8:	ec53 2b18 	vmov	r2, r3, d8
 80072fc:	f7f8 ffe6 	bl	80002cc <__adddf3>
 8007300:	4680      	mov	r8, r0
 8007302:	4689      	mov	r9, r1
 8007304:	e78d      	b.n	8007222 <_strtod_l+0xa82>
 8007306:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800730a:	e7db      	b.n	80072c4 <_strtod_l+0xb24>
 800730c:	a314      	add	r3, pc, #80	; (adr r3, 8007360 <_strtod_l+0xbc0>)
 800730e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007312:	f7f9 fc03 	bl	8000b1c <__aeabi_dcmplt>
 8007316:	e7b3      	b.n	8007280 <_strtod_l+0xae0>
 8007318:	2300      	movs	r3, #0
 800731a:	930a      	str	r3, [sp, #40]	; 0x28
 800731c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800731e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	f7ff ba7c 	b.w	800681e <_strtod_l+0x7e>
 8007326:	2a65      	cmp	r2, #101	; 0x65
 8007328:	f43f ab75 	beq.w	8006a16 <_strtod_l+0x276>
 800732c:	2a45      	cmp	r2, #69	; 0x45
 800732e:	f43f ab72 	beq.w	8006a16 <_strtod_l+0x276>
 8007332:	2301      	movs	r3, #1
 8007334:	f7ff bbaa 	b.w	8006a8c <_strtod_l+0x2ec>
 8007338:	00000000 	.word	0x00000000
 800733c:	bff00000 	.word	0xbff00000
 8007340:	00000000 	.word	0x00000000
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	94a03595 	.word	0x94a03595
 800734c:	3fdfffff 	.word	0x3fdfffff
 8007350:	35afe535 	.word	0x35afe535
 8007354:	3fe00000 	.word	0x3fe00000
 8007358:	ffc00000 	.word	0xffc00000
 800735c:	41dfffff 	.word	0x41dfffff
 8007360:	94a03595 	.word	0x94a03595
 8007364:	3fcfffff 	.word	0x3fcfffff
 8007368:	3ff00000 	.word	0x3ff00000
 800736c:	3fe00000 	.word	0x3fe00000
 8007370:	7ff00000 	.word	0x7ff00000
 8007374:	7fe00000 	.word	0x7fe00000
 8007378:	7c9fffff 	.word	0x7c9fffff
 800737c:	7fefffff 	.word	0x7fefffff

08007380 <_strtod_r>:
 8007380:	4b01      	ldr	r3, [pc, #4]	; (8007388 <_strtod_r+0x8>)
 8007382:	f7ff ba0d 	b.w	80067a0 <_strtod_l>
 8007386:	bf00      	nop
 8007388:	20000050 	.word	0x20000050

0800738c <strtod>:
 800738c:	460a      	mov	r2, r1
 800738e:	4601      	mov	r1, r0
 8007390:	4802      	ldr	r0, [pc, #8]	; (800739c <strtod+0x10>)
 8007392:	4b03      	ldr	r3, [pc, #12]	; (80073a0 <strtod+0x14>)
 8007394:	6800      	ldr	r0, [r0, #0]
 8007396:	f7ff ba03 	b.w	80067a0 <_strtod_l>
 800739a:	bf00      	nop
 800739c:	20000208 	.word	0x20000208
 80073a0:	20000050 	.word	0x20000050

080073a4 <__cvt>:
 80073a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073a8:	ec55 4b10 	vmov	r4, r5, d0
 80073ac:	2d00      	cmp	r5, #0
 80073ae:	460e      	mov	r6, r1
 80073b0:	4619      	mov	r1, r3
 80073b2:	462b      	mov	r3, r5
 80073b4:	bfbb      	ittet	lt
 80073b6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073ba:	461d      	movlt	r5, r3
 80073bc:	2300      	movge	r3, #0
 80073be:	232d      	movlt	r3, #45	; 0x2d
 80073c0:	700b      	strb	r3, [r1, #0]
 80073c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073c4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073c8:	4691      	mov	r9, r2
 80073ca:	f023 0820 	bic.w	r8, r3, #32
 80073ce:	bfbc      	itt	lt
 80073d0:	4622      	movlt	r2, r4
 80073d2:	4614      	movlt	r4, r2
 80073d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80073d8:	d005      	beq.n	80073e6 <__cvt+0x42>
 80073da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80073de:	d100      	bne.n	80073e2 <__cvt+0x3e>
 80073e0:	3601      	adds	r6, #1
 80073e2:	2102      	movs	r1, #2
 80073e4:	e000      	b.n	80073e8 <__cvt+0x44>
 80073e6:	2103      	movs	r1, #3
 80073e8:	ab03      	add	r3, sp, #12
 80073ea:	9301      	str	r3, [sp, #4]
 80073ec:	ab02      	add	r3, sp, #8
 80073ee:	9300      	str	r3, [sp, #0]
 80073f0:	ec45 4b10 	vmov	d0, r4, r5
 80073f4:	4653      	mov	r3, sl
 80073f6:	4632      	mov	r2, r6
 80073f8:	f001 f8ce 	bl	8008598 <_dtoa_r>
 80073fc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007400:	4607      	mov	r7, r0
 8007402:	d102      	bne.n	800740a <__cvt+0x66>
 8007404:	f019 0f01 	tst.w	r9, #1
 8007408:	d022      	beq.n	8007450 <__cvt+0xac>
 800740a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800740e:	eb07 0906 	add.w	r9, r7, r6
 8007412:	d110      	bne.n	8007436 <__cvt+0x92>
 8007414:	783b      	ldrb	r3, [r7, #0]
 8007416:	2b30      	cmp	r3, #48	; 0x30
 8007418:	d10a      	bne.n	8007430 <__cvt+0x8c>
 800741a:	2200      	movs	r2, #0
 800741c:	2300      	movs	r3, #0
 800741e:	4620      	mov	r0, r4
 8007420:	4629      	mov	r1, r5
 8007422:	f7f9 fb71 	bl	8000b08 <__aeabi_dcmpeq>
 8007426:	b918      	cbnz	r0, 8007430 <__cvt+0x8c>
 8007428:	f1c6 0601 	rsb	r6, r6, #1
 800742c:	f8ca 6000 	str.w	r6, [sl]
 8007430:	f8da 3000 	ldr.w	r3, [sl]
 8007434:	4499      	add	r9, r3
 8007436:	2200      	movs	r2, #0
 8007438:	2300      	movs	r3, #0
 800743a:	4620      	mov	r0, r4
 800743c:	4629      	mov	r1, r5
 800743e:	f7f9 fb63 	bl	8000b08 <__aeabi_dcmpeq>
 8007442:	b108      	cbz	r0, 8007448 <__cvt+0xa4>
 8007444:	f8cd 900c 	str.w	r9, [sp, #12]
 8007448:	2230      	movs	r2, #48	; 0x30
 800744a:	9b03      	ldr	r3, [sp, #12]
 800744c:	454b      	cmp	r3, r9
 800744e:	d307      	bcc.n	8007460 <__cvt+0xbc>
 8007450:	9b03      	ldr	r3, [sp, #12]
 8007452:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007454:	1bdb      	subs	r3, r3, r7
 8007456:	4638      	mov	r0, r7
 8007458:	6013      	str	r3, [r2, #0]
 800745a:	b004      	add	sp, #16
 800745c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007460:	1c59      	adds	r1, r3, #1
 8007462:	9103      	str	r1, [sp, #12]
 8007464:	701a      	strb	r2, [r3, #0]
 8007466:	e7f0      	b.n	800744a <__cvt+0xa6>

08007468 <__exponent>:
 8007468:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800746a:	4603      	mov	r3, r0
 800746c:	2900      	cmp	r1, #0
 800746e:	bfb8      	it	lt
 8007470:	4249      	neglt	r1, r1
 8007472:	f803 2b02 	strb.w	r2, [r3], #2
 8007476:	bfb4      	ite	lt
 8007478:	222d      	movlt	r2, #45	; 0x2d
 800747a:	222b      	movge	r2, #43	; 0x2b
 800747c:	2909      	cmp	r1, #9
 800747e:	7042      	strb	r2, [r0, #1]
 8007480:	dd2a      	ble.n	80074d8 <__exponent+0x70>
 8007482:	f10d 0207 	add.w	r2, sp, #7
 8007486:	4617      	mov	r7, r2
 8007488:	260a      	movs	r6, #10
 800748a:	4694      	mov	ip, r2
 800748c:	fb91 f5f6 	sdiv	r5, r1, r6
 8007490:	fb06 1415 	mls	r4, r6, r5, r1
 8007494:	3430      	adds	r4, #48	; 0x30
 8007496:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800749a:	460c      	mov	r4, r1
 800749c:	2c63      	cmp	r4, #99	; 0x63
 800749e:	f102 32ff 	add.w	r2, r2, #4294967295
 80074a2:	4629      	mov	r1, r5
 80074a4:	dcf1      	bgt.n	800748a <__exponent+0x22>
 80074a6:	3130      	adds	r1, #48	; 0x30
 80074a8:	f1ac 0402 	sub.w	r4, ip, #2
 80074ac:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074b0:	1c41      	adds	r1, r0, #1
 80074b2:	4622      	mov	r2, r4
 80074b4:	42ba      	cmp	r2, r7
 80074b6:	d30a      	bcc.n	80074ce <__exponent+0x66>
 80074b8:	f10d 0209 	add.w	r2, sp, #9
 80074bc:	eba2 020c 	sub.w	r2, r2, ip
 80074c0:	42bc      	cmp	r4, r7
 80074c2:	bf88      	it	hi
 80074c4:	2200      	movhi	r2, #0
 80074c6:	4413      	add	r3, r2
 80074c8:	1a18      	subs	r0, r3, r0
 80074ca:	b003      	add	sp, #12
 80074cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074ce:	f812 5b01 	ldrb.w	r5, [r2], #1
 80074d2:	f801 5f01 	strb.w	r5, [r1, #1]!
 80074d6:	e7ed      	b.n	80074b4 <__exponent+0x4c>
 80074d8:	2330      	movs	r3, #48	; 0x30
 80074da:	3130      	adds	r1, #48	; 0x30
 80074dc:	7083      	strb	r3, [r0, #2]
 80074de:	70c1      	strb	r1, [r0, #3]
 80074e0:	1d03      	adds	r3, r0, #4
 80074e2:	e7f1      	b.n	80074c8 <__exponent+0x60>

080074e4 <_printf_float>:
 80074e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e8:	ed2d 8b02 	vpush	{d8}
 80074ec:	b08d      	sub	sp, #52	; 0x34
 80074ee:	460c      	mov	r4, r1
 80074f0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80074f4:	4616      	mov	r6, r2
 80074f6:	461f      	mov	r7, r3
 80074f8:	4605      	mov	r5, r0
 80074fa:	f000 ff2d 	bl	8008358 <_localeconv_r>
 80074fe:	f8d0 a000 	ldr.w	sl, [r0]
 8007502:	4650      	mov	r0, sl
 8007504:	f7f8 fed4 	bl	80002b0 <strlen>
 8007508:	2300      	movs	r3, #0
 800750a:	930a      	str	r3, [sp, #40]	; 0x28
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	9305      	str	r3, [sp, #20]
 8007510:	f8d8 3000 	ldr.w	r3, [r8]
 8007514:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007518:	3307      	adds	r3, #7
 800751a:	f023 0307 	bic.w	r3, r3, #7
 800751e:	f103 0208 	add.w	r2, r3, #8
 8007522:	f8c8 2000 	str.w	r2, [r8]
 8007526:	e9d3 8900 	ldrd	r8, r9, [r3]
 800752a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800752e:	9307      	str	r3, [sp, #28]
 8007530:	f8cd 8018 	str.w	r8, [sp, #24]
 8007534:	ee08 0a10 	vmov	s16, r0
 8007538:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800753c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007540:	4b9e      	ldr	r3, [pc, #632]	; (80077bc <_printf_float+0x2d8>)
 8007542:	f04f 32ff 	mov.w	r2, #4294967295
 8007546:	f7f9 fb11 	bl	8000b6c <__aeabi_dcmpun>
 800754a:	bb88      	cbnz	r0, 80075b0 <_printf_float+0xcc>
 800754c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007550:	4b9a      	ldr	r3, [pc, #616]	; (80077bc <_printf_float+0x2d8>)
 8007552:	f04f 32ff 	mov.w	r2, #4294967295
 8007556:	f7f9 faeb 	bl	8000b30 <__aeabi_dcmple>
 800755a:	bb48      	cbnz	r0, 80075b0 <_printf_float+0xcc>
 800755c:	2200      	movs	r2, #0
 800755e:	2300      	movs	r3, #0
 8007560:	4640      	mov	r0, r8
 8007562:	4649      	mov	r1, r9
 8007564:	f7f9 fada 	bl	8000b1c <__aeabi_dcmplt>
 8007568:	b110      	cbz	r0, 8007570 <_printf_float+0x8c>
 800756a:	232d      	movs	r3, #45	; 0x2d
 800756c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007570:	4a93      	ldr	r2, [pc, #588]	; (80077c0 <_printf_float+0x2dc>)
 8007572:	4b94      	ldr	r3, [pc, #592]	; (80077c4 <_printf_float+0x2e0>)
 8007574:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007578:	bf94      	ite	ls
 800757a:	4690      	movls	r8, r2
 800757c:	4698      	movhi	r8, r3
 800757e:	2303      	movs	r3, #3
 8007580:	6123      	str	r3, [r4, #16]
 8007582:	9b05      	ldr	r3, [sp, #20]
 8007584:	f023 0304 	bic.w	r3, r3, #4
 8007588:	6023      	str	r3, [r4, #0]
 800758a:	f04f 0900 	mov.w	r9, #0
 800758e:	9700      	str	r7, [sp, #0]
 8007590:	4633      	mov	r3, r6
 8007592:	aa0b      	add	r2, sp, #44	; 0x2c
 8007594:	4621      	mov	r1, r4
 8007596:	4628      	mov	r0, r5
 8007598:	f000 f9da 	bl	8007950 <_printf_common>
 800759c:	3001      	adds	r0, #1
 800759e:	f040 8090 	bne.w	80076c2 <_printf_float+0x1de>
 80075a2:	f04f 30ff 	mov.w	r0, #4294967295
 80075a6:	b00d      	add	sp, #52	; 0x34
 80075a8:	ecbd 8b02 	vpop	{d8}
 80075ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b0:	4642      	mov	r2, r8
 80075b2:	464b      	mov	r3, r9
 80075b4:	4640      	mov	r0, r8
 80075b6:	4649      	mov	r1, r9
 80075b8:	f7f9 fad8 	bl	8000b6c <__aeabi_dcmpun>
 80075bc:	b140      	cbz	r0, 80075d0 <_printf_float+0xec>
 80075be:	464b      	mov	r3, r9
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	bfbc      	itt	lt
 80075c4:	232d      	movlt	r3, #45	; 0x2d
 80075c6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075ca:	4a7f      	ldr	r2, [pc, #508]	; (80077c8 <_printf_float+0x2e4>)
 80075cc:	4b7f      	ldr	r3, [pc, #508]	; (80077cc <_printf_float+0x2e8>)
 80075ce:	e7d1      	b.n	8007574 <_printf_float+0x90>
 80075d0:	6863      	ldr	r3, [r4, #4]
 80075d2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80075d6:	9206      	str	r2, [sp, #24]
 80075d8:	1c5a      	adds	r2, r3, #1
 80075da:	d13f      	bne.n	800765c <_printf_float+0x178>
 80075dc:	2306      	movs	r3, #6
 80075de:	6063      	str	r3, [r4, #4]
 80075e0:	9b05      	ldr	r3, [sp, #20]
 80075e2:	6861      	ldr	r1, [r4, #4]
 80075e4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80075e8:	2300      	movs	r3, #0
 80075ea:	9303      	str	r3, [sp, #12]
 80075ec:	ab0a      	add	r3, sp, #40	; 0x28
 80075ee:	e9cd b301 	strd	fp, r3, [sp, #4]
 80075f2:	ab09      	add	r3, sp, #36	; 0x24
 80075f4:	ec49 8b10 	vmov	d0, r8, r9
 80075f8:	9300      	str	r3, [sp, #0]
 80075fa:	6022      	str	r2, [r4, #0]
 80075fc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007600:	4628      	mov	r0, r5
 8007602:	f7ff fecf 	bl	80073a4 <__cvt>
 8007606:	9b06      	ldr	r3, [sp, #24]
 8007608:	9909      	ldr	r1, [sp, #36]	; 0x24
 800760a:	2b47      	cmp	r3, #71	; 0x47
 800760c:	4680      	mov	r8, r0
 800760e:	d108      	bne.n	8007622 <_printf_float+0x13e>
 8007610:	1cc8      	adds	r0, r1, #3
 8007612:	db02      	blt.n	800761a <_printf_float+0x136>
 8007614:	6863      	ldr	r3, [r4, #4]
 8007616:	4299      	cmp	r1, r3
 8007618:	dd41      	ble.n	800769e <_printf_float+0x1ba>
 800761a:	f1ab 0302 	sub.w	r3, fp, #2
 800761e:	fa5f fb83 	uxtb.w	fp, r3
 8007622:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007626:	d820      	bhi.n	800766a <_printf_float+0x186>
 8007628:	3901      	subs	r1, #1
 800762a:	465a      	mov	r2, fp
 800762c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007630:	9109      	str	r1, [sp, #36]	; 0x24
 8007632:	f7ff ff19 	bl	8007468 <__exponent>
 8007636:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007638:	1813      	adds	r3, r2, r0
 800763a:	2a01      	cmp	r2, #1
 800763c:	4681      	mov	r9, r0
 800763e:	6123      	str	r3, [r4, #16]
 8007640:	dc02      	bgt.n	8007648 <_printf_float+0x164>
 8007642:	6822      	ldr	r2, [r4, #0]
 8007644:	07d2      	lsls	r2, r2, #31
 8007646:	d501      	bpl.n	800764c <_printf_float+0x168>
 8007648:	3301      	adds	r3, #1
 800764a:	6123      	str	r3, [r4, #16]
 800764c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007650:	2b00      	cmp	r3, #0
 8007652:	d09c      	beq.n	800758e <_printf_float+0xaa>
 8007654:	232d      	movs	r3, #45	; 0x2d
 8007656:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800765a:	e798      	b.n	800758e <_printf_float+0xaa>
 800765c:	9a06      	ldr	r2, [sp, #24]
 800765e:	2a47      	cmp	r2, #71	; 0x47
 8007660:	d1be      	bne.n	80075e0 <_printf_float+0xfc>
 8007662:	2b00      	cmp	r3, #0
 8007664:	d1bc      	bne.n	80075e0 <_printf_float+0xfc>
 8007666:	2301      	movs	r3, #1
 8007668:	e7b9      	b.n	80075de <_printf_float+0xfa>
 800766a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800766e:	d118      	bne.n	80076a2 <_printf_float+0x1be>
 8007670:	2900      	cmp	r1, #0
 8007672:	6863      	ldr	r3, [r4, #4]
 8007674:	dd0b      	ble.n	800768e <_printf_float+0x1aa>
 8007676:	6121      	str	r1, [r4, #16]
 8007678:	b913      	cbnz	r3, 8007680 <_printf_float+0x19c>
 800767a:	6822      	ldr	r2, [r4, #0]
 800767c:	07d0      	lsls	r0, r2, #31
 800767e:	d502      	bpl.n	8007686 <_printf_float+0x1a2>
 8007680:	3301      	adds	r3, #1
 8007682:	440b      	add	r3, r1
 8007684:	6123      	str	r3, [r4, #16]
 8007686:	65a1      	str	r1, [r4, #88]	; 0x58
 8007688:	f04f 0900 	mov.w	r9, #0
 800768c:	e7de      	b.n	800764c <_printf_float+0x168>
 800768e:	b913      	cbnz	r3, 8007696 <_printf_float+0x1b2>
 8007690:	6822      	ldr	r2, [r4, #0]
 8007692:	07d2      	lsls	r2, r2, #31
 8007694:	d501      	bpl.n	800769a <_printf_float+0x1b6>
 8007696:	3302      	adds	r3, #2
 8007698:	e7f4      	b.n	8007684 <_printf_float+0x1a0>
 800769a:	2301      	movs	r3, #1
 800769c:	e7f2      	b.n	8007684 <_printf_float+0x1a0>
 800769e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a4:	4299      	cmp	r1, r3
 80076a6:	db05      	blt.n	80076b4 <_printf_float+0x1d0>
 80076a8:	6823      	ldr	r3, [r4, #0]
 80076aa:	6121      	str	r1, [r4, #16]
 80076ac:	07d8      	lsls	r0, r3, #31
 80076ae:	d5ea      	bpl.n	8007686 <_printf_float+0x1a2>
 80076b0:	1c4b      	adds	r3, r1, #1
 80076b2:	e7e7      	b.n	8007684 <_printf_float+0x1a0>
 80076b4:	2900      	cmp	r1, #0
 80076b6:	bfd4      	ite	le
 80076b8:	f1c1 0202 	rsble	r2, r1, #2
 80076bc:	2201      	movgt	r2, #1
 80076be:	4413      	add	r3, r2
 80076c0:	e7e0      	b.n	8007684 <_printf_float+0x1a0>
 80076c2:	6823      	ldr	r3, [r4, #0]
 80076c4:	055a      	lsls	r2, r3, #21
 80076c6:	d407      	bmi.n	80076d8 <_printf_float+0x1f4>
 80076c8:	6923      	ldr	r3, [r4, #16]
 80076ca:	4642      	mov	r2, r8
 80076cc:	4631      	mov	r1, r6
 80076ce:	4628      	mov	r0, r5
 80076d0:	47b8      	blx	r7
 80076d2:	3001      	adds	r0, #1
 80076d4:	d12c      	bne.n	8007730 <_printf_float+0x24c>
 80076d6:	e764      	b.n	80075a2 <_printf_float+0xbe>
 80076d8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80076dc:	f240 80e0 	bls.w	80078a0 <_printf_float+0x3bc>
 80076e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80076e4:	2200      	movs	r2, #0
 80076e6:	2300      	movs	r3, #0
 80076e8:	f7f9 fa0e 	bl	8000b08 <__aeabi_dcmpeq>
 80076ec:	2800      	cmp	r0, #0
 80076ee:	d034      	beq.n	800775a <_printf_float+0x276>
 80076f0:	4a37      	ldr	r2, [pc, #220]	; (80077d0 <_printf_float+0x2ec>)
 80076f2:	2301      	movs	r3, #1
 80076f4:	4631      	mov	r1, r6
 80076f6:	4628      	mov	r0, r5
 80076f8:	47b8      	blx	r7
 80076fa:	3001      	adds	r0, #1
 80076fc:	f43f af51 	beq.w	80075a2 <_printf_float+0xbe>
 8007700:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007704:	429a      	cmp	r2, r3
 8007706:	db02      	blt.n	800770e <_printf_float+0x22a>
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	07d8      	lsls	r0, r3, #31
 800770c:	d510      	bpl.n	8007730 <_printf_float+0x24c>
 800770e:	ee18 3a10 	vmov	r3, s16
 8007712:	4652      	mov	r2, sl
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	f43f af41 	beq.w	80075a2 <_printf_float+0xbe>
 8007720:	f04f 0800 	mov.w	r8, #0
 8007724:	f104 091a 	add.w	r9, r4, #26
 8007728:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800772a:	3b01      	subs	r3, #1
 800772c:	4543      	cmp	r3, r8
 800772e:	dc09      	bgt.n	8007744 <_printf_float+0x260>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	079b      	lsls	r3, r3, #30
 8007734:	f100 8107 	bmi.w	8007946 <_printf_float+0x462>
 8007738:	68e0      	ldr	r0, [r4, #12]
 800773a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800773c:	4298      	cmp	r0, r3
 800773e:	bfb8      	it	lt
 8007740:	4618      	movlt	r0, r3
 8007742:	e730      	b.n	80075a6 <_printf_float+0xc2>
 8007744:	2301      	movs	r3, #1
 8007746:	464a      	mov	r2, r9
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af27 	beq.w	80075a2 <_printf_float+0xbe>
 8007754:	f108 0801 	add.w	r8, r8, #1
 8007758:	e7e6      	b.n	8007728 <_printf_float+0x244>
 800775a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	dc39      	bgt.n	80077d4 <_printf_float+0x2f0>
 8007760:	4a1b      	ldr	r2, [pc, #108]	; (80077d0 <_printf_float+0x2ec>)
 8007762:	2301      	movs	r3, #1
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	f43f af19 	beq.w	80075a2 <_printf_float+0xbe>
 8007770:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007774:	4313      	orrs	r3, r2
 8007776:	d102      	bne.n	800777e <_printf_float+0x29a>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	07d9      	lsls	r1, r3, #31
 800777c:	d5d8      	bpl.n	8007730 <_printf_float+0x24c>
 800777e:	ee18 3a10 	vmov	r3, s16
 8007782:	4652      	mov	r2, sl
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	f43f af09 	beq.w	80075a2 <_printf_float+0xbe>
 8007790:	f04f 0900 	mov.w	r9, #0
 8007794:	f104 0a1a 	add.w	sl, r4, #26
 8007798:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800779a:	425b      	negs	r3, r3
 800779c:	454b      	cmp	r3, r9
 800779e:	dc01      	bgt.n	80077a4 <_printf_float+0x2c0>
 80077a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a2:	e792      	b.n	80076ca <_printf_float+0x1e6>
 80077a4:	2301      	movs	r3, #1
 80077a6:	4652      	mov	r2, sl
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b8      	blx	r7
 80077ae:	3001      	adds	r0, #1
 80077b0:	f43f aef7 	beq.w	80075a2 <_printf_float+0xbe>
 80077b4:	f109 0901 	add.w	r9, r9, #1
 80077b8:	e7ee      	b.n	8007798 <_printf_float+0x2b4>
 80077ba:	bf00      	nop
 80077bc:	7fefffff 	.word	0x7fefffff
 80077c0:	0800c370 	.word	0x0800c370
 80077c4:	0800c374 	.word	0x0800c374
 80077c8:	0800c378 	.word	0x0800c378
 80077cc:	0800c37c 	.word	0x0800c37c
 80077d0:	0800c380 	.word	0x0800c380
 80077d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80077d6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077d8:	429a      	cmp	r2, r3
 80077da:	bfa8      	it	ge
 80077dc:	461a      	movge	r2, r3
 80077de:	2a00      	cmp	r2, #0
 80077e0:	4691      	mov	r9, r2
 80077e2:	dc37      	bgt.n	8007854 <_printf_float+0x370>
 80077e4:	f04f 0b00 	mov.w	fp, #0
 80077e8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077ec:	f104 021a 	add.w	r2, r4, #26
 80077f0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80077f2:	9305      	str	r3, [sp, #20]
 80077f4:	eba3 0309 	sub.w	r3, r3, r9
 80077f8:	455b      	cmp	r3, fp
 80077fa:	dc33      	bgt.n	8007864 <_printf_float+0x380>
 80077fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007800:	429a      	cmp	r2, r3
 8007802:	db3b      	blt.n	800787c <_printf_float+0x398>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	07da      	lsls	r2, r3, #31
 8007808:	d438      	bmi.n	800787c <_printf_float+0x398>
 800780a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800780e:	eba2 0903 	sub.w	r9, r2, r3
 8007812:	9b05      	ldr	r3, [sp, #20]
 8007814:	1ad2      	subs	r2, r2, r3
 8007816:	4591      	cmp	r9, r2
 8007818:	bfa8      	it	ge
 800781a:	4691      	movge	r9, r2
 800781c:	f1b9 0f00 	cmp.w	r9, #0
 8007820:	dc35      	bgt.n	800788e <_printf_float+0x3aa>
 8007822:	f04f 0800 	mov.w	r8, #0
 8007826:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800782a:	f104 0a1a 	add.w	sl, r4, #26
 800782e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007832:	1a9b      	subs	r3, r3, r2
 8007834:	eba3 0309 	sub.w	r3, r3, r9
 8007838:	4543      	cmp	r3, r8
 800783a:	f77f af79 	ble.w	8007730 <_printf_float+0x24c>
 800783e:	2301      	movs	r3, #1
 8007840:	4652      	mov	r2, sl
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	f43f aeaa 	beq.w	80075a2 <_printf_float+0xbe>
 800784e:	f108 0801 	add.w	r8, r8, #1
 8007852:	e7ec      	b.n	800782e <_printf_float+0x34a>
 8007854:	4613      	mov	r3, r2
 8007856:	4631      	mov	r1, r6
 8007858:	4642      	mov	r2, r8
 800785a:	4628      	mov	r0, r5
 800785c:	47b8      	blx	r7
 800785e:	3001      	adds	r0, #1
 8007860:	d1c0      	bne.n	80077e4 <_printf_float+0x300>
 8007862:	e69e      	b.n	80075a2 <_printf_float+0xbe>
 8007864:	2301      	movs	r3, #1
 8007866:	4631      	mov	r1, r6
 8007868:	4628      	mov	r0, r5
 800786a:	9205      	str	r2, [sp, #20]
 800786c:	47b8      	blx	r7
 800786e:	3001      	adds	r0, #1
 8007870:	f43f ae97 	beq.w	80075a2 <_printf_float+0xbe>
 8007874:	9a05      	ldr	r2, [sp, #20]
 8007876:	f10b 0b01 	add.w	fp, fp, #1
 800787a:	e7b9      	b.n	80077f0 <_printf_float+0x30c>
 800787c:	ee18 3a10 	vmov	r3, s16
 8007880:	4652      	mov	r2, sl
 8007882:	4631      	mov	r1, r6
 8007884:	4628      	mov	r0, r5
 8007886:	47b8      	blx	r7
 8007888:	3001      	adds	r0, #1
 800788a:	d1be      	bne.n	800780a <_printf_float+0x326>
 800788c:	e689      	b.n	80075a2 <_printf_float+0xbe>
 800788e:	9a05      	ldr	r2, [sp, #20]
 8007890:	464b      	mov	r3, r9
 8007892:	4442      	add	r2, r8
 8007894:	4631      	mov	r1, r6
 8007896:	4628      	mov	r0, r5
 8007898:	47b8      	blx	r7
 800789a:	3001      	adds	r0, #1
 800789c:	d1c1      	bne.n	8007822 <_printf_float+0x33e>
 800789e:	e680      	b.n	80075a2 <_printf_float+0xbe>
 80078a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078a2:	2a01      	cmp	r2, #1
 80078a4:	dc01      	bgt.n	80078aa <_printf_float+0x3c6>
 80078a6:	07db      	lsls	r3, r3, #31
 80078a8:	d53a      	bpl.n	8007920 <_printf_float+0x43c>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4642      	mov	r2, r8
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	f43f ae74 	beq.w	80075a2 <_printf_float+0xbe>
 80078ba:	ee18 3a10 	vmov	r3, s16
 80078be:	4652      	mov	r2, sl
 80078c0:	4631      	mov	r1, r6
 80078c2:	4628      	mov	r0, r5
 80078c4:	47b8      	blx	r7
 80078c6:	3001      	adds	r0, #1
 80078c8:	f43f ae6b 	beq.w	80075a2 <_printf_float+0xbe>
 80078cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80078d0:	2200      	movs	r2, #0
 80078d2:	2300      	movs	r3, #0
 80078d4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80078d8:	f7f9 f916 	bl	8000b08 <__aeabi_dcmpeq>
 80078dc:	b9d8      	cbnz	r0, 8007916 <_printf_float+0x432>
 80078de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80078e2:	f108 0201 	add.w	r2, r8, #1
 80078e6:	4631      	mov	r1, r6
 80078e8:	4628      	mov	r0, r5
 80078ea:	47b8      	blx	r7
 80078ec:	3001      	adds	r0, #1
 80078ee:	d10e      	bne.n	800790e <_printf_float+0x42a>
 80078f0:	e657      	b.n	80075a2 <_printf_float+0xbe>
 80078f2:	2301      	movs	r3, #1
 80078f4:	4652      	mov	r2, sl
 80078f6:	4631      	mov	r1, r6
 80078f8:	4628      	mov	r0, r5
 80078fa:	47b8      	blx	r7
 80078fc:	3001      	adds	r0, #1
 80078fe:	f43f ae50 	beq.w	80075a2 <_printf_float+0xbe>
 8007902:	f108 0801 	add.w	r8, r8, #1
 8007906:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007908:	3b01      	subs	r3, #1
 800790a:	4543      	cmp	r3, r8
 800790c:	dcf1      	bgt.n	80078f2 <_printf_float+0x40e>
 800790e:	464b      	mov	r3, r9
 8007910:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007914:	e6da      	b.n	80076cc <_printf_float+0x1e8>
 8007916:	f04f 0800 	mov.w	r8, #0
 800791a:	f104 0a1a 	add.w	sl, r4, #26
 800791e:	e7f2      	b.n	8007906 <_printf_float+0x422>
 8007920:	2301      	movs	r3, #1
 8007922:	4642      	mov	r2, r8
 8007924:	e7df      	b.n	80078e6 <_printf_float+0x402>
 8007926:	2301      	movs	r3, #1
 8007928:	464a      	mov	r2, r9
 800792a:	4631      	mov	r1, r6
 800792c:	4628      	mov	r0, r5
 800792e:	47b8      	blx	r7
 8007930:	3001      	adds	r0, #1
 8007932:	f43f ae36 	beq.w	80075a2 <_printf_float+0xbe>
 8007936:	f108 0801 	add.w	r8, r8, #1
 800793a:	68e3      	ldr	r3, [r4, #12]
 800793c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800793e:	1a5b      	subs	r3, r3, r1
 8007940:	4543      	cmp	r3, r8
 8007942:	dcf0      	bgt.n	8007926 <_printf_float+0x442>
 8007944:	e6f8      	b.n	8007738 <_printf_float+0x254>
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	f104 0919 	add.w	r9, r4, #25
 800794e:	e7f4      	b.n	800793a <_printf_float+0x456>

08007950 <_printf_common>:
 8007950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007954:	4616      	mov	r6, r2
 8007956:	4699      	mov	r9, r3
 8007958:	688a      	ldr	r2, [r1, #8]
 800795a:	690b      	ldr	r3, [r1, #16]
 800795c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007960:	4293      	cmp	r3, r2
 8007962:	bfb8      	it	lt
 8007964:	4613      	movlt	r3, r2
 8007966:	6033      	str	r3, [r6, #0]
 8007968:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800796c:	4607      	mov	r7, r0
 800796e:	460c      	mov	r4, r1
 8007970:	b10a      	cbz	r2, 8007976 <_printf_common+0x26>
 8007972:	3301      	adds	r3, #1
 8007974:	6033      	str	r3, [r6, #0]
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	0699      	lsls	r1, r3, #26
 800797a:	bf42      	ittt	mi
 800797c:	6833      	ldrmi	r3, [r6, #0]
 800797e:	3302      	addmi	r3, #2
 8007980:	6033      	strmi	r3, [r6, #0]
 8007982:	6825      	ldr	r5, [r4, #0]
 8007984:	f015 0506 	ands.w	r5, r5, #6
 8007988:	d106      	bne.n	8007998 <_printf_common+0x48>
 800798a:	f104 0a19 	add.w	sl, r4, #25
 800798e:	68e3      	ldr	r3, [r4, #12]
 8007990:	6832      	ldr	r2, [r6, #0]
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	42ab      	cmp	r3, r5
 8007996:	dc26      	bgt.n	80079e6 <_printf_common+0x96>
 8007998:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800799c:	1e13      	subs	r3, r2, #0
 800799e:	6822      	ldr	r2, [r4, #0]
 80079a0:	bf18      	it	ne
 80079a2:	2301      	movne	r3, #1
 80079a4:	0692      	lsls	r2, r2, #26
 80079a6:	d42b      	bmi.n	8007a00 <_printf_common+0xb0>
 80079a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079ac:	4649      	mov	r1, r9
 80079ae:	4638      	mov	r0, r7
 80079b0:	47c0      	blx	r8
 80079b2:	3001      	adds	r0, #1
 80079b4:	d01e      	beq.n	80079f4 <_printf_common+0xa4>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	6922      	ldr	r2, [r4, #16]
 80079ba:	f003 0306 	and.w	r3, r3, #6
 80079be:	2b04      	cmp	r3, #4
 80079c0:	bf02      	ittt	eq
 80079c2:	68e5      	ldreq	r5, [r4, #12]
 80079c4:	6833      	ldreq	r3, [r6, #0]
 80079c6:	1aed      	subeq	r5, r5, r3
 80079c8:	68a3      	ldr	r3, [r4, #8]
 80079ca:	bf0c      	ite	eq
 80079cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079d0:	2500      	movne	r5, #0
 80079d2:	4293      	cmp	r3, r2
 80079d4:	bfc4      	itt	gt
 80079d6:	1a9b      	subgt	r3, r3, r2
 80079d8:	18ed      	addgt	r5, r5, r3
 80079da:	2600      	movs	r6, #0
 80079dc:	341a      	adds	r4, #26
 80079de:	42b5      	cmp	r5, r6
 80079e0:	d11a      	bne.n	8007a18 <_printf_common+0xc8>
 80079e2:	2000      	movs	r0, #0
 80079e4:	e008      	b.n	80079f8 <_printf_common+0xa8>
 80079e6:	2301      	movs	r3, #1
 80079e8:	4652      	mov	r2, sl
 80079ea:	4649      	mov	r1, r9
 80079ec:	4638      	mov	r0, r7
 80079ee:	47c0      	blx	r8
 80079f0:	3001      	adds	r0, #1
 80079f2:	d103      	bne.n	80079fc <_printf_common+0xac>
 80079f4:	f04f 30ff 	mov.w	r0, #4294967295
 80079f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079fc:	3501      	adds	r5, #1
 80079fe:	e7c6      	b.n	800798e <_printf_common+0x3e>
 8007a00:	18e1      	adds	r1, r4, r3
 8007a02:	1c5a      	adds	r2, r3, #1
 8007a04:	2030      	movs	r0, #48	; 0x30
 8007a06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a0a:	4422      	add	r2, r4
 8007a0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a14:	3302      	adds	r3, #2
 8007a16:	e7c7      	b.n	80079a8 <_printf_common+0x58>
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4622      	mov	r2, r4
 8007a1c:	4649      	mov	r1, r9
 8007a1e:	4638      	mov	r0, r7
 8007a20:	47c0      	blx	r8
 8007a22:	3001      	adds	r0, #1
 8007a24:	d0e6      	beq.n	80079f4 <_printf_common+0xa4>
 8007a26:	3601      	adds	r6, #1
 8007a28:	e7d9      	b.n	80079de <_printf_common+0x8e>
	...

08007a2c <_printf_i>:
 8007a2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a30:	7e0f      	ldrb	r7, [r1, #24]
 8007a32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a34:	2f78      	cmp	r7, #120	; 0x78
 8007a36:	4691      	mov	r9, r2
 8007a38:	4680      	mov	r8, r0
 8007a3a:	460c      	mov	r4, r1
 8007a3c:	469a      	mov	sl, r3
 8007a3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a42:	d807      	bhi.n	8007a54 <_printf_i+0x28>
 8007a44:	2f62      	cmp	r7, #98	; 0x62
 8007a46:	d80a      	bhi.n	8007a5e <_printf_i+0x32>
 8007a48:	2f00      	cmp	r7, #0
 8007a4a:	f000 80d4 	beq.w	8007bf6 <_printf_i+0x1ca>
 8007a4e:	2f58      	cmp	r7, #88	; 0x58
 8007a50:	f000 80c0 	beq.w	8007bd4 <_printf_i+0x1a8>
 8007a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a5c:	e03a      	b.n	8007ad4 <_printf_i+0xa8>
 8007a5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a62:	2b15      	cmp	r3, #21
 8007a64:	d8f6      	bhi.n	8007a54 <_printf_i+0x28>
 8007a66:	a101      	add	r1, pc, #4	; (adr r1, 8007a6c <_printf_i+0x40>)
 8007a68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a6c:	08007ac5 	.word	0x08007ac5
 8007a70:	08007ad9 	.word	0x08007ad9
 8007a74:	08007a55 	.word	0x08007a55
 8007a78:	08007a55 	.word	0x08007a55
 8007a7c:	08007a55 	.word	0x08007a55
 8007a80:	08007a55 	.word	0x08007a55
 8007a84:	08007ad9 	.word	0x08007ad9
 8007a88:	08007a55 	.word	0x08007a55
 8007a8c:	08007a55 	.word	0x08007a55
 8007a90:	08007a55 	.word	0x08007a55
 8007a94:	08007a55 	.word	0x08007a55
 8007a98:	08007bdd 	.word	0x08007bdd
 8007a9c:	08007b05 	.word	0x08007b05
 8007aa0:	08007b97 	.word	0x08007b97
 8007aa4:	08007a55 	.word	0x08007a55
 8007aa8:	08007a55 	.word	0x08007a55
 8007aac:	08007bff 	.word	0x08007bff
 8007ab0:	08007a55 	.word	0x08007a55
 8007ab4:	08007b05 	.word	0x08007b05
 8007ab8:	08007a55 	.word	0x08007a55
 8007abc:	08007a55 	.word	0x08007a55
 8007ac0:	08007b9f 	.word	0x08007b9f
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	1d1a      	adds	r2, r3, #4
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	602a      	str	r2, [r5, #0]
 8007acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ad0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e09f      	b.n	8007c18 <_printf_i+0x1ec>
 8007ad8:	6820      	ldr	r0, [r4, #0]
 8007ada:	682b      	ldr	r3, [r5, #0]
 8007adc:	0607      	lsls	r7, r0, #24
 8007ade:	f103 0104 	add.w	r1, r3, #4
 8007ae2:	6029      	str	r1, [r5, #0]
 8007ae4:	d501      	bpl.n	8007aea <_printf_i+0xbe>
 8007ae6:	681e      	ldr	r6, [r3, #0]
 8007ae8:	e003      	b.n	8007af2 <_printf_i+0xc6>
 8007aea:	0646      	lsls	r6, r0, #25
 8007aec:	d5fb      	bpl.n	8007ae6 <_printf_i+0xba>
 8007aee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007af2:	2e00      	cmp	r6, #0
 8007af4:	da03      	bge.n	8007afe <_printf_i+0xd2>
 8007af6:	232d      	movs	r3, #45	; 0x2d
 8007af8:	4276      	negs	r6, r6
 8007afa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007afe:	485a      	ldr	r0, [pc, #360]	; (8007c68 <_printf_i+0x23c>)
 8007b00:	230a      	movs	r3, #10
 8007b02:	e012      	b.n	8007b2a <_printf_i+0xfe>
 8007b04:	682b      	ldr	r3, [r5, #0]
 8007b06:	6820      	ldr	r0, [r4, #0]
 8007b08:	1d19      	adds	r1, r3, #4
 8007b0a:	6029      	str	r1, [r5, #0]
 8007b0c:	0605      	lsls	r5, r0, #24
 8007b0e:	d501      	bpl.n	8007b14 <_printf_i+0xe8>
 8007b10:	681e      	ldr	r6, [r3, #0]
 8007b12:	e002      	b.n	8007b1a <_printf_i+0xee>
 8007b14:	0641      	lsls	r1, r0, #25
 8007b16:	d5fb      	bpl.n	8007b10 <_printf_i+0xe4>
 8007b18:	881e      	ldrh	r6, [r3, #0]
 8007b1a:	4853      	ldr	r0, [pc, #332]	; (8007c68 <_printf_i+0x23c>)
 8007b1c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b1e:	bf0c      	ite	eq
 8007b20:	2308      	moveq	r3, #8
 8007b22:	230a      	movne	r3, #10
 8007b24:	2100      	movs	r1, #0
 8007b26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b2a:	6865      	ldr	r5, [r4, #4]
 8007b2c:	60a5      	str	r5, [r4, #8]
 8007b2e:	2d00      	cmp	r5, #0
 8007b30:	bfa2      	ittt	ge
 8007b32:	6821      	ldrge	r1, [r4, #0]
 8007b34:	f021 0104 	bicge.w	r1, r1, #4
 8007b38:	6021      	strge	r1, [r4, #0]
 8007b3a:	b90e      	cbnz	r6, 8007b40 <_printf_i+0x114>
 8007b3c:	2d00      	cmp	r5, #0
 8007b3e:	d04b      	beq.n	8007bd8 <_printf_i+0x1ac>
 8007b40:	4615      	mov	r5, r2
 8007b42:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b46:	fb03 6711 	mls	r7, r3, r1, r6
 8007b4a:	5dc7      	ldrb	r7, [r0, r7]
 8007b4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b50:	4637      	mov	r7, r6
 8007b52:	42bb      	cmp	r3, r7
 8007b54:	460e      	mov	r6, r1
 8007b56:	d9f4      	bls.n	8007b42 <_printf_i+0x116>
 8007b58:	2b08      	cmp	r3, #8
 8007b5a:	d10b      	bne.n	8007b74 <_printf_i+0x148>
 8007b5c:	6823      	ldr	r3, [r4, #0]
 8007b5e:	07de      	lsls	r6, r3, #31
 8007b60:	d508      	bpl.n	8007b74 <_printf_i+0x148>
 8007b62:	6923      	ldr	r3, [r4, #16]
 8007b64:	6861      	ldr	r1, [r4, #4]
 8007b66:	4299      	cmp	r1, r3
 8007b68:	bfde      	ittt	le
 8007b6a:	2330      	movle	r3, #48	; 0x30
 8007b6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007b70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007b74:	1b52      	subs	r2, r2, r5
 8007b76:	6122      	str	r2, [r4, #16]
 8007b78:	f8cd a000 	str.w	sl, [sp]
 8007b7c:	464b      	mov	r3, r9
 8007b7e:	aa03      	add	r2, sp, #12
 8007b80:	4621      	mov	r1, r4
 8007b82:	4640      	mov	r0, r8
 8007b84:	f7ff fee4 	bl	8007950 <_printf_common>
 8007b88:	3001      	adds	r0, #1
 8007b8a:	d14a      	bne.n	8007c22 <_printf_i+0x1f6>
 8007b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b90:	b004      	add	sp, #16
 8007b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	f043 0320 	orr.w	r3, r3, #32
 8007b9c:	6023      	str	r3, [r4, #0]
 8007b9e:	4833      	ldr	r0, [pc, #204]	; (8007c6c <_printf_i+0x240>)
 8007ba0:	2778      	movs	r7, #120	; 0x78
 8007ba2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	6829      	ldr	r1, [r5, #0]
 8007baa:	061f      	lsls	r7, r3, #24
 8007bac:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bb0:	d402      	bmi.n	8007bb8 <_printf_i+0x18c>
 8007bb2:	065f      	lsls	r7, r3, #25
 8007bb4:	bf48      	it	mi
 8007bb6:	b2b6      	uxthmi	r6, r6
 8007bb8:	07df      	lsls	r7, r3, #31
 8007bba:	bf48      	it	mi
 8007bbc:	f043 0320 	orrmi.w	r3, r3, #32
 8007bc0:	6029      	str	r1, [r5, #0]
 8007bc2:	bf48      	it	mi
 8007bc4:	6023      	strmi	r3, [r4, #0]
 8007bc6:	b91e      	cbnz	r6, 8007bd0 <_printf_i+0x1a4>
 8007bc8:	6823      	ldr	r3, [r4, #0]
 8007bca:	f023 0320 	bic.w	r3, r3, #32
 8007bce:	6023      	str	r3, [r4, #0]
 8007bd0:	2310      	movs	r3, #16
 8007bd2:	e7a7      	b.n	8007b24 <_printf_i+0xf8>
 8007bd4:	4824      	ldr	r0, [pc, #144]	; (8007c68 <_printf_i+0x23c>)
 8007bd6:	e7e4      	b.n	8007ba2 <_printf_i+0x176>
 8007bd8:	4615      	mov	r5, r2
 8007bda:	e7bd      	b.n	8007b58 <_printf_i+0x12c>
 8007bdc:	682b      	ldr	r3, [r5, #0]
 8007bde:	6826      	ldr	r6, [r4, #0]
 8007be0:	6961      	ldr	r1, [r4, #20]
 8007be2:	1d18      	adds	r0, r3, #4
 8007be4:	6028      	str	r0, [r5, #0]
 8007be6:	0635      	lsls	r5, r6, #24
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	d501      	bpl.n	8007bf0 <_printf_i+0x1c4>
 8007bec:	6019      	str	r1, [r3, #0]
 8007bee:	e002      	b.n	8007bf6 <_printf_i+0x1ca>
 8007bf0:	0670      	lsls	r0, r6, #25
 8007bf2:	d5fb      	bpl.n	8007bec <_printf_i+0x1c0>
 8007bf4:	8019      	strh	r1, [r3, #0]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	6123      	str	r3, [r4, #16]
 8007bfa:	4615      	mov	r5, r2
 8007bfc:	e7bc      	b.n	8007b78 <_printf_i+0x14c>
 8007bfe:	682b      	ldr	r3, [r5, #0]
 8007c00:	1d1a      	adds	r2, r3, #4
 8007c02:	602a      	str	r2, [r5, #0]
 8007c04:	681d      	ldr	r5, [r3, #0]
 8007c06:	6862      	ldr	r2, [r4, #4]
 8007c08:	2100      	movs	r1, #0
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	f7f8 fb00 	bl	8000210 <memchr>
 8007c10:	b108      	cbz	r0, 8007c16 <_printf_i+0x1ea>
 8007c12:	1b40      	subs	r0, r0, r5
 8007c14:	6060      	str	r0, [r4, #4]
 8007c16:	6863      	ldr	r3, [r4, #4]
 8007c18:	6123      	str	r3, [r4, #16]
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c20:	e7aa      	b.n	8007b78 <_printf_i+0x14c>
 8007c22:	6923      	ldr	r3, [r4, #16]
 8007c24:	462a      	mov	r2, r5
 8007c26:	4649      	mov	r1, r9
 8007c28:	4640      	mov	r0, r8
 8007c2a:	47d0      	blx	sl
 8007c2c:	3001      	adds	r0, #1
 8007c2e:	d0ad      	beq.n	8007b8c <_printf_i+0x160>
 8007c30:	6823      	ldr	r3, [r4, #0]
 8007c32:	079b      	lsls	r3, r3, #30
 8007c34:	d413      	bmi.n	8007c5e <_printf_i+0x232>
 8007c36:	68e0      	ldr	r0, [r4, #12]
 8007c38:	9b03      	ldr	r3, [sp, #12]
 8007c3a:	4298      	cmp	r0, r3
 8007c3c:	bfb8      	it	lt
 8007c3e:	4618      	movlt	r0, r3
 8007c40:	e7a6      	b.n	8007b90 <_printf_i+0x164>
 8007c42:	2301      	movs	r3, #1
 8007c44:	4632      	mov	r2, r6
 8007c46:	4649      	mov	r1, r9
 8007c48:	4640      	mov	r0, r8
 8007c4a:	47d0      	blx	sl
 8007c4c:	3001      	adds	r0, #1
 8007c4e:	d09d      	beq.n	8007b8c <_printf_i+0x160>
 8007c50:	3501      	adds	r5, #1
 8007c52:	68e3      	ldr	r3, [r4, #12]
 8007c54:	9903      	ldr	r1, [sp, #12]
 8007c56:	1a5b      	subs	r3, r3, r1
 8007c58:	42ab      	cmp	r3, r5
 8007c5a:	dcf2      	bgt.n	8007c42 <_printf_i+0x216>
 8007c5c:	e7eb      	b.n	8007c36 <_printf_i+0x20a>
 8007c5e:	2500      	movs	r5, #0
 8007c60:	f104 0619 	add.w	r6, r4, #25
 8007c64:	e7f5      	b.n	8007c52 <_printf_i+0x226>
 8007c66:	bf00      	nop
 8007c68:	0800c382 	.word	0x0800c382
 8007c6c:	0800c393 	.word	0x0800c393

08007c70 <_scanf_float>:
 8007c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c74:	b087      	sub	sp, #28
 8007c76:	4617      	mov	r7, r2
 8007c78:	9303      	str	r3, [sp, #12]
 8007c7a:	688b      	ldr	r3, [r1, #8]
 8007c7c:	1e5a      	subs	r2, r3, #1
 8007c7e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007c82:	bf83      	ittte	hi
 8007c84:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007c88:	195b      	addhi	r3, r3, r5
 8007c8a:	9302      	strhi	r3, [sp, #8]
 8007c8c:	2300      	movls	r3, #0
 8007c8e:	bf86      	itte	hi
 8007c90:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007c94:	608b      	strhi	r3, [r1, #8]
 8007c96:	9302      	strls	r3, [sp, #8]
 8007c98:	680b      	ldr	r3, [r1, #0]
 8007c9a:	468b      	mov	fp, r1
 8007c9c:	2500      	movs	r5, #0
 8007c9e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007ca2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007ca6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007caa:	4680      	mov	r8, r0
 8007cac:	460c      	mov	r4, r1
 8007cae:	465e      	mov	r6, fp
 8007cb0:	46aa      	mov	sl, r5
 8007cb2:	46a9      	mov	r9, r5
 8007cb4:	9501      	str	r5, [sp, #4]
 8007cb6:	68a2      	ldr	r2, [r4, #8]
 8007cb8:	b152      	cbz	r2, 8007cd0 <_scanf_float+0x60>
 8007cba:	683b      	ldr	r3, [r7, #0]
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b4e      	cmp	r3, #78	; 0x4e
 8007cc0:	d864      	bhi.n	8007d8c <_scanf_float+0x11c>
 8007cc2:	2b40      	cmp	r3, #64	; 0x40
 8007cc4:	d83c      	bhi.n	8007d40 <_scanf_float+0xd0>
 8007cc6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007cca:	b2c8      	uxtb	r0, r1
 8007ccc:	280e      	cmp	r0, #14
 8007cce:	d93a      	bls.n	8007d46 <_scanf_float+0xd6>
 8007cd0:	f1b9 0f00 	cmp.w	r9, #0
 8007cd4:	d003      	beq.n	8007cde <_scanf_float+0x6e>
 8007cd6:	6823      	ldr	r3, [r4, #0]
 8007cd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cdc:	6023      	str	r3, [r4, #0]
 8007cde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ce2:	f1ba 0f01 	cmp.w	sl, #1
 8007ce6:	f200 8113 	bhi.w	8007f10 <_scanf_float+0x2a0>
 8007cea:	455e      	cmp	r6, fp
 8007cec:	f200 8105 	bhi.w	8007efa <_scanf_float+0x28a>
 8007cf0:	2501      	movs	r5, #1
 8007cf2:	4628      	mov	r0, r5
 8007cf4:	b007      	add	sp, #28
 8007cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007cfe:	2a0d      	cmp	r2, #13
 8007d00:	d8e6      	bhi.n	8007cd0 <_scanf_float+0x60>
 8007d02:	a101      	add	r1, pc, #4	; (adr r1, 8007d08 <_scanf_float+0x98>)
 8007d04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d08:	08007e47 	.word	0x08007e47
 8007d0c:	08007cd1 	.word	0x08007cd1
 8007d10:	08007cd1 	.word	0x08007cd1
 8007d14:	08007cd1 	.word	0x08007cd1
 8007d18:	08007ea7 	.word	0x08007ea7
 8007d1c:	08007e7f 	.word	0x08007e7f
 8007d20:	08007cd1 	.word	0x08007cd1
 8007d24:	08007cd1 	.word	0x08007cd1
 8007d28:	08007e55 	.word	0x08007e55
 8007d2c:	08007cd1 	.word	0x08007cd1
 8007d30:	08007cd1 	.word	0x08007cd1
 8007d34:	08007cd1 	.word	0x08007cd1
 8007d38:	08007cd1 	.word	0x08007cd1
 8007d3c:	08007e0d 	.word	0x08007e0d
 8007d40:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007d44:	e7db      	b.n	8007cfe <_scanf_float+0x8e>
 8007d46:	290e      	cmp	r1, #14
 8007d48:	d8c2      	bhi.n	8007cd0 <_scanf_float+0x60>
 8007d4a:	a001      	add	r0, pc, #4	; (adr r0, 8007d50 <_scanf_float+0xe0>)
 8007d4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d50:	08007dff 	.word	0x08007dff
 8007d54:	08007cd1 	.word	0x08007cd1
 8007d58:	08007dff 	.word	0x08007dff
 8007d5c:	08007e93 	.word	0x08007e93
 8007d60:	08007cd1 	.word	0x08007cd1
 8007d64:	08007dad 	.word	0x08007dad
 8007d68:	08007de9 	.word	0x08007de9
 8007d6c:	08007de9 	.word	0x08007de9
 8007d70:	08007de9 	.word	0x08007de9
 8007d74:	08007de9 	.word	0x08007de9
 8007d78:	08007de9 	.word	0x08007de9
 8007d7c:	08007de9 	.word	0x08007de9
 8007d80:	08007de9 	.word	0x08007de9
 8007d84:	08007de9 	.word	0x08007de9
 8007d88:	08007de9 	.word	0x08007de9
 8007d8c:	2b6e      	cmp	r3, #110	; 0x6e
 8007d8e:	d809      	bhi.n	8007da4 <_scanf_float+0x134>
 8007d90:	2b60      	cmp	r3, #96	; 0x60
 8007d92:	d8b2      	bhi.n	8007cfa <_scanf_float+0x8a>
 8007d94:	2b54      	cmp	r3, #84	; 0x54
 8007d96:	d077      	beq.n	8007e88 <_scanf_float+0x218>
 8007d98:	2b59      	cmp	r3, #89	; 0x59
 8007d9a:	d199      	bne.n	8007cd0 <_scanf_float+0x60>
 8007d9c:	2d07      	cmp	r5, #7
 8007d9e:	d197      	bne.n	8007cd0 <_scanf_float+0x60>
 8007da0:	2508      	movs	r5, #8
 8007da2:	e029      	b.n	8007df8 <_scanf_float+0x188>
 8007da4:	2b74      	cmp	r3, #116	; 0x74
 8007da6:	d06f      	beq.n	8007e88 <_scanf_float+0x218>
 8007da8:	2b79      	cmp	r3, #121	; 0x79
 8007daa:	e7f6      	b.n	8007d9a <_scanf_float+0x12a>
 8007dac:	6821      	ldr	r1, [r4, #0]
 8007dae:	05c8      	lsls	r0, r1, #23
 8007db0:	d51a      	bpl.n	8007de8 <_scanf_float+0x178>
 8007db2:	9b02      	ldr	r3, [sp, #8]
 8007db4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007db8:	6021      	str	r1, [r4, #0]
 8007dba:	f109 0901 	add.w	r9, r9, #1
 8007dbe:	b11b      	cbz	r3, 8007dc8 <_scanf_float+0x158>
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	3201      	adds	r2, #1
 8007dc4:	9302      	str	r3, [sp, #8]
 8007dc6:	60a2      	str	r2, [r4, #8]
 8007dc8:	68a3      	ldr	r3, [r4, #8]
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	60a3      	str	r3, [r4, #8]
 8007dce:	6923      	ldr	r3, [r4, #16]
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	6123      	str	r3, [r4, #16]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	3b01      	subs	r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	607b      	str	r3, [r7, #4]
 8007ddc:	f340 8084 	ble.w	8007ee8 <_scanf_float+0x278>
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	3301      	adds	r3, #1
 8007de4:	603b      	str	r3, [r7, #0]
 8007de6:	e766      	b.n	8007cb6 <_scanf_float+0x46>
 8007de8:	eb1a 0f05 	cmn.w	sl, r5
 8007dec:	f47f af70 	bne.w	8007cd0 <_scanf_float+0x60>
 8007df0:	6822      	ldr	r2, [r4, #0]
 8007df2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007df6:	6022      	str	r2, [r4, #0]
 8007df8:	f806 3b01 	strb.w	r3, [r6], #1
 8007dfc:	e7e4      	b.n	8007dc8 <_scanf_float+0x158>
 8007dfe:	6822      	ldr	r2, [r4, #0]
 8007e00:	0610      	lsls	r0, r2, #24
 8007e02:	f57f af65 	bpl.w	8007cd0 <_scanf_float+0x60>
 8007e06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e0a:	e7f4      	b.n	8007df6 <_scanf_float+0x186>
 8007e0c:	f1ba 0f00 	cmp.w	sl, #0
 8007e10:	d10e      	bne.n	8007e30 <_scanf_float+0x1c0>
 8007e12:	f1b9 0f00 	cmp.w	r9, #0
 8007e16:	d10e      	bne.n	8007e36 <_scanf_float+0x1c6>
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e22:	d108      	bne.n	8007e36 <_scanf_float+0x1c6>
 8007e24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e28:	6022      	str	r2, [r4, #0]
 8007e2a:	f04f 0a01 	mov.w	sl, #1
 8007e2e:	e7e3      	b.n	8007df8 <_scanf_float+0x188>
 8007e30:	f1ba 0f02 	cmp.w	sl, #2
 8007e34:	d055      	beq.n	8007ee2 <_scanf_float+0x272>
 8007e36:	2d01      	cmp	r5, #1
 8007e38:	d002      	beq.n	8007e40 <_scanf_float+0x1d0>
 8007e3a:	2d04      	cmp	r5, #4
 8007e3c:	f47f af48 	bne.w	8007cd0 <_scanf_float+0x60>
 8007e40:	3501      	adds	r5, #1
 8007e42:	b2ed      	uxtb	r5, r5
 8007e44:	e7d8      	b.n	8007df8 <_scanf_float+0x188>
 8007e46:	f1ba 0f01 	cmp.w	sl, #1
 8007e4a:	f47f af41 	bne.w	8007cd0 <_scanf_float+0x60>
 8007e4e:	f04f 0a02 	mov.w	sl, #2
 8007e52:	e7d1      	b.n	8007df8 <_scanf_float+0x188>
 8007e54:	b97d      	cbnz	r5, 8007e76 <_scanf_float+0x206>
 8007e56:	f1b9 0f00 	cmp.w	r9, #0
 8007e5a:	f47f af3c 	bne.w	8007cd6 <_scanf_float+0x66>
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e68:	f47f af39 	bne.w	8007cde <_scanf_float+0x6e>
 8007e6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e70:	6022      	str	r2, [r4, #0]
 8007e72:	2501      	movs	r5, #1
 8007e74:	e7c0      	b.n	8007df8 <_scanf_float+0x188>
 8007e76:	2d03      	cmp	r5, #3
 8007e78:	d0e2      	beq.n	8007e40 <_scanf_float+0x1d0>
 8007e7a:	2d05      	cmp	r5, #5
 8007e7c:	e7de      	b.n	8007e3c <_scanf_float+0x1cc>
 8007e7e:	2d02      	cmp	r5, #2
 8007e80:	f47f af26 	bne.w	8007cd0 <_scanf_float+0x60>
 8007e84:	2503      	movs	r5, #3
 8007e86:	e7b7      	b.n	8007df8 <_scanf_float+0x188>
 8007e88:	2d06      	cmp	r5, #6
 8007e8a:	f47f af21 	bne.w	8007cd0 <_scanf_float+0x60>
 8007e8e:	2507      	movs	r5, #7
 8007e90:	e7b2      	b.n	8007df8 <_scanf_float+0x188>
 8007e92:	6822      	ldr	r2, [r4, #0]
 8007e94:	0591      	lsls	r1, r2, #22
 8007e96:	f57f af1b 	bpl.w	8007cd0 <_scanf_float+0x60>
 8007e9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ea4:	e7a8      	b.n	8007df8 <_scanf_float+0x188>
 8007ea6:	6822      	ldr	r2, [r4, #0]
 8007ea8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007eac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007eb0:	d006      	beq.n	8007ec0 <_scanf_float+0x250>
 8007eb2:	0550      	lsls	r0, r2, #21
 8007eb4:	f57f af0c 	bpl.w	8007cd0 <_scanf_float+0x60>
 8007eb8:	f1b9 0f00 	cmp.w	r9, #0
 8007ebc:	f43f af0f 	beq.w	8007cde <_scanf_float+0x6e>
 8007ec0:	0591      	lsls	r1, r2, #22
 8007ec2:	bf58      	it	pl
 8007ec4:	9901      	ldrpl	r1, [sp, #4]
 8007ec6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007eca:	bf58      	it	pl
 8007ecc:	eba9 0101 	subpl.w	r1, r9, r1
 8007ed0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007ed4:	bf58      	it	pl
 8007ed6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	f04f 0900 	mov.w	r9, #0
 8007ee0:	e78a      	b.n	8007df8 <_scanf_float+0x188>
 8007ee2:	f04f 0a03 	mov.w	sl, #3
 8007ee6:	e787      	b.n	8007df8 <_scanf_float+0x188>
 8007ee8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007eec:	4639      	mov	r1, r7
 8007eee:	4640      	mov	r0, r8
 8007ef0:	4798      	blx	r3
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f43f aedf 	beq.w	8007cb6 <_scanf_float+0x46>
 8007ef8:	e6ea      	b.n	8007cd0 <_scanf_float+0x60>
 8007efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007efe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f02:	463a      	mov	r2, r7
 8007f04:	4640      	mov	r0, r8
 8007f06:	4798      	blx	r3
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	e6ec      	b.n	8007cea <_scanf_float+0x7a>
 8007f10:	1e6b      	subs	r3, r5, #1
 8007f12:	2b06      	cmp	r3, #6
 8007f14:	d825      	bhi.n	8007f62 <_scanf_float+0x2f2>
 8007f16:	2d02      	cmp	r5, #2
 8007f18:	d836      	bhi.n	8007f88 <_scanf_float+0x318>
 8007f1a:	455e      	cmp	r6, fp
 8007f1c:	f67f aee8 	bls.w	8007cf0 <_scanf_float+0x80>
 8007f20:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f24:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f28:	463a      	mov	r2, r7
 8007f2a:	4640      	mov	r0, r8
 8007f2c:	4798      	blx	r3
 8007f2e:	6923      	ldr	r3, [r4, #16]
 8007f30:	3b01      	subs	r3, #1
 8007f32:	6123      	str	r3, [r4, #16]
 8007f34:	e7f1      	b.n	8007f1a <_scanf_float+0x2aa>
 8007f36:	9802      	ldr	r0, [sp, #8]
 8007f38:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f3c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007f40:	9002      	str	r0, [sp, #8]
 8007f42:	463a      	mov	r2, r7
 8007f44:	4640      	mov	r0, r8
 8007f46:	4798      	blx	r3
 8007f48:	6923      	ldr	r3, [r4, #16]
 8007f4a:	3b01      	subs	r3, #1
 8007f4c:	6123      	str	r3, [r4, #16]
 8007f4e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f52:	fa5f fa8a 	uxtb.w	sl, sl
 8007f56:	f1ba 0f02 	cmp.w	sl, #2
 8007f5a:	d1ec      	bne.n	8007f36 <_scanf_float+0x2c6>
 8007f5c:	3d03      	subs	r5, #3
 8007f5e:	b2ed      	uxtb	r5, r5
 8007f60:	1b76      	subs	r6, r6, r5
 8007f62:	6823      	ldr	r3, [r4, #0]
 8007f64:	05da      	lsls	r2, r3, #23
 8007f66:	d52f      	bpl.n	8007fc8 <_scanf_float+0x358>
 8007f68:	055b      	lsls	r3, r3, #21
 8007f6a:	d510      	bpl.n	8007f8e <_scanf_float+0x31e>
 8007f6c:	455e      	cmp	r6, fp
 8007f6e:	f67f aebf 	bls.w	8007cf0 <_scanf_float+0x80>
 8007f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f7a:	463a      	mov	r2, r7
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	4798      	blx	r3
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	e7f1      	b.n	8007f6c <_scanf_float+0x2fc>
 8007f88:	46aa      	mov	sl, r5
 8007f8a:	9602      	str	r6, [sp, #8]
 8007f8c:	e7df      	b.n	8007f4e <_scanf_float+0x2de>
 8007f8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	2965      	cmp	r1, #101	; 0x65
 8007f96:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	d00c      	beq.n	8007fbc <_scanf_float+0x34c>
 8007fa2:	2945      	cmp	r1, #69	; 0x45
 8007fa4:	d00a      	beq.n	8007fbc <_scanf_float+0x34c>
 8007fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007faa:	463a      	mov	r2, r7
 8007fac:	4640      	mov	r0, r8
 8007fae:	4798      	blx	r3
 8007fb0:	6923      	ldr	r3, [r4, #16]
 8007fb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	1eb5      	subs	r5, r6, #2
 8007fba:	6123      	str	r3, [r4, #16]
 8007fbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fc0:	463a      	mov	r2, r7
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	4798      	blx	r3
 8007fc6:	462e      	mov	r6, r5
 8007fc8:	6825      	ldr	r5, [r4, #0]
 8007fca:	f015 0510 	ands.w	r5, r5, #16
 8007fce:	d158      	bne.n	8008082 <_scanf_float+0x412>
 8007fd0:	7035      	strb	r5, [r6, #0]
 8007fd2:	6823      	ldr	r3, [r4, #0]
 8007fd4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fdc:	d11c      	bne.n	8008018 <_scanf_float+0x3a8>
 8007fde:	9b01      	ldr	r3, [sp, #4]
 8007fe0:	454b      	cmp	r3, r9
 8007fe2:	eba3 0209 	sub.w	r2, r3, r9
 8007fe6:	d124      	bne.n	8008032 <_scanf_float+0x3c2>
 8007fe8:	2200      	movs	r2, #0
 8007fea:	4659      	mov	r1, fp
 8007fec:	4640      	mov	r0, r8
 8007fee:	f7ff f9c7 	bl	8007380 <_strtod_r>
 8007ff2:	9b03      	ldr	r3, [sp, #12]
 8007ff4:	6821      	ldr	r1, [r4, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	f011 0f02 	tst.w	r1, #2
 8007ffc:	ec57 6b10 	vmov	r6, r7, d0
 8008000:	f103 0204 	add.w	r2, r3, #4
 8008004:	d020      	beq.n	8008048 <_scanf_float+0x3d8>
 8008006:	9903      	ldr	r1, [sp, #12]
 8008008:	600a      	str	r2, [r1, #0]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	e9c3 6700 	strd	r6, r7, [r3]
 8008010:	68e3      	ldr	r3, [r4, #12]
 8008012:	3301      	adds	r3, #1
 8008014:	60e3      	str	r3, [r4, #12]
 8008016:	e66c      	b.n	8007cf2 <_scanf_float+0x82>
 8008018:	9b04      	ldr	r3, [sp, #16]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0e4      	beq.n	8007fe8 <_scanf_float+0x378>
 800801e:	9905      	ldr	r1, [sp, #20]
 8008020:	230a      	movs	r3, #10
 8008022:	462a      	mov	r2, r5
 8008024:	3101      	adds	r1, #1
 8008026:	4640      	mov	r0, r8
 8008028:	f002 fa42 	bl	800a4b0 <_strtol_r>
 800802c:	9b04      	ldr	r3, [sp, #16]
 800802e:	9e05      	ldr	r6, [sp, #20]
 8008030:	1ac2      	subs	r2, r0, r3
 8008032:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008036:	429e      	cmp	r6, r3
 8008038:	bf28      	it	cs
 800803a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800803e:	4912      	ldr	r1, [pc, #72]	; (8008088 <_scanf_float+0x418>)
 8008040:	4630      	mov	r0, r6
 8008042:	f000 f8f9 	bl	8008238 <siprintf>
 8008046:	e7cf      	b.n	8007fe8 <_scanf_float+0x378>
 8008048:	f011 0f04 	tst.w	r1, #4
 800804c:	9903      	ldr	r1, [sp, #12]
 800804e:	600a      	str	r2, [r1, #0]
 8008050:	d1db      	bne.n	800800a <_scanf_float+0x39a>
 8008052:	f8d3 8000 	ldr.w	r8, [r3]
 8008056:	ee10 2a10 	vmov	r2, s0
 800805a:	ee10 0a10 	vmov	r0, s0
 800805e:	463b      	mov	r3, r7
 8008060:	4639      	mov	r1, r7
 8008062:	f7f8 fd83 	bl	8000b6c <__aeabi_dcmpun>
 8008066:	b128      	cbz	r0, 8008074 <_scanf_float+0x404>
 8008068:	4808      	ldr	r0, [pc, #32]	; (800808c <_scanf_float+0x41c>)
 800806a:	f000 fa05 	bl	8008478 <nanf>
 800806e:	ed88 0a00 	vstr	s0, [r8]
 8008072:	e7cd      	b.n	8008010 <_scanf_float+0x3a0>
 8008074:	4630      	mov	r0, r6
 8008076:	4639      	mov	r1, r7
 8008078:	f7f8 fdd6 	bl	8000c28 <__aeabi_d2f>
 800807c:	f8c8 0000 	str.w	r0, [r8]
 8008080:	e7c6      	b.n	8008010 <_scanf_float+0x3a0>
 8008082:	2500      	movs	r5, #0
 8008084:	e635      	b.n	8007cf2 <_scanf_float+0x82>
 8008086:	bf00      	nop
 8008088:	0800c3a4 	.word	0x0800c3a4
 800808c:	0800c741 	.word	0x0800c741

08008090 <std>:
 8008090:	2300      	movs	r3, #0
 8008092:	b510      	push	{r4, lr}
 8008094:	4604      	mov	r4, r0
 8008096:	e9c0 3300 	strd	r3, r3, [r0]
 800809a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800809e:	6083      	str	r3, [r0, #8]
 80080a0:	8181      	strh	r1, [r0, #12]
 80080a2:	6643      	str	r3, [r0, #100]	; 0x64
 80080a4:	81c2      	strh	r2, [r0, #14]
 80080a6:	6183      	str	r3, [r0, #24]
 80080a8:	4619      	mov	r1, r3
 80080aa:	2208      	movs	r2, #8
 80080ac:	305c      	adds	r0, #92	; 0x5c
 80080ae:	f000 f926 	bl	80082fe <memset>
 80080b2:	4b0d      	ldr	r3, [pc, #52]	; (80080e8 <std+0x58>)
 80080b4:	6263      	str	r3, [r4, #36]	; 0x24
 80080b6:	4b0d      	ldr	r3, [pc, #52]	; (80080ec <std+0x5c>)
 80080b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80080ba:	4b0d      	ldr	r3, [pc, #52]	; (80080f0 <std+0x60>)
 80080bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080be:	4b0d      	ldr	r3, [pc, #52]	; (80080f4 <std+0x64>)
 80080c0:	6323      	str	r3, [r4, #48]	; 0x30
 80080c2:	4b0d      	ldr	r3, [pc, #52]	; (80080f8 <std+0x68>)
 80080c4:	6224      	str	r4, [r4, #32]
 80080c6:	429c      	cmp	r4, r3
 80080c8:	d006      	beq.n	80080d8 <std+0x48>
 80080ca:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80080ce:	4294      	cmp	r4, r2
 80080d0:	d002      	beq.n	80080d8 <std+0x48>
 80080d2:	33d0      	adds	r3, #208	; 0xd0
 80080d4:	429c      	cmp	r4, r3
 80080d6:	d105      	bne.n	80080e4 <std+0x54>
 80080d8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080e0:	f000 b9ae 	b.w	8008440 <__retarget_lock_init_recursive>
 80080e4:	bd10      	pop	{r4, pc}
 80080e6:	bf00      	nop
 80080e8:	08008279 	.word	0x08008279
 80080ec:	0800829b 	.word	0x0800829b
 80080f0:	080082d3 	.word	0x080082d3
 80080f4:	080082f7 	.word	0x080082f7
 80080f8:	20000698 	.word	0x20000698

080080fc <stdio_exit_handler>:
 80080fc:	4a02      	ldr	r2, [pc, #8]	; (8008108 <stdio_exit_handler+0xc>)
 80080fe:	4903      	ldr	r1, [pc, #12]	; (800810c <stdio_exit_handler+0x10>)
 8008100:	4803      	ldr	r0, [pc, #12]	; (8008110 <stdio_exit_handler+0x14>)
 8008102:	f000 b869 	b.w	80081d8 <_fwalk_sglue>
 8008106:	bf00      	nop
 8008108:	20000044 	.word	0x20000044
 800810c:	0800ab15 	.word	0x0800ab15
 8008110:	200001bc 	.word	0x200001bc

08008114 <cleanup_stdio>:
 8008114:	6841      	ldr	r1, [r0, #4]
 8008116:	4b0c      	ldr	r3, [pc, #48]	; (8008148 <cleanup_stdio+0x34>)
 8008118:	4299      	cmp	r1, r3
 800811a:	b510      	push	{r4, lr}
 800811c:	4604      	mov	r4, r0
 800811e:	d001      	beq.n	8008124 <cleanup_stdio+0x10>
 8008120:	f002 fcf8 	bl	800ab14 <_fflush_r>
 8008124:	68a1      	ldr	r1, [r4, #8]
 8008126:	4b09      	ldr	r3, [pc, #36]	; (800814c <cleanup_stdio+0x38>)
 8008128:	4299      	cmp	r1, r3
 800812a:	d002      	beq.n	8008132 <cleanup_stdio+0x1e>
 800812c:	4620      	mov	r0, r4
 800812e:	f002 fcf1 	bl	800ab14 <_fflush_r>
 8008132:	68e1      	ldr	r1, [r4, #12]
 8008134:	4b06      	ldr	r3, [pc, #24]	; (8008150 <cleanup_stdio+0x3c>)
 8008136:	4299      	cmp	r1, r3
 8008138:	d004      	beq.n	8008144 <cleanup_stdio+0x30>
 800813a:	4620      	mov	r0, r4
 800813c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008140:	f002 bce8 	b.w	800ab14 <_fflush_r>
 8008144:	bd10      	pop	{r4, pc}
 8008146:	bf00      	nop
 8008148:	20000698 	.word	0x20000698
 800814c:	20000700 	.word	0x20000700
 8008150:	20000768 	.word	0x20000768

08008154 <global_stdio_init.part.0>:
 8008154:	b510      	push	{r4, lr}
 8008156:	4b0b      	ldr	r3, [pc, #44]	; (8008184 <global_stdio_init.part.0+0x30>)
 8008158:	4c0b      	ldr	r4, [pc, #44]	; (8008188 <global_stdio_init.part.0+0x34>)
 800815a:	4a0c      	ldr	r2, [pc, #48]	; (800818c <global_stdio_init.part.0+0x38>)
 800815c:	601a      	str	r2, [r3, #0]
 800815e:	4620      	mov	r0, r4
 8008160:	2200      	movs	r2, #0
 8008162:	2104      	movs	r1, #4
 8008164:	f7ff ff94 	bl	8008090 <std>
 8008168:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800816c:	2201      	movs	r2, #1
 800816e:	2109      	movs	r1, #9
 8008170:	f7ff ff8e 	bl	8008090 <std>
 8008174:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008178:	2202      	movs	r2, #2
 800817a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817e:	2112      	movs	r1, #18
 8008180:	f7ff bf86 	b.w	8008090 <std>
 8008184:	200007d0 	.word	0x200007d0
 8008188:	20000698 	.word	0x20000698
 800818c:	080080fd 	.word	0x080080fd

08008190 <__sfp_lock_acquire>:
 8008190:	4801      	ldr	r0, [pc, #4]	; (8008198 <__sfp_lock_acquire+0x8>)
 8008192:	f000 b956 	b.w	8008442 <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	200007d9 	.word	0x200007d9

0800819c <__sfp_lock_release>:
 800819c:	4801      	ldr	r0, [pc, #4]	; (80081a4 <__sfp_lock_release+0x8>)
 800819e:	f000 b951 	b.w	8008444 <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	200007d9 	.word	0x200007d9

080081a8 <__sinit>:
 80081a8:	b510      	push	{r4, lr}
 80081aa:	4604      	mov	r4, r0
 80081ac:	f7ff fff0 	bl	8008190 <__sfp_lock_acquire>
 80081b0:	6a23      	ldr	r3, [r4, #32]
 80081b2:	b11b      	cbz	r3, 80081bc <__sinit+0x14>
 80081b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b8:	f7ff bff0 	b.w	800819c <__sfp_lock_release>
 80081bc:	4b04      	ldr	r3, [pc, #16]	; (80081d0 <__sinit+0x28>)
 80081be:	6223      	str	r3, [r4, #32]
 80081c0:	4b04      	ldr	r3, [pc, #16]	; (80081d4 <__sinit+0x2c>)
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d1f5      	bne.n	80081b4 <__sinit+0xc>
 80081c8:	f7ff ffc4 	bl	8008154 <global_stdio_init.part.0>
 80081cc:	e7f2      	b.n	80081b4 <__sinit+0xc>
 80081ce:	bf00      	nop
 80081d0:	08008115 	.word	0x08008115
 80081d4:	200007d0 	.word	0x200007d0

080081d8 <_fwalk_sglue>:
 80081d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081dc:	4607      	mov	r7, r0
 80081de:	4688      	mov	r8, r1
 80081e0:	4614      	mov	r4, r2
 80081e2:	2600      	movs	r6, #0
 80081e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e8:	f1b9 0901 	subs.w	r9, r9, #1
 80081ec:	d505      	bpl.n	80081fa <_fwalk_sglue+0x22>
 80081ee:	6824      	ldr	r4, [r4, #0]
 80081f0:	2c00      	cmp	r4, #0
 80081f2:	d1f7      	bne.n	80081e4 <_fwalk_sglue+0xc>
 80081f4:	4630      	mov	r0, r6
 80081f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081fa:	89ab      	ldrh	r3, [r5, #12]
 80081fc:	2b01      	cmp	r3, #1
 80081fe:	d907      	bls.n	8008210 <_fwalk_sglue+0x38>
 8008200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008204:	3301      	adds	r3, #1
 8008206:	d003      	beq.n	8008210 <_fwalk_sglue+0x38>
 8008208:	4629      	mov	r1, r5
 800820a:	4638      	mov	r0, r7
 800820c:	47c0      	blx	r8
 800820e:	4306      	orrs	r6, r0
 8008210:	3568      	adds	r5, #104	; 0x68
 8008212:	e7e9      	b.n	80081e8 <_fwalk_sglue+0x10>

08008214 <iprintf>:
 8008214:	b40f      	push	{r0, r1, r2, r3}
 8008216:	b507      	push	{r0, r1, r2, lr}
 8008218:	4906      	ldr	r1, [pc, #24]	; (8008234 <iprintf+0x20>)
 800821a:	ab04      	add	r3, sp, #16
 800821c:	6808      	ldr	r0, [r1, #0]
 800821e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008222:	6881      	ldr	r1, [r0, #8]
 8008224:	9301      	str	r3, [sp, #4]
 8008226:	f002 fad5 	bl	800a7d4 <_vfiprintf_r>
 800822a:	b003      	add	sp, #12
 800822c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008230:	b004      	add	sp, #16
 8008232:	4770      	bx	lr
 8008234:	20000208 	.word	0x20000208

08008238 <siprintf>:
 8008238:	b40e      	push	{r1, r2, r3}
 800823a:	b500      	push	{lr}
 800823c:	b09c      	sub	sp, #112	; 0x70
 800823e:	ab1d      	add	r3, sp, #116	; 0x74
 8008240:	9002      	str	r0, [sp, #8]
 8008242:	9006      	str	r0, [sp, #24]
 8008244:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008248:	4809      	ldr	r0, [pc, #36]	; (8008270 <siprintf+0x38>)
 800824a:	9107      	str	r1, [sp, #28]
 800824c:	9104      	str	r1, [sp, #16]
 800824e:	4909      	ldr	r1, [pc, #36]	; (8008274 <siprintf+0x3c>)
 8008250:	f853 2b04 	ldr.w	r2, [r3], #4
 8008254:	9105      	str	r1, [sp, #20]
 8008256:	6800      	ldr	r0, [r0, #0]
 8008258:	9301      	str	r3, [sp, #4]
 800825a:	a902      	add	r1, sp, #8
 800825c:	f002 f992 	bl	800a584 <_svfiprintf_r>
 8008260:	9b02      	ldr	r3, [sp, #8]
 8008262:	2200      	movs	r2, #0
 8008264:	701a      	strb	r2, [r3, #0]
 8008266:	b01c      	add	sp, #112	; 0x70
 8008268:	f85d eb04 	ldr.w	lr, [sp], #4
 800826c:	b003      	add	sp, #12
 800826e:	4770      	bx	lr
 8008270:	20000208 	.word	0x20000208
 8008274:	ffff0208 	.word	0xffff0208

08008278 <__sread>:
 8008278:	b510      	push	{r4, lr}
 800827a:	460c      	mov	r4, r1
 800827c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008280:	f000 f890 	bl	80083a4 <_read_r>
 8008284:	2800      	cmp	r0, #0
 8008286:	bfab      	itete	ge
 8008288:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800828a:	89a3      	ldrhlt	r3, [r4, #12]
 800828c:	181b      	addge	r3, r3, r0
 800828e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008292:	bfac      	ite	ge
 8008294:	6563      	strge	r3, [r4, #84]	; 0x54
 8008296:	81a3      	strhlt	r3, [r4, #12]
 8008298:	bd10      	pop	{r4, pc}

0800829a <__swrite>:
 800829a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800829e:	461f      	mov	r7, r3
 80082a0:	898b      	ldrh	r3, [r1, #12]
 80082a2:	05db      	lsls	r3, r3, #23
 80082a4:	4605      	mov	r5, r0
 80082a6:	460c      	mov	r4, r1
 80082a8:	4616      	mov	r6, r2
 80082aa:	d505      	bpl.n	80082b8 <__swrite+0x1e>
 80082ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b0:	2302      	movs	r3, #2
 80082b2:	2200      	movs	r2, #0
 80082b4:	f000 f864 	bl	8008380 <_lseek_r>
 80082b8:	89a3      	ldrh	r3, [r4, #12]
 80082ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	4632      	mov	r2, r6
 80082c6:	463b      	mov	r3, r7
 80082c8:	4628      	mov	r0, r5
 80082ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ce:	f000 b87b 	b.w	80083c8 <_write_r>

080082d2 <__sseek>:
 80082d2:	b510      	push	{r4, lr}
 80082d4:	460c      	mov	r4, r1
 80082d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082da:	f000 f851 	bl	8008380 <_lseek_r>
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	bf15      	itete	ne
 80082e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80082e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80082ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80082ee:	81a3      	strheq	r3, [r4, #12]
 80082f0:	bf18      	it	ne
 80082f2:	81a3      	strhne	r3, [r4, #12]
 80082f4:	bd10      	pop	{r4, pc}

080082f6 <__sclose>:
 80082f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082fa:	f000 b831 	b.w	8008360 <_close_r>

080082fe <memset>:
 80082fe:	4402      	add	r2, r0
 8008300:	4603      	mov	r3, r0
 8008302:	4293      	cmp	r3, r2
 8008304:	d100      	bne.n	8008308 <memset+0xa>
 8008306:	4770      	bx	lr
 8008308:	f803 1b01 	strb.w	r1, [r3], #1
 800830c:	e7f9      	b.n	8008302 <memset+0x4>

0800830e <strncmp>:
 800830e:	b510      	push	{r4, lr}
 8008310:	b16a      	cbz	r2, 800832e <strncmp+0x20>
 8008312:	3901      	subs	r1, #1
 8008314:	1884      	adds	r4, r0, r2
 8008316:	f810 2b01 	ldrb.w	r2, [r0], #1
 800831a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800831e:	429a      	cmp	r2, r3
 8008320:	d103      	bne.n	800832a <strncmp+0x1c>
 8008322:	42a0      	cmp	r0, r4
 8008324:	d001      	beq.n	800832a <strncmp+0x1c>
 8008326:	2a00      	cmp	r2, #0
 8008328:	d1f5      	bne.n	8008316 <strncmp+0x8>
 800832a:	1ad0      	subs	r0, r2, r3
 800832c:	bd10      	pop	{r4, pc}
 800832e:	4610      	mov	r0, r2
 8008330:	e7fc      	b.n	800832c <strncmp+0x1e>

08008332 <strncpy>:
 8008332:	b510      	push	{r4, lr}
 8008334:	3901      	subs	r1, #1
 8008336:	4603      	mov	r3, r0
 8008338:	b132      	cbz	r2, 8008348 <strncpy+0x16>
 800833a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800833e:	f803 4b01 	strb.w	r4, [r3], #1
 8008342:	3a01      	subs	r2, #1
 8008344:	2c00      	cmp	r4, #0
 8008346:	d1f7      	bne.n	8008338 <strncpy+0x6>
 8008348:	441a      	add	r2, r3
 800834a:	2100      	movs	r1, #0
 800834c:	4293      	cmp	r3, r2
 800834e:	d100      	bne.n	8008352 <strncpy+0x20>
 8008350:	bd10      	pop	{r4, pc}
 8008352:	f803 1b01 	strb.w	r1, [r3], #1
 8008356:	e7f9      	b.n	800834c <strncpy+0x1a>

08008358 <_localeconv_r>:
 8008358:	4800      	ldr	r0, [pc, #0]	; (800835c <_localeconv_r+0x4>)
 800835a:	4770      	bx	lr
 800835c:	20000140 	.word	0x20000140

08008360 <_close_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d06      	ldr	r5, [pc, #24]	; (800837c <_close_r+0x1c>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	f7fa fe77 	bl	800305e <_close>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_close_r+0x1a>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_close_r+0x1a>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	200007d4 	.word	0x200007d4

08008380 <_lseek_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4d07      	ldr	r5, [pc, #28]	; (80083a0 <_lseek_r+0x20>)
 8008384:	4604      	mov	r4, r0
 8008386:	4608      	mov	r0, r1
 8008388:	4611      	mov	r1, r2
 800838a:	2200      	movs	r2, #0
 800838c:	602a      	str	r2, [r5, #0]
 800838e:	461a      	mov	r2, r3
 8008390:	f7fa fe8c 	bl	80030ac <_lseek>
 8008394:	1c43      	adds	r3, r0, #1
 8008396:	d102      	bne.n	800839e <_lseek_r+0x1e>
 8008398:	682b      	ldr	r3, [r5, #0]
 800839a:	b103      	cbz	r3, 800839e <_lseek_r+0x1e>
 800839c:	6023      	str	r3, [r4, #0]
 800839e:	bd38      	pop	{r3, r4, r5, pc}
 80083a0:	200007d4 	.word	0x200007d4

080083a4 <_read_r>:
 80083a4:	b538      	push	{r3, r4, r5, lr}
 80083a6:	4d07      	ldr	r5, [pc, #28]	; (80083c4 <_read_r+0x20>)
 80083a8:	4604      	mov	r4, r0
 80083aa:	4608      	mov	r0, r1
 80083ac:	4611      	mov	r1, r2
 80083ae:	2200      	movs	r2, #0
 80083b0:	602a      	str	r2, [r5, #0]
 80083b2:	461a      	mov	r2, r3
 80083b4:	f7fa fe1a 	bl	8002fec <_read>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_read_r+0x1e>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_read_r+0x1e>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	200007d4 	.word	0x200007d4

080083c8 <_write_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d07      	ldr	r5, [pc, #28]	; (80083e8 <_write_r+0x20>)
 80083cc:	4604      	mov	r4, r0
 80083ce:	4608      	mov	r0, r1
 80083d0:	4611      	mov	r1, r2
 80083d2:	2200      	movs	r2, #0
 80083d4:	602a      	str	r2, [r5, #0]
 80083d6:	461a      	mov	r2, r3
 80083d8:	f7fa fe25 	bl	8003026 <_write>
 80083dc:	1c43      	adds	r3, r0, #1
 80083de:	d102      	bne.n	80083e6 <_write_r+0x1e>
 80083e0:	682b      	ldr	r3, [r5, #0]
 80083e2:	b103      	cbz	r3, 80083e6 <_write_r+0x1e>
 80083e4:	6023      	str	r3, [r4, #0]
 80083e6:	bd38      	pop	{r3, r4, r5, pc}
 80083e8:	200007d4 	.word	0x200007d4

080083ec <__errno>:
 80083ec:	4b01      	ldr	r3, [pc, #4]	; (80083f4 <__errno+0x8>)
 80083ee:	6818      	ldr	r0, [r3, #0]
 80083f0:	4770      	bx	lr
 80083f2:	bf00      	nop
 80083f4:	20000208 	.word	0x20000208

080083f8 <__libc_init_array>:
 80083f8:	b570      	push	{r4, r5, r6, lr}
 80083fa:	4d0d      	ldr	r5, [pc, #52]	; (8008430 <__libc_init_array+0x38>)
 80083fc:	4c0d      	ldr	r4, [pc, #52]	; (8008434 <__libc_init_array+0x3c>)
 80083fe:	1b64      	subs	r4, r4, r5
 8008400:	10a4      	asrs	r4, r4, #2
 8008402:	2600      	movs	r6, #0
 8008404:	42a6      	cmp	r6, r4
 8008406:	d109      	bne.n	800841c <__libc_init_array+0x24>
 8008408:	4d0b      	ldr	r5, [pc, #44]	; (8008438 <__libc_init_array+0x40>)
 800840a:	4c0c      	ldr	r4, [pc, #48]	; (800843c <__libc_init_array+0x44>)
 800840c:	f003 ff54 	bl	800c2b8 <_init>
 8008410:	1b64      	subs	r4, r4, r5
 8008412:	10a4      	asrs	r4, r4, #2
 8008414:	2600      	movs	r6, #0
 8008416:	42a6      	cmp	r6, r4
 8008418:	d105      	bne.n	8008426 <__libc_init_array+0x2e>
 800841a:	bd70      	pop	{r4, r5, r6, pc}
 800841c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008420:	4798      	blx	r3
 8008422:	3601      	adds	r6, #1
 8008424:	e7ee      	b.n	8008404 <__libc_init_array+0xc>
 8008426:	f855 3b04 	ldr.w	r3, [r5], #4
 800842a:	4798      	blx	r3
 800842c:	3601      	adds	r6, #1
 800842e:	e7f2      	b.n	8008416 <__libc_init_array+0x1e>
 8008430:	0800c928 	.word	0x0800c928
 8008434:	0800c928 	.word	0x0800c928
 8008438:	0800c928 	.word	0x0800c928
 800843c:	0800c92c 	.word	0x0800c92c

08008440 <__retarget_lock_init_recursive>:
 8008440:	4770      	bx	lr

08008442 <__retarget_lock_acquire_recursive>:
 8008442:	4770      	bx	lr

08008444 <__retarget_lock_release_recursive>:
 8008444:	4770      	bx	lr

08008446 <memcpy>:
 8008446:	440a      	add	r2, r1
 8008448:	4291      	cmp	r1, r2
 800844a:	f100 33ff 	add.w	r3, r0, #4294967295
 800844e:	d100      	bne.n	8008452 <memcpy+0xc>
 8008450:	4770      	bx	lr
 8008452:	b510      	push	{r4, lr}
 8008454:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008458:	f803 4f01 	strb.w	r4, [r3, #1]!
 800845c:	4291      	cmp	r1, r2
 800845e:	d1f9      	bne.n	8008454 <memcpy+0xe>
 8008460:	bd10      	pop	{r4, pc}
 8008462:	0000      	movs	r0, r0
 8008464:	0000      	movs	r0, r0
	...

08008468 <nan>:
 8008468:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008470 <nan+0x8>
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	00000000 	.word	0x00000000
 8008474:	7ff80000 	.word	0x7ff80000

08008478 <nanf>:
 8008478:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008480 <nanf+0x8>
 800847c:	4770      	bx	lr
 800847e:	bf00      	nop
 8008480:	7fc00000 	.word	0x7fc00000

08008484 <quorem>:
 8008484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008488:	6903      	ldr	r3, [r0, #16]
 800848a:	690c      	ldr	r4, [r1, #16]
 800848c:	42a3      	cmp	r3, r4
 800848e:	4607      	mov	r7, r0
 8008490:	db7e      	blt.n	8008590 <quorem+0x10c>
 8008492:	3c01      	subs	r4, #1
 8008494:	f101 0814 	add.w	r8, r1, #20
 8008498:	f100 0514 	add.w	r5, r0, #20
 800849c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084aa:	3301      	adds	r3, #1
 80084ac:	429a      	cmp	r2, r3
 80084ae:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084b2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084b6:	fbb2 f6f3 	udiv	r6, r2, r3
 80084ba:	d331      	bcc.n	8008520 <quorem+0x9c>
 80084bc:	f04f 0e00 	mov.w	lr, #0
 80084c0:	4640      	mov	r0, r8
 80084c2:	46ac      	mov	ip, r5
 80084c4:	46f2      	mov	sl, lr
 80084c6:	f850 2b04 	ldr.w	r2, [r0], #4
 80084ca:	b293      	uxth	r3, r2
 80084cc:	fb06 e303 	mla	r3, r6, r3, lr
 80084d0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084d4:	0c1a      	lsrs	r2, r3, #16
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	ebaa 0303 	sub.w	r3, sl, r3
 80084dc:	f8dc a000 	ldr.w	sl, [ip]
 80084e0:	fa13 f38a 	uxtah	r3, r3, sl
 80084e4:	fb06 220e 	mla	r2, r6, lr, r2
 80084e8:	9300      	str	r3, [sp, #0]
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80084f0:	b292      	uxth	r2, r2
 80084f2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80084f6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80084fa:	f8bd 3000 	ldrh.w	r3, [sp]
 80084fe:	4581      	cmp	r9, r0
 8008500:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008504:	f84c 3b04 	str.w	r3, [ip], #4
 8008508:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800850c:	d2db      	bcs.n	80084c6 <quorem+0x42>
 800850e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008512:	b92b      	cbnz	r3, 8008520 <quorem+0x9c>
 8008514:	9b01      	ldr	r3, [sp, #4]
 8008516:	3b04      	subs	r3, #4
 8008518:	429d      	cmp	r5, r3
 800851a:	461a      	mov	r2, r3
 800851c:	d32c      	bcc.n	8008578 <quorem+0xf4>
 800851e:	613c      	str	r4, [r7, #16]
 8008520:	4638      	mov	r0, r7
 8008522:	f001 fd5b 	bl	8009fdc <__mcmp>
 8008526:	2800      	cmp	r0, #0
 8008528:	db22      	blt.n	8008570 <quorem+0xec>
 800852a:	3601      	adds	r6, #1
 800852c:	4629      	mov	r1, r5
 800852e:	2000      	movs	r0, #0
 8008530:	f858 2b04 	ldr.w	r2, [r8], #4
 8008534:	f8d1 c000 	ldr.w	ip, [r1]
 8008538:	b293      	uxth	r3, r2
 800853a:	1ac3      	subs	r3, r0, r3
 800853c:	0c12      	lsrs	r2, r2, #16
 800853e:	fa13 f38c 	uxtah	r3, r3, ip
 8008542:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008546:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800854a:	b29b      	uxth	r3, r3
 800854c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008550:	45c1      	cmp	r9, r8
 8008552:	f841 3b04 	str.w	r3, [r1], #4
 8008556:	ea4f 4022 	mov.w	r0, r2, asr #16
 800855a:	d2e9      	bcs.n	8008530 <quorem+0xac>
 800855c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008560:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008564:	b922      	cbnz	r2, 8008570 <quorem+0xec>
 8008566:	3b04      	subs	r3, #4
 8008568:	429d      	cmp	r5, r3
 800856a:	461a      	mov	r2, r3
 800856c:	d30a      	bcc.n	8008584 <quorem+0x100>
 800856e:	613c      	str	r4, [r7, #16]
 8008570:	4630      	mov	r0, r6
 8008572:	b003      	add	sp, #12
 8008574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008578:	6812      	ldr	r2, [r2, #0]
 800857a:	3b04      	subs	r3, #4
 800857c:	2a00      	cmp	r2, #0
 800857e:	d1ce      	bne.n	800851e <quorem+0x9a>
 8008580:	3c01      	subs	r4, #1
 8008582:	e7c9      	b.n	8008518 <quorem+0x94>
 8008584:	6812      	ldr	r2, [r2, #0]
 8008586:	3b04      	subs	r3, #4
 8008588:	2a00      	cmp	r2, #0
 800858a:	d1f0      	bne.n	800856e <quorem+0xea>
 800858c:	3c01      	subs	r4, #1
 800858e:	e7eb      	b.n	8008568 <quorem+0xe4>
 8008590:	2000      	movs	r0, #0
 8008592:	e7ee      	b.n	8008572 <quorem+0xee>
 8008594:	0000      	movs	r0, r0
	...

08008598 <_dtoa_r>:
 8008598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800859c:	ed2d 8b04 	vpush	{d8-d9}
 80085a0:	69c5      	ldr	r5, [r0, #28]
 80085a2:	b093      	sub	sp, #76	; 0x4c
 80085a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085a8:	ec57 6b10 	vmov	r6, r7, d0
 80085ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085b0:	9107      	str	r1, [sp, #28]
 80085b2:	4604      	mov	r4, r0
 80085b4:	920a      	str	r2, [sp, #40]	; 0x28
 80085b6:	930d      	str	r3, [sp, #52]	; 0x34
 80085b8:	b975      	cbnz	r5, 80085d8 <_dtoa_r+0x40>
 80085ba:	2010      	movs	r0, #16
 80085bc:	f001 f982 	bl	80098c4 <malloc>
 80085c0:	4602      	mov	r2, r0
 80085c2:	61e0      	str	r0, [r4, #28]
 80085c4:	b920      	cbnz	r0, 80085d0 <_dtoa_r+0x38>
 80085c6:	4bae      	ldr	r3, [pc, #696]	; (8008880 <_dtoa_r+0x2e8>)
 80085c8:	21ef      	movs	r1, #239	; 0xef
 80085ca:	48ae      	ldr	r0, [pc, #696]	; (8008884 <_dtoa_r+0x2ec>)
 80085cc:	f002 fb8a 	bl	800ace4 <__assert_func>
 80085d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80085d4:	6005      	str	r5, [r0, #0]
 80085d6:	60c5      	str	r5, [r0, #12]
 80085d8:	69e3      	ldr	r3, [r4, #28]
 80085da:	6819      	ldr	r1, [r3, #0]
 80085dc:	b151      	cbz	r1, 80085f4 <_dtoa_r+0x5c>
 80085de:	685a      	ldr	r2, [r3, #4]
 80085e0:	604a      	str	r2, [r1, #4]
 80085e2:	2301      	movs	r3, #1
 80085e4:	4093      	lsls	r3, r2
 80085e6:	608b      	str	r3, [r1, #8]
 80085e8:	4620      	mov	r0, r4
 80085ea:	f001 fa71 	bl	8009ad0 <_Bfree>
 80085ee:	69e3      	ldr	r3, [r4, #28]
 80085f0:	2200      	movs	r2, #0
 80085f2:	601a      	str	r2, [r3, #0]
 80085f4:	1e3b      	subs	r3, r7, #0
 80085f6:	bfbb      	ittet	lt
 80085f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80085fc:	9303      	strlt	r3, [sp, #12]
 80085fe:	2300      	movge	r3, #0
 8008600:	2201      	movlt	r2, #1
 8008602:	bfac      	ite	ge
 8008604:	f8c8 3000 	strge.w	r3, [r8]
 8008608:	f8c8 2000 	strlt.w	r2, [r8]
 800860c:	4b9e      	ldr	r3, [pc, #632]	; (8008888 <_dtoa_r+0x2f0>)
 800860e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008612:	ea33 0308 	bics.w	r3, r3, r8
 8008616:	d11b      	bne.n	8008650 <_dtoa_r+0xb8>
 8008618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800861a:	f242 730f 	movw	r3, #9999	; 0x270f
 800861e:	6013      	str	r3, [r2, #0]
 8008620:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008624:	4333      	orrs	r3, r6
 8008626:	f000 8593 	beq.w	8009150 <_dtoa_r+0xbb8>
 800862a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800862c:	b963      	cbnz	r3, 8008648 <_dtoa_r+0xb0>
 800862e:	4b97      	ldr	r3, [pc, #604]	; (800888c <_dtoa_r+0x2f4>)
 8008630:	e027      	b.n	8008682 <_dtoa_r+0xea>
 8008632:	4b97      	ldr	r3, [pc, #604]	; (8008890 <_dtoa_r+0x2f8>)
 8008634:	9300      	str	r3, [sp, #0]
 8008636:	3308      	adds	r3, #8
 8008638:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800863a:	6013      	str	r3, [r2, #0]
 800863c:	9800      	ldr	r0, [sp, #0]
 800863e:	b013      	add	sp, #76	; 0x4c
 8008640:	ecbd 8b04 	vpop	{d8-d9}
 8008644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008648:	4b90      	ldr	r3, [pc, #576]	; (800888c <_dtoa_r+0x2f4>)
 800864a:	9300      	str	r3, [sp, #0]
 800864c:	3303      	adds	r3, #3
 800864e:	e7f3      	b.n	8008638 <_dtoa_r+0xa0>
 8008650:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008654:	2200      	movs	r2, #0
 8008656:	ec51 0b17 	vmov	r0, r1, d7
 800865a:	eeb0 8a47 	vmov.f32	s16, s14
 800865e:	eef0 8a67 	vmov.f32	s17, s15
 8008662:	2300      	movs	r3, #0
 8008664:	f7f8 fa50 	bl	8000b08 <__aeabi_dcmpeq>
 8008668:	4681      	mov	r9, r0
 800866a:	b160      	cbz	r0, 8008686 <_dtoa_r+0xee>
 800866c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800866e:	2301      	movs	r3, #1
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 8568 	beq.w	800914a <_dtoa_r+0xbb2>
 800867a:	4b86      	ldr	r3, [pc, #536]	; (8008894 <_dtoa_r+0x2fc>)
 800867c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800867e:	6013      	str	r3, [r2, #0]
 8008680:	3b01      	subs	r3, #1
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	e7da      	b.n	800863c <_dtoa_r+0xa4>
 8008686:	aa10      	add	r2, sp, #64	; 0x40
 8008688:	a911      	add	r1, sp, #68	; 0x44
 800868a:	4620      	mov	r0, r4
 800868c:	eeb0 0a48 	vmov.f32	s0, s16
 8008690:	eef0 0a68 	vmov.f32	s1, s17
 8008694:	f001 fdb8 	bl	800a208 <__d2b>
 8008698:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800869c:	4682      	mov	sl, r0
 800869e:	2d00      	cmp	r5, #0
 80086a0:	d07f      	beq.n	80087a2 <_dtoa_r+0x20a>
 80086a2:	ee18 3a90 	vmov	r3, s17
 80086a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80086ae:	ec51 0b18 	vmov	r0, r1, d8
 80086b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80086be:	4619      	mov	r1, r3
 80086c0:	2200      	movs	r2, #0
 80086c2:	4b75      	ldr	r3, [pc, #468]	; (8008898 <_dtoa_r+0x300>)
 80086c4:	f7f7 fe00 	bl	80002c8 <__aeabi_dsub>
 80086c8:	a367      	add	r3, pc, #412	; (adr r3, 8008868 <_dtoa_r+0x2d0>)
 80086ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ce:	f7f7 ffb3 	bl	8000638 <__aeabi_dmul>
 80086d2:	a367      	add	r3, pc, #412	; (adr r3, 8008870 <_dtoa_r+0x2d8>)
 80086d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086d8:	f7f7 fdf8 	bl	80002cc <__adddf3>
 80086dc:	4606      	mov	r6, r0
 80086de:	4628      	mov	r0, r5
 80086e0:	460f      	mov	r7, r1
 80086e2:	f7f7 ff3f 	bl	8000564 <__aeabi_i2d>
 80086e6:	a364      	add	r3, pc, #400	; (adr r3, 8008878 <_dtoa_r+0x2e0>)
 80086e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086ec:	f7f7 ffa4 	bl	8000638 <__aeabi_dmul>
 80086f0:	4602      	mov	r2, r0
 80086f2:	460b      	mov	r3, r1
 80086f4:	4630      	mov	r0, r6
 80086f6:	4639      	mov	r1, r7
 80086f8:	f7f7 fde8 	bl	80002cc <__adddf3>
 80086fc:	4606      	mov	r6, r0
 80086fe:	460f      	mov	r7, r1
 8008700:	f7f8 fa4a 	bl	8000b98 <__aeabi_d2iz>
 8008704:	2200      	movs	r2, #0
 8008706:	4683      	mov	fp, r0
 8008708:	2300      	movs	r3, #0
 800870a:	4630      	mov	r0, r6
 800870c:	4639      	mov	r1, r7
 800870e:	f7f8 fa05 	bl	8000b1c <__aeabi_dcmplt>
 8008712:	b148      	cbz	r0, 8008728 <_dtoa_r+0x190>
 8008714:	4658      	mov	r0, fp
 8008716:	f7f7 ff25 	bl	8000564 <__aeabi_i2d>
 800871a:	4632      	mov	r2, r6
 800871c:	463b      	mov	r3, r7
 800871e:	f7f8 f9f3 	bl	8000b08 <__aeabi_dcmpeq>
 8008722:	b908      	cbnz	r0, 8008728 <_dtoa_r+0x190>
 8008724:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008728:	f1bb 0f16 	cmp.w	fp, #22
 800872c:	d857      	bhi.n	80087de <_dtoa_r+0x246>
 800872e:	4b5b      	ldr	r3, [pc, #364]	; (800889c <_dtoa_r+0x304>)
 8008730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008738:	ec51 0b18 	vmov	r0, r1, d8
 800873c:	f7f8 f9ee 	bl	8000b1c <__aeabi_dcmplt>
 8008740:	2800      	cmp	r0, #0
 8008742:	d04e      	beq.n	80087e2 <_dtoa_r+0x24a>
 8008744:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008748:	2300      	movs	r3, #0
 800874a:	930c      	str	r3, [sp, #48]	; 0x30
 800874c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800874e:	1b5b      	subs	r3, r3, r5
 8008750:	1e5a      	subs	r2, r3, #1
 8008752:	bf45      	ittet	mi
 8008754:	f1c3 0301 	rsbmi	r3, r3, #1
 8008758:	9305      	strmi	r3, [sp, #20]
 800875a:	2300      	movpl	r3, #0
 800875c:	2300      	movmi	r3, #0
 800875e:	9206      	str	r2, [sp, #24]
 8008760:	bf54      	ite	pl
 8008762:	9305      	strpl	r3, [sp, #20]
 8008764:	9306      	strmi	r3, [sp, #24]
 8008766:	f1bb 0f00 	cmp.w	fp, #0
 800876a:	db3c      	blt.n	80087e6 <_dtoa_r+0x24e>
 800876c:	9b06      	ldr	r3, [sp, #24]
 800876e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008772:	445b      	add	r3, fp
 8008774:	9306      	str	r3, [sp, #24]
 8008776:	2300      	movs	r3, #0
 8008778:	9308      	str	r3, [sp, #32]
 800877a:	9b07      	ldr	r3, [sp, #28]
 800877c:	2b09      	cmp	r3, #9
 800877e:	d868      	bhi.n	8008852 <_dtoa_r+0x2ba>
 8008780:	2b05      	cmp	r3, #5
 8008782:	bfc4      	itt	gt
 8008784:	3b04      	subgt	r3, #4
 8008786:	9307      	strgt	r3, [sp, #28]
 8008788:	9b07      	ldr	r3, [sp, #28]
 800878a:	f1a3 0302 	sub.w	r3, r3, #2
 800878e:	bfcc      	ite	gt
 8008790:	2500      	movgt	r5, #0
 8008792:	2501      	movle	r5, #1
 8008794:	2b03      	cmp	r3, #3
 8008796:	f200 8085 	bhi.w	80088a4 <_dtoa_r+0x30c>
 800879a:	e8df f003 	tbb	[pc, r3]
 800879e:	3b2e      	.short	0x3b2e
 80087a0:	5839      	.short	0x5839
 80087a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087a6:	441d      	add	r5, r3
 80087a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	bfc1      	itttt	gt
 80087b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087b4:	fa08 f803 	lslgt.w	r8, r8, r3
 80087b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80087bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 80087c0:	bfd6      	itet	le
 80087c2:	f1c3 0320 	rsble	r3, r3, #32
 80087c6:	ea48 0003 	orrgt.w	r0, r8, r3
 80087ca:	fa06 f003 	lslle.w	r0, r6, r3
 80087ce:	f7f7 feb9 	bl	8000544 <__aeabi_ui2d>
 80087d2:	2201      	movs	r2, #1
 80087d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80087d8:	3d01      	subs	r5, #1
 80087da:	920e      	str	r2, [sp, #56]	; 0x38
 80087dc:	e76f      	b.n	80086be <_dtoa_r+0x126>
 80087de:	2301      	movs	r3, #1
 80087e0:	e7b3      	b.n	800874a <_dtoa_r+0x1b2>
 80087e2:	900c      	str	r0, [sp, #48]	; 0x30
 80087e4:	e7b2      	b.n	800874c <_dtoa_r+0x1b4>
 80087e6:	9b05      	ldr	r3, [sp, #20]
 80087e8:	eba3 030b 	sub.w	r3, r3, fp
 80087ec:	9305      	str	r3, [sp, #20]
 80087ee:	f1cb 0300 	rsb	r3, fp, #0
 80087f2:	9308      	str	r3, [sp, #32]
 80087f4:	2300      	movs	r3, #0
 80087f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80087f8:	e7bf      	b.n	800877a <_dtoa_r+0x1e2>
 80087fa:	2300      	movs	r3, #0
 80087fc:	9309      	str	r3, [sp, #36]	; 0x24
 80087fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008800:	2b00      	cmp	r3, #0
 8008802:	dc52      	bgt.n	80088aa <_dtoa_r+0x312>
 8008804:	2301      	movs	r3, #1
 8008806:	9301      	str	r3, [sp, #4]
 8008808:	9304      	str	r3, [sp, #16]
 800880a:	461a      	mov	r2, r3
 800880c:	920a      	str	r2, [sp, #40]	; 0x28
 800880e:	e00b      	b.n	8008828 <_dtoa_r+0x290>
 8008810:	2301      	movs	r3, #1
 8008812:	e7f3      	b.n	80087fc <_dtoa_r+0x264>
 8008814:	2300      	movs	r3, #0
 8008816:	9309      	str	r3, [sp, #36]	; 0x24
 8008818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800881a:	445b      	add	r3, fp
 800881c:	9301      	str	r3, [sp, #4]
 800881e:	3301      	adds	r3, #1
 8008820:	2b01      	cmp	r3, #1
 8008822:	9304      	str	r3, [sp, #16]
 8008824:	bfb8      	it	lt
 8008826:	2301      	movlt	r3, #1
 8008828:	69e0      	ldr	r0, [r4, #28]
 800882a:	2100      	movs	r1, #0
 800882c:	2204      	movs	r2, #4
 800882e:	f102 0614 	add.w	r6, r2, #20
 8008832:	429e      	cmp	r6, r3
 8008834:	d93d      	bls.n	80088b2 <_dtoa_r+0x31a>
 8008836:	6041      	str	r1, [r0, #4]
 8008838:	4620      	mov	r0, r4
 800883a:	f001 f909 	bl	8009a50 <_Balloc>
 800883e:	9000      	str	r0, [sp, #0]
 8008840:	2800      	cmp	r0, #0
 8008842:	d139      	bne.n	80088b8 <_dtoa_r+0x320>
 8008844:	4b16      	ldr	r3, [pc, #88]	; (80088a0 <_dtoa_r+0x308>)
 8008846:	4602      	mov	r2, r0
 8008848:	f240 11af 	movw	r1, #431	; 0x1af
 800884c:	e6bd      	b.n	80085ca <_dtoa_r+0x32>
 800884e:	2301      	movs	r3, #1
 8008850:	e7e1      	b.n	8008816 <_dtoa_r+0x27e>
 8008852:	2501      	movs	r5, #1
 8008854:	2300      	movs	r3, #0
 8008856:	9307      	str	r3, [sp, #28]
 8008858:	9509      	str	r5, [sp, #36]	; 0x24
 800885a:	f04f 33ff 	mov.w	r3, #4294967295
 800885e:	9301      	str	r3, [sp, #4]
 8008860:	9304      	str	r3, [sp, #16]
 8008862:	2200      	movs	r2, #0
 8008864:	2312      	movs	r3, #18
 8008866:	e7d1      	b.n	800880c <_dtoa_r+0x274>
 8008868:	636f4361 	.word	0x636f4361
 800886c:	3fd287a7 	.word	0x3fd287a7
 8008870:	8b60c8b3 	.word	0x8b60c8b3
 8008874:	3fc68a28 	.word	0x3fc68a28
 8008878:	509f79fb 	.word	0x509f79fb
 800887c:	3fd34413 	.word	0x3fd34413
 8008880:	0800c3be 	.word	0x0800c3be
 8008884:	0800c3d5 	.word	0x0800c3d5
 8008888:	7ff00000 	.word	0x7ff00000
 800888c:	0800c3ba 	.word	0x0800c3ba
 8008890:	0800c3b1 	.word	0x0800c3b1
 8008894:	0800c381 	.word	0x0800c381
 8008898:	3ff80000 	.word	0x3ff80000
 800889c:	0800c520 	.word	0x0800c520
 80088a0:	0800c42d 	.word	0x0800c42d
 80088a4:	2301      	movs	r3, #1
 80088a6:	9309      	str	r3, [sp, #36]	; 0x24
 80088a8:	e7d7      	b.n	800885a <_dtoa_r+0x2c2>
 80088aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	9304      	str	r3, [sp, #16]
 80088b0:	e7ba      	b.n	8008828 <_dtoa_r+0x290>
 80088b2:	3101      	adds	r1, #1
 80088b4:	0052      	lsls	r2, r2, #1
 80088b6:	e7ba      	b.n	800882e <_dtoa_r+0x296>
 80088b8:	69e3      	ldr	r3, [r4, #28]
 80088ba:	9a00      	ldr	r2, [sp, #0]
 80088bc:	601a      	str	r2, [r3, #0]
 80088be:	9b04      	ldr	r3, [sp, #16]
 80088c0:	2b0e      	cmp	r3, #14
 80088c2:	f200 80a8 	bhi.w	8008a16 <_dtoa_r+0x47e>
 80088c6:	2d00      	cmp	r5, #0
 80088c8:	f000 80a5 	beq.w	8008a16 <_dtoa_r+0x47e>
 80088cc:	f1bb 0f00 	cmp.w	fp, #0
 80088d0:	dd38      	ble.n	8008944 <_dtoa_r+0x3ac>
 80088d2:	4bc0      	ldr	r3, [pc, #768]	; (8008bd4 <_dtoa_r+0x63c>)
 80088d4:	f00b 020f 	and.w	r2, fp, #15
 80088d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80088e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 80088e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 80088e8:	d019      	beq.n	800891e <_dtoa_r+0x386>
 80088ea:	4bbb      	ldr	r3, [pc, #748]	; (8008bd8 <_dtoa_r+0x640>)
 80088ec:	ec51 0b18 	vmov	r0, r1, d8
 80088f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088f4:	f7f7 ffca 	bl	800088c <__aeabi_ddiv>
 80088f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088fc:	f008 080f 	and.w	r8, r8, #15
 8008900:	2503      	movs	r5, #3
 8008902:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008bd8 <_dtoa_r+0x640>
 8008906:	f1b8 0f00 	cmp.w	r8, #0
 800890a:	d10a      	bne.n	8008922 <_dtoa_r+0x38a>
 800890c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008910:	4632      	mov	r2, r6
 8008912:	463b      	mov	r3, r7
 8008914:	f7f7 ffba 	bl	800088c <__aeabi_ddiv>
 8008918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800891c:	e02b      	b.n	8008976 <_dtoa_r+0x3de>
 800891e:	2502      	movs	r5, #2
 8008920:	e7ef      	b.n	8008902 <_dtoa_r+0x36a>
 8008922:	f018 0f01 	tst.w	r8, #1
 8008926:	d008      	beq.n	800893a <_dtoa_r+0x3a2>
 8008928:	4630      	mov	r0, r6
 800892a:	4639      	mov	r1, r7
 800892c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008930:	f7f7 fe82 	bl	8000638 <__aeabi_dmul>
 8008934:	3501      	adds	r5, #1
 8008936:	4606      	mov	r6, r0
 8008938:	460f      	mov	r7, r1
 800893a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800893e:	f109 0908 	add.w	r9, r9, #8
 8008942:	e7e0      	b.n	8008906 <_dtoa_r+0x36e>
 8008944:	f000 809f 	beq.w	8008a86 <_dtoa_r+0x4ee>
 8008948:	f1cb 0600 	rsb	r6, fp, #0
 800894c:	4ba1      	ldr	r3, [pc, #644]	; (8008bd4 <_dtoa_r+0x63c>)
 800894e:	4fa2      	ldr	r7, [pc, #648]	; (8008bd8 <_dtoa_r+0x640>)
 8008950:	f006 020f 	and.w	r2, r6, #15
 8008954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800895c:	ec51 0b18 	vmov	r0, r1, d8
 8008960:	f7f7 fe6a 	bl	8000638 <__aeabi_dmul>
 8008964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008968:	1136      	asrs	r6, r6, #4
 800896a:	2300      	movs	r3, #0
 800896c:	2502      	movs	r5, #2
 800896e:	2e00      	cmp	r6, #0
 8008970:	d17e      	bne.n	8008a70 <_dtoa_r+0x4d8>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1d0      	bne.n	8008918 <_dtoa_r+0x380>
 8008976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008978:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800897c:	2b00      	cmp	r3, #0
 800897e:	f000 8084 	beq.w	8008a8a <_dtoa_r+0x4f2>
 8008982:	4b96      	ldr	r3, [pc, #600]	; (8008bdc <_dtoa_r+0x644>)
 8008984:	2200      	movs	r2, #0
 8008986:	4640      	mov	r0, r8
 8008988:	4649      	mov	r1, r9
 800898a:	f7f8 f8c7 	bl	8000b1c <__aeabi_dcmplt>
 800898e:	2800      	cmp	r0, #0
 8008990:	d07b      	beq.n	8008a8a <_dtoa_r+0x4f2>
 8008992:	9b04      	ldr	r3, [sp, #16]
 8008994:	2b00      	cmp	r3, #0
 8008996:	d078      	beq.n	8008a8a <_dtoa_r+0x4f2>
 8008998:	9b01      	ldr	r3, [sp, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	dd39      	ble.n	8008a12 <_dtoa_r+0x47a>
 800899e:	4b90      	ldr	r3, [pc, #576]	; (8008be0 <_dtoa_r+0x648>)
 80089a0:	2200      	movs	r2, #0
 80089a2:	4640      	mov	r0, r8
 80089a4:	4649      	mov	r1, r9
 80089a6:	f7f7 fe47 	bl	8000638 <__aeabi_dmul>
 80089aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089ae:	9e01      	ldr	r6, [sp, #4]
 80089b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80089b4:	3501      	adds	r5, #1
 80089b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089ba:	4628      	mov	r0, r5
 80089bc:	f7f7 fdd2 	bl	8000564 <__aeabi_i2d>
 80089c0:	4642      	mov	r2, r8
 80089c2:	464b      	mov	r3, r9
 80089c4:	f7f7 fe38 	bl	8000638 <__aeabi_dmul>
 80089c8:	4b86      	ldr	r3, [pc, #536]	; (8008be4 <_dtoa_r+0x64c>)
 80089ca:	2200      	movs	r2, #0
 80089cc:	f7f7 fc7e 	bl	80002cc <__adddf3>
 80089d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80089d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089d8:	9303      	str	r3, [sp, #12]
 80089da:	2e00      	cmp	r6, #0
 80089dc:	d158      	bne.n	8008a90 <_dtoa_r+0x4f8>
 80089de:	4b82      	ldr	r3, [pc, #520]	; (8008be8 <_dtoa_r+0x650>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	4640      	mov	r0, r8
 80089e4:	4649      	mov	r1, r9
 80089e6:	f7f7 fc6f 	bl	80002c8 <__aeabi_dsub>
 80089ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089ee:	4680      	mov	r8, r0
 80089f0:	4689      	mov	r9, r1
 80089f2:	f7f8 f8b1 	bl	8000b58 <__aeabi_dcmpgt>
 80089f6:	2800      	cmp	r0, #0
 80089f8:	f040 8296 	bne.w	8008f28 <_dtoa_r+0x990>
 80089fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a00:	4640      	mov	r0, r8
 8008a02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a06:	4649      	mov	r1, r9
 8008a08:	f7f8 f888 	bl	8000b1c <__aeabi_dcmplt>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f040 8289 	bne.w	8008f24 <_dtoa_r+0x98c>
 8008a12:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	f2c0 814e 	blt.w	8008cba <_dtoa_r+0x722>
 8008a1e:	f1bb 0f0e 	cmp.w	fp, #14
 8008a22:	f300 814a 	bgt.w	8008cba <_dtoa_r+0x722>
 8008a26:	4b6b      	ldr	r3, [pc, #428]	; (8008bd4 <_dtoa_r+0x63c>)
 8008a28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f280 80dc 	bge.w	8008bf0 <_dtoa_r+0x658>
 8008a38:	9b04      	ldr	r3, [sp, #16]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f300 80d8 	bgt.w	8008bf0 <_dtoa_r+0x658>
 8008a40:	f040 826f 	bne.w	8008f22 <_dtoa_r+0x98a>
 8008a44:	4b68      	ldr	r3, [pc, #416]	; (8008be8 <_dtoa_r+0x650>)
 8008a46:	2200      	movs	r2, #0
 8008a48:	4640      	mov	r0, r8
 8008a4a:	4649      	mov	r1, r9
 8008a4c:	f7f7 fdf4 	bl	8000638 <__aeabi_dmul>
 8008a50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a54:	f7f8 f876 	bl	8000b44 <__aeabi_dcmpge>
 8008a58:	9e04      	ldr	r6, [sp, #16]
 8008a5a:	4637      	mov	r7, r6
 8008a5c:	2800      	cmp	r0, #0
 8008a5e:	f040 8245 	bne.w	8008eec <_dtoa_r+0x954>
 8008a62:	9d00      	ldr	r5, [sp, #0]
 8008a64:	2331      	movs	r3, #49	; 0x31
 8008a66:	f805 3b01 	strb.w	r3, [r5], #1
 8008a6a:	f10b 0b01 	add.w	fp, fp, #1
 8008a6e:	e241      	b.n	8008ef4 <_dtoa_r+0x95c>
 8008a70:	07f2      	lsls	r2, r6, #31
 8008a72:	d505      	bpl.n	8008a80 <_dtoa_r+0x4e8>
 8008a74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a78:	f7f7 fdde 	bl	8000638 <__aeabi_dmul>
 8008a7c:	3501      	adds	r5, #1
 8008a7e:	2301      	movs	r3, #1
 8008a80:	1076      	asrs	r6, r6, #1
 8008a82:	3708      	adds	r7, #8
 8008a84:	e773      	b.n	800896e <_dtoa_r+0x3d6>
 8008a86:	2502      	movs	r5, #2
 8008a88:	e775      	b.n	8008976 <_dtoa_r+0x3de>
 8008a8a:	9e04      	ldr	r6, [sp, #16]
 8008a8c:	465f      	mov	r7, fp
 8008a8e:	e792      	b.n	80089b6 <_dtoa_r+0x41e>
 8008a90:	9900      	ldr	r1, [sp, #0]
 8008a92:	4b50      	ldr	r3, [pc, #320]	; (8008bd4 <_dtoa_r+0x63c>)
 8008a94:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a98:	4431      	add	r1, r6
 8008a9a:	9102      	str	r1, [sp, #8]
 8008a9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008a9e:	eeb0 9a47 	vmov.f32	s18, s14
 8008aa2:	eef0 9a67 	vmov.f32	s19, s15
 8008aa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008aaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aae:	2900      	cmp	r1, #0
 8008ab0:	d044      	beq.n	8008b3c <_dtoa_r+0x5a4>
 8008ab2:	494e      	ldr	r1, [pc, #312]	; (8008bec <_dtoa_r+0x654>)
 8008ab4:	2000      	movs	r0, #0
 8008ab6:	f7f7 fee9 	bl	800088c <__aeabi_ddiv>
 8008aba:	ec53 2b19 	vmov	r2, r3, d9
 8008abe:	f7f7 fc03 	bl	80002c8 <__aeabi_dsub>
 8008ac2:	9d00      	ldr	r5, [sp, #0]
 8008ac4:	ec41 0b19 	vmov	d9, r0, r1
 8008ac8:	4649      	mov	r1, r9
 8008aca:	4640      	mov	r0, r8
 8008acc:	f7f8 f864 	bl	8000b98 <__aeabi_d2iz>
 8008ad0:	4606      	mov	r6, r0
 8008ad2:	f7f7 fd47 	bl	8000564 <__aeabi_i2d>
 8008ad6:	4602      	mov	r2, r0
 8008ad8:	460b      	mov	r3, r1
 8008ada:	4640      	mov	r0, r8
 8008adc:	4649      	mov	r1, r9
 8008ade:	f7f7 fbf3 	bl	80002c8 <__aeabi_dsub>
 8008ae2:	3630      	adds	r6, #48	; 0x30
 8008ae4:	f805 6b01 	strb.w	r6, [r5], #1
 8008ae8:	ec53 2b19 	vmov	r2, r3, d9
 8008aec:	4680      	mov	r8, r0
 8008aee:	4689      	mov	r9, r1
 8008af0:	f7f8 f814 	bl	8000b1c <__aeabi_dcmplt>
 8008af4:	2800      	cmp	r0, #0
 8008af6:	d164      	bne.n	8008bc2 <_dtoa_r+0x62a>
 8008af8:	4642      	mov	r2, r8
 8008afa:	464b      	mov	r3, r9
 8008afc:	4937      	ldr	r1, [pc, #220]	; (8008bdc <_dtoa_r+0x644>)
 8008afe:	2000      	movs	r0, #0
 8008b00:	f7f7 fbe2 	bl	80002c8 <__aeabi_dsub>
 8008b04:	ec53 2b19 	vmov	r2, r3, d9
 8008b08:	f7f8 f808 	bl	8000b1c <__aeabi_dcmplt>
 8008b0c:	2800      	cmp	r0, #0
 8008b0e:	f040 80b6 	bne.w	8008c7e <_dtoa_r+0x6e6>
 8008b12:	9b02      	ldr	r3, [sp, #8]
 8008b14:	429d      	cmp	r5, r3
 8008b16:	f43f af7c 	beq.w	8008a12 <_dtoa_r+0x47a>
 8008b1a:	4b31      	ldr	r3, [pc, #196]	; (8008be0 <_dtoa_r+0x648>)
 8008b1c:	ec51 0b19 	vmov	r0, r1, d9
 8008b20:	2200      	movs	r2, #0
 8008b22:	f7f7 fd89 	bl	8000638 <__aeabi_dmul>
 8008b26:	4b2e      	ldr	r3, [pc, #184]	; (8008be0 <_dtoa_r+0x648>)
 8008b28:	ec41 0b19 	vmov	d9, r0, r1
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4640      	mov	r0, r8
 8008b30:	4649      	mov	r1, r9
 8008b32:	f7f7 fd81 	bl	8000638 <__aeabi_dmul>
 8008b36:	4680      	mov	r8, r0
 8008b38:	4689      	mov	r9, r1
 8008b3a:	e7c5      	b.n	8008ac8 <_dtoa_r+0x530>
 8008b3c:	ec51 0b17 	vmov	r0, r1, d7
 8008b40:	f7f7 fd7a 	bl	8000638 <__aeabi_dmul>
 8008b44:	9b02      	ldr	r3, [sp, #8]
 8008b46:	9d00      	ldr	r5, [sp, #0]
 8008b48:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b4a:	ec41 0b19 	vmov	d9, r0, r1
 8008b4e:	4649      	mov	r1, r9
 8008b50:	4640      	mov	r0, r8
 8008b52:	f7f8 f821 	bl	8000b98 <__aeabi_d2iz>
 8008b56:	4606      	mov	r6, r0
 8008b58:	f7f7 fd04 	bl	8000564 <__aeabi_i2d>
 8008b5c:	3630      	adds	r6, #48	; 0x30
 8008b5e:	4602      	mov	r2, r0
 8008b60:	460b      	mov	r3, r1
 8008b62:	4640      	mov	r0, r8
 8008b64:	4649      	mov	r1, r9
 8008b66:	f7f7 fbaf 	bl	80002c8 <__aeabi_dsub>
 8008b6a:	f805 6b01 	strb.w	r6, [r5], #1
 8008b6e:	9b02      	ldr	r3, [sp, #8]
 8008b70:	429d      	cmp	r5, r3
 8008b72:	4680      	mov	r8, r0
 8008b74:	4689      	mov	r9, r1
 8008b76:	f04f 0200 	mov.w	r2, #0
 8008b7a:	d124      	bne.n	8008bc6 <_dtoa_r+0x62e>
 8008b7c:	4b1b      	ldr	r3, [pc, #108]	; (8008bec <_dtoa_r+0x654>)
 8008b7e:	ec51 0b19 	vmov	r0, r1, d9
 8008b82:	f7f7 fba3 	bl	80002cc <__adddf3>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	4640      	mov	r0, r8
 8008b8c:	4649      	mov	r1, r9
 8008b8e:	f7f7 ffe3 	bl	8000b58 <__aeabi_dcmpgt>
 8008b92:	2800      	cmp	r0, #0
 8008b94:	d173      	bne.n	8008c7e <_dtoa_r+0x6e6>
 8008b96:	ec53 2b19 	vmov	r2, r3, d9
 8008b9a:	4914      	ldr	r1, [pc, #80]	; (8008bec <_dtoa_r+0x654>)
 8008b9c:	2000      	movs	r0, #0
 8008b9e:	f7f7 fb93 	bl	80002c8 <__aeabi_dsub>
 8008ba2:	4602      	mov	r2, r0
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4640      	mov	r0, r8
 8008ba8:	4649      	mov	r1, r9
 8008baa:	f7f7 ffb7 	bl	8000b1c <__aeabi_dcmplt>
 8008bae:	2800      	cmp	r0, #0
 8008bb0:	f43f af2f 	beq.w	8008a12 <_dtoa_r+0x47a>
 8008bb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008bb6:	1e6b      	subs	r3, r5, #1
 8008bb8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bbe:	2b30      	cmp	r3, #48	; 0x30
 8008bc0:	d0f8      	beq.n	8008bb4 <_dtoa_r+0x61c>
 8008bc2:	46bb      	mov	fp, r7
 8008bc4:	e04a      	b.n	8008c5c <_dtoa_r+0x6c4>
 8008bc6:	4b06      	ldr	r3, [pc, #24]	; (8008be0 <_dtoa_r+0x648>)
 8008bc8:	f7f7 fd36 	bl	8000638 <__aeabi_dmul>
 8008bcc:	4680      	mov	r8, r0
 8008bce:	4689      	mov	r9, r1
 8008bd0:	e7bd      	b.n	8008b4e <_dtoa_r+0x5b6>
 8008bd2:	bf00      	nop
 8008bd4:	0800c520 	.word	0x0800c520
 8008bd8:	0800c4f8 	.word	0x0800c4f8
 8008bdc:	3ff00000 	.word	0x3ff00000
 8008be0:	40240000 	.word	0x40240000
 8008be4:	401c0000 	.word	0x401c0000
 8008be8:	40140000 	.word	0x40140000
 8008bec:	3fe00000 	.word	0x3fe00000
 8008bf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008bf4:	9d00      	ldr	r5, [sp, #0]
 8008bf6:	4642      	mov	r2, r8
 8008bf8:	464b      	mov	r3, r9
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	4639      	mov	r1, r7
 8008bfe:	f7f7 fe45 	bl	800088c <__aeabi_ddiv>
 8008c02:	f7f7 ffc9 	bl	8000b98 <__aeabi_d2iz>
 8008c06:	9001      	str	r0, [sp, #4]
 8008c08:	f7f7 fcac 	bl	8000564 <__aeabi_i2d>
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	464b      	mov	r3, r9
 8008c10:	f7f7 fd12 	bl	8000638 <__aeabi_dmul>
 8008c14:	4602      	mov	r2, r0
 8008c16:	460b      	mov	r3, r1
 8008c18:	4630      	mov	r0, r6
 8008c1a:	4639      	mov	r1, r7
 8008c1c:	f7f7 fb54 	bl	80002c8 <__aeabi_dsub>
 8008c20:	9e01      	ldr	r6, [sp, #4]
 8008c22:	9f04      	ldr	r7, [sp, #16]
 8008c24:	3630      	adds	r6, #48	; 0x30
 8008c26:	f805 6b01 	strb.w	r6, [r5], #1
 8008c2a:	9e00      	ldr	r6, [sp, #0]
 8008c2c:	1bae      	subs	r6, r5, r6
 8008c2e:	42b7      	cmp	r7, r6
 8008c30:	4602      	mov	r2, r0
 8008c32:	460b      	mov	r3, r1
 8008c34:	d134      	bne.n	8008ca0 <_dtoa_r+0x708>
 8008c36:	f7f7 fb49 	bl	80002cc <__adddf3>
 8008c3a:	4642      	mov	r2, r8
 8008c3c:	464b      	mov	r3, r9
 8008c3e:	4606      	mov	r6, r0
 8008c40:	460f      	mov	r7, r1
 8008c42:	f7f7 ff89 	bl	8000b58 <__aeabi_dcmpgt>
 8008c46:	b9c8      	cbnz	r0, 8008c7c <_dtoa_r+0x6e4>
 8008c48:	4642      	mov	r2, r8
 8008c4a:	464b      	mov	r3, r9
 8008c4c:	4630      	mov	r0, r6
 8008c4e:	4639      	mov	r1, r7
 8008c50:	f7f7 ff5a 	bl	8000b08 <__aeabi_dcmpeq>
 8008c54:	b110      	cbz	r0, 8008c5c <_dtoa_r+0x6c4>
 8008c56:	9b01      	ldr	r3, [sp, #4]
 8008c58:	07db      	lsls	r3, r3, #31
 8008c5a:	d40f      	bmi.n	8008c7c <_dtoa_r+0x6e4>
 8008c5c:	4651      	mov	r1, sl
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f000 ff36 	bl	8009ad0 <_Bfree>
 8008c64:	2300      	movs	r3, #0
 8008c66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c68:	702b      	strb	r3, [r5, #0]
 8008c6a:	f10b 0301 	add.w	r3, fp, #1
 8008c6e:	6013      	str	r3, [r2, #0]
 8008c70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	f43f ace2 	beq.w	800863c <_dtoa_r+0xa4>
 8008c78:	601d      	str	r5, [r3, #0]
 8008c7a:	e4df      	b.n	800863c <_dtoa_r+0xa4>
 8008c7c:	465f      	mov	r7, fp
 8008c7e:	462b      	mov	r3, r5
 8008c80:	461d      	mov	r5, r3
 8008c82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c86:	2a39      	cmp	r2, #57	; 0x39
 8008c88:	d106      	bne.n	8008c98 <_dtoa_r+0x700>
 8008c8a:	9a00      	ldr	r2, [sp, #0]
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	d1f7      	bne.n	8008c80 <_dtoa_r+0x6e8>
 8008c90:	9900      	ldr	r1, [sp, #0]
 8008c92:	2230      	movs	r2, #48	; 0x30
 8008c94:	3701      	adds	r7, #1
 8008c96:	700a      	strb	r2, [r1, #0]
 8008c98:	781a      	ldrb	r2, [r3, #0]
 8008c9a:	3201      	adds	r2, #1
 8008c9c:	701a      	strb	r2, [r3, #0]
 8008c9e:	e790      	b.n	8008bc2 <_dtoa_r+0x62a>
 8008ca0:	4ba3      	ldr	r3, [pc, #652]	; (8008f30 <_dtoa_r+0x998>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	f7f7 fcc8 	bl	8000638 <__aeabi_dmul>
 8008ca8:	2200      	movs	r2, #0
 8008caa:	2300      	movs	r3, #0
 8008cac:	4606      	mov	r6, r0
 8008cae:	460f      	mov	r7, r1
 8008cb0:	f7f7 ff2a 	bl	8000b08 <__aeabi_dcmpeq>
 8008cb4:	2800      	cmp	r0, #0
 8008cb6:	d09e      	beq.n	8008bf6 <_dtoa_r+0x65e>
 8008cb8:	e7d0      	b.n	8008c5c <_dtoa_r+0x6c4>
 8008cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cbc:	2a00      	cmp	r2, #0
 8008cbe:	f000 80ca 	beq.w	8008e56 <_dtoa_r+0x8be>
 8008cc2:	9a07      	ldr	r2, [sp, #28]
 8008cc4:	2a01      	cmp	r2, #1
 8008cc6:	f300 80ad 	bgt.w	8008e24 <_dtoa_r+0x88c>
 8008cca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ccc:	2a00      	cmp	r2, #0
 8008cce:	f000 80a5 	beq.w	8008e1c <_dtoa_r+0x884>
 8008cd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008cd6:	9e08      	ldr	r6, [sp, #32]
 8008cd8:	9d05      	ldr	r5, [sp, #20]
 8008cda:	9a05      	ldr	r2, [sp, #20]
 8008cdc:	441a      	add	r2, r3
 8008cde:	9205      	str	r2, [sp, #20]
 8008ce0:	9a06      	ldr	r2, [sp, #24]
 8008ce2:	2101      	movs	r1, #1
 8008ce4:	441a      	add	r2, r3
 8008ce6:	4620      	mov	r0, r4
 8008ce8:	9206      	str	r2, [sp, #24]
 8008cea:	f000 fff1 	bl	8009cd0 <__i2b>
 8008cee:	4607      	mov	r7, r0
 8008cf0:	b165      	cbz	r5, 8008d0c <_dtoa_r+0x774>
 8008cf2:	9b06      	ldr	r3, [sp, #24]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	dd09      	ble.n	8008d0c <_dtoa_r+0x774>
 8008cf8:	42ab      	cmp	r3, r5
 8008cfa:	9a05      	ldr	r2, [sp, #20]
 8008cfc:	bfa8      	it	ge
 8008cfe:	462b      	movge	r3, r5
 8008d00:	1ad2      	subs	r2, r2, r3
 8008d02:	9205      	str	r2, [sp, #20]
 8008d04:	9a06      	ldr	r2, [sp, #24]
 8008d06:	1aed      	subs	r5, r5, r3
 8008d08:	1ad3      	subs	r3, r2, r3
 8008d0a:	9306      	str	r3, [sp, #24]
 8008d0c:	9b08      	ldr	r3, [sp, #32]
 8008d0e:	b1f3      	cbz	r3, 8008d4e <_dtoa_r+0x7b6>
 8008d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f000 80a3 	beq.w	8008e5e <_dtoa_r+0x8c6>
 8008d18:	2e00      	cmp	r6, #0
 8008d1a:	dd10      	ble.n	8008d3e <_dtoa_r+0x7a6>
 8008d1c:	4639      	mov	r1, r7
 8008d1e:	4632      	mov	r2, r6
 8008d20:	4620      	mov	r0, r4
 8008d22:	f001 f895 	bl	8009e50 <__pow5mult>
 8008d26:	4652      	mov	r2, sl
 8008d28:	4601      	mov	r1, r0
 8008d2a:	4607      	mov	r7, r0
 8008d2c:	4620      	mov	r0, r4
 8008d2e:	f000 ffe5 	bl	8009cfc <__multiply>
 8008d32:	4651      	mov	r1, sl
 8008d34:	4680      	mov	r8, r0
 8008d36:	4620      	mov	r0, r4
 8008d38:	f000 feca 	bl	8009ad0 <_Bfree>
 8008d3c:	46c2      	mov	sl, r8
 8008d3e:	9b08      	ldr	r3, [sp, #32]
 8008d40:	1b9a      	subs	r2, r3, r6
 8008d42:	d004      	beq.n	8008d4e <_dtoa_r+0x7b6>
 8008d44:	4651      	mov	r1, sl
 8008d46:	4620      	mov	r0, r4
 8008d48:	f001 f882 	bl	8009e50 <__pow5mult>
 8008d4c:	4682      	mov	sl, r0
 8008d4e:	2101      	movs	r1, #1
 8008d50:	4620      	mov	r0, r4
 8008d52:	f000 ffbd 	bl	8009cd0 <__i2b>
 8008d56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	4606      	mov	r6, r0
 8008d5c:	f340 8081 	ble.w	8008e62 <_dtoa_r+0x8ca>
 8008d60:	461a      	mov	r2, r3
 8008d62:	4601      	mov	r1, r0
 8008d64:	4620      	mov	r0, r4
 8008d66:	f001 f873 	bl	8009e50 <__pow5mult>
 8008d6a:	9b07      	ldr	r3, [sp, #28]
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	4606      	mov	r6, r0
 8008d70:	dd7a      	ble.n	8008e68 <_dtoa_r+0x8d0>
 8008d72:	f04f 0800 	mov.w	r8, #0
 8008d76:	6933      	ldr	r3, [r6, #16]
 8008d78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008d7c:	6918      	ldr	r0, [r3, #16]
 8008d7e:	f000 ff59 	bl	8009c34 <__hi0bits>
 8008d82:	f1c0 0020 	rsb	r0, r0, #32
 8008d86:	9b06      	ldr	r3, [sp, #24]
 8008d88:	4418      	add	r0, r3
 8008d8a:	f010 001f 	ands.w	r0, r0, #31
 8008d8e:	f000 8094 	beq.w	8008eba <_dtoa_r+0x922>
 8008d92:	f1c0 0320 	rsb	r3, r0, #32
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	f340 8085 	ble.w	8008ea6 <_dtoa_r+0x90e>
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	f1c0 001c 	rsb	r0, r0, #28
 8008da2:	4403      	add	r3, r0
 8008da4:	9305      	str	r3, [sp, #20]
 8008da6:	9b06      	ldr	r3, [sp, #24]
 8008da8:	4403      	add	r3, r0
 8008daa:	4405      	add	r5, r0
 8008dac:	9306      	str	r3, [sp, #24]
 8008dae:	9b05      	ldr	r3, [sp, #20]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	dd05      	ble.n	8008dc0 <_dtoa_r+0x828>
 8008db4:	4651      	mov	r1, sl
 8008db6:	461a      	mov	r2, r3
 8008db8:	4620      	mov	r0, r4
 8008dba:	f001 f8a3 	bl	8009f04 <__lshift>
 8008dbe:	4682      	mov	sl, r0
 8008dc0:	9b06      	ldr	r3, [sp, #24]
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	dd05      	ble.n	8008dd2 <_dtoa_r+0x83a>
 8008dc6:	4631      	mov	r1, r6
 8008dc8:	461a      	mov	r2, r3
 8008dca:	4620      	mov	r0, r4
 8008dcc:	f001 f89a 	bl	8009f04 <__lshift>
 8008dd0:	4606      	mov	r6, r0
 8008dd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d072      	beq.n	8008ebe <_dtoa_r+0x926>
 8008dd8:	4631      	mov	r1, r6
 8008dda:	4650      	mov	r0, sl
 8008ddc:	f001 f8fe 	bl	8009fdc <__mcmp>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	da6c      	bge.n	8008ebe <_dtoa_r+0x926>
 8008de4:	2300      	movs	r3, #0
 8008de6:	4651      	mov	r1, sl
 8008de8:	220a      	movs	r2, #10
 8008dea:	4620      	mov	r0, r4
 8008dec:	f000 fe92 	bl	8009b14 <__multadd>
 8008df0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008df6:	4682      	mov	sl, r0
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	f000 81b0 	beq.w	800915e <_dtoa_r+0xbc6>
 8008dfe:	2300      	movs	r3, #0
 8008e00:	4639      	mov	r1, r7
 8008e02:	220a      	movs	r2, #10
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 fe85 	bl	8009b14 <__multadd>
 8008e0a:	9b01      	ldr	r3, [sp, #4]
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	4607      	mov	r7, r0
 8008e10:	f300 8096 	bgt.w	8008f40 <_dtoa_r+0x9a8>
 8008e14:	9b07      	ldr	r3, [sp, #28]
 8008e16:	2b02      	cmp	r3, #2
 8008e18:	dc59      	bgt.n	8008ece <_dtoa_r+0x936>
 8008e1a:	e091      	b.n	8008f40 <_dtoa_r+0x9a8>
 8008e1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e22:	e758      	b.n	8008cd6 <_dtoa_r+0x73e>
 8008e24:	9b04      	ldr	r3, [sp, #16]
 8008e26:	1e5e      	subs	r6, r3, #1
 8008e28:	9b08      	ldr	r3, [sp, #32]
 8008e2a:	42b3      	cmp	r3, r6
 8008e2c:	bfbf      	itttt	lt
 8008e2e:	9b08      	ldrlt	r3, [sp, #32]
 8008e30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e32:	9608      	strlt	r6, [sp, #32]
 8008e34:	1af3      	sublt	r3, r6, r3
 8008e36:	bfb4      	ite	lt
 8008e38:	18d2      	addlt	r2, r2, r3
 8008e3a:	1b9e      	subge	r6, r3, r6
 8008e3c:	9b04      	ldr	r3, [sp, #16]
 8008e3e:	bfbc      	itt	lt
 8008e40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008e42:	2600      	movlt	r6, #0
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	bfb7      	itett	lt
 8008e48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008e4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008e50:	1a9d      	sublt	r5, r3, r2
 8008e52:	2300      	movlt	r3, #0
 8008e54:	e741      	b.n	8008cda <_dtoa_r+0x742>
 8008e56:	9e08      	ldr	r6, [sp, #32]
 8008e58:	9d05      	ldr	r5, [sp, #20]
 8008e5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e5c:	e748      	b.n	8008cf0 <_dtoa_r+0x758>
 8008e5e:	9a08      	ldr	r2, [sp, #32]
 8008e60:	e770      	b.n	8008d44 <_dtoa_r+0x7ac>
 8008e62:	9b07      	ldr	r3, [sp, #28]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	dc19      	bgt.n	8008e9c <_dtoa_r+0x904>
 8008e68:	9b02      	ldr	r3, [sp, #8]
 8008e6a:	b9bb      	cbnz	r3, 8008e9c <_dtoa_r+0x904>
 8008e6c:	9b03      	ldr	r3, [sp, #12]
 8008e6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008e72:	b99b      	cbnz	r3, 8008e9c <_dtoa_r+0x904>
 8008e74:	9b03      	ldr	r3, [sp, #12]
 8008e76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e7a:	0d1b      	lsrs	r3, r3, #20
 8008e7c:	051b      	lsls	r3, r3, #20
 8008e7e:	b183      	cbz	r3, 8008ea2 <_dtoa_r+0x90a>
 8008e80:	9b05      	ldr	r3, [sp, #20]
 8008e82:	3301      	adds	r3, #1
 8008e84:	9305      	str	r3, [sp, #20]
 8008e86:	9b06      	ldr	r3, [sp, #24]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	9306      	str	r3, [sp, #24]
 8008e8c:	f04f 0801 	mov.w	r8, #1
 8008e90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	f47f af6f 	bne.w	8008d76 <_dtoa_r+0x7de>
 8008e98:	2001      	movs	r0, #1
 8008e9a:	e774      	b.n	8008d86 <_dtoa_r+0x7ee>
 8008e9c:	f04f 0800 	mov.w	r8, #0
 8008ea0:	e7f6      	b.n	8008e90 <_dtoa_r+0x8f8>
 8008ea2:	4698      	mov	r8, r3
 8008ea4:	e7f4      	b.n	8008e90 <_dtoa_r+0x8f8>
 8008ea6:	d082      	beq.n	8008dae <_dtoa_r+0x816>
 8008ea8:	9a05      	ldr	r2, [sp, #20]
 8008eaa:	331c      	adds	r3, #28
 8008eac:	441a      	add	r2, r3
 8008eae:	9205      	str	r2, [sp, #20]
 8008eb0:	9a06      	ldr	r2, [sp, #24]
 8008eb2:	441a      	add	r2, r3
 8008eb4:	441d      	add	r5, r3
 8008eb6:	9206      	str	r2, [sp, #24]
 8008eb8:	e779      	b.n	8008dae <_dtoa_r+0x816>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	e7f4      	b.n	8008ea8 <_dtoa_r+0x910>
 8008ebe:	9b04      	ldr	r3, [sp, #16]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	dc37      	bgt.n	8008f34 <_dtoa_r+0x99c>
 8008ec4:	9b07      	ldr	r3, [sp, #28]
 8008ec6:	2b02      	cmp	r3, #2
 8008ec8:	dd34      	ble.n	8008f34 <_dtoa_r+0x99c>
 8008eca:	9b04      	ldr	r3, [sp, #16]
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	9b01      	ldr	r3, [sp, #4]
 8008ed0:	b963      	cbnz	r3, 8008eec <_dtoa_r+0x954>
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	4620      	mov	r0, r4
 8008ed8:	f000 fe1c 	bl	8009b14 <__multadd>
 8008edc:	4601      	mov	r1, r0
 8008ede:	4606      	mov	r6, r0
 8008ee0:	4650      	mov	r0, sl
 8008ee2:	f001 f87b 	bl	8009fdc <__mcmp>
 8008ee6:	2800      	cmp	r0, #0
 8008ee8:	f73f adbb 	bgt.w	8008a62 <_dtoa_r+0x4ca>
 8008eec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008eee:	9d00      	ldr	r5, [sp, #0]
 8008ef0:	ea6f 0b03 	mvn.w	fp, r3
 8008ef4:	f04f 0800 	mov.w	r8, #0
 8008ef8:	4631      	mov	r1, r6
 8008efa:	4620      	mov	r0, r4
 8008efc:	f000 fde8 	bl	8009ad0 <_Bfree>
 8008f00:	2f00      	cmp	r7, #0
 8008f02:	f43f aeab 	beq.w	8008c5c <_dtoa_r+0x6c4>
 8008f06:	f1b8 0f00 	cmp.w	r8, #0
 8008f0a:	d005      	beq.n	8008f18 <_dtoa_r+0x980>
 8008f0c:	45b8      	cmp	r8, r7
 8008f0e:	d003      	beq.n	8008f18 <_dtoa_r+0x980>
 8008f10:	4641      	mov	r1, r8
 8008f12:	4620      	mov	r0, r4
 8008f14:	f000 fddc 	bl	8009ad0 <_Bfree>
 8008f18:	4639      	mov	r1, r7
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f000 fdd8 	bl	8009ad0 <_Bfree>
 8008f20:	e69c      	b.n	8008c5c <_dtoa_r+0x6c4>
 8008f22:	2600      	movs	r6, #0
 8008f24:	4637      	mov	r7, r6
 8008f26:	e7e1      	b.n	8008eec <_dtoa_r+0x954>
 8008f28:	46bb      	mov	fp, r7
 8008f2a:	4637      	mov	r7, r6
 8008f2c:	e599      	b.n	8008a62 <_dtoa_r+0x4ca>
 8008f2e:	bf00      	nop
 8008f30:	40240000 	.word	0x40240000
 8008f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	f000 80c8 	beq.w	80090cc <_dtoa_r+0xb34>
 8008f3c:	9b04      	ldr	r3, [sp, #16]
 8008f3e:	9301      	str	r3, [sp, #4]
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	dd05      	ble.n	8008f50 <_dtoa_r+0x9b8>
 8008f44:	4639      	mov	r1, r7
 8008f46:	462a      	mov	r2, r5
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f000 ffdb 	bl	8009f04 <__lshift>
 8008f4e:	4607      	mov	r7, r0
 8008f50:	f1b8 0f00 	cmp.w	r8, #0
 8008f54:	d05b      	beq.n	800900e <_dtoa_r+0xa76>
 8008f56:	6879      	ldr	r1, [r7, #4]
 8008f58:	4620      	mov	r0, r4
 8008f5a:	f000 fd79 	bl	8009a50 <_Balloc>
 8008f5e:	4605      	mov	r5, r0
 8008f60:	b928      	cbnz	r0, 8008f6e <_dtoa_r+0x9d6>
 8008f62:	4b83      	ldr	r3, [pc, #524]	; (8009170 <_dtoa_r+0xbd8>)
 8008f64:	4602      	mov	r2, r0
 8008f66:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008f6a:	f7ff bb2e 	b.w	80085ca <_dtoa_r+0x32>
 8008f6e:	693a      	ldr	r2, [r7, #16]
 8008f70:	3202      	adds	r2, #2
 8008f72:	0092      	lsls	r2, r2, #2
 8008f74:	f107 010c 	add.w	r1, r7, #12
 8008f78:	300c      	adds	r0, #12
 8008f7a:	f7ff fa64 	bl	8008446 <memcpy>
 8008f7e:	2201      	movs	r2, #1
 8008f80:	4629      	mov	r1, r5
 8008f82:	4620      	mov	r0, r4
 8008f84:	f000 ffbe 	bl	8009f04 <__lshift>
 8008f88:	9b00      	ldr	r3, [sp, #0]
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	9304      	str	r3, [sp, #16]
 8008f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f92:	4413      	add	r3, r2
 8008f94:	9308      	str	r3, [sp, #32]
 8008f96:	9b02      	ldr	r3, [sp, #8]
 8008f98:	f003 0301 	and.w	r3, r3, #1
 8008f9c:	46b8      	mov	r8, r7
 8008f9e:	9306      	str	r3, [sp, #24]
 8008fa0:	4607      	mov	r7, r0
 8008fa2:	9b04      	ldr	r3, [sp, #16]
 8008fa4:	4631      	mov	r1, r6
 8008fa6:	3b01      	subs	r3, #1
 8008fa8:	4650      	mov	r0, sl
 8008faa:	9301      	str	r3, [sp, #4]
 8008fac:	f7ff fa6a 	bl	8008484 <quorem>
 8008fb0:	4641      	mov	r1, r8
 8008fb2:	9002      	str	r0, [sp, #8]
 8008fb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008fb8:	4650      	mov	r0, sl
 8008fba:	f001 f80f 	bl	8009fdc <__mcmp>
 8008fbe:	463a      	mov	r2, r7
 8008fc0:	9005      	str	r0, [sp, #20]
 8008fc2:	4631      	mov	r1, r6
 8008fc4:	4620      	mov	r0, r4
 8008fc6:	f001 f825 	bl	800a014 <__mdiff>
 8008fca:	68c2      	ldr	r2, [r0, #12]
 8008fcc:	4605      	mov	r5, r0
 8008fce:	bb02      	cbnz	r2, 8009012 <_dtoa_r+0xa7a>
 8008fd0:	4601      	mov	r1, r0
 8008fd2:	4650      	mov	r0, sl
 8008fd4:	f001 f802 	bl	8009fdc <__mcmp>
 8008fd8:	4602      	mov	r2, r0
 8008fda:	4629      	mov	r1, r5
 8008fdc:	4620      	mov	r0, r4
 8008fde:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe0:	f000 fd76 	bl	8009ad0 <_Bfree>
 8008fe4:	9b07      	ldr	r3, [sp, #28]
 8008fe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008fe8:	9d04      	ldr	r5, [sp, #16]
 8008fea:	ea43 0102 	orr.w	r1, r3, r2
 8008fee:	9b06      	ldr	r3, [sp, #24]
 8008ff0:	4319      	orrs	r1, r3
 8008ff2:	d110      	bne.n	8009016 <_dtoa_r+0xa7e>
 8008ff4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008ff8:	d029      	beq.n	800904e <_dtoa_r+0xab6>
 8008ffa:	9b05      	ldr	r3, [sp, #20]
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	dd02      	ble.n	8009006 <_dtoa_r+0xa6e>
 8009000:	9b02      	ldr	r3, [sp, #8]
 8009002:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009006:	9b01      	ldr	r3, [sp, #4]
 8009008:	f883 9000 	strb.w	r9, [r3]
 800900c:	e774      	b.n	8008ef8 <_dtoa_r+0x960>
 800900e:	4638      	mov	r0, r7
 8009010:	e7ba      	b.n	8008f88 <_dtoa_r+0x9f0>
 8009012:	2201      	movs	r2, #1
 8009014:	e7e1      	b.n	8008fda <_dtoa_r+0xa42>
 8009016:	9b05      	ldr	r3, [sp, #20]
 8009018:	2b00      	cmp	r3, #0
 800901a:	db04      	blt.n	8009026 <_dtoa_r+0xa8e>
 800901c:	9907      	ldr	r1, [sp, #28]
 800901e:	430b      	orrs	r3, r1
 8009020:	9906      	ldr	r1, [sp, #24]
 8009022:	430b      	orrs	r3, r1
 8009024:	d120      	bne.n	8009068 <_dtoa_r+0xad0>
 8009026:	2a00      	cmp	r2, #0
 8009028:	dded      	ble.n	8009006 <_dtoa_r+0xa6e>
 800902a:	4651      	mov	r1, sl
 800902c:	2201      	movs	r2, #1
 800902e:	4620      	mov	r0, r4
 8009030:	f000 ff68 	bl	8009f04 <__lshift>
 8009034:	4631      	mov	r1, r6
 8009036:	4682      	mov	sl, r0
 8009038:	f000 ffd0 	bl	8009fdc <__mcmp>
 800903c:	2800      	cmp	r0, #0
 800903e:	dc03      	bgt.n	8009048 <_dtoa_r+0xab0>
 8009040:	d1e1      	bne.n	8009006 <_dtoa_r+0xa6e>
 8009042:	f019 0f01 	tst.w	r9, #1
 8009046:	d0de      	beq.n	8009006 <_dtoa_r+0xa6e>
 8009048:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800904c:	d1d8      	bne.n	8009000 <_dtoa_r+0xa68>
 800904e:	9a01      	ldr	r2, [sp, #4]
 8009050:	2339      	movs	r3, #57	; 0x39
 8009052:	7013      	strb	r3, [r2, #0]
 8009054:	462b      	mov	r3, r5
 8009056:	461d      	mov	r5, r3
 8009058:	3b01      	subs	r3, #1
 800905a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800905e:	2a39      	cmp	r2, #57	; 0x39
 8009060:	d06c      	beq.n	800913c <_dtoa_r+0xba4>
 8009062:	3201      	adds	r2, #1
 8009064:	701a      	strb	r2, [r3, #0]
 8009066:	e747      	b.n	8008ef8 <_dtoa_r+0x960>
 8009068:	2a00      	cmp	r2, #0
 800906a:	dd07      	ble.n	800907c <_dtoa_r+0xae4>
 800906c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009070:	d0ed      	beq.n	800904e <_dtoa_r+0xab6>
 8009072:	9a01      	ldr	r2, [sp, #4]
 8009074:	f109 0301 	add.w	r3, r9, #1
 8009078:	7013      	strb	r3, [r2, #0]
 800907a:	e73d      	b.n	8008ef8 <_dtoa_r+0x960>
 800907c:	9b04      	ldr	r3, [sp, #16]
 800907e:	9a08      	ldr	r2, [sp, #32]
 8009080:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009084:	4293      	cmp	r3, r2
 8009086:	d043      	beq.n	8009110 <_dtoa_r+0xb78>
 8009088:	4651      	mov	r1, sl
 800908a:	2300      	movs	r3, #0
 800908c:	220a      	movs	r2, #10
 800908e:	4620      	mov	r0, r4
 8009090:	f000 fd40 	bl	8009b14 <__multadd>
 8009094:	45b8      	cmp	r8, r7
 8009096:	4682      	mov	sl, r0
 8009098:	f04f 0300 	mov.w	r3, #0
 800909c:	f04f 020a 	mov.w	r2, #10
 80090a0:	4641      	mov	r1, r8
 80090a2:	4620      	mov	r0, r4
 80090a4:	d107      	bne.n	80090b6 <_dtoa_r+0xb1e>
 80090a6:	f000 fd35 	bl	8009b14 <__multadd>
 80090aa:	4680      	mov	r8, r0
 80090ac:	4607      	mov	r7, r0
 80090ae:	9b04      	ldr	r3, [sp, #16]
 80090b0:	3301      	adds	r3, #1
 80090b2:	9304      	str	r3, [sp, #16]
 80090b4:	e775      	b.n	8008fa2 <_dtoa_r+0xa0a>
 80090b6:	f000 fd2d 	bl	8009b14 <__multadd>
 80090ba:	4639      	mov	r1, r7
 80090bc:	4680      	mov	r8, r0
 80090be:	2300      	movs	r3, #0
 80090c0:	220a      	movs	r2, #10
 80090c2:	4620      	mov	r0, r4
 80090c4:	f000 fd26 	bl	8009b14 <__multadd>
 80090c8:	4607      	mov	r7, r0
 80090ca:	e7f0      	b.n	80090ae <_dtoa_r+0xb16>
 80090cc:	9b04      	ldr	r3, [sp, #16]
 80090ce:	9301      	str	r3, [sp, #4]
 80090d0:	9d00      	ldr	r5, [sp, #0]
 80090d2:	4631      	mov	r1, r6
 80090d4:	4650      	mov	r0, sl
 80090d6:	f7ff f9d5 	bl	8008484 <quorem>
 80090da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80090de:	9b00      	ldr	r3, [sp, #0]
 80090e0:	f805 9b01 	strb.w	r9, [r5], #1
 80090e4:	1aea      	subs	r2, r5, r3
 80090e6:	9b01      	ldr	r3, [sp, #4]
 80090e8:	4293      	cmp	r3, r2
 80090ea:	dd07      	ble.n	80090fc <_dtoa_r+0xb64>
 80090ec:	4651      	mov	r1, sl
 80090ee:	2300      	movs	r3, #0
 80090f0:	220a      	movs	r2, #10
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fd0e 	bl	8009b14 <__multadd>
 80090f8:	4682      	mov	sl, r0
 80090fa:	e7ea      	b.n	80090d2 <_dtoa_r+0xb3a>
 80090fc:	9b01      	ldr	r3, [sp, #4]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	bfc8      	it	gt
 8009102:	461d      	movgt	r5, r3
 8009104:	9b00      	ldr	r3, [sp, #0]
 8009106:	bfd8      	it	le
 8009108:	2501      	movle	r5, #1
 800910a:	441d      	add	r5, r3
 800910c:	f04f 0800 	mov.w	r8, #0
 8009110:	4651      	mov	r1, sl
 8009112:	2201      	movs	r2, #1
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fef5 	bl	8009f04 <__lshift>
 800911a:	4631      	mov	r1, r6
 800911c:	4682      	mov	sl, r0
 800911e:	f000 ff5d 	bl	8009fdc <__mcmp>
 8009122:	2800      	cmp	r0, #0
 8009124:	dc96      	bgt.n	8009054 <_dtoa_r+0xabc>
 8009126:	d102      	bne.n	800912e <_dtoa_r+0xb96>
 8009128:	f019 0f01 	tst.w	r9, #1
 800912c:	d192      	bne.n	8009054 <_dtoa_r+0xabc>
 800912e:	462b      	mov	r3, r5
 8009130:	461d      	mov	r5, r3
 8009132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009136:	2a30      	cmp	r2, #48	; 0x30
 8009138:	d0fa      	beq.n	8009130 <_dtoa_r+0xb98>
 800913a:	e6dd      	b.n	8008ef8 <_dtoa_r+0x960>
 800913c:	9a00      	ldr	r2, [sp, #0]
 800913e:	429a      	cmp	r2, r3
 8009140:	d189      	bne.n	8009056 <_dtoa_r+0xabe>
 8009142:	f10b 0b01 	add.w	fp, fp, #1
 8009146:	2331      	movs	r3, #49	; 0x31
 8009148:	e796      	b.n	8009078 <_dtoa_r+0xae0>
 800914a:	4b0a      	ldr	r3, [pc, #40]	; (8009174 <_dtoa_r+0xbdc>)
 800914c:	f7ff ba99 	b.w	8008682 <_dtoa_r+0xea>
 8009150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009152:	2b00      	cmp	r3, #0
 8009154:	f47f aa6d 	bne.w	8008632 <_dtoa_r+0x9a>
 8009158:	4b07      	ldr	r3, [pc, #28]	; (8009178 <_dtoa_r+0xbe0>)
 800915a:	f7ff ba92 	b.w	8008682 <_dtoa_r+0xea>
 800915e:	9b01      	ldr	r3, [sp, #4]
 8009160:	2b00      	cmp	r3, #0
 8009162:	dcb5      	bgt.n	80090d0 <_dtoa_r+0xb38>
 8009164:	9b07      	ldr	r3, [sp, #28]
 8009166:	2b02      	cmp	r3, #2
 8009168:	f73f aeb1 	bgt.w	8008ece <_dtoa_r+0x936>
 800916c:	e7b0      	b.n	80090d0 <_dtoa_r+0xb38>
 800916e:	bf00      	nop
 8009170:	0800c42d 	.word	0x0800c42d
 8009174:	0800c380 	.word	0x0800c380
 8009178:	0800c3b1 	.word	0x0800c3b1

0800917c <_free_r>:
 800917c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800917e:	2900      	cmp	r1, #0
 8009180:	d044      	beq.n	800920c <_free_r+0x90>
 8009182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009186:	9001      	str	r0, [sp, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	f1a1 0404 	sub.w	r4, r1, #4
 800918e:	bfb8      	it	lt
 8009190:	18e4      	addlt	r4, r4, r3
 8009192:	f000 fc51 	bl	8009a38 <__malloc_lock>
 8009196:	4a1e      	ldr	r2, [pc, #120]	; (8009210 <_free_r+0x94>)
 8009198:	9801      	ldr	r0, [sp, #4]
 800919a:	6813      	ldr	r3, [r2, #0]
 800919c:	b933      	cbnz	r3, 80091ac <_free_r+0x30>
 800919e:	6063      	str	r3, [r4, #4]
 80091a0:	6014      	str	r4, [r2, #0]
 80091a2:	b003      	add	sp, #12
 80091a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091a8:	f000 bc4c 	b.w	8009a44 <__malloc_unlock>
 80091ac:	42a3      	cmp	r3, r4
 80091ae:	d908      	bls.n	80091c2 <_free_r+0x46>
 80091b0:	6825      	ldr	r5, [r4, #0]
 80091b2:	1961      	adds	r1, r4, r5
 80091b4:	428b      	cmp	r3, r1
 80091b6:	bf01      	itttt	eq
 80091b8:	6819      	ldreq	r1, [r3, #0]
 80091ba:	685b      	ldreq	r3, [r3, #4]
 80091bc:	1949      	addeq	r1, r1, r5
 80091be:	6021      	streq	r1, [r4, #0]
 80091c0:	e7ed      	b.n	800919e <_free_r+0x22>
 80091c2:	461a      	mov	r2, r3
 80091c4:	685b      	ldr	r3, [r3, #4]
 80091c6:	b10b      	cbz	r3, 80091cc <_free_r+0x50>
 80091c8:	42a3      	cmp	r3, r4
 80091ca:	d9fa      	bls.n	80091c2 <_free_r+0x46>
 80091cc:	6811      	ldr	r1, [r2, #0]
 80091ce:	1855      	adds	r5, r2, r1
 80091d0:	42a5      	cmp	r5, r4
 80091d2:	d10b      	bne.n	80091ec <_free_r+0x70>
 80091d4:	6824      	ldr	r4, [r4, #0]
 80091d6:	4421      	add	r1, r4
 80091d8:	1854      	adds	r4, r2, r1
 80091da:	42a3      	cmp	r3, r4
 80091dc:	6011      	str	r1, [r2, #0]
 80091de:	d1e0      	bne.n	80091a2 <_free_r+0x26>
 80091e0:	681c      	ldr	r4, [r3, #0]
 80091e2:	685b      	ldr	r3, [r3, #4]
 80091e4:	6053      	str	r3, [r2, #4]
 80091e6:	440c      	add	r4, r1
 80091e8:	6014      	str	r4, [r2, #0]
 80091ea:	e7da      	b.n	80091a2 <_free_r+0x26>
 80091ec:	d902      	bls.n	80091f4 <_free_r+0x78>
 80091ee:	230c      	movs	r3, #12
 80091f0:	6003      	str	r3, [r0, #0]
 80091f2:	e7d6      	b.n	80091a2 <_free_r+0x26>
 80091f4:	6825      	ldr	r5, [r4, #0]
 80091f6:	1961      	adds	r1, r4, r5
 80091f8:	428b      	cmp	r3, r1
 80091fa:	bf04      	itt	eq
 80091fc:	6819      	ldreq	r1, [r3, #0]
 80091fe:	685b      	ldreq	r3, [r3, #4]
 8009200:	6063      	str	r3, [r4, #4]
 8009202:	bf04      	itt	eq
 8009204:	1949      	addeq	r1, r1, r5
 8009206:	6021      	streq	r1, [r4, #0]
 8009208:	6054      	str	r4, [r2, #4]
 800920a:	e7ca      	b.n	80091a2 <_free_r+0x26>
 800920c:	b003      	add	sp, #12
 800920e:	bd30      	pop	{r4, r5, pc}
 8009210:	200007dc 	.word	0x200007dc

08009214 <rshift>:
 8009214:	6903      	ldr	r3, [r0, #16]
 8009216:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800921a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800921e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009222:	f100 0414 	add.w	r4, r0, #20
 8009226:	dd45      	ble.n	80092b4 <rshift+0xa0>
 8009228:	f011 011f 	ands.w	r1, r1, #31
 800922c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009230:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009234:	d10c      	bne.n	8009250 <rshift+0x3c>
 8009236:	f100 0710 	add.w	r7, r0, #16
 800923a:	4629      	mov	r1, r5
 800923c:	42b1      	cmp	r1, r6
 800923e:	d334      	bcc.n	80092aa <rshift+0x96>
 8009240:	1a9b      	subs	r3, r3, r2
 8009242:	009b      	lsls	r3, r3, #2
 8009244:	1eea      	subs	r2, r5, #3
 8009246:	4296      	cmp	r6, r2
 8009248:	bf38      	it	cc
 800924a:	2300      	movcc	r3, #0
 800924c:	4423      	add	r3, r4
 800924e:	e015      	b.n	800927c <rshift+0x68>
 8009250:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009254:	f1c1 0820 	rsb	r8, r1, #32
 8009258:	40cf      	lsrs	r7, r1
 800925a:	f105 0e04 	add.w	lr, r5, #4
 800925e:	46a1      	mov	r9, r4
 8009260:	4576      	cmp	r6, lr
 8009262:	46f4      	mov	ip, lr
 8009264:	d815      	bhi.n	8009292 <rshift+0x7e>
 8009266:	1a9a      	subs	r2, r3, r2
 8009268:	0092      	lsls	r2, r2, #2
 800926a:	3a04      	subs	r2, #4
 800926c:	3501      	adds	r5, #1
 800926e:	42ae      	cmp	r6, r5
 8009270:	bf38      	it	cc
 8009272:	2200      	movcc	r2, #0
 8009274:	18a3      	adds	r3, r4, r2
 8009276:	50a7      	str	r7, [r4, r2]
 8009278:	b107      	cbz	r7, 800927c <rshift+0x68>
 800927a:	3304      	adds	r3, #4
 800927c:	1b1a      	subs	r2, r3, r4
 800927e:	42a3      	cmp	r3, r4
 8009280:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009284:	bf08      	it	eq
 8009286:	2300      	moveq	r3, #0
 8009288:	6102      	str	r2, [r0, #16]
 800928a:	bf08      	it	eq
 800928c:	6143      	streq	r3, [r0, #20]
 800928e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009292:	f8dc c000 	ldr.w	ip, [ip]
 8009296:	fa0c fc08 	lsl.w	ip, ip, r8
 800929a:	ea4c 0707 	orr.w	r7, ip, r7
 800929e:	f849 7b04 	str.w	r7, [r9], #4
 80092a2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092a6:	40cf      	lsrs	r7, r1
 80092a8:	e7da      	b.n	8009260 <rshift+0x4c>
 80092aa:	f851 cb04 	ldr.w	ip, [r1], #4
 80092ae:	f847 cf04 	str.w	ip, [r7, #4]!
 80092b2:	e7c3      	b.n	800923c <rshift+0x28>
 80092b4:	4623      	mov	r3, r4
 80092b6:	e7e1      	b.n	800927c <rshift+0x68>

080092b8 <__hexdig_fun>:
 80092b8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092bc:	2b09      	cmp	r3, #9
 80092be:	d802      	bhi.n	80092c6 <__hexdig_fun+0xe>
 80092c0:	3820      	subs	r0, #32
 80092c2:	b2c0      	uxtb	r0, r0
 80092c4:	4770      	bx	lr
 80092c6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092ca:	2b05      	cmp	r3, #5
 80092cc:	d801      	bhi.n	80092d2 <__hexdig_fun+0x1a>
 80092ce:	3847      	subs	r0, #71	; 0x47
 80092d0:	e7f7      	b.n	80092c2 <__hexdig_fun+0xa>
 80092d2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092d6:	2b05      	cmp	r3, #5
 80092d8:	d801      	bhi.n	80092de <__hexdig_fun+0x26>
 80092da:	3827      	subs	r0, #39	; 0x27
 80092dc:	e7f1      	b.n	80092c2 <__hexdig_fun+0xa>
 80092de:	2000      	movs	r0, #0
 80092e0:	4770      	bx	lr
	...

080092e4 <__gethex>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	4617      	mov	r7, r2
 80092ea:	680a      	ldr	r2, [r1, #0]
 80092ec:	b085      	sub	sp, #20
 80092ee:	f102 0b02 	add.w	fp, r2, #2
 80092f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80092f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80092fa:	4681      	mov	r9, r0
 80092fc:	468a      	mov	sl, r1
 80092fe:	9302      	str	r3, [sp, #8]
 8009300:	32fe      	adds	r2, #254	; 0xfe
 8009302:	eb02 030b 	add.w	r3, r2, fp
 8009306:	46d8      	mov	r8, fp
 8009308:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800930c:	9301      	str	r3, [sp, #4]
 800930e:	2830      	cmp	r0, #48	; 0x30
 8009310:	d0f7      	beq.n	8009302 <__gethex+0x1e>
 8009312:	f7ff ffd1 	bl	80092b8 <__hexdig_fun>
 8009316:	4604      	mov	r4, r0
 8009318:	2800      	cmp	r0, #0
 800931a:	d138      	bne.n	800938e <__gethex+0xaa>
 800931c:	49a7      	ldr	r1, [pc, #668]	; (80095bc <__gethex+0x2d8>)
 800931e:	2201      	movs	r2, #1
 8009320:	4640      	mov	r0, r8
 8009322:	f7fe fff4 	bl	800830e <strncmp>
 8009326:	4606      	mov	r6, r0
 8009328:	2800      	cmp	r0, #0
 800932a:	d169      	bne.n	8009400 <__gethex+0x11c>
 800932c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009330:	465d      	mov	r5, fp
 8009332:	f7ff ffc1 	bl	80092b8 <__hexdig_fun>
 8009336:	2800      	cmp	r0, #0
 8009338:	d064      	beq.n	8009404 <__gethex+0x120>
 800933a:	465a      	mov	r2, fp
 800933c:	7810      	ldrb	r0, [r2, #0]
 800933e:	2830      	cmp	r0, #48	; 0x30
 8009340:	4690      	mov	r8, r2
 8009342:	f102 0201 	add.w	r2, r2, #1
 8009346:	d0f9      	beq.n	800933c <__gethex+0x58>
 8009348:	f7ff ffb6 	bl	80092b8 <__hexdig_fun>
 800934c:	2301      	movs	r3, #1
 800934e:	fab0 f480 	clz	r4, r0
 8009352:	0964      	lsrs	r4, r4, #5
 8009354:	465e      	mov	r6, fp
 8009356:	9301      	str	r3, [sp, #4]
 8009358:	4642      	mov	r2, r8
 800935a:	4615      	mov	r5, r2
 800935c:	3201      	adds	r2, #1
 800935e:	7828      	ldrb	r0, [r5, #0]
 8009360:	f7ff ffaa 	bl	80092b8 <__hexdig_fun>
 8009364:	2800      	cmp	r0, #0
 8009366:	d1f8      	bne.n	800935a <__gethex+0x76>
 8009368:	4994      	ldr	r1, [pc, #592]	; (80095bc <__gethex+0x2d8>)
 800936a:	2201      	movs	r2, #1
 800936c:	4628      	mov	r0, r5
 800936e:	f7fe ffce 	bl	800830e <strncmp>
 8009372:	b978      	cbnz	r0, 8009394 <__gethex+0xb0>
 8009374:	b946      	cbnz	r6, 8009388 <__gethex+0xa4>
 8009376:	1c6e      	adds	r6, r5, #1
 8009378:	4632      	mov	r2, r6
 800937a:	4615      	mov	r5, r2
 800937c:	3201      	adds	r2, #1
 800937e:	7828      	ldrb	r0, [r5, #0]
 8009380:	f7ff ff9a 	bl	80092b8 <__hexdig_fun>
 8009384:	2800      	cmp	r0, #0
 8009386:	d1f8      	bne.n	800937a <__gethex+0x96>
 8009388:	1b73      	subs	r3, r6, r5
 800938a:	009e      	lsls	r6, r3, #2
 800938c:	e004      	b.n	8009398 <__gethex+0xb4>
 800938e:	2400      	movs	r4, #0
 8009390:	4626      	mov	r6, r4
 8009392:	e7e1      	b.n	8009358 <__gethex+0x74>
 8009394:	2e00      	cmp	r6, #0
 8009396:	d1f7      	bne.n	8009388 <__gethex+0xa4>
 8009398:	782b      	ldrb	r3, [r5, #0]
 800939a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800939e:	2b50      	cmp	r3, #80	; 0x50
 80093a0:	d13d      	bne.n	800941e <__gethex+0x13a>
 80093a2:	786b      	ldrb	r3, [r5, #1]
 80093a4:	2b2b      	cmp	r3, #43	; 0x2b
 80093a6:	d02f      	beq.n	8009408 <__gethex+0x124>
 80093a8:	2b2d      	cmp	r3, #45	; 0x2d
 80093aa:	d031      	beq.n	8009410 <__gethex+0x12c>
 80093ac:	1c69      	adds	r1, r5, #1
 80093ae:	f04f 0b00 	mov.w	fp, #0
 80093b2:	7808      	ldrb	r0, [r1, #0]
 80093b4:	f7ff ff80 	bl	80092b8 <__hexdig_fun>
 80093b8:	1e42      	subs	r2, r0, #1
 80093ba:	b2d2      	uxtb	r2, r2
 80093bc:	2a18      	cmp	r2, #24
 80093be:	d82e      	bhi.n	800941e <__gethex+0x13a>
 80093c0:	f1a0 0210 	sub.w	r2, r0, #16
 80093c4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093c8:	f7ff ff76 	bl	80092b8 <__hexdig_fun>
 80093cc:	f100 3cff 	add.w	ip, r0, #4294967295
 80093d0:	fa5f fc8c 	uxtb.w	ip, ip
 80093d4:	f1bc 0f18 	cmp.w	ip, #24
 80093d8:	d91d      	bls.n	8009416 <__gethex+0x132>
 80093da:	f1bb 0f00 	cmp.w	fp, #0
 80093de:	d000      	beq.n	80093e2 <__gethex+0xfe>
 80093e0:	4252      	negs	r2, r2
 80093e2:	4416      	add	r6, r2
 80093e4:	f8ca 1000 	str.w	r1, [sl]
 80093e8:	b1dc      	cbz	r4, 8009422 <__gethex+0x13e>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	bf14      	ite	ne
 80093f0:	f04f 0800 	movne.w	r8, #0
 80093f4:	f04f 0806 	moveq.w	r8, #6
 80093f8:	4640      	mov	r0, r8
 80093fa:	b005      	add	sp, #20
 80093fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009400:	4645      	mov	r5, r8
 8009402:	4626      	mov	r6, r4
 8009404:	2401      	movs	r4, #1
 8009406:	e7c7      	b.n	8009398 <__gethex+0xb4>
 8009408:	f04f 0b00 	mov.w	fp, #0
 800940c:	1ca9      	adds	r1, r5, #2
 800940e:	e7d0      	b.n	80093b2 <__gethex+0xce>
 8009410:	f04f 0b01 	mov.w	fp, #1
 8009414:	e7fa      	b.n	800940c <__gethex+0x128>
 8009416:	230a      	movs	r3, #10
 8009418:	fb03 0002 	mla	r0, r3, r2, r0
 800941c:	e7d0      	b.n	80093c0 <__gethex+0xdc>
 800941e:	4629      	mov	r1, r5
 8009420:	e7e0      	b.n	80093e4 <__gethex+0x100>
 8009422:	eba5 0308 	sub.w	r3, r5, r8
 8009426:	3b01      	subs	r3, #1
 8009428:	4621      	mov	r1, r4
 800942a:	2b07      	cmp	r3, #7
 800942c:	dc0a      	bgt.n	8009444 <__gethex+0x160>
 800942e:	4648      	mov	r0, r9
 8009430:	f000 fb0e 	bl	8009a50 <_Balloc>
 8009434:	4604      	mov	r4, r0
 8009436:	b940      	cbnz	r0, 800944a <__gethex+0x166>
 8009438:	4b61      	ldr	r3, [pc, #388]	; (80095c0 <__gethex+0x2dc>)
 800943a:	4602      	mov	r2, r0
 800943c:	21e4      	movs	r1, #228	; 0xe4
 800943e:	4861      	ldr	r0, [pc, #388]	; (80095c4 <__gethex+0x2e0>)
 8009440:	f001 fc50 	bl	800ace4 <__assert_func>
 8009444:	3101      	adds	r1, #1
 8009446:	105b      	asrs	r3, r3, #1
 8009448:	e7ef      	b.n	800942a <__gethex+0x146>
 800944a:	f100 0a14 	add.w	sl, r0, #20
 800944e:	2300      	movs	r3, #0
 8009450:	495a      	ldr	r1, [pc, #360]	; (80095bc <__gethex+0x2d8>)
 8009452:	f8cd a004 	str.w	sl, [sp, #4]
 8009456:	469b      	mov	fp, r3
 8009458:	45a8      	cmp	r8, r5
 800945a:	d342      	bcc.n	80094e2 <__gethex+0x1fe>
 800945c:	9801      	ldr	r0, [sp, #4]
 800945e:	f840 bb04 	str.w	fp, [r0], #4
 8009462:	eba0 000a 	sub.w	r0, r0, sl
 8009466:	1080      	asrs	r0, r0, #2
 8009468:	6120      	str	r0, [r4, #16]
 800946a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800946e:	4658      	mov	r0, fp
 8009470:	f000 fbe0 	bl	8009c34 <__hi0bits>
 8009474:	683d      	ldr	r5, [r7, #0]
 8009476:	eba8 0000 	sub.w	r0, r8, r0
 800947a:	42a8      	cmp	r0, r5
 800947c:	dd59      	ble.n	8009532 <__gethex+0x24e>
 800947e:	eba0 0805 	sub.w	r8, r0, r5
 8009482:	4641      	mov	r1, r8
 8009484:	4620      	mov	r0, r4
 8009486:	f000 ff6f 	bl	800a368 <__any_on>
 800948a:	4683      	mov	fp, r0
 800948c:	b1b8      	cbz	r0, 80094be <__gethex+0x1da>
 800948e:	f108 33ff 	add.w	r3, r8, #4294967295
 8009492:	1159      	asrs	r1, r3, #5
 8009494:	f003 021f 	and.w	r2, r3, #31
 8009498:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800949c:	f04f 0b01 	mov.w	fp, #1
 80094a0:	fa0b f202 	lsl.w	r2, fp, r2
 80094a4:	420a      	tst	r2, r1
 80094a6:	d00a      	beq.n	80094be <__gethex+0x1da>
 80094a8:	455b      	cmp	r3, fp
 80094aa:	dd06      	ble.n	80094ba <__gethex+0x1d6>
 80094ac:	f1a8 0102 	sub.w	r1, r8, #2
 80094b0:	4620      	mov	r0, r4
 80094b2:	f000 ff59 	bl	800a368 <__any_on>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d138      	bne.n	800952c <__gethex+0x248>
 80094ba:	f04f 0b02 	mov.w	fp, #2
 80094be:	4641      	mov	r1, r8
 80094c0:	4620      	mov	r0, r4
 80094c2:	f7ff fea7 	bl	8009214 <rshift>
 80094c6:	4446      	add	r6, r8
 80094c8:	68bb      	ldr	r3, [r7, #8]
 80094ca:	42b3      	cmp	r3, r6
 80094cc:	da41      	bge.n	8009552 <__gethex+0x26e>
 80094ce:	4621      	mov	r1, r4
 80094d0:	4648      	mov	r0, r9
 80094d2:	f000 fafd 	bl	8009ad0 <_Bfree>
 80094d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80094d8:	2300      	movs	r3, #0
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80094e0:	e78a      	b.n	80093f8 <__gethex+0x114>
 80094e2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80094e6:	2a2e      	cmp	r2, #46	; 0x2e
 80094e8:	d014      	beq.n	8009514 <__gethex+0x230>
 80094ea:	2b20      	cmp	r3, #32
 80094ec:	d106      	bne.n	80094fc <__gethex+0x218>
 80094ee:	9b01      	ldr	r3, [sp, #4]
 80094f0:	f843 bb04 	str.w	fp, [r3], #4
 80094f4:	f04f 0b00 	mov.w	fp, #0
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	465b      	mov	r3, fp
 80094fc:	7828      	ldrb	r0, [r5, #0]
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	f7ff feda 	bl	80092b8 <__hexdig_fun>
 8009504:	9b03      	ldr	r3, [sp, #12]
 8009506:	f000 000f 	and.w	r0, r0, #15
 800950a:	4098      	lsls	r0, r3
 800950c:	ea4b 0b00 	orr.w	fp, fp, r0
 8009510:	3304      	adds	r3, #4
 8009512:	e7a1      	b.n	8009458 <__gethex+0x174>
 8009514:	45a8      	cmp	r8, r5
 8009516:	d8e8      	bhi.n	80094ea <__gethex+0x206>
 8009518:	2201      	movs	r2, #1
 800951a:	4628      	mov	r0, r5
 800951c:	9303      	str	r3, [sp, #12]
 800951e:	f7fe fef6 	bl	800830e <strncmp>
 8009522:	4926      	ldr	r1, [pc, #152]	; (80095bc <__gethex+0x2d8>)
 8009524:	9b03      	ldr	r3, [sp, #12]
 8009526:	2800      	cmp	r0, #0
 8009528:	d1df      	bne.n	80094ea <__gethex+0x206>
 800952a:	e795      	b.n	8009458 <__gethex+0x174>
 800952c:	f04f 0b03 	mov.w	fp, #3
 8009530:	e7c5      	b.n	80094be <__gethex+0x1da>
 8009532:	da0b      	bge.n	800954c <__gethex+0x268>
 8009534:	eba5 0800 	sub.w	r8, r5, r0
 8009538:	4621      	mov	r1, r4
 800953a:	4642      	mov	r2, r8
 800953c:	4648      	mov	r0, r9
 800953e:	f000 fce1 	bl	8009f04 <__lshift>
 8009542:	eba6 0608 	sub.w	r6, r6, r8
 8009546:	4604      	mov	r4, r0
 8009548:	f100 0a14 	add.w	sl, r0, #20
 800954c:	f04f 0b00 	mov.w	fp, #0
 8009550:	e7ba      	b.n	80094c8 <__gethex+0x1e4>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	42b3      	cmp	r3, r6
 8009556:	dd73      	ble.n	8009640 <__gethex+0x35c>
 8009558:	1b9e      	subs	r6, r3, r6
 800955a:	42b5      	cmp	r5, r6
 800955c:	dc34      	bgt.n	80095c8 <__gethex+0x2e4>
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2b02      	cmp	r3, #2
 8009562:	d023      	beq.n	80095ac <__gethex+0x2c8>
 8009564:	2b03      	cmp	r3, #3
 8009566:	d025      	beq.n	80095b4 <__gethex+0x2d0>
 8009568:	2b01      	cmp	r3, #1
 800956a:	d115      	bne.n	8009598 <__gethex+0x2b4>
 800956c:	42b5      	cmp	r5, r6
 800956e:	d113      	bne.n	8009598 <__gethex+0x2b4>
 8009570:	2d01      	cmp	r5, #1
 8009572:	d10b      	bne.n	800958c <__gethex+0x2a8>
 8009574:	9a02      	ldr	r2, [sp, #8]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	6013      	str	r3, [r2, #0]
 800957a:	2301      	movs	r3, #1
 800957c:	6123      	str	r3, [r4, #16]
 800957e:	f8ca 3000 	str.w	r3, [sl]
 8009582:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009584:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009588:	601c      	str	r4, [r3, #0]
 800958a:	e735      	b.n	80093f8 <__gethex+0x114>
 800958c:	1e69      	subs	r1, r5, #1
 800958e:	4620      	mov	r0, r4
 8009590:	f000 feea 	bl	800a368 <__any_on>
 8009594:	2800      	cmp	r0, #0
 8009596:	d1ed      	bne.n	8009574 <__gethex+0x290>
 8009598:	4621      	mov	r1, r4
 800959a:	4648      	mov	r0, r9
 800959c:	f000 fa98 	bl	8009ad0 <_Bfree>
 80095a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095a2:	2300      	movs	r3, #0
 80095a4:	6013      	str	r3, [r2, #0]
 80095a6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80095aa:	e725      	b.n	80093f8 <__gethex+0x114>
 80095ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1f2      	bne.n	8009598 <__gethex+0x2b4>
 80095b2:	e7df      	b.n	8009574 <__gethex+0x290>
 80095b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d1dc      	bne.n	8009574 <__gethex+0x290>
 80095ba:	e7ed      	b.n	8009598 <__gethex+0x2b4>
 80095bc:	0800c318 	.word	0x0800c318
 80095c0:	0800c42d 	.word	0x0800c42d
 80095c4:	0800c43e 	.word	0x0800c43e
 80095c8:	f106 38ff 	add.w	r8, r6, #4294967295
 80095cc:	f1bb 0f00 	cmp.w	fp, #0
 80095d0:	d133      	bne.n	800963a <__gethex+0x356>
 80095d2:	f1b8 0f00 	cmp.w	r8, #0
 80095d6:	d004      	beq.n	80095e2 <__gethex+0x2fe>
 80095d8:	4641      	mov	r1, r8
 80095da:	4620      	mov	r0, r4
 80095dc:	f000 fec4 	bl	800a368 <__any_on>
 80095e0:	4683      	mov	fp, r0
 80095e2:	ea4f 1268 	mov.w	r2, r8, asr #5
 80095e6:	2301      	movs	r3, #1
 80095e8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80095ec:	f008 081f 	and.w	r8, r8, #31
 80095f0:	fa03 f308 	lsl.w	r3, r3, r8
 80095f4:	4213      	tst	r3, r2
 80095f6:	4631      	mov	r1, r6
 80095f8:	4620      	mov	r0, r4
 80095fa:	bf18      	it	ne
 80095fc:	f04b 0b02 	orrne.w	fp, fp, #2
 8009600:	1bad      	subs	r5, r5, r6
 8009602:	f7ff fe07 	bl	8009214 <rshift>
 8009606:	687e      	ldr	r6, [r7, #4]
 8009608:	f04f 0802 	mov.w	r8, #2
 800960c:	f1bb 0f00 	cmp.w	fp, #0
 8009610:	d04a      	beq.n	80096a8 <__gethex+0x3c4>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b02      	cmp	r3, #2
 8009616:	d016      	beq.n	8009646 <__gethex+0x362>
 8009618:	2b03      	cmp	r3, #3
 800961a:	d018      	beq.n	800964e <__gethex+0x36a>
 800961c:	2b01      	cmp	r3, #1
 800961e:	d109      	bne.n	8009634 <__gethex+0x350>
 8009620:	f01b 0f02 	tst.w	fp, #2
 8009624:	d006      	beq.n	8009634 <__gethex+0x350>
 8009626:	f8da 3000 	ldr.w	r3, [sl]
 800962a:	ea4b 0b03 	orr.w	fp, fp, r3
 800962e:	f01b 0f01 	tst.w	fp, #1
 8009632:	d10f      	bne.n	8009654 <__gethex+0x370>
 8009634:	f048 0810 	orr.w	r8, r8, #16
 8009638:	e036      	b.n	80096a8 <__gethex+0x3c4>
 800963a:	f04f 0b01 	mov.w	fp, #1
 800963e:	e7d0      	b.n	80095e2 <__gethex+0x2fe>
 8009640:	f04f 0801 	mov.w	r8, #1
 8009644:	e7e2      	b.n	800960c <__gethex+0x328>
 8009646:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009648:	f1c3 0301 	rsb	r3, r3, #1
 800964c:	930f      	str	r3, [sp, #60]	; 0x3c
 800964e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009650:	2b00      	cmp	r3, #0
 8009652:	d0ef      	beq.n	8009634 <__gethex+0x350>
 8009654:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009658:	f104 0214 	add.w	r2, r4, #20
 800965c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009660:	9301      	str	r3, [sp, #4]
 8009662:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009666:	2300      	movs	r3, #0
 8009668:	4694      	mov	ip, r2
 800966a:	f852 1b04 	ldr.w	r1, [r2], #4
 800966e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009672:	d01e      	beq.n	80096b2 <__gethex+0x3ce>
 8009674:	3101      	adds	r1, #1
 8009676:	f8cc 1000 	str.w	r1, [ip]
 800967a:	f1b8 0f02 	cmp.w	r8, #2
 800967e:	f104 0214 	add.w	r2, r4, #20
 8009682:	d13d      	bne.n	8009700 <__gethex+0x41c>
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	3b01      	subs	r3, #1
 8009688:	42ab      	cmp	r3, r5
 800968a:	d10b      	bne.n	80096a4 <__gethex+0x3c0>
 800968c:	1169      	asrs	r1, r5, #5
 800968e:	2301      	movs	r3, #1
 8009690:	f005 051f 	and.w	r5, r5, #31
 8009694:	fa03 f505 	lsl.w	r5, r3, r5
 8009698:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800969c:	421d      	tst	r5, r3
 800969e:	bf18      	it	ne
 80096a0:	f04f 0801 	movne.w	r8, #1
 80096a4:	f048 0820 	orr.w	r8, r8, #32
 80096a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096aa:	601c      	str	r4, [r3, #0]
 80096ac:	9b02      	ldr	r3, [sp, #8]
 80096ae:	601e      	str	r6, [r3, #0]
 80096b0:	e6a2      	b.n	80093f8 <__gethex+0x114>
 80096b2:	4290      	cmp	r0, r2
 80096b4:	f842 3c04 	str.w	r3, [r2, #-4]
 80096b8:	d8d6      	bhi.n	8009668 <__gethex+0x384>
 80096ba:	68a2      	ldr	r2, [r4, #8]
 80096bc:	4593      	cmp	fp, r2
 80096be:	db17      	blt.n	80096f0 <__gethex+0x40c>
 80096c0:	6861      	ldr	r1, [r4, #4]
 80096c2:	4648      	mov	r0, r9
 80096c4:	3101      	adds	r1, #1
 80096c6:	f000 f9c3 	bl	8009a50 <_Balloc>
 80096ca:	4682      	mov	sl, r0
 80096cc:	b918      	cbnz	r0, 80096d6 <__gethex+0x3f2>
 80096ce:	4b1b      	ldr	r3, [pc, #108]	; (800973c <__gethex+0x458>)
 80096d0:	4602      	mov	r2, r0
 80096d2:	2184      	movs	r1, #132	; 0x84
 80096d4:	e6b3      	b.n	800943e <__gethex+0x15a>
 80096d6:	6922      	ldr	r2, [r4, #16]
 80096d8:	3202      	adds	r2, #2
 80096da:	f104 010c 	add.w	r1, r4, #12
 80096de:	0092      	lsls	r2, r2, #2
 80096e0:	300c      	adds	r0, #12
 80096e2:	f7fe feb0 	bl	8008446 <memcpy>
 80096e6:	4621      	mov	r1, r4
 80096e8:	4648      	mov	r0, r9
 80096ea:	f000 f9f1 	bl	8009ad0 <_Bfree>
 80096ee:	4654      	mov	r4, sl
 80096f0:	6922      	ldr	r2, [r4, #16]
 80096f2:	1c51      	adds	r1, r2, #1
 80096f4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80096f8:	6121      	str	r1, [r4, #16]
 80096fa:	2101      	movs	r1, #1
 80096fc:	6151      	str	r1, [r2, #20]
 80096fe:	e7bc      	b.n	800967a <__gethex+0x396>
 8009700:	6921      	ldr	r1, [r4, #16]
 8009702:	4559      	cmp	r1, fp
 8009704:	dd0b      	ble.n	800971e <__gethex+0x43a>
 8009706:	2101      	movs	r1, #1
 8009708:	4620      	mov	r0, r4
 800970a:	f7ff fd83 	bl	8009214 <rshift>
 800970e:	68bb      	ldr	r3, [r7, #8]
 8009710:	3601      	adds	r6, #1
 8009712:	42b3      	cmp	r3, r6
 8009714:	f6ff aedb 	blt.w	80094ce <__gethex+0x1ea>
 8009718:	f04f 0801 	mov.w	r8, #1
 800971c:	e7c2      	b.n	80096a4 <__gethex+0x3c0>
 800971e:	f015 051f 	ands.w	r5, r5, #31
 8009722:	d0f9      	beq.n	8009718 <__gethex+0x434>
 8009724:	9b01      	ldr	r3, [sp, #4]
 8009726:	441a      	add	r2, r3
 8009728:	f1c5 0520 	rsb	r5, r5, #32
 800972c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009730:	f000 fa80 	bl	8009c34 <__hi0bits>
 8009734:	42a8      	cmp	r0, r5
 8009736:	dbe6      	blt.n	8009706 <__gethex+0x422>
 8009738:	e7ee      	b.n	8009718 <__gethex+0x434>
 800973a:	bf00      	nop
 800973c:	0800c42d 	.word	0x0800c42d

08009740 <L_shift>:
 8009740:	f1c2 0208 	rsb	r2, r2, #8
 8009744:	0092      	lsls	r2, r2, #2
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	f1c2 0620 	rsb	r6, r2, #32
 800974c:	6843      	ldr	r3, [r0, #4]
 800974e:	6804      	ldr	r4, [r0, #0]
 8009750:	fa03 f506 	lsl.w	r5, r3, r6
 8009754:	432c      	orrs	r4, r5
 8009756:	40d3      	lsrs	r3, r2
 8009758:	6004      	str	r4, [r0, #0]
 800975a:	f840 3f04 	str.w	r3, [r0, #4]!
 800975e:	4288      	cmp	r0, r1
 8009760:	d3f4      	bcc.n	800974c <L_shift+0xc>
 8009762:	bd70      	pop	{r4, r5, r6, pc}

08009764 <__match>:
 8009764:	b530      	push	{r4, r5, lr}
 8009766:	6803      	ldr	r3, [r0, #0]
 8009768:	3301      	adds	r3, #1
 800976a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800976e:	b914      	cbnz	r4, 8009776 <__match+0x12>
 8009770:	6003      	str	r3, [r0, #0]
 8009772:	2001      	movs	r0, #1
 8009774:	bd30      	pop	{r4, r5, pc}
 8009776:	f813 2b01 	ldrb.w	r2, [r3], #1
 800977a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800977e:	2d19      	cmp	r5, #25
 8009780:	bf98      	it	ls
 8009782:	3220      	addls	r2, #32
 8009784:	42a2      	cmp	r2, r4
 8009786:	d0f0      	beq.n	800976a <__match+0x6>
 8009788:	2000      	movs	r0, #0
 800978a:	e7f3      	b.n	8009774 <__match+0x10>

0800978c <__hexnan>:
 800978c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009790:	680b      	ldr	r3, [r1, #0]
 8009792:	6801      	ldr	r1, [r0, #0]
 8009794:	115e      	asrs	r6, r3, #5
 8009796:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800979a:	f013 031f 	ands.w	r3, r3, #31
 800979e:	b087      	sub	sp, #28
 80097a0:	bf18      	it	ne
 80097a2:	3604      	addne	r6, #4
 80097a4:	2500      	movs	r5, #0
 80097a6:	1f37      	subs	r7, r6, #4
 80097a8:	4682      	mov	sl, r0
 80097aa:	4690      	mov	r8, r2
 80097ac:	9301      	str	r3, [sp, #4]
 80097ae:	f846 5c04 	str.w	r5, [r6, #-4]
 80097b2:	46b9      	mov	r9, r7
 80097b4:	463c      	mov	r4, r7
 80097b6:	9502      	str	r5, [sp, #8]
 80097b8:	46ab      	mov	fp, r5
 80097ba:	784a      	ldrb	r2, [r1, #1]
 80097bc:	1c4b      	adds	r3, r1, #1
 80097be:	9303      	str	r3, [sp, #12]
 80097c0:	b342      	cbz	r2, 8009814 <__hexnan+0x88>
 80097c2:	4610      	mov	r0, r2
 80097c4:	9105      	str	r1, [sp, #20]
 80097c6:	9204      	str	r2, [sp, #16]
 80097c8:	f7ff fd76 	bl	80092b8 <__hexdig_fun>
 80097cc:	2800      	cmp	r0, #0
 80097ce:	d14f      	bne.n	8009870 <__hexnan+0xe4>
 80097d0:	9a04      	ldr	r2, [sp, #16]
 80097d2:	9905      	ldr	r1, [sp, #20]
 80097d4:	2a20      	cmp	r2, #32
 80097d6:	d818      	bhi.n	800980a <__hexnan+0x7e>
 80097d8:	9b02      	ldr	r3, [sp, #8]
 80097da:	459b      	cmp	fp, r3
 80097dc:	dd13      	ble.n	8009806 <__hexnan+0x7a>
 80097de:	454c      	cmp	r4, r9
 80097e0:	d206      	bcs.n	80097f0 <__hexnan+0x64>
 80097e2:	2d07      	cmp	r5, #7
 80097e4:	dc04      	bgt.n	80097f0 <__hexnan+0x64>
 80097e6:	462a      	mov	r2, r5
 80097e8:	4649      	mov	r1, r9
 80097ea:	4620      	mov	r0, r4
 80097ec:	f7ff ffa8 	bl	8009740 <L_shift>
 80097f0:	4544      	cmp	r4, r8
 80097f2:	d950      	bls.n	8009896 <__hexnan+0x10a>
 80097f4:	2300      	movs	r3, #0
 80097f6:	f1a4 0904 	sub.w	r9, r4, #4
 80097fa:	f844 3c04 	str.w	r3, [r4, #-4]
 80097fe:	f8cd b008 	str.w	fp, [sp, #8]
 8009802:	464c      	mov	r4, r9
 8009804:	461d      	mov	r5, r3
 8009806:	9903      	ldr	r1, [sp, #12]
 8009808:	e7d7      	b.n	80097ba <__hexnan+0x2e>
 800980a:	2a29      	cmp	r2, #41	; 0x29
 800980c:	d155      	bne.n	80098ba <__hexnan+0x12e>
 800980e:	3102      	adds	r1, #2
 8009810:	f8ca 1000 	str.w	r1, [sl]
 8009814:	f1bb 0f00 	cmp.w	fp, #0
 8009818:	d04f      	beq.n	80098ba <__hexnan+0x12e>
 800981a:	454c      	cmp	r4, r9
 800981c:	d206      	bcs.n	800982c <__hexnan+0xa0>
 800981e:	2d07      	cmp	r5, #7
 8009820:	dc04      	bgt.n	800982c <__hexnan+0xa0>
 8009822:	462a      	mov	r2, r5
 8009824:	4649      	mov	r1, r9
 8009826:	4620      	mov	r0, r4
 8009828:	f7ff ff8a 	bl	8009740 <L_shift>
 800982c:	4544      	cmp	r4, r8
 800982e:	d934      	bls.n	800989a <__hexnan+0x10e>
 8009830:	f1a8 0204 	sub.w	r2, r8, #4
 8009834:	4623      	mov	r3, r4
 8009836:	f853 1b04 	ldr.w	r1, [r3], #4
 800983a:	f842 1f04 	str.w	r1, [r2, #4]!
 800983e:	429f      	cmp	r7, r3
 8009840:	d2f9      	bcs.n	8009836 <__hexnan+0xaa>
 8009842:	1b3b      	subs	r3, r7, r4
 8009844:	f023 0303 	bic.w	r3, r3, #3
 8009848:	3304      	adds	r3, #4
 800984a:	3e03      	subs	r6, #3
 800984c:	3401      	adds	r4, #1
 800984e:	42a6      	cmp	r6, r4
 8009850:	bf38      	it	cc
 8009852:	2304      	movcc	r3, #4
 8009854:	4443      	add	r3, r8
 8009856:	2200      	movs	r2, #0
 8009858:	f843 2b04 	str.w	r2, [r3], #4
 800985c:	429f      	cmp	r7, r3
 800985e:	d2fb      	bcs.n	8009858 <__hexnan+0xcc>
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	b91b      	cbnz	r3, 800986c <__hexnan+0xe0>
 8009864:	4547      	cmp	r7, r8
 8009866:	d126      	bne.n	80098b6 <__hexnan+0x12a>
 8009868:	2301      	movs	r3, #1
 800986a:	603b      	str	r3, [r7, #0]
 800986c:	2005      	movs	r0, #5
 800986e:	e025      	b.n	80098bc <__hexnan+0x130>
 8009870:	3501      	adds	r5, #1
 8009872:	2d08      	cmp	r5, #8
 8009874:	f10b 0b01 	add.w	fp, fp, #1
 8009878:	dd06      	ble.n	8009888 <__hexnan+0xfc>
 800987a:	4544      	cmp	r4, r8
 800987c:	d9c3      	bls.n	8009806 <__hexnan+0x7a>
 800987e:	2300      	movs	r3, #0
 8009880:	f844 3c04 	str.w	r3, [r4, #-4]
 8009884:	2501      	movs	r5, #1
 8009886:	3c04      	subs	r4, #4
 8009888:	6822      	ldr	r2, [r4, #0]
 800988a:	f000 000f 	and.w	r0, r0, #15
 800988e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009892:	6020      	str	r0, [r4, #0]
 8009894:	e7b7      	b.n	8009806 <__hexnan+0x7a>
 8009896:	2508      	movs	r5, #8
 8009898:	e7b5      	b.n	8009806 <__hexnan+0x7a>
 800989a:	9b01      	ldr	r3, [sp, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d0df      	beq.n	8009860 <__hexnan+0xd4>
 80098a0:	f1c3 0320 	rsb	r3, r3, #32
 80098a4:	f04f 32ff 	mov.w	r2, #4294967295
 80098a8:	40da      	lsrs	r2, r3
 80098aa:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098ae:	4013      	ands	r3, r2
 80098b0:	f846 3c04 	str.w	r3, [r6, #-4]
 80098b4:	e7d4      	b.n	8009860 <__hexnan+0xd4>
 80098b6:	3f04      	subs	r7, #4
 80098b8:	e7d2      	b.n	8009860 <__hexnan+0xd4>
 80098ba:	2004      	movs	r0, #4
 80098bc:	b007      	add	sp, #28
 80098be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080098c4 <malloc>:
 80098c4:	4b02      	ldr	r3, [pc, #8]	; (80098d0 <malloc+0xc>)
 80098c6:	4601      	mov	r1, r0
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	f000 b823 	b.w	8009914 <_malloc_r>
 80098ce:	bf00      	nop
 80098d0:	20000208 	.word	0x20000208

080098d4 <sbrk_aligned>:
 80098d4:	b570      	push	{r4, r5, r6, lr}
 80098d6:	4e0e      	ldr	r6, [pc, #56]	; (8009910 <sbrk_aligned+0x3c>)
 80098d8:	460c      	mov	r4, r1
 80098da:	6831      	ldr	r1, [r6, #0]
 80098dc:	4605      	mov	r5, r0
 80098de:	b911      	cbnz	r1, 80098e6 <sbrk_aligned+0x12>
 80098e0:	f001 f9f0 	bl	800acc4 <_sbrk_r>
 80098e4:	6030      	str	r0, [r6, #0]
 80098e6:	4621      	mov	r1, r4
 80098e8:	4628      	mov	r0, r5
 80098ea:	f001 f9eb 	bl	800acc4 <_sbrk_r>
 80098ee:	1c43      	adds	r3, r0, #1
 80098f0:	d00a      	beq.n	8009908 <sbrk_aligned+0x34>
 80098f2:	1cc4      	adds	r4, r0, #3
 80098f4:	f024 0403 	bic.w	r4, r4, #3
 80098f8:	42a0      	cmp	r0, r4
 80098fa:	d007      	beq.n	800990c <sbrk_aligned+0x38>
 80098fc:	1a21      	subs	r1, r4, r0
 80098fe:	4628      	mov	r0, r5
 8009900:	f001 f9e0 	bl	800acc4 <_sbrk_r>
 8009904:	3001      	adds	r0, #1
 8009906:	d101      	bne.n	800990c <sbrk_aligned+0x38>
 8009908:	f04f 34ff 	mov.w	r4, #4294967295
 800990c:	4620      	mov	r0, r4
 800990e:	bd70      	pop	{r4, r5, r6, pc}
 8009910:	200007e0 	.word	0x200007e0

08009914 <_malloc_r>:
 8009914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009918:	1ccd      	adds	r5, r1, #3
 800991a:	f025 0503 	bic.w	r5, r5, #3
 800991e:	3508      	adds	r5, #8
 8009920:	2d0c      	cmp	r5, #12
 8009922:	bf38      	it	cc
 8009924:	250c      	movcc	r5, #12
 8009926:	2d00      	cmp	r5, #0
 8009928:	4607      	mov	r7, r0
 800992a:	db01      	blt.n	8009930 <_malloc_r+0x1c>
 800992c:	42a9      	cmp	r1, r5
 800992e:	d905      	bls.n	800993c <_malloc_r+0x28>
 8009930:	230c      	movs	r3, #12
 8009932:	603b      	str	r3, [r7, #0]
 8009934:	2600      	movs	r6, #0
 8009936:	4630      	mov	r0, r6
 8009938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800993c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a10 <_malloc_r+0xfc>
 8009940:	f000 f87a 	bl	8009a38 <__malloc_lock>
 8009944:	f8d8 3000 	ldr.w	r3, [r8]
 8009948:	461c      	mov	r4, r3
 800994a:	bb5c      	cbnz	r4, 80099a4 <_malloc_r+0x90>
 800994c:	4629      	mov	r1, r5
 800994e:	4638      	mov	r0, r7
 8009950:	f7ff ffc0 	bl	80098d4 <sbrk_aligned>
 8009954:	1c43      	adds	r3, r0, #1
 8009956:	4604      	mov	r4, r0
 8009958:	d155      	bne.n	8009a06 <_malloc_r+0xf2>
 800995a:	f8d8 4000 	ldr.w	r4, [r8]
 800995e:	4626      	mov	r6, r4
 8009960:	2e00      	cmp	r6, #0
 8009962:	d145      	bne.n	80099f0 <_malloc_r+0xdc>
 8009964:	2c00      	cmp	r4, #0
 8009966:	d048      	beq.n	80099fa <_malloc_r+0xe6>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	4631      	mov	r1, r6
 800996c:	4638      	mov	r0, r7
 800996e:	eb04 0903 	add.w	r9, r4, r3
 8009972:	f001 f9a7 	bl	800acc4 <_sbrk_r>
 8009976:	4581      	cmp	r9, r0
 8009978:	d13f      	bne.n	80099fa <_malloc_r+0xe6>
 800997a:	6821      	ldr	r1, [r4, #0]
 800997c:	1a6d      	subs	r5, r5, r1
 800997e:	4629      	mov	r1, r5
 8009980:	4638      	mov	r0, r7
 8009982:	f7ff ffa7 	bl	80098d4 <sbrk_aligned>
 8009986:	3001      	adds	r0, #1
 8009988:	d037      	beq.n	80099fa <_malloc_r+0xe6>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	442b      	add	r3, r5
 800998e:	6023      	str	r3, [r4, #0]
 8009990:	f8d8 3000 	ldr.w	r3, [r8]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d038      	beq.n	8009a0a <_malloc_r+0xf6>
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	42a2      	cmp	r2, r4
 800999c:	d12b      	bne.n	80099f6 <_malloc_r+0xe2>
 800999e:	2200      	movs	r2, #0
 80099a0:	605a      	str	r2, [r3, #4]
 80099a2:	e00f      	b.n	80099c4 <_malloc_r+0xb0>
 80099a4:	6822      	ldr	r2, [r4, #0]
 80099a6:	1b52      	subs	r2, r2, r5
 80099a8:	d41f      	bmi.n	80099ea <_malloc_r+0xd6>
 80099aa:	2a0b      	cmp	r2, #11
 80099ac:	d917      	bls.n	80099de <_malloc_r+0xca>
 80099ae:	1961      	adds	r1, r4, r5
 80099b0:	42a3      	cmp	r3, r4
 80099b2:	6025      	str	r5, [r4, #0]
 80099b4:	bf18      	it	ne
 80099b6:	6059      	strne	r1, [r3, #4]
 80099b8:	6863      	ldr	r3, [r4, #4]
 80099ba:	bf08      	it	eq
 80099bc:	f8c8 1000 	streq.w	r1, [r8]
 80099c0:	5162      	str	r2, [r4, r5]
 80099c2:	604b      	str	r3, [r1, #4]
 80099c4:	4638      	mov	r0, r7
 80099c6:	f104 060b 	add.w	r6, r4, #11
 80099ca:	f000 f83b 	bl	8009a44 <__malloc_unlock>
 80099ce:	f026 0607 	bic.w	r6, r6, #7
 80099d2:	1d23      	adds	r3, r4, #4
 80099d4:	1af2      	subs	r2, r6, r3
 80099d6:	d0ae      	beq.n	8009936 <_malloc_r+0x22>
 80099d8:	1b9b      	subs	r3, r3, r6
 80099da:	50a3      	str	r3, [r4, r2]
 80099dc:	e7ab      	b.n	8009936 <_malloc_r+0x22>
 80099de:	42a3      	cmp	r3, r4
 80099e0:	6862      	ldr	r2, [r4, #4]
 80099e2:	d1dd      	bne.n	80099a0 <_malloc_r+0x8c>
 80099e4:	f8c8 2000 	str.w	r2, [r8]
 80099e8:	e7ec      	b.n	80099c4 <_malloc_r+0xb0>
 80099ea:	4623      	mov	r3, r4
 80099ec:	6864      	ldr	r4, [r4, #4]
 80099ee:	e7ac      	b.n	800994a <_malloc_r+0x36>
 80099f0:	4634      	mov	r4, r6
 80099f2:	6876      	ldr	r6, [r6, #4]
 80099f4:	e7b4      	b.n	8009960 <_malloc_r+0x4c>
 80099f6:	4613      	mov	r3, r2
 80099f8:	e7cc      	b.n	8009994 <_malloc_r+0x80>
 80099fa:	230c      	movs	r3, #12
 80099fc:	603b      	str	r3, [r7, #0]
 80099fe:	4638      	mov	r0, r7
 8009a00:	f000 f820 	bl	8009a44 <__malloc_unlock>
 8009a04:	e797      	b.n	8009936 <_malloc_r+0x22>
 8009a06:	6025      	str	r5, [r4, #0]
 8009a08:	e7dc      	b.n	80099c4 <_malloc_r+0xb0>
 8009a0a:	605b      	str	r3, [r3, #4]
 8009a0c:	deff      	udf	#255	; 0xff
 8009a0e:	bf00      	nop
 8009a10:	200007dc 	.word	0x200007dc

08009a14 <__ascii_mbtowc>:
 8009a14:	b082      	sub	sp, #8
 8009a16:	b901      	cbnz	r1, 8009a1a <__ascii_mbtowc+0x6>
 8009a18:	a901      	add	r1, sp, #4
 8009a1a:	b142      	cbz	r2, 8009a2e <__ascii_mbtowc+0x1a>
 8009a1c:	b14b      	cbz	r3, 8009a32 <__ascii_mbtowc+0x1e>
 8009a1e:	7813      	ldrb	r3, [r2, #0]
 8009a20:	600b      	str	r3, [r1, #0]
 8009a22:	7812      	ldrb	r2, [r2, #0]
 8009a24:	1e10      	subs	r0, r2, #0
 8009a26:	bf18      	it	ne
 8009a28:	2001      	movne	r0, #1
 8009a2a:	b002      	add	sp, #8
 8009a2c:	4770      	bx	lr
 8009a2e:	4610      	mov	r0, r2
 8009a30:	e7fb      	b.n	8009a2a <__ascii_mbtowc+0x16>
 8009a32:	f06f 0001 	mvn.w	r0, #1
 8009a36:	e7f8      	b.n	8009a2a <__ascii_mbtowc+0x16>

08009a38 <__malloc_lock>:
 8009a38:	4801      	ldr	r0, [pc, #4]	; (8009a40 <__malloc_lock+0x8>)
 8009a3a:	f7fe bd02 	b.w	8008442 <__retarget_lock_acquire_recursive>
 8009a3e:	bf00      	nop
 8009a40:	200007d8 	.word	0x200007d8

08009a44 <__malloc_unlock>:
 8009a44:	4801      	ldr	r0, [pc, #4]	; (8009a4c <__malloc_unlock+0x8>)
 8009a46:	f7fe bcfd 	b.w	8008444 <__retarget_lock_release_recursive>
 8009a4a:	bf00      	nop
 8009a4c:	200007d8 	.word	0x200007d8

08009a50 <_Balloc>:
 8009a50:	b570      	push	{r4, r5, r6, lr}
 8009a52:	69c6      	ldr	r6, [r0, #28]
 8009a54:	4604      	mov	r4, r0
 8009a56:	460d      	mov	r5, r1
 8009a58:	b976      	cbnz	r6, 8009a78 <_Balloc+0x28>
 8009a5a:	2010      	movs	r0, #16
 8009a5c:	f7ff ff32 	bl	80098c4 <malloc>
 8009a60:	4602      	mov	r2, r0
 8009a62:	61e0      	str	r0, [r4, #28]
 8009a64:	b920      	cbnz	r0, 8009a70 <_Balloc+0x20>
 8009a66:	4b18      	ldr	r3, [pc, #96]	; (8009ac8 <_Balloc+0x78>)
 8009a68:	4818      	ldr	r0, [pc, #96]	; (8009acc <_Balloc+0x7c>)
 8009a6a:	216b      	movs	r1, #107	; 0x6b
 8009a6c:	f001 f93a 	bl	800ace4 <__assert_func>
 8009a70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a74:	6006      	str	r6, [r0, #0]
 8009a76:	60c6      	str	r6, [r0, #12]
 8009a78:	69e6      	ldr	r6, [r4, #28]
 8009a7a:	68f3      	ldr	r3, [r6, #12]
 8009a7c:	b183      	cbz	r3, 8009aa0 <_Balloc+0x50>
 8009a7e:	69e3      	ldr	r3, [r4, #28]
 8009a80:	68db      	ldr	r3, [r3, #12]
 8009a82:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a86:	b9b8      	cbnz	r0, 8009ab8 <_Balloc+0x68>
 8009a88:	2101      	movs	r1, #1
 8009a8a:	fa01 f605 	lsl.w	r6, r1, r5
 8009a8e:	1d72      	adds	r2, r6, #5
 8009a90:	0092      	lsls	r2, r2, #2
 8009a92:	4620      	mov	r0, r4
 8009a94:	f001 f944 	bl	800ad20 <_calloc_r>
 8009a98:	b160      	cbz	r0, 8009ab4 <_Balloc+0x64>
 8009a9a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a9e:	e00e      	b.n	8009abe <_Balloc+0x6e>
 8009aa0:	2221      	movs	r2, #33	; 0x21
 8009aa2:	2104      	movs	r1, #4
 8009aa4:	4620      	mov	r0, r4
 8009aa6:	f001 f93b 	bl	800ad20 <_calloc_r>
 8009aaa:	69e3      	ldr	r3, [r4, #28]
 8009aac:	60f0      	str	r0, [r6, #12]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d1e4      	bne.n	8009a7e <_Balloc+0x2e>
 8009ab4:	2000      	movs	r0, #0
 8009ab6:	bd70      	pop	{r4, r5, r6, pc}
 8009ab8:	6802      	ldr	r2, [r0, #0]
 8009aba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009abe:	2300      	movs	r3, #0
 8009ac0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009ac4:	e7f7      	b.n	8009ab6 <_Balloc+0x66>
 8009ac6:	bf00      	nop
 8009ac8:	0800c3be 	.word	0x0800c3be
 8009acc:	0800c49e 	.word	0x0800c49e

08009ad0 <_Bfree>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	69c6      	ldr	r6, [r0, #28]
 8009ad4:	4605      	mov	r5, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	b976      	cbnz	r6, 8009af8 <_Bfree+0x28>
 8009ada:	2010      	movs	r0, #16
 8009adc:	f7ff fef2 	bl	80098c4 <malloc>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	61e8      	str	r0, [r5, #28]
 8009ae4:	b920      	cbnz	r0, 8009af0 <_Bfree+0x20>
 8009ae6:	4b09      	ldr	r3, [pc, #36]	; (8009b0c <_Bfree+0x3c>)
 8009ae8:	4809      	ldr	r0, [pc, #36]	; (8009b10 <_Bfree+0x40>)
 8009aea:	218f      	movs	r1, #143	; 0x8f
 8009aec:	f001 f8fa 	bl	800ace4 <__assert_func>
 8009af0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009af4:	6006      	str	r6, [r0, #0]
 8009af6:	60c6      	str	r6, [r0, #12]
 8009af8:	b13c      	cbz	r4, 8009b0a <_Bfree+0x3a>
 8009afa:	69eb      	ldr	r3, [r5, #28]
 8009afc:	6862      	ldr	r2, [r4, #4]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b04:	6021      	str	r1, [r4, #0]
 8009b06:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	0800c3be 	.word	0x0800c3be
 8009b10:	0800c49e 	.word	0x0800c49e

08009b14 <__multadd>:
 8009b14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b18:	690d      	ldr	r5, [r1, #16]
 8009b1a:	4607      	mov	r7, r0
 8009b1c:	460c      	mov	r4, r1
 8009b1e:	461e      	mov	r6, r3
 8009b20:	f101 0c14 	add.w	ip, r1, #20
 8009b24:	2000      	movs	r0, #0
 8009b26:	f8dc 3000 	ldr.w	r3, [ip]
 8009b2a:	b299      	uxth	r1, r3
 8009b2c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b30:	0c1e      	lsrs	r6, r3, #16
 8009b32:	0c0b      	lsrs	r3, r1, #16
 8009b34:	fb02 3306 	mla	r3, r2, r6, r3
 8009b38:	b289      	uxth	r1, r1
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b40:	4285      	cmp	r5, r0
 8009b42:	f84c 1b04 	str.w	r1, [ip], #4
 8009b46:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b4a:	dcec      	bgt.n	8009b26 <__multadd+0x12>
 8009b4c:	b30e      	cbz	r6, 8009b92 <__multadd+0x7e>
 8009b4e:	68a3      	ldr	r3, [r4, #8]
 8009b50:	42ab      	cmp	r3, r5
 8009b52:	dc19      	bgt.n	8009b88 <__multadd+0x74>
 8009b54:	6861      	ldr	r1, [r4, #4]
 8009b56:	4638      	mov	r0, r7
 8009b58:	3101      	adds	r1, #1
 8009b5a:	f7ff ff79 	bl	8009a50 <_Balloc>
 8009b5e:	4680      	mov	r8, r0
 8009b60:	b928      	cbnz	r0, 8009b6e <__multadd+0x5a>
 8009b62:	4602      	mov	r2, r0
 8009b64:	4b0c      	ldr	r3, [pc, #48]	; (8009b98 <__multadd+0x84>)
 8009b66:	480d      	ldr	r0, [pc, #52]	; (8009b9c <__multadd+0x88>)
 8009b68:	21ba      	movs	r1, #186	; 0xba
 8009b6a:	f001 f8bb 	bl	800ace4 <__assert_func>
 8009b6e:	6922      	ldr	r2, [r4, #16]
 8009b70:	3202      	adds	r2, #2
 8009b72:	f104 010c 	add.w	r1, r4, #12
 8009b76:	0092      	lsls	r2, r2, #2
 8009b78:	300c      	adds	r0, #12
 8009b7a:	f7fe fc64 	bl	8008446 <memcpy>
 8009b7e:	4621      	mov	r1, r4
 8009b80:	4638      	mov	r0, r7
 8009b82:	f7ff ffa5 	bl	8009ad0 <_Bfree>
 8009b86:	4644      	mov	r4, r8
 8009b88:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b8c:	3501      	adds	r5, #1
 8009b8e:	615e      	str	r6, [r3, #20]
 8009b90:	6125      	str	r5, [r4, #16]
 8009b92:	4620      	mov	r0, r4
 8009b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b98:	0800c42d 	.word	0x0800c42d
 8009b9c:	0800c49e 	.word	0x0800c49e

08009ba0 <__s2b>:
 8009ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ba4:	460c      	mov	r4, r1
 8009ba6:	4615      	mov	r5, r2
 8009ba8:	461f      	mov	r7, r3
 8009baa:	2209      	movs	r2, #9
 8009bac:	3308      	adds	r3, #8
 8009bae:	4606      	mov	r6, r0
 8009bb0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009bb4:	2100      	movs	r1, #0
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	429a      	cmp	r2, r3
 8009bba:	db09      	blt.n	8009bd0 <__s2b+0x30>
 8009bbc:	4630      	mov	r0, r6
 8009bbe:	f7ff ff47 	bl	8009a50 <_Balloc>
 8009bc2:	b940      	cbnz	r0, 8009bd6 <__s2b+0x36>
 8009bc4:	4602      	mov	r2, r0
 8009bc6:	4b19      	ldr	r3, [pc, #100]	; (8009c2c <__s2b+0x8c>)
 8009bc8:	4819      	ldr	r0, [pc, #100]	; (8009c30 <__s2b+0x90>)
 8009bca:	21d3      	movs	r1, #211	; 0xd3
 8009bcc:	f001 f88a 	bl	800ace4 <__assert_func>
 8009bd0:	0052      	lsls	r2, r2, #1
 8009bd2:	3101      	adds	r1, #1
 8009bd4:	e7f0      	b.n	8009bb8 <__s2b+0x18>
 8009bd6:	9b08      	ldr	r3, [sp, #32]
 8009bd8:	6143      	str	r3, [r0, #20]
 8009bda:	2d09      	cmp	r5, #9
 8009bdc:	f04f 0301 	mov.w	r3, #1
 8009be0:	6103      	str	r3, [r0, #16]
 8009be2:	dd16      	ble.n	8009c12 <__s2b+0x72>
 8009be4:	f104 0909 	add.w	r9, r4, #9
 8009be8:	46c8      	mov	r8, r9
 8009bea:	442c      	add	r4, r5
 8009bec:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bf0:	4601      	mov	r1, r0
 8009bf2:	3b30      	subs	r3, #48	; 0x30
 8009bf4:	220a      	movs	r2, #10
 8009bf6:	4630      	mov	r0, r6
 8009bf8:	f7ff ff8c 	bl	8009b14 <__multadd>
 8009bfc:	45a0      	cmp	r8, r4
 8009bfe:	d1f5      	bne.n	8009bec <__s2b+0x4c>
 8009c00:	f1a5 0408 	sub.w	r4, r5, #8
 8009c04:	444c      	add	r4, r9
 8009c06:	1b2d      	subs	r5, r5, r4
 8009c08:	1963      	adds	r3, r4, r5
 8009c0a:	42bb      	cmp	r3, r7
 8009c0c:	db04      	blt.n	8009c18 <__s2b+0x78>
 8009c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c12:	340a      	adds	r4, #10
 8009c14:	2509      	movs	r5, #9
 8009c16:	e7f6      	b.n	8009c06 <__s2b+0x66>
 8009c18:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c1c:	4601      	mov	r1, r0
 8009c1e:	3b30      	subs	r3, #48	; 0x30
 8009c20:	220a      	movs	r2, #10
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7ff ff76 	bl	8009b14 <__multadd>
 8009c28:	e7ee      	b.n	8009c08 <__s2b+0x68>
 8009c2a:	bf00      	nop
 8009c2c:	0800c42d 	.word	0x0800c42d
 8009c30:	0800c49e 	.word	0x0800c49e

08009c34 <__hi0bits>:
 8009c34:	0c03      	lsrs	r3, r0, #16
 8009c36:	041b      	lsls	r3, r3, #16
 8009c38:	b9d3      	cbnz	r3, 8009c70 <__hi0bits+0x3c>
 8009c3a:	0400      	lsls	r0, r0, #16
 8009c3c:	2310      	movs	r3, #16
 8009c3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c42:	bf04      	itt	eq
 8009c44:	0200      	lsleq	r0, r0, #8
 8009c46:	3308      	addeq	r3, #8
 8009c48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c4c:	bf04      	itt	eq
 8009c4e:	0100      	lsleq	r0, r0, #4
 8009c50:	3304      	addeq	r3, #4
 8009c52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c56:	bf04      	itt	eq
 8009c58:	0080      	lsleq	r0, r0, #2
 8009c5a:	3302      	addeq	r3, #2
 8009c5c:	2800      	cmp	r0, #0
 8009c5e:	db05      	blt.n	8009c6c <__hi0bits+0x38>
 8009c60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c64:	f103 0301 	add.w	r3, r3, #1
 8009c68:	bf08      	it	eq
 8009c6a:	2320      	moveq	r3, #32
 8009c6c:	4618      	mov	r0, r3
 8009c6e:	4770      	bx	lr
 8009c70:	2300      	movs	r3, #0
 8009c72:	e7e4      	b.n	8009c3e <__hi0bits+0xa>

08009c74 <__lo0bits>:
 8009c74:	6803      	ldr	r3, [r0, #0]
 8009c76:	f013 0207 	ands.w	r2, r3, #7
 8009c7a:	d00c      	beq.n	8009c96 <__lo0bits+0x22>
 8009c7c:	07d9      	lsls	r1, r3, #31
 8009c7e:	d422      	bmi.n	8009cc6 <__lo0bits+0x52>
 8009c80:	079a      	lsls	r2, r3, #30
 8009c82:	bf49      	itett	mi
 8009c84:	085b      	lsrmi	r3, r3, #1
 8009c86:	089b      	lsrpl	r3, r3, #2
 8009c88:	6003      	strmi	r3, [r0, #0]
 8009c8a:	2201      	movmi	r2, #1
 8009c8c:	bf5c      	itt	pl
 8009c8e:	6003      	strpl	r3, [r0, #0]
 8009c90:	2202      	movpl	r2, #2
 8009c92:	4610      	mov	r0, r2
 8009c94:	4770      	bx	lr
 8009c96:	b299      	uxth	r1, r3
 8009c98:	b909      	cbnz	r1, 8009c9e <__lo0bits+0x2a>
 8009c9a:	0c1b      	lsrs	r3, r3, #16
 8009c9c:	2210      	movs	r2, #16
 8009c9e:	b2d9      	uxtb	r1, r3
 8009ca0:	b909      	cbnz	r1, 8009ca6 <__lo0bits+0x32>
 8009ca2:	3208      	adds	r2, #8
 8009ca4:	0a1b      	lsrs	r3, r3, #8
 8009ca6:	0719      	lsls	r1, r3, #28
 8009ca8:	bf04      	itt	eq
 8009caa:	091b      	lsreq	r3, r3, #4
 8009cac:	3204      	addeq	r2, #4
 8009cae:	0799      	lsls	r1, r3, #30
 8009cb0:	bf04      	itt	eq
 8009cb2:	089b      	lsreq	r3, r3, #2
 8009cb4:	3202      	addeq	r2, #2
 8009cb6:	07d9      	lsls	r1, r3, #31
 8009cb8:	d403      	bmi.n	8009cc2 <__lo0bits+0x4e>
 8009cba:	085b      	lsrs	r3, r3, #1
 8009cbc:	f102 0201 	add.w	r2, r2, #1
 8009cc0:	d003      	beq.n	8009cca <__lo0bits+0x56>
 8009cc2:	6003      	str	r3, [r0, #0]
 8009cc4:	e7e5      	b.n	8009c92 <__lo0bits+0x1e>
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	e7e3      	b.n	8009c92 <__lo0bits+0x1e>
 8009cca:	2220      	movs	r2, #32
 8009ccc:	e7e1      	b.n	8009c92 <__lo0bits+0x1e>
	...

08009cd0 <__i2b>:
 8009cd0:	b510      	push	{r4, lr}
 8009cd2:	460c      	mov	r4, r1
 8009cd4:	2101      	movs	r1, #1
 8009cd6:	f7ff febb 	bl	8009a50 <_Balloc>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	b928      	cbnz	r0, 8009cea <__i2b+0x1a>
 8009cde:	4b05      	ldr	r3, [pc, #20]	; (8009cf4 <__i2b+0x24>)
 8009ce0:	4805      	ldr	r0, [pc, #20]	; (8009cf8 <__i2b+0x28>)
 8009ce2:	f240 1145 	movw	r1, #325	; 0x145
 8009ce6:	f000 fffd 	bl	800ace4 <__assert_func>
 8009cea:	2301      	movs	r3, #1
 8009cec:	6144      	str	r4, [r0, #20]
 8009cee:	6103      	str	r3, [r0, #16]
 8009cf0:	bd10      	pop	{r4, pc}
 8009cf2:	bf00      	nop
 8009cf4:	0800c42d 	.word	0x0800c42d
 8009cf8:	0800c49e 	.word	0x0800c49e

08009cfc <__multiply>:
 8009cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d00:	4691      	mov	r9, r2
 8009d02:	690a      	ldr	r2, [r1, #16]
 8009d04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d08:	429a      	cmp	r2, r3
 8009d0a:	bfb8      	it	lt
 8009d0c:	460b      	movlt	r3, r1
 8009d0e:	460c      	mov	r4, r1
 8009d10:	bfbc      	itt	lt
 8009d12:	464c      	movlt	r4, r9
 8009d14:	4699      	movlt	r9, r3
 8009d16:	6927      	ldr	r7, [r4, #16]
 8009d18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d1c:	68a3      	ldr	r3, [r4, #8]
 8009d1e:	6861      	ldr	r1, [r4, #4]
 8009d20:	eb07 060a 	add.w	r6, r7, sl
 8009d24:	42b3      	cmp	r3, r6
 8009d26:	b085      	sub	sp, #20
 8009d28:	bfb8      	it	lt
 8009d2a:	3101      	addlt	r1, #1
 8009d2c:	f7ff fe90 	bl	8009a50 <_Balloc>
 8009d30:	b930      	cbnz	r0, 8009d40 <__multiply+0x44>
 8009d32:	4602      	mov	r2, r0
 8009d34:	4b44      	ldr	r3, [pc, #272]	; (8009e48 <__multiply+0x14c>)
 8009d36:	4845      	ldr	r0, [pc, #276]	; (8009e4c <__multiply+0x150>)
 8009d38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d3c:	f000 ffd2 	bl	800ace4 <__assert_func>
 8009d40:	f100 0514 	add.w	r5, r0, #20
 8009d44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d48:	462b      	mov	r3, r5
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	4543      	cmp	r3, r8
 8009d4e:	d321      	bcc.n	8009d94 <__multiply+0x98>
 8009d50:	f104 0314 	add.w	r3, r4, #20
 8009d54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d58:	f109 0314 	add.w	r3, r9, #20
 8009d5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d60:	9202      	str	r2, [sp, #8]
 8009d62:	1b3a      	subs	r2, r7, r4
 8009d64:	3a15      	subs	r2, #21
 8009d66:	f022 0203 	bic.w	r2, r2, #3
 8009d6a:	3204      	adds	r2, #4
 8009d6c:	f104 0115 	add.w	r1, r4, #21
 8009d70:	428f      	cmp	r7, r1
 8009d72:	bf38      	it	cc
 8009d74:	2204      	movcc	r2, #4
 8009d76:	9201      	str	r2, [sp, #4]
 8009d78:	9a02      	ldr	r2, [sp, #8]
 8009d7a:	9303      	str	r3, [sp, #12]
 8009d7c:	429a      	cmp	r2, r3
 8009d7e:	d80c      	bhi.n	8009d9a <__multiply+0x9e>
 8009d80:	2e00      	cmp	r6, #0
 8009d82:	dd03      	ble.n	8009d8c <__multiply+0x90>
 8009d84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d05b      	beq.n	8009e44 <__multiply+0x148>
 8009d8c:	6106      	str	r6, [r0, #16]
 8009d8e:	b005      	add	sp, #20
 8009d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d94:	f843 2b04 	str.w	r2, [r3], #4
 8009d98:	e7d8      	b.n	8009d4c <__multiply+0x50>
 8009d9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d9e:	f1ba 0f00 	cmp.w	sl, #0
 8009da2:	d024      	beq.n	8009dee <__multiply+0xf2>
 8009da4:	f104 0e14 	add.w	lr, r4, #20
 8009da8:	46a9      	mov	r9, r5
 8009daa:	f04f 0c00 	mov.w	ip, #0
 8009dae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009db2:	f8d9 1000 	ldr.w	r1, [r9]
 8009db6:	fa1f fb82 	uxth.w	fp, r2
 8009dba:	b289      	uxth	r1, r1
 8009dbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8009dc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009dc4:	f8d9 2000 	ldr.w	r2, [r9]
 8009dc8:	4461      	add	r1, ip
 8009dca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dce:	fb0a c20b 	mla	r2, sl, fp, ip
 8009dd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009dd6:	b289      	uxth	r1, r1
 8009dd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ddc:	4577      	cmp	r7, lr
 8009dde:	f849 1b04 	str.w	r1, [r9], #4
 8009de2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009de6:	d8e2      	bhi.n	8009dae <__multiply+0xb2>
 8009de8:	9a01      	ldr	r2, [sp, #4]
 8009dea:	f845 c002 	str.w	ip, [r5, r2]
 8009dee:	9a03      	ldr	r2, [sp, #12]
 8009df0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009df4:	3304      	adds	r3, #4
 8009df6:	f1b9 0f00 	cmp.w	r9, #0
 8009dfa:	d021      	beq.n	8009e40 <__multiply+0x144>
 8009dfc:	6829      	ldr	r1, [r5, #0]
 8009dfe:	f104 0c14 	add.w	ip, r4, #20
 8009e02:	46ae      	mov	lr, r5
 8009e04:	f04f 0a00 	mov.w	sl, #0
 8009e08:	f8bc b000 	ldrh.w	fp, [ip]
 8009e0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e10:	fb09 220b 	mla	r2, r9, fp, r2
 8009e14:	4452      	add	r2, sl
 8009e16:	b289      	uxth	r1, r1
 8009e18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e1c:	f84e 1b04 	str.w	r1, [lr], #4
 8009e20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e28:	f8be 1000 	ldrh.w	r1, [lr]
 8009e2c:	fb09 110a 	mla	r1, r9, sl, r1
 8009e30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e34:	4567      	cmp	r7, ip
 8009e36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e3a:	d8e5      	bhi.n	8009e08 <__multiply+0x10c>
 8009e3c:	9a01      	ldr	r2, [sp, #4]
 8009e3e:	50a9      	str	r1, [r5, r2]
 8009e40:	3504      	adds	r5, #4
 8009e42:	e799      	b.n	8009d78 <__multiply+0x7c>
 8009e44:	3e01      	subs	r6, #1
 8009e46:	e79b      	b.n	8009d80 <__multiply+0x84>
 8009e48:	0800c42d 	.word	0x0800c42d
 8009e4c:	0800c49e 	.word	0x0800c49e

08009e50 <__pow5mult>:
 8009e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e54:	4615      	mov	r5, r2
 8009e56:	f012 0203 	ands.w	r2, r2, #3
 8009e5a:	4606      	mov	r6, r0
 8009e5c:	460f      	mov	r7, r1
 8009e5e:	d007      	beq.n	8009e70 <__pow5mult+0x20>
 8009e60:	4c25      	ldr	r4, [pc, #148]	; (8009ef8 <__pow5mult+0xa8>)
 8009e62:	3a01      	subs	r2, #1
 8009e64:	2300      	movs	r3, #0
 8009e66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e6a:	f7ff fe53 	bl	8009b14 <__multadd>
 8009e6e:	4607      	mov	r7, r0
 8009e70:	10ad      	asrs	r5, r5, #2
 8009e72:	d03d      	beq.n	8009ef0 <__pow5mult+0xa0>
 8009e74:	69f4      	ldr	r4, [r6, #28]
 8009e76:	b97c      	cbnz	r4, 8009e98 <__pow5mult+0x48>
 8009e78:	2010      	movs	r0, #16
 8009e7a:	f7ff fd23 	bl	80098c4 <malloc>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	61f0      	str	r0, [r6, #28]
 8009e82:	b928      	cbnz	r0, 8009e90 <__pow5mult+0x40>
 8009e84:	4b1d      	ldr	r3, [pc, #116]	; (8009efc <__pow5mult+0xac>)
 8009e86:	481e      	ldr	r0, [pc, #120]	; (8009f00 <__pow5mult+0xb0>)
 8009e88:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009e8c:	f000 ff2a 	bl	800ace4 <__assert_func>
 8009e90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e94:	6004      	str	r4, [r0, #0]
 8009e96:	60c4      	str	r4, [r0, #12]
 8009e98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009e9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ea0:	b94c      	cbnz	r4, 8009eb6 <__pow5mult+0x66>
 8009ea2:	f240 2171 	movw	r1, #625	; 0x271
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f7ff ff12 	bl	8009cd0 <__i2b>
 8009eac:	2300      	movs	r3, #0
 8009eae:	f8c8 0008 	str.w	r0, [r8, #8]
 8009eb2:	4604      	mov	r4, r0
 8009eb4:	6003      	str	r3, [r0, #0]
 8009eb6:	f04f 0900 	mov.w	r9, #0
 8009eba:	07eb      	lsls	r3, r5, #31
 8009ebc:	d50a      	bpl.n	8009ed4 <__pow5mult+0x84>
 8009ebe:	4639      	mov	r1, r7
 8009ec0:	4622      	mov	r2, r4
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ff1a 	bl	8009cfc <__multiply>
 8009ec8:	4639      	mov	r1, r7
 8009eca:	4680      	mov	r8, r0
 8009ecc:	4630      	mov	r0, r6
 8009ece:	f7ff fdff 	bl	8009ad0 <_Bfree>
 8009ed2:	4647      	mov	r7, r8
 8009ed4:	106d      	asrs	r5, r5, #1
 8009ed6:	d00b      	beq.n	8009ef0 <__pow5mult+0xa0>
 8009ed8:	6820      	ldr	r0, [r4, #0]
 8009eda:	b938      	cbnz	r0, 8009eec <__pow5mult+0x9c>
 8009edc:	4622      	mov	r2, r4
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	f7ff ff0b 	bl	8009cfc <__multiply>
 8009ee6:	6020      	str	r0, [r4, #0]
 8009ee8:	f8c0 9000 	str.w	r9, [r0]
 8009eec:	4604      	mov	r4, r0
 8009eee:	e7e4      	b.n	8009eba <__pow5mult+0x6a>
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef6:	bf00      	nop
 8009ef8:	0800c5e8 	.word	0x0800c5e8
 8009efc:	0800c3be 	.word	0x0800c3be
 8009f00:	0800c49e 	.word	0x0800c49e

08009f04 <__lshift>:
 8009f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f08:	460c      	mov	r4, r1
 8009f0a:	6849      	ldr	r1, [r1, #4]
 8009f0c:	6923      	ldr	r3, [r4, #16]
 8009f0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f12:	68a3      	ldr	r3, [r4, #8]
 8009f14:	4607      	mov	r7, r0
 8009f16:	4691      	mov	r9, r2
 8009f18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f1c:	f108 0601 	add.w	r6, r8, #1
 8009f20:	42b3      	cmp	r3, r6
 8009f22:	db0b      	blt.n	8009f3c <__lshift+0x38>
 8009f24:	4638      	mov	r0, r7
 8009f26:	f7ff fd93 	bl	8009a50 <_Balloc>
 8009f2a:	4605      	mov	r5, r0
 8009f2c:	b948      	cbnz	r0, 8009f42 <__lshift+0x3e>
 8009f2e:	4602      	mov	r2, r0
 8009f30:	4b28      	ldr	r3, [pc, #160]	; (8009fd4 <__lshift+0xd0>)
 8009f32:	4829      	ldr	r0, [pc, #164]	; (8009fd8 <__lshift+0xd4>)
 8009f34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f38:	f000 fed4 	bl	800ace4 <__assert_func>
 8009f3c:	3101      	adds	r1, #1
 8009f3e:	005b      	lsls	r3, r3, #1
 8009f40:	e7ee      	b.n	8009f20 <__lshift+0x1c>
 8009f42:	2300      	movs	r3, #0
 8009f44:	f100 0114 	add.w	r1, r0, #20
 8009f48:	f100 0210 	add.w	r2, r0, #16
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	4553      	cmp	r3, sl
 8009f50:	db33      	blt.n	8009fba <__lshift+0xb6>
 8009f52:	6920      	ldr	r0, [r4, #16]
 8009f54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f58:	f104 0314 	add.w	r3, r4, #20
 8009f5c:	f019 091f 	ands.w	r9, r9, #31
 8009f60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f68:	d02b      	beq.n	8009fc2 <__lshift+0xbe>
 8009f6a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f6e:	468a      	mov	sl, r1
 8009f70:	2200      	movs	r2, #0
 8009f72:	6818      	ldr	r0, [r3, #0]
 8009f74:	fa00 f009 	lsl.w	r0, r0, r9
 8009f78:	4310      	orrs	r0, r2
 8009f7a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f82:	459c      	cmp	ip, r3
 8009f84:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f88:	d8f3      	bhi.n	8009f72 <__lshift+0x6e>
 8009f8a:	ebac 0304 	sub.w	r3, ip, r4
 8009f8e:	3b15      	subs	r3, #21
 8009f90:	f023 0303 	bic.w	r3, r3, #3
 8009f94:	3304      	adds	r3, #4
 8009f96:	f104 0015 	add.w	r0, r4, #21
 8009f9a:	4584      	cmp	ip, r0
 8009f9c:	bf38      	it	cc
 8009f9e:	2304      	movcc	r3, #4
 8009fa0:	50ca      	str	r2, [r1, r3]
 8009fa2:	b10a      	cbz	r2, 8009fa8 <__lshift+0xa4>
 8009fa4:	f108 0602 	add.w	r6, r8, #2
 8009fa8:	3e01      	subs	r6, #1
 8009faa:	4638      	mov	r0, r7
 8009fac:	612e      	str	r6, [r5, #16]
 8009fae:	4621      	mov	r1, r4
 8009fb0:	f7ff fd8e 	bl	8009ad0 <_Bfree>
 8009fb4:	4628      	mov	r0, r5
 8009fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fba:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fbe:	3301      	adds	r3, #1
 8009fc0:	e7c5      	b.n	8009f4e <__lshift+0x4a>
 8009fc2:	3904      	subs	r1, #4
 8009fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009fcc:	459c      	cmp	ip, r3
 8009fce:	d8f9      	bhi.n	8009fc4 <__lshift+0xc0>
 8009fd0:	e7ea      	b.n	8009fa8 <__lshift+0xa4>
 8009fd2:	bf00      	nop
 8009fd4:	0800c42d 	.word	0x0800c42d
 8009fd8:	0800c49e 	.word	0x0800c49e

08009fdc <__mcmp>:
 8009fdc:	b530      	push	{r4, r5, lr}
 8009fde:	6902      	ldr	r2, [r0, #16]
 8009fe0:	690c      	ldr	r4, [r1, #16]
 8009fe2:	1b12      	subs	r2, r2, r4
 8009fe4:	d10e      	bne.n	800a004 <__mcmp+0x28>
 8009fe6:	f100 0314 	add.w	r3, r0, #20
 8009fea:	3114      	adds	r1, #20
 8009fec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009ff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009ff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009ff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009ffc:	42a5      	cmp	r5, r4
 8009ffe:	d003      	beq.n	800a008 <__mcmp+0x2c>
 800a000:	d305      	bcc.n	800a00e <__mcmp+0x32>
 800a002:	2201      	movs	r2, #1
 800a004:	4610      	mov	r0, r2
 800a006:	bd30      	pop	{r4, r5, pc}
 800a008:	4283      	cmp	r3, r0
 800a00a:	d3f3      	bcc.n	8009ff4 <__mcmp+0x18>
 800a00c:	e7fa      	b.n	800a004 <__mcmp+0x28>
 800a00e:	f04f 32ff 	mov.w	r2, #4294967295
 800a012:	e7f7      	b.n	800a004 <__mcmp+0x28>

0800a014 <__mdiff>:
 800a014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a018:	460c      	mov	r4, r1
 800a01a:	4606      	mov	r6, r0
 800a01c:	4611      	mov	r1, r2
 800a01e:	4620      	mov	r0, r4
 800a020:	4690      	mov	r8, r2
 800a022:	f7ff ffdb 	bl	8009fdc <__mcmp>
 800a026:	1e05      	subs	r5, r0, #0
 800a028:	d110      	bne.n	800a04c <__mdiff+0x38>
 800a02a:	4629      	mov	r1, r5
 800a02c:	4630      	mov	r0, r6
 800a02e:	f7ff fd0f 	bl	8009a50 <_Balloc>
 800a032:	b930      	cbnz	r0, 800a042 <__mdiff+0x2e>
 800a034:	4b3a      	ldr	r3, [pc, #232]	; (800a120 <__mdiff+0x10c>)
 800a036:	4602      	mov	r2, r0
 800a038:	f240 2137 	movw	r1, #567	; 0x237
 800a03c:	4839      	ldr	r0, [pc, #228]	; (800a124 <__mdiff+0x110>)
 800a03e:	f000 fe51 	bl	800ace4 <__assert_func>
 800a042:	2301      	movs	r3, #1
 800a044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a04c:	bfa4      	itt	ge
 800a04e:	4643      	movge	r3, r8
 800a050:	46a0      	movge	r8, r4
 800a052:	4630      	mov	r0, r6
 800a054:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a058:	bfa6      	itte	ge
 800a05a:	461c      	movge	r4, r3
 800a05c:	2500      	movge	r5, #0
 800a05e:	2501      	movlt	r5, #1
 800a060:	f7ff fcf6 	bl	8009a50 <_Balloc>
 800a064:	b920      	cbnz	r0, 800a070 <__mdiff+0x5c>
 800a066:	4b2e      	ldr	r3, [pc, #184]	; (800a120 <__mdiff+0x10c>)
 800a068:	4602      	mov	r2, r0
 800a06a:	f240 2145 	movw	r1, #581	; 0x245
 800a06e:	e7e5      	b.n	800a03c <__mdiff+0x28>
 800a070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a074:	6926      	ldr	r6, [r4, #16]
 800a076:	60c5      	str	r5, [r0, #12]
 800a078:	f104 0914 	add.w	r9, r4, #20
 800a07c:	f108 0514 	add.w	r5, r8, #20
 800a080:	f100 0e14 	add.w	lr, r0, #20
 800a084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a08c:	f108 0210 	add.w	r2, r8, #16
 800a090:	46f2      	mov	sl, lr
 800a092:	2100      	movs	r1, #0
 800a094:	f859 3b04 	ldr.w	r3, [r9], #4
 800a098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a09c:	fa11 f88b 	uxtah	r8, r1, fp
 800a0a0:	b299      	uxth	r1, r3
 800a0a2:	0c1b      	lsrs	r3, r3, #16
 800a0a4:	eba8 0801 	sub.w	r8, r8, r1
 800a0a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0b0:	fa1f f888 	uxth.w	r8, r8
 800a0b4:	1419      	asrs	r1, r3, #16
 800a0b6:	454e      	cmp	r6, r9
 800a0b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0bc:	f84a 3b04 	str.w	r3, [sl], #4
 800a0c0:	d8e8      	bhi.n	800a094 <__mdiff+0x80>
 800a0c2:	1b33      	subs	r3, r6, r4
 800a0c4:	3b15      	subs	r3, #21
 800a0c6:	f023 0303 	bic.w	r3, r3, #3
 800a0ca:	3304      	adds	r3, #4
 800a0cc:	3415      	adds	r4, #21
 800a0ce:	42a6      	cmp	r6, r4
 800a0d0:	bf38      	it	cc
 800a0d2:	2304      	movcc	r3, #4
 800a0d4:	441d      	add	r5, r3
 800a0d6:	4473      	add	r3, lr
 800a0d8:	469e      	mov	lr, r3
 800a0da:	462e      	mov	r6, r5
 800a0dc:	4566      	cmp	r6, ip
 800a0de:	d30e      	bcc.n	800a0fe <__mdiff+0xea>
 800a0e0:	f10c 0203 	add.w	r2, ip, #3
 800a0e4:	1b52      	subs	r2, r2, r5
 800a0e6:	f022 0203 	bic.w	r2, r2, #3
 800a0ea:	3d03      	subs	r5, #3
 800a0ec:	45ac      	cmp	ip, r5
 800a0ee:	bf38      	it	cc
 800a0f0:	2200      	movcc	r2, #0
 800a0f2:	4413      	add	r3, r2
 800a0f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a0f8:	b17a      	cbz	r2, 800a11a <__mdiff+0x106>
 800a0fa:	6107      	str	r7, [r0, #16]
 800a0fc:	e7a4      	b.n	800a048 <__mdiff+0x34>
 800a0fe:	f856 8b04 	ldr.w	r8, [r6], #4
 800a102:	fa11 f288 	uxtah	r2, r1, r8
 800a106:	1414      	asrs	r4, r2, #16
 800a108:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a10c:	b292      	uxth	r2, r2
 800a10e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a112:	f84e 2b04 	str.w	r2, [lr], #4
 800a116:	1421      	asrs	r1, r4, #16
 800a118:	e7e0      	b.n	800a0dc <__mdiff+0xc8>
 800a11a:	3f01      	subs	r7, #1
 800a11c:	e7ea      	b.n	800a0f4 <__mdiff+0xe0>
 800a11e:	bf00      	nop
 800a120:	0800c42d 	.word	0x0800c42d
 800a124:	0800c49e 	.word	0x0800c49e

0800a128 <__ulp>:
 800a128:	b082      	sub	sp, #8
 800a12a:	ed8d 0b00 	vstr	d0, [sp]
 800a12e:	9a01      	ldr	r2, [sp, #4]
 800a130:	4b0f      	ldr	r3, [pc, #60]	; (800a170 <__ulp+0x48>)
 800a132:	4013      	ands	r3, r2
 800a134:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a138:	2b00      	cmp	r3, #0
 800a13a:	dc08      	bgt.n	800a14e <__ulp+0x26>
 800a13c:	425b      	negs	r3, r3
 800a13e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a142:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a146:	da04      	bge.n	800a152 <__ulp+0x2a>
 800a148:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a14c:	4113      	asrs	r3, r2
 800a14e:	2200      	movs	r2, #0
 800a150:	e008      	b.n	800a164 <__ulp+0x3c>
 800a152:	f1a2 0314 	sub.w	r3, r2, #20
 800a156:	2b1e      	cmp	r3, #30
 800a158:	bfda      	itte	le
 800a15a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a15e:	40da      	lsrle	r2, r3
 800a160:	2201      	movgt	r2, #1
 800a162:	2300      	movs	r3, #0
 800a164:	4619      	mov	r1, r3
 800a166:	4610      	mov	r0, r2
 800a168:	ec41 0b10 	vmov	d0, r0, r1
 800a16c:	b002      	add	sp, #8
 800a16e:	4770      	bx	lr
 800a170:	7ff00000 	.word	0x7ff00000

0800a174 <__b2d>:
 800a174:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a178:	6906      	ldr	r6, [r0, #16]
 800a17a:	f100 0814 	add.w	r8, r0, #20
 800a17e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a182:	1f37      	subs	r7, r6, #4
 800a184:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a188:	4610      	mov	r0, r2
 800a18a:	f7ff fd53 	bl	8009c34 <__hi0bits>
 800a18e:	f1c0 0320 	rsb	r3, r0, #32
 800a192:	280a      	cmp	r0, #10
 800a194:	600b      	str	r3, [r1, #0]
 800a196:	491b      	ldr	r1, [pc, #108]	; (800a204 <__b2d+0x90>)
 800a198:	dc15      	bgt.n	800a1c6 <__b2d+0x52>
 800a19a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a19e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a1a2:	45b8      	cmp	r8, r7
 800a1a4:	ea43 0501 	orr.w	r5, r3, r1
 800a1a8:	bf34      	ite	cc
 800a1aa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1ae:	2300      	movcs	r3, #0
 800a1b0:	3015      	adds	r0, #21
 800a1b2:	fa02 f000 	lsl.w	r0, r2, r0
 800a1b6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a1ba:	4303      	orrs	r3, r0
 800a1bc:	461c      	mov	r4, r3
 800a1be:	ec45 4b10 	vmov	d0, r4, r5
 800a1c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1c6:	45b8      	cmp	r8, r7
 800a1c8:	bf3a      	itte	cc
 800a1ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1ce:	f1a6 0708 	subcc.w	r7, r6, #8
 800a1d2:	2300      	movcs	r3, #0
 800a1d4:	380b      	subs	r0, #11
 800a1d6:	d012      	beq.n	800a1fe <__b2d+0x8a>
 800a1d8:	f1c0 0120 	rsb	r1, r0, #32
 800a1dc:	fa23 f401 	lsr.w	r4, r3, r1
 800a1e0:	4082      	lsls	r2, r0
 800a1e2:	4322      	orrs	r2, r4
 800a1e4:	4547      	cmp	r7, r8
 800a1e6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a1ea:	bf8c      	ite	hi
 800a1ec:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a1f0:	2200      	movls	r2, #0
 800a1f2:	4083      	lsls	r3, r0
 800a1f4:	40ca      	lsrs	r2, r1
 800a1f6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a1fa:	4313      	orrs	r3, r2
 800a1fc:	e7de      	b.n	800a1bc <__b2d+0x48>
 800a1fe:	ea42 0501 	orr.w	r5, r2, r1
 800a202:	e7db      	b.n	800a1bc <__b2d+0x48>
 800a204:	3ff00000 	.word	0x3ff00000

0800a208 <__d2b>:
 800a208:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a20c:	460f      	mov	r7, r1
 800a20e:	2101      	movs	r1, #1
 800a210:	ec59 8b10 	vmov	r8, r9, d0
 800a214:	4616      	mov	r6, r2
 800a216:	f7ff fc1b 	bl	8009a50 <_Balloc>
 800a21a:	4604      	mov	r4, r0
 800a21c:	b930      	cbnz	r0, 800a22c <__d2b+0x24>
 800a21e:	4602      	mov	r2, r0
 800a220:	4b24      	ldr	r3, [pc, #144]	; (800a2b4 <__d2b+0xac>)
 800a222:	4825      	ldr	r0, [pc, #148]	; (800a2b8 <__d2b+0xb0>)
 800a224:	f240 310f 	movw	r1, #783	; 0x30f
 800a228:	f000 fd5c 	bl	800ace4 <__assert_func>
 800a22c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a230:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a234:	bb2d      	cbnz	r5, 800a282 <__d2b+0x7a>
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	f1b8 0300 	subs.w	r3, r8, #0
 800a23c:	d026      	beq.n	800a28c <__d2b+0x84>
 800a23e:	4668      	mov	r0, sp
 800a240:	9300      	str	r3, [sp, #0]
 800a242:	f7ff fd17 	bl	8009c74 <__lo0bits>
 800a246:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a24a:	b1e8      	cbz	r0, 800a288 <__d2b+0x80>
 800a24c:	f1c0 0320 	rsb	r3, r0, #32
 800a250:	fa02 f303 	lsl.w	r3, r2, r3
 800a254:	430b      	orrs	r3, r1
 800a256:	40c2      	lsrs	r2, r0
 800a258:	6163      	str	r3, [r4, #20]
 800a25a:	9201      	str	r2, [sp, #4]
 800a25c:	9b01      	ldr	r3, [sp, #4]
 800a25e:	61a3      	str	r3, [r4, #24]
 800a260:	2b00      	cmp	r3, #0
 800a262:	bf14      	ite	ne
 800a264:	2202      	movne	r2, #2
 800a266:	2201      	moveq	r2, #1
 800a268:	6122      	str	r2, [r4, #16]
 800a26a:	b1bd      	cbz	r5, 800a29c <__d2b+0x94>
 800a26c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a270:	4405      	add	r5, r0
 800a272:	603d      	str	r5, [r7, #0]
 800a274:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a278:	6030      	str	r0, [r6, #0]
 800a27a:	4620      	mov	r0, r4
 800a27c:	b003      	add	sp, #12
 800a27e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a282:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a286:	e7d6      	b.n	800a236 <__d2b+0x2e>
 800a288:	6161      	str	r1, [r4, #20]
 800a28a:	e7e7      	b.n	800a25c <__d2b+0x54>
 800a28c:	a801      	add	r0, sp, #4
 800a28e:	f7ff fcf1 	bl	8009c74 <__lo0bits>
 800a292:	9b01      	ldr	r3, [sp, #4]
 800a294:	6163      	str	r3, [r4, #20]
 800a296:	3020      	adds	r0, #32
 800a298:	2201      	movs	r2, #1
 800a29a:	e7e5      	b.n	800a268 <__d2b+0x60>
 800a29c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2a0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2a4:	6038      	str	r0, [r7, #0]
 800a2a6:	6918      	ldr	r0, [r3, #16]
 800a2a8:	f7ff fcc4 	bl	8009c34 <__hi0bits>
 800a2ac:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2b0:	e7e2      	b.n	800a278 <__d2b+0x70>
 800a2b2:	bf00      	nop
 800a2b4:	0800c42d 	.word	0x0800c42d
 800a2b8:	0800c49e 	.word	0x0800c49e

0800a2bc <__ratio>:
 800a2bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2c0:	4688      	mov	r8, r1
 800a2c2:	4669      	mov	r1, sp
 800a2c4:	4681      	mov	r9, r0
 800a2c6:	f7ff ff55 	bl	800a174 <__b2d>
 800a2ca:	a901      	add	r1, sp, #4
 800a2cc:	4640      	mov	r0, r8
 800a2ce:	ec55 4b10 	vmov	r4, r5, d0
 800a2d2:	f7ff ff4f 	bl	800a174 <__b2d>
 800a2d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2da:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2de:	eba3 0c02 	sub.w	ip, r3, r2
 800a2e2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a2e6:	1a9b      	subs	r3, r3, r2
 800a2e8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a2ec:	ec51 0b10 	vmov	r0, r1, d0
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	bfd6      	itet	le
 800a2f4:	460a      	movle	r2, r1
 800a2f6:	462a      	movgt	r2, r5
 800a2f8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a2fc:	468b      	mov	fp, r1
 800a2fe:	462f      	mov	r7, r5
 800a300:	bfd4      	ite	le
 800a302:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a306:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a30a:	4620      	mov	r0, r4
 800a30c:	ee10 2a10 	vmov	r2, s0
 800a310:	465b      	mov	r3, fp
 800a312:	4639      	mov	r1, r7
 800a314:	f7f6 faba 	bl	800088c <__aeabi_ddiv>
 800a318:	ec41 0b10 	vmov	d0, r0, r1
 800a31c:	b003      	add	sp, #12
 800a31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a322 <__copybits>:
 800a322:	3901      	subs	r1, #1
 800a324:	b570      	push	{r4, r5, r6, lr}
 800a326:	1149      	asrs	r1, r1, #5
 800a328:	6914      	ldr	r4, [r2, #16]
 800a32a:	3101      	adds	r1, #1
 800a32c:	f102 0314 	add.w	r3, r2, #20
 800a330:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a334:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a338:	1f05      	subs	r5, r0, #4
 800a33a:	42a3      	cmp	r3, r4
 800a33c:	d30c      	bcc.n	800a358 <__copybits+0x36>
 800a33e:	1aa3      	subs	r3, r4, r2
 800a340:	3b11      	subs	r3, #17
 800a342:	f023 0303 	bic.w	r3, r3, #3
 800a346:	3211      	adds	r2, #17
 800a348:	42a2      	cmp	r2, r4
 800a34a:	bf88      	it	hi
 800a34c:	2300      	movhi	r3, #0
 800a34e:	4418      	add	r0, r3
 800a350:	2300      	movs	r3, #0
 800a352:	4288      	cmp	r0, r1
 800a354:	d305      	bcc.n	800a362 <__copybits+0x40>
 800a356:	bd70      	pop	{r4, r5, r6, pc}
 800a358:	f853 6b04 	ldr.w	r6, [r3], #4
 800a35c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a360:	e7eb      	b.n	800a33a <__copybits+0x18>
 800a362:	f840 3b04 	str.w	r3, [r0], #4
 800a366:	e7f4      	b.n	800a352 <__copybits+0x30>

0800a368 <__any_on>:
 800a368:	f100 0214 	add.w	r2, r0, #20
 800a36c:	6900      	ldr	r0, [r0, #16]
 800a36e:	114b      	asrs	r3, r1, #5
 800a370:	4298      	cmp	r0, r3
 800a372:	b510      	push	{r4, lr}
 800a374:	db11      	blt.n	800a39a <__any_on+0x32>
 800a376:	dd0a      	ble.n	800a38e <__any_on+0x26>
 800a378:	f011 011f 	ands.w	r1, r1, #31
 800a37c:	d007      	beq.n	800a38e <__any_on+0x26>
 800a37e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a382:	fa24 f001 	lsr.w	r0, r4, r1
 800a386:	fa00 f101 	lsl.w	r1, r0, r1
 800a38a:	428c      	cmp	r4, r1
 800a38c:	d10b      	bne.n	800a3a6 <__any_on+0x3e>
 800a38e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a392:	4293      	cmp	r3, r2
 800a394:	d803      	bhi.n	800a39e <__any_on+0x36>
 800a396:	2000      	movs	r0, #0
 800a398:	bd10      	pop	{r4, pc}
 800a39a:	4603      	mov	r3, r0
 800a39c:	e7f7      	b.n	800a38e <__any_on+0x26>
 800a39e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3a2:	2900      	cmp	r1, #0
 800a3a4:	d0f5      	beq.n	800a392 <__any_on+0x2a>
 800a3a6:	2001      	movs	r0, #1
 800a3a8:	e7f6      	b.n	800a398 <__any_on+0x30>
	...

0800a3ac <_strtol_l.constprop.0>:
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3b2:	d001      	beq.n	800a3b8 <_strtol_l.constprop.0+0xc>
 800a3b4:	2b24      	cmp	r3, #36	; 0x24
 800a3b6:	d906      	bls.n	800a3c6 <_strtol_l.constprop.0+0x1a>
 800a3b8:	f7fe f818 	bl	80083ec <__errno>
 800a3bc:	2316      	movs	r3, #22
 800a3be:	6003      	str	r3, [r0, #0]
 800a3c0:	2000      	movs	r0, #0
 800a3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3c6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a4ac <_strtol_l.constprop.0+0x100>
 800a3ca:	460d      	mov	r5, r1
 800a3cc:	462e      	mov	r6, r5
 800a3ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3d2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a3d6:	f017 0708 	ands.w	r7, r7, #8
 800a3da:	d1f7      	bne.n	800a3cc <_strtol_l.constprop.0+0x20>
 800a3dc:	2c2d      	cmp	r4, #45	; 0x2d
 800a3de:	d132      	bne.n	800a446 <_strtol_l.constprop.0+0x9a>
 800a3e0:	782c      	ldrb	r4, [r5, #0]
 800a3e2:	2701      	movs	r7, #1
 800a3e4:	1cb5      	adds	r5, r6, #2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d05b      	beq.n	800a4a2 <_strtol_l.constprop.0+0xf6>
 800a3ea:	2b10      	cmp	r3, #16
 800a3ec:	d109      	bne.n	800a402 <_strtol_l.constprop.0+0x56>
 800a3ee:	2c30      	cmp	r4, #48	; 0x30
 800a3f0:	d107      	bne.n	800a402 <_strtol_l.constprop.0+0x56>
 800a3f2:	782c      	ldrb	r4, [r5, #0]
 800a3f4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a3f8:	2c58      	cmp	r4, #88	; 0x58
 800a3fa:	d14d      	bne.n	800a498 <_strtol_l.constprop.0+0xec>
 800a3fc:	786c      	ldrb	r4, [r5, #1]
 800a3fe:	2310      	movs	r3, #16
 800a400:	3502      	adds	r5, #2
 800a402:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a406:	f108 38ff 	add.w	r8, r8, #4294967295
 800a40a:	f04f 0e00 	mov.w	lr, #0
 800a40e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a412:	4676      	mov	r6, lr
 800a414:	fb03 8a19 	mls	sl, r3, r9, r8
 800a418:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a41c:	f1bc 0f09 	cmp.w	ip, #9
 800a420:	d816      	bhi.n	800a450 <_strtol_l.constprop.0+0xa4>
 800a422:	4664      	mov	r4, ip
 800a424:	42a3      	cmp	r3, r4
 800a426:	dd24      	ble.n	800a472 <_strtol_l.constprop.0+0xc6>
 800a428:	f1be 3fff 	cmp.w	lr, #4294967295
 800a42c:	d008      	beq.n	800a440 <_strtol_l.constprop.0+0x94>
 800a42e:	45b1      	cmp	r9, r6
 800a430:	d31c      	bcc.n	800a46c <_strtol_l.constprop.0+0xc0>
 800a432:	d101      	bne.n	800a438 <_strtol_l.constprop.0+0x8c>
 800a434:	45a2      	cmp	sl, r4
 800a436:	db19      	blt.n	800a46c <_strtol_l.constprop.0+0xc0>
 800a438:	fb06 4603 	mla	r6, r6, r3, r4
 800a43c:	f04f 0e01 	mov.w	lr, #1
 800a440:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a444:	e7e8      	b.n	800a418 <_strtol_l.constprop.0+0x6c>
 800a446:	2c2b      	cmp	r4, #43	; 0x2b
 800a448:	bf04      	itt	eq
 800a44a:	782c      	ldrbeq	r4, [r5, #0]
 800a44c:	1cb5      	addeq	r5, r6, #2
 800a44e:	e7ca      	b.n	800a3e6 <_strtol_l.constprop.0+0x3a>
 800a450:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a454:	f1bc 0f19 	cmp.w	ip, #25
 800a458:	d801      	bhi.n	800a45e <_strtol_l.constprop.0+0xb2>
 800a45a:	3c37      	subs	r4, #55	; 0x37
 800a45c:	e7e2      	b.n	800a424 <_strtol_l.constprop.0+0x78>
 800a45e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a462:	f1bc 0f19 	cmp.w	ip, #25
 800a466:	d804      	bhi.n	800a472 <_strtol_l.constprop.0+0xc6>
 800a468:	3c57      	subs	r4, #87	; 0x57
 800a46a:	e7db      	b.n	800a424 <_strtol_l.constprop.0+0x78>
 800a46c:	f04f 3eff 	mov.w	lr, #4294967295
 800a470:	e7e6      	b.n	800a440 <_strtol_l.constprop.0+0x94>
 800a472:	f1be 3fff 	cmp.w	lr, #4294967295
 800a476:	d105      	bne.n	800a484 <_strtol_l.constprop.0+0xd8>
 800a478:	2322      	movs	r3, #34	; 0x22
 800a47a:	6003      	str	r3, [r0, #0]
 800a47c:	4646      	mov	r6, r8
 800a47e:	b942      	cbnz	r2, 800a492 <_strtol_l.constprop.0+0xe6>
 800a480:	4630      	mov	r0, r6
 800a482:	e79e      	b.n	800a3c2 <_strtol_l.constprop.0+0x16>
 800a484:	b107      	cbz	r7, 800a488 <_strtol_l.constprop.0+0xdc>
 800a486:	4276      	negs	r6, r6
 800a488:	2a00      	cmp	r2, #0
 800a48a:	d0f9      	beq.n	800a480 <_strtol_l.constprop.0+0xd4>
 800a48c:	f1be 0f00 	cmp.w	lr, #0
 800a490:	d000      	beq.n	800a494 <_strtol_l.constprop.0+0xe8>
 800a492:	1e69      	subs	r1, r5, #1
 800a494:	6011      	str	r1, [r2, #0]
 800a496:	e7f3      	b.n	800a480 <_strtol_l.constprop.0+0xd4>
 800a498:	2430      	movs	r4, #48	; 0x30
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1b1      	bne.n	800a402 <_strtol_l.constprop.0+0x56>
 800a49e:	2308      	movs	r3, #8
 800a4a0:	e7af      	b.n	800a402 <_strtol_l.constprop.0+0x56>
 800a4a2:	2c30      	cmp	r4, #48	; 0x30
 800a4a4:	d0a5      	beq.n	800a3f2 <_strtol_l.constprop.0+0x46>
 800a4a6:	230a      	movs	r3, #10
 800a4a8:	e7ab      	b.n	800a402 <_strtol_l.constprop.0+0x56>
 800a4aa:	bf00      	nop
 800a4ac:	0800c5f5 	.word	0x0800c5f5

0800a4b0 <_strtol_r>:
 800a4b0:	f7ff bf7c 	b.w	800a3ac <_strtol_l.constprop.0>

0800a4b4 <__ascii_wctomb>:
 800a4b4:	b149      	cbz	r1, 800a4ca <__ascii_wctomb+0x16>
 800a4b6:	2aff      	cmp	r2, #255	; 0xff
 800a4b8:	bf85      	ittet	hi
 800a4ba:	238a      	movhi	r3, #138	; 0x8a
 800a4bc:	6003      	strhi	r3, [r0, #0]
 800a4be:	700a      	strbls	r2, [r1, #0]
 800a4c0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4c4:	bf98      	it	ls
 800a4c6:	2001      	movls	r0, #1
 800a4c8:	4770      	bx	lr
 800a4ca:	4608      	mov	r0, r1
 800a4cc:	4770      	bx	lr

0800a4ce <__ssputs_r>:
 800a4ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4d2:	688e      	ldr	r6, [r1, #8]
 800a4d4:	461f      	mov	r7, r3
 800a4d6:	42be      	cmp	r6, r7
 800a4d8:	680b      	ldr	r3, [r1, #0]
 800a4da:	4682      	mov	sl, r0
 800a4dc:	460c      	mov	r4, r1
 800a4de:	4690      	mov	r8, r2
 800a4e0:	d82c      	bhi.n	800a53c <__ssputs_r+0x6e>
 800a4e2:	898a      	ldrh	r2, [r1, #12]
 800a4e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a4e8:	d026      	beq.n	800a538 <__ssputs_r+0x6a>
 800a4ea:	6965      	ldr	r5, [r4, #20]
 800a4ec:	6909      	ldr	r1, [r1, #16]
 800a4ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4f2:	eba3 0901 	sub.w	r9, r3, r1
 800a4f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4fa:	1c7b      	adds	r3, r7, #1
 800a4fc:	444b      	add	r3, r9
 800a4fe:	106d      	asrs	r5, r5, #1
 800a500:	429d      	cmp	r5, r3
 800a502:	bf38      	it	cc
 800a504:	461d      	movcc	r5, r3
 800a506:	0553      	lsls	r3, r2, #21
 800a508:	d527      	bpl.n	800a55a <__ssputs_r+0x8c>
 800a50a:	4629      	mov	r1, r5
 800a50c:	f7ff fa02 	bl	8009914 <_malloc_r>
 800a510:	4606      	mov	r6, r0
 800a512:	b360      	cbz	r0, 800a56e <__ssputs_r+0xa0>
 800a514:	6921      	ldr	r1, [r4, #16]
 800a516:	464a      	mov	r2, r9
 800a518:	f7fd ff95 	bl	8008446 <memcpy>
 800a51c:	89a3      	ldrh	r3, [r4, #12]
 800a51e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a522:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a526:	81a3      	strh	r3, [r4, #12]
 800a528:	6126      	str	r6, [r4, #16]
 800a52a:	6165      	str	r5, [r4, #20]
 800a52c:	444e      	add	r6, r9
 800a52e:	eba5 0509 	sub.w	r5, r5, r9
 800a532:	6026      	str	r6, [r4, #0]
 800a534:	60a5      	str	r5, [r4, #8]
 800a536:	463e      	mov	r6, r7
 800a538:	42be      	cmp	r6, r7
 800a53a:	d900      	bls.n	800a53e <__ssputs_r+0x70>
 800a53c:	463e      	mov	r6, r7
 800a53e:	6820      	ldr	r0, [r4, #0]
 800a540:	4632      	mov	r2, r6
 800a542:	4641      	mov	r1, r8
 800a544:	f000 fba4 	bl	800ac90 <memmove>
 800a548:	68a3      	ldr	r3, [r4, #8]
 800a54a:	1b9b      	subs	r3, r3, r6
 800a54c:	60a3      	str	r3, [r4, #8]
 800a54e:	6823      	ldr	r3, [r4, #0]
 800a550:	4433      	add	r3, r6
 800a552:	6023      	str	r3, [r4, #0]
 800a554:	2000      	movs	r0, #0
 800a556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a55a:	462a      	mov	r2, r5
 800a55c:	f000 fbf6 	bl	800ad4c <_realloc_r>
 800a560:	4606      	mov	r6, r0
 800a562:	2800      	cmp	r0, #0
 800a564:	d1e0      	bne.n	800a528 <__ssputs_r+0x5a>
 800a566:	6921      	ldr	r1, [r4, #16]
 800a568:	4650      	mov	r0, sl
 800a56a:	f7fe fe07 	bl	800917c <_free_r>
 800a56e:	230c      	movs	r3, #12
 800a570:	f8ca 3000 	str.w	r3, [sl]
 800a574:	89a3      	ldrh	r3, [r4, #12]
 800a576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a57a:	81a3      	strh	r3, [r4, #12]
 800a57c:	f04f 30ff 	mov.w	r0, #4294967295
 800a580:	e7e9      	b.n	800a556 <__ssputs_r+0x88>
	...

0800a584 <_svfiprintf_r>:
 800a584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a588:	4698      	mov	r8, r3
 800a58a:	898b      	ldrh	r3, [r1, #12]
 800a58c:	061b      	lsls	r3, r3, #24
 800a58e:	b09d      	sub	sp, #116	; 0x74
 800a590:	4607      	mov	r7, r0
 800a592:	460d      	mov	r5, r1
 800a594:	4614      	mov	r4, r2
 800a596:	d50e      	bpl.n	800a5b6 <_svfiprintf_r+0x32>
 800a598:	690b      	ldr	r3, [r1, #16]
 800a59a:	b963      	cbnz	r3, 800a5b6 <_svfiprintf_r+0x32>
 800a59c:	2140      	movs	r1, #64	; 0x40
 800a59e:	f7ff f9b9 	bl	8009914 <_malloc_r>
 800a5a2:	6028      	str	r0, [r5, #0]
 800a5a4:	6128      	str	r0, [r5, #16]
 800a5a6:	b920      	cbnz	r0, 800a5b2 <_svfiprintf_r+0x2e>
 800a5a8:	230c      	movs	r3, #12
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	e0d0      	b.n	800a754 <_svfiprintf_r+0x1d0>
 800a5b2:	2340      	movs	r3, #64	; 0x40
 800a5b4:	616b      	str	r3, [r5, #20]
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ba:	2320      	movs	r3, #32
 800a5bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5c4:	2330      	movs	r3, #48	; 0x30
 800a5c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a76c <_svfiprintf_r+0x1e8>
 800a5ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5ce:	f04f 0901 	mov.w	r9, #1
 800a5d2:	4623      	mov	r3, r4
 800a5d4:	469a      	mov	sl, r3
 800a5d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5da:	b10a      	cbz	r2, 800a5e0 <_svfiprintf_r+0x5c>
 800a5dc:	2a25      	cmp	r2, #37	; 0x25
 800a5de:	d1f9      	bne.n	800a5d4 <_svfiprintf_r+0x50>
 800a5e0:	ebba 0b04 	subs.w	fp, sl, r4
 800a5e4:	d00b      	beq.n	800a5fe <_svfiprintf_r+0x7a>
 800a5e6:	465b      	mov	r3, fp
 800a5e8:	4622      	mov	r2, r4
 800a5ea:	4629      	mov	r1, r5
 800a5ec:	4638      	mov	r0, r7
 800a5ee:	f7ff ff6e 	bl	800a4ce <__ssputs_r>
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	f000 80a9 	beq.w	800a74a <_svfiprintf_r+0x1c6>
 800a5f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5fa:	445a      	add	r2, fp
 800a5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5fe:	f89a 3000 	ldrb.w	r3, [sl]
 800a602:	2b00      	cmp	r3, #0
 800a604:	f000 80a1 	beq.w	800a74a <_svfiprintf_r+0x1c6>
 800a608:	2300      	movs	r3, #0
 800a60a:	f04f 32ff 	mov.w	r2, #4294967295
 800a60e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a612:	f10a 0a01 	add.w	sl, sl, #1
 800a616:	9304      	str	r3, [sp, #16]
 800a618:	9307      	str	r3, [sp, #28]
 800a61a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a61e:	931a      	str	r3, [sp, #104]	; 0x68
 800a620:	4654      	mov	r4, sl
 800a622:	2205      	movs	r2, #5
 800a624:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a628:	4850      	ldr	r0, [pc, #320]	; (800a76c <_svfiprintf_r+0x1e8>)
 800a62a:	f7f5 fdf1 	bl	8000210 <memchr>
 800a62e:	9a04      	ldr	r2, [sp, #16]
 800a630:	b9d8      	cbnz	r0, 800a66a <_svfiprintf_r+0xe6>
 800a632:	06d0      	lsls	r0, r2, #27
 800a634:	bf44      	itt	mi
 800a636:	2320      	movmi	r3, #32
 800a638:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a63c:	0711      	lsls	r1, r2, #28
 800a63e:	bf44      	itt	mi
 800a640:	232b      	movmi	r3, #43	; 0x2b
 800a642:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a646:	f89a 3000 	ldrb.w	r3, [sl]
 800a64a:	2b2a      	cmp	r3, #42	; 0x2a
 800a64c:	d015      	beq.n	800a67a <_svfiprintf_r+0xf6>
 800a64e:	9a07      	ldr	r2, [sp, #28]
 800a650:	4654      	mov	r4, sl
 800a652:	2000      	movs	r0, #0
 800a654:	f04f 0c0a 	mov.w	ip, #10
 800a658:	4621      	mov	r1, r4
 800a65a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a65e:	3b30      	subs	r3, #48	; 0x30
 800a660:	2b09      	cmp	r3, #9
 800a662:	d94d      	bls.n	800a700 <_svfiprintf_r+0x17c>
 800a664:	b1b0      	cbz	r0, 800a694 <_svfiprintf_r+0x110>
 800a666:	9207      	str	r2, [sp, #28]
 800a668:	e014      	b.n	800a694 <_svfiprintf_r+0x110>
 800a66a:	eba0 0308 	sub.w	r3, r0, r8
 800a66e:	fa09 f303 	lsl.w	r3, r9, r3
 800a672:	4313      	orrs	r3, r2
 800a674:	9304      	str	r3, [sp, #16]
 800a676:	46a2      	mov	sl, r4
 800a678:	e7d2      	b.n	800a620 <_svfiprintf_r+0x9c>
 800a67a:	9b03      	ldr	r3, [sp, #12]
 800a67c:	1d19      	adds	r1, r3, #4
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	9103      	str	r1, [sp, #12]
 800a682:	2b00      	cmp	r3, #0
 800a684:	bfbb      	ittet	lt
 800a686:	425b      	neglt	r3, r3
 800a688:	f042 0202 	orrlt.w	r2, r2, #2
 800a68c:	9307      	strge	r3, [sp, #28]
 800a68e:	9307      	strlt	r3, [sp, #28]
 800a690:	bfb8      	it	lt
 800a692:	9204      	strlt	r2, [sp, #16]
 800a694:	7823      	ldrb	r3, [r4, #0]
 800a696:	2b2e      	cmp	r3, #46	; 0x2e
 800a698:	d10c      	bne.n	800a6b4 <_svfiprintf_r+0x130>
 800a69a:	7863      	ldrb	r3, [r4, #1]
 800a69c:	2b2a      	cmp	r3, #42	; 0x2a
 800a69e:	d134      	bne.n	800a70a <_svfiprintf_r+0x186>
 800a6a0:	9b03      	ldr	r3, [sp, #12]
 800a6a2:	1d1a      	adds	r2, r3, #4
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	9203      	str	r2, [sp, #12]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	bfb8      	it	lt
 800a6ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6b0:	3402      	adds	r4, #2
 800a6b2:	9305      	str	r3, [sp, #20]
 800a6b4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a77c <_svfiprintf_r+0x1f8>
 800a6b8:	7821      	ldrb	r1, [r4, #0]
 800a6ba:	2203      	movs	r2, #3
 800a6bc:	4650      	mov	r0, sl
 800a6be:	f7f5 fda7 	bl	8000210 <memchr>
 800a6c2:	b138      	cbz	r0, 800a6d4 <_svfiprintf_r+0x150>
 800a6c4:	9b04      	ldr	r3, [sp, #16]
 800a6c6:	eba0 000a 	sub.w	r0, r0, sl
 800a6ca:	2240      	movs	r2, #64	; 0x40
 800a6cc:	4082      	lsls	r2, r0
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	3401      	adds	r4, #1
 800a6d2:	9304      	str	r3, [sp, #16]
 800a6d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d8:	4825      	ldr	r0, [pc, #148]	; (800a770 <_svfiprintf_r+0x1ec>)
 800a6da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a6de:	2206      	movs	r2, #6
 800a6e0:	f7f5 fd96 	bl	8000210 <memchr>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d038      	beq.n	800a75a <_svfiprintf_r+0x1d6>
 800a6e8:	4b22      	ldr	r3, [pc, #136]	; (800a774 <_svfiprintf_r+0x1f0>)
 800a6ea:	bb1b      	cbnz	r3, 800a734 <_svfiprintf_r+0x1b0>
 800a6ec:	9b03      	ldr	r3, [sp, #12]
 800a6ee:	3307      	adds	r3, #7
 800a6f0:	f023 0307 	bic.w	r3, r3, #7
 800a6f4:	3308      	adds	r3, #8
 800a6f6:	9303      	str	r3, [sp, #12]
 800a6f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6fa:	4433      	add	r3, r6
 800a6fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a6fe:	e768      	b.n	800a5d2 <_svfiprintf_r+0x4e>
 800a700:	fb0c 3202 	mla	r2, ip, r2, r3
 800a704:	460c      	mov	r4, r1
 800a706:	2001      	movs	r0, #1
 800a708:	e7a6      	b.n	800a658 <_svfiprintf_r+0xd4>
 800a70a:	2300      	movs	r3, #0
 800a70c:	3401      	adds	r4, #1
 800a70e:	9305      	str	r3, [sp, #20]
 800a710:	4619      	mov	r1, r3
 800a712:	f04f 0c0a 	mov.w	ip, #10
 800a716:	4620      	mov	r0, r4
 800a718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a71c:	3a30      	subs	r2, #48	; 0x30
 800a71e:	2a09      	cmp	r2, #9
 800a720:	d903      	bls.n	800a72a <_svfiprintf_r+0x1a6>
 800a722:	2b00      	cmp	r3, #0
 800a724:	d0c6      	beq.n	800a6b4 <_svfiprintf_r+0x130>
 800a726:	9105      	str	r1, [sp, #20]
 800a728:	e7c4      	b.n	800a6b4 <_svfiprintf_r+0x130>
 800a72a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a72e:	4604      	mov	r4, r0
 800a730:	2301      	movs	r3, #1
 800a732:	e7f0      	b.n	800a716 <_svfiprintf_r+0x192>
 800a734:	ab03      	add	r3, sp, #12
 800a736:	9300      	str	r3, [sp, #0]
 800a738:	462a      	mov	r2, r5
 800a73a:	4b0f      	ldr	r3, [pc, #60]	; (800a778 <_svfiprintf_r+0x1f4>)
 800a73c:	a904      	add	r1, sp, #16
 800a73e:	4638      	mov	r0, r7
 800a740:	f7fc fed0 	bl	80074e4 <_printf_float>
 800a744:	1c42      	adds	r2, r0, #1
 800a746:	4606      	mov	r6, r0
 800a748:	d1d6      	bne.n	800a6f8 <_svfiprintf_r+0x174>
 800a74a:	89ab      	ldrh	r3, [r5, #12]
 800a74c:	065b      	lsls	r3, r3, #25
 800a74e:	f53f af2d 	bmi.w	800a5ac <_svfiprintf_r+0x28>
 800a752:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a754:	b01d      	add	sp, #116	; 0x74
 800a756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75a:	ab03      	add	r3, sp, #12
 800a75c:	9300      	str	r3, [sp, #0]
 800a75e:	462a      	mov	r2, r5
 800a760:	4b05      	ldr	r3, [pc, #20]	; (800a778 <_svfiprintf_r+0x1f4>)
 800a762:	a904      	add	r1, sp, #16
 800a764:	4638      	mov	r0, r7
 800a766:	f7fd f961 	bl	8007a2c <_printf_i>
 800a76a:	e7eb      	b.n	800a744 <_svfiprintf_r+0x1c0>
 800a76c:	0800c6f5 	.word	0x0800c6f5
 800a770:	0800c6ff 	.word	0x0800c6ff
 800a774:	080074e5 	.word	0x080074e5
 800a778:	0800a4cf 	.word	0x0800a4cf
 800a77c:	0800c6fb 	.word	0x0800c6fb

0800a780 <__sfputc_r>:
 800a780:	6893      	ldr	r3, [r2, #8]
 800a782:	3b01      	subs	r3, #1
 800a784:	2b00      	cmp	r3, #0
 800a786:	b410      	push	{r4}
 800a788:	6093      	str	r3, [r2, #8]
 800a78a:	da08      	bge.n	800a79e <__sfputc_r+0x1e>
 800a78c:	6994      	ldr	r4, [r2, #24]
 800a78e:	42a3      	cmp	r3, r4
 800a790:	db01      	blt.n	800a796 <__sfputc_r+0x16>
 800a792:	290a      	cmp	r1, #10
 800a794:	d103      	bne.n	800a79e <__sfputc_r+0x1e>
 800a796:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a79a:	f000 b9e3 	b.w	800ab64 <__swbuf_r>
 800a79e:	6813      	ldr	r3, [r2, #0]
 800a7a0:	1c58      	adds	r0, r3, #1
 800a7a2:	6010      	str	r0, [r2, #0]
 800a7a4:	7019      	strb	r1, [r3, #0]
 800a7a6:	4608      	mov	r0, r1
 800a7a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ac:	4770      	bx	lr

0800a7ae <__sfputs_r>:
 800a7ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7b0:	4606      	mov	r6, r0
 800a7b2:	460f      	mov	r7, r1
 800a7b4:	4614      	mov	r4, r2
 800a7b6:	18d5      	adds	r5, r2, r3
 800a7b8:	42ac      	cmp	r4, r5
 800a7ba:	d101      	bne.n	800a7c0 <__sfputs_r+0x12>
 800a7bc:	2000      	movs	r0, #0
 800a7be:	e007      	b.n	800a7d0 <__sfputs_r+0x22>
 800a7c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7c4:	463a      	mov	r2, r7
 800a7c6:	4630      	mov	r0, r6
 800a7c8:	f7ff ffda 	bl	800a780 <__sfputc_r>
 800a7cc:	1c43      	adds	r3, r0, #1
 800a7ce:	d1f3      	bne.n	800a7b8 <__sfputs_r+0xa>
 800a7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7d4 <_vfiprintf_r>:
 800a7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d8:	460d      	mov	r5, r1
 800a7da:	b09d      	sub	sp, #116	; 0x74
 800a7dc:	4614      	mov	r4, r2
 800a7de:	4698      	mov	r8, r3
 800a7e0:	4606      	mov	r6, r0
 800a7e2:	b118      	cbz	r0, 800a7ec <_vfiprintf_r+0x18>
 800a7e4:	6a03      	ldr	r3, [r0, #32]
 800a7e6:	b90b      	cbnz	r3, 800a7ec <_vfiprintf_r+0x18>
 800a7e8:	f7fd fcde 	bl	80081a8 <__sinit>
 800a7ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ee:	07d9      	lsls	r1, r3, #31
 800a7f0:	d405      	bmi.n	800a7fe <_vfiprintf_r+0x2a>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	059a      	lsls	r2, r3, #22
 800a7f6:	d402      	bmi.n	800a7fe <_vfiprintf_r+0x2a>
 800a7f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7fa:	f7fd fe22 	bl	8008442 <__retarget_lock_acquire_recursive>
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	071b      	lsls	r3, r3, #28
 800a802:	d501      	bpl.n	800a808 <_vfiprintf_r+0x34>
 800a804:	692b      	ldr	r3, [r5, #16]
 800a806:	b99b      	cbnz	r3, 800a830 <_vfiprintf_r+0x5c>
 800a808:	4629      	mov	r1, r5
 800a80a:	4630      	mov	r0, r6
 800a80c:	f000 f9e8 	bl	800abe0 <__swsetup_r>
 800a810:	b170      	cbz	r0, 800a830 <_vfiprintf_r+0x5c>
 800a812:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a814:	07dc      	lsls	r4, r3, #31
 800a816:	d504      	bpl.n	800a822 <_vfiprintf_r+0x4e>
 800a818:	f04f 30ff 	mov.w	r0, #4294967295
 800a81c:	b01d      	add	sp, #116	; 0x74
 800a81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a822:	89ab      	ldrh	r3, [r5, #12]
 800a824:	0598      	lsls	r0, r3, #22
 800a826:	d4f7      	bmi.n	800a818 <_vfiprintf_r+0x44>
 800a828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a82a:	f7fd fe0b 	bl	8008444 <__retarget_lock_release_recursive>
 800a82e:	e7f3      	b.n	800a818 <_vfiprintf_r+0x44>
 800a830:	2300      	movs	r3, #0
 800a832:	9309      	str	r3, [sp, #36]	; 0x24
 800a834:	2320      	movs	r3, #32
 800a836:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a83a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a83e:	2330      	movs	r3, #48	; 0x30
 800a840:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a9f4 <_vfiprintf_r+0x220>
 800a844:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a848:	f04f 0901 	mov.w	r9, #1
 800a84c:	4623      	mov	r3, r4
 800a84e:	469a      	mov	sl, r3
 800a850:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a854:	b10a      	cbz	r2, 800a85a <_vfiprintf_r+0x86>
 800a856:	2a25      	cmp	r2, #37	; 0x25
 800a858:	d1f9      	bne.n	800a84e <_vfiprintf_r+0x7a>
 800a85a:	ebba 0b04 	subs.w	fp, sl, r4
 800a85e:	d00b      	beq.n	800a878 <_vfiprintf_r+0xa4>
 800a860:	465b      	mov	r3, fp
 800a862:	4622      	mov	r2, r4
 800a864:	4629      	mov	r1, r5
 800a866:	4630      	mov	r0, r6
 800a868:	f7ff ffa1 	bl	800a7ae <__sfputs_r>
 800a86c:	3001      	adds	r0, #1
 800a86e:	f000 80a9 	beq.w	800a9c4 <_vfiprintf_r+0x1f0>
 800a872:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a874:	445a      	add	r2, fp
 800a876:	9209      	str	r2, [sp, #36]	; 0x24
 800a878:	f89a 3000 	ldrb.w	r3, [sl]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	f000 80a1 	beq.w	800a9c4 <_vfiprintf_r+0x1f0>
 800a882:	2300      	movs	r3, #0
 800a884:	f04f 32ff 	mov.w	r2, #4294967295
 800a888:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a88c:	f10a 0a01 	add.w	sl, sl, #1
 800a890:	9304      	str	r3, [sp, #16]
 800a892:	9307      	str	r3, [sp, #28]
 800a894:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a898:	931a      	str	r3, [sp, #104]	; 0x68
 800a89a:	4654      	mov	r4, sl
 800a89c:	2205      	movs	r2, #5
 800a89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a2:	4854      	ldr	r0, [pc, #336]	; (800a9f4 <_vfiprintf_r+0x220>)
 800a8a4:	f7f5 fcb4 	bl	8000210 <memchr>
 800a8a8:	9a04      	ldr	r2, [sp, #16]
 800a8aa:	b9d8      	cbnz	r0, 800a8e4 <_vfiprintf_r+0x110>
 800a8ac:	06d1      	lsls	r1, r2, #27
 800a8ae:	bf44      	itt	mi
 800a8b0:	2320      	movmi	r3, #32
 800a8b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8b6:	0713      	lsls	r3, r2, #28
 800a8b8:	bf44      	itt	mi
 800a8ba:	232b      	movmi	r3, #43	; 0x2b
 800a8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8c0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8c6:	d015      	beq.n	800a8f4 <_vfiprintf_r+0x120>
 800a8c8:	9a07      	ldr	r2, [sp, #28]
 800a8ca:	4654      	mov	r4, sl
 800a8cc:	2000      	movs	r0, #0
 800a8ce:	f04f 0c0a 	mov.w	ip, #10
 800a8d2:	4621      	mov	r1, r4
 800a8d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8d8:	3b30      	subs	r3, #48	; 0x30
 800a8da:	2b09      	cmp	r3, #9
 800a8dc:	d94d      	bls.n	800a97a <_vfiprintf_r+0x1a6>
 800a8de:	b1b0      	cbz	r0, 800a90e <_vfiprintf_r+0x13a>
 800a8e0:	9207      	str	r2, [sp, #28]
 800a8e2:	e014      	b.n	800a90e <_vfiprintf_r+0x13a>
 800a8e4:	eba0 0308 	sub.w	r3, r0, r8
 800a8e8:	fa09 f303 	lsl.w	r3, r9, r3
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	9304      	str	r3, [sp, #16]
 800a8f0:	46a2      	mov	sl, r4
 800a8f2:	e7d2      	b.n	800a89a <_vfiprintf_r+0xc6>
 800a8f4:	9b03      	ldr	r3, [sp, #12]
 800a8f6:	1d19      	adds	r1, r3, #4
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	9103      	str	r1, [sp, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	bfbb      	ittet	lt
 800a900:	425b      	neglt	r3, r3
 800a902:	f042 0202 	orrlt.w	r2, r2, #2
 800a906:	9307      	strge	r3, [sp, #28]
 800a908:	9307      	strlt	r3, [sp, #28]
 800a90a:	bfb8      	it	lt
 800a90c:	9204      	strlt	r2, [sp, #16]
 800a90e:	7823      	ldrb	r3, [r4, #0]
 800a910:	2b2e      	cmp	r3, #46	; 0x2e
 800a912:	d10c      	bne.n	800a92e <_vfiprintf_r+0x15a>
 800a914:	7863      	ldrb	r3, [r4, #1]
 800a916:	2b2a      	cmp	r3, #42	; 0x2a
 800a918:	d134      	bne.n	800a984 <_vfiprintf_r+0x1b0>
 800a91a:	9b03      	ldr	r3, [sp, #12]
 800a91c:	1d1a      	adds	r2, r3, #4
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	9203      	str	r2, [sp, #12]
 800a922:	2b00      	cmp	r3, #0
 800a924:	bfb8      	it	lt
 800a926:	f04f 33ff 	movlt.w	r3, #4294967295
 800a92a:	3402      	adds	r4, #2
 800a92c:	9305      	str	r3, [sp, #20]
 800a92e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aa04 <_vfiprintf_r+0x230>
 800a932:	7821      	ldrb	r1, [r4, #0]
 800a934:	2203      	movs	r2, #3
 800a936:	4650      	mov	r0, sl
 800a938:	f7f5 fc6a 	bl	8000210 <memchr>
 800a93c:	b138      	cbz	r0, 800a94e <_vfiprintf_r+0x17a>
 800a93e:	9b04      	ldr	r3, [sp, #16]
 800a940:	eba0 000a 	sub.w	r0, r0, sl
 800a944:	2240      	movs	r2, #64	; 0x40
 800a946:	4082      	lsls	r2, r0
 800a948:	4313      	orrs	r3, r2
 800a94a:	3401      	adds	r4, #1
 800a94c:	9304      	str	r3, [sp, #16]
 800a94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a952:	4829      	ldr	r0, [pc, #164]	; (800a9f8 <_vfiprintf_r+0x224>)
 800a954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a958:	2206      	movs	r2, #6
 800a95a:	f7f5 fc59 	bl	8000210 <memchr>
 800a95e:	2800      	cmp	r0, #0
 800a960:	d03f      	beq.n	800a9e2 <_vfiprintf_r+0x20e>
 800a962:	4b26      	ldr	r3, [pc, #152]	; (800a9fc <_vfiprintf_r+0x228>)
 800a964:	bb1b      	cbnz	r3, 800a9ae <_vfiprintf_r+0x1da>
 800a966:	9b03      	ldr	r3, [sp, #12]
 800a968:	3307      	adds	r3, #7
 800a96a:	f023 0307 	bic.w	r3, r3, #7
 800a96e:	3308      	adds	r3, #8
 800a970:	9303      	str	r3, [sp, #12]
 800a972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a974:	443b      	add	r3, r7
 800a976:	9309      	str	r3, [sp, #36]	; 0x24
 800a978:	e768      	b.n	800a84c <_vfiprintf_r+0x78>
 800a97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a97e:	460c      	mov	r4, r1
 800a980:	2001      	movs	r0, #1
 800a982:	e7a6      	b.n	800a8d2 <_vfiprintf_r+0xfe>
 800a984:	2300      	movs	r3, #0
 800a986:	3401      	adds	r4, #1
 800a988:	9305      	str	r3, [sp, #20]
 800a98a:	4619      	mov	r1, r3
 800a98c:	f04f 0c0a 	mov.w	ip, #10
 800a990:	4620      	mov	r0, r4
 800a992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a996:	3a30      	subs	r2, #48	; 0x30
 800a998:	2a09      	cmp	r2, #9
 800a99a:	d903      	bls.n	800a9a4 <_vfiprintf_r+0x1d0>
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d0c6      	beq.n	800a92e <_vfiprintf_r+0x15a>
 800a9a0:	9105      	str	r1, [sp, #20]
 800a9a2:	e7c4      	b.n	800a92e <_vfiprintf_r+0x15a>
 800a9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9a8:	4604      	mov	r4, r0
 800a9aa:	2301      	movs	r3, #1
 800a9ac:	e7f0      	b.n	800a990 <_vfiprintf_r+0x1bc>
 800a9ae:	ab03      	add	r3, sp, #12
 800a9b0:	9300      	str	r3, [sp, #0]
 800a9b2:	462a      	mov	r2, r5
 800a9b4:	4b12      	ldr	r3, [pc, #72]	; (800aa00 <_vfiprintf_r+0x22c>)
 800a9b6:	a904      	add	r1, sp, #16
 800a9b8:	4630      	mov	r0, r6
 800a9ba:	f7fc fd93 	bl	80074e4 <_printf_float>
 800a9be:	4607      	mov	r7, r0
 800a9c0:	1c78      	adds	r0, r7, #1
 800a9c2:	d1d6      	bne.n	800a972 <_vfiprintf_r+0x19e>
 800a9c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9c6:	07d9      	lsls	r1, r3, #31
 800a9c8:	d405      	bmi.n	800a9d6 <_vfiprintf_r+0x202>
 800a9ca:	89ab      	ldrh	r3, [r5, #12]
 800a9cc:	059a      	lsls	r2, r3, #22
 800a9ce:	d402      	bmi.n	800a9d6 <_vfiprintf_r+0x202>
 800a9d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9d2:	f7fd fd37 	bl	8008444 <__retarget_lock_release_recursive>
 800a9d6:	89ab      	ldrh	r3, [r5, #12]
 800a9d8:	065b      	lsls	r3, r3, #25
 800a9da:	f53f af1d 	bmi.w	800a818 <_vfiprintf_r+0x44>
 800a9de:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9e0:	e71c      	b.n	800a81c <_vfiprintf_r+0x48>
 800a9e2:	ab03      	add	r3, sp, #12
 800a9e4:	9300      	str	r3, [sp, #0]
 800a9e6:	462a      	mov	r2, r5
 800a9e8:	4b05      	ldr	r3, [pc, #20]	; (800aa00 <_vfiprintf_r+0x22c>)
 800a9ea:	a904      	add	r1, sp, #16
 800a9ec:	4630      	mov	r0, r6
 800a9ee:	f7fd f81d 	bl	8007a2c <_printf_i>
 800a9f2:	e7e4      	b.n	800a9be <_vfiprintf_r+0x1ea>
 800a9f4:	0800c6f5 	.word	0x0800c6f5
 800a9f8:	0800c6ff 	.word	0x0800c6ff
 800a9fc:	080074e5 	.word	0x080074e5
 800aa00:	0800a7af 	.word	0x0800a7af
 800aa04:	0800c6fb 	.word	0x0800c6fb

0800aa08 <__sflush_r>:
 800aa08:	898a      	ldrh	r2, [r1, #12]
 800aa0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0e:	4605      	mov	r5, r0
 800aa10:	0710      	lsls	r0, r2, #28
 800aa12:	460c      	mov	r4, r1
 800aa14:	d458      	bmi.n	800aac8 <__sflush_r+0xc0>
 800aa16:	684b      	ldr	r3, [r1, #4]
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	dc05      	bgt.n	800aa28 <__sflush_r+0x20>
 800aa1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	dc02      	bgt.n	800aa28 <__sflush_r+0x20>
 800aa22:	2000      	movs	r0, #0
 800aa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa2a:	2e00      	cmp	r6, #0
 800aa2c:	d0f9      	beq.n	800aa22 <__sflush_r+0x1a>
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa34:	682f      	ldr	r7, [r5, #0]
 800aa36:	6a21      	ldr	r1, [r4, #32]
 800aa38:	602b      	str	r3, [r5, #0]
 800aa3a:	d032      	beq.n	800aaa2 <__sflush_r+0x9a>
 800aa3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa3e:	89a3      	ldrh	r3, [r4, #12]
 800aa40:	075a      	lsls	r2, r3, #29
 800aa42:	d505      	bpl.n	800aa50 <__sflush_r+0x48>
 800aa44:	6863      	ldr	r3, [r4, #4]
 800aa46:	1ac0      	subs	r0, r0, r3
 800aa48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa4a:	b10b      	cbz	r3, 800aa50 <__sflush_r+0x48>
 800aa4c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa4e:	1ac0      	subs	r0, r0, r3
 800aa50:	2300      	movs	r3, #0
 800aa52:	4602      	mov	r2, r0
 800aa54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa56:	6a21      	ldr	r1, [r4, #32]
 800aa58:	4628      	mov	r0, r5
 800aa5a:	47b0      	blx	r6
 800aa5c:	1c43      	adds	r3, r0, #1
 800aa5e:	89a3      	ldrh	r3, [r4, #12]
 800aa60:	d106      	bne.n	800aa70 <__sflush_r+0x68>
 800aa62:	6829      	ldr	r1, [r5, #0]
 800aa64:	291d      	cmp	r1, #29
 800aa66:	d82b      	bhi.n	800aac0 <__sflush_r+0xb8>
 800aa68:	4a29      	ldr	r2, [pc, #164]	; (800ab10 <__sflush_r+0x108>)
 800aa6a:	410a      	asrs	r2, r1
 800aa6c:	07d6      	lsls	r6, r2, #31
 800aa6e:	d427      	bmi.n	800aac0 <__sflush_r+0xb8>
 800aa70:	2200      	movs	r2, #0
 800aa72:	6062      	str	r2, [r4, #4]
 800aa74:	04d9      	lsls	r1, r3, #19
 800aa76:	6922      	ldr	r2, [r4, #16]
 800aa78:	6022      	str	r2, [r4, #0]
 800aa7a:	d504      	bpl.n	800aa86 <__sflush_r+0x7e>
 800aa7c:	1c42      	adds	r2, r0, #1
 800aa7e:	d101      	bne.n	800aa84 <__sflush_r+0x7c>
 800aa80:	682b      	ldr	r3, [r5, #0]
 800aa82:	b903      	cbnz	r3, 800aa86 <__sflush_r+0x7e>
 800aa84:	6560      	str	r0, [r4, #84]	; 0x54
 800aa86:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa88:	602f      	str	r7, [r5, #0]
 800aa8a:	2900      	cmp	r1, #0
 800aa8c:	d0c9      	beq.n	800aa22 <__sflush_r+0x1a>
 800aa8e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa92:	4299      	cmp	r1, r3
 800aa94:	d002      	beq.n	800aa9c <__sflush_r+0x94>
 800aa96:	4628      	mov	r0, r5
 800aa98:	f7fe fb70 	bl	800917c <_free_r>
 800aa9c:	2000      	movs	r0, #0
 800aa9e:	6360      	str	r0, [r4, #52]	; 0x34
 800aaa0:	e7c0      	b.n	800aa24 <__sflush_r+0x1c>
 800aaa2:	2301      	movs	r3, #1
 800aaa4:	4628      	mov	r0, r5
 800aaa6:	47b0      	blx	r6
 800aaa8:	1c41      	adds	r1, r0, #1
 800aaaa:	d1c8      	bne.n	800aa3e <__sflush_r+0x36>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d0c5      	beq.n	800aa3e <__sflush_r+0x36>
 800aab2:	2b1d      	cmp	r3, #29
 800aab4:	d001      	beq.n	800aaba <__sflush_r+0xb2>
 800aab6:	2b16      	cmp	r3, #22
 800aab8:	d101      	bne.n	800aabe <__sflush_r+0xb6>
 800aaba:	602f      	str	r7, [r5, #0]
 800aabc:	e7b1      	b.n	800aa22 <__sflush_r+0x1a>
 800aabe:	89a3      	ldrh	r3, [r4, #12]
 800aac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aac4:	81a3      	strh	r3, [r4, #12]
 800aac6:	e7ad      	b.n	800aa24 <__sflush_r+0x1c>
 800aac8:	690f      	ldr	r7, [r1, #16]
 800aaca:	2f00      	cmp	r7, #0
 800aacc:	d0a9      	beq.n	800aa22 <__sflush_r+0x1a>
 800aace:	0793      	lsls	r3, r2, #30
 800aad0:	680e      	ldr	r6, [r1, #0]
 800aad2:	bf08      	it	eq
 800aad4:	694b      	ldreq	r3, [r1, #20]
 800aad6:	600f      	str	r7, [r1, #0]
 800aad8:	bf18      	it	ne
 800aada:	2300      	movne	r3, #0
 800aadc:	eba6 0807 	sub.w	r8, r6, r7
 800aae0:	608b      	str	r3, [r1, #8]
 800aae2:	f1b8 0f00 	cmp.w	r8, #0
 800aae6:	dd9c      	ble.n	800aa22 <__sflush_r+0x1a>
 800aae8:	6a21      	ldr	r1, [r4, #32]
 800aaea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800aaec:	4643      	mov	r3, r8
 800aaee:	463a      	mov	r2, r7
 800aaf0:	4628      	mov	r0, r5
 800aaf2:	47b0      	blx	r6
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	dc06      	bgt.n	800ab06 <__sflush_r+0xfe>
 800aaf8:	89a3      	ldrh	r3, [r4, #12]
 800aafa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aafe:	81a3      	strh	r3, [r4, #12]
 800ab00:	f04f 30ff 	mov.w	r0, #4294967295
 800ab04:	e78e      	b.n	800aa24 <__sflush_r+0x1c>
 800ab06:	4407      	add	r7, r0
 800ab08:	eba8 0800 	sub.w	r8, r8, r0
 800ab0c:	e7e9      	b.n	800aae2 <__sflush_r+0xda>
 800ab0e:	bf00      	nop
 800ab10:	dfbffffe 	.word	0xdfbffffe

0800ab14 <_fflush_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	690b      	ldr	r3, [r1, #16]
 800ab18:	4605      	mov	r5, r0
 800ab1a:	460c      	mov	r4, r1
 800ab1c:	b913      	cbnz	r3, 800ab24 <_fflush_r+0x10>
 800ab1e:	2500      	movs	r5, #0
 800ab20:	4628      	mov	r0, r5
 800ab22:	bd38      	pop	{r3, r4, r5, pc}
 800ab24:	b118      	cbz	r0, 800ab2e <_fflush_r+0x1a>
 800ab26:	6a03      	ldr	r3, [r0, #32]
 800ab28:	b90b      	cbnz	r3, 800ab2e <_fflush_r+0x1a>
 800ab2a:	f7fd fb3d 	bl	80081a8 <__sinit>
 800ab2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d0f3      	beq.n	800ab1e <_fflush_r+0xa>
 800ab36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab38:	07d0      	lsls	r0, r2, #31
 800ab3a:	d404      	bmi.n	800ab46 <_fflush_r+0x32>
 800ab3c:	0599      	lsls	r1, r3, #22
 800ab3e:	d402      	bmi.n	800ab46 <_fflush_r+0x32>
 800ab40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab42:	f7fd fc7e 	bl	8008442 <__retarget_lock_acquire_recursive>
 800ab46:	4628      	mov	r0, r5
 800ab48:	4621      	mov	r1, r4
 800ab4a:	f7ff ff5d 	bl	800aa08 <__sflush_r>
 800ab4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab50:	07da      	lsls	r2, r3, #31
 800ab52:	4605      	mov	r5, r0
 800ab54:	d4e4      	bmi.n	800ab20 <_fflush_r+0xc>
 800ab56:	89a3      	ldrh	r3, [r4, #12]
 800ab58:	059b      	lsls	r3, r3, #22
 800ab5a:	d4e1      	bmi.n	800ab20 <_fflush_r+0xc>
 800ab5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab5e:	f7fd fc71 	bl	8008444 <__retarget_lock_release_recursive>
 800ab62:	e7dd      	b.n	800ab20 <_fflush_r+0xc>

0800ab64 <__swbuf_r>:
 800ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab66:	460e      	mov	r6, r1
 800ab68:	4614      	mov	r4, r2
 800ab6a:	4605      	mov	r5, r0
 800ab6c:	b118      	cbz	r0, 800ab76 <__swbuf_r+0x12>
 800ab6e:	6a03      	ldr	r3, [r0, #32]
 800ab70:	b90b      	cbnz	r3, 800ab76 <__swbuf_r+0x12>
 800ab72:	f7fd fb19 	bl	80081a8 <__sinit>
 800ab76:	69a3      	ldr	r3, [r4, #24]
 800ab78:	60a3      	str	r3, [r4, #8]
 800ab7a:	89a3      	ldrh	r3, [r4, #12]
 800ab7c:	071a      	lsls	r2, r3, #28
 800ab7e:	d525      	bpl.n	800abcc <__swbuf_r+0x68>
 800ab80:	6923      	ldr	r3, [r4, #16]
 800ab82:	b31b      	cbz	r3, 800abcc <__swbuf_r+0x68>
 800ab84:	6823      	ldr	r3, [r4, #0]
 800ab86:	6922      	ldr	r2, [r4, #16]
 800ab88:	1a98      	subs	r0, r3, r2
 800ab8a:	6963      	ldr	r3, [r4, #20]
 800ab8c:	b2f6      	uxtb	r6, r6
 800ab8e:	4283      	cmp	r3, r0
 800ab90:	4637      	mov	r7, r6
 800ab92:	dc04      	bgt.n	800ab9e <__swbuf_r+0x3a>
 800ab94:	4621      	mov	r1, r4
 800ab96:	4628      	mov	r0, r5
 800ab98:	f7ff ffbc 	bl	800ab14 <_fflush_r>
 800ab9c:	b9e0      	cbnz	r0, 800abd8 <__swbuf_r+0x74>
 800ab9e:	68a3      	ldr	r3, [r4, #8]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	60a3      	str	r3, [r4, #8]
 800aba4:	6823      	ldr	r3, [r4, #0]
 800aba6:	1c5a      	adds	r2, r3, #1
 800aba8:	6022      	str	r2, [r4, #0]
 800abaa:	701e      	strb	r6, [r3, #0]
 800abac:	6962      	ldr	r2, [r4, #20]
 800abae:	1c43      	adds	r3, r0, #1
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d004      	beq.n	800abbe <__swbuf_r+0x5a>
 800abb4:	89a3      	ldrh	r3, [r4, #12]
 800abb6:	07db      	lsls	r3, r3, #31
 800abb8:	d506      	bpl.n	800abc8 <__swbuf_r+0x64>
 800abba:	2e0a      	cmp	r6, #10
 800abbc:	d104      	bne.n	800abc8 <__swbuf_r+0x64>
 800abbe:	4621      	mov	r1, r4
 800abc0:	4628      	mov	r0, r5
 800abc2:	f7ff ffa7 	bl	800ab14 <_fflush_r>
 800abc6:	b938      	cbnz	r0, 800abd8 <__swbuf_r+0x74>
 800abc8:	4638      	mov	r0, r7
 800abca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abcc:	4621      	mov	r1, r4
 800abce:	4628      	mov	r0, r5
 800abd0:	f000 f806 	bl	800abe0 <__swsetup_r>
 800abd4:	2800      	cmp	r0, #0
 800abd6:	d0d5      	beq.n	800ab84 <__swbuf_r+0x20>
 800abd8:	f04f 37ff 	mov.w	r7, #4294967295
 800abdc:	e7f4      	b.n	800abc8 <__swbuf_r+0x64>
	...

0800abe0 <__swsetup_r>:
 800abe0:	b538      	push	{r3, r4, r5, lr}
 800abe2:	4b2a      	ldr	r3, [pc, #168]	; (800ac8c <__swsetup_r+0xac>)
 800abe4:	4605      	mov	r5, r0
 800abe6:	6818      	ldr	r0, [r3, #0]
 800abe8:	460c      	mov	r4, r1
 800abea:	b118      	cbz	r0, 800abf4 <__swsetup_r+0x14>
 800abec:	6a03      	ldr	r3, [r0, #32]
 800abee:	b90b      	cbnz	r3, 800abf4 <__swsetup_r+0x14>
 800abf0:	f7fd fada 	bl	80081a8 <__sinit>
 800abf4:	89a3      	ldrh	r3, [r4, #12]
 800abf6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800abfa:	0718      	lsls	r0, r3, #28
 800abfc:	d422      	bmi.n	800ac44 <__swsetup_r+0x64>
 800abfe:	06d9      	lsls	r1, r3, #27
 800ac00:	d407      	bmi.n	800ac12 <__swsetup_r+0x32>
 800ac02:	2309      	movs	r3, #9
 800ac04:	602b      	str	r3, [r5, #0]
 800ac06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac10:	e034      	b.n	800ac7c <__swsetup_r+0x9c>
 800ac12:	0758      	lsls	r0, r3, #29
 800ac14:	d512      	bpl.n	800ac3c <__swsetup_r+0x5c>
 800ac16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac18:	b141      	cbz	r1, 800ac2c <__swsetup_r+0x4c>
 800ac1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac1e:	4299      	cmp	r1, r3
 800ac20:	d002      	beq.n	800ac28 <__swsetup_r+0x48>
 800ac22:	4628      	mov	r0, r5
 800ac24:	f7fe faaa 	bl	800917c <_free_r>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	6363      	str	r3, [r4, #52]	; 0x34
 800ac2c:	89a3      	ldrh	r3, [r4, #12]
 800ac2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac32:	81a3      	strh	r3, [r4, #12]
 800ac34:	2300      	movs	r3, #0
 800ac36:	6063      	str	r3, [r4, #4]
 800ac38:	6923      	ldr	r3, [r4, #16]
 800ac3a:	6023      	str	r3, [r4, #0]
 800ac3c:	89a3      	ldrh	r3, [r4, #12]
 800ac3e:	f043 0308 	orr.w	r3, r3, #8
 800ac42:	81a3      	strh	r3, [r4, #12]
 800ac44:	6923      	ldr	r3, [r4, #16]
 800ac46:	b94b      	cbnz	r3, 800ac5c <__swsetup_r+0x7c>
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac52:	d003      	beq.n	800ac5c <__swsetup_r+0x7c>
 800ac54:	4621      	mov	r1, r4
 800ac56:	4628      	mov	r0, r5
 800ac58:	f000 f8e0 	bl	800ae1c <__smakebuf_r>
 800ac5c:	89a0      	ldrh	r0, [r4, #12]
 800ac5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac62:	f010 0301 	ands.w	r3, r0, #1
 800ac66:	d00a      	beq.n	800ac7e <__swsetup_r+0x9e>
 800ac68:	2300      	movs	r3, #0
 800ac6a:	60a3      	str	r3, [r4, #8]
 800ac6c:	6963      	ldr	r3, [r4, #20]
 800ac6e:	425b      	negs	r3, r3
 800ac70:	61a3      	str	r3, [r4, #24]
 800ac72:	6923      	ldr	r3, [r4, #16]
 800ac74:	b943      	cbnz	r3, 800ac88 <__swsetup_r+0xa8>
 800ac76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ac7a:	d1c4      	bne.n	800ac06 <__swsetup_r+0x26>
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	0781      	lsls	r1, r0, #30
 800ac80:	bf58      	it	pl
 800ac82:	6963      	ldrpl	r3, [r4, #20]
 800ac84:	60a3      	str	r3, [r4, #8]
 800ac86:	e7f4      	b.n	800ac72 <__swsetup_r+0x92>
 800ac88:	2000      	movs	r0, #0
 800ac8a:	e7f7      	b.n	800ac7c <__swsetup_r+0x9c>
 800ac8c:	20000208 	.word	0x20000208

0800ac90 <memmove>:
 800ac90:	4288      	cmp	r0, r1
 800ac92:	b510      	push	{r4, lr}
 800ac94:	eb01 0402 	add.w	r4, r1, r2
 800ac98:	d902      	bls.n	800aca0 <memmove+0x10>
 800ac9a:	4284      	cmp	r4, r0
 800ac9c:	4623      	mov	r3, r4
 800ac9e:	d807      	bhi.n	800acb0 <memmove+0x20>
 800aca0:	1e43      	subs	r3, r0, #1
 800aca2:	42a1      	cmp	r1, r4
 800aca4:	d008      	beq.n	800acb8 <memmove+0x28>
 800aca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acaa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acae:	e7f8      	b.n	800aca2 <memmove+0x12>
 800acb0:	4402      	add	r2, r0
 800acb2:	4601      	mov	r1, r0
 800acb4:	428a      	cmp	r2, r1
 800acb6:	d100      	bne.n	800acba <memmove+0x2a>
 800acb8:	bd10      	pop	{r4, pc}
 800acba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acc2:	e7f7      	b.n	800acb4 <memmove+0x24>

0800acc4 <_sbrk_r>:
 800acc4:	b538      	push	{r3, r4, r5, lr}
 800acc6:	4d06      	ldr	r5, [pc, #24]	; (800ace0 <_sbrk_r+0x1c>)
 800acc8:	2300      	movs	r3, #0
 800acca:	4604      	mov	r4, r0
 800accc:	4608      	mov	r0, r1
 800acce:	602b      	str	r3, [r5, #0]
 800acd0:	f7f8 f9fa 	bl	80030c8 <_sbrk>
 800acd4:	1c43      	adds	r3, r0, #1
 800acd6:	d102      	bne.n	800acde <_sbrk_r+0x1a>
 800acd8:	682b      	ldr	r3, [r5, #0]
 800acda:	b103      	cbz	r3, 800acde <_sbrk_r+0x1a>
 800acdc:	6023      	str	r3, [r4, #0]
 800acde:	bd38      	pop	{r3, r4, r5, pc}
 800ace0:	200007d4 	.word	0x200007d4

0800ace4 <__assert_func>:
 800ace4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ace6:	4614      	mov	r4, r2
 800ace8:	461a      	mov	r2, r3
 800acea:	4b09      	ldr	r3, [pc, #36]	; (800ad10 <__assert_func+0x2c>)
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	4605      	mov	r5, r0
 800acf0:	68d8      	ldr	r0, [r3, #12]
 800acf2:	b14c      	cbz	r4, 800ad08 <__assert_func+0x24>
 800acf4:	4b07      	ldr	r3, [pc, #28]	; (800ad14 <__assert_func+0x30>)
 800acf6:	9100      	str	r1, [sp, #0]
 800acf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800acfc:	4906      	ldr	r1, [pc, #24]	; (800ad18 <__assert_func+0x34>)
 800acfe:	462b      	mov	r3, r5
 800ad00:	f000 f854 	bl	800adac <fiprintf>
 800ad04:	f000 f8e8 	bl	800aed8 <abort>
 800ad08:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <__assert_func+0x38>)
 800ad0a:	461c      	mov	r4, r3
 800ad0c:	e7f3      	b.n	800acf6 <__assert_func+0x12>
 800ad0e:	bf00      	nop
 800ad10:	20000208 	.word	0x20000208
 800ad14:	0800c706 	.word	0x0800c706
 800ad18:	0800c713 	.word	0x0800c713
 800ad1c:	0800c741 	.word	0x0800c741

0800ad20 <_calloc_r>:
 800ad20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad22:	fba1 2402 	umull	r2, r4, r1, r2
 800ad26:	b94c      	cbnz	r4, 800ad3c <_calloc_r+0x1c>
 800ad28:	4611      	mov	r1, r2
 800ad2a:	9201      	str	r2, [sp, #4]
 800ad2c:	f7fe fdf2 	bl	8009914 <_malloc_r>
 800ad30:	9a01      	ldr	r2, [sp, #4]
 800ad32:	4605      	mov	r5, r0
 800ad34:	b930      	cbnz	r0, 800ad44 <_calloc_r+0x24>
 800ad36:	4628      	mov	r0, r5
 800ad38:	b003      	add	sp, #12
 800ad3a:	bd30      	pop	{r4, r5, pc}
 800ad3c:	220c      	movs	r2, #12
 800ad3e:	6002      	str	r2, [r0, #0]
 800ad40:	2500      	movs	r5, #0
 800ad42:	e7f8      	b.n	800ad36 <_calloc_r+0x16>
 800ad44:	4621      	mov	r1, r4
 800ad46:	f7fd fada 	bl	80082fe <memset>
 800ad4a:	e7f4      	b.n	800ad36 <_calloc_r+0x16>

0800ad4c <_realloc_r>:
 800ad4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad50:	4680      	mov	r8, r0
 800ad52:	4614      	mov	r4, r2
 800ad54:	460e      	mov	r6, r1
 800ad56:	b921      	cbnz	r1, 800ad62 <_realloc_r+0x16>
 800ad58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	f7fe bdd9 	b.w	8009914 <_malloc_r>
 800ad62:	b92a      	cbnz	r2, 800ad70 <_realloc_r+0x24>
 800ad64:	f7fe fa0a 	bl	800917c <_free_r>
 800ad68:	4625      	mov	r5, r4
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad70:	f000 f8b9 	bl	800aee6 <_malloc_usable_size_r>
 800ad74:	4284      	cmp	r4, r0
 800ad76:	4607      	mov	r7, r0
 800ad78:	d802      	bhi.n	800ad80 <_realloc_r+0x34>
 800ad7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ad7e:	d812      	bhi.n	800ada6 <_realloc_r+0x5a>
 800ad80:	4621      	mov	r1, r4
 800ad82:	4640      	mov	r0, r8
 800ad84:	f7fe fdc6 	bl	8009914 <_malloc_r>
 800ad88:	4605      	mov	r5, r0
 800ad8a:	2800      	cmp	r0, #0
 800ad8c:	d0ed      	beq.n	800ad6a <_realloc_r+0x1e>
 800ad8e:	42bc      	cmp	r4, r7
 800ad90:	4622      	mov	r2, r4
 800ad92:	4631      	mov	r1, r6
 800ad94:	bf28      	it	cs
 800ad96:	463a      	movcs	r2, r7
 800ad98:	f7fd fb55 	bl	8008446 <memcpy>
 800ad9c:	4631      	mov	r1, r6
 800ad9e:	4640      	mov	r0, r8
 800ada0:	f7fe f9ec 	bl	800917c <_free_r>
 800ada4:	e7e1      	b.n	800ad6a <_realloc_r+0x1e>
 800ada6:	4635      	mov	r5, r6
 800ada8:	e7df      	b.n	800ad6a <_realloc_r+0x1e>
	...

0800adac <fiprintf>:
 800adac:	b40e      	push	{r1, r2, r3}
 800adae:	b503      	push	{r0, r1, lr}
 800adb0:	4601      	mov	r1, r0
 800adb2:	ab03      	add	r3, sp, #12
 800adb4:	4805      	ldr	r0, [pc, #20]	; (800adcc <fiprintf+0x20>)
 800adb6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adba:	6800      	ldr	r0, [r0, #0]
 800adbc:	9301      	str	r3, [sp, #4]
 800adbe:	f7ff fd09 	bl	800a7d4 <_vfiprintf_r>
 800adc2:	b002      	add	sp, #8
 800adc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adc8:	b003      	add	sp, #12
 800adca:	4770      	bx	lr
 800adcc:	20000208 	.word	0x20000208

0800add0 <__swhatbuf_r>:
 800add0:	b570      	push	{r4, r5, r6, lr}
 800add2:	460c      	mov	r4, r1
 800add4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800add8:	2900      	cmp	r1, #0
 800adda:	b096      	sub	sp, #88	; 0x58
 800addc:	4615      	mov	r5, r2
 800adde:	461e      	mov	r6, r3
 800ade0:	da0d      	bge.n	800adfe <__swhatbuf_r+0x2e>
 800ade2:	89a3      	ldrh	r3, [r4, #12]
 800ade4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ade8:	f04f 0100 	mov.w	r1, #0
 800adec:	bf0c      	ite	eq
 800adee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800adf2:	2340      	movne	r3, #64	; 0x40
 800adf4:	2000      	movs	r0, #0
 800adf6:	6031      	str	r1, [r6, #0]
 800adf8:	602b      	str	r3, [r5, #0]
 800adfa:	b016      	add	sp, #88	; 0x58
 800adfc:	bd70      	pop	{r4, r5, r6, pc}
 800adfe:	466a      	mov	r2, sp
 800ae00:	f000 f848 	bl	800ae94 <_fstat_r>
 800ae04:	2800      	cmp	r0, #0
 800ae06:	dbec      	blt.n	800ade2 <__swhatbuf_r+0x12>
 800ae08:	9901      	ldr	r1, [sp, #4]
 800ae0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ae0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ae12:	4259      	negs	r1, r3
 800ae14:	4159      	adcs	r1, r3
 800ae16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae1a:	e7eb      	b.n	800adf4 <__swhatbuf_r+0x24>

0800ae1c <__smakebuf_r>:
 800ae1c:	898b      	ldrh	r3, [r1, #12]
 800ae1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae20:	079d      	lsls	r5, r3, #30
 800ae22:	4606      	mov	r6, r0
 800ae24:	460c      	mov	r4, r1
 800ae26:	d507      	bpl.n	800ae38 <__smakebuf_r+0x1c>
 800ae28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae2c:	6023      	str	r3, [r4, #0]
 800ae2e:	6123      	str	r3, [r4, #16]
 800ae30:	2301      	movs	r3, #1
 800ae32:	6163      	str	r3, [r4, #20]
 800ae34:	b002      	add	sp, #8
 800ae36:	bd70      	pop	{r4, r5, r6, pc}
 800ae38:	ab01      	add	r3, sp, #4
 800ae3a:	466a      	mov	r2, sp
 800ae3c:	f7ff ffc8 	bl	800add0 <__swhatbuf_r>
 800ae40:	9900      	ldr	r1, [sp, #0]
 800ae42:	4605      	mov	r5, r0
 800ae44:	4630      	mov	r0, r6
 800ae46:	f7fe fd65 	bl	8009914 <_malloc_r>
 800ae4a:	b948      	cbnz	r0, 800ae60 <__smakebuf_r+0x44>
 800ae4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae50:	059a      	lsls	r2, r3, #22
 800ae52:	d4ef      	bmi.n	800ae34 <__smakebuf_r+0x18>
 800ae54:	f023 0303 	bic.w	r3, r3, #3
 800ae58:	f043 0302 	orr.w	r3, r3, #2
 800ae5c:	81a3      	strh	r3, [r4, #12]
 800ae5e:	e7e3      	b.n	800ae28 <__smakebuf_r+0xc>
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	6020      	str	r0, [r4, #0]
 800ae64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae68:	81a3      	strh	r3, [r4, #12]
 800ae6a:	9b00      	ldr	r3, [sp, #0]
 800ae6c:	6163      	str	r3, [r4, #20]
 800ae6e:	9b01      	ldr	r3, [sp, #4]
 800ae70:	6120      	str	r0, [r4, #16]
 800ae72:	b15b      	cbz	r3, 800ae8c <__smakebuf_r+0x70>
 800ae74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f000 f81d 	bl	800aeb8 <_isatty_r>
 800ae7e:	b128      	cbz	r0, 800ae8c <__smakebuf_r+0x70>
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	f023 0303 	bic.w	r3, r3, #3
 800ae86:	f043 0301 	orr.w	r3, r3, #1
 800ae8a:	81a3      	strh	r3, [r4, #12]
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	431d      	orrs	r5, r3
 800ae90:	81a5      	strh	r5, [r4, #12]
 800ae92:	e7cf      	b.n	800ae34 <__smakebuf_r+0x18>

0800ae94 <_fstat_r>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	4d07      	ldr	r5, [pc, #28]	; (800aeb4 <_fstat_r+0x20>)
 800ae98:	2300      	movs	r3, #0
 800ae9a:	4604      	mov	r4, r0
 800ae9c:	4608      	mov	r0, r1
 800ae9e:	4611      	mov	r1, r2
 800aea0:	602b      	str	r3, [r5, #0]
 800aea2:	f7f8 f8e8 	bl	8003076 <_fstat>
 800aea6:	1c43      	adds	r3, r0, #1
 800aea8:	d102      	bne.n	800aeb0 <_fstat_r+0x1c>
 800aeaa:	682b      	ldr	r3, [r5, #0]
 800aeac:	b103      	cbz	r3, 800aeb0 <_fstat_r+0x1c>
 800aeae:	6023      	str	r3, [r4, #0]
 800aeb0:	bd38      	pop	{r3, r4, r5, pc}
 800aeb2:	bf00      	nop
 800aeb4:	200007d4 	.word	0x200007d4

0800aeb8 <_isatty_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4d06      	ldr	r5, [pc, #24]	; (800aed4 <_isatty_r+0x1c>)
 800aebc:	2300      	movs	r3, #0
 800aebe:	4604      	mov	r4, r0
 800aec0:	4608      	mov	r0, r1
 800aec2:	602b      	str	r3, [r5, #0]
 800aec4:	f7f8 f8e7 	bl	8003096 <_isatty>
 800aec8:	1c43      	adds	r3, r0, #1
 800aeca:	d102      	bne.n	800aed2 <_isatty_r+0x1a>
 800aecc:	682b      	ldr	r3, [r5, #0]
 800aece:	b103      	cbz	r3, 800aed2 <_isatty_r+0x1a>
 800aed0:	6023      	str	r3, [r4, #0]
 800aed2:	bd38      	pop	{r3, r4, r5, pc}
 800aed4:	200007d4 	.word	0x200007d4

0800aed8 <abort>:
 800aed8:	b508      	push	{r3, lr}
 800aeda:	2006      	movs	r0, #6
 800aedc:	f000 f834 	bl	800af48 <raise>
 800aee0:	2001      	movs	r0, #1
 800aee2:	f7f8 f879 	bl	8002fd8 <_exit>

0800aee6 <_malloc_usable_size_r>:
 800aee6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aeea:	1f18      	subs	r0, r3, #4
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	bfbc      	itt	lt
 800aef0:	580b      	ldrlt	r3, [r1, r0]
 800aef2:	18c0      	addlt	r0, r0, r3
 800aef4:	4770      	bx	lr

0800aef6 <_raise_r>:
 800aef6:	291f      	cmp	r1, #31
 800aef8:	b538      	push	{r3, r4, r5, lr}
 800aefa:	4604      	mov	r4, r0
 800aefc:	460d      	mov	r5, r1
 800aefe:	d904      	bls.n	800af0a <_raise_r+0x14>
 800af00:	2316      	movs	r3, #22
 800af02:	6003      	str	r3, [r0, #0]
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	bd38      	pop	{r3, r4, r5, pc}
 800af0a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af0c:	b112      	cbz	r2, 800af14 <_raise_r+0x1e>
 800af0e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af12:	b94b      	cbnz	r3, 800af28 <_raise_r+0x32>
 800af14:	4620      	mov	r0, r4
 800af16:	f000 f831 	bl	800af7c <_getpid_r>
 800af1a:	462a      	mov	r2, r5
 800af1c:	4601      	mov	r1, r0
 800af1e:	4620      	mov	r0, r4
 800af20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af24:	f000 b818 	b.w	800af58 <_kill_r>
 800af28:	2b01      	cmp	r3, #1
 800af2a:	d00a      	beq.n	800af42 <_raise_r+0x4c>
 800af2c:	1c59      	adds	r1, r3, #1
 800af2e:	d103      	bne.n	800af38 <_raise_r+0x42>
 800af30:	2316      	movs	r3, #22
 800af32:	6003      	str	r3, [r0, #0]
 800af34:	2001      	movs	r0, #1
 800af36:	e7e7      	b.n	800af08 <_raise_r+0x12>
 800af38:	2400      	movs	r4, #0
 800af3a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af3e:	4628      	mov	r0, r5
 800af40:	4798      	blx	r3
 800af42:	2000      	movs	r0, #0
 800af44:	e7e0      	b.n	800af08 <_raise_r+0x12>
	...

0800af48 <raise>:
 800af48:	4b02      	ldr	r3, [pc, #8]	; (800af54 <raise+0xc>)
 800af4a:	4601      	mov	r1, r0
 800af4c:	6818      	ldr	r0, [r3, #0]
 800af4e:	f7ff bfd2 	b.w	800aef6 <_raise_r>
 800af52:	bf00      	nop
 800af54:	20000208 	.word	0x20000208

0800af58 <_kill_r>:
 800af58:	b538      	push	{r3, r4, r5, lr}
 800af5a:	4d07      	ldr	r5, [pc, #28]	; (800af78 <_kill_r+0x20>)
 800af5c:	2300      	movs	r3, #0
 800af5e:	4604      	mov	r4, r0
 800af60:	4608      	mov	r0, r1
 800af62:	4611      	mov	r1, r2
 800af64:	602b      	str	r3, [r5, #0]
 800af66:	f7f8 f827 	bl	8002fb8 <_kill>
 800af6a:	1c43      	adds	r3, r0, #1
 800af6c:	d102      	bne.n	800af74 <_kill_r+0x1c>
 800af6e:	682b      	ldr	r3, [r5, #0]
 800af70:	b103      	cbz	r3, 800af74 <_kill_r+0x1c>
 800af72:	6023      	str	r3, [r4, #0]
 800af74:	bd38      	pop	{r3, r4, r5, pc}
 800af76:	bf00      	nop
 800af78:	200007d4 	.word	0x200007d4

0800af7c <_getpid_r>:
 800af7c:	f7f8 b814 	b.w	8002fa8 <_getpid>

0800af80 <sqrt>:
 800af80:	b538      	push	{r3, r4, r5, lr}
 800af82:	ed2d 8b02 	vpush	{d8}
 800af86:	ec55 4b10 	vmov	r4, r5, d0
 800af8a:	f000 f8d1 	bl	800b130 <__ieee754_sqrt>
 800af8e:	4622      	mov	r2, r4
 800af90:	462b      	mov	r3, r5
 800af92:	4620      	mov	r0, r4
 800af94:	4629      	mov	r1, r5
 800af96:	eeb0 8a40 	vmov.f32	s16, s0
 800af9a:	eef0 8a60 	vmov.f32	s17, s1
 800af9e:	f7f5 fde5 	bl	8000b6c <__aeabi_dcmpun>
 800afa2:	b990      	cbnz	r0, 800afca <sqrt+0x4a>
 800afa4:	2200      	movs	r2, #0
 800afa6:	2300      	movs	r3, #0
 800afa8:	4620      	mov	r0, r4
 800afaa:	4629      	mov	r1, r5
 800afac:	f7f5 fdb6 	bl	8000b1c <__aeabi_dcmplt>
 800afb0:	b158      	cbz	r0, 800afca <sqrt+0x4a>
 800afb2:	f7fd fa1b 	bl	80083ec <__errno>
 800afb6:	2321      	movs	r3, #33	; 0x21
 800afb8:	6003      	str	r3, [r0, #0]
 800afba:	2200      	movs	r2, #0
 800afbc:	2300      	movs	r3, #0
 800afbe:	4610      	mov	r0, r2
 800afc0:	4619      	mov	r1, r3
 800afc2:	f7f5 fc63 	bl	800088c <__aeabi_ddiv>
 800afc6:	ec41 0b18 	vmov	d8, r0, r1
 800afca:	eeb0 0a48 	vmov.f32	s0, s16
 800afce:	eef0 0a68 	vmov.f32	s1, s17
 800afd2:	ecbd 8b02 	vpop	{d8}
 800afd6:	bd38      	pop	{r3, r4, r5, pc}

0800afd8 <cos>:
 800afd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afda:	ec53 2b10 	vmov	r2, r3, d0
 800afde:	4826      	ldr	r0, [pc, #152]	; (800b078 <cos+0xa0>)
 800afe0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800afe4:	4281      	cmp	r1, r0
 800afe6:	dc06      	bgt.n	800aff6 <cos+0x1e>
 800afe8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b070 <cos+0x98>
 800afec:	b005      	add	sp, #20
 800afee:	f85d eb04 	ldr.w	lr, [sp], #4
 800aff2:	f000 b979 	b.w	800b2e8 <__kernel_cos>
 800aff6:	4821      	ldr	r0, [pc, #132]	; (800b07c <cos+0xa4>)
 800aff8:	4281      	cmp	r1, r0
 800affa:	dd09      	ble.n	800b010 <cos+0x38>
 800affc:	ee10 0a10 	vmov	r0, s0
 800b000:	4619      	mov	r1, r3
 800b002:	f7f5 f961 	bl	80002c8 <__aeabi_dsub>
 800b006:	ec41 0b10 	vmov	d0, r0, r1
 800b00a:	b005      	add	sp, #20
 800b00c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b010:	4668      	mov	r0, sp
 800b012:	f000 faf1 	bl	800b5f8 <__ieee754_rem_pio2>
 800b016:	f000 0003 	and.w	r0, r0, #3
 800b01a:	2801      	cmp	r0, #1
 800b01c:	d00b      	beq.n	800b036 <cos+0x5e>
 800b01e:	2802      	cmp	r0, #2
 800b020:	d016      	beq.n	800b050 <cos+0x78>
 800b022:	b9e0      	cbnz	r0, 800b05e <cos+0x86>
 800b024:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b028:	ed9d 0b00 	vldr	d0, [sp]
 800b02c:	f000 f95c 	bl	800b2e8 <__kernel_cos>
 800b030:	ec51 0b10 	vmov	r0, r1, d0
 800b034:	e7e7      	b.n	800b006 <cos+0x2e>
 800b036:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b03a:	ed9d 0b00 	vldr	d0, [sp]
 800b03e:	f000 fa1b 	bl	800b478 <__kernel_sin>
 800b042:	ec53 2b10 	vmov	r2, r3, d0
 800b046:	ee10 0a10 	vmov	r0, s0
 800b04a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b04e:	e7da      	b.n	800b006 <cos+0x2e>
 800b050:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b054:	ed9d 0b00 	vldr	d0, [sp]
 800b058:	f000 f946 	bl	800b2e8 <__kernel_cos>
 800b05c:	e7f1      	b.n	800b042 <cos+0x6a>
 800b05e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b062:	ed9d 0b00 	vldr	d0, [sp]
 800b066:	2001      	movs	r0, #1
 800b068:	f000 fa06 	bl	800b478 <__kernel_sin>
 800b06c:	e7e0      	b.n	800b030 <cos+0x58>
 800b06e:	bf00      	nop
	...
 800b078:	3fe921fb 	.word	0x3fe921fb
 800b07c:	7fefffff 	.word	0x7fefffff

0800b080 <sin>:
 800b080:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b082:	ec53 2b10 	vmov	r2, r3, d0
 800b086:	4828      	ldr	r0, [pc, #160]	; (800b128 <sin+0xa8>)
 800b088:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b08c:	4281      	cmp	r1, r0
 800b08e:	dc07      	bgt.n	800b0a0 <sin+0x20>
 800b090:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b120 <sin+0xa0>
 800b094:	2000      	movs	r0, #0
 800b096:	b005      	add	sp, #20
 800b098:	f85d eb04 	ldr.w	lr, [sp], #4
 800b09c:	f000 b9ec 	b.w	800b478 <__kernel_sin>
 800b0a0:	4822      	ldr	r0, [pc, #136]	; (800b12c <sin+0xac>)
 800b0a2:	4281      	cmp	r1, r0
 800b0a4:	dd09      	ble.n	800b0ba <sin+0x3a>
 800b0a6:	ee10 0a10 	vmov	r0, s0
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	f7f5 f90c 	bl	80002c8 <__aeabi_dsub>
 800b0b0:	ec41 0b10 	vmov	d0, r0, r1
 800b0b4:	b005      	add	sp, #20
 800b0b6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0ba:	4668      	mov	r0, sp
 800b0bc:	f000 fa9c 	bl	800b5f8 <__ieee754_rem_pio2>
 800b0c0:	f000 0003 	and.w	r0, r0, #3
 800b0c4:	2801      	cmp	r0, #1
 800b0c6:	d00c      	beq.n	800b0e2 <sin+0x62>
 800b0c8:	2802      	cmp	r0, #2
 800b0ca:	d011      	beq.n	800b0f0 <sin+0x70>
 800b0cc:	b9f0      	cbnz	r0, 800b10c <sin+0x8c>
 800b0ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0d2:	ed9d 0b00 	vldr	d0, [sp]
 800b0d6:	2001      	movs	r0, #1
 800b0d8:	f000 f9ce 	bl	800b478 <__kernel_sin>
 800b0dc:	ec51 0b10 	vmov	r0, r1, d0
 800b0e0:	e7e6      	b.n	800b0b0 <sin+0x30>
 800b0e2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0e6:	ed9d 0b00 	vldr	d0, [sp]
 800b0ea:	f000 f8fd 	bl	800b2e8 <__kernel_cos>
 800b0ee:	e7f5      	b.n	800b0dc <sin+0x5c>
 800b0f0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b0f4:	ed9d 0b00 	vldr	d0, [sp]
 800b0f8:	2001      	movs	r0, #1
 800b0fa:	f000 f9bd 	bl	800b478 <__kernel_sin>
 800b0fe:	ec53 2b10 	vmov	r2, r3, d0
 800b102:	ee10 0a10 	vmov	r0, s0
 800b106:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b10a:	e7d1      	b.n	800b0b0 <sin+0x30>
 800b10c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b110:	ed9d 0b00 	vldr	d0, [sp]
 800b114:	f000 f8e8 	bl	800b2e8 <__kernel_cos>
 800b118:	e7f1      	b.n	800b0fe <sin+0x7e>
 800b11a:	bf00      	nop
 800b11c:	f3af 8000 	nop.w
	...
 800b128:	3fe921fb 	.word	0x3fe921fb
 800b12c:	7fefffff 	.word	0x7fefffff

0800b130 <__ieee754_sqrt>:
 800b130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b134:	ec55 4b10 	vmov	r4, r5, d0
 800b138:	4e67      	ldr	r6, [pc, #412]	; (800b2d8 <__ieee754_sqrt+0x1a8>)
 800b13a:	43ae      	bics	r6, r5
 800b13c:	ee10 0a10 	vmov	r0, s0
 800b140:	ee10 2a10 	vmov	r2, s0
 800b144:	4629      	mov	r1, r5
 800b146:	462b      	mov	r3, r5
 800b148:	d10d      	bne.n	800b166 <__ieee754_sqrt+0x36>
 800b14a:	f7f5 fa75 	bl	8000638 <__aeabi_dmul>
 800b14e:	4602      	mov	r2, r0
 800b150:	460b      	mov	r3, r1
 800b152:	4620      	mov	r0, r4
 800b154:	4629      	mov	r1, r5
 800b156:	f7f5 f8b9 	bl	80002cc <__adddf3>
 800b15a:	4604      	mov	r4, r0
 800b15c:	460d      	mov	r5, r1
 800b15e:	ec45 4b10 	vmov	d0, r4, r5
 800b162:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b166:	2d00      	cmp	r5, #0
 800b168:	dc0b      	bgt.n	800b182 <__ieee754_sqrt+0x52>
 800b16a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b16e:	4326      	orrs	r6, r4
 800b170:	d0f5      	beq.n	800b15e <__ieee754_sqrt+0x2e>
 800b172:	b135      	cbz	r5, 800b182 <__ieee754_sqrt+0x52>
 800b174:	f7f5 f8a8 	bl	80002c8 <__aeabi_dsub>
 800b178:	4602      	mov	r2, r0
 800b17a:	460b      	mov	r3, r1
 800b17c:	f7f5 fb86 	bl	800088c <__aeabi_ddiv>
 800b180:	e7eb      	b.n	800b15a <__ieee754_sqrt+0x2a>
 800b182:	1509      	asrs	r1, r1, #20
 800b184:	f000 808d 	beq.w	800b2a2 <__ieee754_sqrt+0x172>
 800b188:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b18c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b190:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b194:	07c9      	lsls	r1, r1, #31
 800b196:	bf5c      	itt	pl
 800b198:	005b      	lslpl	r3, r3, #1
 800b19a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b19e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1a2:	bf58      	it	pl
 800b1a4:	0052      	lslpl	r2, r2, #1
 800b1a6:	2500      	movs	r5, #0
 800b1a8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b1ac:	1076      	asrs	r6, r6, #1
 800b1ae:	0052      	lsls	r2, r2, #1
 800b1b0:	f04f 0e16 	mov.w	lr, #22
 800b1b4:	46ac      	mov	ip, r5
 800b1b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1ba:	eb0c 0001 	add.w	r0, ip, r1
 800b1be:	4298      	cmp	r0, r3
 800b1c0:	bfde      	ittt	le
 800b1c2:	1a1b      	suble	r3, r3, r0
 800b1c4:	eb00 0c01 	addle.w	ip, r0, r1
 800b1c8:	186d      	addle	r5, r5, r1
 800b1ca:	005b      	lsls	r3, r3, #1
 800b1cc:	f1be 0e01 	subs.w	lr, lr, #1
 800b1d0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b1d4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b1d8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b1dc:	d1ed      	bne.n	800b1ba <__ieee754_sqrt+0x8a>
 800b1de:	4674      	mov	r4, lr
 800b1e0:	2720      	movs	r7, #32
 800b1e2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b1e6:	4563      	cmp	r3, ip
 800b1e8:	eb01 000e 	add.w	r0, r1, lr
 800b1ec:	dc02      	bgt.n	800b1f4 <__ieee754_sqrt+0xc4>
 800b1ee:	d113      	bne.n	800b218 <__ieee754_sqrt+0xe8>
 800b1f0:	4290      	cmp	r0, r2
 800b1f2:	d811      	bhi.n	800b218 <__ieee754_sqrt+0xe8>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	eb00 0e01 	add.w	lr, r0, r1
 800b1fa:	da57      	bge.n	800b2ac <__ieee754_sqrt+0x17c>
 800b1fc:	f1be 0f00 	cmp.w	lr, #0
 800b200:	db54      	blt.n	800b2ac <__ieee754_sqrt+0x17c>
 800b202:	f10c 0801 	add.w	r8, ip, #1
 800b206:	eba3 030c 	sub.w	r3, r3, ip
 800b20a:	4290      	cmp	r0, r2
 800b20c:	bf88      	it	hi
 800b20e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b212:	1a12      	subs	r2, r2, r0
 800b214:	440c      	add	r4, r1
 800b216:	46c4      	mov	ip, r8
 800b218:	005b      	lsls	r3, r3, #1
 800b21a:	3f01      	subs	r7, #1
 800b21c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b220:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b224:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b228:	d1dd      	bne.n	800b1e6 <__ieee754_sqrt+0xb6>
 800b22a:	4313      	orrs	r3, r2
 800b22c:	d01b      	beq.n	800b266 <__ieee754_sqrt+0x136>
 800b22e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b2dc <__ieee754_sqrt+0x1ac>
 800b232:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b2e0 <__ieee754_sqrt+0x1b0>
 800b236:	e9da 0100 	ldrd	r0, r1, [sl]
 800b23a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b23e:	f7f5 f843 	bl	80002c8 <__aeabi_dsub>
 800b242:	e9da 8900 	ldrd	r8, r9, [sl]
 800b246:	4602      	mov	r2, r0
 800b248:	460b      	mov	r3, r1
 800b24a:	4640      	mov	r0, r8
 800b24c:	4649      	mov	r1, r9
 800b24e:	f7f5 fc6f 	bl	8000b30 <__aeabi_dcmple>
 800b252:	b140      	cbz	r0, 800b266 <__ieee754_sqrt+0x136>
 800b254:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b258:	e9da 0100 	ldrd	r0, r1, [sl]
 800b25c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b260:	d126      	bne.n	800b2b0 <__ieee754_sqrt+0x180>
 800b262:	3501      	adds	r5, #1
 800b264:	463c      	mov	r4, r7
 800b266:	106a      	asrs	r2, r5, #1
 800b268:	0863      	lsrs	r3, r4, #1
 800b26a:	07e9      	lsls	r1, r5, #31
 800b26c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b270:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b274:	bf48      	it	mi
 800b276:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b27a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b27e:	461c      	mov	r4, r3
 800b280:	e76d      	b.n	800b15e <__ieee754_sqrt+0x2e>
 800b282:	0ad3      	lsrs	r3, r2, #11
 800b284:	3815      	subs	r0, #21
 800b286:	0552      	lsls	r2, r2, #21
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d0fa      	beq.n	800b282 <__ieee754_sqrt+0x152>
 800b28c:	02dc      	lsls	r4, r3, #11
 800b28e:	d50a      	bpl.n	800b2a6 <__ieee754_sqrt+0x176>
 800b290:	f1c1 0420 	rsb	r4, r1, #32
 800b294:	fa22 f404 	lsr.w	r4, r2, r4
 800b298:	1e4d      	subs	r5, r1, #1
 800b29a:	408a      	lsls	r2, r1
 800b29c:	4323      	orrs	r3, r4
 800b29e:	1b41      	subs	r1, r0, r5
 800b2a0:	e772      	b.n	800b188 <__ieee754_sqrt+0x58>
 800b2a2:	4608      	mov	r0, r1
 800b2a4:	e7f0      	b.n	800b288 <__ieee754_sqrt+0x158>
 800b2a6:	005b      	lsls	r3, r3, #1
 800b2a8:	3101      	adds	r1, #1
 800b2aa:	e7ef      	b.n	800b28c <__ieee754_sqrt+0x15c>
 800b2ac:	46e0      	mov	r8, ip
 800b2ae:	e7aa      	b.n	800b206 <__ieee754_sqrt+0xd6>
 800b2b0:	f7f5 f80c 	bl	80002cc <__adddf3>
 800b2b4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	460b      	mov	r3, r1
 800b2bc:	4640      	mov	r0, r8
 800b2be:	4649      	mov	r1, r9
 800b2c0:	f7f5 fc2c 	bl	8000b1c <__aeabi_dcmplt>
 800b2c4:	b120      	cbz	r0, 800b2d0 <__ieee754_sqrt+0x1a0>
 800b2c6:	1ca0      	adds	r0, r4, #2
 800b2c8:	bf08      	it	eq
 800b2ca:	3501      	addeq	r5, #1
 800b2cc:	3402      	adds	r4, #2
 800b2ce:	e7ca      	b.n	800b266 <__ieee754_sqrt+0x136>
 800b2d0:	3401      	adds	r4, #1
 800b2d2:	f024 0401 	bic.w	r4, r4, #1
 800b2d6:	e7c6      	b.n	800b266 <__ieee754_sqrt+0x136>
 800b2d8:	7ff00000 	.word	0x7ff00000
 800b2dc:	20000210 	.word	0x20000210
 800b2e0:	20000218 	.word	0x20000218
 800b2e4:	00000000 	.word	0x00000000

0800b2e8 <__kernel_cos>:
 800b2e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2ec:	ec57 6b10 	vmov	r6, r7, d0
 800b2f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b2f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b2f8:	ed8d 1b00 	vstr	d1, [sp]
 800b2fc:	da07      	bge.n	800b30e <__kernel_cos+0x26>
 800b2fe:	ee10 0a10 	vmov	r0, s0
 800b302:	4639      	mov	r1, r7
 800b304:	f7f5 fc48 	bl	8000b98 <__aeabi_d2iz>
 800b308:	2800      	cmp	r0, #0
 800b30a:	f000 8088 	beq.w	800b41e <__kernel_cos+0x136>
 800b30e:	4632      	mov	r2, r6
 800b310:	463b      	mov	r3, r7
 800b312:	4630      	mov	r0, r6
 800b314:	4639      	mov	r1, r7
 800b316:	f7f5 f98f 	bl	8000638 <__aeabi_dmul>
 800b31a:	4b51      	ldr	r3, [pc, #324]	; (800b460 <__kernel_cos+0x178>)
 800b31c:	2200      	movs	r2, #0
 800b31e:	4604      	mov	r4, r0
 800b320:	460d      	mov	r5, r1
 800b322:	f7f5 f989 	bl	8000638 <__aeabi_dmul>
 800b326:	a340      	add	r3, pc, #256	; (adr r3, 800b428 <__kernel_cos+0x140>)
 800b328:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b32c:	4682      	mov	sl, r0
 800b32e:	468b      	mov	fp, r1
 800b330:	4620      	mov	r0, r4
 800b332:	4629      	mov	r1, r5
 800b334:	f7f5 f980 	bl	8000638 <__aeabi_dmul>
 800b338:	a33d      	add	r3, pc, #244	; (adr r3, 800b430 <__kernel_cos+0x148>)
 800b33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33e:	f7f4 ffc5 	bl	80002cc <__adddf3>
 800b342:	4622      	mov	r2, r4
 800b344:	462b      	mov	r3, r5
 800b346:	f7f5 f977 	bl	8000638 <__aeabi_dmul>
 800b34a:	a33b      	add	r3, pc, #236	; (adr r3, 800b438 <__kernel_cos+0x150>)
 800b34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b350:	f7f4 ffba 	bl	80002c8 <__aeabi_dsub>
 800b354:	4622      	mov	r2, r4
 800b356:	462b      	mov	r3, r5
 800b358:	f7f5 f96e 	bl	8000638 <__aeabi_dmul>
 800b35c:	a338      	add	r3, pc, #224	; (adr r3, 800b440 <__kernel_cos+0x158>)
 800b35e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b362:	f7f4 ffb3 	bl	80002cc <__adddf3>
 800b366:	4622      	mov	r2, r4
 800b368:	462b      	mov	r3, r5
 800b36a:	f7f5 f965 	bl	8000638 <__aeabi_dmul>
 800b36e:	a336      	add	r3, pc, #216	; (adr r3, 800b448 <__kernel_cos+0x160>)
 800b370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b374:	f7f4 ffa8 	bl	80002c8 <__aeabi_dsub>
 800b378:	4622      	mov	r2, r4
 800b37a:	462b      	mov	r3, r5
 800b37c:	f7f5 f95c 	bl	8000638 <__aeabi_dmul>
 800b380:	a333      	add	r3, pc, #204	; (adr r3, 800b450 <__kernel_cos+0x168>)
 800b382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b386:	f7f4 ffa1 	bl	80002cc <__adddf3>
 800b38a:	4622      	mov	r2, r4
 800b38c:	462b      	mov	r3, r5
 800b38e:	f7f5 f953 	bl	8000638 <__aeabi_dmul>
 800b392:	4622      	mov	r2, r4
 800b394:	462b      	mov	r3, r5
 800b396:	f7f5 f94f 	bl	8000638 <__aeabi_dmul>
 800b39a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b39e:	4604      	mov	r4, r0
 800b3a0:	460d      	mov	r5, r1
 800b3a2:	4630      	mov	r0, r6
 800b3a4:	4639      	mov	r1, r7
 800b3a6:	f7f5 f947 	bl	8000638 <__aeabi_dmul>
 800b3aa:	460b      	mov	r3, r1
 800b3ac:	4602      	mov	r2, r0
 800b3ae:	4629      	mov	r1, r5
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f7f4 ff89 	bl	80002c8 <__aeabi_dsub>
 800b3b6:	4b2b      	ldr	r3, [pc, #172]	; (800b464 <__kernel_cos+0x17c>)
 800b3b8:	4598      	cmp	r8, r3
 800b3ba:	4606      	mov	r6, r0
 800b3bc:	460f      	mov	r7, r1
 800b3be:	dc10      	bgt.n	800b3e2 <__kernel_cos+0xfa>
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4650      	mov	r0, sl
 800b3c6:	4659      	mov	r1, fp
 800b3c8:	f7f4 ff7e 	bl	80002c8 <__aeabi_dsub>
 800b3cc:	460b      	mov	r3, r1
 800b3ce:	4926      	ldr	r1, [pc, #152]	; (800b468 <__kernel_cos+0x180>)
 800b3d0:	4602      	mov	r2, r0
 800b3d2:	2000      	movs	r0, #0
 800b3d4:	f7f4 ff78 	bl	80002c8 <__aeabi_dsub>
 800b3d8:	ec41 0b10 	vmov	d0, r0, r1
 800b3dc:	b003      	add	sp, #12
 800b3de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3e2:	4b22      	ldr	r3, [pc, #136]	; (800b46c <__kernel_cos+0x184>)
 800b3e4:	4920      	ldr	r1, [pc, #128]	; (800b468 <__kernel_cos+0x180>)
 800b3e6:	4598      	cmp	r8, r3
 800b3e8:	bfcc      	ite	gt
 800b3ea:	4d21      	ldrgt	r5, [pc, #132]	; (800b470 <__kernel_cos+0x188>)
 800b3ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b3f0:	2400      	movs	r4, #0
 800b3f2:	4622      	mov	r2, r4
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	f7f4 ff66 	bl	80002c8 <__aeabi_dsub>
 800b3fc:	4622      	mov	r2, r4
 800b3fe:	4680      	mov	r8, r0
 800b400:	4689      	mov	r9, r1
 800b402:	462b      	mov	r3, r5
 800b404:	4650      	mov	r0, sl
 800b406:	4659      	mov	r1, fp
 800b408:	f7f4 ff5e 	bl	80002c8 <__aeabi_dsub>
 800b40c:	4632      	mov	r2, r6
 800b40e:	463b      	mov	r3, r7
 800b410:	f7f4 ff5a 	bl	80002c8 <__aeabi_dsub>
 800b414:	4602      	mov	r2, r0
 800b416:	460b      	mov	r3, r1
 800b418:	4640      	mov	r0, r8
 800b41a:	4649      	mov	r1, r9
 800b41c:	e7da      	b.n	800b3d4 <__kernel_cos+0xec>
 800b41e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b458 <__kernel_cos+0x170>
 800b422:	e7db      	b.n	800b3dc <__kernel_cos+0xf4>
 800b424:	f3af 8000 	nop.w
 800b428:	be8838d4 	.word	0xbe8838d4
 800b42c:	bda8fae9 	.word	0xbda8fae9
 800b430:	bdb4b1c4 	.word	0xbdb4b1c4
 800b434:	3e21ee9e 	.word	0x3e21ee9e
 800b438:	809c52ad 	.word	0x809c52ad
 800b43c:	3e927e4f 	.word	0x3e927e4f
 800b440:	19cb1590 	.word	0x19cb1590
 800b444:	3efa01a0 	.word	0x3efa01a0
 800b448:	16c15177 	.word	0x16c15177
 800b44c:	3f56c16c 	.word	0x3f56c16c
 800b450:	5555554c 	.word	0x5555554c
 800b454:	3fa55555 	.word	0x3fa55555
 800b458:	00000000 	.word	0x00000000
 800b45c:	3ff00000 	.word	0x3ff00000
 800b460:	3fe00000 	.word	0x3fe00000
 800b464:	3fd33332 	.word	0x3fd33332
 800b468:	3ff00000 	.word	0x3ff00000
 800b46c:	3fe90000 	.word	0x3fe90000
 800b470:	3fd20000 	.word	0x3fd20000
 800b474:	00000000 	.word	0x00000000

0800b478 <__kernel_sin>:
 800b478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b47c:	ed2d 8b04 	vpush	{d8-d9}
 800b480:	eeb0 8a41 	vmov.f32	s16, s2
 800b484:	eef0 8a61 	vmov.f32	s17, s3
 800b488:	ec55 4b10 	vmov	r4, r5, d0
 800b48c:	b083      	sub	sp, #12
 800b48e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b492:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b496:	9001      	str	r0, [sp, #4]
 800b498:	da06      	bge.n	800b4a8 <__kernel_sin+0x30>
 800b49a:	ee10 0a10 	vmov	r0, s0
 800b49e:	4629      	mov	r1, r5
 800b4a0:	f7f5 fb7a 	bl	8000b98 <__aeabi_d2iz>
 800b4a4:	2800      	cmp	r0, #0
 800b4a6:	d051      	beq.n	800b54c <__kernel_sin+0xd4>
 800b4a8:	4622      	mov	r2, r4
 800b4aa:	462b      	mov	r3, r5
 800b4ac:	4620      	mov	r0, r4
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	f7f5 f8c2 	bl	8000638 <__aeabi_dmul>
 800b4b4:	4682      	mov	sl, r0
 800b4b6:	468b      	mov	fp, r1
 800b4b8:	4602      	mov	r2, r0
 800b4ba:	460b      	mov	r3, r1
 800b4bc:	4620      	mov	r0, r4
 800b4be:	4629      	mov	r1, r5
 800b4c0:	f7f5 f8ba 	bl	8000638 <__aeabi_dmul>
 800b4c4:	a341      	add	r3, pc, #260	; (adr r3, 800b5cc <__kernel_sin+0x154>)
 800b4c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ca:	4680      	mov	r8, r0
 800b4cc:	4689      	mov	r9, r1
 800b4ce:	4650      	mov	r0, sl
 800b4d0:	4659      	mov	r1, fp
 800b4d2:	f7f5 f8b1 	bl	8000638 <__aeabi_dmul>
 800b4d6:	a33f      	add	r3, pc, #252	; (adr r3, 800b5d4 <__kernel_sin+0x15c>)
 800b4d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4dc:	f7f4 fef4 	bl	80002c8 <__aeabi_dsub>
 800b4e0:	4652      	mov	r2, sl
 800b4e2:	465b      	mov	r3, fp
 800b4e4:	f7f5 f8a8 	bl	8000638 <__aeabi_dmul>
 800b4e8:	a33c      	add	r3, pc, #240	; (adr r3, 800b5dc <__kernel_sin+0x164>)
 800b4ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4ee:	f7f4 feed 	bl	80002cc <__adddf3>
 800b4f2:	4652      	mov	r2, sl
 800b4f4:	465b      	mov	r3, fp
 800b4f6:	f7f5 f89f 	bl	8000638 <__aeabi_dmul>
 800b4fa:	a33a      	add	r3, pc, #232	; (adr r3, 800b5e4 <__kernel_sin+0x16c>)
 800b4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b500:	f7f4 fee2 	bl	80002c8 <__aeabi_dsub>
 800b504:	4652      	mov	r2, sl
 800b506:	465b      	mov	r3, fp
 800b508:	f7f5 f896 	bl	8000638 <__aeabi_dmul>
 800b50c:	a337      	add	r3, pc, #220	; (adr r3, 800b5ec <__kernel_sin+0x174>)
 800b50e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b512:	f7f4 fedb 	bl	80002cc <__adddf3>
 800b516:	9b01      	ldr	r3, [sp, #4]
 800b518:	4606      	mov	r6, r0
 800b51a:	460f      	mov	r7, r1
 800b51c:	b9eb      	cbnz	r3, 800b55a <__kernel_sin+0xe2>
 800b51e:	4602      	mov	r2, r0
 800b520:	460b      	mov	r3, r1
 800b522:	4650      	mov	r0, sl
 800b524:	4659      	mov	r1, fp
 800b526:	f7f5 f887 	bl	8000638 <__aeabi_dmul>
 800b52a:	a325      	add	r3, pc, #148	; (adr r3, 800b5c0 <__kernel_sin+0x148>)
 800b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b530:	f7f4 feca 	bl	80002c8 <__aeabi_dsub>
 800b534:	4642      	mov	r2, r8
 800b536:	464b      	mov	r3, r9
 800b538:	f7f5 f87e 	bl	8000638 <__aeabi_dmul>
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	4620      	mov	r0, r4
 800b542:	4629      	mov	r1, r5
 800b544:	f7f4 fec2 	bl	80002cc <__adddf3>
 800b548:	4604      	mov	r4, r0
 800b54a:	460d      	mov	r5, r1
 800b54c:	ec45 4b10 	vmov	d0, r4, r5
 800b550:	b003      	add	sp, #12
 800b552:	ecbd 8b04 	vpop	{d8-d9}
 800b556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55a:	4b1b      	ldr	r3, [pc, #108]	; (800b5c8 <__kernel_sin+0x150>)
 800b55c:	ec51 0b18 	vmov	r0, r1, d8
 800b560:	2200      	movs	r2, #0
 800b562:	f7f5 f869 	bl	8000638 <__aeabi_dmul>
 800b566:	4632      	mov	r2, r6
 800b568:	ec41 0b19 	vmov	d9, r0, r1
 800b56c:	463b      	mov	r3, r7
 800b56e:	4640      	mov	r0, r8
 800b570:	4649      	mov	r1, r9
 800b572:	f7f5 f861 	bl	8000638 <__aeabi_dmul>
 800b576:	4602      	mov	r2, r0
 800b578:	460b      	mov	r3, r1
 800b57a:	ec51 0b19 	vmov	r0, r1, d9
 800b57e:	f7f4 fea3 	bl	80002c8 <__aeabi_dsub>
 800b582:	4652      	mov	r2, sl
 800b584:	465b      	mov	r3, fp
 800b586:	f7f5 f857 	bl	8000638 <__aeabi_dmul>
 800b58a:	ec53 2b18 	vmov	r2, r3, d8
 800b58e:	f7f4 fe9b 	bl	80002c8 <__aeabi_dsub>
 800b592:	a30b      	add	r3, pc, #44	; (adr r3, 800b5c0 <__kernel_sin+0x148>)
 800b594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b598:	4606      	mov	r6, r0
 800b59a:	460f      	mov	r7, r1
 800b59c:	4640      	mov	r0, r8
 800b59e:	4649      	mov	r1, r9
 800b5a0:	f7f5 f84a 	bl	8000638 <__aeabi_dmul>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	4630      	mov	r0, r6
 800b5aa:	4639      	mov	r1, r7
 800b5ac:	f7f4 fe8e 	bl	80002cc <__adddf3>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	f7f4 fe86 	bl	80002c8 <__aeabi_dsub>
 800b5bc:	e7c4      	b.n	800b548 <__kernel_sin+0xd0>
 800b5be:	bf00      	nop
 800b5c0:	55555549 	.word	0x55555549
 800b5c4:	3fc55555 	.word	0x3fc55555
 800b5c8:	3fe00000 	.word	0x3fe00000
 800b5cc:	5acfd57c 	.word	0x5acfd57c
 800b5d0:	3de5d93a 	.word	0x3de5d93a
 800b5d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800b5d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800b5dc:	57b1fe7d 	.word	0x57b1fe7d
 800b5e0:	3ec71de3 	.word	0x3ec71de3
 800b5e4:	19c161d5 	.word	0x19c161d5
 800b5e8:	3f2a01a0 	.word	0x3f2a01a0
 800b5ec:	1110f8a6 	.word	0x1110f8a6
 800b5f0:	3f811111 	.word	0x3f811111
 800b5f4:	00000000 	.word	0x00000000

0800b5f8 <__ieee754_rem_pio2>:
 800b5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5fc:	ed2d 8b02 	vpush	{d8}
 800b600:	ec55 4b10 	vmov	r4, r5, d0
 800b604:	4bca      	ldr	r3, [pc, #808]	; (800b930 <__ieee754_rem_pio2+0x338>)
 800b606:	b08b      	sub	sp, #44	; 0x2c
 800b608:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b60c:	4598      	cmp	r8, r3
 800b60e:	4682      	mov	sl, r0
 800b610:	9502      	str	r5, [sp, #8]
 800b612:	dc08      	bgt.n	800b626 <__ieee754_rem_pio2+0x2e>
 800b614:	2200      	movs	r2, #0
 800b616:	2300      	movs	r3, #0
 800b618:	ed80 0b00 	vstr	d0, [r0]
 800b61c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b620:	f04f 0b00 	mov.w	fp, #0
 800b624:	e028      	b.n	800b678 <__ieee754_rem_pio2+0x80>
 800b626:	4bc3      	ldr	r3, [pc, #780]	; (800b934 <__ieee754_rem_pio2+0x33c>)
 800b628:	4598      	cmp	r8, r3
 800b62a:	dc78      	bgt.n	800b71e <__ieee754_rem_pio2+0x126>
 800b62c:	9b02      	ldr	r3, [sp, #8]
 800b62e:	4ec2      	ldr	r6, [pc, #776]	; (800b938 <__ieee754_rem_pio2+0x340>)
 800b630:	2b00      	cmp	r3, #0
 800b632:	ee10 0a10 	vmov	r0, s0
 800b636:	a3b0      	add	r3, pc, #704	; (adr r3, 800b8f8 <__ieee754_rem_pio2+0x300>)
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	4629      	mov	r1, r5
 800b63e:	dd39      	ble.n	800b6b4 <__ieee754_rem_pio2+0xbc>
 800b640:	f7f4 fe42 	bl	80002c8 <__aeabi_dsub>
 800b644:	45b0      	cmp	r8, r6
 800b646:	4604      	mov	r4, r0
 800b648:	460d      	mov	r5, r1
 800b64a:	d01b      	beq.n	800b684 <__ieee754_rem_pio2+0x8c>
 800b64c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b900 <__ieee754_rem_pio2+0x308>)
 800b64e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b652:	f7f4 fe39 	bl	80002c8 <__aeabi_dsub>
 800b656:	4602      	mov	r2, r0
 800b658:	460b      	mov	r3, r1
 800b65a:	e9ca 2300 	strd	r2, r3, [sl]
 800b65e:	4620      	mov	r0, r4
 800b660:	4629      	mov	r1, r5
 800b662:	f7f4 fe31 	bl	80002c8 <__aeabi_dsub>
 800b666:	a3a6      	add	r3, pc, #664	; (adr r3, 800b900 <__ieee754_rem_pio2+0x308>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	f7f4 fe2c 	bl	80002c8 <__aeabi_dsub>
 800b670:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b674:	f04f 0b01 	mov.w	fp, #1
 800b678:	4658      	mov	r0, fp
 800b67a:	b00b      	add	sp, #44	; 0x2c
 800b67c:	ecbd 8b02 	vpop	{d8}
 800b680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b684:	a3a0      	add	r3, pc, #640	; (adr r3, 800b908 <__ieee754_rem_pio2+0x310>)
 800b686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68a:	f7f4 fe1d 	bl	80002c8 <__aeabi_dsub>
 800b68e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b910 <__ieee754_rem_pio2+0x318>)
 800b690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b694:	4604      	mov	r4, r0
 800b696:	460d      	mov	r5, r1
 800b698:	f7f4 fe16 	bl	80002c8 <__aeabi_dsub>
 800b69c:	4602      	mov	r2, r0
 800b69e:	460b      	mov	r3, r1
 800b6a0:	e9ca 2300 	strd	r2, r3, [sl]
 800b6a4:	4620      	mov	r0, r4
 800b6a6:	4629      	mov	r1, r5
 800b6a8:	f7f4 fe0e 	bl	80002c8 <__aeabi_dsub>
 800b6ac:	a398      	add	r3, pc, #608	; (adr r3, 800b910 <__ieee754_rem_pio2+0x318>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	e7db      	b.n	800b66c <__ieee754_rem_pio2+0x74>
 800b6b4:	f7f4 fe0a 	bl	80002cc <__adddf3>
 800b6b8:	45b0      	cmp	r8, r6
 800b6ba:	4604      	mov	r4, r0
 800b6bc:	460d      	mov	r5, r1
 800b6be:	d016      	beq.n	800b6ee <__ieee754_rem_pio2+0xf6>
 800b6c0:	a38f      	add	r3, pc, #572	; (adr r3, 800b900 <__ieee754_rem_pio2+0x308>)
 800b6c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c6:	f7f4 fe01 	bl	80002cc <__adddf3>
 800b6ca:	4602      	mov	r2, r0
 800b6cc:	460b      	mov	r3, r1
 800b6ce:	e9ca 2300 	strd	r2, r3, [sl]
 800b6d2:	4620      	mov	r0, r4
 800b6d4:	4629      	mov	r1, r5
 800b6d6:	f7f4 fdf7 	bl	80002c8 <__aeabi_dsub>
 800b6da:	a389      	add	r3, pc, #548	; (adr r3, 800b900 <__ieee754_rem_pio2+0x308>)
 800b6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e0:	f7f4 fdf4 	bl	80002cc <__adddf3>
 800b6e4:	f04f 3bff 	mov.w	fp, #4294967295
 800b6e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6ec:	e7c4      	b.n	800b678 <__ieee754_rem_pio2+0x80>
 800b6ee:	a386      	add	r3, pc, #536	; (adr r3, 800b908 <__ieee754_rem_pio2+0x310>)
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	f7f4 fdea 	bl	80002cc <__adddf3>
 800b6f8:	a385      	add	r3, pc, #532	; (adr r3, 800b910 <__ieee754_rem_pio2+0x318>)
 800b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6fe:	4604      	mov	r4, r0
 800b700:	460d      	mov	r5, r1
 800b702:	f7f4 fde3 	bl	80002cc <__adddf3>
 800b706:	4602      	mov	r2, r0
 800b708:	460b      	mov	r3, r1
 800b70a:	e9ca 2300 	strd	r2, r3, [sl]
 800b70e:	4620      	mov	r0, r4
 800b710:	4629      	mov	r1, r5
 800b712:	f7f4 fdd9 	bl	80002c8 <__aeabi_dsub>
 800b716:	a37e      	add	r3, pc, #504	; (adr r3, 800b910 <__ieee754_rem_pio2+0x318>)
 800b718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b71c:	e7e0      	b.n	800b6e0 <__ieee754_rem_pio2+0xe8>
 800b71e:	4b87      	ldr	r3, [pc, #540]	; (800b93c <__ieee754_rem_pio2+0x344>)
 800b720:	4598      	cmp	r8, r3
 800b722:	f300 80d8 	bgt.w	800b8d6 <__ieee754_rem_pio2+0x2de>
 800b726:	f000 f96d 	bl	800ba04 <fabs>
 800b72a:	ec55 4b10 	vmov	r4, r5, d0
 800b72e:	ee10 0a10 	vmov	r0, s0
 800b732:	a379      	add	r3, pc, #484	; (adr r3, 800b918 <__ieee754_rem_pio2+0x320>)
 800b734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b738:	4629      	mov	r1, r5
 800b73a:	f7f4 ff7d 	bl	8000638 <__aeabi_dmul>
 800b73e:	4b80      	ldr	r3, [pc, #512]	; (800b940 <__ieee754_rem_pio2+0x348>)
 800b740:	2200      	movs	r2, #0
 800b742:	f7f4 fdc3 	bl	80002cc <__adddf3>
 800b746:	f7f5 fa27 	bl	8000b98 <__aeabi_d2iz>
 800b74a:	4683      	mov	fp, r0
 800b74c:	f7f4 ff0a 	bl	8000564 <__aeabi_i2d>
 800b750:	4602      	mov	r2, r0
 800b752:	460b      	mov	r3, r1
 800b754:	ec43 2b18 	vmov	d8, r2, r3
 800b758:	a367      	add	r3, pc, #412	; (adr r3, 800b8f8 <__ieee754_rem_pio2+0x300>)
 800b75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b75e:	f7f4 ff6b 	bl	8000638 <__aeabi_dmul>
 800b762:	4602      	mov	r2, r0
 800b764:	460b      	mov	r3, r1
 800b766:	4620      	mov	r0, r4
 800b768:	4629      	mov	r1, r5
 800b76a:	f7f4 fdad 	bl	80002c8 <__aeabi_dsub>
 800b76e:	a364      	add	r3, pc, #400	; (adr r3, 800b900 <__ieee754_rem_pio2+0x308>)
 800b770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b774:	4606      	mov	r6, r0
 800b776:	460f      	mov	r7, r1
 800b778:	ec51 0b18 	vmov	r0, r1, d8
 800b77c:	f7f4 ff5c 	bl	8000638 <__aeabi_dmul>
 800b780:	f1bb 0f1f 	cmp.w	fp, #31
 800b784:	4604      	mov	r4, r0
 800b786:	460d      	mov	r5, r1
 800b788:	dc0d      	bgt.n	800b7a6 <__ieee754_rem_pio2+0x1ae>
 800b78a:	4b6e      	ldr	r3, [pc, #440]	; (800b944 <__ieee754_rem_pio2+0x34c>)
 800b78c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b794:	4543      	cmp	r3, r8
 800b796:	d006      	beq.n	800b7a6 <__ieee754_rem_pio2+0x1ae>
 800b798:	4622      	mov	r2, r4
 800b79a:	462b      	mov	r3, r5
 800b79c:	4630      	mov	r0, r6
 800b79e:	4639      	mov	r1, r7
 800b7a0:	f7f4 fd92 	bl	80002c8 <__aeabi_dsub>
 800b7a4:	e00e      	b.n	800b7c4 <__ieee754_rem_pio2+0x1cc>
 800b7a6:	462b      	mov	r3, r5
 800b7a8:	4622      	mov	r2, r4
 800b7aa:	4630      	mov	r0, r6
 800b7ac:	4639      	mov	r1, r7
 800b7ae:	f7f4 fd8b 	bl	80002c8 <__aeabi_dsub>
 800b7b2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b7b6:	9303      	str	r3, [sp, #12]
 800b7b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7bc:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b7c0:	2b10      	cmp	r3, #16
 800b7c2:	dc02      	bgt.n	800b7ca <__ieee754_rem_pio2+0x1d2>
 800b7c4:	e9ca 0100 	strd	r0, r1, [sl]
 800b7c8:	e039      	b.n	800b83e <__ieee754_rem_pio2+0x246>
 800b7ca:	a34f      	add	r3, pc, #316	; (adr r3, 800b908 <__ieee754_rem_pio2+0x310>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	ec51 0b18 	vmov	r0, r1, d8
 800b7d4:	f7f4 ff30 	bl	8000638 <__aeabi_dmul>
 800b7d8:	4604      	mov	r4, r0
 800b7da:	460d      	mov	r5, r1
 800b7dc:	4602      	mov	r2, r0
 800b7de:	460b      	mov	r3, r1
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	f7f4 fd70 	bl	80002c8 <__aeabi_dsub>
 800b7e8:	4602      	mov	r2, r0
 800b7ea:	460b      	mov	r3, r1
 800b7ec:	4680      	mov	r8, r0
 800b7ee:	4689      	mov	r9, r1
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	4639      	mov	r1, r7
 800b7f4:	f7f4 fd68 	bl	80002c8 <__aeabi_dsub>
 800b7f8:	4622      	mov	r2, r4
 800b7fa:	462b      	mov	r3, r5
 800b7fc:	f7f4 fd64 	bl	80002c8 <__aeabi_dsub>
 800b800:	a343      	add	r3, pc, #268	; (adr r3, 800b910 <__ieee754_rem_pio2+0x318>)
 800b802:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b806:	4604      	mov	r4, r0
 800b808:	460d      	mov	r5, r1
 800b80a:	ec51 0b18 	vmov	r0, r1, d8
 800b80e:	f7f4 ff13 	bl	8000638 <__aeabi_dmul>
 800b812:	4622      	mov	r2, r4
 800b814:	462b      	mov	r3, r5
 800b816:	f7f4 fd57 	bl	80002c8 <__aeabi_dsub>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	4604      	mov	r4, r0
 800b820:	460d      	mov	r5, r1
 800b822:	4640      	mov	r0, r8
 800b824:	4649      	mov	r1, r9
 800b826:	f7f4 fd4f 	bl	80002c8 <__aeabi_dsub>
 800b82a:	9a03      	ldr	r2, [sp, #12]
 800b82c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b830:	1ad3      	subs	r3, r2, r3
 800b832:	2b31      	cmp	r3, #49	; 0x31
 800b834:	dc24      	bgt.n	800b880 <__ieee754_rem_pio2+0x288>
 800b836:	e9ca 0100 	strd	r0, r1, [sl]
 800b83a:	4646      	mov	r6, r8
 800b83c:	464f      	mov	r7, r9
 800b83e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b842:	4630      	mov	r0, r6
 800b844:	4642      	mov	r2, r8
 800b846:	464b      	mov	r3, r9
 800b848:	4639      	mov	r1, r7
 800b84a:	f7f4 fd3d 	bl	80002c8 <__aeabi_dsub>
 800b84e:	462b      	mov	r3, r5
 800b850:	4622      	mov	r2, r4
 800b852:	f7f4 fd39 	bl	80002c8 <__aeabi_dsub>
 800b856:	9b02      	ldr	r3, [sp, #8]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b85e:	f6bf af0b 	bge.w	800b678 <__ieee754_rem_pio2+0x80>
 800b862:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b866:	f8ca 3004 	str.w	r3, [sl, #4]
 800b86a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b86e:	f8ca 8000 	str.w	r8, [sl]
 800b872:	f8ca 0008 	str.w	r0, [sl, #8]
 800b876:	f8ca 300c 	str.w	r3, [sl, #12]
 800b87a:	f1cb 0b00 	rsb	fp, fp, #0
 800b87e:	e6fb      	b.n	800b678 <__ieee754_rem_pio2+0x80>
 800b880:	a327      	add	r3, pc, #156	; (adr r3, 800b920 <__ieee754_rem_pio2+0x328>)
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	ec51 0b18 	vmov	r0, r1, d8
 800b88a:	f7f4 fed5 	bl	8000638 <__aeabi_dmul>
 800b88e:	4604      	mov	r4, r0
 800b890:	460d      	mov	r5, r1
 800b892:	4602      	mov	r2, r0
 800b894:	460b      	mov	r3, r1
 800b896:	4640      	mov	r0, r8
 800b898:	4649      	mov	r1, r9
 800b89a:	f7f4 fd15 	bl	80002c8 <__aeabi_dsub>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	460b      	mov	r3, r1
 800b8a2:	4606      	mov	r6, r0
 800b8a4:	460f      	mov	r7, r1
 800b8a6:	4640      	mov	r0, r8
 800b8a8:	4649      	mov	r1, r9
 800b8aa:	f7f4 fd0d 	bl	80002c8 <__aeabi_dsub>
 800b8ae:	4622      	mov	r2, r4
 800b8b0:	462b      	mov	r3, r5
 800b8b2:	f7f4 fd09 	bl	80002c8 <__aeabi_dsub>
 800b8b6:	a31c      	add	r3, pc, #112	; (adr r3, 800b928 <__ieee754_rem_pio2+0x330>)
 800b8b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8bc:	4604      	mov	r4, r0
 800b8be:	460d      	mov	r5, r1
 800b8c0:	ec51 0b18 	vmov	r0, r1, d8
 800b8c4:	f7f4 feb8 	bl	8000638 <__aeabi_dmul>
 800b8c8:	4622      	mov	r2, r4
 800b8ca:	462b      	mov	r3, r5
 800b8cc:	f7f4 fcfc 	bl	80002c8 <__aeabi_dsub>
 800b8d0:	4604      	mov	r4, r0
 800b8d2:	460d      	mov	r5, r1
 800b8d4:	e760      	b.n	800b798 <__ieee754_rem_pio2+0x1a0>
 800b8d6:	4b1c      	ldr	r3, [pc, #112]	; (800b948 <__ieee754_rem_pio2+0x350>)
 800b8d8:	4598      	cmp	r8, r3
 800b8da:	dd37      	ble.n	800b94c <__ieee754_rem_pio2+0x354>
 800b8dc:	ee10 2a10 	vmov	r2, s0
 800b8e0:	462b      	mov	r3, r5
 800b8e2:	4620      	mov	r0, r4
 800b8e4:	4629      	mov	r1, r5
 800b8e6:	f7f4 fcef 	bl	80002c8 <__aeabi_dsub>
 800b8ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b8ee:	e9ca 0100 	strd	r0, r1, [sl]
 800b8f2:	e695      	b.n	800b620 <__ieee754_rem_pio2+0x28>
 800b8f4:	f3af 8000 	nop.w
 800b8f8:	54400000 	.word	0x54400000
 800b8fc:	3ff921fb 	.word	0x3ff921fb
 800b900:	1a626331 	.word	0x1a626331
 800b904:	3dd0b461 	.word	0x3dd0b461
 800b908:	1a600000 	.word	0x1a600000
 800b90c:	3dd0b461 	.word	0x3dd0b461
 800b910:	2e037073 	.word	0x2e037073
 800b914:	3ba3198a 	.word	0x3ba3198a
 800b918:	6dc9c883 	.word	0x6dc9c883
 800b91c:	3fe45f30 	.word	0x3fe45f30
 800b920:	2e000000 	.word	0x2e000000
 800b924:	3ba3198a 	.word	0x3ba3198a
 800b928:	252049c1 	.word	0x252049c1
 800b92c:	397b839a 	.word	0x397b839a
 800b930:	3fe921fb 	.word	0x3fe921fb
 800b934:	4002d97b 	.word	0x4002d97b
 800b938:	3ff921fb 	.word	0x3ff921fb
 800b93c:	413921fb 	.word	0x413921fb
 800b940:	3fe00000 	.word	0x3fe00000
 800b944:	0800c744 	.word	0x0800c744
 800b948:	7fefffff 	.word	0x7fefffff
 800b94c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b950:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b954:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b958:	4620      	mov	r0, r4
 800b95a:	460d      	mov	r5, r1
 800b95c:	f7f5 f91c 	bl	8000b98 <__aeabi_d2iz>
 800b960:	f7f4 fe00 	bl	8000564 <__aeabi_i2d>
 800b964:	4602      	mov	r2, r0
 800b966:	460b      	mov	r3, r1
 800b968:	4620      	mov	r0, r4
 800b96a:	4629      	mov	r1, r5
 800b96c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b970:	f7f4 fcaa 	bl	80002c8 <__aeabi_dsub>
 800b974:	4b21      	ldr	r3, [pc, #132]	; (800b9fc <__ieee754_rem_pio2+0x404>)
 800b976:	2200      	movs	r2, #0
 800b978:	f7f4 fe5e 	bl	8000638 <__aeabi_dmul>
 800b97c:	460d      	mov	r5, r1
 800b97e:	4604      	mov	r4, r0
 800b980:	f7f5 f90a 	bl	8000b98 <__aeabi_d2iz>
 800b984:	f7f4 fdee 	bl	8000564 <__aeabi_i2d>
 800b988:	4602      	mov	r2, r0
 800b98a:	460b      	mov	r3, r1
 800b98c:	4620      	mov	r0, r4
 800b98e:	4629      	mov	r1, r5
 800b990:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b994:	f7f4 fc98 	bl	80002c8 <__aeabi_dsub>
 800b998:	4b18      	ldr	r3, [pc, #96]	; (800b9fc <__ieee754_rem_pio2+0x404>)
 800b99a:	2200      	movs	r2, #0
 800b99c:	f7f4 fe4c 	bl	8000638 <__aeabi_dmul>
 800b9a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9a4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b9a8:	2703      	movs	r7, #3
 800b9aa:	2400      	movs	r4, #0
 800b9ac:	2500      	movs	r5, #0
 800b9ae:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b9b2:	4622      	mov	r2, r4
 800b9b4:	462b      	mov	r3, r5
 800b9b6:	46b9      	mov	r9, r7
 800b9b8:	3f01      	subs	r7, #1
 800b9ba:	f7f5 f8a5 	bl	8000b08 <__aeabi_dcmpeq>
 800b9be:	2800      	cmp	r0, #0
 800b9c0:	d1f5      	bne.n	800b9ae <__ieee754_rem_pio2+0x3b6>
 800b9c2:	4b0f      	ldr	r3, [pc, #60]	; (800ba00 <__ieee754_rem_pio2+0x408>)
 800b9c4:	9301      	str	r3, [sp, #4]
 800b9c6:	2302      	movs	r3, #2
 800b9c8:	9300      	str	r3, [sp, #0]
 800b9ca:	4632      	mov	r2, r6
 800b9cc:	464b      	mov	r3, r9
 800b9ce:	4651      	mov	r1, sl
 800b9d0:	a804      	add	r0, sp, #16
 800b9d2:	f000 f821 	bl	800ba18 <__kernel_rem_pio2>
 800b9d6:	9b02      	ldr	r3, [sp, #8]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	4683      	mov	fp, r0
 800b9dc:	f6bf ae4c 	bge.w	800b678 <__ieee754_rem_pio2+0x80>
 800b9e0:	e9da 2100 	ldrd	r2, r1, [sl]
 800b9e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9e8:	e9ca 2300 	strd	r2, r3, [sl]
 800b9ec:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b9f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b9f4:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b9f8:	e73f      	b.n	800b87a <__ieee754_rem_pio2+0x282>
 800b9fa:	bf00      	nop
 800b9fc:	41700000 	.word	0x41700000
 800ba00:	0800c7c4 	.word	0x0800c7c4

0800ba04 <fabs>:
 800ba04:	ec51 0b10 	vmov	r0, r1, d0
 800ba08:	ee10 2a10 	vmov	r2, s0
 800ba0c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba10:	ec43 2b10 	vmov	d0, r2, r3
 800ba14:	4770      	bx	lr
	...

0800ba18 <__kernel_rem_pio2>:
 800ba18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba1c:	ed2d 8b02 	vpush	{d8}
 800ba20:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ba24:	f112 0f14 	cmn.w	r2, #20
 800ba28:	9306      	str	r3, [sp, #24]
 800ba2a:	9104      	str	r1, [sp, #16]
 800ba2c:	4bc2      	ldr	r3, [pc, #776]	; (800bd38 <__kernel_rem_pio2+0x320>)
 800ba2e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ba30:	9009      	str	r0, [sp, #36]	; 0x24
 800ba32:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba36:	9300      	str	r3, [sp, #0]
 800ba38:	9b06      	ldr	r3, [sp, #24]
 800ba3a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba3e:	bfa8      	it	ge
 800ba40:	1ed4      	subge	r4, r2, #3
 800ba42:	9305      	str	r3, [sp, #20]
 800ba44:	bfb2      	itee	lt
 800ba46:	2400      	movlt	r4, #0
 800ba48:	2318      	movge	r3, #24
 800ba4a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ba4e:	f06f 0317 	mvn.w	r3, #23
 800ba52:	fb04 3303 	mla	r3, r4, r3, r3
 800ba56:	eb03 0a02 	add.w	sl, r3, r2
 800ba5a:	9b00      	ldr	r3, [sp, #0]
 800ba5c:	9a05      	ldr	r2, [sp, #20]
 800ba5e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800bd28 <__kernel_rem_pio2+0x310>
 800ba62:	eb03 0802 	add.w	r8, r3, r2
 800ba66:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ba68:	1aa7      	subs	r7, r4, r2
 800ba6a:	ae20      	add	r6, sp, #128	; 0x80
 800ba6c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ba70:	2500      	movs	r5, #0
 800ba72:	4545      	cmp	r5, r8
 800ba74:	dd13      	ble.n	800ba9e <__kernel_rem_pio2+0x86>
 800ba76:	9b06      	ldr	r3, [sp, #24]
 800ba78:	aa20      	add	r2, sp, #128	; 0x80
 800ba7a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ba7e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800ba82:	f04f 0800 	mov.w	r8, #0
 800ba86:	9b00      	ldr	r3, [sp, #0]
 800ba88:	4598      	cmp	r8, r3
 800ba8a:	dc31      	bgt.n	800baf0 <__kernel_rem_pio2+0xd8>
 800ba8c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800bd28 <__kernel_rem_pio2+0x310>
 800ba90:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800ba94:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba98:	462f      	mov	r7, r5
 800ba9a:	2600      	movs	r6, #0
 800ba9c:	e01b      	b.n	800bad6 <__kernel_rem_pio2+0xbe>
 800ba9e:	42ef      	cmn	r7, r5
 800baa0:	d407      	bmi.n	800bab2 <__kernel_rem_pio2+0x9a>
 800baa2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800baa6:	f7f4 fd5d 	bl	8000564 <__aeabi_i2d>
 800baaa:	e8e6 0102 	strd	r0, r1, [r6], #8
 800baae:	3501      	adds	r5, #1
 800bab0:	e7df      	b.n	800ba72 <__kernel_rem_pio2+0x5a>
 800bab2:	ec51 0b18 	vmov	r0, r1, d8
 800bab6:	e7f8      	b.n	800baaa <__kernel_rem_pio2+0x92>
 800bab8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800babc:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bac0:	f7f4 fdba 	bl	8000638 <__aeabi_dmul>
 800bac4:	4602      	mov	r2, r0
 800bac6:	460b      	mov	r3, r1
 800bac8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bacc:	f7f4 fbfe 	bl	80002cc <__adddf3>
 800bad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bad4:	3601      	adds	r6, #1
 800bad6:	9b05      	ldr	r3, [sp, #20]
 800bad8:	429e      	cmp	r6, r3
 800bada:	f1a7 0708 	sub.w	r7, r7, #8
 800bade:	ddeb      	ble.n	800bab8 <__kernel_rem_pio2+0xa0>
 800bae0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bae4:	f108 0801 	add.w	r8, r8, #1
 800bae8:	ecab 7b02 	vstmia	fp!, {d7}
 800baec:	3508      	adds	r5, #8
 800baee:	e7ca      	b.n	800ba86 <__kernel_rem_pio2+0x6e>
 800baf0:	9b00      	ldr	r3, [sp, #0]
 800baf2:	aa0c      	add	r2, sp, #48	; 0x30
 800baf4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800baf8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bafa:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bafc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bb00:	9c00      	ldr	r4, [sp, #0]
 800bb02:	930a      	str	r3, [sp, #40]	; 0x28
 800bb04:	00e3      	lsls	r3, r4, #3
 800bb06:	9308      	str	r3, [sp, #32]
 800bb08:	ab98      	add	r3, sp, #608	; 0x260
 800bb0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb0e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bb12:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800bb16:	ab70      	add	r3, sp, #448	; 0x1c0
 800bb18:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bb1c:	46c3      	mov	fp, r8
 800bb1e:	46a1      	mov	r9, r4
 800bb20:	f1b9 0f00 	cmp.w	r9, #0
 800bb24:	f1a5 0508 	sub.w	r5, r5, #8
 800bb28:	dc77      	bgt.n	800bc1a <__kernel_rem_pio2+0x202>
 800bb2a:	ec47 6b10 	vmov	d0, r6, r7
 800bb2e:	4650      	mov	r0, sl
 800bb30:	f000 fac2 	bl	800c0b8 <scalbn>
 800bb34:	ec57 6b10 	vmov	r6, r7, d0
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bb3e:	ee10 0a10 	vmov	r0, s0
 800bb42:	4639      	mov	r1, r7
 800bb44:	f7f4 fd78 	bl	8000638 <__aeabi_dmul>
 800bb48:	ec41 0b10 	vmov	d0, r0, r1
 800bb4c:	f000 fb34 	bl	800c1b8 <floor>
 800bb50:	4b7a      	ldr	r3, [pc, #488]	; (800bd3c <__kernel_rem_pio2+0x324>)
 800bb52:	ec51 0b10 	vmov	r0, r1, d0
 800bb56:	2200      	movs	r2, #0
 800bb58:	f7f4 fd6e 	bl	8000638 <__aeabi_dmul>
 800bb5c:	4602      	mov	r2, r0
 800bb5e:	460b      	mov	r3, r1
 800bb60:	4630      	mov	r0, r6
 800bb62:	4639      	mov	r1, r7
 800bb64:	f7f4 fbb0 	bl	80002c8 <__aeabi_dsub>
 800bb68:	460f      	mov	r7, r1
 800bb6a:	4606      	mov	r6, r0
 800bb6c:	f7f5 f814 	bl	8000b98 <__aeabi_d2iz>
 800bb70:	9002      	str	r0, [sp, #8]
 800bb72:	f7f4 fcf7 	bl	8000564 <__aeabi_i2d>
 800bb76:	4602      	mov	r2, r0
 800bb78:	460b      	mov	r3, r1
 800bb7a:	4630      	mov	r0, r6
 800bb7c:	4639      	mov	r1, r7
 800bb7e:	f7f4 fba3 	bl	80002c8 <__aeabi_dsub>
 800bb82:	f1ba 0f00 	cmp.w	sl, #0
 800bb86:	4606      	mov	r6, r0
 800bb88:	460f      	mov	r7, r1
 800bb8a:	dd6d      	ble.n	800bc68 <__kernel_rem_pio2+0x250>
 800bb8c:	1e61      	subs	r1, r4, #1
 800bb8e:	ab0c      	add	r3, sp, #48	; 0x30
 800bb90:	9d02      	ldr	r5, [sp, #8]
 800bb92:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bb96:	f1ca 0018 	rsb	r0, sl, #24
 800bb9a:	fa43 f200 	asr.w	r2, r3, r0
 800bb9e:	4415      	add	r5, r2
 800bba0:	4082      	lsls	r2, r0
 800bba2:	1a9b      	subs	r3, r3, r2
 800bba4:	aa0c      	add	r2, sp, #48	; 0x30
 800bba6:	9502      	str	r5, [sp, #8]
 800bba8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bbac:	f1ca 0217 	rsb	r2, sl, #23
 800bbb0:	fa43 fb02 	asr.w	fp, r3, r2
 800bbb4:	f1bb 0f00 	cmp.w	fp, #0
 800bbb8:	dd65      	ble.n	800bc86 <__kernel_rem_pio2+0x26e>
 800bbba:	9b02      	ldr	r3, [sp, #8]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	3301      	adds	r3, #1
 800bbc0:	9302      	str	r3, [sp, #8]
 800bbc2:	4615      	mov	r5, r2
 800bbc4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bbc8:	4294      	cmp	r4, r2
 800bbca:	f300 809f 	bgt.w	800bd0c <__kernel_rem_pio2+0x2f4>
 800bbce:	f1ba 0f00 	cmp.w	sl, #0
 800bbd2:	dd07      	ble.n	800bbe4 <__kernel_rem_pio2+0x1cc>
 800bbd4:	f1ba 0f01 	cmp.w	sl, #1
 800bbd8:	f000 80c1 	beq.w	800bd5e <__kernel_rem_pio2+0x346>
 800bbdc:	f1ba 0f02 	cmp.w	sl, #2
 800bbe0:	f000 80c7 	beq.w	800bd72 <__kernel_rem_pio2+0x35a>
 800bbe4:	f1bb 0f02 	cmp.w	fp, #2
 800bbe8:	d14d      	bne.n	800bc86 <__kernel_rem_pio2+0x26e>
 800bbea:	4632      	mov	r2, r6
 800bbec:	463b      	mov	r3, r7
 800bbee:	4954      	ldr	r1, [pc, #336]	; (800bd40 <__kernel_rem_pio2+0x328>)
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	f7f4 fb69 	bl	80002c8 <__aeabi_dsub>
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	460f      	mov	r7, r1
 800bbfa:	2d00      	cmp	r5, #0
 800bbfc:	d043      	beq.n	800bc86 <__kernel_rem_pio2+0x26e>
 800bbfe:	4650      	mov	r0, sl
 800bc00:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800bd30 <__kernel_rem_pio2+0x318>
 800bc04:	f000 fa58 	bl	800c0b8 <scalbn>
 800bc08:	4630      	mov	r0, r6
 800bc0a:	4639      	mov	r1, r7
 800bc0c:	ec53 2b10 	vmov	r2, r3, d0
 800bc10:	f7f4 fb5a 	bl	80002c8 <__aeabi_dsub>
 800bc14:	4606      	mov	r6, r0
 800bc16:	460f      	mov	r7, r1
 800bc18:	e035      	b.n	800bc86 <__kernel_rem_pio2+0x26e>
 800bc1a:	4b4a      	ldr	r3, [pc, #296]	; (800bd44 <__kernel_rem_pio2+0x32c>)
 800bc1c:	2200      	movs	r2, #0
 800bc1e:	4630      	mov	r0, r6
 800bc20:	4639      	mov	r1, r7
 800bc22:	f7f4 fd09 	bl	8000638 <__aeabi_dmul>
 800bc26:	f7f4 ffb7 	bl	8000b98 <__aeabi_d2iz>
 800bc2a:	f7f4 fc9b 	bl	8000564 <__aeabi_i2d>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	460b      	mov	r3, r1
 800bc32:	ec43 2b18 	vmov	d8, r2, r3
 800bc36:	4b44      	ldr	r3, [pc, #272]	; (800bd48 <__kernel_rem_pio2+0x330>)
 800bc38:	2200      	movs	r2, #0
 800bc3a:	f7f4 fcfd 	bl	8000638 <__aeabi_dmul>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	4630      	mov	r0, r6
 800bc44:	4639      	mov	r1, r7
 800bc46:	f7f4 fb3f 	bl	80002c8 <__aeabi_dsub>
 800bc4a:	f7f4 ffa5 	bl	8000b98 <__aeabi_d2iz>
 800bc4e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc52:	f84b 0b04 	str.w	r0, [fp], #4
 800bc56:	ec51 0b18 	vmov	r0, r1, d8
 800bc5a:	f7f4 fb37 	bl	80002cc <__adddf3>
 800bc5e:	f109 39ff 	add.w	r9, r9, #4294967295
 800bc62:	4606      	mov	r6, r0
 800bc64:	460f      	mov	r7, r1
 800bc66:	e75b      	b.n	800bb20 <__kernel_rem_pio2+0x108>
 800bc68:	d106      	bne.n	800bc78 <__kernel_rem_pio2+0x260>
 800bc6a:	1e63      	subs	r3, r4, #1
 800bc6c:	aa0c      	add	r2, sp, #48	; 0x30
 800bc6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc72:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800bc76:	e79d      	b.n	800bbb4 <__kernel_rem_pio2+0x19c>
 800bc78:	4b34      	ldr	r3, [pc, #208]	; (800bd4c <__kernel_rem_pio2+0x334>)
 800bc7a:	2200      	movs	r2, #0
 800bc7c:	f7f4 ff62 	bl	8000b44 <__aeabi_dcmpge>
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d140      	bne.n	800bd06 <__kernel_rem_pio2+0x2ee>
 800bc84:	4683      	mov	fp, r0
 800bc86:	2200      	movs	r2, #0
 800bc88:	2300      	movs	r3, #0
 800bc8a:	4630      	mov	r0, r6
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	f7f4 ff3b 	bl	8000b08 <__aeabi_dcmpeq>
 800bc92:	2800      	cmp	r0, #0
 800bc94:	f000 80c1 	beq.w	800be1a <__kernel_rem_pio2+0x402>
 800bc98:	1e65      	subs	r5, r4, #1
 800bc9a:	462b      	mov	r3, r5
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	9900      	ldr	r1, [sp, #0]
 800bca0:	428b      	cmp	r3, r1
 800bca2:	da6d      	bge.n	800bd80 <__kernel_rem_pio2+0x368>
 800bca4:	2a00      	cmp	r2, #0
 800bca6:	f000 808a 	beq.w	800bdbe <__kernel_rem_pio2+0x3a6>
 800bcaa:	ab0c      	add	r3, sp, #48	; 0x30
 800bcac:	f1aa 0a18 	sub.w	sl, sl, #24
 800bcb0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	f000 80ae 	beq.w	800be16 <__kernel_rem_pio2+0x3fe>
 800bcba:	4650      	mov	r0, sl
 800bcbc:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800bd30 <__kernel_rem_pio2+0x318>
 800bcc0:	f000 f9fa 	bl	800c0b8 <scalbn>
 800bcc4:	1c6b      	adds	r3, r5, #1
 800bcc6:	00da      	lsls	r2, r3, #3
 800bcc8:	9205      	str	r2, [sp, #20]
 800bcca:	ec57 6b10 	vmov	r6, r7, d0
 800bcce:	aa70      	add	r2, sp, #448	; 0x1c0
 800bcd0:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800bd44 <__kernel_rem_pio2+0x32c>
 800bcd4:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800bcd8:	462c      	mov	r4, r5
 800bcda:	f04f 0800 	mov.w	r8, #0
 800bcde:	2c00      	cmp	r4, #0
 800bce0:	f280 80d4 	bge.w	800be8c <__kernel_rem_pio2+0x474>
 800bce4:	462c      	mov	r4, r5
 800bce6:	2c00      	cmp	r4, #0
 800bce8:	f2c0 8102 	blt.w	800bef0 <__kernel_rem_pio2+0x4d8>
 800bcec:	4b18      	ldr	r3, [pc, #96]	; (800bd50 <__kernel_rem_pio2+0x338>)
 800bcee:	461e      	mov	r6, r3
 800bcf0:	ab70      	add	r3, sp, #448	; 0x1c0
 800bcf2:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800bcf6:	1b2b      	subs	r3, r5, r4
 800bcf8:	f04f 0900 	mov.w	r9, #0
 800bcfc:	f04f 0a00 	mov.w	sl, #0
 800bd00:	2700      	movs	r7, #0
 800bd02:	9306      	str	r3, [sp, #24]
 800bd04:	e0e6      	b.n	800bed4 <__kernel_rem_pio2+0x4bc>
 800bd06:	f04f 0b02 	mov.w	fp, #2
 800bd0a:	e756      	b.n	800bbba <__kernel_rem_pio2+0x1a2>
 800bd0c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd10:	bb05      	cbnz	r5, 800bd54 <__kernel_rem_pio2+0x33c>
 800bd12:	b123      	cbz	r3, 800bd1e <__kernel_rem_pio2+0x306>
 800bd14:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bd18:	f8c8 3000 	str.w	r3, [r8]
 800bd1c:	2301      	movs	r3, #1
 800bd1e:	3201      	adds	r2, #1
 800bd20:	f108 0804 	add.w	r8, r8, #4
 800bd24:	461d      	mov	r5, r3
 800bd26:	e74f      	b.n	800bbc8 <__kernel_rem_pio2+0x1b0>
	...
 800bd34:	3ff00000 	.word	0x3ff00000
 800bd38:	0800c910 	.word	0x0800c910
 800bd3c:	40200000 	.word	0x40200000
 800bd40:	3ff00000 	.word	0x3ff00000
 800bd44:	3e700000 	.word	0x3e700000
 800bd48:	41700000 	.word	0x41700000
 800bd4c:	3fe00000 	.word	0x3fe00000
 800bd50:	0800c8d0 	.word	0x0800c8d0
 800bd54:	1acb      	subs	r3, r1, r3
 800bd56:	f8c8 3000 	str.w	r3, [r8]
 800bd5a:	462b      	mov	r3, r5
 800bd5c:	e7df      	b.n	800bd1e <__kernel_rem_pio2+0x306>
 800bd5e:	1e62      	subs	r2, r4, #1
 800bd60:	ab0c      	add	r3, sp, #48	; 0x30
 800bd62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd66:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bd6a:	a90c      	add	r1, sp, #48	; 0x30
 800bd6c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bd70:	e738      	b.n	800bbe4 <__kernel_rem_pio2+0x1cc>
 800bd72:	1e62      	subs	r2, r4, #1
 800bd74:	ab0c      	add	r3, sp, #48	; 0x30
 800bd76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd7a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bd7e:	e7f4      	b.n	800bd6a <__kernel_rem_pio2+0x352>
 800bd80:	a90c      	add	r1, sp, #48	; 0x30
 800bd82:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bd86:	3b01      	subs	r3, #1
 800bd88:	430a      	orrs	r2, r1
 800bd8a:	e788      	b.n	800bc9e <__kernel_rem_pio2+0x286>
 800bd8c:	3301      	adds	r3, #1
 800bd8e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bd92:	2900      	cmp	r1, #0
 800bd94:	d0fa      	beq.n	800bd8c <__kernel_rem_pio2+0x374>
 800bd96:	9a08      	ldr	r2, [sp, #32]
 800bd98:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800bd9c:	446a      	add	r2, sp
 800bd9e:	3a98      	subs	r2, #152	; 0x98
 800bda0:	9208      	str	r2, [sp, #32]
 800bda2:	9a06      	ldr	r2, [sp, #24]
 800bda4:	a920      	add	r1, sp, #128	; 0x80
 800bda6:	18a2      	adds	r2, r4, r2
 800bda8:	18e3      	adds	r3, r4, r3
 800bdaa:	f104 0801 	add.w	r8, r4, #1
 800bdae:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800bdb2:	9302      	str	r3, [sp, #8]
 800bdb4:	9b02      	ldr	r3, [sp, #8]
 800bdb6:	4543      	cmp	r3, r8
 800bdb8:	da04      	bge.n	800bdc4 <__kernel_rem_pio2+0x3ac>
 800bdba:	461c      	mov	r4, r3
 800bdbc:	e6a2      	b.n	800bb04 <__kernel_rem_pio2+0xec>
 800bdbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	e7e4      	b.n	800bd8e <__kernel_rem_pio2+0x376>
 800bdc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bdca:	f7f4 fbcb 	bl	8000564 <__aeabi_i2d>
 800bdce:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bdd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bdd4:	46ab      	mov	fp, r5
 800bdd6:	461c      	mov	r4, r3
 800bdd8:	f04f 0900 	mov.w	r9, #0
 800bddc:	2600      	movs	r6, #0
 800bdde:	2700      	movs	r7, #0
 800bde0:	9b05      	ldr	r3, [sp, #20]
 800bde2:	4599      	cmp	r9, r3
 800bde4:	dd06      	ble.n	800bdf4 <__kernel_rem_pio2+0x3dc>
 800bde6:	9b08      	ldr	r3, [sp, #32]
 800bde8:	e8e3 6702 	strd	r6, r7, [r3], #8
 800bdec:	f108 0801 	add.w	r8, r8, #1
 800bdf0:	9308      	str	r3, [sp, #32]
 800bdf2:	e7df      	b.n	800bdb4 <__kernel_rem_pio2+0x39c>
 800bdf4:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bdf8:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bdfc:	f7f4 fc1c 	bl	8000638 <__aeabi_dmul>
 800be00:	4602      	mov	r2, r0
 800be02:	460b      	mov	r3, r1
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	f7f4 fa60 	bl	80002cc <__adddf3>
 800be0c:	f109 0901 	add.w	r9, r9, #1
 800be10:	4606      	mov	r6, r0
 800be12:	460f      	mov	r7, r1
 800be14:	e7e4      	b.n	800bde0 <__kernel_rem_pio2+0x3c8>
 800be16:	3d01      	subs	r5, #1
 800be18:	e747      	b.n	800bcaa <__kernel_rem_pio2+0x292>
 800be1a:	ec47 6b10 	vmov	d0, r6, r7
 800be1e:	f1ca 0000 	rsb	r0, sl, #0
 800be22:	f000 f949 	bl	800c0b8 <scalbn>
 800be26:	ec57 6b10 	vmov	r6, r7, d0
 800be2a:	4ba0      	ldr	r3, [pc, #640]	; (800c0ac <__kernel_rem_pio2+0x694>)
 800be2c:	ee10 0a10 	vmov	r0, s0
 800be30:	2200      	movs	r2, #0
 800be32:	4639      	mov	r1, r7
 800be34:	f7f4 fe86 	bl	8000b44 <__aeabi_dcmpge>
 800be38:	b1f8      	cbz	r0, 800be7a <__kernel_rem_pio2+0x462>
 800be3a:	4b9d      	ldr	r3, [pc, #628]	; (800c0b0 <__kernel_rem_pio2+0x698>)
 800be3c:	2200      	movs	r2, #0
 800be3e:	4630      	mov	r0, r6
 800be40:	4639      	mov	r1, r7
 800be42:	f7f4 fbf9 	bl	8000638 <__aeabi_dmul>
 800be46:	f7f4 fea7 	bl	8000b98 <__aeabi_d2iz>
 800be4a:	4680      	mov	r8, r0
 800be4c:	f7f4 fb8a 	bl	8000564 <__aeabi_i2d>
 800be50:	4b96      	ldr	r3, [pc, #600]	; (800c0ac <__kernel_rem_pio2+0x694>)
 800be52:	2200      	movs	r2, #0
 800be54:	f7f4 fbf0 	bl	8000638 <__aeabi_dmul>
 800be58:	460b      	mov	r3, r1
 800be5a:	4602      	mov	r2, r0
 800be5c:	4639      	mov	r1, r7
 800be5e:	4630      	mov	r0, r6
 800be60:	f7f4 fa32 	bl	80002c8 <__aeabi_dsub>
 800be64:	f7f4 fe98 	bl	8000b98 <__aeabi_d2iz>
 800be68:	1c65      	adds	r5, r4, #1
 800be6a:	ab0c      	add	r3, sp, #48	; 0x30
 800be6c:	f10a 0a18 	add.w	sl, sl, #24
 800be70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800be74:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800be78:	e71f      	b.n	800bcba <__kernel_rem_pio2+0x2a2>
 800be7a:	4630      	mov	r0, r6
 800be7c:	4639      	mov	r1, r7
 800be7e:	f7f4 fe8b 	bl	8000b98 <__aeabi_d2iz>
 800be82:	ab0c      	add	r3, sp, #48	; 0x30
 800be84:	4625      	mov	r5, r4
 800be86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800be8a:	e716      	b.n	800bcba <__kernel_rem_pio2+0x2a2>
 800be8c:	ab0c      	add	r3, sp, #48	; 0x30
 800be8e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800be92:	f7f4 fb67 	bl	8000564 <__aeabi_i2d>
 800be96:	4632      	mov	r2, r6
 800be98:	463b      	mov	r3, r7
 800be9a:	f7f4 fbcd 	bl	8000638 <__aeabi_dmul>
 800be9e:	4642      	mov	r2, r8
 800bea0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bea4:	464b      	mov	r3, r9
 800bea6:	4630      	mov	r0, r6
 800bea8:	4639      	mov	r1, r7
 800beaa:	f7f4 fbc5 	bl	8000638 <__aeabi_dmul>
 800beae:	3c01      	subs	r4, #1
 800beb0:	4606      	mov	r6, r0
 800beb2:	460f      	mov	r7, r1
 800beb4:	e713      	b.n	800bcde <__kernel_rem_pio2+0x2c6>
 800beb6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800beba:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800bebe:	f7f4 fbbb 	bl	8000638 <__aeabi_dmul>
 800bec2:	4602      	mov	r2, r0
 800bec4:	460b      	mov	r3, r1
 800bec6:	4648      	mov	r0, r9
 800bec8:	4651      	mov	r1, sl
 800beca:	f7f4 f9ff 	bl	80002cc <__adddf3>
 800bece:	3701      	adds	r7, #1
 800bed0:	4681      	mov	r9, r0
 800bed2:	468a      	mov	sl, r1
 800bed4:	9b00      	ldr	r3, [sp, #0]
 800bed6:	429f      	cmp	r7, r3
 800bed8:	dc02      	bgt.n	800bee0 <__kernel_rem_pio2+0x4c8>
 800beda:	9b06      	ldr	r3, [sp, #24]
 800bedc:	429f      	cmp	r7, r3
 800bede:	ddea      	ble.n	800beb6 <__kernel_rem_pio2+0x49e>
 800bee0:	9a06      	ldr	r2, [sp, #24]
 800bee2:	ab48      	add	r3, sp, #288	; 0x120
 800bee4:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800bee8:	e9c6 9a00 	strd	r9, sl, [r6]
 800beec:	3c01      	subs	r4, #1
 800beee:	e6fa      	b.n	800bce6 <__kernel_rem_pio2+0x2ce>
 800bef0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	dc0b      	bgt.n	800bf0e <__kernel_rem_pio2+0x4f6>
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	dc39      	bgt.n	800bf6e <__kernel_rem_pio2+0x556>
 800befa:	d05d      	beq.n	800bfb8 <__kernel_rem_pio2+0x5a0>
 800befc:	9b02      	ldr	r3, [sp, #8]
 800befe:	f003 0007 	and.w	r0, r3, #7
 800bf02:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bf06:	ecbd 8b02 	vpop	{d8}
 800bf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf0e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bf10:	2b03      	cmp	r3, #3
 800bf12:	d1f3      	bne.n	800befc <__kernel_rem_pio2+0x4e4>
 800bf14:	9b05      	ldr	r3, [sp, #20]
 800bf16:	9500      	str	r5, [sp, #0]
 800bf18:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bf1c:	eb0d 0403 	add.w	r4, sp, r3
 800bf20:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800bf24:	46a2      	mov	sl, r4
 800bf26:	9b00      	ldr	r3, [sp, #0]
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f1aa 0a08 	sub.w	sl, sl, #8
 800bf2e:	dc69      	bgt.n	800c004 <__kernel_rem_pio2+0x5ec>
 800bf30:	46aa      	mov	sl, r5
 800bf32:	f1ba 0f01 	cmp.w	sl, #1
 800bf36:	f1a4 0408 	sub.w	r4, r4, #8
 800bf3a:	f300 8083 	bgt.w	800c044 <__kernel_rem_pio2+0x62c>
 800bf3e:	9c05      	ldr	r4, [sp, #20]
 800bf40:	ab48      	add	r3, sp, #288	; 0x120
 800bf42:	441c      	add	r4, r3
 800bf44:	2000      	movs	r0, #0
 800bf46:	2100      	movs	r1, #0
 800bf48:	2d01      	cmp	r5, #1
 800bf4a:	f300 809a 	bgt.w	800c082 <__kernel_rem_pio2+0x66a>
 800bf4e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800bf52:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800bf56:	f1bb 0f00 	cmp.w	fp, #0
 800bf5a:	f040 8098 	bne.w	800c08e <__kernel_rem_pio2+0x676>
 800bf5e:	9b04      	ldr	r3, [sp, #16]
 800bf60:	e9c3 7800 	strd	r7, r8, [r3]
 800bf64:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bf68:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bf6c:	e7c6      	b.n	800befc <__kernel_rem_pio2+0x4e4>
 800bf6e:	9e05      	ldr	r6, [sp, #20]
 800bf70:	ab48      	add	r3, sp, #288	; 0x120
 800bf72:	441e      	add	r6, r3
 800bf74:	462c      	mov	r4, r5
 800bf76:	2000      	movs	r0, #0
 800bf78:	2100      	movs	r1, #0
 800bf7a:	2c00      	cmp	r4, #0
 800bf7c:	da33      	bge.n	800bfe6 <__kernel_rem_pio2+0x5ce>
 800bf7e:	f1bb 0f00 	cmp.w	fp, #0
 800bf82:	d036      	beq.n	800bff2 <__kernel_rem_pio2+0x5da>
 800bf84:	4602      	mov	r2, r0
 800bf86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf8a:	9c04      	ldr	r4, [sp, #16]
 800bf8c:	e9c4 2300 	strd	r2, r3, [r4]
 800bf90:	4602      	mov	r2, r0
 800bf92:	460b      	mov	r3, r1
 800bf94:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bf98:	f7f4 f996 	bl	80002c8 <__aeabi_dsub>
 800bf9c:	ae4a      	add	r6, sp, #296	; 0x128
 800bf9e:	2401      	movs	r4, #1
 800bfa0:	42a5      	cmp	r5, r4
 800bfa2:	da29      	bge.n	800bff8 <__kernel_rem_pio2+0x5e0>
 800bfa4:	f1bb 0f00 	cmp.w	fp, #0
 800bfa8:	d002      	beq.n	800bfb0 <__kernel_rem_pio2+0x598>
 800bfaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfae:	4619      	mov	r1, r3
 800bfb0:	9b04      	ldr	r3, [sp, #16]
 800bfb2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bfb6:	e7a1      	b.n	800befc <__kernel_rem_pio2+0x4e4>
 800bfb8:	9c05      	ldr	r4, [sp, #20]
 800bfba:	ab48      	add	r3, sp, #288	; 0x120
 800bfbc:	441c      	add	r4, r3
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	2100      	movs	r1, #0
 800bfc2:	2d00      	cmp	r5, #0
 800bfc4:	da09      	bge.n	800bfda <__kernel_rem_pio2+0x5c2>
 800bfc6:	f1bb 0f00 	cmp.w	fp, #0
 800bfca:	d002      	beq.n	800bfd2 <__kernel_rem_pio2+0x5ba>
 800bfcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	9b04      	ldr	r3, [sp, #16]
 800bfd4:	e9c3 0100 	strd	r0, r1, [r3]
 800bfd8:	e790      	b.n	800befc <__kernel_rem_pio2+0x4e4>
 800bfda:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bfde:	f7f4 f975 	bl	80002cc <__adddf3>
 800bfe2:	3d01      	subs	r5, #1
 800bfe4:	e7ed      	b.n	800bfc2 <__kernel_rem_pio2+0x5aa>
 800bfe6:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800bfea:	f7f4 f96f 	bl	80002cc <__adddf3>
 800bfee:	3c01      	subs	r4, #1
 800bff0:	e7c3      	b.n	800bf7a <__kernel_rem_pio2+0x562>
 800bff2:	4602      	mov	r2, r0
 800bff4:	460b      	mov	r3, r1
 800bff6:	e7c8      	b.n	800bf8a <__kernel_rem_pio2+0x572>
 800bff8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bffc:	f7f4 f966 	bl	80002cc <__adddf3>
 800c000:	3401      	adds	r4, #1
 800c002:	e7cd      	b.n	800bfa0 <__kernel_rem_pio2+0x588>
 800c004:	e9da 8900 	ldrd	r8, r9, [sl]
 800c008:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c00c:	9b00      	ldr	r3, [sp, #0]
 800c00e:	3b01      	subs	r3, #1
 800c010:	9300      	str	r3, [sp, #0]
 800c012:	4632      	mov	r2, r6
 800c014:	463b      	mov	r3, r7
 800c016:	4640      	mov	r0, r8
 800c018:	4649      	mov	r1, r9
 800c01a:	f7f4 f957 	bl	80002cc <__adddf3>
 800c01e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	4640      	mov	r0, r8
 800c028:	4649      	mov	r1, r9
 800c02a:	f7f4 f94d 	bl	80002c8 <__aeabi_dsub>
 800c02e:	4632      	mov	r2, r6
 800c030:	463b      	mov	r3, r7
 800c032:	f7f4 f94b 	bl	80002cc <__adddf3>
 800c036:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c03a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c03e:	ed8a 7b00 	vstr	d7, [sl]
 800c042:	e770      	b.n	800bf26 <__kernel_rem_pio2+0x50e>
 800c044:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c048:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c04c:	4640      	mov	r0, r8
 800c04e:	4632      	mov	r2, r6
 800c050:	463b      	mov	r3, r7
 800c052:	4649      	mov	r1, r9
 800c054:	f7f4 f93a 	bl	80002cc <__adddf3>
 800c058:	e9cd 0100 	strd	r0, r1, [sp]
 800c05c:	4602      	mov	r2, r0
 800c05e:	460b      	mov	r3, r1
 800c060:	4640      	mov	r0, r8
 800c062:	4649      	mov	r1, r9
 800c064:	f7f4 f930 	bl	80002c8 <__aeabi_dsub>
 800c068:	4632      	mov	r2, r6
 800c06a:	463b      	mov	r3, r7
 800c06c:	f7f4 f92e 	bl	80002cc <__adddf3>
 800c070:	ed9d 7b00 	vldr	d7, [sp]
 800c074:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c078:	ed84 7b00 	vstr	d7, [r4]
 800c07c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c080:	e757      	b.n	800bf32 <__kernel_rem_pio2+0x51a>
 800c082:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c086:	f7f4 f921 	bl	80002cc <__adddf3>
 800c08a:	3d01      	subs	r5, #1
 800c08c:	e75c      	b.n	800bf48 <__kernel_rem_pio2+0x530>
 800c08e:	9b04      	ldr	r3, [sp, #16]
 800c090:	9a04      	ldr	r2, [sp, #16]
 800c092:	601f      	str	r7, [r3, #0]
 800c094:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c098:	605c      	str	r4, [r3, #4]
 800c09a:	609d      	str	r5, [r3, #8]
 800c09c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c0a0:	60d3      	str	r3, [r2, #12]
 800c0a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0a6:	6110      	str	r0, [r2, #16]
 800c0a8:	6153      	str	r3, [r2, #20]
 800c0aa:	e727      	b.n	800befc <__kernel_rem_pio2+0x4e4>
 800c0ac:	41700000 	.word	0x41700000
 800c0b0:	3e700000 	.word	0x3e700000
 800c0b4:	00000000 	.word	0x00000000

0800c0b8 <scalbn>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	ec55 4b10 	vmov	r4, r5, d0
 800c0be:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c0c2:	4606      	mov	r6, r0
 800c0c4:	462b      	mov	r3, r5
 800c0c6:	b999      	cbnz	r1, 800c0f0 <scalbn+0x38>
 800c0c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c0cc:	4323      	orrs	r3, r4
 800c0ce:	d03f      	beq.n	800c150 <scalbn+0x98>
 800c0d0:	4b35      	ldr	r3, [pc, #212]	; (800c1a8 <scalbn+0xf0>)
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	ee10 0a10 	vmov	r0, s0
 800c0d8:	2200      	movs	r2, #0
 800c0da:	f7f4 faad 	bl	8000638 <__aeabi_dmul>
 800c0de:	4b33      	ldr	r3, [pc, #204]	; (800c1ac <scalbn+0xf4>)
 800c0e0:	429e      	cmp	r6, r3
 800c0e2:	4604      	mov	r4, r0
 800c0e4:	460d      	mov	r5, r1
 800c0e6:	da10      	bge.n	800c10a <scalbn+0x52>
 800c0e8:	a327      	add	r3, pc, #156	; (adr r3, 800c188 <scalbn+0xd0>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	e01f      	b.n	800c130 <scalbn+0x78>
 800c0f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c0f4:	4291      	cmp	r1, r2
 800c0f6:	d10c      	bne.n	800c112 <scalbn+0x5a>
 800c0f8:	ee10 2a10 	vmov	r2, s0
 800c0fc:	4620      	mov	r0, r4
 800c0fe:	4629      	mov	r1, r5
 800c100:	f7f4 f8e4 	bl	80002cc <__adddf3>
 800c104:	4604      	mov	r4, r0
 800c106:	460d      	mov	r5, r1
 800c108:	e022      	b.n	800c150 <scalbn+0x98>
 800c10a:	460b      	mov	r3, r1
 800c10c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c110:	3936      	subs	r1, #54	; 0x36
 800c112:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c116:	4296      	cmp	r6, r2
 800c118:	dd0d      	ble.n	800c136 <scalbn+0x7e>
 800c11a:	2d00      	cmp	r5, #0
 800c11c:	a11c      	add	r1, pc, #112	; (adr r1, 800c190 <scalbn+0xd8>)
 800c11e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c122:	da02      	bge.n	800c12a <scalbn+0x72>
 800c124:	a11c      	add	r1, pc, #112	; (adr r1, 800c198 <scalbn+0xe0>)
 800c126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c12a:	a319      	add	r3, pc, #100	; (adr r3, 800c190 <scalbn+0xd8>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f7f4 fa82 	bl	8000638 <__aeabi_dmul>
 800c134:	e7e6      	b.n	800c104 <scalbn+0x4c>
 800c136:	1872      	adds	r2, r6, r1
 800c138:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c13c:	428a      	cmp	r2, r1
 800c13e:	dcec      	bgt.n	800c11a <scalbn+0x62>
 800c140:	2a00      	cmp	r2, #0
 800c142:	dd08      	ble.n	800c156 <scalbn+0x9e>
 800c144:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c148:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c14c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c150:	ec45 4b10 	vmov	d0, r4, r5
 800c154:	bd70      	pop	{r4, r5, r6, pc}
 800c156:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c15a:	da08      	bge.n	800c16e <scalbn+0xb6>
 800c15c:	2d00      	cmp	r5, #0
 800c15e:	a10a      	add	r1, pc, #40	; (adr r1, 800c188 <scalbn+0xd0>)
 800c160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c164:	dac0      	bge.n	800c0e8 <scalbn+0x30>
 800c166:	a10e      	add	r1, pc, #56	; (adr r1, 800c1a0 <scalbn+0xe8>)
 800c168:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c16c:	e7bc      	b.n	800c0e8 <scalbn+0x30>
 800c16e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c172:	3236      	adds	r2, #54	; 0x36
 800c174:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c178:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c17c:	4620      	mov	r0, r4
 800c17e:	4b0c      	ldr	r3, [pc, #48]	; (800c1b0 <scalbn+0xf8>)
 800c180:	2200      	movs	r2, #0
 800c182:	e7d5      	b.n	800c130 <scalbn+0x78>
 800c184:	f3af 8000 	nop.w
 800c188:	c2f8f359 	.word	0xc2f8f359
 800c18c:	01a56e1f 	.word	0x01a56e1f
 800c190:	8800759c 	.word	0x8800759c
 800c194:	7e37e43c 	.word	0x7e37e43c
 800c198:	8800759c 	.word	0x8800759c
 800c19c:	fe37e43c 	.word	0xfe37e43c
 800c1a0:	c2f8f359 	.word	0xc2f8f359
 800c1a4:	81a56e1f 	.word	0x81a56e1f
 800c1a8:	43500000 	.word	0x43500000
 800c1ac:	ffff3cb0 	.word	0xffff3cb0
 800c1b0:	3c900000 	.word	0x3c900000
 800c1b4:	00000000 	.word	0x00000000

0800c1b8 <floor>:
 800c1b8:	ec51 0b10 	vmov	r0, r1, d0
 800c1bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c1c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1c4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c1c8:	2e13      	cmp	r6, #19
 800c1ca:	ee10 5a10 	vmov	r5, s0
 800c1ce:	ee10 8a10 	vmov	r8, s0
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	dc31      	bgt.n	800c23a <floor+0x82>
 800c1d6:	2e00      	cmp	r6, #0
 800c1d8:	da14      	bge.n	800c204 <floor+0x4c>
 800c1da:	a333      	add	r3, pc, #204	; (adr r3, 800c2a8 <floor+0xf0>)
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	f7f4 f874 	bl	80002cc <__adddf3>
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	f7f4 fcb6 	bl	8000b58 <__aeabi_dcmpgt>
 800c1ec:	b138      	cbz	r0, 800c1fe <floor+0x46>
 800c1ee:	2c00      	cmp	r4, #0
 800c1f0:	da53      	bge.n	800c29a <floor+0xe2>
 800c1f2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c1f6:	4325      	orrs	r5, r4
 800c1f8:	d052      	beq.n	800c2a0 <floor+0xe8>
 800c1fa:	4c2d      	ldr	r4, [pc, #180]	; (800c2b0 <floor+0xf8>)
 800c1fc:	2500      	movs	r5, #0
 800c1fe:	4621      	mov	r1, r4
 800c200:	4628      	mov	r0, r5
 800c202:	e024      	b.n	800c24e <floor+0x96>
 800c204:	4f2b      	ldr	r7, [pc, #172]	; (800c2b4 <floor+0xfc>)
 800c206:	4137      	asrs	r7, r6
 800c208:	ea01 0307 	and.w	r3, r1, r7
 800c20c:	4303      	orrs	r3, r0
 800c20e:	d01e      	beq.n	800c24e <floor+0x96>
 800c210:	a325      	add	r3, pc, #148	; (adr r3, 800c2a8 <floor+0xf0>)
 800c212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c216:	f7f4 f859 	bl	80002cc <__adddf3>
 800c21a:	2200      	movs	r2, #0
 800c21c:	2300      	movs	r3, #0
 800c21e:	f7f4 fc9b 	bl	8000b58 <__aeabi_dcmpgt>
 800c222:	2800      	cmp	r0, #0
 800c224:	d0eb      	beq.n	800c1fe <floor+0x46>
 800c226:	2c00      	cmp	r4, #0
 800c228:	bfbe      	ittt	lt
 800c22a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c22e:	4133      	asrlt	r3, r6
 800c230:	18e4      	addlt	r4, r4, r3
 800c232:	ea24 0407 	bic.w	r4, r4, r7
 800c236:	2500      	movs	r5, #0
 800c238:	e7e1      	b.n	800c1fe <floor+0x46>
 800c23a:	2e33      	cmp	r6, #51	; 0x33
 800c23c:	dd0b      	ble.n	800c256 <floor+0x9e>
 800c23e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c242:	d104      	bne.n	800c24e <floor+0x96>
 800c244:	ee10 2a10 	vmov	r2, s0
 800c248:	460b      	mov	r3, r1
 800c24a:	f7f4 f83f 	bl	80002cc <__adddf3>
 800c24e:	ec41 0b10 	vmov	d0, r0, r1
 800c252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c256:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c25a:	f04f 37ff 	mov.w	r7, #4294967295
 800c25e:	40df      	lsrs	r7, r3
 800c260:	4238      	tst	r0, r7
 800c262:	d0f4      	beq.n	800c24e <floor+0x96>
 800c264:	a310      	add	r3, pc, #64	; (adr r3, 800c2a8 <floor+0xf0>)
 800c266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c26a:	f7f4 f82f 	bl	80002cc <__adddf3>
 800c26e:	2200      	movs	r2, #0
 800c270:	2300      	movs	r3, #0
 800c272:	f7f4 fc71 	bl	8000b58 <__aeabi_dcmpgt>
 800c276:	2800      	cmp	r0, #0
 800c278:	d0c1      	beq.n	800c1fe <floor+0x46>
 800c27a:	2c00      	cmp	r4, #0
 800c27c:	da0a      	bge.n	800c294 <floor+0xdc>
 800c27e:	2e14      	cmp	r6, #20
 800c280:	d101      	bne.n	800c286 <floor+0xce>
 800c282:	3401      	adds	r4, #1
 800c284:	e006      	b.n	800c294 <floor+0xdc>
 800c286:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c28a:	2301      	movs	r3, #1
 800c28c:	40b3      	lsls	r3, r6
 800c28e:	441d      	add	r5, r3
 800c290:	45a8      	cmp	r8, r5
 800c292:	d8f6      	bhi.n	800c282 <floor+0xca>
 800c294:	ea25 0507 	bic.w	r5, r5, r7
 800c298:	e7b1      	b.n	800c1fe <floor+0x46>
 800c29a:	2500      	movs	r5, #0
 800c29c:	462c      	mov	r4, r5
 800c29e:	e7ae      	b.n	800c1fe <floor+0x46>
 800c2a0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c2a4:	e7ab      	b.n	800c1fe <floor+0x46>
 800c2a6:	bf00      	nop
 800c2a8:	8800759c 	.word	0x8800759c
 800c2ac:	7e37e43c 	.word	0x7e37e43c
 800c2b0:	bff00000 	.word	0xbff00000
 800c2b4:	000fffff 	.word	0x000fffff

0800c2b8 <_init>:
 800c2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ba:	bf00      	nop
 800c2bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2be:	bc08      	pop	{r3}
 800c2c0:	469e      	mov	lr, r3
 800c2c2:	4770      	bx	lr

0800c2c4 <_fini>:
 800c2c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2c6:	bf00      	nop
 800c2c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ca:	bc08      	pop	{r3}
 800c2cc:	469e      	mov	lr, r3
 800c2ce:	4770      	bx	lr
