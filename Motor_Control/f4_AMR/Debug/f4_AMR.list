
f4_AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c130  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800c300  0800c300  0001c300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c950  0800c950  00020220  2**0
                  CONTENTS
  4 .ARM          00000008  0800c950  0800c950  0001c950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c958  0800c958  00020220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c958  0800c958  0001c958  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c95c  0800c95c  0001c95c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800c960  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005dc  20000220  0800cb80  00020220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007fc  0800cb80  000207fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f363  00000000  00000000  00020293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002240  00000000  00000000  0002f5f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00031838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b2a  00000000  00000000  00032680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022e99  00000000  00000000  000331aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ac0  00000000  00000000  00056043  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3c82  00000000  00000000  00066b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000054dc  00000000  00000000  0013a788  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0013fc64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c2e8 	.word	0x0800c2e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800c2e8 	.word	0x0800c2e8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800103c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001040:	2b00      	cmp	r3, #0
 8001042:	db0a      	blt.n	800105a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	b2da      	uxtb	r2, r3
 8001048:	490c      	ldr	r1, [pc, #48]	; (800107c <__NVIC_SetPriority+0x4c>)
 800104a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104e:	0112      	lsls	r2, r2, #4
 8001050:	b2d2      	uxtb	r2, r2
 8001052:	440b      	add	r3, r1
 8001054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001058:	e00a      	b.n	8001070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4908      	ldr	r1, [pc, #32]	; (8001080 <__NVIC_SetPriority+0x50>)
 8001060:	79fb      	ldrb	r3, [r7, #7]
 8001062:	f003 030f 	and.w	r3, r3, #15
 8001066:	3b04      	subs	r3, #4
 8001068:	0112      	lsls	r2, r2, #4
 800106a:	b2d2      	uxtb	r2, r2
 800106c:	440b      	add	r3, r1
 800106e:	761a      	strb	r2, [r3, #24]
}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000e100 	.word	0xe000e100
 8001080:	e000ed00 	.word	0xe000ed00

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ffc2 	bl	8001030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d106      	bne.n	80010e4 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80010d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010da:	2201      	movs	r2, #1
 80010dc:	4907      	ldr	r1, [pc, #28]	; (80010fc <__io_putchar+0x34>)
 80010de:	4808      	ldr	r0, [pc, #32]	; (8001100 <__io_putchar+0x38>)
 80010e0:	f004 fb50 	bl	8005784 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 80010e4:	1d39      	adds	r1, r7, #4
 80010e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ea:	2201      	movs	r2, #1
 80010ec:	4804      	ldr	r0, [pc, #16]	; (8001100 <__io_putchar+0x38>)
 80010ee:	f004 fb49 	bl	8005784 <HAL_UART_Transmit>
	return ch;
 80010f2:	687b      	ldr	r3, [r7, #4]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3708      	adds	r7, #8
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	0800c300 	.word	0x0800c300
 8001100:	200003a4 	.word	0x200003a4
 8001104:	00000000 	.word	0x00000000

08001108 <radiansToDegrees>:
/******************** Time *********************/
extern volatile uint32_t msTicks;
uint32_t time=0;

/******************** O.W *********************/
float radiansToDegrees(float radians) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	ed87 0a01 	vstr	s0, [r7, #4]
	return radians * (180.0 / M_PI);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fa38 	bl	8000588 <__aeabi_f2d>
 8001118:	a309      	add	r3, pc, #36	; (adr r3, 8001140 <radiansToDegrees+0x38>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	f7ff fa8b 	bl	8000638 <__aeabi_dmul>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff fd7d 	bl	8000c28 <__aeabi_d2f>
 800112e:	4603      	mov	r3, r0
 8001130:	ee07 3a90 	vmov	s15, r3
}
 8001134:	eeb0 0a67 	vmov.f32	s0, s15
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	1a63c1f8 	.word	0x1a63c1f8
 8001144:	404ca5dc 	.word	0x404ca5dc

08001148 <angleToPulse>:

uint16_t angleToPulse(uint8_t angle) {
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
	return (MIN_PULSE + (MAX_PULSE - MIN_PULSE) * (angle * 0.55555556) / 180);
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fa05 	bl	8000564 <__aeabi_i2d>
 800115a:	a319      	add	r3, pc, #100	; (adr r3, 80011c0 <angleToPulse+0x78>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f7ff fa6a 	bl	8000638 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4610      	mov	r0, r2
 800116a:	4619      	mov	r1, r3
 800116c:	a316      	add	r3, pc, #88	; (adr r3, 80011c8 <angleToPulse+0x80>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	f7ff fa61 	bl	8000638 <__aeabi_dmul>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f04f 0200 	mov.w	r2, #0
 8001182:	4b0d      	ldr	r3, [pc, #52]	; (80011b8 <angleToPulse+0x70>)
 8001184:	f7ff fb82 	bl	800088c <__aeabi_ddiv>
 8001188:	4602      	mov	r2, r0
 800118a:	460b      	mov	r3, r1
 800118c:	4610      	mov	r0, r2
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 0200 	mov.w	r2, #0
 8001194:	4b09      	ldr	r3, [pc, #36]	; (80011bc <angleToPulse+0x74>)
 8001196:	f7ff f899 	bl	80002cc <__adddf3>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4610      	mov	r0, r2
 80011a0:	4619      	mov	r1, r3
 80011a2:	f7ff fd21 	bl	8000be8 <__aeabi_d2uiz>
 80011a6:	4603      	mov	r3, r0
 80011a8:	b29b      	uxth	r3, r3
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	f3af 8000 	nop.w
 80011b8:	40668000 	.word	0x40668000
 80011bc:	407f4000 	.word	0x407f4000
 80011c0:	7429f36e 	.word	0x7429f36e
 80011c4:	3fe1c71c 	.word	0x3fe1c71c
 80011c8:	00000000 	.word	0x00000000
 80011cc:	40ab5800 	.word	0x40ab5800

080011d0 <limitAngle>:

uint8_t limitAngle(uint8_t angle, uint8_t minAngle, uint8_t maxAngle) {
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
 80011da:	460b      	mov	r3, r1
 80011dc:	71bb      	strb	r3, [r7, #6]
 80011de:	4613      	mov	r3, r2
 80011e0:	717b      	strb	r3, [r7, #5]
	if (angle <= minAngle) return minAngle;
 80011e2:	79fa      	ldrb	r2, [r7, #7]
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d801      	bhi.n	80011ee <limitAngle+0x1e>
 80011ea:	79bb      	ldrb	r3, [r7, #6]
 80011ec:	e006      	b.n	80011fc <limitAngle+0x2c>
	if (angle >= maxAngle) return maxAngle;
 80011ee:	79fa      	ldrb	r2, [r7, #7]
 80011f0:	797b      	ldrb	r3, [r7, #5]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d301      	bcc.n	80011fa <limitAngle+0x2a>
 80011f6:	797b      	ldrb	r3, [r7, #5]
 80011f8:	e000      	b.n	80011fc <limitAngle+0x2c>
	return angle;
 80011fa:	79fb      	ldrb	r3, [r7, #7]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <setMotorAngle>:

void setMotorAngle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle, uint8_t minAngle, uint8_t maxAngle) {
 8001208:	b580      	push	{r7, lr}
 800120a:	b086      	sub	sp, #24
 800120c:	af00      	add	r7, sp, #0
 800120e:	60f8      	str	r0, [r7, #12]
 8001210:	60b9      	str	r1, [r7, #8]
 8001212:	4611      	mov	r1, r2
 8001214:	461a      	mov	r2, r3
 8001216:	460b      	mov	r3, r1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	4613      	mov	r3, r2
 800121c:	71bb      	strb	r3, [r7, #6]
	uint8_t limitedAngle = limitAngle(angle, minAngle, maxAngle);
 800121e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001222:	79b9      	ldrb	r1, [r7, #6]
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffd2 	bl	80011d0 <limitAngle>
 800122c:	4603      	mov	r3, r0
 800122e:	75fb      	strb	r3, [r7, #23]
	uint16_t pulse = angleToPulse(limitedAngle);
 8001230:	7dfb      	ldrb	r3, [r7, #23]
 8001232:	4618      	mov	r0, r3
 8001234:	f7ff ff88 	bl	8001148 <angleToPulse>
 8001238:	4603      	mov	r3, r0
 800123a:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d104      	bne.n	800124c <setMotorAngle+0x44>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	8aba      	ldrh	r2, [r7, #20]
 8001248:	635a      	str	r2, [r3, #52]	; 0x34
}
 800124a:	e013      	b.n	8001274 <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b04      	cmp	r3, #4
 8001250:	d104      	bne.n	800125c <setMotorAngle+0x54>
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	8abb      	ldrh	r3, [r7, #20]
 8001258:	6393      	str	r3, [r2, #56]	; 0x38
}
 800125a:	e00b      	b.n	8001274 <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b08      	cmp	r3, #8
 8001260:	d104      	bne.n	800126c <setMotorAngle+0x64>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	8abb      	ldrh	r3, [r7, #20]
 8001268:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800126a:	e003      	b.n	8001274 <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	8abb      	ldrh	r3, [r7, #20]
 8001272:	6413      	str	r3, [r2, #64]	; 0x40
}
 8001274:	bf00      	nop
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	0000      	movs	r0, r0
	...

08001280 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001280:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001284:	ed2d 8b0a 	vpush	{d8-d12}
 8001288:	b0a0      	sub	sp, #128	; 0x80
 800128a:	af16      	add	r7, sp, #88	; 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128c:	f002 f828 	bl	80032e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001290:	f000 fcb0 	bl	8001bf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001294:	f000 ff66 	bl	8002164 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001298:	f000 ff3a 	bl	8002110 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800129c:	f000 fd18 	bl	8001cd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012a0:	f000 fd8c 	bl	8001dbc <MX_TIM3_Init>
  MX_TIM4_Init();
 80012a4:	f000 fe0c 	bl	8001ec0 <MX_TIM4_Init>
  MX_TIM14_Init();
 80012a8:	f000 fee4 	bl	8002074 <MX_TIM14_Init>
  MX_TIM5_Init();
 80012ac:	f000 fe7e 	bl	8001fac <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, shield_power_Pin, GPIO_PIN_SET);
 80012b0:	2201      	movs	r2, #1
 80012b2:	2140      	movs	r1, #64	; 0x40
 80012b4:	48b2      	ldr	r0, [pc, #712]	; (8001580 <main+0x300>)
 80012b6:	f002 fbd5 	bl	8003a64 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 80012ba:	48b2      	ldr	r0, [pc, #712]	; (8001584 <main+0x304>)
 80012bc:	f003 fa3c 	bl	8004738 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012c0:	2108      	movs	r1, #8
 80012c2:	48b0      	ldr	r0, [pc, #704]	; (8001584 <main+0x304>)
 80012c4:	f003 faf8 	bl	80048b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012c8:	2100      	movs	r1, #0
 80012ca:	48af      	ldr	r0, [pc, #700]	; (8001588 <main+0x308>)
 80012cc:	f003 faf4 	bl	80048b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012d0:	2104      	movs	r1, #4
 80012d2:	48ad      	ldr	r0, [pc, #692]	; (8001588 <main+0x308>)
 80012d4:	f003 faf0 	bl	80048b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80012d8:	2100      	movs	r1, #0
 80012da:	48ac      	ldr	r0, [pc, #688]	; (800158c <main+0x30c>)
 80012dc:	f003 faec 	bl	80048b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 80012e0:	2100      	movs	r1, #0
 80012e2:	48ab      	ldr	r0, [pc, #684]	; (8001590 <main+0x310>)
 80012e4:	f003 fae8 	bl	80048b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 80012e8:	2100      	movs	r1, #0
 80012ea:	48aa      	ldr	r0, [pc, #680]	; (8001594 <main+0x314>)
 80012ec:	f003 fae4 	bl	80048b8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 80012f0:	2104      	movs	r1, #4
 80012f2:	48a8      	ldr	r0, [pc, #672]	; (8001594 <main+0x314>)
 80012f4:	f003 fae0 	bl	80048b8 <HAL_TIM_PWM_Start>

	motorControl(control_1, control_2);
 80012f8:	4ba7      	ldr	r3, [pc, #668]	; (8001598 <main+0x318>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4aa7      	ldr	r2, [pc, #668]	; (800159c <main+0x31c>)
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	4611      	mov	r1, r2
 8001302:	4618      	mov	r0, r3
 8001304:	f001 f93e 	bl	8002584 <motorControl>
	motorControl_r(control_1_r, control_2_r);
 8001308:	4ba5      	ldr	r3, [pc, #660]	; (80015a0 <main+0x320>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4aa5      	ldr	r2, [pc, #660]	; (80015a4 <main+0x324>)
 800130e:	6812      	ldr	r2, [r2, #0]
 8001310:	4611      	mov	r1, r2
 8001312:	4618      	mov	r0, r3
 8001314:	f001 f964 	bl	80025e0 <motorControl_r>
	SystemCoreClockUpdate();
 8001318:	f001 ff38 	bl	800318c <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 800131c:	4ba2      	ldr	r3, [pc, #648]	; (80015a8 <main+0x328>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4aa2      	ldr	r2, [pc, #648]	; (80015ac <main+0x32c>)
 8001322:	fba2 2303 	umull	r2, r3, r2, r3
 8001326:	099b      	lsrs	r3, r3, #6
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff feab 	bl	8001084 <SysTick_Config>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rx_data, 1);
 800132e:	2201      	movs	r2, #1
 8001330:	499f      	ldr	r1, [pc, #636]	; (80015b0 <main+0x330>)
 8001332:	48a0      	ldr	r0, [pc, #640]	; (80015b4 <main+0x334>)
 8001334:	f004 fab1 	bl	800589a <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		motorControl(control_1, control_2);
 8001338:	4b97      	ldr	r3, [pc, #604]	; (8001598 <main+0x318>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a97      	ldr	r2, [pc, #604]	; (800159c <main+0x31c>)
 800133e:	6812      	ldr	r2, [r2, #0]
 8001340:	4611      	mov	r1, r2
 8001342:	4618      	mov	r0, r3
 8001344:	f001 f91e 	bl	8002584 <motorControl>
		motorControl_r(control_1_r, control_2_r);
 8001348:	4b95      	ldr	r3, [pc, #596]	; (80015a0 <main+0x320>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a95      	ldr	r2, [pc, #596]	; (80015a4 <main+0x324>)
 800134e:	6812      	ldr	r2, [r2, #0]
 8001350:	4611      	mov	r1, r2
 8001352:	4618      	mov	r0, r3
 8001354:	f001 f944 	bl	80025e0 <motorControl_r>
		//Pwm_Left(50);
		//Pwm_Right(50);

		Pwm_Left(abs(speed));
 8001358:	4b97      	ldr	r3, [pc, #604]	; (80015b8 <main+0x338>)
 800135a:	edd3 7a00 	vldr	s15, [r3]
 800135e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001362:	ee17 3a90 	vmov	r3, s15
 8001366:	2b00      	cmp	r3, #0
 8001368:	bfb8      	it	lt
 800136a:	425b      	neglt	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	f000 ffb5 	bl	80022dc <Pwm_Left>
		Pwm_Right(abs(speed_r));
 8001372:	4b92      	ldr	r3, [pc, #584]	; (80015bc <main+0x33c>)
 8001374:	edd3 7a00 	vldr	s15, [r3]
 8001378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137c:	ee17 3a90 	vmov	r3, s15
 8001380:	2b00      	cmp	r3, #0
 8001382:	bfb8      	it	lt
 8001384:	425b      	neglt	r3, r3
 8001386:	4618      	mov	r0, r3
 8001388:	f000 ffb8 	bl	80022fc <Pwm_Right>


		/******************** Dead Reckoning ***********************/
		if(msTicks>=39){
 800138c:	4b8c      	ldr	r3, [pc, #560]	; (80015c0 <main+0x340>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	2b26      	cmp	r3, #38	; 0x26
 8001392:	d9d1      	bls.n	8001338 <main+0xb8>
			time=msTicks;
 8001394:	4b8a      	ldr	r3, [pc, #552]	; (80015c0 <main+0x340>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a8a      	ldr	r2, [pc, #552]	; (80015c4 <main+0x344>)
 800139a:	6013      	str	r3, [r2, #0]
			current_angle = ((rpm_encoderCount - pr_encoderCount) * angle);
 800139c:	4b8a      	ldr	r3, [pc, #552]	; (80015c8 <main+0x348>)
 800139e:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013a2:	4b8a      	ldr	r3, [pc, #552]	; (80015cc <main+0x34c>)
 80013a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013a8:	1a84      	subs	r4, r0, r2
 80013aa:	623c      	str	r4, [r7, #32]
 80013ac:	eb61 0303 	sbc.w	r3, r1, r3
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
 80013b2:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013b6:	f7ff f911 	bl	80005dc <__aeabi_l2d>
 80013ba:	4b85      	ldr	r3, [pc, #532]	; (80015d0 <main+0x350>)
 80013bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c0:	f7ff f93a 	bl	8000638 <__aeabi_dmul>
 80013c4:	4602      	mov	r2, r0
 80013c6:	460b      	mov	r3, r1
 80013c8:	4982      	ldr	r1, [pc, #520]	; (80015d4 <main+0x354>)
 80013ca:	e9c1 2300 	strd	r2, r3, [r1]
			current_angle_r = ((rpm_encoderCount_r - pr_encoderCount_r) * angle);
 80013ce:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <main+0x358>)
 80013d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d4:	4b81      	ldr	r3, [pc, #516]	; (80015dc <main+0x35c>)
 80013d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013da:	1a84      	subs	r4, r0, r2
 80013dc:	61bc      	str	r4, [r7, #24]
 80013de:	eb61 0303 	sbc.w	r3, r1, r3
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80013e8:	f7ff f8f8 	bl	80005dc <__aeabi_l2d>
 80013ec:	4b78      	ldr	r3, [pc, #480]	; (80015d0 <main+0x350>)
 80013ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f2:	f7ff f921 	bl	8000638 <__aeabi_dmul>
 80013f6:	4602      	mov	r2, r0
 80013f8:	460b      	mov	r3, r1
 80013fa:	4979      	ldr	r1, [pc, #484]	; (80015e0 <main+0x360>)
 80013fc:	e9c1 2300 	strd	r2, r3, [r1]

			pr_encoderCount=rpm_encoderCount;
 8001400:	4b71      	ldr	r3, [pc, #452]	; (80015c8 <main+0x348>)
 8001402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001406:	4971      	ldr	r1, [pc, #452]	; (80015cc <main+0x34c>)
 8001408:	e9c1 2300 	strd	r2, r3, [r1]
			pr_encoderCount_r=rpm_encoderCount_r;
 800140c:	4b72      	ldr	r3, [pc, #456]	; (80015d8 <main+0x358>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	4972      	ldr	r1, [pc, #456]	; (80015dc <main+0x35c>)
 8001414:	e9c1 2300 	strd	r2, r3, [r1]

			delta_s = ((current_angle_r + current_angle) * rr) / 2;
 8001418:	4b71      	ldr	r3, [pc, #452]	; (80015e0 <main+0x360>)
 800141a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800141e:	4b6d      	ldr	r3, [pc, #436]	; (80015d4 <main+0x354>)
 8001420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001424:	f7fe ff52 	bl	80002cc <__adddf3>
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4610      	mov	r0, r2
 800142e:	4619      	mov	r1, r3
 8001430:	4b6c      	ldr	r3, [pc, #432]	; (80015e4 <main+0x364>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8ff 	bl	8000638 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 0200 	mov.w	r2, #0
 8001446:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800144a:	f7ff fa1f 	bl	800088c <__aeabi_ddiv>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4965      	ldr	r1, [pc, #404]	; (80015e8 <main+0x368>)
 8001454:	e9c1 2300 	strd	r2, r3, [r1]
			delta_o = ((current_angle_r - current_angle) * rr) / ll;
 8001458:	4b61      	ldr	r3, [pc, #388]	; (80015e0 <main+0x360>)
 800145a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <main+0x354>)
 8001460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001464:	f7fe ff30 	bl	80002c8 <__aeabi_dsub>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	4b5c      	ldr	r3, [pc, #368]	; (80015e4 <main+0x364>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	f7ff f8df 	bl	8000638 <__aeabi_dmul>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4610      	mov	r0, r2
 8001480:	4619      	mov	r1, r3
 8001482:	4b5a      	ldr	r3, [pc, #360]	; (80015ec <main+0x36c>)
 8001484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001488:	f7ff fa00 	bl	800088c <__aeabi_ddiv>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4957      	ldr	r1, [pc, #348]	; (80015f0 <main+0x370>)
 8001492:	e9c1 2300 	strd	r2, r3, [r1]
			input_delta_o = previous_car_angle + (delta_o / 2);
 8001496:	4b56      	ldr	r3, [pc, #344]	; (80015f0 <main+0x370>)
 8001498:	e9d3 0100 	ldrd	r0, r1, [r3]
 800149c:	f04f 0200 	mov.w	r2, #0
 80014a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80014a4:	f7ff f9f2 	bl	800088c <__aeabi_ddiv>
 80014a8:	4602      	mov	r2, r0
 80014aa:	460b      	mov	r3, r1
 80014ac:	4610      	mov	r0, r2
 80014ae:	4619      	mov	r1, r3
 80014b0:	4b50      	ldr	r3, [pc, #320]	; (80015f4 <main+0x374>)
 80014b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b6:	f7fe ff09 	bl	80002cc <__adddf3>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	494e      	ldr	r1, [pc, #312]	; (80015f8 <main+0x378>)
 80014c0:	e9c1 2300 	strd	r2, r3, [r1]

			current_x = previous_current_x + cos((input_delta_o)) * delta_s;
 80014c4:	4b4c      	ldr	r3, [pc, #304]	; (80015f8 <main+0x378>)
 80014c6:	ed93 7b00 	vldr	d7, [r3]
 80014ca:	eeb0 0a47 	vmov.f32	s0, s14
 80014ce:	eef0 0a67 	vmov.f32	s1, s15
 80014d2:	f009 fd99 	bl	800b008 <cos>
 80014d6:	ec51 0b10 	vmov	r0, r1, d0
 80014da:	4b43      	ldr	r3, [pc, #268]	; (80015e8 <main+0x368>)
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f7ff f8aa 	bl	8000638 <__aeabi_dmul>
 80014e4:	4602      	mov	r2, r0
 80014e6:	460b      	mov	r3, r1
 80014e8:	4610      	mov	r0, r2
 80014ea:	4619      	mov	r1, r3
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <main+0x37c>)
 80014ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f2:	f7fe feeb 	bl	80002cc <__adddf3>
 80014f6:	4602      	mov	r2, r0
 80014f8:	460b      	mov	r3, r1
 80014fa:	4941      	ldr	r1, [pc, #260]	; (8001600 <main+0x380>)
 80014fc:	e9c1 2300 	strd	r2, r3, [r1]
			current_y = previous_current_y + sin((input_delta_o)) * delta_s;
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <main+0x378>)
 8001502:	ed93 7b00 	vldr	d7, [r3]
 8001506:	eeb0 0a47 	vmov.f32	s0, s14
 800150a:	eef0 0a67 	vmov.f32	s1, s15
 800150e:	f009 fdcf 	bl	800b0b0 <sin>
 8001512:	ec51 0b10 	vmov	r0, r1, d0
 8001516:	4b34      	ldr	r3, [pc, #208]	; (80015e8 <main+0x368>)
 8001518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151c:	f7ff f88c 	bl	8000638 <__aeabi_dmul>
 8001520:	4602      	mov	r2, r0
 8001522:	460b      	mov	r3, r1
 8001524:	4610      	mov	r0, r2
 8001526:	4619      	mov	r1, r3
 8001528:	4b36      	ldr	r3, [pc, #216]	; (8001604 <main+0x384>)
 800152a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800152e:	f7fe fecd 	bl	80002cc <__adddf3>
 8001532:	4602      	mov	r2, r0
 8001534:	460b      	mov	r3, r1
 8001536:	4934      	ldr	r1, [pc, #208]	; (8001608 <main+0x388>)
 8001538:	e9c1 2300 	strd	r2, r3, [r1]
			car_angle = previous_car_angle + delta_o;
 800153c:	4b2d      	ldr	r3, [pc, #180]	; (80015f4 <main+0x374>)
 800153e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001542:	4b2b      	ldr	r3, [pc, #172]	; (80015f0 <main+0x370>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe fec0 	bl	80002cc <__adddf3>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	492e      	ldr	r1, [pc, #184]	; (800160c <main+0x38c>)
 8001552:	e9c1 2300 	strd	r2, r3, [r1]

			pid_delta_o = delta_o;
 8001556:	4b26      	ldr	r3, [pc, #152]	; (80015f0 <main+0x370>)
 8001558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800155c:	492c      	ldr	r1, [pc, #176]	; (8001610 <main+0x390>)
 800155e:	e9c1 2300 	strd	r2, r3, [r1]
			dt = time;
 8001562:	4b18      	ldr	r3, [pc, #96]	; (80015c4 <main+0x344>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4618      	mov	r0, r3
 8001568:	f7fe ffec 	bl	8000544 <__aeabi_ui2d>
 800156c:	4602      	mov	r2, r0
 800156e:	460b      	mov	r3, r1
 8001570:	4928      	ldr	r1, [pc, #160]	; (8001614 <main+0x394>)
 8001572:	e9c1 2300 	strd	r2, r3, [r1]
			topic_x += (current_x - previous_current_x);
 8001576:	4b22      	ldr	r3, [pc, #136]	; (8001600 <main+0x380>)
 8001578:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157c:	e04c      	b.n	8001618 <main+0x398>
 800157e:	bf00      	nop
 8001580:	40020000 	.word	0x40020000
 8001584:	2000023c 	.word	0x2000023c
 8001588:	20000284 	.word	0x20000284
 800158c:	200002cc 	.word	0x200002cc
 8001590:	2000035c 	.word	0x2000035c
 8001594:	20000314 	.word	0x20000314
 8001598:	200004f8 	.word	0x200004f8
 800159c:	20000030 	.word	0x20000030
 80015a0:	20000034 	.word	0x20000034
 80015a4:	200004fc 	.word	0x200004fc
 80015a8:	20000038 	.word	0x20000038
 80015ac:	10624dd3 	.word	0x10624dd3
 80015b0:	20000608 	.word	0x20000608
 80015b4:	200003a4 	.word	0x200003a4
 80015b8:	20000438 	.word	0x20000438
 80015bc:	2000043c 	.word	0x2000043c
 80015c0:	200006a4 	.word	0x200006a4
 80015c4:	200006a0 	.word	0x200006a0
 80015c8:	20000408 	.word	0x20000408
 80015cc:	20000418 	.word	0x20000418
 80015d0:	20000000 	.word	0x20000000
 80015d4:	20000428 	.word	0x20000428
 80015d8:	20000410 	.word	0x20000410
 80015dc:	20000420 	.word	0x20000420
 80015e0:	20000430 	.word	0x20000430
 80015e4:	20000028 	.word	0x20000028
 80015e8:	200004c8 	.word	0x200004c8
 80015ec:	20000020 	.word	0x20000020
 80015f0:	200004d0 	.word	0x200004d0
 80015f4:	200004b0 	.word	0x200004b0
 80015f8:	200004e8 	.word	0x200004e8
 80015fc:	200004b8 	.word	0x200004b8
 8001600:	20000488 	.word	0x20000488
 8001604:	200004c0 	.word	0x200004c0
 8001608:	20000490 	.word	0x20000490
 800160c:	20000480 	.word	0x20000480
 8001610:	200004f0 	.word	0x200004f0
 8001614:	20000678 	.word	0x20000678
 8001618:	4bae      	ldr	r3, [pc, #696]	; (80018d4 <main+0x654>)
 800161a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161e:	f7fe fe53 	bl	80002c8 <__aeabi_dsub>
 8001622:	4602      	mov	r2, r0
 8001624:	460b      	mov	r3, r1
 8001626:	4610      	mov	r0, r2
 8001628:	4619      	mov	r1, r3
 800162a:	4bab      	ldr	r3, [pc, #684]	; (80018d8 <main+0x658>)
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f7fe fe4c 	bl	80002cc <__adddf3>
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	49a7      	ldr	r1, [pc, #668]	; (80018d8 <main+0x658>)
 800163a:	e9c1 2300 	strd	r2, r3, [r1]
			topic_y += (current_y - previous_current_y);
 800163e:	4ba7      	ldr	r3, [pc, #668]	; (80018dc <main+0x65c>)
 8001640:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001644:	4ba6      	ldr	r3, [pc, #664]	; (80018e0 <main+0x660>)
 8001646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800164a:	f7fe fe3d 	bl	80002c8 <__aeabi_dsub>
 800164e:	4602      	mov	r2, r0
 8001650:	460b      	mov	r3, r1
 8001652:	4610      	mov	r0, r2
 8001654:	4619      	mov	r1, r3
 8001656:	4ba3      	ldr	r3, [pc, #652]	; (80018e4 <main+0x664>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe fe36 	bl	80002cc <__adddf3>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	499f      	ldr	r1, [pc, #636]	; (80018e4 <main+0x664>)
 8001666:	e9c1 2300 	strd	r2, r3, [r1]
			topic_th += (car_angle - previous_car_angle);
 800166a:	4b9f      	ldr	r3, [pc, #636]	; (80018e8 <main+0x668>)
 800166c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001670:	4b9e      	ldr	r3, [pc, #632]	; (80018ec <main+0x66c>)
 8001672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001676:	f7fe fe27 	bl	80002c8 <__aeabi_dsub>
 800167a:	4602      	mov	r2, r0
 800167c:	460b      	mov	r3, r1
 800167e:	4610      	mov	r0, r2
 8001680:	4619      	mov	r1, r3
 8001682:	4b9b      	ldr	r3, [pc, #620]	; (80018f0 <main+0x670>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe fe20 	bl	80002cc <__adddf3>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4997      	ldr	r1, [pc, #604]	; (80018f0 <main+0x670>)
 8001692:	e9c1 2300 	strd	r2, r3, [r1]
			topic_vx = (current_x - previous_current_x)*1000/dt;
 8001696:	4b97      	ldr	r3, [pc, #604]	; (80018f4 <main+0x674>)
 8001698:	e9d3 0100 	ldrd	r0, r1, [r3]
 800169c:	4b8d      	ldr	r3, [pc, #564]	; (80018d4 <main+0x654>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7fe fe11 	bl	80002c8 <__aeabi_dsub>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4610      	mov	r0, r2
 80016ac:	4619      	mov	r1, r3
 80016ae:	f04f 0200 	mov.w	r2, #0
 80016b2:	4b91      	ldr	r3, [pc, #580]	; (80018f8 <main+0x678>)
 80016b4:	f7fe ffc0 	bl	8000638 <__aeabi_dmul>
 80016b8:	4602      	mov	r2, r0
 80016ba:	460b      	mov	r3, r1
 80016bc:	4610      	mov	r0, r2
 80016be:	4619      	mov	r1, r3
 80016c0:	4b8e      	ldr	r3, [pc, #568]	; (80018fc <main+0x67c>)
 80016c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c6:	f7ff f8e1 	bl	800088c <__aeabi_ddiv>
 80016ca:	4602      	mov	r2, r0
 80016cc:	460b      	mov	r3, r1
 80016ce:	498c      	ldr	r1, [pc, #560]	; (8001900 <main+0x680>)
 80016d0:	e9c1 2300 	strd	r2, r3, [r1]
			topic_vy = (current_y - previous_current_y)*1000/dt;
 80016d4:	4b81      	ldr	r3, [pc, #516]	; (80018dc <main+0x65c>)
 80016d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016da:	4b81      	ldr	r3, [pc, #516]	; (80018e0 <main+0x660>)
 80016dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016e0:	f7fe fdf2 	bl	80002c8 <__aeabi_dsub>
 80016e4:	4602      	mov	r2, r0
 80016e6:	460b      	mov	r3, r1
 80016e8:	4610      	mov	r0, r2
 80016ea:	4619      	mov	r1, r3
 80016ec:	f04f 0200 	mov.w	r2, #0
 80016f0:	4b81      	ldr	r3, [pc, #516]	; (80018f8 <main+0x678>)
 80016f2:	f7fe ffa1 	bl	8000638 <__aeabi_dmul>
 80016f6:	4602      	mov	r2, r0
 80016f8:	460b      	mov	r3, r1
 80016fa:	4610      	mov	r0, r2
 80016fc:	4619      	mov	r1, r3
 80016fe:	4b7f      	ldr	r3, [pc, #508]	; (80018fc <main+0x67c>)
 8001700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001704:	f7ff f8c2 	bl	800088c <__aeabi_ddiv>
 8001708:	4602      	mov	r2, r0
 800170a:	460b      	mov	r3, r1
 800170c:	497d      	ldr	r1, [pc, #500]	; (8001904 <main+0x684>)
 800170e:	e9c1 2300 	strd	r2, r3, [r1]

			printf("# %f %f %f %f %f %f | %f %f %f %f %f %f \n",topic_x,topic_y,topic_th,dt,topic_vx,topic_vy, motor_degree[0], motor_degree[1], motor_degree[2], motor_degree[3], motor_degree[4], motor_degree[5]);
 8001712:	4b71      	ldr	r3, [pc, #452]	; (80018d8 <main+0x658>)
 8001714:	ed93 7b00 	vldr	d7, [r3]
 8001718:	ed87 7b04 	vstr	d7, [r7, #16]
 800171c:	4b71      	ldr	r3, [pc, #452]	; (80018e4 <main+0x664>)
 800171e:	ed93 9b00 	vldr	d9, [r3]
 8001722:	4b73      	ldr	r3, [pc, #460]	; (80018f0 <main+0x670>)
 8001724:	ed93 ab00 	vldr	d10, [r3]
 8001728:	4b74      	ldr	r3, [pc, #464]	; (80018fc <main+0x67c>)
 800172a:	ed93 bb00 	vldr	d11, [r3]
 800172e:	4b74      	ldr	r3, [pc, #464]	; (8001900 <main+0x680>)
 8001730:	ed93 cb00 	vldr	d12, [r3]
 8001734:	4b73      	ldr	r3, [pc, #460]	; (8001904 <main+0x684>)
 8001736:	ed93 8b00 	vldr	d8, [r3]
 800173a:	4b73      	ldr	r3, [pc, #460]	; (8001908 <main+0x688>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe ff22 	bl	8000588 <__aeabi_f2d>
 8001744:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001748:	4b6f      	ldr	r3, [pc, #444]	; (8001908 <main+0x688>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe ff1b 	bl	8000588 <__aeabi_f2d>
 8001752:	e9c7 0100 	strd	r0, r1, [r7]
 8001756:	4b6c      	ldr	r3, [pc, #432]	; (8001908 <main+0x688>)
 8001758:	689b      	ldr	r3, [r3, #8]
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe ff14 	bl	8000588 <__aeabi_f2d>
 8001760:	4682      	mov	sl, r0
 8001762:	468b      	mov	fp, r1
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <main+0x688>)
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	4618      	mov	r0, r3
 800176a:	f7fe ff0d 	bl	8000588 <__aeabi_f2d>
 800176e:	4680      	mov	r8, r0
 8001770:	4689      	mov	r9, r1
 8001772:	4b65      	ldr	r3, [pc, #404]	; (8001908 <main+0x688>)
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	4618      	mov	r0, r3
 8001778:	f7fe ff06 	bl	8000588 <__aeabi_f2d>
 800177c:	4604      	mov	r4, r0
 800177e:	460d      	mov	r5, r1
 8001780:	4b61      	ldr	r3, [pc, #388]	; (8001908 <main+0x688>)
 8001782:	695b      	ldr	r3, [r3, #20]
 8001784:	4618      	mov	r0, r3
 8001786:	f7fe feff 	bl	8000588 <__aeabi_f2d>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8001792:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8001796:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800179a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 800179e:	ed97 7b00 	vldr	d7, [r7]
 80017a2:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80017a6:	ed97 7b02 	vldr	d7, [r7, #8]
 80017aa:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80017ae:	ed8d 8b08 	vstr	d8, [sp, #32]
 80017b2:	ed8d cb06 	vstr	d12, [sp, #24]
 80017b6:	ed8d bb04 	vstr	d11, [sp, #16]
 80017ba:	ed8d ab02 	vstr	d10, [sp, #8]
 80017be:	ed8d 9b00 	vstr	d9, [sp]
 80017c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80017c6:	4851      	ldr	r0, [pc, #324]	; (800190c <main+0x68c>)
 80017c8:	f006 fd3c 	bl	8008244 <iprintf>

			previous_car_angle = car_angle;
 80017cc:	4b46      	ldr	r3, [pc, #280]	; (80018e8 <main+0x668>)
 80017ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017d2:	4946      	ldr	r1, [pc, #280]	; (80018ec <main+0x66c>)
 80017d4:	e9c1 2300 	strd	r2, r3, [r1]
			previous_current_x = current_x;
 80017d8:	4b46      	ldr	r3, [pc, #280]	; (80018f4 <main+0x674>)
 80017da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017de:	493d      	ldr	r1, [pc, #244]	; (80018d4 <main+0x654>)
 80017e0:	e9c1 2300 	strd	r2, r3, [r1]
			previous_current_y = current_y;
 80017e4:	4b3d      	ldr	r3, [pc, #244]	; (80018dc <main+0x65c>)
 80017e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ea:	493d      	ldr	r1, [pc, #244]	; (80018e0 <main+0x660>)
 80017ec:	e9c1 2300 	strd	r2, r3, [r1]

			encoderCount = 0;
 80017f0:	4947      	ldr	r1, [pc, #284]	; (8001910 <main+0x690>)
 80017f2:	f04f 0200 	mov.w	r2, #0
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	e9c1 2300 	strd	r2, r3, [r1]
			encoderCount_r = 0;
 80017fe:	4945      	ldr	r1, [pc, #276]	; (8001914 <main+0x694>)
 8001800:	f04f 0200 	mov.w	r2, #0
 8001804:	f04f 0300 	mov.w	r3, #0
 8001808:	e9c1 2300 	strd	r2, r3, [r1]

			last_delta_s = sqrt((current_x - last_x) * (current_x - last_x) + (current_y - last_y) * (current_y - last_y));
 800180c:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <main+0x674>)
 800180e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <main+0x698>)
 8001814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001818:	f7fe fd56 	bl	80002c8 <__aeabi_dsub>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4614      	mov	r4, r2
 8001822:	461d      	mov	r5, r3
 8001824:	4b33      	ldr	r3, [pc, #204]	; (80018f4 <main+0x674>)
 8001826:	e9d3 0100 	ldrd	r0, r1, [r3]
 800182a:	4b3b      	ldr	r3, [pc, #236]	; (8001918 <main+0x698>)
 800182c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001830:	f7fe fd4a 	bl	80002c8 <__aeabi_dsub>
 8001834:	4602      	mov	r2, r0
 8001836:	460b      	mov	r3, r1
 8001838:	4620      	mov	r0, r4
 800183a:	4629      	mov	r1, r5
 800183c:	f7fe fefc 	bl	8000638 <__aeabi_dmul>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4614      	mov	r4, r2
 8001846:	461d      	mov	r5, r3
 8001848:	4b24      	ldr	r3, [pc, #144]	; (80018dc <main+0x65c>)
 800184a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184e:	4b33      	ldr	r3, [pc, #204]	; (800191c <main+0x69c>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fd38 	bl	80002c8 <__aeabi_dsub>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4690      	mov	r8, r2
 800185e:	4699      	mov	r9, r3
 8001860:	4b1e      	ldr	r3, [pc, #120]	; (80018dc <main+0x65c>)
 8001862:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001866:	4b2d      	ldr	r3, [pc, #180]	; (800191c <main+0x69c>)
 8001868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186c:	f7fe fd2c 	bl	80002c8 <__aeabi_dsub>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4640      	mov	r0, r8
 8001876:	4649      	mov	r1, r9
 8001878:	f7fe fede 	bl	8000638 <__aeabi_dmul>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	4620      	mov	r0, r4
 8001882:	4629      	mov	r1, r5
 8001884:	f7fe fd22 	bl	80002cc <__adddf3>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	ec43 2b17 	vmov	d7, r2, r3
 8001890:	eeb0 0a47 	vmov.f32	s0, s14
 8001894:	eef0 0a67 	vmov.f32	s1, s15
 8001898:	f009 fb8a 	bl	800afb0 <sqrt>
 800189c:	eeb0 7a40 	vmov.f32	s14, s0
 80018a0:	eef0 7a60 	vmov.f32	s15, s1
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <main+0x6a0>)
 80018a6:	ed83 7b00 	vstr	d7, [r3]
			last_delta_o = (car_angle - last_th);
 80018aa:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <main+0x668>)
 80018ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b0:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <main+0x6a4>)
 80018b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b6:	f7fe fd07 	bl	80002c8 <__aeabi_dsub>
 80018ba:	4602      	mov	r2, r0
 80018bc:	460b      	mov	r3, r1
 80018be:	491a      	ldr	r1, [pc, #104]	; (8001928 <main+0x6a8>)
 80018c0:	e9c1 2300 	strd	r2, r3, [r1]

			/******************** PID ***********************/
			error = (cmd_vel_s - (delta_s / 0.039));
 80018c4:	4b19      	ldr	r3, [pc, #100]	; (800192c <main+0x6ac>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7fe fe5d 	bl	8000588 <__aeabi_f2d>
 80018ce:	4604      	mov	r4, r0
 80018d0:	460d      	mov	r5, r1
 80018d2:	e02d      	b.n	8001930 <main+0x6b0>
 80018d4:	200004b8 	.word	0x200004b8
 80018d8:	20000660 	.word	0x20000660
 80018dc:	20000490 	.word	0x20000490
 80018e0:	200004c0 	.word	0x200004c0
 80018e4:	20000668 	.word	0x20000668
 80018e8:	20000480 	.word	0x20000480
 80018ec:	200004b0 	.word	0x200004b0
 80018f0:	20000670 	.word	0x20000670
 80018f4:	20000488 	.word	0x20000488
 80018f8:	408f4000 	.word	0x408f4000
 80018fc:	20000678 	.word	0x20000678
 8001900:	20000680 	.word	0x20000680
 8001904:	20000688 	.word	0x20000688
 8001908:	20000644 	.word	0x20000644
 800190c:	0800c304 	.word	0x0800c304
 8001910:	200003f8 	.word	0x200003f8
 8001914:	20000400 	.word	0x20000400
 8001918:	20000498 	.word	0x20000498
 800191c:	200004a0 	.word	0x200004a0
 8001920:	200004d8 	.word	0x200004d8
 8001924:	200004a8 	.word	0x200004a8
 8001928:	200004e0 	.word	0x200004e0
 800192c:	20000698 	.word	0x20000698
 8001930:	4b95      	ldr	r3, [pc, #596]	; (8001b88 <main+0x908>)
 8001932:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001936:	a392      	add	r3, pc, #584	; (adr r3, 8001b80 <main+0x900>)
 8001938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193c:	f7fe ffa6 	bl	800088c <__aeabi_ddiv>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4620      	mov	r0, r4
 8001946:	4629      	mov	r1, r5
 8001948:	f7fe fcbe 	bl	80002c8 <__aeabi_dsub>
 800194c:	4602      	mov	r2, r0
 800194e:	460b      	mov	r3, r1
 8001950:	4610      	mov	r0, r2
 8001952:	4619      	mov	r1, r3
 8001954:	f7ff f968 	bl	8000c28 <__aeabi_d2f>
 8001958:	4603      	mov	r3, r0
 800195a:	4a8c      	ldr	r2, [pc, #560]	; (8001b8c <main+0x90c>)
 800195c:	6013      	str	r3, [r2, #0]
			error_a = (cmd_vel_th - (pid_delta_o / 0.039));
 800195e:	4b8c      	ldr	r3, [pc, #560]	; (8001b90 <main+0x910>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7fe fe10 	bl	8000588 <__aeabi_f2d>
 8001968:	4604      	mov	r4, r0
 800196a:	460d      	mov	r5, r1
 800196c:	4b89      	ldr	r3, [pc, #548]	; (8001b94 <main+0x914>)
 800196e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001972:	a383      	add	r3, pc, #524	; (adr r3, 8001b80 <main+0x900>)
 8001974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001978:	f7fe ff88 	bl	800088c <__aeabi_ddiv>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	4620      	mov	r0, r4
 8001982:	4629      	mov	r1, r5
 8001984:	f7fe fca0 	bl	80002c8 <__aeabi_dsub>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4610      	mov	r0, r2
 800198e:	4619      	mov	r1, r3
 8001990:	f7ff f94a 	bl	8000c28 <__aeabi_d2f>
 8001994:	4603      	mov	r3, r0
 8001996:	4a80      	ldr	r2, [pc, #512]	; (8001b98 <main+0x918>)
 8001998:	6013      	str	r3, [r2, #0]
			P_term = (error - previous_error) * Kp;
 800199a:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <main+0x90c>)
 800199c:	ed93 7a00 	vldr	s14, [r3]
 80019a0:	4b7e      	ldr	r3, [pc, #504]	; (8001b9c <main+0x91c>)
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019aa:	4b7d      	ldr	r3, [pc, #500]	; (8001ba0 <main+0x920>)
 80019ac:	edd3 7a00 	vldr	s15, [r3]
 80019b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b4:	4b7b      	ldr	r3, [pc, #492]	; (8001ba4 <main+0x924>)
 80019b6:	edc3 7a00 	vstr	s15, [r3]
			D_term = (error - 2 * previous_error + old_error) * Kd;
 80019ba:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <main+0x90c>)
 80019bc:	ed93 7a00 	vldr	s14, [r3]
 80019c0:	4b76      	ldr	r3, [pc, #472]	; (8001b9c <main+0x91c>)
 80019c2:	edd3 7a00 	vldr	s15, [r3]
 80019c6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019ce:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <main+0x928>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d8:	4b74      	ldr	r3, [pc, #464]	; (8001bac <main+0x92c>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019e2:	4b73      	ldr	r3, [pc, #460]	; (8001bb0 <main+0x930>)
 80019e4:	edc3 7a00 	vstr	s15, [r3]
			I_term = error * Ki;
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <main+0x90c>)
 80019ea:	ed93 7a00 	vldr	s14, [r3]
 80019ee:	4b71      	ldr	r3, [pc, #452]	; (8001bb4 <main+0x934>)
 80019f0:	edd3 7a00 	vldr	s15, [r3]
 80019f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019f8:	4b6f      	ldr	r3, [pc, #444]	; (8001bb8 <main+0x938>)
 80019fa:	edc3 7a00 	vstr	s15, [r3]
			pid = P_term + D_term + I_term;
 80019fe:	4b69      	ldr	r3, [pc, #420]	; (8001ba4 <main+0x924>)
 8001a00:	ed93 7a00 	vldr	s14, [r3]
 8001a04:	4b6a      	ldr	r3, [pc, #424]	; (8001bb0 <main+0x930>)
 8001a06:	edd3 7a00 	vldr	s15, [r3]
 8001a0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a0e:	4b6a      	ldr	r3, [pc, #424]	; (8001bb8 <main+0x938>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	4b68      	ldr	r3, [pc, #416]	; (8001bbc <main+0x93c>)
 8001a1a:	edc3 7a00 	vstr	s15, [r3]

			P_term_a = (error_a - previous_error_a) * Kp_a;
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <main+0x918>)
 8001a20:	ed93 7a00 	vldr	s14, [r3]
 8001a24:	4b66      	ldr	r3, [pc, #408]	; (8001bc0 <main+0x940>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a2e:	4b65      	ldr	r3, [pc, #404]	; (8001bc4 <main+0x944>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a38:	4b63      	ldr	r3, [pc, #396]	; (8001bc8 <main+0x948>)
 8001a3a:	edc3 7a00 	vstr	s15, [r3]
			D_term_a = (error_a - 2 * previous_error_a + old_error_a) * Kd_a;
 8001a3e:	4b56      	ldr	r3, [pc, #344]	; (8001b98 <main+0x918>)
 8001a40:	ed93 7a00 	vldr	s14, [r3]
 8001a44:	4b5e      	ldr	r3, [pc, #376]	; (8001bc0 <main+0x940>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a52:	4b5e      	ldr	r3, [pc, #376]	; (8001bcc <main+0x94c>)
 8001a54:	edd3 7a00 	vldr	s15, [r3]
 8001a58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a5c:	4b5c      	ldr	r3, [pc, #368]	; (8001bd0 <main+0x950>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	4b5b      	ldr	r3, [pc, #364]	; (8001bd4 <main+0x954>)
 8001a68:	edc3 7a00 	vstr	s15, [r3]
			I_term_a = error_a * Ki_a;
 8001a6c:	4b4a      	ldr	r3, [pc, #296]	; (8001b98 <main+0x918>)
 8001a6e:	ed93 7a00 	vldr	s14, [r3]
 8001a72:	4b59      	ldr	r3, [pc, #356]	; (8001bd8 <main+0x958>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7c:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <main+0x95c>)
 8001a7e:	edc3 7a00 	vstr	s15, [r3]
			pid_a = P_term_a + D_term_a + I_term_a;
 8001a82:	4b51      	ldr	r3, [pc, #324]	; (8001bc8 <main+0x948>)
 8001a84:	ed93 7a00 	vldr	s14, [r3]
 8001a88:	4b52      	ldr	r3, [pc, #328]	; (8001bd4 <main+0x954>)
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a92:	4b52      	ldr	r3, [pc, #328]	; (8001bdc <main+0x95c>)
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9c:	4b50      	ldr	r3, [pc, #320]	; (8001be0 <main+0x960>)
 8001a9e:	edc3 7a00 	vstr	s15, [r3]
			test+=pid_a;
 8001aa2:	4b4f      	ldr	r3, [pc, #316]	; (8001be0 <main+0x960>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd6e 	bl	8000588 <__aeabi_f2d>
 8001aac:	4b4d      	ldr	r3, [pc, #308]	; (8001be4 <main+0x964>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fc0b 	bl	80002cc <__adddf3>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	494a      	ldr	r1, [pc, #296]	; (8001be4 <main+0x964>)
 8001abc:	e9c1 2300 	strd	r2, r3, [r1]
			if (stop_flag == 0) {
 8001ac0:	4b49      	ldr	r3, [pc, #292]	; (8001be8 <main+0x968>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d120      	bne.n	8001b0a <main+0x88a>
				speed = speed + pid - pid_a;
 8001ac8:	4b48      	ldr	r3, [pc, #288]	; (8001bec <main+0x96c>)
 8001aca:	ed93 7a00 	vldr	s14, [r3]
 8001ace:	4b3b      	ldr	r3, [pc, #236]	; (8001bbc <main+0x93c>)
 8001ad0:	edd3 7a00 	vldr	s15, [r3]
 8001ad4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ad8:	4b41      	ldr	r3, [pc, #260]	; (8001be0 <main+0x960>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae2:	4b42      	ldr	r3, [pc, #264]	; (8001bec <main+0x96c>)
 8001ae4:	edc3 7a00 	vstr	s15, [r3]
				speed_r = speed_r + pid + pid_a;
 8001ae8:	4b41      	ldr	r3, [pc, #260]	; (8001bf0 <main+0x970>)
 8001aea:	ed93 7a00 	vldr	s14, [r3]
 8001aee:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <main+0x93c>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001af8:	4b39      	ldr	r3, [pc, #228]	; (8001be0 <main+0x960>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b02:	4b3b      	ldr	r3, [pc, #236]	; (8001bf0 <main+0x970>)
 8001b04:	edc3 7a00 	vstr	s15, [r3]
 8001b08:	e01d      	b.n	8001b46 <main+0x8c6>
			} else {
				speed = speed - (speed) / 5;
 8001b0a:	4b38      	ldr	r3, [pc, #224]	; (8001bec <main+0x96c>)
 8001b0c:	ed93 7a00 	vldr	s14, [r3]
 8001b10:	4b36      	ldr	r3, [pc, #216]	; (8001bec <main+0x96c>)
 8001b12:	edd3 6a00 	vldr	s13, [r3]
 8001b16:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001b1a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b22:	4b32      	ldr	r3, [pc, #200]	; (8001bec <main+0x96c>)
 8001b24:	edc3 7a00 	vstr	s15, [r3]
				speed_r = speed_r - (speed_r) / 5;
 8001b28:	4b31      	ldr	r3, [pc, #196]	; (8001bf0 <main+0x970>)
 8001b2a:	ed93 7a00 	vldr	s14, [r3]
 8001b2e:	4b30      	ldr	r3, [pc, #192]	; (8001bf0 <main+0x970>)
 8001b30:	edd3 6a00 	vldr	s13, [r3]
 8001b34:	eeb1 6a04 	vmov.f32	s12, #20	; 0x40a00000  5.0
 8001b38:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001b3c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b40:	4b2b      	ldr	r3, [pc, #172]	; (8001bf0 <main+0x970>)
 8001b42:	edc3 7a00 	vstr	s15, [r3]
			}

			old_error = previous_error;
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <main+0x91c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <main+0x928>)
 8001b4c:	6013      	str	r3, [r2, #0]
			old_error_a = previous_error_a;
 8001b4e:	4b1c      	ldr	r3, [pc, #112]	; (8001bc0 <main+0x940>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a1e      	ldr	r2, [pc, #120]	; (8001bcc <main+0x94c>)
 8001b54:	6013      	str	r3, [r2, #0]
			previous_error = error;
 8001b56:	4b0d      	ldr	r3, [pc, #52]	; (8001b8c <main+0x90c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a10      	ldr	r2, [pc, #64]	; (8001b9c <main+0x91c>)
 8001b5c:	6013      	str	r3, [r2, #0]
			previous_error_a = error_a;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <main+0x918>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <main+0x940>)
 8001b64:	6013      	str	r3, [r2, #0]

			check_pwm();
 8001b66:	f000 fd67 	bl	8002638 <check_pwm>
			check_pwm_r();
 8001b6a:	f000 fd93 	bl	8002694 <check_pwm_r>

			check_move_state();
 8001b6e:	f000 fdbf 	bl	80026f0 <check_move_state>
			check_move_state_r();
 8001b72:	f000 fde7 	bl	8002744 <check_move_state_r>

			cmd_vel_calculate();
 8001b76:	f000 fe0f 	bl	8002798 <cmd_vel_calculate>
		motorControl(control_1, control_2);
 8001b7a:	f7ff bbdd 	b.w	8001338 <main+0xb8>
 8001b7e:	bf00      	nop
 8001b80:	d916872b 	.word	0xd916872b
 8001b84:	3fa3f7ce 	.word	0x3fa3f7ce
 8001b88:	200004c8 	.word	0x200004c8
 8001b8c:	20000460 	.word	0x20000460
 8001b90:	2000069c 	.word	0x2000069c
 8001b94:	200004f0 	.word	0x200004f0
 8001b98:	2000046c 	.word	0x2000046c
 8001b9c:	20000464 	.word	0x20000464
 8001ba0:	20000008 	.word	0x20000008
 8001ba4:	20000440 	.word	0x20000440
 8001ba8:	20000468 	.word	0x20000468
 8001bac:	2000000c 	.word	0x2000000c
 8001bb0:	20000444 	.word	0x20000444
 8001bb4:	20000010 	.word	0x20000010
 8001bb8:	20000448 	.word	0x20000448
 8001bbc:	2000044c 	.word	0x2000044c
 8001bc0:	20000470 	.word	0x20000470
 8001bc4:	20000014 	.word	0x20000014
 8001bc8:	20000450 	.word	0x20000450
 8001bcc:	20000474 	.word	0x20000474
 8001bd0:	20000018 	.word	0x20000018
 8001bd4:	20000454 	.word	0x20000454
 8001bd8:	2000001c 	.word	0x2000001c
 8001bdc:	20000458 	.word	0x20000458
 8001be0:	2000045c 	.word	0x2000045c
 8001be4:	200003f0 	.word	0x200003f0
 8001be8:	20000478 	.word	0x20000478
 8001bec:	20000438 	.word	0x20000438
 8001bf0:	2000043c 	.word	0x2000043c

08001bf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b094      	sub	sp, #80	; 0x50
 8001bf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bfa:	f107 031c 	add.w	r3, r7, #28
 8001bfe:	2234      	movs	r2, #52	; 0x34
 8001c00:	2100      	movs	r1, #0
 8001c02:	4618      	mov	r0, r3
 8001c04:	f006 fb93 	bl	800832e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c08:	f107 0308 	add.w	r3, r7, #8
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	605a      	str	r2, [r3, #4]
 8001c12:	609a      	str	r2, [r3, #8]
 8001c14:	60da      	str	r2, [r3, #12]
 8001c16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c18:	2300      	movs	r3, #0
 8001c1a:	607b      	str	r3, [r7, #4]
 8001c1c:	4b2a      	ldr	r3, [pc, #168]	; (8001cc8 <SystemClock_Config+0xd4>)
 8001c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c20:	4a29      	ldr	r2, [pc, #164]	; (8001cc8 <SystemClock_Config+0xd4>)
 8001c22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c26:	6413      	str	r3, [r2, #64]	; 0x40
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <SystemClock_Config+0xd4>)
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c30:	607b      	str	r3, [r7, #4]
 8001c32:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001c34:	2300      	movs	r3, #0
 8001c36:	603b      	str	r3, [r7, #0]
 8001c38:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <SystemClock_Config+0xd8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001c40:	4a22      	ldr	r2, [pc, #136]	; (8001ccc <SystemClock_Config+0xd8>)
 8001c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b20      	ldr	r3, [pc, #128]	; (8001ccc <SystemClock_Config+0xd8>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c54:	2302      	movs	r3, #2
 8001c56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c5c:	2310      	movs	r3, #16
 8001c5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c60:	2302      	movs	r3, #2
 8001c62:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c64:	2300      	movs	r3, #0
 8001c66:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c68:	2310      	movs	r3, #16
 8001c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c6c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001c70:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c72:	2304      	movs	r3, #4
 8001c74:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c76:	2302      	movs	r3, #2
 8001c78:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c7e:	f107 031c 	add.w	r3, r7, #28
 8001c82:	4618      	mov	r0, r3
 8001c84:	f002 fa6a 	bl	800415c <HAL_RCC_OscConfig>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c8e:	f000 ff07 	bl	8002aa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c92:	230f      	movs	r3, #15
 8001c94:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c96:	2302      	movs	r3, #2
 8001c98:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ca8:	f107 0308 	add.w	r3, r7, #8
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f001 ff0a 	bl	8003ac8 <HAL_RCC_ClockConfig>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001cba:	f000 fef1 	bl	8002aa0 <Error_Handler>
  }
}
 8001cbe:	bf00      	nop
 8001cc0:	3750      	adds	r7, #80	; 0x50
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40007000 	.word	0x40007000

08001cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d00:	4b2d      	ldr	r3, [pc, #180]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d02:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001d08:	4b2b      	ldr	r3, [pc, #172]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d0a:	2253      	movs	r2, #83	; 0x53
 8001d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b2a      	ldr	r3, [pc, #168]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001d14:	4b28      	ldr	r3, [pc, #160]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d16:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b26      	ldr	r3, [pc, #152]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d28:	4823      	ldr	r0, [pc, #140]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d2a:	f002 fcb5 	bl	8004698 <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001d34:	f000 feb4 	bl	8002aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d42:	4619      	mov	r1, r3
 8001d44:	481c      	ldr	r0, [pc, #112]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d46:	f003 f831 	bl	8004dac <HAL_TIM_ConfigClockSource>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001d50:	f000 fea6 	bl	8002aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d54:	4818      	ldr	r0, [pc, #96]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d56:	f002 fd5f 	bl	8004818 <HAL_TIM_PWM_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d60:	f000 fe9e 	bl	8002aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	4619      	mov	r1, r3
 8001d72:	4811      	ldr	r0, [pc, #68]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d74:	f003 fc26 	bl	80055c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d7e:	f000 fe8f 	bl	8002aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d82:	2360      	movs	r3, #96	; 0x60
 8001d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	2208      	movs	r2, #8
 8001d96:	4619      	mov	r1, r3
 8001d98:	4807      	ldr	r0, [pc, #28]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001d9a:	f002 ff45 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001da4:	f000 fe7c 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001da8:	4803      	ldr	r0, [pc, #12]	; (8001db8 <MX_TIM2_Init+0xe8>)
 8001daa:	f000 ff4f 	bl	8002c4c <HAL_TIM_MspPostInit>

}
 8001dae:	bf00      	nop
 8001db0:	3738      	adds	r7, #56	; 0x38
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	2000023c 	.word	0x2000023c

08001dbc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b08e      	sub	sp, #56	; 0x38
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	f107 0320 	add.w	r3, r7, #32
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dda:	1d3b      	adds	r3, r7, #4
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
 8001de8:	615a      	str	r2, [r3, #20]
 8001dea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001dec:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001dee:	4a33      	ldr	r2, [pc, #204]	; (8001ebc <MX_TIM3_Init+0x100>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001df2:	4b31      	ldr	r3, [pc, #196]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001df4:	2253      	movs	r2, #83	; 0x53
 8001df6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b2f      	ldr	r3, [pc, #188]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001dfe:	4b2e      	ldr	r3, [pc, #184]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001e00:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001e04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e06:	4b2c      	ldr	r3, [pc, #176]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e0c:	4b2a      	ldr	r3, [pc, #168]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e12:	4829      	ldr	r0, [pc, #164]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001e14:	f002 fc40 	bl	8004698 <HAL_TIM_Base_Init>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001e1e:	f000 fe3f 	bl	8002aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e26:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	4822      	ldr	r0, [pc, #136]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001e30:	f002 ffbc 	bl	8004dac <HAL_TIM_ConfigClockSource>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e3a:	f000 fe31 	bl	8002aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e3e:	481e      	ldr	r0, [pc, #120]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001e40:	f002 fcea 	bl	8004818 <HAL_TIM_PWM_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e4a:	f000 fe29 	bl	8002aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e56:	f107 0320 	add.w	r3, r7, #32
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4816      	ldr	r0, [pc, #88]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001e5e:	f003 fbb1 	bl	80055c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d001      	beq.n	8001e6c <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e68:	f000 fe1a 	bl	8002aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e6c:	2360      	movs	r3, #96	; 0x60
 8001e6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e74:	2300      	movs	r3, #0
 8001e76:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e7c:	1d3b      	adds	r3, r7, #4
 8001e7e:	2200      	movs	r2, #0
 8001e80:	4619      	mov	r1, r3
 8001e82:	480d      	ldr	r0, [pc, #52]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001e84:	f002 fed0 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e8e:	f000 fe07 	bl	8002aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	2204      	movs	r2, #4
 8001e96:	4619      	mov	r1, r3
 8001e98:	4807      	ldr	r0, [pc, #28]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001e9a:	f002 fec5 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001ea4:	f000 fdfc 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ea8:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_TIM3_Init+0xfc>)
 8001eaa:	f000 fecf 	bl	8002c4c <HAL_TIM_MspPostInit>

}
 8001eae:	bf00      	nop
 8001eb0:	3738      	adds	r7, #56	; 0x38
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000284 	.word	0x20000284
 8001ebc:	40000400 	.word	0x40000400

08001ec0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b08e      	sub	sp, #56	; 0x38
 8001ec4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001eca:	2200      	movs	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	605a      	str	r2, [r3, #4]
 8001ed0:	609a      	str	r2, [r3, #8]
 8001ed2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed4:	f107 0320 	add.w	r3, r7, #32
 8001ed8:	2200      	movs	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ede:	1d3b      	adds	r3, r7, #4
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	605a      	str	r2, [r3, #4]
 8001ee6:	609a      	str	r2, [r3, #8]
 8001ee8:	60da      	str	r2, [r3, #12]
 8001eea:	611a      	str	r2, [r3, #16]
 8001eec:	615a      	str	r2, [r3, #20]
 8001eee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001ef0:	4b2c      	ldr	r3, [pc, #176]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001ef2:	4a2d      	ldr	r2, [pc, #180]	; (8001fa8 <MX_TIM4_Init+0xe8>)
 8001ef4:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001ef8:	2253      	movs	r2, #83	; 0x53
 8001efa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f04:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f16:	4823      	ldr	r0, [pc, #140]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f18:	f002 fbbe 	bl	8004698 <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001f22:	f000 fdbd 	bl	8002aa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f30:	4619      	mov	r1, r3
 8001f32:	481c      	ldr	r0, [pc, #112]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f34:	f002 ff3a 	bl	8004dac <HAL_TIM_ConfigClockSource>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001f3e:	f000 fdaf 	bl	8002aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f42:	4818      	ldr	r0, [pc, #96]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f44:	f002 fc68 	bl	8004818 <HAL_TIM_PWM_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f4e:	f000 fda7 	bl	8002aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f5a:	f107 0320 	add.w	r3, r7, #32
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f62:	f003 fb2f 	bl	80055c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f6c:	f000 fd98 	bl	8002aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f70:	2360      	movs	r3, #96	; 0x60
 8001f72:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f80:	1d3b      	adds	r3, r7, #4
 8001f82:	2200      	movs	r2, #0
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f88:	f002 fe4e 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f92:	f000 fd85 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f96:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <MX_TIM4_Init+0xe4>)
 8001f98:	f000 fe58 	bl	8002c4c <HAL_TIM_MspPostInit>

}
 8001f9c:	bf00      	nop
 8001f9e:	3738      	adds	r7, #56	; 0x38
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	200002cc 	.word	0x200002cc
 8001fa8:	40000800 	.word	0x40000800

08001fac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb2:	f107 0320 	add.w	r3, r7, #32
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
 8001fc2:	605a      	str	r2, [r3, #4]
 8001fc4:	609a      	str	r2, [r3, #8]
 8001fc6:	60da      	str	r2, [r3, #12]
 8001fc8:	611a      	str	r2, [r3, #16]
 8001fca:	615a      	str	r2, [r3, #20]
 8001fcc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001fce:	4b27      	ldr	r3, [pc, #156]	; (800206c <MX_TIM5_Init+0xc0>)
 8001fd0:	4a27      	ldr	r2, [pc, #156]	; (8002070 <MX_TIM5_Init+0xc4>)
 8001fd2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 8001fd4:	4b25      	ldr	r3, [pc, #148]	; (800206c <MX_TIM5_Init+0xc0>)
 8001fd6:	2229      	movs	r2, #41	; 0x29
 8001fd8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b24      	ldr	r3, [pc, #144]	; (800206c <MX_TIM5_Init+0xc0>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8001fe0:	4b22      	ldr	r3, [pc, #136]	; (800206c <MX_TIM5_Init+0xc0>)
 8001fe2:	22ff      	movs	r2, #255	; 0xff
 8001fe4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	; (800206c <MX_TIM5_Init+0xc0>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	; (800206c <MX_TIM5_Init+0xc0>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ff2:	481e      	ldr	r0, [pc, #120]	; (800206c <MX_TIM5_Init+0xc0>)
 8001ff4:	f002 fc10 	bl	8004818 <HAL_TIM_PWM_Init>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001ffe:	f000 fd4f 	bl	8002aa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002002:	2300      	movs	r3, #0
 8002004:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002006:	2300      	movs	r3, #0
 8002008:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800200a:	f107 0320 	add.w	r3, r7, #32
 800200e:	4619      	mov	r1, r3
 8002010:	4816      	ldr	r0, [pc, #88]	; (800206c <MX_TIM5_Init+0xc0>)
 8002012:	f003 fad7 	bl	80055c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 800201c:	f000 fd40 	bl	8002aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002020:	2360      	movs	r3, #96	; 0x60
 8002022:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002028:	2300      	movs	r3, #0
 800202a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800202c:	2300      	movs	r3, #0
 800202e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002030:	1d3b      	adds	r3, r7, #4
 8002032:	2200      	movs	r2, #0
 8002034:	4619      	mov	r1, r3
 8002036:	480d      	ldr	r0, [pc, #52]	; (800206c <MX_TIM5_Init+0xc0>)
 8002038:	f002 fdf6 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8002042:	f000 fd2d 	bl	8002aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002046:	1d3b      	adds	r3, r7, #4
 8002048:	2204      	movs	r2, #4
 800204a:	4619      	mov	r1, r3
 800204c:	4807      	ldr	r0, [pc, #28]	; (800206c <MX_TIM5_Init+0xc0>)
 800204e:	f002 fdeb 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002058:	f000 fd22 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800205c:	4803      	ldr	r0, [pc, #12]	; (800206c <MX_TIM5_Init+0xc0>)
 800205e:	f000 fdf5 	bl	8002c4c <HAL_TIM_MspPostInit>

}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	; 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000314 	.word	0x20000314
 8002070:	40000c00 	.word	0x40000c00

08002074 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800207a:	1d3b      	adds	r3, r7, #4
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]
 8002080:	605a      	str	r2, [r3, #4]
 8002082:	609a      	str	r2, [r3, #8]
 8002084:	60da      	str	r2, [r3, #12]
 8002086:	611a      	str	r2, [r3, #16]
 8002088:	615a      	str	r2, [r3, #20]
 800208a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <MX_TIM14_Init+0x94>)
 800208e:	4a1f      	ldr	r2, [pc, #124]	; (800210c <MX_TIM14_Init+0x98>)
 8002090:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 8002092:	4b1d      	ldr	r3, [pc, #116]	; (8002108 <MX_TIM14_Init+0x94>)
 8002094:	2253      	movs	r2, #83	; 0x53
 8002096:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002098:	4b1b      	ldr	r3, [pc, #108]	; (8002108 <MX_TIM14_Init+0x94>)
 800209a:	2200      	movs	r2, #0
 800209c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 800209e:	4b1a      	ldr	r3, [pc, #104]	; (8002108 <MX_TIM14_Init+0x94>)
 80020a0:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020a4:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020a6:	4b18      	ldr	r3, [pc, #96]	; (8002108 <MX_TIM14_Init+0x94>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ac:	4b16      	ldr	r3, [pc, #88]	; (8002108 <MX_TIM14_Init+0x94>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80020b2:	4815      	ldr	r0, [pc, #84]	; (8002108 <MX_TIM14_Init+0x94>)
 80020b4:	f002 faf0 	bl	8004698 <HAL_TIM_Base_Init>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 80020be:	f000 fcef 	bl	8002aa0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 80020c2:	4811      	ldr	r0, [pc, #68]	; (8002108 <MX_TIM14_Init+0x94>)
 80020c4:	f002 fba8 	bl	8004818 <HAL_TIM_PWM_Init>
 80020c8:	4603      	mov	r3, r0
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d001      	beq.n	80020d2 <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 80020ce:	f000 fce7 	bl	8002aa0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020d2:	2360      	movs	r3, #96	; 0x60
 80020d4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020e2:	1d3b      	adds	r3, r7, #4
 80020e4:	2200      	movs	r2, #0
 80020e6:	4619      	mov	r1, r3
 80020e8:	4807      	ldr	r0, [pc, #28]	; (8002108 <MX_TIM14_Init+0x94>)
 80020ea:	f002 fd9d 	bl	8004c28 <HAL_TIM_PWM_ConfigChannel>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80020f4:	f000 fcd4 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80020f8:	4803      	ldr	r0, [pc, #12]	; (8002108 <MX_TIM14_Init+0x94>)
 80020fa:	f000 fda7 	bl	8002c4c <HAL_TIM_MspPostInit>

}
 80020fe:	bf00      	nop
 8002100:	3720      	adds	r7, #32
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	2000035c 	.word	0x2000035c
 800210c:	40002000 	.word	0x40002000

08002110 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002114:	4b11      	ldr	r3, [pc, #68]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002116:	4a12      	ldr	r2, [pc, #72]	; (8002160 <MX_USART2_UART_Init+0x50>)
 8002118:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <MX_USART2_UART_Init+0x4c>)
 800211c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002120:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002122:	4b0e      	ldr	r3, [pc, #56]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002128:	4b0c      	ldr	r3, [pc, #48]	; (800215c <MX_USART2_UART_Init+0x4c>)
 800212a:	2200      	movs	r2, #0
 800212c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002130:	2200      	movs	r2, #0
 8002132:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002134:	4b09      	ldr	r3, [pc, #36]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002136:	220c      	movs	r2, #12
 8002138:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800213a:	4b08      	ldr	r3, [pc, #32]	; (800215c <MX_USART2_UART_Init+0x4c>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002142:	2200      	movs	r2, #0
 8002144:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002146:	4805      	ldr	r0, [pc, #20]	; (800215c <MX_USART2_UART_Init+0x4c>)
 8002148:	f003 facc 	bl	80056e4 <HAL_UART_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002152:	f000 fca5 	bl	8002aa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002156:	bf00      	nop
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	200003a4 	.word	0x200003a4
 8002160:	40004400 	.word	0x40004400

08002164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08a      	sub	sp, #40	; 0x28
 8002168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	613b      	str	r3, [r7, #16]
 800217e:	4b53      	ldr	r3, [pc, #332]	; (80022cc <MX_GPIO_Init+0x168>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	4a52      	ldr	r2, [pc, #328]	; (80022cc <MX_GPIO_Init+0x168>)
 8002184:	f043 0304 	orr.w	r3, r3, #4
 8002188:	6313      	str	r3, [r2, #48]	; 0x30
 800218a:	4b50      	ldr	r3, [pc, #320]	; (80022cc <MX_GPIO_Init+0x168>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800218e:	f003 0304 	and.w	r3, r3, #4
 8002192:	613b      	str	r3, [r7, #16]
 8002194:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <MX_GPIO_Init+0x168>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219e:	4a4b      	ldr	r2, [pc, #300]	; (80022cc <MX_GPIO_Init+0x168>)
 80021a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a4:	6313      	str	r3, [r2, #48]	; 0x30
 80021a6:	4b49      	ldr	r3, [pc, #292]	; (80022cc <MX_GPIO_Init+0x168>)
 80021a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60bb      	str	r3, [r7, #8]
 80021b6:	4b45      	ldr	r3, [pc, #276]	; (80022cc <MX_GPIO_Init+0x168>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a44      	ldr	r2, [pc, #272]	; (80022cc <MX_GPIO_Init+0x168>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b42      	ldr	r3, [pc, #264]	; (80022cc <MX_GPIO_Init+0x168>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
 80021d2:	4b3e      	ldr	r3, [pc, #248]	; (80022cc <MX_GPIO_Init+0x168>)
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	4a3d      	ldr	r2, [pc, #244]	; (80022cc <MX_GPIO_Init+0x168>)
 80021d8:	f043 0302 	orr.w	r3, r3, #2
 80021dc:	6313      	str	r3, [r2, #48]	; 0x30
 80021de:	4b3b      	ldr	r3, [pc, #236]	; (80022cc <MX_GPIO_Init+0x168>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	607b      	str	r3, [r7, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|shield_power_Pin, GPIO_PIN_RESET);
 80021ea:	2200      	movs	r2, #0
 80021ec:	2160      	movs	r1, #96	; 0x60
 80021ee:	4838      	ldr	r0, [pc, #224]	; (80022d0 <MX_GPIO_Init+0x16c>)
 80021f0:	f001 fc38 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Left_IN2_Pin|Right_IN1_Pin|Right_IN2_Pin, GPIO_PIN_RESET);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2170      	movs	r1, #112	; 0x70
 80021f8:	4836      	ldr	r0, [pc, #216]	; (80022d4 <MX_GPIO_Init+0x170>)
 80021fa:	f001 fc33 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Left_IN1_GPIO_Port, Left_IN1_Pin, GPIO_PIN_RESET);
 80021fe:	2200      	movs	r2, #0
 8002200:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002204:	4834      	ldr	r0, [pc, #208]	; (80022d8 <MX_GPIO_Init+0x174>)
 8002206:	f001 fc2d 	bl	8003a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800220a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800220e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002210:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002214:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800221a:	f107 0314 	add.w	r3, r7, #20
 800221e:	4619      	mov	r1, r3
 8002220:	482c      	ldr	r0, [pc, #176]	; (80022d4 <MX_GPIO_Init+0x170>)
 8002222:	f001 fa73 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin shield_power_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|shield_power_Pin;
 8002226:	2360      	movs	r3, #96	; 0x60
 8002228:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800222a:	2301      	movs	r3, #1
 800222c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002232:	2300      	movs	r3, #0
 8002234:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4824      	ldr	r0, [pc, #144]	; (80022d0 <MX_GPIO_Init+0x16c>)
 800223e:	f001 fa65 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IN2_Pin Right_IN1_Pin Right_IN2_Pin */
  GPIO_InitStruct.Pin = Left_IN2_Pin|Right_IN1_Pin|Right_IN2_Pin;
 8002242:	2370      	movs	r3, #112	; 0x70
 8002244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002246:	2301      	movs	r3, #1
 8002248:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	481e      	ldr	r0, [pc, #120]	; (80022d4 <MX_GPIO_Init+0x170>)
 800225a:	f001 fa57 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_IN1_Pin */
  GPIO_InitStruct.Pin = Left_IN1_Pin;
 800225e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002262:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002264:	2301      	movs	r3, #1
 8002266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	2300      	movs	r3, #0
 800226a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Left_IN1_GPIO_Port, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	4818      	ldr	r0, [pc, #96]	; (80022d8 <MX_GPIO_Init+0x174>)
 8002278:	f001 fa48 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_pulse_B_Pin Left_pulse_A_Pin */
  GPIO_InitStruct.Pin = Left_pulse_B_Pin|Left_pulse_A_Pin;
 800227c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002280:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002282:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8002286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800228c:	f107 0314 	add.w	r3, r7, #20
 8002290:	4619      	mov	r1, r3
 8002292:	4811      	ldr	r0, [pc, #68]	; (80022d8 <MX_GPIO_Init+0x174>)
 8002294:	f001 fa3a 	bl	800370c <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_pulse_B_Pin Right_pulse_A_Pin */
  GPIO_InitStruct.Pin = Right_pulse_B_Pin|Right_pulse_A_Pin;
 8002298:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800229c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800229e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80022a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a4:	2300      	movs	r3, #0
 80022a6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a8:	f107 0314 	add.w	r3, r7, #20
 80022ac:	4619      	mov	r1, r3
 80022ae:	4808      	ldr	r0, [pc, #32]	; (80022d0 <MX_GPIO_Init+0x16c>)
 80022b0:	f001 fa2c 	bl	800370c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 80022b4:	2201      	movs	r2, #1
 80022b6:	2100      	movs	r1, #0
 80022b8:	2028      	movs	r0, #40	; 0x28
 80022ba:	f001 f95e 	bl	800357a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80022be:	2028      	movs	r0, #40	; 0x28
 80022c0:	f001 f977 	bl	80035b2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022c4:	bf00      	nop
 80022c6:	3728      	adds	r7, #40	; 0x28
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40023800 	.word	0x40023800
 80022d0:	40020000 	.word	0x40020000
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020400 	.word	0x40020400

080022dc <Pwm_Left>:

/* USER CODE BEGIN 4 */
void Pwm_Left(int pwm_input) {
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	htim5.Instance->CCR1 = pwm_input;
 80022e4:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <Pwm_Left+0x1c>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	635a      	str	r2, [r3, #52]	; 0x34
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	20000314 	.word	0x20000314

080022fc <Pwm_Right>:

void Pwm_Right(int pwm_input) {
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	htim5.Instance->CCR2 = pwm_input;
 8002304:	4b04      	ldr	r3, [pc, #16]	; (8002318 <Pwm_Right+0x1c>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	687a      	ldr	r2, [r7, #4]
 800230a:	639a      	str	r2, [r3, #56]	; 0x38
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr
 8002318:	20000314 	.word	0x20000314

0800231c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800231c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002320:	b09d      	sub	sp, #116	; 0x74
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
	/* Prevent unused argument(s) compilation warning */

	if (GPIO_Pin == Left_pulse_A_Pin) {
 800232a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800232e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002332:	d13d      	bne.n	80023b0 <HAL_GPIO_EXTI_Callback+0x94>
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 8002334:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002338:	488c      	ldr	r0, [pc, #560]	; (800256c <HAL_GPIO_EXTI_Callback+0x250>)
 800233a:	f001 fb7b 	bl	8003a34 <HAL_GPIO_ReadPin>
 800233e:	4603      	mov	r3, r0
 8002340:	461e      	mov	r6, r3
				== HAL_GPIO_ReadPin(GPIOB, Left_pulse_B_Pin)) {
 8002342:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002346:	4889      	ldr	r0, [pc, #548]	; (800256c <HAL_GPIO_EXTI_Callback+0x250>)
 8002348:	f001 fb74 	bl	8003a34 <HAL_GPIO_ReadPin>
 800234c:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 800234e:	429e      	cmp	r6, r3
 8002350:	d117      	bne.n	8002382 <HAL_GPIO_EXTI_Callback+0x66>
			encoderCount--;
 8002352:	4b87      	ldr	r3, [pc, #540]	; (8002570 <HAL_GPIO_EXTI_Callback+0x254>)
 8002354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002358:	f112 38ff 	adds.w	r8, r2, #4294967295
 800235c:	f143 39ff 	adc.w	r9, r3, #4294967295
 8002360:	4b83      	ldr	r3, [pc, #524]	; (8002570 <HAL_GPIO_EXTI_Callback+0x254>)
 8002362:	e9c3 8900 	strd	r8, r9, [r3]
			rpm_encoderCount--;
 8002366:	4b83      	ldr	r3, [pc, #524]	; (8002574 <HAL_GPIO_EXTI_Callback+0x258>)
 8002368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236c:	1e51      	subs	r1, r2, #1
 800236e:	6639      	str	r1, [r7, #96]	; 0x60
 8002370:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002374:	667b      	str	r3, [r7, #100]	; 0x64
 8002376:	4b7f      	ldr	r3, [pc, #508]	; (8002574 <HAL_GPIO_EXTI_Callback+0x258>)
 8002378:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800237c:	e9c3 1200 	strd	r1, r2, [r3]
 8002380:	e05c      	b.n	800243c <HAL_GPIO_EXTI_Callback+0x120>

		} else {
			encoderCount++;
 8002382:	4b7b      	ldr	r3, [pc, #492]	; (8002570 <HAL_GPIO_EXTI_Callback+0x254>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	1c54      	adds	r4, r2, #1
 800238a:	f143 0500 	adc.w	r5, r3, #0
 800238e:	4b78      	ldr	r3, [pc, #480]	; (8002570 <HAL_GPIO_EXTI_Callback+0x254>)
 8002390:	e9c3 4500 	strd	r4, r5, [r3]
			rpm_encoderCount++;
 8002394:	4b77      	ldr	r3, [pc, #476]	; (8002574 <HAL_GPIO_EXTI_Callback+0x258>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	1c51      	adds	r1, r2, #1
 800239c:	65b9      	str	r1, [r7, #88]	; 0x58
 800239e:	f143 0300 	adc.w	r3, r3, #0
 80023a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80023a4:	4b73      	ldr	r3, [pc, #460]	; (8002574 <HAL_GPIO_EXTI_Callback+0x258>)
 80023a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80023aa:	e9c3 1200 	strd	r1, r2, [r3]
 80023ae:	e045      	b.n	800243c <HAL_GPIO_EXTI_Callback+0x120>
		}
	} else if (GPIO_Pin == Left_pulse_B_Pin) {
 80023b0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80023b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023b8:	d140      	bne.n	800243c <HAL_GPIO_EXTI_Callback+0x120>
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 80023ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023be:	486b      	ldr	r0, [pc, #428]	; (800256c <HAL_GPIO_EXTI_Callback+0x250>)
 80023c0:	f001 fb38 	bl	8003a34 <HAL_GPIO_ReadPin>
 80023c4:	4603      	mov	r3, r0
 80023c6:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOB, Left_pulse_B_Pin)) {
 80023c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023cc:	4867      	ldr	r0, [pc, #412]	; (800256c <HAL_GPIO_EXTI_Callback+0x250>)
 80023ce:	f001 fb31 	bl	8003a34 <HAL_GPIO_ReadPin>
 80023d2:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 80023d4:	429c      	cmp	r4, r3
 80023d6:	d11a      	bne.n	800240e <HAL_GPIO_EXTI_Callback+0xf2>
			encoderCount++;
 80023d8:	4b65      	ldr	r3, [pc, #404]	; (8002570 <HAL_GPIO_EXTI_Callback+0x254>)
 80023da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023de:	1c51      	adds	r1, r2, #1
 80023e0:	6539      	str	r1, [r7, #80]	; 0x50
 80023e2:	f143 0300 	adc.w	r3, r3, #0
 80023e6:	657b      	str	r3, [r7, #84]	; 0x54
 80023e8:	4b61      	ldr	r3, [pc, #388]	; (8002570 <HAL_GPIO_EXTI_Callback+0x254>)
 80023ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80023ee:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount++;
 80023f2:	4b60      	ldr	r3, [pc, #384]	; (8002574 <HAL_GPIO_EXTI_Callback+0x258>)
 80023f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f8:	1c51      	adds	r1, r2, #1
 80023fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80023fc:	f143 0300 	adc.w	r3, r3, #0
 8002400:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002402:	4b5c      	ldr	r3, [pc, #368]	; (8002574 <HAL_GPIO_EXTI_Callback+0x258>)
 8002404:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8002408:	e9c3 1200 	strd	r1, r2, [r3]
 800240c:	e016      	b.n	800243c <HAL_GPIO_EXTI_Callback+0x120>
		} else {
			encoderCount--;
 800240e:	4b58      	ldr	r3, [pc, #352]	; (8002570 <HAL_GPIO_EXTI_Callback+0x254>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f112 3aff 	adds.w	sl, r2, #4294967295
 8002418:	f143 3bff 	adc.w	fp, r3, #4294967295
 800241c:	4b54      	ldr	r3, [pc, #336]	; (8002570 <HAL_GPIO_EXTI_Callback+0x254>)
 800241e:	e9c3 ab00 	strd	sl, fp, [r3]
			rpm_encoderCount--;
 8002422:	4b54      	ldr	r3, [pc, #336]	; (8002574 <HAL_GPIO_EXTI_Callback+0x258>)
 8002424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002428:	1e51      	subs	r1, r2, #1
 800242a:	6439      	str	r1, [r7, #64]	; 0x40
 800242c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002430:	647b      	str	r3, [r7, #68]	; 0x44
 8002432:	4b50      	ldr	r3, [pc, #320]	; (8002574 <HAL_GPIO_EXTI_Callback+0x258>)
 8002434:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8002438:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
	if (GPIO_Pin == Right_pulse_A_Pin) {
 800243c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8002440:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002444:	d144      	bne.n	80024d0 <HAL_GPIO_EXTI_Callback+0x1b4>
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 8002446:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800244a:	484b      	ldr	r0, [pc, #300]	; (8002578 <HAL_GPIO_EXTI_Callback+0x25c>)
 800244c:	f001 faf2 	bl	8003a34 <HAL_GPIO_ReadPin>
 8002450:	4603      	mov	r3, r0
 8002452:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, Right_pulse_B_Pin)) {
 8002454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002458:	4847      	ldr	r0, [pc, #284]	; (8002578 <HAL_GPIO_EXTI_Callback+0x25c>)
 800245a:	f001 faeb 	bl	8003a34 <HAL_GPIO_ReadPin>
 800245e:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 8002460:	429c      	cmp	r4, r3
 8002462:	d11a      	bne.n	800249a <HAL_GPIO_EXTI_Callback+0x17e>
			encoderCount_r++;
 8002464:	4b45      	ldr	r3, [pc, #276]	; (800257c <HAL_GPIO_EXTI_Callback+0x260>)
 8002466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246a:	1c51      	adds	r1, r2, #1
 800246c:	63b9      	str	r1, [r7, #56]	; 0x38
 800246e:	f143 0300 	adc.w	r3, r3, #0
 8002472:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002474:	4b41      	ldr	r3, [pc, #260]	; (800257c <HAL_GPIO_EXTI_Callback+0x260>)
 8002476:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800247a:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r++;
 800247e:	4b40      	ldr	r3, [pc, #256]	; (8002580 <HAL_GPIO_EXTI_Callback+0x264>)
 8002480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002484:	1c51      	adds	r1, r2, #1
 8002486:	6339      	str	r1, [r7, #48]	; 0x30
 8002488:	f143 0300 	adc.w	r3, r3, #0
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
 800248e:	4b3c      	ldr	r3, [pc, #240]	; (8002580 <HAL_GPIO_EXTI_Callback+0x264>)
 8002490:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8002494:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file */
}
 8002498:	e063      	b.n	8002562 <HAL_GPIO_EXTI_Callback+0x246>
			encoderCount_r--;
 800249a:	4b38      	ldr	r3, [pc, #224]	; (800257c <HAL_GPIO_EXTI_Callback+0x260>)
 800249c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a0:	1e51      	subs	r1, r2, #1
 80024a2:	62b9      	str	r1, [r7, #40]	; 0x28
 80024a4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80024aa:	4b34      	ldr	r3, [pc, #208]	; (800257c <HAL_GPIO_EXTI_Callback+0x260>)
 80024ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80024b0:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r--;
 80024b4:	4b32      	ldr	r3, [pc, #200]	; (8002580 <HAL_GPIO_EXTI_Callback+0x264>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	1e51      	subs	r1, r2, #1
 80024bc:	6239      	str	r1, [r7, #32]
 80024be:	f143 33ff 	adc.w	r3, r3, #4294967295
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
 80024c4:	4b2e      	ldr	r3, [pc, #184]	; (8002580 <HAL_GPIO_EXTI_Callback+0x264>)
 80024c6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80024ca:	e9c3 1200 	strd	r1, r2, [r3]
}
 80024ce:	e048      	b.n	8002562 <HAL_GPIO_EXTI_Callback+0x246>
	} else if (GPIO_Pin == Right_pulse_B_Pin) {
 80024d0:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80024d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024d8:	d143      	bne.n	8002562 <HAL_GPIO_EXTI_Callback+0x246>
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 80024da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024de:	4826      	ldr	r0, [pc, #152]	; (8002578 <HAL_GPIO_EXTI_Callback+0x25c>)
 80024e0:	f001 faa8 	bl	8003a34 <HAL_GPIO_ReadPin>
 80024e4:	4603      	mov	r3, r0
 80024e6:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, Right_pulse_B_Pin)) {
 80024e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80024ec:	4822      	ldr	r0, [pc, #136]	; (8002578 <HAL_GPIO_EXTI_Callback+0x25c>)
 80024ee:	f001 faa1 	bl	8003a34 <HAL_GPIO_ReadPin>
 80024f2:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 80024f4:	429c      	cmp	r4, r3
 80024f6:	d11a      	bne.n	800252e <HAL_GPIO_EXTI_Callback+0x212>
			encoderCount_r--;
 80024f8:	4b20      	ldr	r3, [pc, #128]	; (800257c <HAL_GPIO_EXTI_Callback+0x260>)
 80024fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fe:	1e51      	subs	r1, r2, #1
 8002500:	61b9      	str	r1, [r7, #24]
 8002502:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002506:	61fb      	str	r3, [r7, #28]
 8002508:	4b1c      	ldr	r3, [pc, #112]	; (800257c <HAL_GPIO_EXTI_Callback+0x260>)
 800250a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800250e:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r--;
 8002512:	4b1b      	ldr	r3, [pc, #108]	; (8002580 <HAL_GPIO_EXTI_Callback+0x264>)
 8002514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002518:	1e51      	subs	r1, r2, #1
 800251a:	6139      	str	r1, [r7, #16]
 800251c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002520:	617b      	str	r3, [r7, #20]
 8002522:	4b17      	ldr	r3, [pc, #92]	; (8002580 <HAL_GPIO_EXTI_Callback+0x264>)
 8002524:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8002528:	e9c3 1200 	strd	r1, r2, [r3]
}
 800252c:	e019      	b.n	8002562 <HAL_GPIO_EXTI_Callback+0x246>
			encoderCount_r++;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_GPIO_EXTI_Callback+0x260>)
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	1c51      	adds	r1, r2, #1
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	f143 0300 	adc.w	r3, r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b0f      	ldr	r3, [pc, #60]	; (800257c <HAL_GPIO_EXTI_Callback+0x260>)
 8002540:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002544:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r++;
 8002548:	4b0d      	ldr	r3, [pc, #52]	; (8002580 <HAL_GPIO_EXTI_Callback+0x264>)
 800254a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254e:	1c51      	adds	r1, r2, #1
 8002550:	6039      	str	r1, [r7, #0]
 8002552:	f143 0300 	adc.w	r3, r3, #0
 8002556:	607b      	str	r3, [r7, #4]
 8002558:	4b09      	ldr	r3, [pc, #36]	; (8002580 <HAL_GPIO_EXTI_Callback+0x264>)
 800255a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800255e:	e9c3 1200 	strd	r1, r2, [r3]
}
 8002562:	bf00      	nop
 8002564:	3774      	adds	r7, #116	; 0x74
 8002566:	46bd      	mov	sp, r7
 8002568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800256c:	40020400 	.word	0x40020400
 8002570:	200003f8 	.word	0x200003f8
 8002574:	20000408 	.word	0x20000408
 8002578:	40020000 	.word	0x40020000
 800257c:	20000400 	.word	0x20000400
 8002580:	20000410 	.word	0x20000410

08002584 <motorControl>:

void motorControl(int in1, int in2) {
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
 800258c:	6039      	str	r1, [r7, #0]
	GPIO_PinState state1=GPIO_PIN_RESET,state2=GPIO_PIN_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
 8002592:	2300      	movs	r3, #0
 8002594:	73bb      	strb	r3, [r7, #14]
	if(in1==1){
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d102      	bne.n	80025a2 <motorControl+0x1e>
		state1=GPIO_PIN_SET;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
 80025a0:	e001      	b.n	80025a6 <motorControl+0x22>
	}
	else{
		state1=GPIO_PIN_RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	73fb      	strb	r3, [r7, #15]
	}
	if(in2==1){
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d102      	bne.n	80025b2 <motorControl+0x2e>
		state2=GPIO_PIN_SET;
 80025ac:	2301      	movs	r3, #1
 80025ae:	73bb      	strb	r3, [r7, #14]
 80025b0:	e001      	b.n	80025b6 <motorControl+0x32>
	}
	else{
		state2=GPIO_PIN_RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	73bb      	strb	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(GPIOB, Left_IN1_Pin, state1);
 80025b6:	7bfb      	ldrb	r3, [r7, #15]
 80025b8:	461a      	mov	r2, r3
 80025ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025be:	4806      	ldr	r0, [pc, #24]	; (80025d8 <motorControl+0x54>)
 80025c0:	f001 fa50 	bl	8003a64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Left_IN2_Pin, state2);
 80025c4:	7bbb      	ldrb	r3, [r7, #14]
 80025c6:	461a      	mov	r2, r3
 80025c8:	2110      	movs	r1, #16
 80025ca:	4804      	ldr	r0, [pc, #16]	; (80025dc <motorControl+0x58>)
 80025cc:	f001 fa4a 	bl	8003a64 <HAL_GPIO_WritePin>
}
 80025d0:	bf00      	nop
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40020400 	.word	0x40020400
 80025dc:	40020800 	.word	0x40020800

080025e0 <motorControl_r>:

void motorControl_r(int in1, int in2) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
	GPIO_PinState state1=GPIO_PIN_RESET,state2=GPIO_PIN_RESET;
 80025ea:	2300      	movs	r3, #0
 80025ec:	73fb      	strb	r3, [r7, #15]
 80025ee:	2300      	movs	r3, #0
 80025f0:	73bb      	strb	r3, [r7, #14]
	if(in1==1){
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d102      	bne.n	80025fe <motorControl_r+0x1e>
		state1=GPIO_PIN_SET;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	e001      	b.n	8002602 <motorControl_r+0x22>
	}
	else{
		state1=GPIO_PIN_RESET;
 80025fe:	2300      	movs	r3, #0
 8002600:	73fb      	strb	r3, [r7, #15]
	}
	if(in2==1){
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	2b01      	cmp	r3, #1
 8002606:	d102      	bne.n	800260e <motorControl_r+0x2e>
		state2=GPIO_PIN_SET;
 8002608:	2301      	movs	r3, #1
 800260a:	73bb      	strb	r3, [r7, #14]
 800260c:	e001      	b.n	8002612 <motorControl_r+0x32>
	}
	else{
		state2=GPIO_PIN_RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	73bb      	strb	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(GPIOC, Right_IN1_Pin, state1);
 8002612:	7bfb      	ldrb	r3, [r7, #15]
 8002614:	461a      	mov	r2, r3
 8002616:	2120      	movs	r1, #32
 8002618:	4806      	ldr	r0, [pc, #24]	; (8002634 <motorControl_r+0x54>)
 800261a:	f001 fa23 	bl	8003a64 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOC, Right_IN2_Pin, state2);
 800261e:	7bbb      	ldrb	r3, [r7, #14]
 8002620:	461a      	mov	r2, r3
 8002622:	2140      	movs	r1, #64	; 0x40
 8002624:	4803      	ldr	r0, [pc, #12]	; (8002634 <motorControl_r+0x54>)
 8002626:	f001 fa1d 	bl	8003a64 <HAL_GPIO_WritePin>
}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40020800 	.word	0x40020800

08002638 <check_pwm>:

void check_pwm() {
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
	if (speed >= 180) {
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <check_pwm+0x48>)
 800263e:	edd3 7a00 	vldr	s15, [r3]
 8002642:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8002684 <check_pwm+0x4c>
 8002646:	eef4 7ac7 	vcmpe.f32	s15, s14
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	db03      	blt.n	8002658 <check_pwm+0x20>
		speed = 180;
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <check_pwm+0x48>)
 8002652:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <check_pwm+0x50>)
 8002654:	601a      	str	r2, [r3, #0]
	} else if (speed <= -180) {
		speed = -180;
	}
}
 8002656:	e00d      	b.n	8002674 <check_pwm+0x3c>
	} else if (speed <= -180) {
 8002658:	4b09      	ldr	r3, [pc, #36]	; (8002680 <check_pwm+0x48>)
 800265a:	edd3 7a00 	vldr	s15, [r3]
 800265e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 800268c <check_pwm+0x54>
 8002662:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002666:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266a:	d900      	bls.n	800266e <check_pwm+0x36>
}
 800266c:	e002      	b.n	8002674 <check_pwm+0x3c>
		speed = -180;
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <check_pwm+0x48>)
 8002670:	4a07      	ldr	r2, [pc, #28]	; (8002690 <check_pwm+0x58>)
 8002672:	601a      	str	r2, [r3, #0]
}
 8002674:	bf00      	nop
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	20000438 	.word	0x20000438
 8002684:	43340000 	.word	0x43340000
 8002688:	43340000 	.word	0x43340000
 800268c:	c3340000 	.word	0xc3340000
 8002690:	c3340000 	.word	0xc3340000

08002694 <check_pwm_r>:

void check_pwm_r() {
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
	if (speed_r >= 180) {
 8002698:	4b10      	ldr	r3, [pc, #64]	; (80026dc <check_pwm_r+0x48>)
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80026e0 <check_pwm_r+0x4c>
 80026a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026aa:	db03      	blt.n	80026b4 <check_pwm_r+0x20>
		speed_r = 180;
 80026ac:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <check_pwm_r+0x48>)
 80026ae:	4a0d      	ldr	r2, [pc, #52]	; (80026e4 <check_pwm_r+0x50>)
 80026b0:	601a      	str	r2, [r3, #0]
	} else if (speed_r <= -180) {
		speed_r = -180;
	}
}
 80026b2:	e00d      	b.n	80026d0 <check_pwm_r+0x3c>
	} else if (speed_r <= -180) {
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <check_pwm_r+0x48>)
 80026b6:	edd3 7a00 	vldr	s15, [r3]
 80026ba:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 80026e8 <check_pwm_r+0x54>
 80026be:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c6:	d900      	bls.n	80026ca <check_pwm_r+0x36>
}
 80026c8:	e002      	b.n	80026d0 <check_pwm_r+0x3c>
		speed_r = -180;
 80026ca:	4b04      	ldr	r3, [pc, #16]	; (80026dc <check_pwm_r+0x48>)
 80026cc:	4a07      	ldr	r2, [pc, #28]	; (80026ec <check_pwm_r+0x58>)
 80026ce:	601a      	str	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	2000043c 	.word	0x2000043c
 80026e0:	43340000 	.word	0x43340000
 80026e4:	43340000 	.word	0x43340000
 80026e8:	c3340000 	.word	0xc3340000
 80026ec:	c3340000 	.word	0xc3340000

080026f0 <check_move_state>:

void check_move_state() {
 80026f0:	b480      	push	{r7}
 80026f2:	af00      	add	r7, sp, #0
	if (speed >= 0) {
 80026f4:	4b0f      	ldr	r3, [pc, #60]	; (8002734 <check_move_state+0x44>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002702:	db09      	blt.n	8002718 <check_move_state+0x28>
		move_state = 0;
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <check_move_state+0x48>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]
		control_1 = 0, control_2 = 1;
 800270a:	4b0c      	ldr	r3, [pc, #48]	; (800273c <check_move_state+0x4c>)
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <check_move_state+0x50>)
 8002712:	2201      	movs	r2, #1
 8002714:	601a      	str	r2, [r3, #0]
	} else {
		move_state = 1;
		control_1 = 1, control_2 = 0;
	}
}
 8002716:	e008      	b.n	800272a <check_move_state+0x3a>
		move_state = 1;
 8002718:	4b07      	ldr	r3, [pc, #28]	; (8002738 <check_move_state+0x48>)
 800271a:	2201      	movs	r2, #1
 800271c:	601a      	str	r2, [r3, #0]
		control_1 = 1, control_2 = 0;
 800271e:	4b07      	ldr	r3, [pc, #28]	; (800273c <check_move_state+0x4c>)
 8002720:	2201      	movs	r2, #1
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <check_move_state+0x50>)
 8002726:	2200      	movs	r2, #0
 8002728:	601a      	str	r2, [r3, #0]
}
 800272a:	bf00      	nop
 800272c:	46bd      	mov	sp, r7
 800272e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002732:	4770      	bx	lr
 8002734:	20000438 	.word	0x20000438
 8002738:	20000500 	.word	0x20000500
 800273c:	200004f8 	.word	0x200004f8
 8002740:	20000030 	.word	0x20000030

08002744 <check_move_state_r>:

void check_move_state_r() {
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
	if (speed_r >= 0) {
 8002748:	4b0f      	ldr	r3, [pc, #60]	; (8002788 <check_move_state_r+0x44>)
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002752:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002756:	db09      	blt.n	800276c <check_move_state_r+0x28>
		move_state_r = 0;
 8002758:	4b0c      	ldr	r3, [pc, #48]	; (800278c <check_move_state_r+0x48>)
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
		control_1_r = 1, control_2_r = 0;
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <check_move_state_r+0x4c>)
 8002760:	2201      	movs	r2, #1
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <check_move_state_r+0x50>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
	} else {
		move_state_r = 1;
		control_1_r = 0, control_2_r = 1;
	}
}
 800276a:	e008      	b.n	800277e <check_move_state_r+0x3a>
		move_state_r = 1;
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <check_move_state_r+0x48>)
 800276e:	2201      	movs	r2, #1
 8002770:	601a      	str	r2, [r3, #0]
		control_1_r = 0, control_2_r = 1;
 8002772:	4b07      	ldr	r3, [pc, #28]	; (8002790 <check_move_state_r+0x4c>)
 8002774:	2200      	movs	r2, #0
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <check_move_state_r+0x50>)
 800277a:	2201      	movs	r2, #1
 800277c:	601a      	str	r2, [r3, #0]
}
 800277e:	bf00      	nop
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	2000043c 	.word	0x2000043c
 800278c:	20000504 	.word	0x20000504
 8002790:	20000034 	.word	0x20000034
 8002794:	200004fc 	.word	0x200004fc

08002798 <cmd_vel_calculate>:

void cmd_vel_calculate(void) {
 8002798:	b480      	push	{r7}
 800279a:	af00      	add	r7, sp, #0
	cmd_vel_s = cmd_vel_x;
 800279c:	4b12      	ldr	r3, [pc, #72]	; (80027e8 <cmd_vel_calculate+0x50>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a12      	ldr	r2, [pc, #72]	; (80027ec <cmd_vel_calculate+0x54>)
 80027a2:	6013      	str	r3, [r2, #0]
	cmd_vel_th = cmd_vel_z;
 80027a4:	4b12      	ldr	r3, [pc, #72]	; (80027f0 <cmd_vel_calculate+0x58>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a12      	ldr	r2, [pc, #72]	; (80027f4 <cmd_vel_calculate+0x5c>)
 80027aa:	6013      	str	r3, [r2, #0]
	if (cmd_vel_x == 0 && cmd_vel_z == 0) {
 80027ac:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <cmd_vel_calculate+0x50>)
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ba:	d10b      	bne.n	80027d4 <cmd_vel_calculate+0x3c>
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <cmd_vel_calculate+0x58>)
 80027be:	edd3 7a00 	vldr	s15, [r3]
 80027c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027ca:	d103      	bne.n	80027d4 <cmd_vel_calculate+0x3c>
		stop_flag = 1;
 80027cc:	4b0a      	ldr	r3, [pc, #40]	; (80027f8 <cmd_vel_calculate+0x60>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	601a      	str	r2, [r3, #0]
 80027d2:	e003      	b.n	80027dc <cmd_vel_calculate+0x44>
	} else {
		stop_flag = 0;
 80027d4:	4b08      	ldr	r3, [pc, #32]	; (80027f8 <cmd_vel_calculate+0x60>)
 80027d6:	2200      	movs	r2, #0
 80027d8:	601a      	str	r2, [r3, #0]
	}
}
 80027da:	bf00      	nop
 80027dc:	bf00      	nop
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	20000690 	.word	0x20000690
 80027ec:	20000698 	.word	0x20000698
 80027f0:	20000694 	.word	0x20000694
 80027f4:	2000069c 	.word	0x2000069c
 80027f8:	20000478 	.word	0x20000478

080027fc <HAL_TIM_PeriodElapsedCallback>:

uint32_t millis(void) {
	return msTicks;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800280c:	d106      	bne.n	800281c <HAL_TIM_PeriodElapsedCallback+0x20>
		if(msTicks>30){
 800280e:	4b06      	ldr	r3, [pc, #24]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b1e      	cmp	r3, #30
 8002814:	d902      	bls.n	800281c <HAL_TIM_PeriodElapsedCallback+0x20>
			msTicks = 0;
 8002816:	4b04      	ldr	r3, [pc, #16]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002818:	2200      	movs	r2, #0
 800281a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr
 8002828:	200006a4 	.word	0x200006a4

0800282c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800282c:	b580      	push	{r7, lr}
 800282e:	b090      	sub	sp, #64	; 0x40
 8002830:	af02      	add	r7, sp, #8
 8002832:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a8a      	ldr	r2, [pc, #552]	; (8002a64 <HAL_UART_RxCpltCallback+0x238>)
 800283a:	4293      	cmp	r3, r2
 800283c:	f040 8108 	bne.w	8002a50 <HAL_UART_RxCpltCallback+0x224>
		if (rx_data != '\n') {
 8002840:	4b89      	ldr	r3, [pc, #548]	; (8002a68 <HAL_UART_RxCpltCallback+0x23c>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b0a      	cmp	r3, #10
 8002846:	d009      	beq.n	800285c <HAL_UART_RxCpltCallback+0x30>
			rx_buffer[rx_index++] = rx_data;
 8002848:	4b88      	ldr	r3, [pc, #544]	; (8002a6c <HAL_UART_RxCpltCallback+0x240>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	4987      	ldr	r1, [pc, #540]	; (8002a6c <HAL_UART_RxCpltCallback+0x240>)
 8002850:	600a      	str	r2, [r1, #0]
 8002852:	4a85      	ldr	r2, [pc, #532]	; (8002a68 <HAL_UART_RxCpltCallback+0x23c>)
 8002854:	7811      	ldrb	r1, [r2, #0]
 8002856:	4a86      	ldr	r2, [pc, #536]	; (8002a70 <HAL_UART_RxCpltCallback+0x244>)
 8002858:	54d1      	strb	r1, [r2, r3]
 800285a:	e0f9      	b.n	8002a50 <HAL_UART_RxCpltCallback+0x224>
		}
		else {
			rx_buffer[rx_index] = '\0';
 800285c:	4b83      	ldr	r3, [pc, #524]	; (8002a6c <HAL_UART_RxCpltCallback+0x240>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a83      	ldr	r2, [pc, #524]	; (8002a70 <HAL_UART_RxCpltCallback+0x244>)
 8002862:	2100      	movs	r1, #0
 8002864:	54d1      	strb	r1, [r2, r3]
			//printf("Data: %s\n", rx_buffer);

			if (rx_buffer[0] == '1') {
 8002866:	4b82      	ldr	r3, [pc, #520]	; (8002a70 <HAL_UART_RxCpltCallback+0x244>)
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	2b31      	cmp	r3, #49	; 0x31
 800286c:	d148      	bne.n	8002900 <HAL_UART_RxCpltCallback+0xd4>
				//printf("[1] Data: %s\n", rx_buffer);

				char first_number[10];

				strncpy(first_number, &rx_buffer[2], 9);
 800286e:	f107 0320 	add.w	r3, r7, #32
 8002872:	2209      	movs	r2, #9
 8002874:	497f      	ldr	r1, [pc, #508]	; (8002a74 <HAL_UART_RxCpltCallback+0x248>)
 8002876:	4618      	mov	r0, r3
 8002878:	f005 fd73 	bl	8008362 <strncpy>
				first_number[10] = '\0';
 800287c:	2300      	movs	r3, #0
 800287e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

				cmd_vel_x = atof(first_number);
 8002882:	f107 0320 	add.w	r3, r7, #32
 8002886:	4618      	mov	r0, r3
 8002888:	f003 ff82 	bl	8006790 <atof>
 800288c:	ec53 2b10 	vmov	r2, r3, d0
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f7fe f9c8 	bl	8000c28 <__aeabi_d2f>
 8002898:	4603      	mov	r3, r0
 800289a:	4a77      	ldr	r2, [pc, #476]	; (8002a78 <HAL_UART_RxCpltCallback+0x24c>)
 800289c:	6013      	str	r3, [r2, #0]
				if (rx_buffer[1] == '0') { // ?��?��?�� 경우
 800289e:	4b74      	ldr	r3, [pc, #464]	; (8002a70 <HAL_UART_RxCpltCallback+0x244>)
 80028a0:	785b      	ldrb	r3, [r3, #1]
 80028a2:	2b30      	cmp	r3, #48	; 0x30
 80028a4:	d107      	bne.n	80028b6 <HAL_UART_RxCpltCallback+0x8a>
					cmd_vel_x = -cmd_vel_x;
 80028a6:	4b74      	ldr	r3, [pc, #464]	; (8002a78 <HAL_UART_RxCpltCallback+0x24c>)
 80028a8:	edd3 7a00 	vldr	s15, [r3]
 80028ac:	eef1 7a67 	vneg.f32	s15, s15
 80028b0:	4b71      	ldr	r3, [pc, #452]	; (8002a78 <HAL_UART_RxCpltCallback+0x24c>)
 80028b2:	edc3 7a00 	vstr	s15, [r3]
				}

				char second_number[10];
				strncpy(second_number, &rx_buffer[12], 9);
 80028b6:	f107 0314 	add.w	r3, r7, #20
 80028ba:	2209      	movs	r2, #9
 80028bc:	496f      	ldr	r1, [pc, #444]	; (8002a7c <HAL_UART_RxCpltCallback+0x250>)
 80028be:	4618      	mov	r0, r3
 80028c0:	f005 fd4f 	bl	8008362 <strncpy>
				second_number[10] = '\0';
 80028c4:	2300      	movs	r3, #0
 80028c6:	77bb      	strb	r3, [r7, #30]

				cmd_vel_z = atof(second_number);
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	4618      	mov	r0, r3
 80028ce:	f003 ff5f 	bl	8006790 <atof>
 80028d2:	ec53 2b10 	vmov	r2, r3, d0
 80028d6:	4610      	mov	r0, r2
 80028d8:	4619      	mov	r1, r3
 80028da:	f7fe f9a5 	bl	8000c28 <__aeabi_d2f>
 80028de:	4603      	mov	r3, r0
 80028e0:	4a67      	ldr	r2, [pc, #412]	; (8002a80 <HAL_UART_RxCpltCallback+0x254>)
 80028e2:	6013      	str	r3, [r2, #0]
				if (rx_buffer[11] == '0') { // ?��?��?�� 경우
 80028e4:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <HAL_UART_RxCpltCallback+0x244>)
 80028e6:	7adb      	ldrb	r3, [r3, #11]
 80028e8:	2b30      	cmp	r3, #48	; 0x30
 80028ea:	f040 80a8 	bne.w	8002a3e <HAL_UART_RxCpltCallback+0x212>
					cmd_vel_z = -cmd_vel_z;
 80028ee:	4b64      	ldr	r3, [pc, #400]	; (8002a80 <HAL_UART_RxCpltCallback+0x254>)
 80028f0:	edd3 7a00 	vldr	s15, [r3]
 80028f4:	eef1 7a67 	vneg.f32	s15, s15
 80028f8:	4b61      	ldr	r3, [pc, #388]	; (8002a80 <HAL_UART_RxCpltCallback+0x254>)
 80028fa:	edc3 7a00 	vstr	s15, [r3]
 80028fe:	e09e      	b.n	8002a3e <HAL_UART_RxCpltCallback+0x212>
				}
			}
			else if (rx_buffer[0] == '2') {
 8002900:	4b5b      	ldr	r3, [pc, #364]	; (8002a70 <HAL_UART_RxCpltCallback+0x244>)
 8002902:	781b      	ldrb	r3, [r3, #0]
 8002904:	2b32      	cmp	r3, #50	; 0x32
 8002906:	f040 809a 	bne.w	8002a3e <HAL_UART_RxCpltCallback+0x212>
				//printf("[2] Data: %s\n", rx_buffer);

				//Data_import
				for (int i = 0; i < 48; i++) {
 800290a:	2300      	movs	r3, #0
 800290c:	637b      	str	r3, [r7, #52]	; 0x34
 800290e:	e00b      	b.n	8002928 <HAL_UART_RxCpltCallback+0xfc>
					motor_buffer[i] = rx_buffer[i + 1];
 8002910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002912:	3301      	adds	r3, #1
 8002914:	4a56      	ldr	r2, [pc, #344]	; (8002a70 <HAL_UART_RxCpltCallback+0x244>)
 8002916:	5cd1      	ldrb	r1, [r2, r3]
 8002918:	4a5a      	ldr	r2, [pc, #360]	; (8002a84 <HAL_UART_RxCpltCallback+0x258>)
 800291a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800291c:	4413      	add	r3, r2
 800291e:	460a      	mov	r2, r1
 8002920:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 48; i++) {
 8002922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002924:	3301      	adds	r3, #1
 8002926:	637b      	str	r3, [r7, #52]	; 0x34
 8002928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292a:	2b2f      	cmp	r3, #47	; 0x2f
 800292c:	ddf0      	ble.n	8002910 <HAL_UART_RxCpltCallback+0xe4>
				}

				//Slicing Data and char to float
				for (int i = 0; i < 6; i++) {
 800292e:	2300      	movs	r3, #0
 8002930:	633b      	str	r3, [r7, #48]	; 0x30
 8002932:	e031      	b.n	8002998 <HAL_UART_RxCpltCallback+0x16c>
					char temp[9];

					for (int j = 0; j < 8; j++) {
 8002934:	2300      	movs	r3, #0
 8002936:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002938:	e00e      	b.n	8002958 <HAL_UART_RxCpltCallback+0x12c>
						temp[j] = motor_buffer[i * 8 + j];
 800293a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800293c:	00da      	lsls	r2, r3, #3
 800293e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002940:	4413      	add	r3, r2
 8002942:	4a50      	ldr	r2, [pc, #320]	; (8002a84 <HAL_UART_RxCpltCallback+0x258>)
 8002944:	5cd1      	ldrb	r1, [r2, r3]
 8002946:	f107 0208 	add.w	r2, r7, #8
 800294a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294c:	4413      	add	r3, r2
 800294e:	460a      	mov	r2, r1
 8002950:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++) {
 8002952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002954:	3301      	adds	r3, #1
 8002956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800295a:	2b07      	cmp	r3, #7
 800295c:	dded      	ble.n	800293a <HAL_UART_RxCpltCallback+0x10e>
					}
					temp[8] = '\0';
 800295e:	2300      	movs	r3, #0
 8002960:	743b      	strb	r3, [r7, #16]

					motor_degree[i] = radiansToDegrees(atof(temp));;
 8002962:	f107 0308 	add.w	r3, r7, #8
 8002966:	4618      	mov	r0, r3
 8002968:	f003 ff12 	bl	8006790 <atof>
 800296c:	ec53 2b10 	vmov	r2, r3, d0
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f958 	bl	8000c28 <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
 800297a:	ee00 3a10 	vmov	s0, r3
 800297e:	f7fe fbc3 	bl	8001108 <radiansToDegrees>
 8002982:	eef0 7a40 	vmov.f32	s15, s0
 8002986:	4a40      	ldr	r2, [pc, #256]	; (8002a88 <HAL_UART_RxCpltCallback+0x25c>)
 8002988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 6; i++) {
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	3301      	adds	r3, #1
 8002996:	633b      	str	r3, [r7, #48]	; 0x30
 8002998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299a:	2b05      	cmp	r3, #5
 800299c:	ddca      	ble.n	8002934 <HAL_UART_RxCpltCallback+0x108>
				}


				//move motor
				setMotorAngle(&htim14, TIM_CHANNEL_1, motor_degree[0], MOTOR1_MIN_ANGLE, MOTOR1_MAX_ANGLE);
 800299e:	4b3a      	ldr	r3, [pc, #232]	; (8002a88 <HAL_UART_RxCpltCallback+0x25c>)
 80029a0:	edd3 7a00 	vldr	s15, [r3]
 80029a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a8:	edc7 7a00 	vstr	s15, [r7]
 80029ac:	783b      	ldrb	r3, [r7, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	23b4      	movs	r3, #180	; 0xb4
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	2300      	movs	r3, #0
 80029b6:	2100      	movs	r1, #0
 80029b8:	4834      	ldr	r0, [pc, #208]	; (8002a8c <HAL_UART_RxCpltCallback+0x260>)
 80029ba:	f7fe fc25 	bl	8001208 <setMotorAngle>
				setMotorAngle(&htim4, TIM_CHANNEL_1, motor_degree[1], MOTOR2_MIN_ANGLE, MOTOR2_MAX_ANGLE);
 80029be:	4b32      	ldr	r3, [pc, #200]	; (8002a88 <HAL_UART_RxCpltCallback+0x25c>)
 80029c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80029c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c8:	edc7 7a00 	vstr	s15, [r7]
 80029cc:	783b      	ldrb	r3, [r7, #0]
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	23a5      	movs	r3, #165	; 0xa5
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	230f      	movs	r3, #15
 80029d6:	2100      	movs	r1, #0
 80029d8:	482d      	ldr	r0, [pc, #180]	; (8002a90 <HAL_UART_RxCpltCallback+0x264>)
 80029da:	f7fe fc15 	bl	8001208 <setMotorAngle>
				setMotorAngle(&htim3, TIM_CHANNEL_2, motor_degree[2], MOTOR3_MIN_ANGLE, MOTOR3_MAX_ANGLE);
 80029de:	4b2a      	ldr	r3, [pc, #168]	; (8002a88 <HAL_UART_RxCpltCallback+0x25c>)
 80029e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80029e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e8:	edc7 7a00 	vstr	s15, [r7]
 80029ec:	783b      	ldrb	r3, [r7, #0]
 80029ee:	b2da      	uxtb	r2, r3
 80029f0:	23b4      	movs	r3, #180	; 0xb4
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2300      	movs	r3, #0
 80029f6:	2104      	movs	r1, #4
 80029f8:	4826      	ldr	r0, [pc, #152]	; (8002a94 <HAL_UART_RxCpltCallback+0x268>)
 80029fa:	f7fe fc05 	bl	8001208 <setMotorAngle>
				setMotorAngle(&htim2, TIM_CHANNEL_3, motor_degree[3], MOTOR4_MIN_ANGLE, MOTOR4_MAX_ANGLE);
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_UART_RxCpltCallback+0x25c>)
 8002a00:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a08:	edc7 7a00 	vstr	s15, [r7]
 8002a0c:	783b      	ldrb	r3, [r7, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	23b4      	movs	r3, #180	; 0xb4
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2300      	movs	r3, #0
 8002a16:	2108      	movs	r1, #8
 8002a18:	481f      	ldr	r0, [pc, #124]	; (8002a98 <HAL_UART_RxCpltCallback+0x26c>)
 8002a1a:	f7fe fbf5 	bl	8001208 <setMotorAngle>
				setMotorAngle(&htim3, TIM_CHANNEL_1, motor_degree[4], MOTOR5_MIN_ANGLE, MOTOR5_MAX_ANGLE);
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	; (8002a88 <HAL_UART_RxCpltCallback+0x25c>)
 8002a20:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a28:	edc7 7a00 	vstr	s15, [r7]
 8002a2c:	783b      	ldrb	r3, [r7, #0]
 8002a2e:	b2da      	uxtb	r2, r3
 8002a30:	23b4      	movs	r3, #180	; 0xb4
 8002a32:	9300      	str	r3, [sp, #0]
 8002a34:	2300      	movs	r3, #0
 8002a36:	2100      	movs	r1, #0
 8002a38:	4816      	ldr	r0, [pc, #88]	; (8002a94 <HAL_UART_RxCpltCallback+0x268>)
 8002a3a:	f7fe fbe5 	bl	8001208 <setMotorAngle>
				//setMotorAngle(&htim3, TIM_CHANNEL_1, motor_degree[4], MOTOR5_MIN_ANGLE, MOTOR5_MAX_ANGLE);
			}

			//reset huart2 buffer
			rx_index = 0;
 8002a3e:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <HAL_UART_RxCpltCallback+0x240>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8002a44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a48:	2100      	movs	r1, #0
 8002a4a:	4809      	ldr	r0, [pc, #36]	; (8002a70 <HAL_UART_RxCpltCallback+0x244>)
 8002a4c:	f005 fc6f 	bl	800832e <memset>
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rx_data, 1);
 8002a50:	2201      	movs	r2, #1
 8002a52:	4905      	ldr	r1, [pc, #20]	; (8002a68 <HAL_UART_RxCpltCallback+0x23c>)
 8002a54:	4811      	ldr	r0, [pc, #68]	; (8002a9c <HAL_UART_RxCpltCallback+0x270>)
 8002a56:	f002 ff20 	bl	800589a <HAL_UART_Receive_IT>
}
 8002a5a:	bf00      	nop
 8002a5c:	3738      	adds	r7, #56	; 0x38
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40004400 	.word	0x40004400
 8002a68:	20000608 	.word	0x20000608
 8002a6c:	2000060c 	.word	0x2000060c
 8002a70:	20000508 	.word	0x20000508
 8002a74:	2000050a 	.word	0x2000050a
 8002a78:	20000690 	.word	0x20000690
 8002a7c:	20000514 	.word	0x20000514
 8002a80:	20000694 	.word	0x20000694
 8002a84:	20000610 	.word	0x20000610
 8002a88:	20000644 	.word	0x20000644
 8002a8c:	2000035c 	.word	0x2000035c
 8002a90:	200002cc 	.word	0x200002cc
 8002a94:	20000284 	.word	0x20000284
 8002a98:	2000023c 	.word	0x2000023c
 8002a9c:	200003a4 	.word	0x200003a4

08002aa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002aa4:	b672      	cpsid	i
}
 8002aa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002aa8:	e7fe      	b.n	8002aa8 <Error_Handler+0x8>
	...

08002aac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	607b      	str	r3, [r7, #4]
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	4a0f      	ldr	r2, [pc, #60]	; (8002af8 <HAL_MspInit+0x4c>)
 8002abc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ac0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac2:	4b0d      	ldr	r3, [pc, #52]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aca:	607b      	str	r3, [r7, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	2300      	movs	r3, #0
 8002ad0:	603b      	str	r3, [r7, #0]
 8002ad2:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad6:	4a08      	ldr	r2, [pc, #32]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6413      	str	r3, [r2, #64]	; 0x40
 8002ade:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_MspInit+0x4c>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae6:	603b      	str	r3, [r7, #0]
 8002ae8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002aea:	2007      	movs	r0, #7
 8002aec:	f000 fd3a 	bl	8003564 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002af0:	bf00      	nop
 8002af2:	3708      	adds	r7, #8
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40023800 	.word	0x40023800

08002afc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b0c:	d116      	bne.n	8002b3c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	617b      	str	r3, [r7, #20]
 8002b12:	4b36      	ldr	r3, [pc, #216]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	4a35      	ldr	r2, [pc, #212]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b1e:	4b33      	ldr	r3, [pc, #204]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	201c      	movs	r0, #28
 8002b30:	f000 fd23 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b34:	201c      	movs	r0, #28
 8002b36:	f000 fd3c 	bl	80035b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002b3a:	e052      	b.n	8002be2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a2b      	ldr	r2, [pc, #172]	; (8002bf0 <HAL_TIM_Base_MspInit+0xf4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d116      	bne.n	8002b74 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	4b28      	ldr	r3, [pc, #160]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4e:	4a27      	ldr	r2, [pc, #156]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002b50:	f043 0302 	orr.w	r3, r3, #2
 8002b54:	6413      	str	r3, [r2, #64]	; 0x40
 8002b56:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8002b62:	2201      	movs	r2, #1
 8002b64:	2100      	movs	r1, #0
 8002b66:	201d      	movs	r0, #29
 8002b68:	f000 fd07 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b6c:	201d      	movs	r0, #29
 8002b6e:	f000 fd20 	bl	80035b2 <HAL_NVIC_EnableIRQ>
}
 8002b72:	e036      	b.n	8002be2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a1e      	ldr	r2, [pc, #120]	; (8002bf4 <HAL_TIM_Base_MspInit+0xf8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d116      	bne.n	8002bac <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b1a      	ldr	r3, [pc, #104]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b86:	4a19      	ldr	r2, [pc, #100]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002b88:	f043 0304 	orr.w	r3, r3, #4
 8002b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b8e:	4b17      	ldr	r3, [pc, #92]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	f003 0304 	and.w	r3, r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	201e      	movs	r0, #30
 8002ba0:	f000 fceb 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002ba4:	201e      	movs	r0, #30
 8002ba6:	f000 fd04 	bl	80035b2 <HAL_NVIC_EnableIRQ>
}
 8002baa:	e01a      	b.n	8002be2 <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM14)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a11      	ldr	r2, [pc, #68]	; (8002bf8 <HAL_TIM_Base_MspInit+0xfc>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d115      	bne.n	8002be2 <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	4b0c      	ldr	r3, [pc, #48]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	4a0b      	ldr	r2, [pc, #44]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002bc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bc4:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc6:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_TIM_Base_MspInit+0xf0>)
 8002bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bce:	60bb      	str	r3, [r7, #8]
 8002bd0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 1);
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	202d      	movs	r0, #45	; 0x2d
 8002bd8:	f000 fccf 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002bdc:	202d      	movs	r0, #45	; 0x2d
 8002bde:	f000 fce8 	bl	80035b2 <HAL_NVIC_EnableIRQ>
}
 8002be2:	bf00      	nop
 8002be4:	3718      	adds	r7, #24
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	40000400 	.word	0x40000400
 8002bf4:	40000800 	.word	0x40000800
 8002bf8:	40002000 	.word	0x40002000

08002bfc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a0e      	ldr	r2, [pc, #56]	; (8002c44 <HAL_TIM_PWM_MspInit+0x48>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d115      	bne.n	8002c3a <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002c0e:	2300      	movs	r3, #0
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	4b0d      	ldr	r3, [pc, #52]	; (8002c48 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	4a0c      	ldr	r2, [pc, #48]	; (8002c48 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c18:	f043 0308 	orr.w	r3, r3, #8
 8002c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c1e:	4b0a      	ldr	r3, [pc, #40]	; (8002c48 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	f003 0308 	and.w	r3, r3, #8
 8002c26:	60fb      	str	r3, [r7, #12]
 8002c28:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2100      	movs	r1, #0
 8002c2e:	2032      	movs	r0, #50	; 0x32
 8002c30:	f000 fca3 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c34:	2032      	movs	r0, #50	; 0x32
 8002c36:	f000 fcbc 	bl	80035b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c3a:	bf00      	nop
 8002c3c:	3710      	adds	r7, #16
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40000c00 	.word	0x40000c00
 8002c48:	40023800 	.word	0x40023800

08002c4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b08e      	sub	sp, #56	; 0x38
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c58:	2200      	movs	r2, #0
 8002c5a:	601a      	str	r2, [r3, #0]
 8002c5c:	605a      	str	r2, [r3, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
 8002c60:	60da      	str	r2, [r3, #12]
 8002c62:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d11f      	bne.n	8002cae <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	623b      	str	r3, [r7, #32]
 8002c72:	4b67      	ldr	r3, [pc, #412]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c76:	4a66      	ldr	r2, [pc, #408]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002c78:	f043 0302 	orr.w	r3, r3, #2
 8002c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002c7e:	4b64      	ldr	r3, [pc, #400]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	623b      	str	r3, [r7, #32]
 8002c88:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = TIM_wrist_rot_Pin;
 8002c8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c90:	2302      	movs	r3, #2
 8002c92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_wrist_rot_GPIO_Port, &GPIO_InitStruct);
 8002ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	485b      	ldr	r0, [pc, #364]	; (8002e14 <HAL_TIM_MspPostInit+0x1c8>)
 8002ca8:	f000 fd30 	bl	800370c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002cac:	e0ac      	b.n	8002e08 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM3)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a59      	ldr	r2, [pc, #356]	; (8002e18 <HAL_TIM_MspPostInit+0x1cc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d13c      	bne.n	8002d32 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61fb      	str	r3, [r7, #28]
 8002cbc:	4b54      	ldr	r3, [pc, #336]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cc0:	4a53      	ldr	r2, [pc, #332]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002cc2:	f043 0304 	orr.w	r3, r3, #4
 8002cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8002cc8:	4b51      	ldr	r3, [pc, #324]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ccc:	f003 0304 	and.w	r3, r3, #4
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
 8002cd8:	4b4d      	ldr	r3, [pc, #308]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cdc:	4a4c      	ldr	r2, [pc, #304]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002cde:	f043 0302 	orr.w	r3, r3, #2
 8002ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ce4:	4b4a      	ldr	r3, [pc, #296]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM_elbow_Pin;
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cf4:	2302      	movs	r3, #2
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d00:	2302      	movs	r3, #2
 8002d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_elbow_GPIO_Port, &GPIO_InitStruct);
 8002d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4844      	ldr	r0, [pc, #272]	; (8002e1c <HAL_TIM_MspPostInit+0x1d0>)
 8002d0c:	f000 fcfe 	bl	800370c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_wrist_var_Pin;
 8002d10:	2310      	movs	r3, #16
 8002d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d14:	2302      	movs	r3, #2
 8002d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d20:	2302      	movs	r3, #2
 8002d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_wrist_var_GPIO_Port, &GPIO_InitStruct);
 8002d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d28:	4619      	mov	r1, r3
 8002d2a:	483a      	ldr	r0, [pc, #232]	; (8002e14 <HAL_TIM_MspPostInit+0x1c8>)
 8002d2c:	f000 fcee 	bl	800370c <HAL_GPIO_Init>
}
 8002d30:	e06a      	b.n	8002e08 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM4)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a3a      	ldr	r2, [pc, #232]	; (8002e20 <HAL_TIM_MspPostInit+0x1d4>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d11e      	bne.n	8002d7a <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
 8002d40:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	4a32      	ldr	r2, [pc, #200]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002d46:	f043 0302 	orr.w	r3, r3, #2
 8002d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d4c:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	617b      	str	r3, [r7, #20]
 8002d56:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM_shoulder_Pin;
 8002d58:	2340      	movs	r3, #64	; 0x40
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d64:	2300      	movs	r3, #0
 8002d66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d68:	2302      	movs	r3, #2
 8002d6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_shoulder_GPIO_Port, &GPIO_InitStruct);
 8002d6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002d70:	4619      	mov	r1, r3
 8002d72:	4828      	ldr	r0, [pc, #160]	; (8002e14 <HAL_TIM_MspPostInit+0x1c8>)
 8002d74:	f000 fcca 	bl	800370c <HAL_GPIO_Init>
}
 8002d78:	e046      	b.n	8002e08 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM5)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a29      	ldr	r2, [pc, #164]	; (8002e24 <HAL_TIM_MspPostInit+0x1d8>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d11e      	bne.n	8002dc2 <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d84:	2300      	movs	r3, #0
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	4b21      	ldr	r3, [pc, #132]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	4a20      	ldr	r2, [pc, #128]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002d8e:	f043 0301 	orr.w	r3, r3, #1
 8002d92:	6313      	str	r3, [r2, #48]	; 0x30
 8002d94:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	613b      	str	r3, [r7, #16]
 8002d9e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Left_Pwm_Pin|Right_Pwm_Pin;
 8002da0:	2303      	movs	r3, #3
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da4:	2302      	movs	r3, #2
 8002da6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da8:	2300      	movs	r3, #0
 8002daa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002db0:	2302      	movs	r3, #2
 8002db2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	4619      	mov	r1, r3
 8002dba:	481b      	ldr	r0, [pc, #108]	; (8002e28 <HAL_TIM_MspPostInit+0x1dc>)
 8002dbc:	f000 fca6 	bl	800370c <HAL_GPIO_Init>
}
 8002dc0:	e022      	b.n	8002e08 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM14)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a19      	ldr	r2, [pc, #100]	; (8002e2c <HAL_TIM_MspPostInit+0x1e0>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d11d      	bne.n	8002e08 <HAL_TIM_MspPostInit+0x1bc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4a0e      	ldr	r2, [pc, #56]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002dd6:	f043 0301 	orr.w	r3, r3, #1
 8002dda:	6313      	str	r3, [r2, #48]	; 0x30
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <HAL_TIM_MspPostInit+0x1c4>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	f003 0301 	and.w	r3, r3, #1
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_base_Pin;
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dec:	2302      	movs	r3, #2
 8002dee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002df0:	2300      	movs	r3, #0
 8002df2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002df4:	2300      	movs	r3, #0
 8002df6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002df8:	2309      	movs	r3, #9
 8002dfa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(TIM_base_GPIO_Port, &GPIO_InitStruct);
 8002dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e00:	4619      	mov	r1, r3
 8002e02:	4809      	ldr	r0, [pc, #36]	; (8002e28 <HAL_TIM_MspPostInit+0x1dc>)
 8002e04:	f000 fc82 	bl	800370c <HAL_GPIO_Init>
}
 8002e08:	bf00      	nop
 8002e0a:	3738      	adds	r7, #56	; 0x38
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40020400 	.word	0x40020400
 8002e18:	40000400 	.word	0x40000400
 8002e1c:	40020800 	.word	0x40020800
 8002e20:	40000800 	.word	0x40000800
 8002e24:	40000c00 	.word	0x40000c00
 8002e28:	40020000 	.word	0x40020000
 8002e2c:	40002000 	.word	0x40002000

08002e30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b08a      	sub	sp, #40	; 0x28
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e38:	f107 0314 	add.w	r3, r7, #20
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
 8002e44:	60da      	str	r2, [r3, #12]
 8002e46:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a1d      	ldr	r2, [pc, #116]	; (8002ec4 <HAL_UART_MspInit+0x94>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d133      	bne.n	8002eba <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
 8002e56:	4b1c      	ldr	r3, [pc, #112]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	4a1b      	ldr	r2, [pc, #108]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e60:	6413      	str	r3, [r2, #64]	; 0x40
 8002e62:	4b19      	ldr	r3, [pc, #100]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6a:	613b      	str	r3, [r7, #16]
 8002e6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e6e:	2300      	movs	r3, #0
 8002e70:	60fb      	str	r3, [r7, #12]
 8002e72:	4b15      	ldr	r3, [pc, #84]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	4a14      	ldr	r2, [pc, #80]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e78:	f043 0301 	orr.w	r3, r3, #1
 8002e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e7e:	4b12      	ldr	r3, [pc, #72]	; (8002ec8 <HAL_UART_MspInit+0x98>)
 8002e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	60fb      	str	r3, [r7, #12]
 8002e88:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e8a:	230c      	movs	r3, #12
 8002e8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e92:	2300      	movs	r3, #0
 8002e94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e96:	2303      	movs	r3, #3
 8002e98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e9e:	f107 0314 	add.w	r3, r7, #20
 8002ea2:	4619      	mov	r1, r3
 8002ea4:	4809      	ldr	r0, [pc, #36]	; (8002ecc <HAL_UART_MspInit+0x9c>)
 8002ea6:	f000 fc31 	bl	800370c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002eaa:	2200      	movs	r2, #0
 8002eac:	2100      	movs	r1, #0
 8002eae:	2026      	movs	r0, #38	; 0x26
 8002eb0:	f000 fb63 	bl	800357a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002eb4:	2026      	movs	r0, #38	; 0x26
 8002eb6:	f000 fb7c 	bl	80035b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002eba:	bf00      	nop
 8002ebc:	3728      	adds	r7, #40	; 0x28
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}
 8002ec2:	bf00      	nop
 8002ec4:	40004400 	.word	0x40004400
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	40020000 	.word	0x40020000

08002ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ed4:	e7fe      	b.n	8002ed4 <NMI_Handler+0x4>

08002ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eda:	e7fe      	b.n	8002eda <HardFault_Handler+0x4>

08002edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ee0:	e7fe      	b.n	8002ee0 <MemManage_Handler+0x4>

08002ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ee6:	e7fe      	b.n	8002ee6 <BusFault_Handler+0x4>

08002ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002eec:	e7fe      	b.n	8002eec <UsageFault_Handler+0x4>

08002eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr

08002f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f0a:	b480      	push	{r7}
 8002f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f0e:	bf00      	nop
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f1c:	f000 fa32 	bl	8003384 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  msTicks++;
 8002f20:	4b03      	ldr	r3, [pc, #12]	; (8002f30 <SysTick_Handler+0x18>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	4a02      	ldr	r2, [pc, #8]	; (8002f30 <SysTick_Handler+0x18>)
 8002f28:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	200006a4 	.word	0x200006a4

08002f34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f38:	4802      	ldr	r0, [pc, #8]	; (8002f44 <TIM2_IRQHandler+0x10>)
 8002f3a:	f001 fd85 	bl	8004a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f3e:	bf00      	nop
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	2000023c 	.word	0x2000023c

08002f48 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f4c:	4802      	ldr	r0, [pc, #8]	; (8002f58 <TIM3_IRQHandler+0x10>)
 8002f4e:	f001 fd7b 	bl	8004a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f52:	bf00      	nop
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000284 	.word	0x20000284

08002f5c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f60:	4802      	ldr	r0, [pc, #8]	; (8002f6c <TIM4_IRQHandler+0x10>)
 8002f62:	f001 fd71 	bl	8004a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f66:	bf00      	nop
 8002f68:	bd80      	pop	{r7, pc}
 8002f6a:	bf00      	nop
 8002f6c:	200002cc 	.word	0x200002cc

08002f70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f74:	4802      	ldr	r0, [pc, #8]	; (8002f80 <USART2_IRQHandler+0x10>)
 8002f76:	f002 fcb5 	bl	80058e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f7a:	bf00      	nop
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	200003a4 	.word	0x200003a4

08002f84 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_pulse_B_Pin);
 8002f88:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002f8c:	f000 fd84 	bl	8003a98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Right_pulse_A_Pin);
 8002f90:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f94:	f000 fd80 	bl	8003a98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f98:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f9c:	f000 fd7c 	bl	8003a98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_pulse_B_Pin);
 8002fa0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002fa4:	f000 fd78 	bl	8003a98 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_pulse_A_Pin);
 8002fa8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002fac:	f000 fd74 	bl	8003a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fb0:	bf00      	nop
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002fb8:	4802      	ldr	r0, [pc, #8]	; (8002fc4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002fba:	f001 fd45 	bl	8004a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002fbe:	bf00      	nop
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	2000035c 	.word	0x2000035c

08002fc8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fcc:	4802      	ldr	r0, [pc, #8]	; (8002fd8 <TIM5_IRQHandler+0x10>)
 8002fce:	f001 fd3b 	bl	8004a48 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000314 	.word	0x20000314

08002fdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	af00      	add	r7, sp, #0
  return 1;
 8002fe0:	2301      	movs	r3, #1
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <_kill>:

int _kill(int pid, int sig)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
 8002ff4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002ff6:	f005 fa11 	bl	800841c <__errno>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2216      	movs	r2, #22
 8002ffe:	601a      	str	r2, [r3, #0]
  return -1;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <_exit>:

void _exit (int status)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b082      	sub	sp, #8
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003014:	f04f 31ff 	mov.w	r1, #4294967295
 8003018:	6878      	ldr	r0, [r7, #4]
 800301a:	f7ff ffe7 	bl	8002fec <_kill>
  while (1) {}    /* Make sure we hang here */
 800301e:	e7fe      	b.n	800301e <_exit+0x12>

08003020 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
 8003030:	e00a      	b.n	8003048 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003032:	f3af 8000 	nop.w
 8003036:	4601      	mov	r1, r0
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	1c5a      	adds	r2, r3, #1
 800303c:	60ba      	str	r2, [r7, #8]
 800303e:	b2ca      	uxtb	r2, r1
 8003040:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	3301      	adds	r3, #1
 8003046:	617b      	str	r3, [r7, #20]
 8003048:	697a      	ldr	r2, [r7, #20]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	dbf0      	blt.n	8003032 <_read+0x12>
  }

  return len;
 8003050:	687b      	ldr	r3, [r7, #4]
}
 8003052:	4618      	mov	r0, r3
 8003054:	3718      	adds	r7, #24
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b086      	sub	sp, #24
 800305e:	af00      	add	r7, sp, #0
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003066:	2300      	movs	r3, #0
 8003068:	617b      	str	r3, [r7, #20]
 800306a:	e009      	b.n	8003080 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	1c5a      	adds	r2, r3, #1
 8003070:	60ba      	str	r2, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4618      	mov	r0, r3
 8003076:	f7fe f827 	bl	80010c8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800307a:	697b      	ldr	r3, [r7, #20]
 800307c:	3301      	adds	r3, #1
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	697a      	ldr	r2, [r7, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	429a      	cmp	r2, r3
 8003086:	dbf1      	blt.n	800306c <_write+0x12>
  }
  return len;
 8003088:	687b      	ldr	r3, [r7, #4]
}
 800308a:	4618      	mov	r0, r3
 800308c:	3718      	adds	r7, #24
 800308e:	46bd      	mov	sp, r7
 8003090:	bd80      	pop	{r7, pc}

08003092 <_close>:

int _close(int file)
{
 8003092:	b480      	push	{r7}
 8003094:	b083      	sub	sp, #12
 8003096:	af00      	add	r7, sp, #0
 8003098:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800309a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800309e:	4618      	mov	r0, r3
 80030a0:	370c      	adds	r7, #12
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr

080030aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030aa:	b480      	push	{r7}
 80030ac:	b083      	sub	sp, #12
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
 80030b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80030ba:	605a      	str	r2, [r3, #4]
  return 0;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <_isatty>:

int _isatty(int file)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030d2:	2301      	movs	r3, #1
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	370c      	adds	r7, #12
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr

080030e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
	...

080030fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003104:	4a14      	ldr	r2, [pc, #80]	; (8003158 <_sbrk+0x5c>)
 8003106:	4b15      	ldr	r3, [pc, #84]	; (800315c <_sbrk+0x60>)
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003110:	4b13      	ldr	r3, [pc, #76]	; (8003160 <_sbrk+0x64>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <_sbrk+0x64>)
 800311a:	4a12      	ldr	r2, [pc, #72]	; (8003164 <_sbrk+0x68>)
 800311c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800311e:	4b10      	ldr	r3, [pc, #64]	; (8003160 <_sbrk+0x64>)
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4413      	add	r3, r2
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	429a      	cmp	r2, r3
 800312a:	d207      	bcs.n	800313c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800312c:	f005 f976 	bl	800841c <__errno>
 8003130:	4603      	mov	r3, r0
 8003132:	220c      	movs	r2, #12
 8003134:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	e009      	b.n	8003150 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800313c:	4b08      	ldr	r3, [pc, #32]	; (8003160 <_sbrk+0x64>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003142:	4b07      	ldr	r3, [pc, #28]	; (8003160 <_sbrk+0x64>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4413      	add	r3, r2
 800314a:	4a05      	ldr	r2, [pc, #20]	; (8003160 <_sbrk+0x64>)
 800314c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800314e:	68fb      	ldr	r3, [r7, #12]
}
 8003150:	4618      	mov	r0, r3
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	20020000 	.word	0x20020000
 800315c:	00000400 	.word	0x00000400
 8003160:	200006a8 	.word	0x200006a8
 8003164:	20000800 	.word	0x20000800

08003168 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800316c:	4b06      	ldr	r3, [pc, #24]	; (8003188 <SystemInit+0x20>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	4a05      	ldr	r2, [pc, #20]	; (8003188 <SystemInit+0x20>)
 8003174:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003178:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800317c:	bf00      	nop
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000ed00 	.word	0xe000ed00

0800318c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800318c:	b480      	push	{r7}
 800318e:	b087      	sub	sp, #28
 8003190:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003192:	2300      	movs	r3, #0
 8003194:	613b      	str	r3, [r7, #16]
 8003196:	2300      	movs	r3, #0
 8003198:	617b      	str	r3, [r7, #20]
 800319a:	2302      	movs	r3, #2
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	2302      	movs	r3, #2
 80031a4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80031a6:	4b34      	ldr	r3, [pc, #208]	; (8003278 <SystemCoreClockUpdate+0xec>)
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	f003 030c 	and.w	r3, r3, #12
 80031ae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b08      	cmp	r3, #8
 80031b4:	d011      	beq.n	80031da <SystemCoreClockUpdate+0x4e>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b08      	cmp	r3, #8
 80031ba:	d844      	bhi.n	8003246 <SystemCoreClockUpdate+0xba>
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <SystemCoreClockUpdate+0x3e>
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	2b04      	cmp	r3, #4
 80031c6:	d004      	beq.n	80031d2 <SystemCoreClockUpdate+0x46>
 80031c8:	e03d      	b.n	8003246 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80031ca:	4b2c      	ldr	r3, [pc, #176]	; (800327c <SystemCoreClockUpdate+0xf0>)
 80031cc:	4a2c      	ldr	r2, [pc, #176]	; (8003280 <SystemCoreClockUpdate+0xf4>)
 80031ce:	601a      	str	r2, [r3, #0]
      break;
 80031d0:	e03d      	b.n	800324e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80031d2:	4b2a      	ldr	r3, [pc, #168]	; (800327c <SystemCoreClockUpdate+0xf0>)
 80031d4:	4a2b      	ldr	r2, [pc, #172]	; (8003284 <SystemCoreClockUpdate+0xf8>)
 80031d6:	601a      	str	r2, [r3, #0]
      break;
 80031d8:	e039      	b.n	800324e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80031da:	4b27      	ldr	r3, [pc, #156]	; (8003278 <SystemCoreClockUpdate+0xec>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	0d9b      	lsrs	r3, r3, #22
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e6:	4b24      	ldr	r3, [pc, #144]	; (8003278 <SystemCoreClockUpdate+0xec>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031ee:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00c      	beq.n	8003210 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031f6:	4a23      	ldr	r2, [pc, #140]	; (8003284 <SystemCoreClockUpdate+0xf8>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80031fe:	4a1e      	ldr	r2, [pc, #120]	; (8003278 <SystemCoreClockUpdate+0xec>)
 8003200:	6852      	ldr	r2, [r2, #4]
 8003202:	0992      	lsrs	r2, r2, #6
 8003204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	e00b      	b.n	8003228 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003210:	4a1b      	ldr	r2, [pc, #108]	; (8003280 <SystemCoreClockUpdate+0xf4>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	fbb2 f3f3 	udiv	r3, r2, r3
 8003218:	4a17      	ldr	r2, [pc, #92]	; (8003278 <SystemCoreClockUpdate+0xec>)
 800321a:	6852      	ldr	r2, [r2, #4]
 800321c:	0992      	lsrs	r2, r2, #6
 800321e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003222:	fb02 f303 	mul.w	r3, r2, r3
 8003226:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8003228:	4b13      	ldr	r3, [pc, #76]	; (8003278 <SystemCoreClockUpdate+0xec>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	f003 0303 	and.w	r3, r3, #3
 8003232:	3301      	adds	r3, #1
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003240:	4a0e      	ldr	r2, [pc, #56]	; (800327c <SystemCoreClockUpdate+0xf0>)
 8003242:	6013      	str	r3, [r2, #0]
      break;
 8003244:	e003      	b.n	800324e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8003246:	4b0d      	ldr	r3, [pc, #52]	; (800327c <SystemCoreClockUpdate+0xf0>)
 8003248:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <SystemCoreClockUpdate+0xf4>)
 800324a:	601a      	str	r2, [r3, #0]
      break;
 800324c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800324e:	4b0a      	ldr	r3, [pc, #40]	; (8003278 <SystemCoreClockUpdate+0xec>)
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	091b      	lsrs	r3, r3, #4
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	4a0b      	ldr	r2, [pc, #44]	; (8003288 <SystemCoreClockUpdate+0xfc>)
 800325a:	5cd3      	ldrb	r3, [r2, r3]
 800325c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800325e:	4b07      	ldr	r3, [pc, #28]	; (800327c <SystemCoreClockUpdate+0xf0>)
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
 8003268:	4a04      	ldr	r2, [pc, #16]	; (800327c <SystemCoreClockUpdate+0xf0>)
 800326a:	6013      	str	r3, [r2, #0]
}
 800326c:	bf00      	nop
 800326e:	371c      	adds	r7, #28
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	40023800 	.word	0x40023800
 800327c:	20000038 	.word	0x20000038
 8003280:	00f42400 	.word	0x00f42400
 8003284:	007a1200 	.word	0x007a1200
 8003288:	0800c330 	.word	0x0800c330

0800328c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 800328c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032c4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003290:	f7ff ff6a 	bl	8003168 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003294:	480c      	ldr	r0, [pc, #48]	; (80032c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003296:	490d      	ldr	r1, [pc, #52]	; (80032cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003298:	4a0d      	ldr	r2, [pc, #52]	; (80032d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800329a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800329c:	e002      	b.n	80032a4 <LoopCopyDataInit>

0800329e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800329e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032a2:	3304      	adds	r3, #4

080032a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032a8:	d3f9      	bcc.n	800329e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032aa:	4a0a      	ldr	r2, [pc, #40]	; (80032d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032ac:	4c0a      	ldr	r4, [pc, #40]	; (80032d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80032ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b0:	e001      	b.n	80032b6 <LoopFillZerobss>

080032b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032b4:	3204      	adds	r2, #4

080032b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032b8:	d3fb      	bcc.n	80032b2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80032ba:	f005 f8b5 	bl	8008428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032be:	f7fd ffdf 	bl	8001280 <main>
  bx  lr    
 80032c2:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80032c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032cc:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80032d0:	0800c960 	.word	0x0800c960
  ldr r2, =_sbss
 80032d4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80032d8:	200007fc 	.word	0x200007fc

080032dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032dc:	e7fe      	b.n	80032dc <ADC_IRQHandler>
	...

080032e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032e4:	4b0e      	ldr	r3, [pc, #56]	; (8003320 <HAL_Init+0x40>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0d      	ldr	r2, [pc, #52]	; (8003320 <HAL_Init+0x40>)
 80032ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032f0:	4b0b      	ldr	r3, [pc, #44]	; (8003320 <HAL_Init+0x40>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0a      	ldr	r2, [pc, #40]	; (8003320 <HAL_Init+0x40>)
 80032f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <HAL_Init+0x40>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a07      	ldr	r2, [pc, #28]	; (8003320 <HAL_Init+0x40>)
 8003302:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003306:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003308:	2003      	movs	r0, #3
 800330a:	f000 f92b 	bl	8003564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800330e:	2000      	movs	r0, #0
 8003310:	f000 f808 	bl	8003324 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003314:	f7ff fbca 	bl	8002aac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	40023c00 	.word	0x40023c00

08003324 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800332c:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_InitTick+0x54>)
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b12      	ldr	r3, [pc, #72]	; (800337c <HAL_InitTick+0x58>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	4619      	mov	r1, r3
 8003336:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800333a:	fbb3 f3f1 	udiv	r3, r3, r1
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	4618      	mov	r0, r3
 8003344:	f000 f943 	bl	80035ce <HAL_SYSTICK_Config>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e00e      	b.n	8003370 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b0f      	cmp	r3, #15
 8003356:	d80a      	bhi.n	800336e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003358:	2200      	movs	r2, #0
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	f04f 30ff 	mov.w	r0, #4294967295
 8003360:	f000 f90b 	bl	800357a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003364:	4a06      	ldr	r2, [pc, #24]	; (8003380 <HAL_InitTick+0x5c>)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800336a:	2300      	movs	r3, #0
 800336c:	e000      	b.n	8003370 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800336e:	2301      	movs	r3, #1
}
 8003370:	4618      	mov	r0, r3
 8003372:	3708      	adds	r7, #8
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000038 	.word	0x20000038
 800337c:	20000040 	.word	0x20000040
 8003380:	2000003c 	.word	0x2000003c

08003384 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <HAL_IncTick+0x20>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	461a      	mov	r2, r3
 800338e:	4b06      	ldr	r3, [pc, #24]	; (80033a8 <HAL_IncTick+0x24>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4413      	add	r3, r2
 8003394:	4a04      	ldr	r2, [pc, #16]	; (80033a8 <HAL_IncTick+0x24>)
 8003396:	6013      	str	r3, [r2, #0]
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	20000040 	.word	0x20000040
 80033a8:	200006ac 	.word	0x200006ac

080033ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033ac:	b480      	push	{r7}
 80033ae:	af00      	add	r7, sp, #0
  return uwTick;
 80033b0:	4b03      	ldr	r3, [pc, #12]	; (80033c0 <HAL_GetTick+0x14>)
 80033b2:	681b      	ldr	r3, [r3, #0]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	200006ac 	.word	0x200006ac

080033c4 <__NVIC_SetPriorityGrouping>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033d4:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033da:	68ba      	ldr	r2, [r7, #8]
 80033dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033e0:	4013      	ands	r3, r2
 80033e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033f6:	4a04      	ldr	r2, [pc, #16]	; (8003408 <__NVIC_SetPriorityGrouping+0x44>)
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	60d3      	str	r3, [r2, #12]
}
 80033fc:	bf00      	nop
 80033fe:	3714      	adds	r7, #20
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr
 8003408:	e000ed00 	.word	0xe000ed00

0800340c <__NVIC_GetPriorityGrouping>:
{
 800340c:	b480      	push	{r7}
 800340e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003410:	4b04      	ldr	r3, [pc, #16]	; (8003424 <__NVIC_GetPriorityGrouping+0x18>)
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	0a1b      	lsrs	r3, r3, #8
 8003416:	f003 0307 	and.w	r3, r3, #7
}
 800341a:	4618      	mov	r0, r3
 800341c:	46bd      	mov	sp, r7
 800341e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003422:	4770      	bx	lr
 8003424:	e000ed00 	.word	0xe000ed00

08003428 <__NVIC_EnableIRQ>:
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	4603      	mov	r3, r0
 8003430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003436:	2b00      	cmp	r3, #0
 8003438:	db0b      	blt.n	8003452 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800343a:	79fb      	ldrb	r3, [r7, #7]
 800343c:	f003 021f 	and.w	r2, r3, #31
 8003440:	4907      	ldr	r1, [pc, #28]	; (8003460 <__NVIC_EnableIRQ+0x38>)
 8003442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003446:	095b      	lsrs	r3, r3, #5
 8003448:	2001      	movs	r0, #1
 800344a:	fa00 f202 	lsl.w	r2, r0, r2
 800344e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
 800345e:	bf00      	nop
 8003460:	e000e100 	.word	0xe000e100

08003464 <__NVIC_SetPriority>:
{
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	4603      	mov	r3, r0
 800346c:	6039      	str	r1, [r7, #0]
 800346e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	2b00      	cmp	r3, #0
 8003476:	db0a      	blt.n	800348e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	b2da      	uxtb	r2, r3
 800347c:	490c      	ldr	r1, [pc, #48]	; (80034b0 <__NVIC_SetPriority+0x4c>)
 800347e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003482:	0112      	lsls	r2, r2, #4
 8003484:	b2d2      	uxtb	r2, r2
 8003486:	440b      	add	r3, r1
 8003488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800348c:	e00a      	b.n	80034a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	b2da      	uxtb	r2, r3
 8003492:	4908      	ldr	r1, [pc, #32]	; (80034b4 <__NVIC_SetPriority+0x50>)
 8003494:	79fb      	ldrb	r3, [r7, #7]
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	3b04      	subs	r3, #4
 800349c:	0112      	lsls	r2, r2, #4
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	440b      	add	r3, r1
 80034a2:	761a      	strb	r2, [r3, #24]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e000e100 	.word	0xe000e100
 80034b4:	e000ed00 	.word	0xe000ed00

080034b8 <NVIC_EncodePriority>:
{
 80034b8:	b480      	push	{r7}
 80034ba:	b089      	sub	sp, #36	; 0x24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	60f8      	str	r0, [r7, #12]
 80034c0:	60b9      	str	r1, [r7, #8]
 80034c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034cc:	69fb      	ldr	r3, [r7, #28]
 80034ce:	f1c3 0307 	rsb	r3, r3, #7
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	bf28      	it	cs
 80034d6:	2304      	movcs	r3, #4
 80034d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3304      	adds	r3, #4
 80034de:	2b06      	cmp	r3, #6
 80034e0:	d902      	bls.n	80034e8 <NVIC_EncodePriority+0x30>
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	3b03      	subs	r3, #3
 80034e6:	e000      	b.n	80034ea <NVIC_EncodePriority+0x32>
 80034e8:	2300      	movs	r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034ec:	f04f 32ff 	mov.w	r2, #4294967295
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43da      	mvns	r2, r3
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	401a      	ands	r2, r3
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003500:	f04f 31ff 	mov.w	r1, #4294967295
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	fa01 f303 	lsl.w	r3, r1, r3
 800350a:	43d9      	mvns	r1, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003510:	4313      	orrs	r3, r2
}
 8003512:	4618      	mov	r0, r3
 8003514:	3724      	adds	r7, #36	; 0x24
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <SysTick_Config>:
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3b01      	subs	r3, #1
 800352c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003530:	d301      	bcc.n	8003536 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003532:	2301      	movs	r3, #1
 8003534:	e00f      	b.n	8003556 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003536:	4a0a      	ldr	r2, [pc, #40]	; (8003560 <SysTick_Config+0x40>)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	3b01      	subs	r3, #1
 800353c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800353e:	210f      	movs	r1, #15
 8003540:	f04f 30ff 	mov.w	r0, #4294967295
 8003544:	f7ff ff8e 	bl	8003464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003548:	4b05      	ldr	r3, [pc, #20]	; (8003560 <SysTick_Config+0x40>)
 800354a:	2200      	movs	r2, #0
 800354c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800354e:	4b04      	ldr	r3, [pc, #16]	; (8003560 <SysTick_Config+0x40>)
 8003550:	2207      	movs	r2, #7
 8003552:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	e000e010 	.word	0xe000e010

08003564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b082      	sub	sp, #8
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f7ff ff29 	bl	80033c4 <__NVIC_SetPriorityGrouping>
}
 8003572:	bf00      	nop
 8003574:	3708      	adds	r7, #8
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800357a:	b580      	push	{r7, lr}
 800357c:	b086      	sub	sp, #24
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	60b9      	str	r1, [r7, #8]
 8003584:	607a      	str	r2, [r7, #4]
 8003586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003588:	2300      	movs	r3, #0
 800358a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800358c:	f7ff ff3e 	bl	800340c <__NVIC_GetPriorityGrouping>
 8003590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003592:	687a      	ldr	r2, [r7, #4]
 8003594:	68b9      	ldr	r1, [r7, #8]
 8003596:	6978      	ldr	r0, [r7, #20]
 8003598:	f7ff ff8e 	bl	80034b8 <NVIC_EncodePriority>
 800359c:	4602      	mov	r2, r0
 800359e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035a2:	4611      	mov	r1, r2
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7ff ff5d 	bl	8003464 <__NVIC_SetPriority>
}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}

080035b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035b2:	b580      	push	{r7, lr}
 80035b4:	b082      	sub	sp, #8
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	4603      	mov	r3, r0
 80035ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff31 	bl	8003428 <__NVIC_EnableIRQ>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b082      	sub	sp, #8
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035d6:	6878      	ldr	r0, [r7, #4]
 80035d8:	f7ff ffa2 	bl	8003520 <SysTick_Config>
 80035dc:	4603      	mov	r3, r0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035f4:	f7ff feda 	bl	80033ac <HAL_GetTick>
 80035f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d008      	beq.n	8003618 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2280      	movs	r2, #128	; 0x80
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e052      	b.n	80036be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0216 	bic.w	r2, r2, #22
 8003626:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695a      	ldr	r2, [r3, #20]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003636:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	2b00      	cmp	r3, #0
 800363e:	d103      	bne.n	8003648 <HAL_DMA_Abort+0x62>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003644:	2b00      	cmp	r3, #0
 8003646:	d007      	beq.n	8003658 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f022 0208 	bic.w	r2, r2, #8
 8003656:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003668:	e013      	b.n	8003692 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800366a:	f7ff fe9f 	bl	80033ac <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b05      	cmp	r3, #5
 8003676:	d90c      	bls.n	8003692 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2203      	movs	r2, #3
 8003682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e015      	b.n	80036be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0301 	and.w	r3, r3, #1
 800369c:	2b00      	cmp	r3, #0
 800369e:	d1e4      	bne.n	800366a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036a4:	223f      	movs	r2, #63	; 0x3f
 80036a6:	409a      	lsls	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b02      	cmp	r3, #2
 80036d8:	d004      	beq.n	80036e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e00c      	b.n	80036fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2205      	movs	r2, #5
 80036e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f022 0201 	bic.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
	...

0800370c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003722:	2300      	movs	r3, #0
 8003724:	61fb      	str	r3, [r7, #28]
 8003726:	e165      	b.n	80039f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003728:	2201      	movs	r2, #1
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	fa02 f303 	lsl.w	r3, r2, r3
 8003730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	4013      	ands	r3, r2
 800373a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	429a      	cmp	r2, r3
 8003742:	f040 8154 	bne.w	80039ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b01      	cmp	r3, #1
 8003750:	d005      	beq.n	800375e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800375a:	2b02      	cmp	r3, #2
 800375c:	d130      	bne.n	80037c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003764:	69fb      	ldr	r3, [r7, #28]
 8003766:	005b      	lsls	r3, r3, #1
 8003768:	2203      	movs	r2, #3
 800376a:	fa02 f303 	lsl.w	r3, r2, r3
 800376e:	43db      	mvns	r3, r3
 8003770:	69ba      	ldr	r2, [r7, #24]
 8003772:	4013      	ands	r3, r2
 8003774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68da      	ldr	r2, [r3, #12]
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	fa02 f303 	lsl.w	r3, r2, r3
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	4313      	orrs	r3, r2
 8003786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003794:	2201      	movs	r2, #1
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	69ba      	ldr	r2, [r7, #24]
 80037a0:	4013      	ands	r3, r2
 80037a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 0201 	and.w	r2, r3, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	fa02 f303 	lsl.w	r3, r2, r3
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	2b03      	cmp	r3, #3
 80037ca:	d017      	beq.n	80037fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	68db      	ldr	r3, [r3, #12]
 80037d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	005b      	lsls	r3, r3, #1
 80037d6:	2203      	movs	r2, #3
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	689a      	ldr	r2, [r3, #8]
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	4313      	orrs	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
 8003804:	2b02      	cmp	r3, #2
 8003806:	d123      	bne.n	8003850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	08da      	lsrs	r2, r3, #3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3208      	adds	r2, #8
 8003810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	220f      	movs	r2, #15
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	43db      	mvns	r3, r3
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	4013      	ands	r3, r2
 800382a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	f003 0307 	and.w	r3, r3, #7
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fa02 f303 	lsl.w	r3, r2, r3
 800383c:	69ba      	ldr	r2, [r7, #24]
 800383e:	4313      	orrs	r3, r2
 8003840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	08da      	lsrs	r2, r3, #3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	3208      	adds	r2, #8
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	2203      	movs	r2, #3
 800385c:	fa02 f303 	lsl.w	r3, r2, r3
 8003860:	43db      	mvns	r3, r3
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	4013      	ands	r3, r2
 8003866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f003 0203 	and.w	r2, r3, #3
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	fa02 f303 	lsl.w	r3, r2, r3
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	4313      	orrs	r3, r2
 800387c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800388c:	2b00      	cmp	r3, #0
 800388e:	f000 80ae 	beq.w	80039ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b5d      	ldr	r3, [pc, #372]	; (8003a0c <HAL_GPIO_Init+0x300>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389a:	4a5c      	ldr	r2, [pc, #368]	; (8003a0c <HAL_GPIO_Init+0x300>)
 800389c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038a0:	6453      	str	r3, [r2, #68]	; 0x44
 80038a2:	4b5a      	ldr	r3, [pc, #360]	; (8003a0c <HAL_GPIO_Init+0x300>)
 80038a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ae:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_GPIO_Init+0x304>)
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	089b      	lsrs	r3, r3, #2
 80038b4:	3302      	adds	r3, #2
 80038b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0303 	and.w	r3, r3, #3
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	220f      	movs	r2, #15
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43db      	mvns	r3, r3
 80038cc:	69ba      	ldr	r2, [r7, #24]
 80038ce:	4013      	ands	r3, r2
 80038d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a4f      	ldr	r2, [pc, #316]	; (8003a14 <HAL_GPIO_Init+0x308>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d025      	beq.n	8003926 <HAL_GPIO_Init+0x21a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a4e      	ldr	r2, [pc, #312]	; (8003a18 <HAL_GPIO_Init+0x30c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01f      	beq.n	8003922 <HAL_GPIO_Init+0x216>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4d      	ldr	r2, [pc, #308]	; (8003a1c <HAL_GPIO_Init+0x310>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d019      	beq.n	800391e <HAL_GPIO_Init+0x212>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4c      	ldr	r2, [pc, #304]	; (8003a20 <HAL_GPIO_Init+0x314>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_GPIO_Init+0x20e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a4b      	ldr	r2, [pc, #300]	; (8003a24 <HAL_GPIO_Init+0x318>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00d      	beq.n	8003916 <HAL_GPIO_Init+0x20a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4a      	ldr	r2, [pc, #296]	; (8003a28 <HAL_GPIO_Init+0x31c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <HAL_GPIO_Init+0x206>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a49      	ldr	r2, [pc, #292]	; (8003a2c <HAL_GPIO_Init+0x320>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_GPIO_Init+0x202>
 800390a:	2306      	movs	r3, #6
 800390c:	e00c      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 800390e:	2307      	movs	r3, #7
 8003910:	e00a      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 8003912:	2305      	movs	r3, #5
 8003914:	e008      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 8003916:	2304      	movs	r3, #4
 8003918:	e006      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 800391a:	2303      	movs	r3, #3
 800391c:	e004      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 800391e:	2302      	movs	r3, #2
 8003920:	e002      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 8003922:	2301      	movs	r3, #1
 8003924:	e000      	b.n	8003928 <HAL_GPIO_Init+0x21c>
 8003926:	2300      	movs	r3, #0
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	f002 0203 	and.w	r2, r2, #3
 800392e:	0092      	lsls	r2, r2, #2
 8003930:	4093      	lsls	r3, r2
 8003932:	69ba      	ldr	r2, [r7, #24]
 8003934:	4313      	orrs	r3, r2
 8003936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003938:	4935      	ldr	r1, [pc, #212]	; (8003a10 <HAL_GPIO_Init+0x304>)
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	089b      	lsrs	r3, r3, #2
 800393e:	3302      	adds	r3, #2
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003946:	4b3a      	ldr	r3, [pc, #232]	; (8003a30 <HAL_GPIO_Init+0x324>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	43db      	mvns	r3, r3
 8003950:	69ba      	ldr	r2, [r7, #24]
 8003952:	4013      	ands	r3, r2
 8003954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003962:	69ba      	ldr	r2, [r7, #24]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396a:	4a31      	ldr	r2, [pc, #196]	; (8003a30 <HAL_GPIO_Init+0x324>)
 800396c:	69bb      	ldr	r3, [r7, #24]
 800396e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003970:	4b2f      	ldr	r3, [pc, #188]	; (8003a30 <HAL_GPIO_Init+0x324>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	43db      	mvns	r3, r3
 800397a:	69ba      	ldr	r2, [r7, #24]
 800397c:	4013      	ands	r3, r2
 800397e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800398c:	69ba      	ldr	r2, [r7, #24]
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	4313      	orrs	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003994:	4a26      	ldr	r2, [pc, #152]	; (8003a30 <HAL_GPIO_Init+0x324>)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800399a:	4b25      	ldr	r3, [pc, #148]	; (8003a30 <HAL_GPIO_Init+0x324>)
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	4013      	ands	r3, r2
 80039a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039b6:	69ba      	ldr	r2, [r7, #24]
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039be:	4a1c      	ldr	r2, [pc, #112]	; (8003a30 <HAL_GPIO_Init+0x324>)
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c4:	4b1a      	ldr	r3, [pc, #104]	; (8003a30 <HAL_GPIO_Init+0x324>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	43db      	mvns	r3, r3
 80039ce:	69ba      	ldr	r2, [r7, #24]
 80039d0:	4013      	ands	r3, r2
 80039d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d003      	beq.n	80039e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039e0:	69ba      	ldr	r2, [r7, #24]
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	4313      	orrs	r3, r2
 80039e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039e8:	4a11      	ldr	r2, [pc, #68]	; (8003a30 <HAL_GPIO_Init+0x324>)
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3301      	adds	r3, #1
 80039f2:	61fb      	str	r3, [r7, #28]
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	2b0f      	cmp	r3, #15
 80039f8:	f67f ae96 	bls.w	8003728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	3724      	adds	r7, #36	; 0x24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a08:	4770      	bx	lr
 8003a0a:	bf00      	nop
 8003a0c:	40023800 	.word	0x40023800
 8003a10:	40013800 	.word	0x40013800
 8003a14:	40020000 	.word	0x40020000
 8003a18:	40020400 	.word	0x40020400
 8003a1c:	40020800 	.word	0x40020800
 8003a20:	40020c00 	.word	0x40020c00
 8003a24:	40021000 	.word	0x40021000
 8003a28:	40021400 	.word	0x40021400
 8003a2c:	40021800 	.word	0x40021800
 8003a30:	40013c00 	.word	0x40013c00

08003a34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a34:	b480      	push	{r7}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
 8003a3c:	460b      	mov	r3, r1
 8003a3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	691a      	ldr	r2, [r3, #16]
 8003a44:	887b      	ldrh	r3, [r7, #2]
 8003a46:	4013      	ands	r3, r2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d002      	beq.n	8003a52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
 8003a50:	e001      	b.n	8003a56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a52:	2300      	movs	r3, #0
 8003a54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a58:	4618      	mov	r0, r3
 8003a5a:	3714      	adds	r7, #20
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	460b      	mov	r3, r1
 8003a6e:	807b      	strh	r3, [r7, #2]
 8003a70:	4613      	mov	r3, r2
 8003a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a74:	787b      	ldrb	r3, [r7, #1]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a7a:	887a      	ldrh	r2, [r7, #2]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a80:	e003      	b.n	8003a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a82:	887b      	ldrh	r3, [r7, #2]
 8003a84:	041a      	lsls	r2, r3, #16
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	619a      	str	r2, [r3, #24]
}
 8003a8a:	bf00      	nop
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
	...

08003a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003aa2:	4b08      	ldr	r3, [pc, #32]	; (8003ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa4:	695a      	ldr	r2, [r3, #20]
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d006      	beq.n	8003abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aae:	4a05      	ldr	r2, [pc, #20]	; (8003ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ab0:	88fb      	ldrh	r3, [r7, #6]
 8003ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ab4:	88fb      	ldrh	r3, [r7, #6]
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f7fe fc30 	bl	800231c <HAL_GPIO_EXTI_Callback>
  }
}
 8003abc:	bf00      	nop
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	40013c00 	.word	0x40013c00

08003ac8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d101      	bne.n	8003adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e0cc      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003adc:	4b68      	ldr	r3, [pc, #416]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 030f 	and.w	r3, r3, #15
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d90c      	bls.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aea:	4b65      	ldr	r3, [pc, #404]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	b2d2      	uxtb	r2, r2
 8003af0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003af2:	4b63      	ldr	r3, [pc, #396]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f003 030f 	and.w	r3, r3, #15
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d001      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0b8      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d020      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d005      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b1c:	4b59      	ldr	r3, [pc, #356]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	4a58      	ldr	r2, [pc, #352]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0308 	and.w	r3, r3, #8
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d005      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b34:	4b53      	ldr	r3, [pc, #332]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4a52      	ldr	r2, [pc, #328]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b40:	4b50      	ldr	r3, [pc, #320]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	494d      	ldr	r1, [pc, #308]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0301 	and.w	r3, r3, #1
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d044      	beq.n	8003be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d107      	bne.n	8003b76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b66:	4b47      	ldr	r3, [pc, #284]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d119      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b72:	2301      	movs	r3, #1
 8003b74:	e07f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d003      	beq.n	8003b86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d107      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b86:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d109      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	e06f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b96:	4b3b      	ldr	r3, [pc, #236]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e067      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba6:	4b37      	ldr	r3, [pc, #220]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 0203 	bic.w	r2, r3, #3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	4934      	ldr	r1, [pc, #208]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb8:	f7ff fbf8 	bl	80033ac <HAL_GetTick>
 8003bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bbe:	e00a      	b.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc0:	f7ff fbf4 	bl	80033ac <HAL_GetTick>
 8003bc4:	4602      	mov	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d901      	bls.n	8003bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bd2:	2303      	movs	r3, #3
 8003bd4:	e04f      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd6:	4b2b      	ldr	r3, [pc, #172]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	f003 020c 	and.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d1eb      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be8:	4b25      	ldr	r3, [pc, #148]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f003 030f 	and.w	r3, r3, #15
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d20c      	bcs.n	8003c10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf6:	4b22      	ldr	r3, [pc, #136]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	b2d2      	uxtb	r2, r2
 8003bfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfe:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d001      	beq.n	8003c10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e032      	b.n	8003c76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f003 0304 	and.w	r3, r3, #4
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	4916      	ldr	r1, [pc, #88]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0308 	and.w	r3, r3, #8
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d009      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c3a:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	00db      	lsls	r3, r3, #3
 8003c48:	490e      	ldr	r1, [pc, #56]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c4e:	f000 f855 	bl	8003cfc <HAL_RCC_GetSysClockFreq>
 8003c52:	4602      	mov	r2, r0
 8003c54:	4b0b      	ldr	r3, [pc, #44]	; (8003c84 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	091b      	lsrs	r3, r3, #4
 8003c5a:	f003 030f 	and.w	r3, r3, #15
 8003c5e:	490a      	ldr	r1, [pc, #40]	; (8003c88 <HAL_RCC_ClockConfig+0x1c0>)
 8003c60:	5ccb      	ldrb	r3, [r1, r3]
 8003c62:	fa22 f303 	lsr.w	r3, r2, r3
 8003c66:	4a09      	ldr	r2, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1c4>)
 8003c68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <HAL_RCC_ClockConfig+0x1c8>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fb58 	bl	8003324 <HAL_InitTick>

  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800c330 	.word	0x0800c330
 8003c8c:	20000038 	.word	0x20000038
 8003c90:	2000003c 	.word	0x2000003c

08003c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c94:	b480      	push	{r7}
 8003c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c98:	4b03      	ldr	r3, [pc, #12]	; (8003ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
}
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	20000038 	.word	0x20000038

08003cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cb0:	f7ff fff0 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0a9b      	lsrs	r3, r3, #10
 8003cbc:	f003 0307 	and.w	r3, r3, #7
 8003cc0:	4903      	ldr	r1, [pc, #12]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc2:	5ccb      	ldrb	r3, [r1, r3]
 8003cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	40023800 	.word	0x40023800
 8003cd0:	0800c340 	.word	0x0800c340

08003cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cd8:	f7ff ffdc 	bl	8003c94 <HAL_RCC_GetHCLKFreq>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	0b5b      	lsrs	r3, r3, #13
 8003ce4:	f003 0307 	and.w	r3, r3, #7
 8003ce8:	4903      	ldr	r1, [pc, #12]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cea:	5ccb      	ldrb	r3, [r1, r3]
 8003cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	40023800 	.word	0x40023800
 8003cf8:	0800c340 	.word	0x0800c340

08003cfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d00:	b0ae      	sub	sp, #184	; 0xb8
 8003d02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d22:	4bcb      	ldr	r3, [pc, #812]	; (8004050 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	f003 030c 	and.w	r3, r3, #12
 8003d2a:	2b0c      	cmp	r3, #12
 8003d2c:	f200 8206 	bhi.w	800413c <HAL_RCC_GetSysClockFreq+0x440>
 8003d30:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d36:	bf00      	nop
 8003d38:	08003d6d 	.word	0x08003d6d
 8003d3c:	0800413d 	.word	0x0800413d
 8003d40:	0800413d 	.word	0x0800413d
 8003d44:	0800413d 	.word	0x0800413d
 8003d48:	08003d75 	.word	0x08003d75
 8003d4c:	0800413d 	.word	0x0800413d
 8003d50:	0800413d 	.word	0x0800413d
 8003d54:	0800413d 	.word	0x0800413d
 8003d58:	08003d7d 	.word	0x08003d7d
 8003d5c:	0800413d 	.word	0x0800413d
 8003d60:	0800413d 	.word	0x0800413d
 8003d64:	0800413d 	.word	0x0800413d
 8003d68:	08003f6d 	.word	0x08003f6d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d6c:	4bb9      	ldr	r3, [pc, #740]	; (8004054 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003d72:	e1e7      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d74:	4bb8      	ldr	r3, [pc, #736]	; (8004058 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d76:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d7a:	e1e3      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d7c:	4bb4      	ldr	r3, [pc, #720]	; (8004050 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d88:	4bb1      	ldr	r3, [pc, #708]	; (8004050 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d071      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d94:	4bae      	ldr	r3, [pc, #696]	; (8004050 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	099b      	lsrs	r3, r3, #6
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003da0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003da4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003db0:	2300      	movs	r3, #0
 8003db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003db6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003dba:	4622      	mov	r2, r4
 8003dbc:	462b      	mov	r3, r5
 8003dbe:	f04f 0000 	mov.w	r0, #0
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	0159      	lsls	r1, r3, #5
 8003dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dcc:	0150      	lsls	r0, r2, #5
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4621      	mov	r1, r4
 8003dd4:	1a51      	subs	r1, r2, r1
 8003dd6:	6439      	str	r1, [r7, #64]	; 0x40
 8003dd8:	4629      	mov	r1, r5
 8003dda:	eb63 0301 	sbc.w	r3, r3, r1
 8003dde:	647b      	str	r3, [r7, #68]	; 0x44
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	f04f 0300 	mov.w	r3, #0
 8003de8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003dec:	4649      	mov	r1, r9
 8003dee:	018b      	lsls	r3, r1, #6
 8003df0:	4641      	mov	r1, r8
 8003df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003df6:	4641      	mov	r1, r8
 8003df8:	018a      	lsls	r2, r1, #6
 8003dfa:	4641      	mov	r1, r8
 8003dfc:	1a51      	subs	r1, r2, r1
 8003dfe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003e00:	4649      	mov	r1, r9
 8003e02:	eb63 0301 	sbc.w	r3, r3, r1
 8003e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e08:	f04f 0200 	mov.w	r2, #0
 8003e0c:	f04f 0300 	mov.w	r3, #0
 8003e10:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003e14:	4649      	mov	r1, r9
 8003e16:	00cb      	lsls	r3, r1, #3
 8003e18:	4641      	mov	r1, r8
 8003e1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e1e:	4641      	mov	r1, r8
 8003e20:	00ca      	lsls	r2, r1, #3
 8003e22:	4610      	mov	r0, r2
 8003e24:	4619      	mov	r1, r3
 8003e26:	4603      	mov	r3, r0
 8003e28:	4622      	mov	r2, r4
 8003e2a:	189b      	adds	r3, r3, r2
 8003e2c:	633b      	str	r3, [r7, #48]	; 0x30
 8003e2e:	462b      	mov	r3, r5
 8003e30:	460a      	mov	r2, r1
 8003e32:	eb42 0303 	adc.w	r3, r2, r3
 8003e36:	637b      	str	r3, [r7, #52]	; 0x34
 8003e38:	f04f 0200 	mov.w	r2, #0
 8003e3c:	f04f 0300 	mov.w	r3, #0
 8003e40:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e44:	4629      	mov	r1, r5
 8003e46:	024b      	lsls	r3, r1, #9
 8003e48:	4621      	mov	r1, r4
 8003e4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e4e:	4621      	mov	r1, r4
 8003e50:	024a      	lsls	r2, r1, #9
 8003e52:	4610      	mov	r0, r2
 8003e54:	4619      	mov	r1, r3
 8003e56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003e64:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003e68:	f7fc ff2e 	bl	8000cc8 <__aeabi_uldivmod>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	460b      	mov	r3, r1
 8003e70:	4613      	mov	r3, r2
 8003e72:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003e76:	e067      	b.n	8003f48 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e78:	4b75      	ldr	r3, [pc, #468]	; (8004050 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	099b      	lsrs	r3, r3, #6
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003e84:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003e88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e90:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e92:	2300      	movs	r3, #0
 8003e94:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003e96:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	462b      	mov	r3, r5
 8003e9e:	f04f 0000 	mov.w	r0, #0
 8003ea2:	f04f 0100 	mov.w	r1, #0
 8003ea6:	0159      	lsls	r1, r3, #5
 8003ea8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eac:	0150      	lsls	r0, r2, #5
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4621      	mov	r1, r4
 8003eb4:	1a51      	subs	r1, r2, r1
 8003eb6:	62b9      	str	r1, [r7, #40]	; 0x28
 8003eb8:	4629      	mov	r1, r5
 8003eba:	eb63 0301 	sbc.w	r3, r3, r1
 8003ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec0:	f04f 0200 	mov.w	r2, #0
 8003ec4:	f04f 0300 	mov.w	r3, #0
 8003ec8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003ecc:	4649      	mov	r1, r9
 8003ece:	018b      	lsls	r3, r1, #6
 8003ed0:	4641      	mov	r1, r8
 8003ed2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ed6:	4641      	mov	r1, r8
 8003ed8:	018a      	lsls	r2, r1, #6
 8003eda:	4641      	mov	r1, r8
 8003edc:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	eb63 0b01 	sbc.w	fp, r3, r1
 8003ee6:	f04f 0200 	mov.w	r2, #0
 8003eea:	f04f 0300 	mov.w	r3, #0
 8003eee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ef2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ef6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003efa:	4692      	mov	sl, r2
 8003efc:	469b      	mov	fp, r3
 8003efe:	4623      	mov	r3, r4
 8003f00:	eb1a 0303 	adds.w	r3, sl, r3
 8003f04:	623b      	str	r3, [r7, #32]
 8003f06:	462b      	mov	r3, r5
 8003f08:	eb4b 0303 	adc.w	r3, fp, r3
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0e:	f04f 0200 	mov.w	r2, #0
 8003f12:	f04f 0300 	mov.w	r3, #0
 8003f16:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f1a:	4629      	mov	r1, r5
 8003f1c:	028b      	lsls	r3, r1, #10
 8003f1e:	4621      	mov	r1, r4
 8003f20:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f24:	4621      	mov	r1, r4
 8003f26:	028a      	lsls	r2, r1, #10
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f30:	2200      	movs	r2, #0
 8003f32:	673b      	str	r3, [r7, #112]	; 0x70
 8003f34:	677a      	str	r2, [r7, #116]	; 0x74
 8003f36:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003f3a:	f7fc fec5 	bl	8000cc8 <__aeabi_uldivmod>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	460b      	mov	r3, r1
 8003f42:	4613      	mov	r3, r2
 8003f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f48:	4b41      	ldr	r3, [pc, #260]	; (8004050 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	0c1b      	lsrs	r3, r3, #16
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	3301      	adds	r3, #1
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003f5a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f6a:	e0eb      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f6c:	4b38      	ldr	r3, [pc, #224]	; (8004050 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f74:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f78:	4b35      	ldr	r3, [pc, #212]	; (8004050 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d06b      	beq.n	800405c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	099b      	lsrs	r3, r3, #6
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f96:	663b      	str	r3, [r7, #96]	; 0x60
 8003f98:	2300      	movs	r3, #0
 8003f9a:	667b      	str	r3, [r7, #100]	; 0x64
 8003f9c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003fa0:	4622      	mov	r2, r4
 8003fa2:	462b      	mov	r3, r5
 8003fa4:	f04f 0000 	mov.w	r0, #0
 8003fa8:	f04f 0100 	mov.w	r1, #0
 8003fac:	0159      	lsls	r1, r3, #5
 8003fae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fb2:	0150      	lsls	r0, r2, #5
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4621      	mov	r1, r4
 8003fba:	1a51      	subs	r1, r2, r1
 8003fbc:	61b9      	str	r1, [r7, #24]
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	eb63 0301 	sbc.w	r3, r3, r1
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	f04f 0200 	mov.w	r2, #0
 8003fca:	f04f 0300 	mov.w	r3, #0
 8003fce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fd2:	4659      	mov	r1, fp
 8003fd4:	018b      	lsls	r3, r1, #6
 8003fd6:	4651      	mov	r1, sl
 8003fd8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fdc:	4651      	mov	r1, sl
 8003fde:	018a      	lsls	r2, r1, #6
 8003fe0:	4651      	mov	r1, sl
 8003fe2:	ebb2 0801 	subs.w	r8, r2, r1
 8003fe6:	4659      	mov	r1, fp
 8003fe8:	eb63 0901 	sbc.w	r9, r3, r1
 8003fec:	f04f 0200 	mov.w	r2, #0
 8003ff0:	f04f 0300 	mov.w	r3, #0
 8003ff4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003ff8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ffc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004000:	4690      	mov	r8, r2
 8004002:	4699      	mov	r9, r3
 8004004:	4623      	mov	r3, r4
 8004006:	eb18 0303 	adds.w	r3, r8, r3
 800400a:	613b      	str	r3, [r7, #16]
 800400c:	462b      	mov	r3, r5
 800400e:	eb49 0303 	adc.w	r3, r9, r3
 8004012:	617b      	str	r3, [r7, #20]
 8004014:	f04f 0200 	mov.w	r2, #0
 8004018:	f04f 0300 	mov.w	r3, #0
 800401c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004020:	4629      	mov	r1, r5
 8004022:	024b      	lsls	r3, r1, #9
 8004024:	4621      	mov	r1, r4
 8004026:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800402a:	4621      	mov	r1, r4
 800402c:	024a      	lsls	r2, r1, #9
 800402e:	4610      	mov	r0, r2
 8004030:	4619      	mov	r1, r3
 8004032:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004036:	2200      	movs	r2, #0
 8004038:	65bb      	str	r3, [r7, #88]	; 0x58
 800403a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800403c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004040:	f7fc fe42 	bl	8000cc8 <__aeabi_uldivmod>
 8004044:	4602      	mov	r2, r0
 8004046:	460b      	mov	r3, r1
 8004048:	4613      	mov	r3, r2
 800404a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800404e:	e065      	b.n	800411c <HAL_RCC_GetSysClockFreq+0x420>
 8004050:	40023800 	.word	0x40023800
 8004054:	00f42400 	.word	0x00f42400
 8004058:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800405c:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <HAL_RCC_GetSysClockFreq+0x458>)
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	099b      	lsrs	r3, r3, #6
 8004062:	2200      	movs	r2, #0
 8004064:	4618      	mov	r0, r3
 8004066:	4611      	mov	r1, r2
 8004068:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800406c:	653b      	str	r3, [r7, #80]	; 0x50
 800406e:	2300      	movs	r3, #0
 8004070:	657b      	str	r3, [r7, #84]	; 0x54
 8004072:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8004076:	4642      	mov	r2, r8
 8004078:	464b      	mov	r3, r9
 800407a:	f04f 0000 	mov.w	r0, #0
 800407e:	f04f 0100 	mov.w	r1, #0
 8004082:	0159      	lsls	r1, r3, #5
 8004084:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004088:	0150      	lsls	r0, r2, #5
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	4641      	mov	r1, r8
 8004090:	1a51      	subs	r1, r2, r1
 8004092:	60b9      	str	r1, [r7, #8]
 8004094:	4649      	mov	r1, r9
 8004096:	eb63 0301 	sbc.w	r3, r3, r1
 800409a:	60fb      	str	r3, [r7, #12]
 800409c:	f04f 0200 	mov.w	r2, #0
 80040a0:	f04f 0300 	mov.w	r3, #0
 80040a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80040a8:	4659      	mov	r1, fp
 80040aa:	018b      	lsls	r3, r1, #6
 80040ac:	4651      	mov	r1, sl
 80040ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040b2:	4651      	mov	r1, sl
 80040b4:	018a      	lsls	r2, r1, #6
 80040b6:	4651      	mov	r1, sl
 80040b8:	1a54      	subs	r4, r2, r1
 80040ba:	4659      	mov	r1, fp
 80040bc:	eb63 0501 	sbc.w	r5, r3, r1
 80040c0:	f04f 0200 	mov.w	r2, #0
 80040c4:	f04f 0300 	mov.w	r3, #0
 80040c8:	00eb      	lsls	r3, r5, #3
 80040ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040ce:	00e2      	lsls	r2, r4, #3
 80040d0:	4614      	mov	r4, r2
 80040d2:	461d      	mov	r5, r3
 80040d4:	4643      	mov	r3, r8
 80040d6:	18e3      	adds	r3, r4, r3
 80040d8:	603b      	str	r3, [r7, #0]
 80040da:	464b      	mov	r3, r9
 80040dc:	eb45 0303 	adc.w	r3, r5, r3
 80040e0:	607b      	str	r3, [r7, #4]
 80040e2:	f04f 0200 	mov.w	r2, #0
 80040e6:	f04f 0300 	mov.w	r3, #0
 80040ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040ee:	4629      	mov	r1, r5
 80040f0:	028b      	lsls	r3, r1, #10
 80040f2:	4621      	mov	r1, r4
 80040f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040f8:	4621      	mov	r1, r4
 80040fa:	028a      	lsls	r2, r1, #10
 80040fc:	4610      	mov	r0, r2
 80040fe:	4619      	mov	r1, r3
 8004100:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004104:	2200      	movs	r2, #0
 8004106:	64bb      	str	r3, [r7, #72]	; 0x48
 8004108:	64fa      	str	r2, [r7, #76]	; 0x4c
 800410a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800410e:	f7fc fddb 	bl	8000cc8 <__aeabi_uldivmod>
 8004112:	4602      	mov	r2, r0
 8004114:	460b      	mov	r3, r1
 8004116:	4613      	mov	r3, r2
 8004118:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800411c:	4b0d      	ldr	r3, [pc, #52]	; (8004154 <HAL_RCC_GetSysClockFreq+0x458>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	0f1b      	lsrs	r3, r3, #28
 8004122:	f003 0307 	and.w	r3, r3, #7
 8004126:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800412a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800412e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004132:	fbb2 f3f3 	udiv	r3, r2, r3
 8004136:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800413a:	e003      	b.n	8004144 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800413c:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetSysClockFreq+0x45c>)
 800413e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004142:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004144:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004148:	4618      	mov	r0, r3
 800414a:	37b8      	adds	r7, #184	; 0xb8
 800414c:	46bd      	mov	sp, r7
 800414e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800
 8004158:	00f42400 	.word	0x00f42400

0800415c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b086      	sub	sp, #24
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e28d      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0301 	and.w	r3, r3, #1
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 8083 	beq.w	8004282 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800417c:	4b94      	ldr	r3, [pc, #592]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 030c 	and.w	r3, r3, #12
 8004184:	2b04      	cmp	r3, #4
 8004186:	d019      	beq.n	80041bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004188:	4b91      	ldr	r3, [pc, #580]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004190:	2b08      	cmp	r3, #8
 8004192:	d106      	bne.n	80041a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004194:	4b8e      	ldr	r3, [pc, #568]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800419c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041a0:	d00c      	beq.n	80041bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041a2:	4b8b      	ldr	r3, [pc, #556]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d112      	bne.n	80041d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041ae:	4b88      	ldr	r3, [pc, #544]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80041ba:	d10b      	bne.n	80041d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041bc:	4b84      	ldr	r3, [pc, #528]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d05b      	beq.n	8004280 <HAL_RCC_OscConfig+0x124>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d157      	bne.n	8004280 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e25a      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041dc:	d106      	bne.n	80041ec <HAL_RCC_OscConfig+0x90>
 80041de:	4b7c      	ldr	r3, [pc, #496]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a7b      	ldr	r2, [pc, #492]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e8:	6013      	str	r3, [r2, #0]
 80041ea:	e01d      	b.n	8004228 <HAL_RCC_OscConfig+0xcc>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041f4:	d10c      	bne.n	8004210 <HAL_RCC_OscConfig+0xb4>
 80041f6:	4b76      	ldr	r3, [pc, #472]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a75      	ldr	r2, [pc, #468]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80041fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b73      	ldr	r3, [pc, #460]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4a72      	ldr	r2, [pc, #456]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e00b      	b.n	8004228 <HAL_RCC_OscConfig+0xcc>
 8004210:	4b6f      	ldr	r3, [pc, #444]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6e      	ldr	r2, [pc, #440]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800421a:	6013      	str	r3, [r2, #0]
 800421c:	4b6c      	ldr	r3, [pc, #432]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a6b      	ldr	r2, [pc, #428]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	685b      	ldr	r3, [r3, #4]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d013      	beq.n	8004258 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004230:	f7ff f8bc 	bl	80033ac <HAL_GetTick>
 8004234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004238:	f7ff f8b8 	bl	80033ac <HAL_GetTick>
 800423c:	4602      	mov	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b64      	cmp	r3, #100	; 0x64
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e21f      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800424a:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004252:	2b00      	cmp	r3, #0
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0xdc>
 8004256:	e014      	b.n	8004282 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004258:	f7ff f8a8 	bl	80033ac <HAL_GetTick>
 800425c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	e008      	b.n	8004272 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004260:	f7ff f8a4 	bl	80033ac <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b64      	cmp	r3, #100	; 0x64
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e20b      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004272:	4b57      	ldr	r3, [pc, #348]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x104>
 800427e:	e000      	b.n	8004282 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d06f      	beq.n	800436e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800428e:	4b50      	ldr	r3, [pc, #320]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
 8004296:	2b00      	cmp	r3, #0
 8004298:	d017      	beq.n	80042ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800429a:	4b4d      	ldr	r3, [pc, #308]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80042a2:	2b08      	cmp	r3, #8
 80042a4:	d105      	bne.n	80042b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042a6:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d00b      	beq.n	80042ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b47      	ldr	r3, [pc, #284]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ba:	2b0c      	cmp	r3, #12
 80042bc:	d11c      	bne.n	80042f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042be:	4b44      	ldr	r3, [pc, #272]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042c0:	685b      	ldr	r3, [r3, #4]
 80042c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d116      	bne.n	80042f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d005      	beq.n	80042e2 <HAL_RCC_OscConfig+0x186>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d001      	beq.n	80042e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e1d3      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042e2:	4b3b      	ldr	r3, [pc, #236]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	00db      	lsls	r3, r3, #3
 80042f0:	4937      	ldr	r1, [pc, #220]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042f6:	e03a      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68db      	ldr	r3, [r3, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d020      	beq.n	8004342 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004300:	4b34      	ldr	r3, [pc, #208]	; (80043d4 <HAL_RCC_OscConfig+0x278>)
 8004302:	2201      	movs	r2, #1
 8004304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004306:	f7ff f851 	bl	80033ac <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430c:	e008      	b.n	8004320 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800430e:	f7ff f84d 	bl	80033ac <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b02      	cmp	r3, #2
 800431a:	d901      	bls.n	8004320 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800431c:	2303      	movs	r3, #3
 800431e:	e1b4      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004320:	4b2b      	ldr	r3, [pc, #172]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d0f0      	beq.n	800430e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800432c:	4b28      	ldr	r3, [pc, #160]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	00db      	lsls	r3, r3, #3
 800433a:	4925      	ldr	r1, [pc, #148]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 800433c:	4313      	orrs	r3, r2
 800433e:	600b      	str	r3, [r1, #0]
 8004340:	e015      	b.n	800436e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004342:	4b24      	ldr	r3, [pc, #144]	; (80043d4 <HAL_RCC_OscConfig+0x278>)
 8004344:	2200      	movs	r2, #0
 8004346:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004348:	f7ff f830 	bl	80033ac <HAL_GetTick>
 800434c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800434e:	e008      	b.n	8004362 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004350:	f7ff f82c 	bl	80033ac <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	1ad3      	subs	r3, r2, r3
 800435a:	2b02      	cmp	r3, #2
 800435c:	d901      	bls.n	8004362 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800435e:	2303      	movs	r3, #3
 8004360:	e193      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004362:	4b1b      	ldr	r3, [pc, #108]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0302 	and.w	r3, r3, #2
 800436a:	2b00      	cmp	r3, #0
 800436c:	d1f0      	bne.n	8004350 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 0308 	and.w	r3, r3, #8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d036      	beq.n	80043e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d016      	beq.n	80043b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004382:	4b15      	ldr	r3, [pc, #84]	; (80043d8 <HAL_RCC_OscConfig+0x27c>)
 8004384:	2201      	movs	r2, #1
 8004386:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004388:	f7ff f810 	bl	80033ac <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004390:	f7ff f80c 	bl	80033ac <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e173      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043a2:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <HAL_RCC_OscConfig+0x274>)
 80043a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d0f0      	beq.n	8004390 <HAL_RCC_OscConfig+0x234>
 80043ae:	e01b      	b.n	80043e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043b0:	4b09      	ldr	r3, [pc, #36]	; (80043d8 <HAL_RCC_OscConfig+0x27c>)
 80043b2:	2200      	movs	r2, #0
 80043b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fe fff9 	bl	80033ac <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043bc:	e00e      	b.n	80043dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043be:	f7fe fff5 	bl	80033ac <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d907      	bls.n	80043dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e15c      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
 80043d0:	40023800 	.word	0x40023800
 80043d4:	42470000 	.word	0x42470000
 80043d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043dc:	4b8a      	ldr	r3, [pc, #552]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80043de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ea      	bne.n	80043be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0304 	and.w	r3, r3, #4
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8097 	beq.w	8004524 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043f6:	2300      	movs	r3, #0
 80043f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043fa:	4b83      	ldr	r3, [pc, #524]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10f      	bne.n	8004426 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	4b7f      	ldr	r3, [pc, #508]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440e:	4a7e      	ldr	r2, [pc, #504]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004410:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004414:	6413      	str	r3, [r2, #64]	; 0x40
 8004416:	4b7c      	ldr	r3, [pc, #496]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800441e:	60bb      	str	r3, [r7, #8]
 8004420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004422:	2301      	movs	r3, #1
 8004424:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004426:	4b79      	ldr	r3, [pc, #484]	; (800460c <HAL_RCC_OscConfig+0x4b0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800442e:	2b00      	cmp	r3, #0
 8004430:	d118      	bne.n	8004464 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004432:	4b76      	ldr	r3, [pc, #472]	; (800460c <HAL_RCC_OscConfig+0x4b0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a75      	ldr	r2, [pc, #468]	; (800460c <HAL_RCC_OscConfig+0x4b0>)
 8004438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800443c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800443e:	f7fe ffb5 	bl	80033ac <HAL_GetTick>
 8004442:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004444:	e008      	b.n	8004458 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004446:	f7fe ffb1 	bl	80033ac <HAL_GetTick>
 800444a:	4602      	mov	r2, r0
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	1ad3      	subs	r3, r2, r3
 8004450:	2b02      	cmp	r3, #2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e118      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004458:	4b6c      	ldr	r3, [pc, #432]	; (800460c <HAL_RCC_OscConfig+0x4b0>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004460:	2b00      	cmp	r3, #0
 8004462:	d0f0      	beq.n	8004446 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d106      	bne.n	800447a <HAL_RCC_OscConfig+0x31e>
 800446c:	4b66      	ldr	r3, [pc, #408]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800446e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004470:	4a65      	ldr	r2, [pc, #404]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	6713      	str	r3, [r2, #112]	; 0x70
 8004478:	e01c      	b.n	80044b4 <HAL_RCC_OscConfig+0x358>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b05      	cmp	r3, #5
 8004480:	d10c      	bne.n	800449c <HAL_RCC_OscConfig+0x340>
 8004482:	4b61      	ldr	r3, [pc, #388]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004486:	4a60      	ldr	r2, [pc, #384]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004488:	f043 0304 	orr.w	r3, r3, #4
 800448c:	6713      	str	r3, [r2, #112]	; 0x70
 800448e:	4b5e      	ldr	r3, [pc, #376]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004490:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004492:	4a5d      	ldr	r2, [pc, #372]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004494:	f043 0301 	orr.w	r3, r3, #1
 8004498:	6713      	str	r3, [r2, #112]	; 0x70
 800449a:	e00b      	b.n	80044b4 <HAL_RCC_OscConfig+0x358>
 800449c:	4b5a      	ldr	r3, [pc, #360]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a0:	4a59      	ldr	r2, [pc, #356]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80044a2:	f023 0301 	bic.w	r3, r3, #1
 80044a6:	6713      	str	r3, [r2, #112]	; 0x70
 80044a8:	4b57      	ldr	r3, [pc, #348]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80044aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ac:	4a56      	ldr	r2, [pc, #344]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80044ae:	f023 0304 	bic.w	r3, r3, #4
 80044b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d015      	beq.n	80044e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044bc:	f7fe ff76 	bl	80033ac <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044c2:	e00a      	b.n	80044da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044c4:	f7fe ff72 	bl	80033ac <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d901      	bls.n	80044da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044d6:	2303      	movs	r3, #3
 80044d8:	e0d7      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044da:	4b4b      	ldr	r3, [pc, #300]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80044dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d0ee      	beq.n	80044c4 <HAL_RCC_OscConfig+0x368>
 80044e6:	e014      	b.n	8004512 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044e8:	f7fe ff60 	bl	80033ac <HAL_GetTick>
 80044ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044ee:	e00a      	b.n	8004506 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044f0:	f7fe ff5c 	bl	80033ac <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80044fe:	4293      	cmp	r3, r2
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e0c1      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004506:	4b40      	ldr	r3, [pc, #256]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1ee      	bne.n	80044f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004512:	7dfb      	ldrb	r3, [r7, #23]
 8004514:	2b01      	cmp	r3, #1
 8004516:	d105      	bne.n	8004524 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004518:	4b3b      	ldr	r3, [pc, #236]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	4a3a      	ldr	r2, [pc, #232]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800451e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004522:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	2b00      	cmp	r3, #0
 800452a:	f000 80ad 	beq.w	8004688 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800452e:	4b36      	ldr	r3, [pc, #216]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f003 030c 	and.w	r3, r3, #12
 8004536:	2b08      	cmp	r3, #8
 8004538:	d060      	beq.n	80045fc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d145      	bne.n	80045ce <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004542:	4b33      	ldr	r3, [pc, #204]	; (8004610 <HAL_RCC_OscConfig+0x4b4>)
 8004544:	2200      	movs	r2, #0
 8004546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004548:	f7fe ff30 	bl	80033ac <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004550:	f7fe ff2c 	bl	80033ac <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e093      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004562:	4b29      	ldr	r3, [pc, #164]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1f0      	bne.n	8004550 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	69da      	ldr	r2, [r3, #28]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	431a      	orrs	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	019b      	lsls	r3, r3, #6
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004584:	085b      	lsrs	r3, r3, #1
 8004586:	3b01      	subs	r3, #1
 8004588:	041b      	lsls	r3, r3, #16
 800458a:	431a      	orrs	r2, r3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004590:	061b      	lsls	r3, r3, #24
 8004592:	431a      	orrs	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004598:	071b      	lsls	r3, r3, #28
 800459a:	491b      	ldr	r1, [pc, #108]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 800459c:	4313      	orrs	r3, r2
 800459e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045a0:	4b1b      	ldr	r3, [pc, #108]	; (8004610 <HAL_RCC_OscConfig+0x4b4>)
 80045a2:	2201      	movs	r2, #1
 80045a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fe ff01 	bl	80033ac <HAL_GetTick>
 80045aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ac:	e008      	b.n	80045c0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ae:	f7fe fefd 	bl	80033ac <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	693b      	ldr	r3, [r7, #16]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	2b02      	cmp	r3, #2
 80045ba:	d901      	bls.n	80045c0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045bc:	2303      	movs	r3, #3
 80045be:	e064      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c0:	4b11      	ldr	r3, [pc, #68]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d0f0      	beq.n	80045ae <HAL_RCC_OscConfig+0x452>
 80045cc:	e05c      	b.n	8004688 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ce:	4b10      	ldr	r3, [pc, #64]	; (8004610 <HAL_RCC_OscConfig+0x4b4>)
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d4:	f7fe feea 	bl	80033ac <HAL_GetTick>
 80045d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045da:	e008      	b.n	80045ee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045dc:	f7fe fee6 	bl	80033ac <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	2b02      	cmp	r3, #2
 80045e8:	d901      	bls.n	80045ee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045ea:	2303      	movs	r3, #3
 80045ec:	e04d      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ee:	4b06      	ldr	r3, [pc, #24]	; (8004608 <HAL_RCC_OscConfig+0x4ac>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1f0      	bne.n	80045dc <HAL_RCC_OscConfig+0x480>
 80045fa:	e045      	b.n	8004688 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	2b01      	cmp	r3, #1
 8004602:	d107      	bne.n	8004614 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e040      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
 8004608:	40023800 	.word	0x40023800
 800460c:	40007000 	.word	0x40007000
 8004610:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004614:	4b1f      	ldr	r3, [pc, #124]	; (8004694 <HAL_RCC_OscConfig+0x538>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d030      	beq.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800462c:	429a      	cmp	r2, r3
 800462e:	d129      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800463a:	429a      	cmp	r2, r3
 800463c:	d122      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004644:	4013      	ands	r3, r2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800464a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800464c:	4293      	cmp	r3, r2
 800464e:	d119      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800465a:	085b      	lsrs	r3, r3, #1
 800465c:	3b01      	subs	r3, #1
 800465e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004660:	429a      	cmp	r2, r3
 8004662:	d10f      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800466e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004670:	429a      	cmp	r2, r3
 8004672:	d107      	bne.n	8004684 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3718      	adds	r7, #24
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	40023800 	.word	0x40023800

08004698 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b082      	sub	sp, #8
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e041      	b.n	800472e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d106      	bne.n	80046c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f7fe fa1c 	bl	8002afc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2202      	movs	r2, #2
 80046c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	3304      	adds	r3, #4
 80046d4:	4619      	mov	r1, r3
 80046d6:	4610      	mov	r0, r2
 80046d8:	f000 fc58 	bl	8004f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2201      	movs	r2, #1
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d001      	beq.n	8004750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800474c:	2301      	movs	r3, #1
 800474e:	e04e      	b.n	80047ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2202      	movs	r2, #2
 8004754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68da      	ldr	r2, [r3, #12]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a23      	ldr	r2, [pc, #140]	; (80047fc <HAL_TIM_Base_Start_IT+0xc4>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d022      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800477a:	d01d      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1f      	ldr	r2, [pc, #124]	; (8004800 <HAL_TIM_Base_Start_IT+0xc8>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d018      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1e      	ldr	r2, [pc, #120]	; (8004804 <HAL_TIM_Base_Start_IT+0xcc>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d013      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a1c      	ldr	r2, [pc, #112]	; (8004808 <HAL_TIM_Base_Start_IT+0xd0>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d00e      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a1b      	ldr	r2, [pc, #108]	; (800480c <HAL_TIM_Base_Start_IT+0xd4>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d009      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a19      	ldr	r2, [pc, #100]	; (8004810 <HAL_TIM_Base_Start_IT+0xd8>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d004      	beq.n	80047b8 <HAL_TIM_Base_Start_IT+0x80>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a18      	ldr	r2, [pc, #96]	; (8004814 <HAL_TIM_Base_Start_IT+0xdc>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d111      	bne.n	80047dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 0307 	and.w	r3, r3, #7
 80047c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2b06      	cmp	r3, #6
 80047c8:	d010      	beq.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047da:	e007      	b.n	80047ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0201 	orr.w	r2, r2, #1
 80047ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047ec:	2300      	movs	r3, #0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3714      	adds	r7, #20
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	40010000 	.word	0x40010000
 8004800:	40000400 	.word	0x40000400
 8004804:	40000800 	.word	0x40000800
 8004808:	40000c00 	.word	0x40000c00
 800480c:	40010400 	.word	0x40010400
 8004810:	40014000 	.word	0x40014000
 8004814:	40001800 	.word	0x40001800

08004818 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d101      	bne.n	800482a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e041      	b.n	80048ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d106      	bne.n	8004844 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2200      	movs	r2, #0
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fe f9dc 	bl	8002bfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2202      	movs	r2, #2
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	3304      	adds	r3, #4
 8004854:	4619      	mov	r1, r3
 8004856:	4610      	mov	r0, r2
 8004858:	f000 fb98 	bl	8004f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
	...

080048b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <HAL_TIM_PWM_Start+0x24>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	bf14      	ite	ne
 80048d4:	2301      	movne	r3, #1
 80048d6:	2300      	moveq	r3, #0
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	e022      	b.n	8004922 <HAL_TIM_PWM_Start+0x6a>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	2b04      	cmp	r3, #4
 80048e0:	d109      	bne.n	80048f6 <HAL_TIM_PWM_Start+0x3e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	bf14      	ite	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	2300      	moveq	r3, #0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	e015      	b.n	8004922 <HAL_TIM_PWM_Start+0x6a>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d109      	bne.n	8004910 <HAL_TIM_PWM_Start+0x58>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b01      	cmp	r3, #1
 8004906:	bf14      	ite	ne
 8004908:	2301      	movne	r3, #1
 800490a:	2300      	moveq	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	e008      	b.n	8004922 <HAL_TIM_PWM_Start+0x6a>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b01      	cmp	r3, #1
 800491a:	bf14      	ite	ne
 800491c:	2301      	movne	r3, #1
 800491e:	2300      	moveq	r3, #0
 8004920:	b2db      	uxtb	r3, r3
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e07c      	b.n	8004a24 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <HAL_TIM_PWM_Start+0x82>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2202      	movs	r2, #2
 8004934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004938:	e013      	b.n	8004962 <HAL_TIM_PWM_Start+0xaa>
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	2b04      	cmp	r3, #4
 800493e:	d104      	bne.n	800494a <HAL_TIM_PWM_Start+0x92>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004948:	e00b      	b.n	8004962 <HAL_TIM_PWM_Start+0xaa>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	2b08      	cmp	r3, #8
 800494e:	d104      	bne.n	800495a <HAL_TIM_PWM_Start+0xa2>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2202      	movs	r2, #2
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	e003      	b.n	8004962 <HAL_TIM_PWM_Start+0xaa>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	2201      	movs	r2, #1
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	4618      	mov	r0, r3
 800496c:	f000 fe04 	bl	8005578 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a2d      	ldr	r2, [pc, #180]	; (8004a2c <HAL_TIM_PWM_Start+0x174>)
 8004976:	4293      	cmp	r3, r2
 8004978:	d004      	beq.n	8004984 <HAL_TIM_PWM_Start+0xcc>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <HAL_TIM_PWM_Start+0x178>)
 8004980:	4293      	cmp	r3, r2
 8004982:	d101      	bne.n	8004988 <HAL_TIM_PWM_Start+0xd0>
 8004984:	2301      	movs	r3, #1
 8004986:	e000      	b.n	800498a <HAL_TIM_PWM_Start+0xd2>
 8004988:	2300      	movs	r3, #0
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800499c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a22      	ldr	r2, [pc, #136]	; (8004a2c <HAL_TIM_PWM_Start+0x174>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d022      	beq.n	80049ee <HAL_TIM_PWM_Start+0x136>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b0:	d01d      	beq.n	80049ee <HAL_TIM_PWM_Start+0x136>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1f      	ldr	r2, [pc, #124]	; (8004a34 <HAL_TIM_PWM_Start+0x17c>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d018      	beq.n	80049ee <HAL_TIM_PWM_Start+0x136>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_TIM_PWM_Start+0x180>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d013      	beq.n	80049ee <HAL_TIM_PWM_Start+0x136>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a1c      	ldr	r2, [pc, #112]	; (8004a3c <HAL_TIM_PWM_Start+0x184>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d00e      	beq.n	80049ee <HAL_TIM_PWM_Start+0x136>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a16      	ldr	r2, [pc, #88]	; (8004a30 <HAL_TIM_PWM_Start+0x178>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d009      	beq.n	80049ee <HAL_TIM_PWM_Start+0x136>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a18      	ldr	r2, [pc, #96]	; (8004a40 <HAL_TIM_PWM_Start+0x188>)
 80049e0:	4293      	cmp	r3, r2
 80049e2:	d004      	beq.n	80049ee <HAL_TIM_PWM_Start+0x136>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a16      	ldr	r2, [pc, #88]	; (8004a44 <HAL_TIM_PWM_Start+0x18c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d111      	bne.n	8004a12 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f003 0307 	and.w	r3, r3, #7
 80049f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2b06      	cmp	r3, #6
 80049fe:	d010      	beq.n	8004a22 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f042 0201 	orr.w	r2, r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a10:	e007      	b.n	8004a22 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 0201 	orr.w	r2, r2, #1
 8004a20:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a22:	2300      	movs	r3, #0
}
 8004a24:	4618      	mov	r0, r3
 8004a26:	3710      	adds	r7, #16
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	40010000 	.word	0x40010000
 8004a30:	40010400 	.word	0x40010400
 8004a34:	40000400 	.word	0x40000400
 8004a38:	40000800 	.word	0x40000800
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	40014000 	.word	0x40014000
 8004a44:	40001800 	.word	0x40001800

08004a48 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	691b      	ldr	r3, [r3, #16]
 8004a5e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d020      	beq.n	8004aac <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d01b      	beq.n	8004aac <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0202 	mvn.w	r2, #2
 8004a7c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2201      	movs	r2, #1
 8004a82:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d003      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f000 fa5b 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004a98:	e005      	b.n	8004aa6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f000 fa4d 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f000 fa5e 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	f003 0304 	and.w	r3, r3, #4
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d020      	beq.n	8004af8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01b      	beq.n	8004af8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f06f 0204 	mvn.w	r2, #4
 8004ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2202      	movs	r2, #2
 8004ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d003      	beq.n	8004ae6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f000 fa35 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004ae4:	e005      	b.n	8004af2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 fa27 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aec:	6878      	ldr	r0, [r7, #4]
 8004aee:	f000 fa38 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0308 	and.w	r3, r3, #8
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d020      	beq.n	8004b44 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f003 0308 	and.w	r3, r3, #8
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d01b      	beq.n	8004b44 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f06f 0208 	mvn.w	r2, #8
 8004b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2204      	movs	r2, #4
 8004b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	69db      	ldr	r3, [r3, #28]
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d003      	beq.n	8004b32 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 fa0f 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004b30:	e005      	b.n	8004b3e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f000 fa01 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f000 fa12 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 0310 	and.w	r3, r3, #16
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d020      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0310 	and.w	r3, r3, #16
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d01b      	beq.n	8004b90 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f06f 0210 	mvn.w	r2, #16
 8004b60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2208      	movs	r2, #8
 8004b66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	69db      	ldr	r3, [r3, #28]
 8004b6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f9e9 	bl	8004f4e <HAL_TIM_IC_CaptureCallback>
 8004b7c:	e005      	b.n	8004b8a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f9db 	bl	8004f3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f9ec 	bl	8004f62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b90:	68bb      	ldr	r3, [r7, #8]
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00c      	beq.n	8004bb4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d007      	beq.n	8004bb4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0201 	mvn.w	r2, #1
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fd fe24 	bl	80027fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00c      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f000 fd7c 	bl	80056d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00c      	beq.n	8004bfc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d007      	beq.n	8004bfc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f000 f9bd 	bl	8004f76 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 0320 	and.w	r3, r3, #32
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00c      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 0320 	and.w	r3, r3, #32
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d007      	beq.n	8004c20 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0220 	mvn.w	r2, #32
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fd4e 	bl	80056bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c20:	bf00      	nop
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c34:	2300      	movs	r3, #0
 8004c36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d101      	bne.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c42:	2302      	movs	r3, #2
 8004c44:	e0ae      	b.n	8004da4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b0c      	cmp	r3, #12
 8004c52:	f200 809f 	bhi.w	8004d94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c56:	a201      	add	r2, pc, #4	; (adr r2, 8004c5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c5c:	08004c91 	.word	0x08004c91
 8004c60:	08004d95 	.word	0x08004d95
 8004c64:	08004d95 	.word	0x08004d95
 8004c68:	08004d95 	.word	0x08004d95
 8004c6c:	08004cd1 	.word	0x08004cd1
 8004c70:	08004d95 	.word	0x08004d95
 8004c74:	08004d95 	.word	0x08004d95
 8004c78:	08004d95 	.word	0x08004d95
 8004c7c:	08004d13 	.word	0x08004d13
 8004c80:	08004d95 	.word	0x08004d95
 8004c84:	08004d95 	.word	0x08004d95
 8004c88:	08004d95 	.word	0x08004d95
 8004c8c:	08004d53 	.word	0x08004d53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68b9      	ldr	r1, [r7, #8]
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 fa24 	bl	80050e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699a      	ldr	r2, [r3, #24]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f042 0208 	orr.w	r2, r2, #8
 8004caa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	699a      	ldr	r2, [r3, #24]
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f022 0204 	bic.w	r2, r2, #4
 8004cba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6999      	ldr	r1, [r3, #24]
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	691a      	ldr	r2, [r3, #16]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	619a      	str	r2, [r3, #24]
      break;
 8004cce:	e064      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f000 fa74 	bl	80051c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cfa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6999      	ldr	r1, [r3, #24]
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	021a      	lsls	r2, r3, #8
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	430a      	orrs	r2, r1
 8004d0e:	619a      	str	r2, [r3, #24]
      break;
 8004d10:	e043      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	68b9      	ldr	r1, [r7, #8]
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f000 fac9 	bl	80052b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0208 	orr.w	r2, r2, #8
 8004d2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	69da      	ldr	r2, [r3, #28]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0204 	bic.w	r2, r2, #4
 8004d3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	69d9      	ldr	r1, [r3, #28]
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	691a      	ldr	r2, [r3, #16]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	430a      	orrs	r2, r1
 8004d4e:	61da      	str	r2, [r3, #28]
      break;
 8004d50:	e023      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68b9      	ldr	r1, [r7, #8]
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f000 fb1d 	bl	8005398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	69da      	ldr	r2, [r3, #28]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	69da      	ldr	r2, [r3, #28]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69d9      	ldr	r1, [r3, #28]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	021a      	lsls	r2, r3, #8
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	61da      	str	r2, [r3, #28]
      break;
 8004d92:	e002      	b.n	8004d9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	75fb      	strb	r3, [r7, #23]
      break;
 8004d98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	3718      	adds	r7, #24
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}

08004dac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b084      	sub	sp, #16
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc0:	2b01      	cmp	r3, #1
 8004dc2:	d101      	bne.n	8004dc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	e0b4      	b.n	8004f32 <HAL_TIM_ConfigClockSource+0x186>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004de6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004dee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	68ba      	ldr	r2, [r7, #8]
 8004df6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e00:	d03e      	beq.n	8004e80 <HAL_TIM_ConfigClockSource+0xd4>
 8004e02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e06:	f200 8087 	bhi.w	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e0e:	f000 8086 	beq.w	8004f1e <HAL_TIM_ConfigClockSource+0x172>
 8004e12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e16:	d87f      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e18:	2b70      	cmp	r3, #112	; 0x70
 8004e1a:	d01a      	beq.n	8004e52 <HAL_TIM_ConfigClockSource+0xa6>
 8004e1c:	2b70      	cmp	r3, #112	; 0x70
 8004e1e:	d87b      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e20:	2b60      	cmp	r3, #96	; 0x60
 8004e22:	d050      	beq.n	8004ec6 <HAL_TIM_ConfigClockSource+0x11a>
 8004e24:	2b60      	cmp	r3, #96	; 0x60
 8004e26:	d877      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e28:	2b50      	cmp	r3, #80	; 0x50
 8004e2a:	d03c      	beq.n	8004ea6 <HAL_TIM_ConfigClockSource+0xfa>
 8004e2c:	2b50      	cmp	r3, #80	; 0x50
 8004e2e:	d873      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e30:	2b40      	cmp	r3, #64	; 0x40
 8004e32:	d058      	beq.n	8004ee6 <HAL_TIM_ConfigClockSource+0x13a>
 8004e34:	2b40      	cmp	r3, #64	; 0x40
 8004e36:	d86f      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e38:	2b30      	cmp	r3, #48	; 0x30
 8004e3a:	d064      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e3c:	2b30      	cmp	r3, #48	; 0x30
 8004e3e:	d86b      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e40:	2b20      	cmp	r3, #32
 8004e42:	d060      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e44:	2b20      	cmp	r3, #32
 8004e46:	d867      	bhi.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d05c      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d05a      	beq.n	8004f06 <HAL_TIM_ConfigClockSource+0x15a>
 8004e50:	e062      	b.n	8004f18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e62:	f000 fb69 	bl	8005538 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	68ba      	ldr	r2, [r7, #8]
 8004e7c:	609a      	str	r2, [r3, #8]
      break;
 8004e7e:	e04f      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e90:	f000 fb52 	bl	8005538 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea2:	609a      	str	r2, [r3, #8]
      break;
 8004ea4:	e03c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	f000 fac6 	bl	8005444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	2150      	movs	r1, #80	; 0x50
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fb1f 	bl	8005502 <TIM_ITRx_SetConfig>
      break;
 8004ec4:	e02c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	f000 fae5 	bl	80054a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	2160      	movs	r1, #96	; 0x60
 8004ede:	4618      	mov	r0, r3
 8004ee0:	f000 fb0f 	bl	8005502 <TIM_ITRx_SetConfig>
      break;
 8004ee4:	e01c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	f000 faa6 	bl	8005444 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2140      	movs	r1, #64	; 0x40
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 faff 	bl	8005502 <TIM_ITRx_SetConfig>
      break;
 8004f04:	e00c      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4619      	mov	r1, r3
 8004f10:	4610      	mov	r0, r2
 8004f12:	f000 faf6 	bl	8005502 <TIM_ITRx_SetConfig>
      break;
 8004f16:	e003      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1c:	e000      	b.n	8004f20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3710      	adds	r7, #16
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}

08004f3a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f3a:	b480      	push	{r7}
 8004f3c:	b083      	sub	sp, #12
 8004f3e:	af00      	add	r7, sp, #0
 8004f40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f42:	bf00      	nop
 8004f44:	370c      	adds	r7, #12
 8004f46:	46bd      	mov	sp, r7
 8004f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4c:	4770      	bx	lr

08004f4e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f4e:	b480      	push	{r7}
 8004f50:	b083      	sub	sp, #12
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f56:	bf00      	nop
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f6a:	bf00      	nop
 8004f6c:	370c      	adds	r7, #12
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f74:	4770      	bx	lr

08004f76 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f76:	b480      	push	{r7}
 8004f78:	b083      	sub	sp, #12
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a46      	ldr	r2, [pc, #280]	; (80050b8 <TIM_Base_SetConfig+0x12c>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004faa:	d00f      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	4a43      	ldr	r2, [pc, #268]	; (80050bc <TIM_Base_SetConfig+0x130>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d00b      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	4a42      	ldr	r2, [pc, #264]	; (80050c0 <TIM_Base_SetConfig+0x134>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d007      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	4a41      	ldr	r2, [pc, #260]	; (80050c4 <TIM_Base_SetConfig+0x138>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d003      	beq.n	8004fcc <TIM_Base_SetConfig+0x40>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4a40      	ldr	r2, [pc, #256]	; (80050c8 <TIM_Base_SetConfig+0x13c>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d108      	bne.n	8004fde <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	68fa      	ldr	r2, [r7, #12]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a35      	ldr	r2, [pc, #212]	; (80050b8 <TIM_Base_SetConfig+0x12c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d02b      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fec:	d027      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a32      	ldr	r2, [pc, #200]	; (80050bc <TIM_Base_SetConfig+0x130>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d023      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a31      	ldr	r2, [pc, #196]	; (80050c0 <TIM_Base_SetConfig+0x134>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01f      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a30      	ldr	r2, [pc, #192]	; (80050c4 <TIM_Base_SetConfig+0x138>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d01b      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a2f      	ldr	r2, [pc, #188]	; (80050c8 <TIM_Base_SetConfig+0x13c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d017      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a2e      	ldr	r2, [pc, #184]	; (80050cc <TIM_Base_SetConfig+0x140>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d013      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a2d      	ldr	r2, [pc, #180]	; (80050d0 <TIM_Base_SetConfig+0x144>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d00f      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a2c      	ldr	r2, [pc, #176]	; (80050d4 <TIM_Base_SetConfig+0x148>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00b      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a2b      	ldr	r2, [pc, #172]	; (80050d8 <TIM_Base_SetConfig+0x14c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a2a      	ldr	r2, [pc, #168]	; (80050dc <TIM_Base_SetConfig+0x150>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d003      	beq.n	800503e <TIM_Base_SetConfig+0xb2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a29      	ldr	r2, [pc, #164]	; (80050e0 <TIM_Base_SetConfig+0x154>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d108      	bne.n	8005050 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005044:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	695b      	ldr	r3, [r3, #20]
 800505a:	4313      	orrs	r3, r2
 800505c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	68fa      	ldr	r2, [r7, #12]
 8005062:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689a      	ldr	r2, [r3, #8]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a10      	ldr	r2, [pc, #64]	; (80050b8 <TIM_Base_SetConfig+0x12c>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_Base_SetConfig+0xf8>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a12      	ldr	r2, [pc, #72]	; (80050c8 <TIM_Base_SetConfig+0x13c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d103      	bne.n	800508c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f003 0301 	and.w	r3, r3, #1
 800509a:	2b01      	cmp	r3, #1
 800509c:	d105      	bne.n	80050aa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	f023 0201 	bic.w	r2, r3, #1
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	611a      	str	r2, [r3, #16]
  }
}
 80050aa:	bf00      	nop
 80050ac:	3714      	adds	r7, #20
 80050ae:	46bd      	mov	sp, r7
 80050b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b4:	4770      	bx	lr
 80050b6:	bf00      	nop
 80050b8:	40010000 	.word	0x40010000
 80050bc:	40000400 	.word	0x40000400
 80050c0:	40000800 	.word	0x40000800
 80050c4:	40000c00 	.word	0x40000c00
 80050c8:	40010400 	.word	0x40010400
 80050cc:	40014000 	.word	0x40014000
 80050d0:	40014400 	.word	0x40014400
 80050d4:	40014800 	.word	0x40014800
 80050d8:	40001800 	.word	0x40001800
 80050dc:	40001c00 	.word	0x40001c00
 80050e0:	40002000 	.word	0x40002000

080050e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b087      	sub	sp, #28
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	f023 0201 	bic.w	r2, r3, #1
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0303 	bic.w	r3, r3, #3
 800511a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	f023 0302 	bic.w	r3, r3, #2
 800512c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	4313      	orrs	r3, r2
 8005136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a20      	ldr	r2, [pc, #128]	; (80051bc <TIM_OC1_SetConfig+0xd8>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d003      	beq.n	8005148 <TIM_OC1_SetConfig+0x64>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <TIM_OC1_SetConfig+0xdc>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d10c      	bne.n	8005162 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	f023 0308 	bic.w	r3, r3, #8
 800514e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	4313      	orrs	r3, r2
 8005158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	f023 0304 	bic.w	r3, r3, #4
 8005160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a15      	ldr	r2, [pc, #84]	; (80051bc <TIM_OC1_SetConfig+0xd8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d003      	beq.n	8005172 <TIM_OC1_SetConfig+0x8e>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a14      	ldr	r2, [pc, #80]	; (80051c0 <TIM_OC1_SetConfig+0xdc>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d111      	bne.n	8005196 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005172:	693b      	ldr	r3, [r7, #16]
 8005174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	699b      	ldr	r3, [r3, #24]
 8005190:	693a      	ldr	r2, [r7, #16]
 8005192:	4313      	orrs	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68fa      	ldr	r2, [r7, #12]
 80051a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	621a      	str	r2, [r3, #32]
}
 80051b0:	bf00      	nop
 80051b2:	371c      	adds	r7, #28
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40010400 	.word	0x40010400

080051c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b087      	sub	sp, #28
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	6a1b      	ldr	r3, [r3, #32]
 80051d8:	f023 0210 	bic.w	r2, r3, #16
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	685b      	ldr	r3, [r3, #4]
 80051e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	021b      	lsls	r3, r3, #8
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	4313      	orrs	r3, r2
 8005206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	f023 0320 	bic.w	r3, r3, #32
 800520e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	689b      	ldr	r3, [r3, #8]
 8005214:	011b      	lsls	r3, r3, #4
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4313      	orrs	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a22      	ldr	r2, [pc, #136]	; (80052a8 <TIM_OC2_SetConfig+0xe4>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC2_SetConfig+0x68>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a21      	ldr	r2, [pc, #132]	; (80052ac <TIM_OC2_SetConfig+0xe8>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10d      	bne.n	8005248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	011b      	lsls	r3, r3, #4
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <TIM_OC2_SetConfig+0xe4>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d003      	beq.n	8005258 <TIM_OC2_SetConfig+0x94>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a16      	ldr	r2, [pc, #88]	; (80052ac <TIM_OC2_SetConfig+0xe8>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d113      	bne.n	8005280 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800525e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	695b      	ldr	r3, [r3, #20]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	4313      	orrs	r3, r2
 800527e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	697a      	ldr	r2, [r7, #20]
 8005298:	621a      	str	r2, [r3, #32]
}
 800529a:	bf00      	nop
 800529c:	371c      	adds	r7, #28
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40010400 	.word	0x40010400

080052b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b087      	sub	sp, #28
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a1b      	ldr	r3, [r3, #32]
 80052c4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f023 0303 	bic.w	r3, r3, #3
 80052e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68fa      	ldr	r2, [r7, #12]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	021b      	lsls	r3, r3, #8
 8005300:	697a      	ldr	r2, [r7, #20]
 8005302:	4313      	orrs	r3, r2
 8005304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a21      	ldr	r2, [pc, #132]	; (8005390 <TIM_OC3_SetConfig+0xe0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d003      	beq.n	8005316 <TIM_OC3_SetConfig+0x66>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a20      	ldr	r2, [pc, #128]	; (8005394 <TIM_OC3_SetConfig+0xe4>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d10d      	bne.n	8005332 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800531c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	68db      	ldr	r3, [r3, #12]
 8005322:	021b      	lsls	r3, r3, #8
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	4313      	orrs	r3, r2
 8005328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a16      	ldr	r2, [pc, #88]	; (8005390 <TIM_OC3_SetConfig+0xe0>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d003      	beq.n	8005342 <TIM_OC3_SetConfig+0x92>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a15      	ldr	r2, [pc, #84]	; (8005394 <TIM_OC3_SetConfig+0xe4>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d113      	bne.n	800536a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	693a      	ldr	r2, [r7, #16]
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	697a      	ldr	r2, [r7, #20]
 8005382:	621a      	str	r2, [r3, #32]
}
 8005384:	bf00      	nop
 8005386:	371c      	adds	r7, #28
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr
 8005390:	40010000 	.word	0x40010000
 8005394:	40010400 	.word	0x40010400

08005398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005398:	b480      	push	{r7}
 800539a:	b087      	sub	sp, #28
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6a1b      	ldr	r3, [r3, #32]
 80053a6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	4313      	orrs	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053dc:	693b      	ldr	r3, [r7, #16]
 80053de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	031b      	lsls	r3, r3, #12
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a12      	ldr	r2, [pc, #72]	; (800543c <TIM_OC4_SetConfig+0xa4>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_OC4_SetConfig+0x68>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a11      	ldr	r2, [pc, #68]	; (8005440 <TIM_OC4_SetConfig+0xa8>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d109      	bne.n	8005414 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	019b      	lsls	r3, r3, #6
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	68fa      	ldr	r2, [r7, #12]
 800541e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	621a      	str	r2, [r3, #32]
}
 800542e:	bf00      	nop
 8005430:	371c      	adds	r7, #28
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	40010000 	.word	0x40010000
 8005440:	40010400 	.word	0x40010400

08005444 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005444:	b480      	push	{r7}
 8005446:	b087      	sub	sp, #28
 8005448:	af00      	add	r7, sp, #0
 800544a:	60f8      	str	r0, [r7, #12]
 800544c:	60b9      	str	r1, [r7, #8]
 800544e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f023 0201 	bic.w	r2, r3, #1
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800546e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	011b      	lsls	r3, r3, #4
 8005474:	693a      	ldr	r2, [r7, #16]
 8005476:	4313      	orrs	r3, r2
 8005478:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f023 030a 	bic.w	r3, r3, #10
 8005480:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005482:	697a      	ldr	r2, [r7, #20]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	4313      	orrs	r3, r2
 8005488:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b087      	sub	sp, #28
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	6a1b      	ldr	r3, [r3, #32]
 80054b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a1b      	ldr	r3, [r3, #32]
 80054b8:	f023 0210 	bic.w	r2, r3, #16
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	699b      	ldr	r3, [r3, #24]
 80054c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	031b      	lsls	r3, r3, #12
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	4313      	orrs	r3, r2
 80054d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	011b      	lsls	r3, r3, #4
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	621a      	str	r2, [r3, #32]
}
 80054f6:	bf00      	nop
 80054f8:	371c      	adds	r7, #28
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005502:	b480      	push	{r7}
 8005504:	b085      	sub	sp, #20
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
 800550a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005518:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4313      	orrs	r3, r2
 8005520:	f043 0307 	orr.w	r3, r3, #7
 8005524:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	609a      	str	r2, [r3, #8]
}
 800552c:	bf00      	nop
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
 8005544:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005552:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	021a      	lsls	r2, r3, #8
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	431a      	orrs	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4313      	orrs	r3, r2
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	4313      	orrs	r3, r2
 8005564:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	697a      	ldr	r2, [r7, #20]
 800556a:	609a      	str	r2, [r3, #8]
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	f003 031f 	and.w	r3, r3, #31
 800558a:	2201      	movs	r2, #1
 800558c:	fa02 f303 	lsl.w	r3, r2, r3
 8005590:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6a1a      	ldr	r2, [r3, #32]
 8005596:	697b      	ldr	r3, [r7, #20]
 8005598:	43db      	mvns	r3, r3
 800559a:	401a      	ands	r2, r3
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a1a      	ldr	r2, [r3, #32]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 031f 	and.w	r3, r3, #31
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	fa01 f303 	lsl.w	r3, r1, r3
 80055b0:	431a      	orrs	r2, r3
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	621a      	str	r2, [r3, #32]
}
 80055b6:	bf00      	nop
 80055b8:	371c      	adds	r7, #28
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
 80055cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d101      	bne.n	80055dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055d8:	2302      	movs	r3, #2
 80055da:	e05a      	b.n	8005692 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005602:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68fa      	ldr	r2, [r7, #12]
 800560a:	4313      	orrs	r3, r2
 800560c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a21      	ldr	r2, [pc, #132]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d022      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005628:	d01d      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a1d      	ldr	r2, [pc, #116]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d018      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1b      	ldr	r2, [pc, #108]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1a      	ldr	r2, [pc, #104]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00e      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a18      	ldr	r2, [pc, #96]	; (80056b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d009      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a17      	ldr	r2, [pc, #92]	; (80056b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a15      	ldr	r2, [pc, #84]	; (80056b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d10c      	bne.n	8005680 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800566c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	4313      	orrs	r3, r2
 8005676:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005690:	2300      	movs	r3, #0
}
 8005692:	4618      	mov	r0, r3
 8005694:	3714      	adds	r7, #20
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr
 800569e:	bf00      	nop
 80056a0:	40010000 	.word	0x40010000
 80056a4:	40000400 	.word	0x40000400
 80056a8:	40000800 	.word	0x40000800
 80056ac:	40000c00 	.word	0x40000c00
 80056b0:	40010400 	.word	0x40010400
 80056b4:	40014000 	.word	0x40014000
 80056b8:	40001800 	.word	0x40001800

080056bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e042      	b.n	800577c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fd fb90 	bl	8002e30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2224      	movs	r2, #36	; 0x24
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68da      	ldr	r2, [r3, #12]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005726:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fdbd 	bl	80062a8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800573c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695a      	ldr	r2, [r3, #20]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800574c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68da      	ldr	r2, [r3, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800575c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2220      	movs	r2, #32
 8005770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2200      	movs	r2, #0
 8005778:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800577a:	2300      	movs	r3, #0
}
 800577c:	4618      	mov	r0, r3
 800577e:	3708      	adds	r7, #8
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b08a      	sub	sp, #40	; 0x28
 8005788:	af02      	add	r7, sp, #8
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	603b      	str	r3, [r7, #0]
 8005790:	4613      	mov	r3, r2
 8005792:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005794:	2300      	movs	r3, #0
 8005796:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b20      	cmp	r3, #32
 80057a2:	d175      	bne.n	8005890 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_UART_Transmit+0x2c>
 80057aa:	88fb      	ldrh	r3, [r7, #6]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d101      	bne.n	80057b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	e06e      	b.n	8005892 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2221      	movs	r2, #33	; 0x21
 80057be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057c2:	f7fd fdf3 	bl	80033ac <HAL_GetTick>
 80057c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	88fa      	ldrh	r2, [r7, #6]
 80057cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	88fa      	ldrh	r2, [r7, #6]
 80057d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057dc:	d108      	bne.n	80057f0 <HAL_UART_Transmit+0x6c>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d104      	bne.n	80057f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	61bb      	str	r3, [r7, #24]
 80057ee:	e003      	b.n	80057f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057f0:	68bb      	ldr	r3, [r7, #8]
 80057f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057f8:	e02e      	b.n	8005858 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	9300      	str	r3, [sp, #0]
 80057fe:	697b      	ldr	r3, [r7, #20]
 8005800:	2200      	movs	r2, #0
 8005802:	2180      	movs	r1, #128	; 0x80
 8005804:	68f8      	ldr	r0, [r7, #12]
 8005806:	f000 fb1f 	bl	8005e48 <UART_WaitOnFlagUntilTimeout>
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d005      	beq.n	800581c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2220      	movs	r2, #32
 8005814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e03a      	b.n	8005892 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d10b      	bne.n	800583a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	881b      	ldrh	r3, [r3, #0]
 8005826:	461a      	mov	r2, r3
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005830:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	3302      	adds	r3, #2
 8005836:	61bb      	str	r3, [r7, #24]
 8005838:	e007      	b.n	800584a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	781a      	ldrb	r2, [r3, #0]
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	3301      	adds	r3, #1
 8005848:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800584e:	b29b      	uxth	r3, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	b29a      	uxth	r2, r3
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800585c:	b29b      	uxth	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1cb      	bne.n	80057fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	9300      	str	r3, [sp, #0]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2200      	movs	r2, #0
 800586a:	2140      	movs	r1, #64	; 0x40
 800586c:	68f8      	ldr	r0, [r7, #12]
 800586e:	f000 faeb 	bl	8005e48 <UART_WaitOnFlagUntilTimeout>
 8005872:	4603      	mov	r3, r0
 8005874:	2b00      	cmp	r3, #0
 8005876:	d005      	beq.n	8005884 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e006      	b.n	8005892 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2220      	movs	r2, #32
 8005888:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	e000      	b.n	8005892 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
  }
}
 8005892:	4618      	mov	r0, r3
 8005894:	3720      	adds	r7, #32
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}

0800589a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800589a:	b580      	push	{r7, lr}
 800589c:	b084      	sub	sp, #16
 800589e:	af00      	add	r7, sp, #0
 80058a0:	60f8      	str	r0, [r7, #12]
 80058a2:	60b9      	str	r1, [r7, #8]
 80058a4:	4613      	mov	r3, r2
 80058a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b20      	cmp	r3, #32
 80058b2:	d112      	bne.n	80058da <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d002      	beq.n	80058c0 <HAL_UART_Receive_IT+0x26>
 80058ba:	88fb      	ldrh	r3, [r7, #6]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e00b      	b.n	80058dc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058ca:	88fb      	ldrh	r3, [r7, #6]
 80058cc:	461a      	mov	r2, r3
 80058ce:	68b9      	ldr	r1, [r7, #8]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 fb12 	bl	8005efa <UART_Start_Receive_IT>
 80058d6:	4603      	mov	r3, r0
 80058d8:	e000      	b.n	80058dc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058da:	2302      	movs	r3, #2
  }
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b0ba      	sub	sp, #232	; 0xe8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800590a:	2300      	movs	r3, #0
 800590c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005910:	2300      	movs	r3, #0
 8005912:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005922:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005926:	2b00      	cmp	r3, #0
 8005928:	d10f      	bne.n	800594a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800592a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d009      	beq.n	800594a <HAL_UART_IRQHandler+0x66>
 8005936:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800593a:	f003 0320 	and.w	r3, r3, #32
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fbf2 	bl	800612c <UART_Receive_IT>
      return;
 8005948:	e25b      	b.n	8005e02 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800594a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 80de 	beq.w	8005b10 <HAL_UART_IRQHandler+0x22c>
 8005954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d106      	bne.n	800596e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005964:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80d1 	beq.w	8005b10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800596e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005972:	f003 0301 	and.w	r3, r3, #1
 8005976:	2b00      	cmp	r3, #0
 8005978:	d00b      	beq.n	8005992 <HAL_UART_IRQHandler+0xae>
 800597a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800597e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005982:	2b00      	cmp	r3, #0
 8005984:	d005      	beq.n	8005992 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598a:	f043 0201 	orr.w	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005996:	f003 0304 	and.w	r3, r3, #4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d00b      	beq.n	80059b6 <HAL_UART_IRQHandler+0xd2>
 800599e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d005      	beq.n	80059b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ae:	f043 0202 	orr.w	r2, r3, #2
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059ba:	f003 0302 	and.w	r3, r3, #2
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d00b      	beq.n	80059da <HAL_UART_IRQHandler+0xf6>
 80059c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059c6:	f003 0301 	and.w	r3, r3, #1
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d005      	beq.n	80059da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	f043 0204 	orr.w	r2, r3, #4
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059de:	f003 0308 	and.w	r3, r3, #8
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d011      	beq.n	8005a0a <HAL_UART_IRQHandler+0x126>
 80059e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059ea:	f003 0320 	and.w	r3, r3, #32
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d105      	bne.n	80059fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059f6:	f003 0301 	and.w	r3, r3, #1
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d005      	beq.n	8005a0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a02:	f043 0208 	orr.w	r2, r3, #8
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f000 81f2 	beq.w	8005df8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d008      	beq.n	8005a32 <HAL_UART_IRQHandler+0x14e>
 8005a20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a24:	f003 0320 	and.w	r3, r3, #32
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d002      	beq.n	8005a32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb7d 	bl	800612c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	bf0c      	ite	eq
 8005a40:	2301      	moveq	r3, #1
 8005a42:	2300      	movne	r3, #0
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4e:	f003 0308 	and.w	r3, r3, #8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d103      	bne.n	8005a5e <HAL_UART_IRQHandler+0x17a>
 8005a56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d04f      	beq.n	8005afe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa85 	bl	8005f6e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	695b      	ldr	r3, [r3, #20]
 8005a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d141      	bne.n	8005af6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	3314      	adds	r3, #20
 8005a78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005a80:	e853 3f00 	ldrex	r3, [r3]
 8005a84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005a88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005a8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	3314      	adds	r3, #20
 8005a9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005a9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005aa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005aaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005aae:	e841 2300 	strex	r3, r2, [r1]
 8005ab2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005ab6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1d9      	bne.n	8005a72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d013      	beq.n	8005aee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aca:	4a7e      	ldr	r2, [pc, #504]	; (8005cc4 <HAL_UART_IRQHandler+0x3e0>)
 8005acc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fd fdf7 	bl	80036c6 <HAL_DMA_Abort_IT>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d016      	beq.n	8005b0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ae2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ae4:	687a      	ldr	r2, [r7, #4]
 8005ae6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005ae8:	4610      	mov	r0, r2
 8005aea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005aec:	e00e      	b.n	8005b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f994 	bl	8005e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af4:	e00a      	b.n	8005b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f000 f990 	bl	8005e1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005afc:	e006      	b.n	8005b0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 f98c 	bl	8005e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005b0a:	e175      	b.n	8005df8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b0c:	bf00      	nop
    return;
 8005b0e:	e173      	b.n	8005df8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b14:	2b01      	cmp	r3, #1
 8005b16:	f040 814f 	bne.w	8005db8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b1e:	f003 0310 	and.w	r3, r3, #16
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f000 8148 	beq.w	8005db8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b2c:	f003 0310 	and.w	r3, r3, #16
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	f000 8141 	beq.w	8005db8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b36:	2300      	movs	r3, #0
 8005b38:	60bb      	str	r3, [r7, #8]
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	60bb      	str	r3, [r7, #8]
 8005b4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b56:	2b40      	cmp	r3, #64	; 0x40
 8005b58:	f040 80b6 	bne.w	8005cc8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f000 8145 	beq.w	8005dfc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b7a:	429a      	cmp	r2, r3
 8005b7c:	f080 813e 	bcs.w	8005dfc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005b86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b8c:	69db      	ldr	r3, [r3, #28]
 8005b8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b92:	f000 8088 	beq.w	8005ca6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ba4:	e853 3f00 	ldrex	r3, [r3]
 8005ba8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	330c      	adds	r3, #12
 8005bbe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005bc2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005bc6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005bce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005bd2:	e841 2300 	strex	r3, r2, [r1]
 8005bd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005bda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d1d9      	bne.n	8005b96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bec:	e853 3f00 	ldrex	r3, [r3]
 8005bf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005bf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bf4:	f023 0301 	bic.w	r3, r3, #1
 8005bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3314      	adds	r3, #20
 8005c02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e1      	bne.n	8005be2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3314      	adds	r3, #20
 8005c24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3314      	adds	r3, #20
 8005c3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e3      	bne.n	8005c1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2220      	movs	r2, #32
 8005c5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2200      	movs	r2, #0
 8005c62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	330c      	adds	r3, #12
 8005c6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c6e:	e853 3f00 	ldrex	r3, [r3]
 8005c72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c76:	f023 0310 	bic.w	r3, r3, #16
 8005c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005c88:	65ba      	str	r2, [r7, #88]	; 0x58
 8005c8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005c8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005c90:	e841 2300 	strex	r3, r2, [r1]
 8005c94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1e3      	bne.n	8005c64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7fd fca0 	bl	80035e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	4619      	mov	r1, r3
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f8b7 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cc2:	e09b      	b.n	8005dfc <HAL_UART_IRQHandler+0x518>
 8005cc4:	08006035 	.word	0x08006035
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	f000 808e 	beq.w	8005e00 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 8089 	beq.w	8005e00 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	330c      	adds	r3, #12
 8005cf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cf8:	e853 3f00 	ldrex	r3, [r3]
 8005cfc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d04:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	330c      	adds	r3, #12
 8005d0e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005d12:	647a      	str	r2, [r7, #68]	; 0x44
 8005d14:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e3      	bne.n	8005cee <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	3314      	adds	r3, #20
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	623b      	str	r3, [r7, #32]
   return(result);
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	f023 0301 	bic.w	r3, r3, #1
 8005d3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	3314      	adds	r3, #20
 8005d46:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d4a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e3      	bne.n	8005d26 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2220      	movs	r2, #32
 8005d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	330c      	adds	r3, #12
 8005d72:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d74:	693b      	ldr	r3, [r7, #16]
 8005d76:	e853 3f00 	ldrex	r3, [r3]
 8005d7a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	f023 0310 	bic.w	r3, r3, #16
 8005d82:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	330c      	adds	r3, #12
 8005d8c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005d90:	61fa      	str	r2, [r7, #28]
 8005d92:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d94:	69b9      	ldr	r1, [r7, #24]
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	e841 2300 	strex	r3, r2, [r1]
 8005d9c:	617b      	str	r3, [r7, #20]
   return(result);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d1e3      	bne.n	8005d6c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005daa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dae:	4619      	mov	r1, r3
 8005db0:	6878      	ldr	r0, [r7, #4]
 8005db2:	f000 f83d 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005db6:	e023      	b.n	8005e00 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005db8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d009      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x4f4>
 8005dc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005dc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d003      	beq.n	8005dd8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f000 f943 	bl	800605c <UART_Transmit_IT>
    return;
 8005dd6:	e014      	b.n	8005e02 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00e      	beq.n	8005e02 <HAL_UART_IRQHandler+0x51e>
 8005de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f983 	bl	80060fc <UART_EndTransmit_IT>
    return;
 8005df6:	e004      	b.n	8005e02 <HAL_UART_IRQHandler+0x51e>
    return;
 8005df8:	bf00      	nop
 8005dfa:	e002      	b.n	8005e02 <HAL_UART_IRQHandler+0x51e>
      return;
 8005dfc:	bf00      	nop
 8005dfe:	e000      	b.n	8005e02 <HAL_UART_IRQHandler+0x51e>
      return;
 8005e00:	bf00      	nop
  }
}
 8005e02:	37e8      	adds	r7, #232	; 0xe8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e10:	bf00      	nop
 8005e12:	370c      	adds	r7, #12
 8005e14:	46bd      	mov	sp, r7
 8005e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1a:	4770      	bx	lr

08005e1c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b083      	sub	sp, #12
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e3c:	bf00      	nop
 8005e3e:	370c      	adds	r7, #12
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	603b      	str	r3, [r7, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e58:	e03b      	b.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e5a:	6a3b      	ldr	r3, [r7, #32]
 8005e5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e60:	d037      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e62:	f7fd faa3 	bl	80033ac <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	6a3a      	ldr	r2, [r7, #32]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d302      	bcc.n	8005e78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d101      	bne.n	8005e7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e03a      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68db      	ldr	r3, [r3, #12]
 8005e82:	f003 0304 	and.w	r3, r3, #4
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d023      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2b80      	cmp	r3, #128	; 0x80
 8005e8e:	d020      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b40      	cmp	r3, #64	; 0x40
 8005e94:	d01d      	beq.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f003 0308 	and.w	r3, r3, #8
 8005ea0:	2b08      	cmp	r3, #8
 8005ea2:	d116      	bne.n	8005ed2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eba:	68f8      	ldr	r0, [r7, #12]
 8005ebc:	f000 f857 	bl	8005f6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2208      	movs	r2, #8
 8005ec4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e00f      	b.n	8005ef2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4013      	ands	r3, r2
 8005edc:	68ba      	ldr	r2, [r7, #8]
 8005ede:	429a      	cmp	r2, r3
 8005ee0:	bf0c      	ite	eq
 8005ee2:	2301      	moveq	r3, #1
 8005ee4:	2300      	movne	r3, #0
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	461a      	mov	r2, r3
 8005eea:	79fb      	ldrb	r3, [r7, #7]
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d0b4      	beq.n	8005e5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ef0:	2300      	movs	r3, #0
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3718      	adds	r7, #24
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b085      	sub	sp, #20
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	60f8      	str	r0, [r7, #12]
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	4613      	mov	r3, r2
 8005f06:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	88fa      	ldrh	r2, [r7, #6]
 8005f12:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	88fa      	ldrh	r2, [r7, #6]
 8005f18:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2222      	movs	r2, #34	; 0x22
 8005f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	68da      	ldr	r2, [r3, #12]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f3e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	695a      	ldr	r2, [r3, #20]
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f042 0201 	orr.w	r2, r2, #1
 8005f4e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0220 	orr.w	r2, r2, #32
 8005f5e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f6e:	b480      	push	{r7}
 8005f70:	b095      	sub	sp, #84	; 0x54
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	330c      	adds	r3, #12
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005f86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005f8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330c      	adds	r3, #12
 8005f94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f96:	643a      	str	r2, [r7, #64]	; 0x40
 8005f98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005f9c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005fa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e5      	bne.n	8005f76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3314      	adds	r3, #20
 8005fb0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fb2:	6a3b      	ldr	r3, [r7, #32]
 8005fb4:	e853 3f00 	ldrex	r3, [r3]
 8005fb8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	f023 0301 	bic.w	r3, r3, #1
 8005fc0:	64bb      	str	r3, [r7, #72]	; 0x48
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	3314      	adds	r3, #20
 8005fc8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fca:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005fcc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fd2:	e841 2300 	strex	r3, r2, [r1]
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d1e5      	bne.n	8005faa <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d119      	bne.n	800601a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	330c      	adds	r3, #12
 8005fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	e853 3f00 	ldrex	r3, [r3]
 8005ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f023 0310 	bic.w	r3, r3, #16
 8005ffc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006006:	61ba      	str	r2, [r7, #24]
 8006008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800600a:	6979      	ldr	r1, [r7, #20]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	e841 2300 	strex	r3, r2, [r1]
 8006012:	613b      	str	r3, [r7, #16]
   return(result);
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1e5      	bne.n	8005fe6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2220      	movs	r2, #32
 800601e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006028:	bf00      	nop
 800602a:	3754      	adds	r7, #84	; 0x54
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006040:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2200      	movs	r2, #0
 8006046:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	2200      	movs	r2, #0
 800604c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff fee4 	bl	8005e1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006054:	bf00      	nop
 8006056:	3710      	adds	r7, #16
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800605c:	b480      	push	{r7}
 800605e:	b085      	sub	sp, #20
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b21      	cmp	r3, #33	; 0x21
 800606e:	d13e      	bne.n	80060ee <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006078:	d114      	bne.n	80060a4 <UART_Transmit_IT+0x48>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	691b      	ldr	r3, [r3, #16]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d110      	bne.n	80060a4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	881b      	ldrh	r3, [r3, #0]
 800608c:	461a      	mov	r2, r3
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006096:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	1c9a      	adds	r2, r3, #2
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	621a      	str	r2, [r3, #32]
 80060a2:	e008      	b.n	80060b6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6a1b      	ldr	r3, [r3, #32]
 80060a8:	1c59      	adds	r1, r3, #1
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6211      	str	r1, [r2, #32]
 80060ae:	781a      	ldrb	r2, [r3, #0]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	3b01      	subs	r3, #1
 80060be:	b29b      	uxth	r3, r3
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	4619      	mov	r1, r3
 80060c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10f      	bne.n	80060ea <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68da      	ldr	r2, [r3, #12]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060ea:	2300      	movs	r3, #0
 80060ec:	e000      	b.n	80060f0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060ee:	2302      	movs	r3, #2
  }
}
 80060f0:	4618      	mov	r0, r3
 80060f2:	3714      	adds	r7, #20
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b082      	sub	sp, #8
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006112:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2220      	movs	r2, #32
 8006118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff fe73 	bl	8005e08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b08c      	sub	sp, #48	; 0x30
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800613a:	b2db      	uxtb	r3, r3
 800613c:	2b22      	cmp	r3, #34	; 0x22
 800613e:	f040 80ae 	bne.w	800629e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
 8006146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800614a:	d117      	bne.n	800617c <UART_Receive_IT+0x50>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	691b      	ldr	r3, [r3, #16]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d113      	bne.n	800617c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	b29b      	uxth	r3, r3
 8006166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616a:	b29a      	uxth	r2, r3
 800616c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006174:	1c9a      	adds	r2, r3, #2
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	629a      	str	r2, [r3, #40]	; 0x28
 800617a:	e026      	b.n	80061ca <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006182:	2300      	movs	r3, #0
 8006184:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	689b      	ldr	r3, [r3, #8]
 800618a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800618e:	d007      	beq.n	80061a0 <UART_Receive_IT+0x74>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	689b      	ldr	r3, [r3, #8]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <UART_Receive_IT+0x82>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	691b      	ldr	r3, [r3, #16]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d106      	bne.n	80061ae <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b2da      	uxtb	r2, r3
 80061a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	e008      	b.n	80061c0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061be:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c4:	1c5a      	adds	r2, r3, #1
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29b      	uxth	r3, r3
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	4619      	mov	r1, r3
 80061d8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d15d      	bne.n	800629a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	68da      	ldr	r2, [r3, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0220 	bic.w	r2, r2, #32
 80061ec:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	68da      	ldr	r2, [r3, #12]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061fc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	695a      	ldr	r2, [r3, #20]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 0201 	bic.w	r2, r2, #1
 800620c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2220      	movs	r2, #32
 8006212:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006220:	2b01      	cmp	r3, #1
 8006222:	d135      	bne.n	8006290 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	330c      	adds	r3, #12
 8006230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	e853 3f00 	ldrex	r3, [r3]
 8006238:	613b      	str	r3, [r7, #16]
   return(result);
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	f023 0310 	bic.w	r3, r3, #16
 8006240:	627b      	str	r3, [r7, #36]	; 0x24
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	330c      	adds	r3, #12
 8006248:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800624a:	623a      	str	r2, [r7, #32]
 800624c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800624e:	69f9      	ldr	r1, [r7, #28]
 8006250:	6a3a      	ldr	r2, [r7, #32]
 8006252:	e841 2300 	strex	r3, r2, [r1]
 8006256:	61bb      	str	r3, [r7, #24]
   return(result);
 8006258:	69bb      	ldr	r3, [r7, #24]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d1e5      	bne.n	800622a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f003 0310 	and.w	r3, r3, #16
 8006268:	2b10      	cmp	r3, #16
 800626a:	d10a      	bne.n	8006282 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800626c:	2300      	movs	r3, #0
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	60fb      	str	r3, [r7, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006286:	4619      	mov	r1, r3
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff fdd1 	bl	8005e30 <HAL_UARTEx_RxEventCallback>
 800628e:	e002      	b.n	8006296 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fc facb 	bl	800282c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	e002      	b.n	80062a0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	e000      	b.n	80062a0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800629e:	2302      	movs	r3, #2
  }
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3730      	adds	r7, #48	; 0x30
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062ac:	b0c0      	sub	sp, #256	; 0x100
 80062ae:	af00      	add	r7, sp, #0
 80062b0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	68d9      	ldr	r1, [r3, #12]
 80062c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	ea40 0301 	orr.w	r3, r0, r1
 80062d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062d6:	689a      	ldr	r2, [r3, #8]
 80062d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062dc:	691b      	ldr	r3, [r3, #16]
 80062de:	431a      	orrs	r2, r3
 80062e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062e4:	695b      	ldr	r3, [r3, #20]
 80062e6:	431a      	orrs	r2, r3
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	69db      	ldr	r3, [r3, #28]
 80062ee:	4313      	orrs	r3, r2
 80062f0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	68db      	ldr	r3, [r3, #12]
 80062fc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006300:	f021 010c 	bic.w	r1, r1, #12
 8006304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006308:	681a      	ldr	r2, [r3, #0]
 800630a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800630e:	430b      	orrs	r3, r1
 8006310:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800631e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006322:	6999      	ldr	r1, [r3, #24]
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	ea40 0301 	orr.w	r3, r0, r1
 800632e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4b8f      	ldr	r3, [pc, #572]	; (8006574 <UART_SetConfig+0x2cc>)
 8006338:	429a      	cmp	r2, r3
 800633a:	d005      	beq.n	8006348 <UART_SetConfig+0xa0>
 800633c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	4b8d      	ldr	r3, [pc, #564]	; (8006578 <UART_SetConfig+0x2d0>)
 8006344:	429a      	cmp	r2, r3
 8006346:	d104      	bne.n	8006352 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006348:	f7fd fcc4 	bl	8003cd4 <HAL_RCC_GetPCLK2Freq>
 800634c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006350:	e003      	b.n	800635a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006352:	f7fd fcab 	bl	8003cac <HAL_RCC_GetPCLK1Freq>
 8006356:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800635a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635e:	69db      	ldr	r3, [r3, #28]
 8006360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006364:	f040 810c 	bne.w	8006580 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006368:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800636c:	2200      	movs	r2, #0
 800636e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006372:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006376:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800637a:	4622      	mov	r2, r4
 800637c:	462b      	mov	r3, r5
 800637e:	1891      	adds	r1, r2, r2
 8006380:	65b9      	str	r1, [r7, #88]	; 0x58
 8006382:	415b      	adcs	r3, r3
 8006384:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006386:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800638a:	4621      	mov	r1, r4
 800638c:	eb12 0801 	adds.w	r8, r2, r1
 8006390:	4629      	mov	r1, r5
 8006392:	eb43 0901 	adc.w	r9, r3, r1
 8006396:	f04f 0200 	mov.w	r2, #0
 800639a:	f04f 0300 	mov.w	r3, #0
 800639e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063a2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063a6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063aa:	4690      	mov	r8, r2
 80063ac:	4699      	mov	r9, r3
 80063ae:	4623      	mov	r3, r4
 80063b0:	eb18 0303 	adds.w	r3, r8, r3
 80063b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063b8:	462b      	mov	r3, r5
 80063ba:	eb49 0303 	adc.w	r3, r9, r3
 80063be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	2200      	movs	r2, #0
 80063ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80063ce:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80063d2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80063d6:	460b      	mov	r3, r1
 80063d8:	18db      	adds	r3, r3, r3
 80063da:	653b      	str	r3, [r7, #80]	; 0x50
 80063dc:	4613      	mov	r3, r2
 80063de:	eb42 0303 	adc.w	r3, r2, r3
 80063e2:	657b      	str	r3, [r7, #84]	; 0x54
 80063e4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80063e8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80063ec:	f7fa fc6c 	bl	8000cc8 <__aeabi_uldivmod>
 80063f0:	4602      	mov	r2, r0
 80063f2:	460b      	mov	r3, r1
 80063f4:	4b61      	ldr	r3, [pc, #388]	; (800657c <UART_SetConfig+0x2d4>)
 80063f6:	fba3 2302 	umull	r2, r3, r3, r2
 80063fa:	095b      	lsrs	r3, r3, #5
 80063fc:	011c      	lsls	r4, r3, #4
 80063fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006402:	2200      	movs	r2, #0
 8006404:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006408:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800640c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006410:	4642      	mov	r2, r8
 8006412:	464b      	mov	r3, r9
 8006414:	1891      	adds	r1, r2, r2
 8006416:	64b9      	str	r1, [r7, #72]	; 0x48
 8006418:	415b      	adcs	r3, r3
 800641a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800641c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006420:	4641      	mov	r1, r8
 8006422:	eb12 0a01 	adds.w	sl, r2, r1
 8006426:	4649      	mov	r1, r9
 8006428:	eb43 0b01 	adc.w	fp, r3, r1
 800642c:	f04f 0200 	mov.w	r2, #0
 8006430:	f04f 0300 	mov.w	r3, #0
 8006434:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006438:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800643c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006440:	4692      	mov	sl, r2
 8006442:	469b      	mov	fp, r3
 8006444:	4643      	mov	r3, r8
 8006446:	eb1a 0303 	adds.w	r3, sl, r3
 800644a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800644e:	464b      	mov	r3, r9
 8006450:	eb4b 0303 	adc.w	r3, fp, r3
 8006454:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800645c:	685b      	ldr	r3, [r3, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006464:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006468:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800646c:	460b      	mov	r3, r1
 800646e:	18db      	adds	r3, r3, r3
 8006470:	643b      	str	r3, [r7, #64]	; 0x40
 8006472:	4613      	mov	r3, r2
 8006474:	eb42 0303 	adc.w	r3, r2, r3
 8006478:	647b      	str	r3, [r7, #68]	; 0x44
 800647a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800647e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006482:	f7fa fc21 	bl	8000cc8 <__aeabi_uldivmod>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4611      	mov	r1, r2
 800648c:	4b3b      	ldr	r3, [pc, #236]	; (800657c <UART_SetConfig+0x2d4>)
 800648e:	fba3 2301 	umull	r2, r3, r3, r1
 8006492:	095b      	lsrs	r3, r3, #5
 8006494:	2264      	movs	r2, #100	; 0x64
 8006496:	fb02 f303 	mul.w	r3, r2, r3
 800649a:	1acb      	subs	r3, r1, r3
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064a2:	4b36      	ldr	r3, [pc, #216]	; (800657c <UART_SetConfig+0x2d4>)
 80064a4:	fba3 2302 	umull	r2, r3, r3, r2
 80064a8:	095b      	lsrs	r3, r3, #5
 80064aa:	005b      	lsls	r3, r3, #1
 80064ac:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064b0:	441c      	add	r4, r3
 80064b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064b6:	2200      	movs	r2, #0
 80064b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064bc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064c0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064c4:	4642      	mov	r2, r8
 80064c6:	464b      	mov	r3, r9
 80064c8:	1891      	adds	r1, r2, r2
 80064ca:	63b9      	str	r1, [r7, #56]	; 0x38
 80064cc:	415b      	adcs	r3, r3
 80064ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064d0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064d4:	4641      	mov	r1, r8
 80064d6:	1851      	adds	r1, r2, r1
 80064d8:	6339      	str	r1, [r7, #48]	; 0x30
 80064da:	4649      	mov	r1, r9
 80064dc:	414b      	adcs	r3, r1
 80064de:	637b      	str	r3, [r7, #52]	; 0x34
 80064e0:	f04f 0200 	mov.w	r2, #0
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80064ec:	4659      	mov	r1, fp
 80064ee:	00cb      	lsls	r3, r1, #3
 80064f0:	4651      	mov	r1, sl
 80064f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064f6:	4651      	mov	r1, sl
 80064f8:	00ca      	lsls	r2, r1, #3
 80064fa:	4610      	mov	r0, r2
 80064fc:	4619      	mov	r1, r3
 80064fe:	4603      	mov	r3, r0
 8006500:	4642      	mov	r2, r8
 8006502:	189b      	adds	r3, r3, r2
 8006504:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006508:	464b      	mov	r3, r9
 800650a:	460a      	mov	r2, r1
 800650c:	eb42 0303 	adc.w	r3, r2, r3
 8006510:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2200      	movs	r2, #0
 800651c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006520:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006524:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006528:	460b      	mov	r3, r1
 800652a:	18db      	adds	r3, r3, r3
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
 800652e:	4613      	mov	r3, r2
 8006530:	eb42 0303 	adc.w	r3, r2, r3
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006536:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800653a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800653e:	f7fa fbc3 	bl	8000cc8 <__aeabi_uldivmod>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4b0d      	ldr	r3, [pc, #52]	; (800657c <UART_SetConfig+0x2d4>)
 8006548:	fba3 1302 	umull	r1, r3, r3, r2
 800654c:	095b      	lsrs	r3, r3, #5
 800654e:	2164      	movs	r1, #100	; 0x64
 8006550:	fb01 f303 	mul.w	r3, r1, r3
 8006554:	1ad3      	subs	r3, r2, r3
 8006556:	00db      	lsls	r3, r3, #3
 8006558:	3332      	adds	r3, #50	; 0x32
 800655a:	4a08      	ldr	r2, [pc, #32]	; (800657c <UART_SetConfig+0x2d4>)
 800655c:	fba2 2303 	umull	r2, r3, r2, r3
 8006560:	095b      	lsrs	r3, r3, #5
 8006562:	f003 0207 	and.w	r2, r3, #7
 8006566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	4422      	add	r2, r4
 800656e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006570:	e106      	b.n	8006780 <UART_SetConfig+0x4d8>
 8006572:	bf00      	nop
 8006574:	40011000 	.word	0x40011000
 8006578:	40011400 	.word	0x40011400
 800657c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006580:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006584:	2200      	movs	r2, #0
 8006586:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800658a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800658e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006592:	4642      	mov	r2, r8
 8006594:	464b      	mov	r3, r9
 8006596:	1891      	adds	r1, r2, r2
 8006598:	6239      	str	r1, [r7, #32]
 800659a:	415b      	adcs	r3, r3
 800659c:	627b      	str	r3, [r7, #36]	; 0x24
 800659e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065a2:	4641      	mov	r1, r8
 80065a4:	1854      	adds	r4, r2, r1
 80065a6:	4649      	mov	r1, r9
 80065a8:	eb43 0501 	adc.w	r5, r3, r1
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	00eb      	lsls	r3, r5, #3
 80065b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ba:	00e2      	lsls	r2, r4, #3
 80065bc:	4614      	mov	r4, r2
 80065be:	461d      	mov	r5, r3
 80065c0:	4643      	mov	r3, r8
 80065c2:	18e3      	adds	r3, r4, r3
 80065c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065c8:	464b      	mov	r3, r9
 80065ca:	eb45 0303 	adc.w	r3, r5, r3
 80065ce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80065d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80065d6:	685b      	ldr	r3, [r3, #4]
 80065d8:	2200      	movs	r2, #0
 80065da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80065de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80065e2:	f04f 0200 	mov.w	r2, #0
 80065e6:	f04f 0300 	mov.w	r3, #0
 80065ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80065ee:	4629      	mov	r1, r5
 80065f0:	008b      	lsls	r3, r1, #2
 80065f2:	4621      	mov	r1, r4
 80065f4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065f8:	4621      	mov	r1, r4
 80065fa:	008a      	lsls	r2, r1, #2
 80065fc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006600:	f7fa fb62 	bl	8000cc8 <__aeabi_uldivmod>
 8006604:	4602      	mov	r2, r0
 8006606:	460b      	mov	r3, r1
 8006608:	4b60      	ldr	r3, [pc, #384]	; (800678c <UART_SetConfig+0x4e4>)
 800660a:	fba3 2302 	umull	r2, r3, r3, r2
 800660e:	095b      	lsrs	r3, r3, #5
 8006610:	011c      	lsls	r4, r3, #4
 8006612:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006616:	2200      	movs	r2, #0
 8006618:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800661c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006620:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006624:	4642      	mov	r2, r8
 8006626:	464b      	mov	r3, r9
 8006628:	1891      	adds	r1, r2, r2
 800662a:	61b9      	str	r1, [r7, #24]
 800662c:	415b      	adcs	r3, r3
 800662e:	61fb      	str	r3, [r7, #28]
 8006630:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006634:	4641      	mov	r1, r8
 8006636:	1851      	adds	r1, r2, r1
 8006638:	6139      	str	r1, [r7, #16]
 800663a:	4649      	mov	r1, r9
 800663c:	414b      	adcs	r3, r1
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	f04f 0200 	mov.w	r2, #0
 8006644:	f04f 0300 	mov.w	r3, #0
 8006648:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800664c:	4659      	mov	r1, fp
 800664e:	00cb      	lsls	r3, r1, #3
 8006650:	4651      	mov	r1, sl
 8006652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006656:	4651      	mov	r1, sl
 8006658:	00ca      	lsls	r2, r1, #3
 800665a:	4610      	mov	r0, r2
 800665c:	4619      	mov	r1, r3
 800665e:	4603      	mov	r3, r0
 8006660:	4642      	mov	r2, r8
 8006662:	189b      	adds	r3, r3, r2
 8006664:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006668:	464b      	mov	r3, r9
 800666a:	460a      	mov	r2, r1
 800666c:	eb42 0303 	adc.w	r3, r2, r3
 8006670:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	67bb      	str	r3, [r7, #120]	; 0x78
 800667e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006680:	f04f 0200 	mov.w	r2, #0
 8006684:	f04f 0300 	mov.w	r3, #0
 8006688:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800668c:	4649      	mov	r1, r9
 800668e:	008b      	lsls	r3, r1, #2
 8006690:	4641      	mov	r1, r8
 8006692:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006696:	4641      	mov	r1, r8
 8006698:	008a      	lsls	r2, r1, #2
 800669a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800669e:	f7fa fb13 	bl	8000cc8 <__aeabi_uldivmod>
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4611      	mov	r1, r2
 80066a8:	4b38      	ldr	r3, [pc, #224]	; (800678c <UART_SetConfig+0x4e4>)
 80066aa:	fba3 2301 	umull	r2, r3, r3, r1
 80066ae:	095b      	lsrs	r3, r3, #5
 80066b0:	2264      	movs	r2, #100	; 0x64
 80066b2:	fb02 f303 	mul.w	r3, r2, r3
 80066b6:	1acb      	subs	r3, r1, r3
 80066b8:	011b      	lsls	r3, r3, #4
 80066ba:	3332      	adds	r3, #50	; 0x32
 80066bc:	4a33      	ldr	r2, [pc, #204]	; (800678c <UART_SetConfig+0x4e4>)
 80066be:	fba2 2303 	umull	r2, r3, r2, r3
 80066c2:	095b      	lsrs	r3, r3, #5
 80066c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066c8:	441c      	add	r4, r3
 80066ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80066ce:	2200      	movs	r2, #0
 80066d0:	673b      	str	r3, [r7, #112]	; 0x70
 80066d2:	677a      	str	r2, [r7, #116]	; 0x74
 80066d4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80066d8:	4642      	mov	r2, r8
 80066da:	464b      	mov	r3, r9
 80066dc:	1891      	adds	r1, r2, r2
 80066de:	60b9      	str	r1, [r7, #8]
 80066e0:	415b      	adcs	r3, r3
 80066e2:	60fb      	str	r3, [r7, #12]
 80066e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066e8:	4641      	mov	r1, r8
 80066ea:	1851      	adds	r1, r2, r1
 80066ec:	6039      	str	r1, [r7, #0]
 80066ee:	4649      	mov	r1, r9
 80066f0:	414b      	adcs	r3, r1
 80066f2:	607b      	str	r3, [r7, #4]
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006700:	4659      	mov	r1, fp
 8006702:	00cb      	lsls	r3, r1, #3
 8006704:	4651      	mov	r1, sl
 8006706:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800670a:	4651      	mov	r1, sl
 800670c:	00ca      	lsls	r2, r1, #3
 800670e:	4610      	mov	r0, r2
 8006710:	4619      	mov	r1, r3
 8006712:	4603      	mov	r3, r0
 8006714:	4642      	mov	r2, r8
 8006716:	189b      	adds	r3, r3, r2
 8006718:	66bb      	str	r3, [r7, #104]	; 0x68
 800671a:	464b      	mov	r3, r9
 800671c:	460a      	mov	r2, r1
 800671e:	eb42 0303 	adc.w	r3, r2, r3
 8006722:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	663b      	str	r3, [r7, #96]	; 0x60
 800672e:	667a      	str	r2, [r7, #100]	; 0x64
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	f04f 0300 	mov.w	r3, #0
 8006738:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800673c:	4649      	mov	r1, r9
 800673e:	008b      	lsls	r3, r1, #2
 8006740:	4641      	mov	r1, r8
 8006742:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006746:	4641      	mov	r1, r8
 8006748:	008a      	lsls	r2, r1, #2
 800674a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800674e:	f7fa fabb 	bl	8000cc8 <__aeabi_uldivmod>
 8006752:	4602      	mov	r2, r0
 8006754:	460b      	mov	r3, r1
 8006756:	4b0d      	ldr	r3, [pc, #52]	; (800678c <UART_SetConfig+0x4e4>)
 8006758:	fba3 1302 	umull	r1, r3, r3, r2
 800675c:	095b      	lsrs	r3, r3, #5
 800675e:	2164      	movs	r1, #100	; 0x64
 8006760:	fb01 f303 	mul.w	r3, r1, r3
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	011b      	lsls	r3, r3, #4
 8006768:	3332      	adds	r3, #50	; 0x32
 800676a:	4a08      	ldr	r2, [pc, #32]	; (800678c <UART_SetConfig+0x4e4>)
 800676c:	fba2 2303 	umull	r2, r3, r2, r3
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	f003 020f 	and.w	r2, r3, #15
 8006776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	4422      	add	r2, r4
 800677e:	609a      	str	r2, [r3, #8]
}
 8006780:	bf00      	nop
 8006782:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006786:	46bd      	mov	sp, r7
 8006788:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800678c:	51eb851f 	.word	0x51eb851f

08006790 <atof>:
 8006790:	2100      	movs	r1, #0
 8006792:	f000 be13 	b.w	80073bc <strtod>

08006796 <sulp>:
 8006796:	b570      	push	{r4, r5, r6, lr}
 8006798:	4604      	mov	r4, r0
 800679a:	460d      	mov	r5, r1
 800679c:	ec45 4b10 	vmov	d0, r4, r5
 80067a0:	4616      	mov	r6, r2
 80067a2:	f003 fcd9 	bl	800a158 <__ulp>
 80067a6:	ec51 0b10 	vmov	r0, r1, d0
 80067aa:	b17e      	cbz	r6, 80067cc <sulp+0x36>
 80067ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	dd09      	ble.n	80067cc <sulp+0x36>
 80067b8:	051b      	lsls	r3, r3, #20
 80067ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80067be:	2400      	movs	r4, #0
 80067c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80067c4:	4622      	mov	r2, r4
 80067c6:	462b      	mov	r3, r5
 80067c8:	f7f9 ff36 	bl	8000638 <__aeabi_dmul>
 80067cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080067d0 <_strtod_l>:
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	ed2d 8b02 	vpush	{d8}
 80067d8:	b09b      	sub	sp, #108	; 0x6c
 80067da:	4604      	mov	r4, r0
 80067dc:	9213      	str	r2, [sp, #76]	; 0x4c
 80067de:	2200      	movs	r2, #0
 80067e0:	9216      	str	r2, [sp, #88]	; 0x58
 80067e2:	460d      	mov	r5, r1
 80067e4:	f04f 0800 	mov.w	r8, #0
 80067e8:	f04f 0900 	mov.w	r9, #0
 80067ec:	460a      	mov	r2, r1
 80067ee:	9215      	str	r2, [sp, #84]	; 0x54
 80067f0:	7811      	ldrb	r1, [r2, #0]
 80067f2:	292b      	cmp	r1, #43	; 0x2b
 80067f4:	d04c      	beq.n	8006890 <_strtod_l+0xc0>
 80067f6:	d83a      	bhi.n	800686e <_strtod_l+0x9e>
 80067f8:	290d      	cmp	r1, #13
 80067fa:	d834      	bhi.n	8006866 <_strtod_l+0x96>
 80067fc:	2908      	cmp	r1, #8
 80067fe:	d834      	bhi.n	800686a <_strtod_l+0x9a>
 8006800:	2900      	cmp	r1, #0
 8006802:	d03d      	beq.n	8006880 <_strtod_l+0xb0>
 8006804:	2200      	movs	r2, #0
 8006806:	920a      	str	r2, [sp, #40]	; 0x28
 8006808:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800680a:	7832      	ldrb	r2, [r6, #0]
 800680c:	2a30      	cmp	r2, #48	; 0x30
 800680e:	f040 80b4 	bne.w	800697a <_strtod_l+0x1aa>
 8006812:	7872      	ldrb	r2, [r6, #1]
 8006814:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8006818:	2a58      	cmp	r2, #88	; 0x58
 800681a:	d170      	bne.n	80068fe <_strtod_l+0x12e>
 800681c:	9302      	str	r3, [sp, #8]
 800681e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006820:	9301      	str	r3, [sp, #4]
 8006822:	ab16      	add	r3, sp, #88	; 0x58
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	4a8e      	ldr	r2, [pc, #568]	; (8006a60 <_strtod_l+0x290>)
 8006828:	ab17      	add	r3, sp, #92	; 0x5c
 800682a:	a915      	add	r1, sp, #84	; 0x54
 800682c:	4620      	mov	r0, r4
 800682e:	f002 fd71 	bl	8009314 <__gethex>
 8006832:	f010 070f 	ands.w	r7, r0, #15
 8006836:	4605      	mov	r5, r0
 8006838:	d005      	beq.n	8006846 <_strtod_l+0x76>
 800683a:	2f06      	cmp	r7, #6
 800683c:	d12a      	bne.n	8006894 <_strtod_l+0xc4>
 800683e:	3601      	adds	r6, #1
 8006840:	2300      	movs	r3, #0
 8006842:	9615      	str	r6, [sp, #84]	; 0x54
 8006844:	930a      	str	r3, [sp, #40]	; 0x28
 8006846:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006848:	2b00      	cmp	r3, #0
 800684a:	f040 857f 	bne.w	800734c <_strtod_l+0xb7c>
 800684e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006850:	b1db      	cbz	r3, 800688a <_strtod_l+0xba>
 8006852:	4642      	mov	r2, r8
 8006854:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006858:	ec43 2b10 	vmov	d0, r2, r3
 800685c:	b01b      	add	sp, #108	; 0x6c
 800685e:	ecbd 8b02 	vpop	{d8}
 8006862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006866:	2920      	cmp	r1, #32
 8006868:	d1cc      	bne.n	8006804 <_strtod_l+0x34>
 800686a:	3201      	adds	r2, #1
 800686c:	e7bf      	b.n	80067ee <_strtod_l+0x1e>
 800686e:	292d      	cmp	r1, #45	; 0x2d
 8006870:	d1c8      	bne.n	8006804 <_strtod_l+0x34>
 8006872:	2101      	movs	r1, #1
 8006874:	910a      	str	r1, [sp, #40]	; 0x28
 8006876:	1c51      	adds	r1, r2, #1
 8006878:	9115      	str	r1, [sp, #84]	; 0x54
 800687a:	7852      	ldrb	r2, [r2, #1]
 800687c:	2a00      	cmp	r2, #0
 800687e:	d1c3      	bne.n	8006808 <_strtod_l+0x38>
 8006880:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006882:	9515      	str	r5, [sp, #84]	; 0x54
 8006884:	2b00      	cmp	r3, #0
 8006886:	f040 855f 	bne.w	8007348 <_strtod_l+0xb78>
 800688a:	4642      	mov	r2, r8
 800688c:	464b      	mov	r3, r9
 800688e:	e7e3      	b.n	8006858 <_strtod_l+0x88>
 8006890:	2100      	movs	r1, #0
 8006892:	e7ef      	b.n	8006874 <_strtod_l+0xa4>
 8006894:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006896:	b13a      	cbz	r2, 80068a8 <_strtod_l+0xd8>
 8006898:	2135      	movs	r1, #53	; 0x35
 800689a:	a818      	add	r0, sp, #96	; 0x60
 800689c:	f003 fd59 	bl	800a352 <__copybits>
 80068a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80068a2:	4620      	mov	r0, r4
 80068a4:	f003 f92c 	bl	8009b00 <_Bfree>
 80068a8:	3f01      	subs	r7, #1
 80068aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80068ac:	2f04      	cmp	r7, #4
 80068ae:	d806      	bhi.n	80068be <_strtod_l+0xee>
 80068b0:	e8df f007 	tbb	[pc, r7]
 80068b4:	201d0314 	.word	0x201d0314
 80068b8:	14          	.byte	0x14
 80068b9:	00          	.byte	0x00
 80068ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 80068be:	05e9      	lsls	r1, r5, #23
 80068c0:	bf48      	it	mi
 80068c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 80068c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80068ca:	0d1b      	lsrs	r3, r3, #20
 80068cc:	051b      	lsls	r3, r3, #20
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d1b9      	bne.n	8006846 <_strtod_l+0x76>
 80068d2:	f001 fda3 	bl	800841c <__errno>
 80068d6:	2322      	movs	r3, #34	; 0x22
 80068d8:	6003      	str	r3, [r0, #0]
 80068da:	e7b4      	b.n	8006846 <_strtod_l+0x76>
 80068dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 80068e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80068e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80068e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80068ec:	e7e7      	b.n	80068be <_strtod_l+0xee>
 80068ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006a68 <_strtod_l+0x298>
 80068f2:	e7e4      	b.n	80068be <_strtod_l+0xee>
 80068f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80068f8:	f04f 38ff 	mov.w	r8, #4294967295
 80068fc:	e7df      	b.n	80068be <_strtod_l+0xee>
 80068fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006900:	1c5a      	adds	r2, r3, #1
 8006902:	9215      	str	r2, [sp, #84]	; 0x54
 8006904:	785b      	ldrb	r3, [r3, #1]
 8006906:	2b30      	cmp	r3, #48	; 0x30
 8006908:	d0f9      	beq.n	80068fe <_strtod_l+0x12e>
 800690a:	2b00      	cmp	r3, #0
 800690c:	d09b      	beq.n	8006846 <_strtod_l+0x76>
 800690e:	2301      	movs	r3, #1
 8006910:	f04f 0a00 	mov.w	sl, #0
 8006914:	9304      	str	r3, [sp, #16]
 8006916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006918:	930b      	str	r3, [sp, #44]	; 0x2c
 800691a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800691e:	46d3      	mov	fp, sl
 8006920:	220a      	movs	r2, #10
 8006922:	9815      	ldr	r0, [sp, #84]	; 0x54
 8006924:	7806      	ldrb	r6, [r0, #0]
 8006926:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800692a:	b2d9      	uxtb	r1, r3
 800692c:	2909      	cmp	r1, #9
 800692e:	d926      	bls.n	800697e <_strtod_l+0x1ae>
 8006930:	494c      	ldr	r1, [pc, #304]	; (8006a64 <_strtod_l+0x294>)
 8006932:	2201      	movs	r2, #1
 8006934:	f001 fd03 	bl	800833e <strncmp>
 8006938:	2800      	cmp	r0, #0
 800693a:	d030      	beq.n	800699e <_strtod_l+0x1ce>
 800693c:	2000      	movs	r0, #0
 800693e:	4632      	mov	r2, r6
 8006940:	9005      	str	r0, [sp, #20]
 8006942:	465e      	mov	r6, fp
 8006944:	4603      	mov	r3, r0
 8006946:	2a65      	cmp	r2, #101	; 0x65
 8006948:	d001      	beq.n	800694e <_strtod_l+0x17e>
 800694a:	2a45      	cmp	r2, #69	; 0x45
 800694c:	d113      	bne.n	8006976 <_strtod_l+0x1a6>
 800694e:	b91e      	cbnz	r6, 8006958 <_strtod_l+0x188>
 8006950:	9a04      	ldr	r2, [sp, #16]
 8006952:	4302      	orrs	r2, r0
 8006954:	d094      	beq.n	8006880 <_strtod_l+0xb0>
 8006956:	2600      	movs	r6, #0
 8006958:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800695a:	1c6a      	adds	r2, r5, #1
 800695c:	9215      	str	r2, [sp, #84]	; 0x54
 800695e:	786a      	ldrb	r2, [r5, #1]
 8006960:	2a2b      	cmp	r2, #43	; 0x2b
 8006962:	d074      	beq.n	8006a4e <_strtod_l+0x27e>
 8006964:	2a2d      	cmp	r2, #45	; 0x2d
 8006966:	d078      	beq.n	8006a5a <_strtod_l+0x28a>
 8006968:	f04f 0c00 	mov.w	ip, #0
 800696c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8006970:	2909      	cmp	r1, #9
 8006972:	d97f      	bls.n	8006a74 <_strtod_l+0x2a4>
 8006974:	9515      	str	r5, [sp, #84]	; 0x54
 8006976:	2700      	movs	r7, #0
 8006978:	e09e      	b.n	8006ab8 <_strtod_l+0x2e8>
 800697a:	2300      	movs	r3, #0
 800697c:	e7c8      	b.n	8006910 <_strtod_l+0x140>
 800697e:	f1bb 0f08 	cmp.w	fp, #8
 8006982:	bfd8      	it	le
 8006984:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006986:	f100 0001 	add.w	r0, r0, #1
 800698a:	bfda      	itte	le
 800698c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006990:	9309      	strle	r3, [sp, #36]	; 0x24
 8006992:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8006996:	f10b 0b01 	add.w	fp, fp, #1
 800699a:	9015      	str	r0, [sp, #84]	; 0x54
 800699c:	e7c1      	b.n	8006922 <_strtod_l+0x152>
 800699e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	9215      	str	r2, [sp, #84]	; 0x54
 80069a4:	785a      	ldrb	r2, [r3, #1]
 80069a6:	f1bb 0f00 	cmp.w	fp, #0
 80069aa:	d037      	beq.n	8006a1c <_strtod_l+0x24c>
 80069ac:	9005      	str	r0, [sp, #20]
 80069ae:	465e      	mov	r6, fp
 80069b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80069b4:	2b09      	cmp	r3, #9
 80069b6:	d912      	bls.n	80069de <_strtod_l+0x20e>
 80069b8:	2301      	movs	r3, #1
 80069ba:	e7c4      	b.n	8006946 <_strtod_l+0x176>
 80069bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	9215      	str	r2, [sp, #84]	; 0x54
 80069c2:	785a      	ldrb	r2, [r3, #1]
 80069c4:	3001      	adds	r0, #1
 80069c6:	2a30      	cmp	r2, #48	; 0x30
 80069c8:	d0f8      	beq.n	80069bc <_strtod_l+0x1ec>
 80069ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80069ce:	2b08      	cmp	r3, #8
 80069d0:	f200 84c1 	bhi.w	8007356 <_strtod_l+0xb86>
 80069d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80069d6:	9005      	str	r0, [sp, #20]
 80069d8:	2000      	movs	r0, #0
 80069da:	930b      	str	r3, [sp, #44]	; 0x2c
 80069dc:	4606      	mov	r6, r0
 80069de:	3a30      	subs	r2, #48	; 0x30
 80069e0:	f100 0301 	add.w	r3, r0, #1
 80069e4:	d014      	beq.n	8006a10 <_strtod_l+0x240>
 80069e6:	9905      	ldr	r1, [sp, #20]
 80069e8:	4419      	add	r1, r3
 80069ea:	9105      	str	r1, [sp, #20]
 80069ec:	4633      	mov	r3, r6
 80069ee:	eb00 0c06 	add.w	ip, r0, r6
 80069f2:	210a      	movs	r1, #10
 80069f4:	4563      	cmp	r3, ip
 80069f6:	d113      	bne.n	8006a20 <_strtod_l+0x250>
 80069f8:	1833      	adds	r3, r6, r0
 80069fa:	2b08      	cmp	r3, #8
 80069fc:	f106 0601 	add.w	r6, r6, #1
 8006a00:	4406      	add	r6, r0
 8006a02:	dc1a      	bgt.n	8006a3a <_strtod_l+0x26a>
 8006a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a06:	230a      	movs	r3, #10
 8006a08:	fb03 2301 	mla	r3, r3, r1, r2
 8006a0c:	9309      	str	r3, [sp, #36]	; 0x24
 8006a0e:	2300      	movs	r3, #0
 8006a10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a12:	1c51      	adds	r1, r2, #1
 8006a14:	9115      	str	r1, [sp, #84]	; 0x54
 8006a16:	7852      	ldrb	r2, [r2, #1]
 8006a18:	4618      	mov	r0, r3
 8006a1a:	e7c9      	b.n	80069b0 <_strtod_l+0x1e0>
 8006a1c:	4658      	mov	r0, fp
 8006a1e:	e7d2      	b.n	80069c6 <_strtod_l+0x1f6>
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	f103 0301 	add.w	r3, r3, #1
 8006a26:	dc03      	bgt.n	8006a30 <_strtod_l+0x260>
 8006a28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8006a2a:	434f      	muls	r7, r1
 8006a2c:	9709      	str	r7, [sp, #36]	; 0x24
 8006a2e:	e7e1      	b.n	80069f4 <_strtod_l+0x224>
 8006a30:	2b10      	cmp	r3, #16
 8006a32:	bfd8      	it	le
 8006a34:	fb01 fa0a 	mulle.w	sl, r1, sl
 8006a38:	e7dc      	b.n	80069f4 <_strtod_l+0x224>
 8006a3a:	2e10      	cmp	r6, #16
 8006a3c:	bfdc      	itt	le
 8006a3e:	230a      	movle	r3, #10
 8006a40:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8006a44:	e7e3      	b.n	8006a0e <_strtod_l+0x23e>
 8006a46:	2300      	movs	r3, #0
 8006a48:	9305      	str	r3, [sp, #20]
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e780      	b.n	8006950 <_strtod_l+0x180>
 8006a4e:	f04f 0c00 	mov.w	ip, #0
 8006a52:	1caa      	adds	r2, r5, #2
 8006a54:	9215      	str	r2, [sp, #84]	; 0x54
 8006a56:	78aa      	ldrb	r2, [r5, #2]
 8006a58:	e788      	b.n	800696c <_strtod_l+0x19c>
 8006a5a:	f04f 0c01 	mov.w	ip, #1
 8006a5e:	e7f8      	b.n	8006a52 <_strtod_l+0x282>
 8006a60:	0800c34c 	.word	0x0800c34c
 8006a64:	0800c348 	.word	0x0800c348
 8006a68:	7ff00000 	.word	0x7ff00000
 8006a6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a6e:	1c51      	adds	r1, r2, #1
 8006a70:	9115      	str	r1, [sp, #84]	; 0x54
 8006a72:	7852      	ldrb	r2, [r2, #1]
 8006a74:	2a30      	cmp	r2, #48	; 0x30
 8006a76:	d0f9      	beq.n	8006a6c <_strtod_l+0x29c>
 8006a78:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8006a7c:	2908      	cmp	r1, #8
 8006a7e:	f63f af7a 	bhi.w	8006976 <_strtod_l+0x1a6>
 8006a82:	3a30      	subs	r2, #48	; 0x30
 8006a84:	9208      	str	r2, [sp, #32]
 8006a86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a88:	920c      	str	r2, [sp, #48]	; 0x30
 8006a8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8006a8c:	1c57      	adds	r7, r2, #1
 8006a8e:	9715      	str	r7, [sp, #84]	; 0x54
 8006a90:	7852      	ldrb	r2, [r2, #1]
 8006a92:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8006a96:	f1be 0f09 	cmp.w	lr, #9
 8006a9a:	d938      	bls.n	8006b0e <_strtod_l+0x33e>
 8006a9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006a9e:	1a7f      	subs	r7, r7, r1
 8006aa0:	2f08      	cmp	r7, #8
 8006aa2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8006aa6:	dc03      	bgt.n	8006ab0 <_strtod_l+0x2e0>
 8006aa8:	9908      	ldr	r1, [sp, #32]
 8006aaa:	428f      	cmp	r7, r1
 8006aac:	bfa8      	it	ge
 8006aae:	460f      	movge	r7, r1
 8006ab0:	f1bc 0f00 	cmp.w	ip, #0
 8006ab4:	d000      	beq.n	8006ab8 <_strtod_l+0x2e8>
 8006ab6:	427f      	negs	r7, r7
 8006ab8:	2e00      	cmp	r6, #0
 8006aba:	d14f      	bne.n	8006b5c <_strtod_l+0x38c>
 8006abc:	9904      	ldr	r1, [sp, #16]
 8006abe:	4301      	orrs	r1, r0
 8006ac0:	f47f aec1 	bne.w	8006846 <_strtod_l+0x76>
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f47f aedb 	bne.w	8006880 <_strtod_l+0xb0>
 8006aca:	2a69      	cmp	r2, #105	; 0x69
 8006acc:	d029      	beq.n	8006b22 <_strtod_l+0x352>
 8006ace:	dc26      	bgt.n	8006b1e <_strtod_l+0x34e>
 8006ad0:	2a49      	cmp	r2, #73	; 0x49
 8006ad2:	d026      	beq.n	8006b22 <_strtod_l+0x352>
 8006ad4:	2a4e      	cmp	r2, #78	; 0x4e
 8006ad6:	f47f aed3 	bne.w	8006880 <_strtod_l+0xb0>
 8006ada:	499b      	ldr	r1, [pc, #620]	; (8006d48 <_strtod_l+0x578>)
 8006adc:	a815      	add	r0, sp, #84	; 0x54
 8006ade:	f002 fe59 	bl	8009794 <__match>
 8006ae2:	2800      	cmp	r0, #0
 8006ae4:	f43f aecc 	beq.w	8006880 <_strtod_l+0xb0>
 8006ae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b28      	cmp	r3, #40	; 0x28
 8006aee:	d12f      	bne.n	8006b50 <_strtod_l+0x380>
 8006af0:	4996      	ldr	r1, [pc, #600]	; (8006d4c <_strtod_l+0x57c>)
 8006af2:	aa18      	add	r2, sp, #96	; 0x60
 8006af4:	a815      	add	r0, sp, #84	; 0x54
 8006af6:	f002 fe61 	bl	80097bc <__hexnan>
 8006afa:	2805      	cmp	r0, #5
 8006afc:	d128      	bne.n	8006b50 <_strtod_l+0x380>
 8006afe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006b00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8006b04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8006b08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8006b0c:	e69b      	b.n	8006846 <_strtod_l+0x76>
 8006b0e:	9f08      	ldr	r7, [sp, #32]
 8006b10:	210a      	movs	r1, #10
 8006b12:	fb01 2107 	mla	r1, r1, r7, r2
 8006b16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8006b1a:	9208      	str	r2, [sp, #32]
 8006b1c:	e7b5      	b.n	8006a8a <_strtod_l+0x2ba>
 8006b1e:	2a6e      	cmp	r2, #110	; 0x6e
 8006b20:	e7d9      	b.n	8006ad6 <_strtod_l+0x306>
 8006b22:	498b      	ldr	r1, [pc, #556]	; (8006d50 <_strtod_l+0x580>)
 8006b24:	a815      	add	r0, sp, #84	; 0x54
 8006b26:	f002 fe35 	bl	8009794 <__match>
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	f43f aea8 	beq.w	8006880 <_strtod_l+0xb0>
 8006b30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b32:	4988      	ldr	r1, [pc, #544]	; (8006d54 <_strtod_l+0x584>)
 8006b34:	3b01      	subs	r3, #1
 8006b36:	a815      	add	r0, sp, #84	; 0x54
 8006b38:	9315      	str	r3, [sp, #84]	; 0x54
 8006b3a:	f002 fe2b 	bl	8009794 <__match>
 8006b3e:	b910      	cbnz	r0, 8006b46 <_strtod_l+0x376>
 8006b40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006b42:	3301      	adds	r3, #1
 8006b44:	9315      	str	r3, [sp, #84]	; 0x54
 8006b46:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8006d64 <_strtod_l+0x594>
 8006b4a:	f04f 0800 	mov.w	r8, #0
 8006b4e:	e67a      	b.n	8006846 <_strtod_l+0x76>
 8006b50:	4881      	ldr	r0, [pc, #516]	; (8006d58 <_strtod_l+0x588>)
 8006b52:	f001 fca1 	bl	8008498 <nan>
 8006b56:	ec59 8b10 	vmov	r8, r9, d0
 8006b5a:	e674      	b.n	8006846 <_strtod_l+0x76>
 8006b5c:	9b05      	ldr	r3, [sp, #20]
 8006b5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b60:	1afb      	subs	r3, r7, r3
 8006b62:	f1bb 0f00 	cmp.w	fp, #0
 8006b66:	bf08      	it	eq
 8006b68:	46b3      	moveq	fp, r6
 8006b6a:	2e10      	cmp	r6, #16
 8006b6c:	9308      	str	r3, [sp, #32]
 8006b6e:	4635      	mov	r5, r6
 8006b70:	bfa8      	it	ge
 8006b72:	2510      	movge	r5, #16
 8006b74:	f7f9 fce6 	bl	8000544 <__aeabi_ui2d>
 8006b78:	2e09      	cmp	r6, #9
 8006b7a:	4680      	mov	r8, r0
 8006b7c:	4689      	mov	r9, r1
 8006b7e:	dd13      	ble.n	8006ba8 <_strtod_l+0x3d8>
 8006b80:	4b76      	ldr	r3, [pc, #472]	; (8006d5c <_strtod_l+0x58c>)
 8006b82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8006b86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006b8a:	f7f9 fd55 	bl	8000638 <__aeabi_dmul>
 8006b8e:	4680      	mov	r8, r0
 8006b90:	4650      	mov	r0, sl
 8006b92:	4689      	mov	r9, r1
 8006b94:	f7f9 fcd6 	bl	8000544 <__aeabi_ui2d>
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	4640      	mov	r0, r8
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	f7f9 fb94 	bl	80002cc <__adddf3>
 8006ba4:	4680      	mov	r8, r0
 8006ba6:	4689      	mov	r9, r1
 8006ba8:	2e0f      	cmp	r6, #15
 8006baa:	dc38      	bgt.n	8006c1e <_strtod_l+0x44e>
 8006bac:	9b08      	ldr	r3, [sp, #32]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	f43f ae49 	beq.w	8006846 <_strtod_l+0x76>
 8006bb4:	dd24      	ble.n	8006c00 <_strtod_l+0x430>
 8006bb6:	2b16      	cmp	r3, #22
 8006bb8:	dc0b      	bgt.n	8006bd2 <_strtod_l+0x402>
 8006bba:	4968      	ldr	r1, [pc, #416]	; (8006d5c <_strtod_l+0x58c>)
 8006bbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006bc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bc4:	4642      	mov	r2, r8
 8006bc6:	464b      	mov	r3, r9
 8006bc8:	f7f9 fd36 	bl	8000638 <__aeabi_dmul>
 8006bcc:	4680      	mov	r8, r0
 8006bce:	4689      	mov	r9, r1
 8006bd0:	e639      	b.n	8006846 <_strtod_l+0x76>
 8006bd2:	9a08      	ldr	r2, [sp, #32]
 8006bd4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8006bd8:	4293      	cmp	r3, r2
 8006bda:	db20      	blt.n	8006c1e <_strtod_l+0x44e>
 8006bdc:	4c5f      	ldr	r4, [pc, #380]	; (8006d5c <_strtod_l+0x58c>)
 8006bde:	f1c6 060f 	rsb	r6, r6, #15
 8006be2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8006be6:	4642      	mov	r2, r8
 8006be8:	464b      	mov	r3, r9
 8006bea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bee:	f7f9 fd23 	bl	8000638 <__aeabi_dmul>
 8006bf2:	9b08      	ldr	r3, [sp, #32]
 8006bf4:	1b9e      	subs	r6, r3, r6
 8006bf6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8006bfa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006bfe:	e7e3      	b.n	8006bc8 <_strtod_l+0x3f8>
 8006c00:	9b08      	ldr	r3, [sp, #32]
 8006c02:	3316      	adds	r3, #22
 8006c04:	db0b      	blt.n	8006c1e <_strtod_l+0x44e>
 8006c06:	9b05      	ldr	r3, [sp, #20]
 8006c08:	1bdf      	subs	r7, r3, r7
 8006c0a:	4b54      	ldr	r3, [pc, #336]	; (8006d5c <_strtod_l+0x58c>)
 8006c0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006c10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c14:	4640      	mov	r0, r8
 8006c16:	4649      	mov	r1, r9
 8006c18:	f7f9 fe38 	bl	800088c <__aeabi_ddiv>
 8006c1c:	e7d6      	b.n	8006bcc <_strtod_l+0x3fc>
 8006c1e:	9b08      	ldr	r3, [sp, #32]
 8006c20:	1b75      	subs	r5, r6, r5
 8006c22:	441d      	add	r5, r3
 8006c24:	2d00      	cmp	r5, #0
 8006c26:	dd70      	ble.n	8006d0a <_strtod_l+0x53a>
 8006c28:	f015 030f 	ands.w	r3, r5, #15
 8006c2c:	d00a      	beq.n	8006c44 <_strtod_l+0x474>
 8006c2e:	494b      	ldr	r1, [pc, #300]	; (8006d5c <_strtod_l+0x58c>)
 8006c30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006c34:	4642      	mov	r2, r8
 8006c36:	464b      	mov	r3, r9
 8006c38:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c3c:	f7f9 fcfc 	bl	8000638 <__aeabi_dmul>
 8006c40:	4680      	mov	r8, r0
 8006c42:	4689      	mov	r9, r1
 8006c44:	f035 050f 	bics.w	r5, r5, #15
 8006c48:	d04d      	beq.n	8006ce6 <_strtod_l+0x516>
 8006c4a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8006c4e:	dd22      	ble.n	8006c96 <_strtod_l+0x4c6>
 8006c50:	2500      	movs	r5, #0
 8006c52:	46ab      	mov	fp, r5
 8006c54:	9509      	str	r5, [sp, #36]	; 0x24
 8006c56:	9505      	str	r5, [sp, #20]
 8006c58:	2322      	movs	r3, #34	; 0x22
 8006c5a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8006d64 <_strtod_l+0x594>
 8006c5e:	6023      	str	r3, [r4, #0]
 8006c60:	f04f 0800 	mov.w	r8, #0
 8006c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f43f aded 	beq.w	8006846 <_strtod_l+0x76>
 8006c6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006c6e:	4620      	mov	r0, r4
 8006c70:	f002 ff46 	bl	8009b00 <_Bfree>
 8006c74:	9905      	ldr	r1, [sp, #20]
 8006c76:	4620      	mov	r0, r4
 8006c78:	f002 ff42 	bl	8009b00 <_Bfree>
 8006c7c:	4659      	mov	r1, fp
 8006c7e:	4620      	mov	r0, r4
 8006c80:	f002 ff3e 	bl	8009b00 <_Bfree>
 8006c84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006c86:	4620      	mov	r0, r4
 8006c88:	f002 ff3a 	bl	8009b00 <_Bfree>
 8006c8c:	4629      	mov	r1, r5
 8006c8e:	4620      	mov	r0, r4
 8006c90:	f002 ff36 	bl	8009b00 <_Bfree>
 8006c94:	e5d7      	b.n	8006846 <_strtod_l+0x76>
 8006c96:	4b32      	ldr	r3, [pc, #200]	; (8006d60 <_strtod_l+0x590>)
 8006c98:	9304      	str	r3, [sp, #16]
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	112d      	asrs	r5, r5, #4
 8006c9e:	4640      	mov	r0, r8
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	469a      	mov	sl, r3
 8006ca4:	2d01      	cmp	r5, #1
 8006ca6:	dc21      	bgt.n	8006cec <_strtod_l+0x51c>
 8006ca8:	b10b      	cbz	r3, 8006cae <_strtod_l+0x4de>
 8006caa:	4680      	mov	r8, r0
 8006cac:	4689      	mov	r9, r1
 8006cae:	492c      	ldr	r1, [pc, #176]	; (8006d60 <_strtod_l+0x590>)
 8006cb0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8006cb4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cc0:	f7f9 fcba 	bl	8000638 <__aeabi_dmul>
 8006cc4:	4b27      	ldr	r3, [pc, #156]	; (8006d64 <_strtod_l+0x594>)
 8006cc6:	460a      	mov	r2, r1
 8006cc8:	400b      	ands	r3, r1
 8006cca:	4927      	ldr	r1, [pc, #156]	; (8006d68 <_strtod_l+0x598>)
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	4680      	mov	r8, r0
 8006cd0:	d8be      	bhi.n	8006c50 <_strtod_l+0x480>
 8006cd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006cd6:	428b      	cmp	r3, r1
 8006cd8:	bf86      	itte	hi
 8006cda:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8006d6c <_strtod_l+0x59c>
 8006cde:	f04f 38ff 	movhi.w	r8, #4294967295
 8006ce2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	9304      	str	r3, [sp, #16]
 8006cea:	e07b      	b.n	8006de4 <_strtod_l+0x614>
 8006cec:	07ea      	lsls	r2, r5, #31
 8006cee:	d505      	bpl.n	8006cfc <_strtod_l+0x52c>
 8006cf0:	9b04      	ldr	r3, [sp, #16]
 8006cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf6:	f7f9 fc9f 	bl	8000638 <__aeabi_dmul>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	9a04      	ldr	r2, [sp, #16]
 8006cfe:	3208      	adds	r2, #8
 8006d00:	f10a 0a01 	add.w	sl, sl, #1
 8006d04:	106d      	asrs	r5, r5, #1
 8006d06:	9204      	str	r2, [sp, #16]
 8006d08:	e7cc      	b.n	8006ca4 <_strtod_l+0x4d4>
 8006d0a:	d0ec      	beq.n	8006ce6 <_strtod_l+0x516>
 8006d0c:	426d      	negs	r5, r5
 8006d0e:	f015 020f 	ands.w	r2, r5, #15
 8006d12:	d00a      	beq.n	8006d2a <_strtod_l+0x55a>
 8006d14:	4b11      	ldr	r3, [pc, #68]	; (8006d5c <_strtod_l+0x58c>)
 8006d16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d22:	f7f9 fdb3 	bl	800088c <__aeabi_ddiv>
 8006d26:	4680      	mov	r8, r0
 8006d28:	4689      	mov	r9, r1
 8006d2a:	112d      	asrs	r5, r5, #4
 8006d2c:	d0db      	beq.n	8006ce6 <_strtod_l+0x516>
 8006d2e:	2d1f      	cmp	r5, #31
 8006d30:	dd1e      	ble.n	8006d70 <_strtod_l+0x5a0>
 8006d32:	2500      	movs	r5, #0
 8006d34:	46ab      	mov	fp, r5
 8006d36:	9509      	str	r5, [sp, #36]	; 0x24
 8006d38:	9505      	str	r5, [sp, #20]
 8006d3a:	2322      	movs	r3, #34	; 0x22
 8006d3c:	f04f 0800 	mov.w	r8, #0
 8006d40:	f04f 0900 	mov.w	r9, #0
 8006d44:	6023      	str	r3, [r4, #0]
 8006d46:	e78d      	b.n	8006c64 <_strtod_l+0x494>
 8006d48:	0800c3ad 	.word	0x0800c3ad
 8006d4c:	0800c360 	.word	0x0800c360
 8006d50:	0800c3a5 	.word	0x0800c3a5
 8006d54:	0800c3e4 	.word	0x0800c3e4
 8006d58:	0800c771 	.word	0x0800c771
 8006d5c:	0800c550 	.word	0x0800c550
 8006d60:	0800c528 	.word	0x0800c528
 8006d64:	7ff00000 	.word	0x7ff00000
 8006d68:	7ca00000 	.word	0x7ca00000
 8006d6c:	7fefffff 	.word	0x7fefffff
 8006d70:	f015 0310 	ands.w	r3, r5, #16
 8006d74:	bf18      	it	ne
 8006d76:	236a      	movne	r3, #106	; 0x6a
 8006d78:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800711c <_strtod_l+0x94c>
 8006d7c:	9304      	str	r3, [sp, #16]
 8006d7e:	4640      	mov	r0, r8
 8006d80:	4649      	mov	r1, r9
 8006d82:	2300      	movs	r3, #0
 8006d84:	07ea      	lsls	r2, r5, #31
 8006d86:	d504      	bpl.n	8006d92 <_strtod_l+0x5c2>
 8006d88:	e9da 2300 	ldrd	r2, r3, [sl]
 8006d8c:	f7f9 fc54 	bl	8000638 <__aeabi_dmul>
 8006d90:	2301      	movs	r3, #1
 8006d92:	106d      	asrs	r5, r5, #1
 8006d94:	f10a 0a08 	add.w	sl, sl, #8
 8006d98:	d1f4      	bne.n	8006d84 <_strtod_l+0x5b4>
 8006d9a:	b10b      	cbz	r3, 8006da0 <_strtod_l+0x5d0>
 8006d9c:	4680      	mov	r8, r0
 8006d9e:	4689      	mov	r9, r1
 8006da0:	9b04      	ldr	r3, [sp, #16]
 8006da2:	b1bb      	cbz	r3, 8006dd4 <_strtod_l+0x604>
 8006da4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8006da8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	4649      	mov	r1, r9
 8006db0:	dd10      	ble.n	8006dd4 <_strtod_l+0x604>
 8006db2:	2b1f      	cmp	r3, #31
 8006db4:	f340 811e 	ble.w	8006ff4 <_strtod_l+0x824>
 8006db8:	2b34      	cmp	r3, #52	; 0x34
 8006dba:	bfde      	ittt	le
 8006dbc:	f04f 33ff 	movle.w	r3, #4294967295
 8006dc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8006dc4:	4093      	lslle	r3, r2
 8006dc6:	f04f 0800 	mov.w	r8, #0
 8006dca:	bfcc      	ite	gt
 8006dcc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8006dd0:	ea03 0901 	andle.w	r9, r3, r1
 8006dd4:	2200      	movs	r2, #0
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	4640      	mov	r0, r8
 8006dda:	4649      	mov	r1, r9
 8006ddc:	f7f9 fe94 	bl	8000b08 <__aeabi_dcmpeq>
 8006de0:	2800      	cmp	r0, #0
 8006de2:	d1a6      	bne.n	8006d32 <_strtod_l+0x562>
 8006de4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006dea:	4633      	mov	r3, r6
 8006dec:	465a      	mov	r2, fp
 8006dee:	4620      	mov	r0, r4
 8006df0:	f002 feee 	bl	8009bd0 <__s2b>
 8006df4:	9009      	str	r0, [sp, #36]	; 0x24
 8006df6:	2800      	cmp	r0, #0
 8006df8:	f43f af2a 	beq.w	8006c50 <_strtod_l+0x480>
 8006dfc:	9a08      	ldr	r2, [sp, #32]
 8006dfe:	9b05      	ldr	r3, [sp, #20]
 8006e00:	2a00      	cmp	r2, #0
 8006e02:	eba3 0307 	sub.w	r3, r3, r7
 8006e06:	bfa8      	it	ge
 8006e08:	2300      	movge	r3, #0
 8006e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8006e0c:	2500      	movs	r5, #0
 8006e0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e12:	9312      	str	r3, [sp, #72]	; 0x48
 8006e14:	46ab      	mov	fp, r5
 8006e16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e18:	4620      	mov	r0, r4
 8006e1a:	6859      	ldr	r1, [r3, #4]
 8006e1c:	f002 fe30 	bl	8009a80 <_Balloc>
 8006e20:	9005      	str	r0, [sp, #20]
 8006e22:	2800      	cmp	r0, #0
 8006e24:	f43f af18 	beq.w	8006c58 <_strtod_l+0x488>
 8006e28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e2a:	691a      	ldr	r2, [r3, #16]
 8006e2c:	3202      	adds	r2, #2
 8006e2e:	f103 010c 	add.w	r1, r3, #12
 8006e32:	0092      	lsls	r2, r2, #2
 8006e34:	300c      	adds	r0, #12
 8006e36:	f001 fb1e 	bl	8008476 <memcpy>
 8006e3a:	ec49 8b10 	vmov	d0, r8, r9
 8006e3e:	aa18      	add	r2, sp, #96	; 0x60
 8006e40:	a917      	add	r1, sp, #92	; 0x5c
 8006e42:	4620      	mov	r0, r4
 8006e44:	f003 f9f8 	bl	800a238 <__d2b>
 8006e48:	ec49 8b18 	vmov	d8, r8, r9
 8006e4c:	9016      	str	r0, [sp, #88]	; 0x58
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	f43f af02 	beq.w	8006c58 <_strtod_l+0x488>
 8006e54:	2101      	movs	r1, #1
 8006e56:	4620      	mov	r0, r4
 8006e58:	f002 ff52 	bl	8009d00 <__i2b>
 8006e5c:	4683      	mov	fp, r0
 8006e5e:	2800      	cmp	r0, #0
 8006e60:	f43f aefa 	beq.w	8006c58 <_strtod_l+0x488>
 8006e64:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006e66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006e68:	2e00      	cmp	r6, #0
 8006e6a:	bfab      	itete	ge
 8006e6c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8006e6e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8006e70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006e72:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8006e76:	bfac      	ite	ge
 8006e78:	eb06 0a03 	addge.w	sl, r6, r3
 8006e7c:	1b9f      	sublt	r7, r3, r6
 8006e7e:	9b04      	ldr	r3, [sp, #16]
 8006e80:	1af6      	subs	r6, r6, r3
 8006e82:	4416      	add	r6, r2
 8006e84:	4ba0      	ldr	r3, [pc, #640]	; (8007108 <_strtod_l+0x938>)
 8006e86:	3e01      	subs	r6, #1
 8006e88:	429e      	cmp	r6, r3
 8006e8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006e8e:	f280 80c4 	bge.w	800701a <_strtod_l+0x84a>
 8006e92:	1b9b      	subs	r3, r3, r6
 8006e94:	2b1f      	cmp	r3, #31
 8006e96:	eba2 0203 	sub.w	r2, r2, r3
 8006e9a:	f04f 0101 	mov.w	r1, #1
 8006e9e:	f300 80b0 	bgt.w	8007002 <_strtod_l+0x832>
 8006ea2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea6:	930e      	str	r3, [sp, #56]	; 0x38
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	930d      	str	r3, [sp, #52]	; 0x34
 8006eac:	eb0a 0602 	add.w	r6, sl, r2
 8006eb0:	9b04      	ldr	r3, [sp, #16]
 8006eb2:	45b2      	cmp	sl, r6
 8006eb4:	4417      	add	r7, r2
 8006eb6:	441f      	add	r7, r3
 8006eb8:	4653      	mov	r3, sl
 8006eba:	bfa8      	it	ge
 8006ebc:	4633      	movge	r3, r6
 8006ebe:	42bb      	cmp	r3, r7
 8006ec0:	bfa8      	it	ge
 8006ec2:	463b      	movge	r3, r7
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfc2      	ittt	gt
 8006ec8:	1af6      	subgt	r6, r6, r3
 8006eca:	1aff      	subgt	r7, r7, r3
 8006ecc:	ebaa 0a03 	subgt.w	sl, sl, r3
 8006ed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	dd17      	ble.n	8006f06 <_strtod_l+0x736>
 8006ed6:	4659      	mov	r1, fp
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4620      	mov	r0, r4
 8006edc:	f002 ffd0 	bl	8009e80 <__pow5mult>
 8006ee0:	4683      	mov	fp, r0
 8006ee2:	2800      	cmp	r0, #0
 8006ee4:	f43f aeb8 	beq.w	8006c58 <_strtod_l+0x488>
 8006ee8:	4601      	mov	r1, r0
 8006eea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8006eec:	4620      	mov	r0, r4
 8006eee:	f002 ff1d 	bl	8009d2c <__multiply>
 8006ef2:	900b      	str	r0, [sp, #44]	; 0x2c
 8006ef4:	2800      	cmp	r0, #0
 8006ef6:	f43f aeaf 	beq.w	8006c58 <_strtod_l+0x488>
 8006efa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006efc:	4620      	mov	r0, r4
 8006efe:	f002 fdff 	bl	8009b00 <_Bfree>
 8006f02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f04:	9316      	str	r3, [sp, #88]	; 0x58
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	f300 808c 	bgt.w	8007024 <_strtod_l+0x854>
 8006f0c:	9b08      	ldr	r3, [sp, #32]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	dd08      	ble.n	8006f24 <_strtod_l+0x754>
 8006f12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f14:	9905      	ldr	r1, [sp, #20]
 8006f16:	4620      	mov	r0, r4
 8006f18:	f002 ffb2 	bl	8009e80 <__pow5mult>
 8006f1c:	9005      	str	r0, [sp, #20]
 8006f1e:	2800      	cmp	r0, #0
 8006f20:	f43f ae9a 	beq.w	8006c58 <_strtod_l+0x488>
 8006f24:	2f00      	cmp	r7, #0
 8006f26:	dd08      	ble.n	8006f3a <_strtod_l+0x76a>
 8006f28:	9905      	ldr	r1, [sp, #20]
 8006f2a:	463a      	mov	r2, r7
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f003 f801 	bl	8009f34 <__lshift>
 8006f32:	9005      	str	r0, [sp, #20]
 8006f34:	2800      	cmp	r0, #0
 8006f36:	f43f ae8f 	beq.w	8006c58 <_strtod_l+0x488>
 8006f3a:	f1ba 0f00 	cmp.w	sl, #0
 8006f3e:	dd08      	ble.n	8006f52 <_strtod_l+0x782>
 8006f40:	4659      	mov	r1, fp
 8006f42:	4652      	mov	r2, sl
 8006f44:	4620      	mov	r0, r4
 8006f46:	f002 fff5 	bl	8009f34 <__lshift>
 8006f4a:	4683      	mov	fp, r0
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	f43f ae83 	beq.w	8006c58 <_strtod_l+0x488>
 8006f52:	9a05      	ldr	r2, [sp, #20]
 8006f54:	9916      	ldr	r1, [sp, #88]	; 0x58
 8006f56:	4620      	mov	r0, r4
 8006f58:	f003 f874 	bl	800a044 <__mdiff>
 8006f5c:	4605      	mov	r5, r0
 8006f5e:	2800      	cmp	r0, #0
 8006f60:	f43f ae7a 	beq.w	8006c58 <_strtod_l+0x488>
 8006f64:	68c3      	ldr	r3, [r0, #12]
 8006f66:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f68:	2300      	movs	r3, #0
 8006f6a:	60c3      	str	r3, [r0, #12]
 8006f6c:	4659      	mov	r1, fp
 8006f6e:	f003 f84d 	bl	800a00c <__mcmp>
 8006f72:	2800      	cmp	r0, #0
 8006f74:	da60      	bge.n	8007038 <_strtod_l+0x868>
 8006f76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f78:	ea53 0308 	orrs.w	r3, r3, r8
 8006f7c:	f040 8084 	bne.w	8007088 <_strtod_l+0x8b8>
 8006f80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d17f      	bne.n	8007088 <_strtod_l+0x8b8>
 8006f88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006f8c:	0d1b      	lsrs	r3, r3, #20
 8006f8e:	051b      	lsls	r3, r3, #20
 8006f90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006f94:	d978      	bls.n	8007088 <_strtod_l+0x8b8>
 8006f96:	696b      	ldr	r3, [r5, #20]
 8006f98:	b913      	cbnz	r3, 8006fa0 <_strtod_l+0x7d0>
 8006f9a:	692b      	ldr	r3, [r5, #16]
 8006f9c:	2b01      	cmp	r3, #1
 8006f9e:	dd73      	ble.n	8007088 <_strtod_l+0x8b8>
 8006fa0:	4629      	mov	r1, r5
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	4620      	mov	r0, r4
 8006fa6:	f002 ffc5 	bl	8009f34 <__lshift>
 8006faa:	4659      	mov	r1, fp
 8006fac:	4605      	mov	r5, r0
 8006fae:	f003 f82d 	bl	800a00c <__mcmp>
 8006fb2:	2800      	cmp	r0, #0
 8006fb4:	dd68      	ble.n	8007088 <_strtod_l+0x8b8>
 8006fb6:	9904      	ldr	r1, [sp, #16]
 8006fb8:	4a54      	ldr	r2, [pc, #336]	; (800710c <_strtod_l+0x93c>)
 8006fba:	464b      	mov	r3, r9
 8006fbc:	2900      	cmp	r1, #0
 8006fbe:	f000 8084 	beq.w	80070ca <_strtod_l+0x8fa>
 8006fc2:	ea02 0109 	and.w	r1, r2, r9
 8006fc6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006fca:	dc7e      	bgt.n	80070ca <_strtod_l+0x8fa>
 8006fcc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006fd0:	f77f aeb3 	ble.w	8006d3a <_strtod_l+0x56a>
 8006fd4:	4b4e      	ldr	r3, [pc, #312]	; (8007110 <_strtod_l+0x940>)
 8006fd6:	4640      	mov	r0, r8
 8006fd8:	4649      	mov	r1, r9
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f7f9 fb2c 	bl	8000638 <__aeabi_dmul>
 8006fe0:	4b4a      	ldr	r3, [pc, #296]	; (800710c <_strtod_l+0x93c>)
 8006fe2:	400b      	ands	r3, r1
 8006fe4:	4680      	mov	r8, r0
 8006fe6:	4689      	mov	r9, r1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f47f ae3f 	bne.w	8006c6c <_strtod_l+0x49c>
 8006fee:	2322      	movs	r3, #34	; 0x22
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	e63b      	b.n	8006c6c <_strtod_l+0x49c>
 8006ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ffc:	ea03 0808 	and.w	r8, r3, r8
 8007000:	e6e8      	b.n	8006dd4 <_strtod_l+0x604>
 8007002:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8007006:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800700a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800700e:	36e2      	adds	r6, #226	; 0xe2
 8007010:	fa01 f306 	lsl.w	r3, r1, r6
 8007014:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8007018:	e748      	b.n	8006eac <_strtod_l+0x6dc>
 800701a:	2100      	movs	r1, #0
 800701c:	2301      	movs	r3, #1
 800701e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8007022:	e743      	b.n	8006eac <_strtod_l+0x6dc>
 8007024:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007026:	4632      	mov	r2, r6
 8007028:	4620      	mov	r0, r4
 800702a:	f002 ff83 	bl	8009f34 <__lshift>
 800702e:	9016      	str	r0, [sp, #88]	; 0x58
 8007030:	2800      	cmp	r0, #0
 8007032:	f47f af6b 	bne.w	8006f0c <_strtod_l+0x73c>
 8007036:	e60f      	b.n	8006c58 <_strtod_l+0x488>
 8007038:	46ca      	mov	sl, r9
 800703a:	d171      	bne.n	8007120 <_strtod_l+0x950>
 800703c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800703e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007042:	b352      	cbz	r2, 800709a <_strtod_l+0x8ca>
 8007044:	4a33      	ldr	r2, [pc, #204]	; (8007114 <_strtod_l+0x944>)
 8007046:	4293      	cmp	r3, r2
 8007048:	d12a      	bne.n	80070a0 <_strtod_l+0x8d0>
 800704a:	9b04      	ldr	r3, [sp, #16]
 800704c:	4641      	mov	r1, r8
 800704e:	b1fb      	cbz	r3, 8007090 <_strtod_l+0x8c0>
 8007050:	4b2e      	ldr	r3, [pc, #184]	; (800710c <_strtod_l+0x93c>)
 8007052:	ea09 0303 	and.w	r3, r9, r3
 8007056:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800705a:	f04f 32ff 	mov.w	r2, #4294967295
 800705e:	d81a      	bhi.n	8007096 <_strtod_l+0x8c6>
 8007060:	0d1b      	lsrs	r3, r3, #20
 8007062:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007066:	fa02 f303 	lsl.w	r3, r2, r3
 800706a:	4299      	cmp	r1, r3
 800706c:	d118      	bne.n	80070a0 <_strtod_l+0x8d0>
 800706e:	4b2a      	ldr	r3, [pc, #168]	; (8007118 <_strtod_l+0x948>)
 8007070:	459a      	cmp	sl, r3
 8007072:	d102      	bne.n	800707a <_strtod_l+0x8aa>
 8007074:	3101      	adds	r1, #1
 8007076:	f43f adef 	beq.w	8006c58 <_strtod_l+0x488>
 800707a:	4b24      	ldr	r3, [pc, #144]	; (800710c <_strtod_l+0x93c>)
 800707c:	ea0a 0303 	and.w	r3, sl, r3
 8007080:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007084:	f04f 0800 	mov.w	r8, #0
 8007088:	9b04      	ldr	r3, [sp, #16]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d1a2      	bne.n	8006fd4 <_strtod_l+0x804>
 800708e:	e5ed      	b.n	8006c6c <_strtod_l+0x49c>
 8007090:	f04f 33ff 	mov.w	r3, #4294967295
 8007094:	e7e9      	b.n	800706a <_strtod_l+0x89a>
 8007096:	4613      	mov	r3, r2
 8007098:	e7e7      	b.n	800706a <_strtod_l+0x89a>
 800709a:	ea53 0308 	orrs.w	r3, r3, r8
 800709e:	d08a      	beq.n	8006fb6 <_strtod_l+0x7e6>
 80070a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80070a2:	b1e3      	cbz	r3, 80070de <_strtod_l+0x90e>
 80070a4:	ea13 0f0a 	tst.w	r3, sl
 80070a8:	d0ee      	beq.n	8007088 <_strtod_l+0x8b8>
 80070aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80070ac:	9a04      	ldr	r2, [sp, #16]
 80070ae:	4640      	mov	r0, r8
 80070b0:	4649      	mov	r1, r9
 80070b2:	b1c3      	cbz	r3, 80070e6 <_strtod_l+0x916>
 80070b4:	f7ff fb6f 	bl	8006796 <sulp>
 80070b8:	4602      	mov	r2, r0
 80070ba:	460b      	mov	r3, r1
 80070bc:	ec51 0b18 	vmov	r0, r1, d8
 80070c0:	f7f9 f904 	bl	80002cc <__adddf3>
 80070c4:	4680      	mov	r8, r0
 80070c6:	4689      	mov	r9, r1
 80070c8:	e7de      	b.n	8007088 <_strtod_l+0x8b8>
 80070ca:	4013      	ands	r3, r2
 80070cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80070d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 80070d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 80070d8:	f04f 38ff 	mov.w	r8, #4294967295
 80070dc:	e7d4      	b.n	8007088 <_strtod_l+0x8b8>
 80070de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80070e0:	ea13 0f08 	tst.w	r3, r8
 80070e4:	e7e0      	b.n	80070a8 <_strtod_l+0x8d8>
 80070e6:	f7ff fb56 	bl	8006796 <sulp>
 80070ea:	4602      	mov	r2, r0
 80070ec:	460b      	mov	r3, r1
 80070ee:	ec51 0b18 	vmov	r0, r1, d8
 80070f2:	f7f9 f8e9 	bl	80002c8 <__aeabi_dsub>
 80070f6:	2200      	movs	r2, #0
 80070f8:	2300      	movs	r3, #0
 80070fa:	4680      	mov	r8, r0
 80070fc:	4689      	mov	r9, r1
 80070fe:	f7f9 fd03 	bl	8000b08 <__aeabi_dcmpeq>
 8007102:	2800      	cmp	r0, #0
 8007104:	d0c0      	beq.n	8007088 <_strtod_l+0x8b8>
 8007106:	e618      	b.n	8006d3a <_strtod_l+0x56a>
 8007108:	fffffc02 	.word	0xfffffc02
 800710c:	7ff00000 	.word	0x7ff00000
 8007110:	39500000 	.word	0x39500000
 8007114:	000fffff 	.word	0x000fffff
 8007118:	7fefffff 	.word	0x7fefffff
 800711c:	0800c378 	.word	0x0800c378
 8007120:	4659      	mov	r1, fp
 8007122:	4628      	mov	r0, r5
 8007124:	f003 f8e2 	bl	800a2ec <__ratio>
 8007128:	ec57 6b10 	vmov	r6, r7, d0
 800712c:	ee10 0a10 	vmov	r0, s0
 8007130:	2200      	movs	r2, #0
 8007132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007136:	4639      	mov	r1, r7
 8007138:	f7f9 fcfa 	bl	8000b30 <__aeabi_dcmple>
 800713c:	2800      	cmp	r0, #0
 800713e:	d071      	beq.n	8007224 <_strtod_l+0xa54>
 8007140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007142:	2b00      	cmp	r3, #0
 8007144:	d17c      	bne.n	8007240 <_strtod_l+0xa70>
 8007146:	f1b8 0f00 	cmp.w	r8, #0
 800714a:	d15a      	bne.n	8007202 <_strtod_l+0xa32>
 800714c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007150:	2b00      	cmp	r3, #0
 8007152:	d15d      	bne.n	8007210 <_strtod_l+0xa40>
 8007154:	4b90      	ldr	r3, [pc, #576]	; (8007398 <_strtod_l+0xbc8>)
 8007156:	2200      	movs	r2, #0
 8007158:	4630      	mov	r0, r6
 800715a:	4639      	mov	r1, r7
 800715c:	f7f9 fcde 	bl	8000b1c <__aeabi_dcmplt>
 8007160:	2800      	cmp	r0, #0
 8007162:	d15c      	bne.n	800721e <_strtod_l+0xa4e>
 8007164:	4630      	mov	r0, r6
 8007166:	4639      	mov	r1, r7
 8007168:	4b8c      	ldr	r3, [pc, #560]	; (800739c <_strtod_l+0xbcc>)
 800716a:	2200      	movs	r2, #0
 800716c:	f7f9 fa64 	bl	8000638 <__aeabi_dmul>
 8007170:	4606      	mov	r6, r0
 8007172:	460f      	mov	r7, r1
 8007174:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007178:	9606      	str	r6, [sp, #24]
 800717a:	9307      	str	r3, [sp, #28]
 800717c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007180:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007184:	4b86      	ldr	r3, [pc, #536]	; (80073a0 <_strtod_l+0xbd0>)
 8007186:	ea0a 0303 	and.w	r3, sl, r3
 800718a:	930d      	str	r3, [sp, #52]	; 0x34
 800718c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800718e:	4b85      	ldr	r3, [pc, #532]	; (80073a4 <_strtod_l+0xbd4>)
 8007190:	429a      	cmp	r2, r3
 8007192:	f040 8090 	bne.w	80072b6 <_strtod_l+0xae6>
 8007196:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800719a:	ec49 8b10 	vmov	d0, r8, r9
 800719e:	f002 ffdb 	bl	800a158 <__ulp>
 80071a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071a6:	ec51 0b10 	vmov	r0, r1, d0
 80071aa:	f7f9 fa45 	bl	8000638 <__aeabi_dmul>
 80071ae:	4642      	mov	r2, r8
 80071b0:	464b      	mov	r3, r9
 80071b2:	f7f9 f88b 	bl	80002cc <__adddf3>
 80071b6:	460b      	mov	r3, r1
 80071b8:	4979      	ldr	r1, [pc, #484]	; (80073a0 <_strtod_l+0xbd0>)
 80071ba:	4a7b      	ldr	r2, [pc, #492]	; (80073a8 <_strtod_l+0xbd8>)
 80071bc:	4019      	ands	r1, r3
 80071be:	4291      	cmp	r1, r2
 80071c0:	4680      	mov	r8, r0
 80071c2:	d944      	bls.n	800724e <_strtod_l+0xa7e>
 80071c4:	ee18 2a90 	vmov	r2, s17
 80071c8:	4b78      	ldr	r3, [pc, #480]	; (80073ac <_strtod_l+0xbdc>)
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d104      	bne.n	80071d8 <_strtod_l+0xa08>
 80071ce:	ee18 3a10 	vmov	r3, s16
 80071d2:	3301      	adds	r3, #1
 80071d4:	f43f ad40 	beq.w	8006c58 <_strtod_l+0x488>
 80071d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 80073ac <_strtod_l+0xbdc>
 80071dc:	f04f 38ff 	mov.w	r8, #4294967295
 80071e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 80071e2:	4620      	mov	r0, r4
 80071e4:	f002 fc8c 	bl	8009b00 <_Bfree>
 80071e8:	9905      	ldr	r1, [sp, #20]
 80071ea:	4620      	mov	r0, r4
 80071ec:	f002 fc88 	bl	8009b00 <_Bfree>
 80071f0:	4659      	mov	r1, fp
 80071f2:	4620      	mov	r0, r4
 80071f4:	f002 fc84 	bl	8009b00 <_Bfree>
 80071f8:	4629      	mov	r1, r5
 80071fa:	4620      	mov	r0, r4
 80071fc:	f002 fc80 	bl	8009b00 <_Bfree>
 8007200:	e609      	b.n	8006e16 <_strtod_l+0x646>
 8007202:	f1b8 0f01 	cmp.w	r8, #1
 8007206:	d103      	bne.n	8007210 <_strtod_l+0xa40>
 8007208:	f1b9 0f00 	cmp.w	r9, #0
 800720c:	f43f ad95 	beq.w	8006d3a <_strtod_l+0x56a>
 8007210:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007368 <_strtod_l+0xb98>
 8007214:	4f60      	ldr	r7, [pc, #384]	; (8007398 <_strtod_l+0xbc8>)
 8007216:	ed8d 7b06 	vstr	d7, [sp, #24]
 800721a:	2600      	movs	r6, #0
 800721c:	e7ae      	b.n	800717c <_strtod_l+0x9ac>
 800721e:	4f5f      	ldr	r7, [pc, #380]	; (800739c <_strtod_l+0xbcc>)
 8007220:	2600      	movs	r6, #0
 8007222:	e7a7      	b.n	8007174 <_strtod_l+0x9a4>
 8007224:	4b5d      	ldr	r3, [pc, #372]	; (800739c <_strtod_l+0xbcc>)
 8007226:	4630      	mov	r0, r6
 8007228:	4639      	mov	r1, r7
 800722a:	2200      	movs	r2, #0
 800722c:	f7f9 fa04 	bl	8000638 <__aeabi_dmul>
 8007230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007232:	4606      	mov	r6, r0
 8007234:	460f      	mov	r7, r1
 8007236:	2b00      	cmp	r3, #0
 8007238:	d09c      	beq.n	8007174 <_strtod_l+0x9a4>
 800723a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800723e:	e79d      	b.n	800717c <_strtod_l+0x9ac>
 8007240:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007370 <_strtod_l+0xba0>
 8007244:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007248:	ec57 6b17 	vmov	r6, r7, d7
 800724c:	e796      	b.n	800717c <_strtod_l+0x9ac>
 800724e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007252:	9b04      	ldr	r3, [sp, #16]
 8007254:	46ca      	mov	sl, r9
 8007256:	2b00      	cmp	r3, #0
 8007258:	d1c2      	bne.n	80071e0 <_strtod_l+0xa10>
 800725a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800725e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007260:	0d1b      	lsrs	r3, r3, #20
 8007262:	051b      	lsls	r3, r3, #20
 8007264:	429a      	cmp	r2, r3
 8007266:	d1bb      	bne.n	80071e0 <_strtod_l+0xa10>
 8007268:	4630      	mov	r0, r6
 800726a:	4639      	mov	r1, r7
 800726c:	f7f9 fd44 	bl	8000cf8 <__aeabi_d2lz>
 8007270:	f7f9 f9b4 	bl	80005dc <__aeabi_l2d>
 8007274:	4602      	mov	r2, r0
 8007276:	460b      	mov	r3, r1
 8007278:	4630      	mov	r0, r6
 800727a:	4639      	mov	r1, r7
 800727c:	f7f9 f824 	bl	80002c8 <__aeabi_dsub>
 8007280:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007282:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007286:	ea43 0308 	orr.w	r3, r3, r8
 800728a:	4313      	orrs	r3, r2
 800728c:	4606      	mov	r6, r0
 800728e:	460f      	mov	r7, r1
 8007290:	d054      	beq.n	800733c <_strtod_l+0xb6c>
 8007292:	a339      	add	r3, pc, #228	; (adr r3, 8007378 <_strtod_l+0xba8>)
 8007294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007298:	f7f9 fc40 	bl	8000b1c <__aeabi_dcmplt>
 800729c:	2800      	cmp	r0, #0
 800729e:	f47f ace5 	bne.w	8006c6c <_strtod_l+0x49c>
 80072a2:	a337      	add	r3, pc, #220	; (adr r3, 8007380 <_strtod_l+0xbb0>)
 80072a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a8:	4630      	mov	r0, r6
 80072aa:	4639      	mov	r1, r7
 80072ac:	f7f9 fc54 	bl	8000b58 <__aeabi_dcmpgt>
 80072b0:	2800      	cmp	r0, #0
 80072b2:	d095      	beq.n	80071e0 <_strtod_l+0xa10>
 80072b4:	e4da      	b.n	8006c6c <_strtod_l+0x49c>
 80072b6:	9b04      	ldr	r3, [sp, #16]
 80072b8:	b333      	cbz	r3, 8007308 <_strtod_l+0xb38>
 80072ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80072c0:	d822      	bhi.n	8007308 <_strtod_l+0xb38>
 80072c2:	a331      	add	r3, pc, #196	; (adr r3, 8007388 <_strtod_l+0xbb8>)
 80072c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c8:	4630      	mov	r0, r6
 80072ca:	4639      	mov	r1, r7
 80072cc:	f7f9 fc30 	bl	8000b30 <__aeabi_dcmple>
 80072d0:	b1a0      	cbz	r0, 80072fc <_strtod_l+0xb2c>
 80072d2:	4639      	mov	r1, r7
 80072d4:	4630      	mov	r0, r6
 80072d6:	f7f9 fc87 	bl	8000be8 <__aeabi_d2uiz>
 80072da:	2801      	cmp	r0, #1
 80072dc:	bf38      	it	cc
 80072de:	2001      	movcc	r0, #1
 80072e0:	f7f9 f930 	bl	8000544 <__aeabi_ui2d>
 80072e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e6:	4606      	mov	r6, r0
 80072e8:	460f      	mov	r7, r1
 80072ea:	bb23      	cbnz	r3, 8007336 <_strtod_l+0xb66>
 80072ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80072f0:	9010      	str	r0, [sp, #64]	; 0x40
 80072f2:	9311      	str	r3, [sp, #68]	; 0x44
 80072f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80072f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80072fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007300:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007304:	1a9b      	subs	r3, r3, r2
 8007306:	930f      	str	r3, [sp, #60]	; 0x3c
 8007308:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800730c:	eeb0 0a48 	vmov.f32	s0, s16
 8007310:	eef0 0a68 	vmov.f32	s1, s17
 8007314:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007318:	f002 ff1e 	bl	800a158 <__ulp>
 800731c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007320:	ec53 2b10 	vmov	r2, r3, d0
 8007324:	f7f9 f988 	bl	8000638 <__aeabi_dmul>
 8007328:	ec53 2b18 	vmov	r2, r3, d8
 800732c:	f7f8 ffce 	bl	80002cc <__adddf3>
 8007330:	4680      	mov	r8, r0
 8007332:	4689      	mov	r9, r1
 8007334:	e78d      	b.n	8007252 <_strtod_l+0xa82>
 8007336:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800733a:	e7db      	b.n	80072f4 <_strtod_l+0xb24>
 800733c:	a314      	add	r3, pc, #80	; (adr r3, 8007390 <_strtod_l+0xbc0>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	f7f9 fbeb 	bl	8000b1c <__aeabi_dcmplt>
 8007346:	e7b3      	b.n	80072b0 <_strtod_l+0xae0>
 8007348:	2300      	movs	r3, #0
 800734a:	930a      	str	r3, [sp, #40]	; 0x28
 800734c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800734e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	f7ff ba7c 	b.w	800684e <_strtod_l+0x7e>
 8007356:	2a65      	cmp	r2, #101	; 0x65
 8007358:	f43f ab75 	beq.w	8006a46 <_strtod_l+0x276>
 800735c:	2a45      	cmp	r2, #69	; 0x45
 800735e:	f43f ab72 	beq.w	8006a46 <_strtod_l+0x276>
 8007362:	2301      	movs	r3, #1
 8007364:	f7ff bbaa 	b.w	8006abc <_strtod_l+0x2ec>
 8007368:	00000000 	.word	0x00000000
 800736c:	bff00000 	.word	0xbff00000
 8007370:	00000000 	.word	0x00000000
 8007374:	3ff00000 	.word	0x3ff00000
 8007378:	94a03595 	.word	0x94a03595
 800737c:	3fdfffff 	.word	0x3fdfffff
 8007380:	35afe535 	.word	0x35afe535
 8007384:	3fe00000 	.word	0x3fe00000
 8007388:	ffc00000 	.word	0xffc00000
 800738c:	41dfffff 	.word	0x41dfffff
 8007390:	94a03595 	.word	0x94a03595
 8007394:	3fcfffff 	.word	0x3fcfffff
 8007398:	3ff00000 	.word	0x3ff00000
 800739c:	3fe00000 	.word	0x3fe00000
 80073a0:	7ff00000 	.word	0x7ff00000
 80073a4:	7fe00000 	.word	0x7fe00000
 80073a8:	7c9fffff 	.word	0x7c9fffff
 80073ac:	7fefffff 	.word	0x7fefffff

080073b0 <_strtod_r>:
 80073b0:	4b01      	ldr	r3, [pc, #4]	; (80073b8 <_strtod_r+0x8>)
 80073b2:	f7ff ba0d 	b.w	80067d0 <_strtod_l>
 80073b6:	bf00      	nop
 80073b8:	20000050 	.word	0x20000050

080073bc <strtod>:
 80073bc:	460a      	mov	r2, r1
 80073be:	4601      	mov	r1, r0
 80073c0:	4802      	ldr	r0, [pc, #8]	; (80073cc <strtod+0x10>)
 80073c2:	4b03      	ldr	r3, [pc, #12]	; (80073d0 <strtod+0x14>)
 80073c4:	6800      	ldr	r0, [r0, #0]
 80073c6:	f7ff ba03 	b.w	80067d0 <_strtod_l>
 80073ca:	bf00      	nop
 80073cc:	20000208 	.word	0x20000208
 80073d0:	20000050 	.word	0x20000050

080073d4 <__cvt>:
 80073d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073d8:	ec55 4b10 	vmov	r4, r5, d0
 80073dc:	2d00      	cmp	r5, #0
 80073de:	460e      	mov	r6, r1
 80073e0:	4619      	mov	r1, r3
 80073e2:	462b      	mov	r3, r5
 80073e4:	bfbb      	ittet	lt
 80073e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80073ea:	461d      	movlt	r5, r3
 80073ec:	2300      	movge	r3, #0
 80073ee:	232d      	movlt	r3, #45	; 0x2d
 80073f0:	700b      	strb	r3, [r1, #0]
 80073f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80073f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80073f8:	4691      	mov	r9, r2
 80073fa:	f023 0820 	bic.w	r8, r3, #32
 80073fe:	bfbc      	itt	lt
 8007400:	4622      	movlt	r2, r4
 8007402:	4614      	movlt	r4, r2
 8007404:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007408:	d005      	beq.n	8007416 <__cvt+0x42>
 800740a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800740e:	d100      	bne.n	8007412 <__cvt+0x3e>
 8007410:	3601      	adds	r6, #1
 8007412:	2102      	movs	r1, #2
 8007414:	e000      	b.n	8007418 <__cvt+0x44>
 8007416:	2103      	movs	r1, #3
 8007418:	ab03      	add	r3, sp, #12
 800741a:	9301      	str	r3, [sp, #4]
 800741c:	ab02      	add	r3, sp, #8
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	ec45 4b10 	vmov	d0, r4, r5
 8007424:	4653      	mov	r3, sl
 8007426:	4632      	mov	r2, r6
 8007428:	f001 f8ce 	bl	80085c8 <_dtoa_r>
 800742c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007430:	4607      	mov	r7, r0
 8007432:	d102      	bne.n	800743a <__cvt+0x66>
 8007434:	f019 0f01 	tst.w	r9, #1
 8007438:	d022      	beq.n	8007480 <__cvt+0xac>
 800743a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800743e:	eb07 0906 	add.w	r9, r7, r6
 8007442:	d110      	bne.n	8007466 <__cvt+0x92>
 8007444:	783b      	ldrb	r3, [r7, #0]
 8007446:	2b30      	cmp	r3, #48	; 0x30
 8007448:	d10a      	bne.n	8007460 <__cvt+0x8c>
 800744a:	2200      	movs	r2, #0
 800744c:	2300      	movs	r3, #0
 800744e:	4620      	mov	r0, r4
 8007450:	4629      	mov	r1, r5
 8007452:	f7f9 fb59 	bl	8000b08 <__aeabi_dcmpeq>
 8007456:	b918      	cbnz	r0, 8007460 <__cvt+0x8c>
 8007458:	f1c6 0601 	rsb	r6, r6, #1
 800745c:	f8ca 6000 	str.w	r6, [sl]
 8007460:	f8da 3000 	ldr.w	r3, [sl]
 8007464:	4499      	add	r9, r3
 8007466:	2200      	movs	r2, #0
 8007468:	2300      	movs	r3, #0
 800746a:	4620      	mov	r0, r4
 800746c:	4629      	mov	r1, r5
 800746e:	f7f9 fb4b 	bl	8000b08 <__aeabi_dcmpeq>
 8007472:	b108      	cbz	r0, 8007478 <__cvt+0xa4>
 8007474:	f8cd 900c 	str.w	r9, [sp, #12]
 8007478:	2230      	movs	r2, #48	; 0x30
 800747a:	9b03      	ldr	r3, [sp, #12]
 800747c:	454b      	cmp	r3, r9
 800747e:	d307      	bcc.n	8007490 <__cvt+0xbc>
 8007480:	9b03      	ldr	r3, [sp, #12]
 8007482:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007484:	1bdb      	subs	r3, r3, r7
 8007486:	4638      	mov	r0, r7
 8007488:	6013      	str	r3, [r2, #0]
 800748a:	b004      	add	sp, #16
 800748c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007490:	1c59      	adds	r1, r3, #1
 8007492:	9103      	str	r1, [sp, #12]
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	e7f0      	b.n	800747a <__cvt+0xa6>

08007498 <__exponent>:
 8007498:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800749a:	4603      	mov	r3, r0
 800749c:	2900      	cmp	r1, #0
 800749e:	bfb8      	it	lt
 80074a0:	4249      	neglt	r1, r1
 80074a2:	f803 2b02 	strb.w	r2, [r3], #2
 80074a6:	bfb4      	ite	lt
 80074a8:	222d      	movlt	r2, #45	; 0x2d
 80074aa:	222b      	movge	r2, #43	; 0x2b
 80074ac:	2909      	cmp	r1, #9
 80074ae:	7042      	strb	r2, [r0, #1]
 80074b0:	dd2a      	ble.n	8007508 <__exponent+0x70>
 80074b2:	f10d 0207 	add.w	r2, sp, #7
 80074b6:	4617      	mov	r7, r2
 80074b8:	260a      	movs	r6, #10
 80074ba:	4694      	mov	ip, r2
 80074bc:	fb91 f5f6 	sdiv	r5, r1, r6
 80074c0:	fb06 1415 	mls	r4, r6, r5, r1
 80074c4:	3430      	adds	r4, #48	; 0x30
 80074c6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80074ca:	460c      	mov	r4, r1
 80074cc:	2c63      	cmp	r4, #99	; 0x63
 80074ce:	f102 32ff 	add.w	r2, r2, #4294967295
 80074d2:	4629      	mov	r1, r5
 80074d4:	dcf1      	bgt.n	80074ba <__exponent+0x22>
 80074d6:	3130      	adds	r1, #48	; 0x30
 80074d8:	f1ac 0402 	sub.w	r4, ip, #2
 80074dc:	f802 1c01 	strb.w	r1, [r2, #-1]
 80074e0:	1c41      	adds	r1, r0, #1
 80074e2:	4622      	mov	r2, r4
 80074e4:	42ba      	cmp	r2, r7
 80074e6:	d30a      	bcc.n	80074fe <__exponent+0x66>
 80074e8:	f10d 0209 	add.w	r2, sp, #9
 80074ec:	eba2 020c 	sub.w	r2, r2, ip
 80074f0:	42bc      	cmp	r4, r7
 80074f2:	bf88      	it	hi
 80074f4:	2200      	movhi	r2, #0
 80074f6:	4413      	add	r3, r2
 80074f8:	1a18      	subs	r0, r3, r0
 80074fa:	b003      	add	sp, #12
 80074fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074fe:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007502:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007506:	e7ed      	b.n	80074e4 <__exponent+0x4c>
 8007508:	2330      	movs	r3, #48	; 0x30
 800750a:	3130      	adds	r1, #48	; 0x30
 800750c:	7083      	strb	r3, [r0, #2]
 800750e:	70c1      	strb	r1, [r0, #3]
 8007510:	1d03      	adds	r3, r0, #4
 8007512:	e7f1      	b.n	80074f8 <__exponent+0x60>

08007514 <_printf_float>:
 8007514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007518:	ed2d 8b02 	vpush	{d8}
 800751c:	b08d      	sub	sp, #52	; 0x34
 800751e:	460c      	mov	r4, r1
 8007520:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007524:	4616      	mov	r6, r2
 8007526:	461f      	mov	r7, r3
 8007528:	4605      	mov	r5, r0
 800752a:	f000 ff2d 	bl	8008388 <_localeconv_r>
 800752e:	f8d0 a000 	ldr.w	sl, [r0]
 8007532:	4650      	mov	r0, sl
 8007534:	f7f8 febc 	bl	80002b0 <strlen>
 8007538:	2300      	movs	r3, #0
 800753a:	930a      	str	r3, [sp, #40]	; 0x28
 800753c:	6823      	ldr	r3, [r4, #0]
 800753e:	9305      	str	r3, [sp, #20]
 8007540:	f8d8 3000 	ldr.w	r3, [r8]
 8007544:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007548:	3307      	adds	r3, #7
 800754a:	f023 0307 	bic.w	r3, r3, #7
 800754e:	f103 0208 	add.w	r2, r3, #8
 8007552:	f8c8 2000 	str.w	r2, [r8]
 8007556:	e9d3 8900 	ldrd	r8, r9, [r3]
 800755a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800755e:	9307      	str	r3, [sp, #28]
 8007560:	f8cd 8018 	str.w	r8, [sp, #24]
 8007564:	ee08 0a10 	vmov	s16, r0
 8007568:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800756c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007570:	4b9e      	ldr	r3, [pc, #632]	; (80077ec <_printf_float+0x2d8>)
 8007572:	f04f 32ff 	mov.w	r2, #4294967295
 8007576:	f7f9 faf9 	bl	8000b6c <__aeabi_dcmpun>
 800757a:	bb88      	cbnz	r0, 80075e0 <_printf_float+0xcc>
 800757c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007580:	4b9a      	ldr	r3, [pc, #616]	; (80077ec <_printf_float+0x2d8>)
 8007582:	f04f 32ff 	mov.w	r2, #4294967295
 8007586:	f7f9 fad3 	bl	8000b30 <__aeabi_dcmple>
 800758a:	bb48      	cbnz	r0, 80075e0 <_printf_float+0xcc>
 800758c:	2200      	movs	r2, #0
 800758e:	2300      	movs	r3, #0
 8007590:	4640      	mov	r0, r8
 8007592:	4649      	mov	r1, r9
 8007594:	f7f9 fac2 	bl	8000b1c <__aeabi_dcmplt>
 8007598:	b110      	cbz	r0, 80075a0 <_printf_float+0x8c>
 800759a:	232d      	movs	r3, #45	; 0x2d
 800759c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a0:	4a93      	ldr	r2, [pc, #588]	; (80077f0 <_printf_float+0x2dc>)
 80075a2:	4b94      	ldr	r3, [pc, #592]	; (80077f4 <_printf_float+0x2e0>)
 80075a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075a8:	bf94      	ite	ls
 80075aa:	4690      	movls	r8, r2
 80075ac:	4698      	movhi	r8, r3
 80075ae:	2303      	movs	r3, #3
 80075b0:	6123      	str	r3, [r4, #16]
 80075b2:	9b05      	ldr	r3, [sp, #20]
 80075b4:	f023 0304 	bic.w	r3, r3, #4
 80075b8:	6023      	str	r3, [r4, #0]
 80075ba:	f04f 0900 	mov.w	r9, #0
 80075be:	9700      	str	r7, [sp, #0]
 80075c0:	4633      	mov	r3, r6
 80075c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80075c4:	4621      	mov	r1, r4
 80075c6:	4628      	mov	r0, r5
 80075c8:	f000 f9da 	bl	8007980 <_printf_common>
 80075cc:	3001      	adds	r0, #1
 80075ce:	f040 8090 	bne.w	80076f2 <_printf_float+0x1de>
 80075d2:	f04f 30ff 	mov.w	r0, #4294967295
 80075d6:	b00d      	add	sp, #52	; 0x34
 80075d8:	ecbd 8b02 	vpop	{d8}
 80075dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075e0:	4642      	mov	r2, r8
 80075e2:	464b      	mov	r3, r9
 80075e4:	4640      	mov	r0, r8
 80075e6:	4649      	mov	r1, r9
 80075e8:	f7f9 fac0 	bl	8000b6c <__aeabi_dcmpun>
 80075ec:	b140      	cbz	r0, 8007600 <_printf_float+0xec>
 80075ee:	464b      	mov	r3, r9
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	bfbc      	itt	lt
 80075f4:	232d      	movlt	r3, #45	; 0x2d
 80075f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80075fa:	4a7f      	ldr	r2, [pc, #508]	; (80077f8 <_printf_float+0x2e4>)
 80075fc:	4b7f      	ldr	r3, [pc, #508]	; (80077fc <_printf_float+0x2e8>)
 80075fe:	e7d1      	b.n	80075a4 <_printf_float+0x90>
 8007600:	6863      	ldr	r3, [r4, #4]
 8007602:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007606:	9206      	str	r2, [sp, #24]
 8007608:	1c5a      	adds	r2, r3, #1
 800760a:	d13f      	bne.n	800768c <_printf_float+0x178>
 800760c:	2306      	movs	r3, #6
 800760e:	6063      	str	r3, [r4, #4]
 8007610:	9b05      	ldr	r3, [sp, #20]
 8007612:	6861      	ldr	r1, [r4, #4]
 8007614:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007618:	2300      	movs	r3, #0
 800761a:	9303      	str	r3, [sp, #12]
 800761c:	ab0a      	add	r3, sp, #40	; 0x28
 800761e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007622:	ab09      	add	r3, sp, #36	; 0x24
 8007624:	ec49 8b10 	vmov	d0, r8, r9
 8007628:	9300      	str	r3, [sp, #0]
 800762a:	6022      	str	r2, [r4, #0]
 800762c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007630:	4628      	mov	r0, r5
 8007632:	f7ff fecf 	bl	80073d4 <__cvt>
 8007636:	9b06      	ldr	r3, [sp, #24]
 8007638:	9909      	ldr	r1, [sp, #36]	; 0x24
 800763a:	2b47      	cmp	r3, #71	; 0x47
 800763c:	4680      	mov	r8, r0
 800763e:	d108      	bne.n	8007652 <_printf_float+0x13e>
 8007640:	1cc8      	adds	r0, r1, #3
 8007642:	db02      	blt.n	800764a <_printf_float+0x136>
 8007644:	6863      	ldr	r3, [r4, #4]
 8007646:	4299      	cmp	r1, r3
 8007648:	dd41      	ble.n	80076ce <_printf_float+0x1ba>
 800764a:	f1ab 0302 	sub.w	r3, fp, #2
 800764e:	fa5f fb83 	uxtb.w	fp, r3
 8007652:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007656:	d820      	bhi.n	800769a <_printf_float+0x186>
 8007658:	3901      	subs	r1, #1
 800765a:	465a      	mov	r2, fp
 800765c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007660:	9109      	str	r1, [sp, #36]	; 0x24
 8007662:	f7ff ff19 	bl	8007498 <__exponent>
 8007666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007668:	1813      	adds	r3, r2, r0
 800766a:	2a01      	cmp	r2, #1
 800766c:	4681      	mov	r9, r0
 800766e:	6123      	str	r3, [r4, #16]
 8007670:	dc02      	bgt.n	8007678 <_printf_float+0x164>
 8007672:	6822      	ldr	r2, [r4, #0]
 8007674:	07d2      	lsls	r2, r2, #31
 8007676:	d501      	bpl.n	800767c <_printf_float+0x168>
 8007678:	3301      	adds	r3, #1
 800767a:	6123      	str	r3, [r4, #16]
 800767c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007680:	2b00      	cmp	r3, #0
 8007682:	d09c      	beq.n	80075be <_printf_float+0xaa>
 8007684:	232d      	movs	r3, #45	; 0x2d
 8007686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800768a:	e798      	b.n	80075be <_printf_float+0xaa>
 800768c:	9a06      	ldr	r2, [sp, #24]
 800768e:	2a47      	cmp	r2, #71	; 0x47
 8007690:	d1be      	bne.n	8007610 <_printf_float+0xfc>
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1bc      	bne.n	8007610 <_printf_float+0xfc>
 8007696:	2301      	movs	r3, #1
 8007698:	e7b9      	b.n	800760e <_printf_float+0xfa>
 800769a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800769e:	d118      	bne.n	80076d2 <_printf_float+0x1be>
 80076a0:	2900      	cmp	r1, #0
 80076a2:	6863      	ldr	r3, [r4, #4]
 80076a4:	dd0b      	ble.n	80076be <_printf_float+0x1aa>
 80076a6:	6121      	str	r1, [r4, #16]
 80076a8:	b913      	cbnz	r3, 80076b0 <_printf_float+0x19c>
 80076aa:	6822      	ldr	r2, [r4, #0]
 80076ac:	07d0      	lsls	r0, r2, #31
 80076ae:	d502      	bpl.n	80076b6 <_printf_float+0x1a2>
 80076b0:	3301      	adds	r3, #1
 80076b2:	440b      	add	r3, r1
 80076b4:	6123      	str	r3, [r4, #16]
 80076b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80076b8:	f04f 0900 	mov.w	r9, #0
 80076bc:	e7de      	b.n	800767c <_printf_float+0x168>
 80076be:	b913      	cbnz	r3, 80076c6 <_printf_float+0x1b2>
 80076c0:	6822      	ldr	r2, [r4, #0]
 80076c2:	07d2      	lsls	r2, r2, #31
 80076c4:	d501      	bpl.n	80076ca <_printf_float+0x1b6>
 80076c6:	3302      	adds	r3, #2
 80076c8:	e7f4      	b.n	80076b4 <_printf_float+0x1a0>
 80076ca:	2301      	movs	r3, #1
 80076cc:	e7f2      	b.n	80076b4 <_printf_float+0x1a0>
 80076ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076d4:	4299      	cmp	r1, r3
 80076d6:	db05      	blt.n	80076e4 <_printf_float+0x1d0>
 80076d8:	6823      	ldr	r3, [r4, #0]
 80076da:	6121      	str	r1, [r4, #16]
 80076dc:	07d8      	lsls	r0, r3, #31
 80076de:	d5ea      	bpl.n	80076b6 <_printf_float+0x1a2>
 80076e0:	1c4b      	adds	r3, r1, #1
 80076e2:	e7e7      	b.n	80076b4 <_printf_float+0x1a0>
 80076e4:	2900      	cmp	r1, #0
 80076e6:	bfd4      	ite	le
 80076e8:	f1c1 0202 	rsble	r2, r1, #2
 80076ec:	2201      	movgt	r2, #1
 80076ee:	4413      	add	r3, r2
 80076f0:	e7e0      	b.n	80076b4 <_printf_float+0x1a0>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	055a      	lsls	r2, r3, #21
 80076f6:	d407      	bmi.n	8007708 <_printf_float+0x1f4>
 80076f8:	6923      	ldr	r3, [r4, #16]
 80076fa:	4642      	mov	r2, r8
 80076fc:	4631      	mov	r1, r6
 80076fe:	4628      	mov	r0, r5
 8007700:	47b8      	blx	r7
 8007702:	3001      	adds	r0, #1
 8007704:	d12c      	bne.n	8007760 <_printf_float+0x24c>
 8007706:	e764      	b.n	80075d2 <_printf_float+0xbe>
 8007708:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800770c:	f240 80e0 	bls.w	80078d0 <_printf_float+0x3bc>
 8007710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007714:	2200      	movs	r2, #0
 8007716:	2300      	movs	r3, #0
 8007718:	f7f9 f9f6 	bl	8000b08 <__aeabi_dcmpeq>
 800771c:	2800      	cmp	r0, #0
 800771e:	d034      	beq.n	800778a <_printf_float+0x276>
 8007720:	4a37      	ldr	r2, [pc, #220]	; (8007800 <_printf_float+0x2ec>)
 8007722:	2301      	movs	r3, #1
 8007724:	4631      	mov	r1, r6
 8007726:	4628      	mov	r0, r5
 8007728:	47b8      	blx	r7
 800772a:	3001      	adds	r0, #1
 800772c:	f43f af51 	beq.w	80075d2 <_printf_float+0xbe>
 8007730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007734:	429a      	cmp	r2, r3
 8007736:	db02      	blt.n	800773e <_printf_float+0x22a>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	07d8      	lsls	r0, r3, #31
 800773c:	d510      	bpl.n	8007760 <_printf_float+0x24c>
 800773e:	ee18 3a10 	vmov	r3, s16
 8007742:	4652      	mov	r2, sl
 8007744:	4631      	mov	r1, r6
 8007746:	4628      	mov	r0, r5
 8007748:	47b8      	blx	r7
 800774a:	3001      	adds	r0, #1
 800774c:	f43f af41 	beq.w	80075d2 <_printf_float+0xbe>
 8007750:	f04f 0800 	mov.w	r8, #0
 8007754:	f104 091a 	add.w	r9, r4, #26
 8007758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800775a:	3b01      	subs	r3, #1
 800775c:	4543      	cmp	r3, r8
 800775e:	dc09      	bgt.n	8007774 <_printf_float+0x260>
 8007760:	6823      	ldr	r3, [r4, #0]
 8007762:	079b      	lsls	r3, r3, #30
 8007764:	f100 8107 	bmi.w	8007976 <_printf_float+0x462>
 8007768:	68e0      	ldr	r0, [r4, #12]
 800776a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800776c:	4298      	cmp	r0, r3
 800776e:	bfb8      	it	lt
 8007770:	4618      	movlt	r0, r3
 8007772:	e730      	b.n	80075d6 <_printf_float+0xc2>
 8007774:	2301      	movs	r3, #1
 8007776:	464a      	mov	r2, r9
 8007778:	4631      	mov	r1, r6
 800777a:	4628      	mov	r0, r5
 800777c:	47b8      	blx	r7
 800777e:	3001      	adds	r0, #1
 8007780:	f43f af27 	beq.w	80075d2 <_printf_float+0xbe>
 8007784:	f108 0801 	add.w	r8, r8, #1
 8007788:	e7e6      	b.n	8007758 <_printf_float+0x244>
 800778a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800778c:	2b00      	cmp	r3, #0
 800778e:	dc39      	bgt.n	8007804 <_printf_float+0x2f0>
 8007790:	4a1b      	ldr	r2, [pc, #108]	; (8007800 <_printf_float+0x2ec>)
 8007792:	2301      	movs	r3, #1
 8007794:	4631      	mov	r1, r6
 8007796:	4628      	mov	r0, r5
 8007798:	47b8      	blx	r7
 800779a:	3001      	adds	r0, #1
 800779c:	f43f af19 	beq.w	80075d2 <_printf_float+0xbe>
 80077a0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80077a4:	4313      	orrs	r3, r2
 80077a6:	d102      	bne.n	80077ae <_printf_float+0x29a>
 80077a8:	6823      	ldr	r3, [r4, #0]
 80077aa:	07d9      	lsls	r1, r3, #31
 80077ac:	d5d8      	bpl.n	8007760 <_printf_float+0x24c>
 80077ae:	ee18 3a10 	vmov	r3, s16
 80077b2:	4652      	mov	r2, sl
 80077b4:	4631      	mov	r1, r6
 80077b6:	4628      	mov	r0, r5
 80077b8:	47b8      	blx	r7
 80077ba:	3001      	adds	r0, #1
 80077bc:	f43f af09 	beq.w	80075d2 <_printf_float+0xbe>
 80077c0:	f04f 0900 	mov.w	r9, #0
 80077c4:	f104 0a1a 	add.w	sl, r4, #26
 80077c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ca:	425b      	negs	r3, r3
 80077cc:	454b      	cmp	r3, r9
 80077ce:	dc01      	bgt.n	80077d4 <_printf_float+0x2c0>
 80077d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d2:	e792      	b.n	80076fa <_printf_float+0x1e6>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4652      	mov	r2, sl
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	f43f aef7 	beq.w	80075d2 <_printf_float+0xbe>
 80077e4:	f109 0901 	add.w	r9, r9, #1
 80077e8:	e7ee      	b.n	80077c8 <_printf_float+0x2b4>
 80077ea:	bf00      	nop
 80077ec:	7fefffff 	.word	0x7fefffff
 80077f0:	0800c3a0 	.word	0x0800c3a0
 80077f4:	0800c3a4 	.word	0x0800c3a4
 80077f8:	0800c3a8 	.word	0x0800c3a8
 80077fc:	0800c3ac 	.word	0x0800c3ac
 8007800:	0800c3b0 	.word	0x0800c3b0
 8007804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007808:	429a      	cmp	r2, r3
 800780a:	bfa8      	it	ge
 800780c:	461a      	movge	r2, r3
 800780e:	2a00      	cmp	r2, #0
 8007810:	4691      	mov	r9, r2
 8007812:	dc37      	bgt.n	8007884 <_printf_float+0x370>
 8007814:	f04f 0b00 	mov.w	fp, #0
 8007818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800781c:	f104 021a 	add.w	r2, r4, #26
 8007820:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007822:	9305      	str	r3, [sp, #20]
 8007824:	eba3 0309 	sub.w	r3, r3, r9
 8007828:	455b      	cmp	r3, fp
 800782a:	dc33      	bgt.n	8007894 <_printf_float+0x380>
 800782c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007830:	429a      	cmp	r2, r3
 8007832:	db3b      	blt.n	80078ac <_printf_float+0x398>
 8007834:	6823      	ldr	r3, [r4, #0]
 8007836:	07da      	lsls	r2, r3, #31
 8007838:	d438      	bmi.n	80078ac <_printf_float+0x398>
 800783a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800783e:	eba2 0903 	sub.w	r9, r2, r3
 8007842:	9b05      	ldr	r3, [sp, #20]
 8007844:	1ad2      	subs	r2, r2, r3
 8007846:	4591      	cmp	r9, r2
 8007848:	bfa8      	it	ge
 800784a:	4691      	movge	r9, r2
 800784c:	f1b9 0f00 	cmp.w	r9, #0
 8007850:	dc35      	bgt.n	80078be <_printf_float+0x3aa>
 8007852:	f04f 0800 	mov.w	r8, #0
 8007856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800785a:	f104 0a1a 	add.w	sl, r4, #26
 800785e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007862:	1a9b      	subs	r3, r3, r2
 8007864:	eba3 0309 	sub.w	r3, r3, r9
 8007868:	4543      	cmp	r3, r8
 800786a:	f77f af79 	ble.w	8007760 <_printf_float+0x24c>
 800786e:	2301      	movs	r3, #1
 8007870:	4652      	mov	r2, sl
 8007872:	4631      	mov	r1, r6
 8007874:	4628      	mov	r0, r5
 8007876:	47b8      	blx	r7
 8007878:	3001      	adds	r0, #1
 800787a:	f43f aeaa 	beq.w	80075d2 <_printf_float+0xbe>
 800787e:	f108 0801 	add.w	r8, r8, #1
 8007882:	e7ec      	b.n	800785e <_printf_float+0x34a>
 8007884:	4613      	mov	r3, r2
 8007886:	4631      	mov	r1, r6
 8007888:	4642      	mov	r2, r8
 800788a:	4628      	mov	r0, r5
 800788c:	47b8      	blx	r7
 800788e:	3001      	adds	r0, #1
 8007890:	d1c0      	bne.n	8007814 <_printf_float+0x300>
 8007892:	e69e      	b.n	80075d2 <_printf_float+0xbe>
 8007894:	2301      	movs	r3, #1
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	9205      	str	r2, [sp, #20]
 800789c:	47b8      	blx	r7
 800789e:	3001      	adds	r0, #1
 80078a0:	f43f ae97 	beq.w	80075d2 <_printf_float+0xbe>
 80078a4:	9a05      	ldr	r2, [sp, #20]
 80078a6:	f10b 0b01 	add.w	fp, fp, #1
 80078aa:	e7b9      	b.n	8007820 <_printf_float+0x30c>
 80078ac:	ee18 3a10 	vmov	r3, s16
 80078b0:	4652      	mov	r2, sl
 80078b2:	4631      	mov	r1, r6
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b8      	blx	r7
 80078b8:	3001      	adds	r0, #1
 80078ba:	d1be      	bne.n	800783a <_printf_float+0x326>
 80078bc:	e689      	b.n	80075d2 <_printf_float+0xbe>
 80078be:	9a05      	ldr	r2, [sp, #20]
 80078c0:	464b      	mov	r3, r9
 80078c2:	4442      	add	r2, r8
 80078c4:	4631      	mov	r1, r6
 80078c6:	4628      	mov	r0, r5
 80078c8:	47b8      	blx	r7
 80078ca:	3001      	adds	r0, #1
 80078cc:	d1c1      	bne.n	8007852 <_printf_float+0x33e>
 80078ce:	e680      	b.n	80075d2 <_printf_float+0xbe>
 80078d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078d2:	2a01      	cmp	r2, #1
 80078d4:	dc01      	bgt.n	80078da <_printf_float+0x3c6>
 80078d6:	07db      	lsls	r3, r3, #31
 80078d8:	d53a      	bpl.n	8007950 <_printf_float+0x43c>
 80078da:	2301      	movs	r3, #1
 80078dc:	4642      	mov	r2, r8
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b8      	blx	r7
 80078e4:	3001      	adds	r0, #1
 80078e6:	f43f ae74 	beq.w	80075d2 <_printf_float+0xbe>
 80078ea:	ee18 3a10 	vmov	r3, s16
 80078ee:	4652      	mov	r2, sl
 80078f0:	4631      	mov	r1, r6
 80078f2:	4628      	mov	r0, r5
 80078f4:	47b8      	blx	r7
 80078f6:	3001      	adds	r0, #1
 80078f8:	f43f ae6b 	beq.w	80075d2 <_printf_float+0xbe>
 80078fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007900:	2200      	movs	r2, #0
 8007902:	2300      	movs	r3, #0
 8007904:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007908:	f7f9 f8fe 	bl	8000b08 <__aeabi_dcmpeq>
 800790c:	b9d8      	cbnz	r0, 8007946 <_printf_float+0x432>
 800790e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007912:	f108 0201 	add.w	r2, r8, #1
 8007916:	4631      	mov	r1, r6
 8007918:	4628      	mov	r0, r5
 800791a:	47b8      	blx	r7
 800791c:	3001      	adds	r0, #1
 800791e:	d10e      	bne.n	800793e <_printf_float+0x42a>
 8007920:	e657      	b.n	80075d2 <_printf_float+0xbe>
 8007922:	2301      	movs	r3, #1
 8007924:	4652      	mov	r2, sl
 8007926:	4631      	mov	r1, r6
 8007928:	4628      	mov	r0, r5
 800792a:	47b8      	blx	r7
 800792c:	3001      	adds	r0, #1
 800792e:	f43f ae50 	beq.w	80075d2 <_printf_float+0xbe>
 8007932:	f108 0801 	add.w	r8, r8, #1
 8007936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007938:	3b01      	subs	r3, #1
 800793a:	4543      	cmp	r3, r8
 800793c:	dcf1      	bgt.n	8007922 <_printf_float+0x40e>
 800793e:	464b      	mov	r3, r9
 8007940:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007944:	e6da      	b.n	80076fc <_printf_float+0x1e8>
 8007946:	f04f 0800 	mov.w	r8, #0
 800794a:	f104 0a1a 	add.w	sl, r4, #26
 800794e:	e7f2      	b.n	8007936 <_printf_float+0x422>
 8007950:	2301      	movs	r3, #1
 8007952:	4642      	mov	r2, r8
 8007954:	e7df      	b.n	8007916 <_printf_float+0x402>
 8007956:	2301      	movs	r3, #1
 8007958:	464a      	mov	r2, r9
 800795a:	4631      	mov	r1, r6
 800795c:	4628      	mov	r0, r5
 800795e:	47b8      	blx	r7
 8007960:	3001      	adds	r0, #1
 8007962:	f43f ae36 	beq.w	80075d2 <_printf_float+0xbe>
 8007966:	f108 0801 	add.w	r8, r8, #1
 800796a:	68e3      	ldr	r3, [r4, #12]
 800796c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800796e:	1a5b      	subs	r3, r3, r1
 8007970:	4543      	cmp	r3, r8
 8007972:	dcf0      	bgt.n	8007956 <_printf_float+0x442>
 8007974:	e6f8      	b.n	8007768 <_printf_float+0x254>
 8007976:	f04f 0800 	mov.w	r8, #0
 800797a:	f104 0919 	add.w	r9, r4, #25
 800797e:	e7f4      	b.n	800796a <_printf_float+0x456>

08007980 <_printf_common>:
 8007980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007984:	4616      	mov	r6, r2
 8007986:	4699      	mov	r9, r3
 8007988:	688a      	ldr	r2, [r1, #8]
 800798a:	690b      	ldr	r3, [r1, #16]
 800798c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007990:	4293      	cmp	r3, r2
 8007992:	bfb8      	it	lt
 8007994:	4613      	movlt	r3, r2
 8007996:	6033      	str	r3, [r6, #0]
 8007998:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800799c:	4607      	mov	r7, r0
 800799e:	460c      	mov	r4, r1
 80079a0:	b10a      	cbz	r2, 80079a6 <_printf_common+0x26>
 80079a2:	3301      	adds	r3, #1
 80079a4:	6033      	str	r3, [r6, #0]
 80079a6:	6823      	ldr	r3, [r4, #0]
 80079a8:	0699      	lsls	r1, r3, #26
 80079aa:	bf42      	ittt	mi
 80079ac:	6833      	ldrmi	r3, [r6, #0]
 80079ae:	3302      	addmi	r3, #2
 80079b0:	6033      	strmi	r3, [r6, #0]
 80079b2:	6825      	ldr	r5, [r4, #0]
 80079b4:	f015 0506 	ands.w	r5, r5, #6
 80079b8:	d106      	bne.n	80079c8 <_printf_common+0x48>
 80079ba:	f104 0a19 	add.w	sl, r4, #25
 80079be:	68e3      	ldr	r3, [r4, #12]
 80079c0:	6832      	ldr	r2, [r6, #0]
 80079c2:	1a9b      	subs	r3, r3, r2
 80079c4:	42ab      	cmp	r3, r5
 80079c6:	dc26      	bgt.n	8007a16 <_printf_common+0x96>
 80079c8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079cc:	1e13      	subs	r3, r2, #0
 80079ce:	6822      	ldr	r2, [r4, #0]
 80079d0:	bf18      	it	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	0692      	lsls	r2, r2, #26
 80079d6:	d42b      	bmi.n	8007a30 <_printf_common+0xb0>
 80079d8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079dc:	4649      	mov	r1, r9
 80079de:	4638      	mov	r0, r7
 80079e0:	47c0      	blx	r8
 80079e2:	3001      	adds	r0, #1
 80079e4:	d01e      	beq.n	8007a24 <_printf_common+0xa4>
 80079e6:	6823      	ldr	r3, [r4, #0]
 80079e8:	6922      	ldr	r2, [r4, #16]
 80079ea:	f003 0306 	and.w	r3, r3, #6
 80079ee:	2b04      	cmp	r3, #4
 80079f0:	bf02      	ittt	eq
 80079f2:	68e5      	ldreq	r5, [r4, #12]
 80079f4:	6833      	ldreq	r3, [r6, #0]
 80079f6:	1aed      	subeq	r5, r5, r3
 80079f8:	68a3      	ldr	r3, [r4, #8]
 80079fa:	bf0c      	ite	eq
 80079fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a00:	2500      	movne	r5, #0
 8007a02:	4293      	cmp	r3, r2
 8007a04:	bfc4      	itt	gt
 8007a06:	1a9b      	subgt	r3, r3, r2
 8007a08:	18ed      	addgt	r5, r5, r3
 8007a0a:	2600      	movs	r6, #0
 8007a0c:	341a      	adds	r4, #26
 8007a0e:	42b5      	cmp	r5, r6
 8007a10:	d11a      	bne.n	8007a48 <_printf_common+0xc8>
 8007a12:	2000      	movs	r0, #0
 8007a14:	e008      	b.n	8007a28 <_printf_common+0xa8>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4652      	mov	r2, sl
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4638      	mov	r0, r7
 8007a1e:	47c0      	blx	r8
 8007a20:	3001      	adds	r0, #1
 8007a22:	d103      	bne.n	8007a2c <_printf_common+0xac>
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295
 8007a28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2c:	3501      	adds	r5, #1
 8007a2e:	e7c6      	b.n	80079be <_printf_common+0x3e>
 8007a30:	18e1      	adds	r1, r4, r3
 8007a32:	1c5a      	adds	r2, r3, #1
 8007a34:	2030      	movs	r0, #48	; 0x30
 8007a36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a3a:	4422      	add	r2, r4
 8007a3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a44:	3302      	adds	r3, #2
 8007a46:	e7c7      	b.n	80079d8 <_printf_common+0x58>
 8007a48:	2301      	movs	r3, #1
 8007a4a:	4622      	mov	r2, r4
 8007a4c:	4649      	mov	r1, r9
 8007a4e:	4638      	mov	r0, r7
 8007a50:	47c0      	blx	r8
 8007a52:	3001      	adds	r0, #1
 8007a54:	d0e6      	beq.n	8007a24 <_printf_common+0xa4>
 8007a56:	3601      	adds	r6, #1
 8007a58:	e7d9      	b.n	8007a0e <_printf_common+0x8e>
	...

08007a5c <_printf_i>:
 8007a5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a60:	7e0f      	ldrb	r7, [r1, #24]
 8007a62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a64:	2f78      	cmp	r7, #120	; 0x78
 8007a66:	4691      	mov	r9, r2
 8007a68:	4680      	mov	r8, r0
 8007a6a:	460c      	mov	r4, r1
 8007a6c:	469a      	mov	sl, r3
 8007a6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a72:	d807      	bhi.n	8007a84 <_printf_i+0x28>
 8007a74:	2f62      	cmp	r7, #98	; 0x62
 8007a76:	d80a      	bhi.n	8007a8e <_printf_i+0x32>
 8007a78:	2f00      	cmp	r7, #0
 8007a7a:	f000 80d4 	beq.w	8007c26 <_printf_i+0x1ca>
 8007a7e:	2f58      	cmp	r7, #88	; 0x58
 8007a80:	f000 80c0 	beq.w	8007c04 <_printf_i+0x1a8>
 8007a84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007a88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007a8c:	e03a      	b.n	8007b04 <_printf_i+0xa8>
 8007a8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007a92:	2b15      	cmp	r3, #21
 8007a94:	d8f6      	bhi.n	8007a84 <_printf_i+0x28>
 8007a96:	a101      	add	r1, pc, #4	; (adr r1, 8007a9c <_printf_i+0x40>)
 8007a98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a9c:	08007af5 	.word	0x08007af5
 8007aa0:	08007b09 	.word	0x08007b09
 8007aa4:	08007a85 	.word	0x08007a85
 8007aa8:	08007a85 	.word	0x08007a85
 8007aac:	08007a85 	.word	0x08007a85
 8007ab0:	08007a85 	.word	0x08007a85
 8007ab4:	08007b09 	.word	0x08007b09
 8007ab8:	08007a85 	.word	0x08007a85
 8007abc:	08007a85 	.word	0x08007a85
 8007ac0:	08007a85 	.word	0x08007a85
 8007ac4:	08007a85 	.word	0x08007a85
 8007ac8:	08007c0d 	.word	0x08007c0d
 8007acc:	08007b35 	.word	0x08007b35
 8007ad0:	08007bc7 	.word	0x08007bc7
 8007ad4:	08007a85 	.word	0x08007a85
 8007ad8:	08007a85 	.word	0x08007a85
 8007adc:	08007c2f 	.word	0x08007c2f
 8007ae0:	08007a85 	.word	0x08007a85
 8007ae4:	08007b35 	.word	0x08007b35
 8007ae8:	08007a85 	.word	0x08007a85
 8007aec:	08007a85 	.word	0x08007a85
 8007af0:	08007bcf 	.word	0x08007bcf
 8007af4:	682b      	ldr	r3, [r5, #0]
 8007af6:	1d1a      	adds	r2, r3, #4
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	602a      	str	r2, [r5, #0]
 8007afc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b04:	2301      	movs	r3, #1
 8007b06:	e09f      	b.n	8007c48 <_printf_i+0x1ec>
 8007b08:	6820      	ldr	r0, [r4, #0]
 8007b0a:	682b      	ldr	r3, [r5, #0]
 8007b0c:	0607      	lsls	r7, r0, #24
 8007b0e:	f103 0104 	add.w	r1, r3, #4
 8007b12:	6029      	str	r1, [r5, #0]
 8007b14:	d501      	bpl.n	8007b1a <_printf_i+0xbe>
 8007b16:	681e      	ldr	r6, [r3, #0]
 8007b18:	e003      	b.n	8007b22 <_printf_i+0xc6>
 8007b1a:	0646      	lsls	r6, r0, #25
 8007b1c:	d5fb      	bpl.n	8007b16 <_printf_i+0xba>
 8007b1e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	da03      	bge.n	8007b2e <_printf_i+0xd2>
 8007b26:	232d      	movs	r3, #45	; 0x2d
 8007b28:	4276      	negs	r6, r6
 8007b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b2e:	485a      	ldr	r0, [pc, #360]	; (8007c98 <_printf_i+0x23c>)
 8007b30:	230a      	movs	r3, #10
 8007b32:	e012      	b.n	8007b5a <_printf_i+0xfe>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	6820      	ldr	r0, [r4, #0]
 8007b38:	1d19      	adds	r1, r3, #4
 8007b3a:	6029      	str	r1, [r5, #0]
 8007b3c:	0605      	lsls	r5, r0, #24
 8007b3e:	d501      	bpl.n	8007b44 <_printf_i+0xe8>
 8007b40:	681e      	ldr	r6, [r3, #0]
 8007b42:	e002      	b.n	8007b4a <_printf_i+0xee>
 8007b44:	0641      	lsls	r1, r0, #25
 8007b46:	d5fb      	bpl.n	8007b40 <_printf_i+0xe4>
 8007b48:	881e      	ldrh	r6, [r3, #0]
 8007b4a:	4853      	ldr	r0, [pc, #332]	; (8007c98 <_printf_i+0x23c>)
 8007b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8007b4e:	bf0c      	ite	eq
 8007b50:	2308      	moveq	r3, #8
 8007b52:	230a      	movne	r3, #10
 8007b54:	2100      	movs	r1, #0
 8007b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b5a:	6865      	ldr	r5, [r4, #4]
 8007b5c:	60a5      	str	r5, [r4, #8]
 8007b5e:	2d00      	cmp	r5, #0
 8007b60:	bfa2      	ittt	ge
 8007b62:	6821      	ldrge	r1, [r4, #0]
 8007b64:	f021 0104 	bicge.w	r1, r1, #4
 8007b68:	6021      	strge	r1, [r4, #0]
 8007b6a:	b90e      	cbnz	r6, 8007b70 <_printf_i+0x114>
 8007b6c:	2d00      	cmp	r5, #0
 8007b6e:	d04b      	beq.n	8007c08 <_printf_i+0x1ac>
 8007b70:	4615      	mov	r5, r2
 8007b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b76:	fb03 6711 	mls	r7, r3, r1, r6
 8007b7a:	5dc7      	ldrb	r7, [r0, r7]
 8007b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007b80:	4637      	mov	r7, r6
 8007b82:	42bb      	cmp	r3, r7
 8007b84:	460e      	mov	r6, r1
 8007b86:	d9f4      	bls.n	8007b72 <_printf_i+0x116>
 8007b88:	2b08      	cmp	r3, #8
 8007b8a:	d10b      	bne.n	8007ba4 <_printf_i+0x148>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	07de      	lsls	r6, r3, #31
 8007b90:	d508      	bpl.n	8007ba4 <_printf_i+0x148>
 8007b92:	6923      	ldr	r3, [r4, #16]
 8007b94:	6861      	ldr	r1, [r4, #4]
 8007b96:	4299      	cmp	r1, r3
 8007b98:	bfde      	ittt	le
 8007b9a:	2330      	movle	r3, #48	; 0x30
 8007b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ba4:	1b52      	subs	r2, r2, r5
 8007ba6:	6122      	str	r2, [r4, #16]
 8007ba8:	f8cd a000 	str.w	sl, [sp]
 8007bac:	464b      	mov	r3, r9
 8007bae:	aa03      	add	r2, sp, #12
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	4640      	mov	r0, r8
 8007bb4:	f7ff fee4 	bl	8007980 <_printf_common>
 8007bb8:	3001      	adds	r0, #1
 8007bba:	d14a      	bne.n	8007c52 <_printf_i+0x1f6>
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8007bc0:	b004      	add	sp, #16
 8007bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bc6:	6823      	ldr	r3, [r4, #0]
 8007bc8:	f043 0320 	orr.w	r3, r3, #32
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	4833      	ldr	r0, [pc, #204]	; (8007c9c <_printf_i+0x240>)
 8007bd0:	2778      	movs	r7, #120	; 0x78
 8007bd2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007bd6:	6823      	ldr	r3, [r4, #0]
 8007bd8:	6829      	ldr	r1, [r5, #0]
 8007bda:	061f      	lsls	r7, r3, #24
 8007bdc:	f851 6b04 	ldr.w	r6, [r1], #4
 8007be0:	d402      	bmi.n	8007be8 <_printf_i+0x18c>
 8007be2:	065f      	lsls	r7, r3, #25
 8007be4:	bf48      	it	mi
 8007be6:	b2b6      	uxthmi	r6, r6
 8007be8:	07df      	lsls	r7, r3, #31
 8007bea:	bf48      	it	mi
 8007bec:	f043 0320 	orrmi.w	r3, r3, #32
 8007bf0:	6029      	str	r1, [r5, #0]
 8007bf2:	bf48      	it	mi
 8007bf4:	6023      	strmi	r3, [r4, #0]
 8007bf6:	b91e      	cbnz	r6, 8007c00 <_printf_i+0x1a4>
 8007bf8:	6823      	ldr	r3, [r4, #0]
 8007bfa:	f023 0320 	bic.w	r3, r3, #32
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	2310      	movs	r3, #16
 8007c02:	e7a7      	b.n	8007b54 <_printf_i+0xf8>
 8007c04:	4824      	ldr	r0, [pc, #144]	; (8007c98 <_printf_i+0x23c>)
 8007c06:	e7e4      	b.n	8007bd2 <_printf_i+0x176>
 8007c08:	4615      	mov	r5, r2
 8007c0a:	e7bd      	b.n	8007b88 <_printf_i+0x12c>
 8007c0c:	682b      	ldr	r3, [r5, #0]
 8007c0e:	6826      	ldr	r6, [r4, #0]
 8007c10:	6961      	ldr	r1, [r4, #20]
 8007c12:	1d18      	adds	r0, r3, #4
 8007c14:	6028      	str	r0, [r5, #0]
 8007c16:	0635      	lsls	r5, r6, #24
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	d501      	bpl.n	8007c20 <_printf_i+0x1c4>
 8007c1c:	6019      	str	r1, [r3, #0]
 8007c1e:	e002      	b.n	8007c26 <_printf_i+0x1ca>
 8007c20:	0670      	lsls	r0, r6, #25
 8007c22:	d5fb      	bpl.n	8007c1c <_printf_i+0x1c0>
 8007c24:	8019      	strh	r1, [r3, #0]
 8007c26:	2300      	movs	r3, #0
 8007c28:	6123      	str	r3, [r4, #16]
 8007c2a:	4615      	mov	r5, r2
 8007c2c:	e7bc      	b.n	8007ba8 <_printf_i+0x14c>
 8007c2e:	682b      	ldr	r3, [r5, #0]
 8007c30:	1d1a      	adds	r2, r3, #4
 8007c32:	602a      	str	r2, [r5, #0]
 8007c34:	681d      	ldr	r5, [r3, #0]
 8007c36:	6862      	ldr	r2, [r4, #4]
 8007c38:	2100      	movs	r1, #0
 8007c3a:	4628      	mov	r0, r5
 8007c3c:	f7f8 fae8 	bl	8000210 <memchr>
 8007c40:	b108      	cbz	r0, 8007c46 <_printf_i+0x1ea>
 8007c42:	1b40      	subs	r0, r0, r5
 8007c44:	6060      	str	r0, [r4, #4]
 8007c46:	6863      	ldr	r3, [r4, #4]
 8007c48:	6123      	str	r3, [r4, #16]
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c50:	e7aa      	b.n	8007ba8 <_printf_i+0x14c>
 8007c52:	6923      	ldr	r3, [r4, #16]
 8007c54:	462a      	mov	r2, r5
 8007c56:	4649      	mov	r1, r9
 8007c58:	4640      	mov	r0, r8
 8007c5a:	47d0      	blx	sl
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	d0ad      	beq.n	8007bbc <_printf_i+0x160>
 8007c60:	6823      	ldr	r3, [r4, #0]
 8007c62:	079b      	lsls	r3, r3, #30
 8007c64:	d413      	bmi.n	8007c8e <_printf_i+0x232>
 8007c66:	68e0      	ldr	r0, [r4, #12]
 8007c68:	9b03      	ldr	r3, [sp, #12]
 8007c6a:	4298      	cmp	r0, r3
 8007c6c:	bfb8      	it	lt
 8007c6e:	4618      	movlt	r0, r3
 8007c70:	e7a6      	b.n	8007bc0 <_printf_i+0x164>
 8007c72:	2301      	movs	r3, #1
 8007c74:	4632      	mov	r2, r6
 8007c76:	4649      	mov	r1, r9
 8007c78:	4640      	mov	r0, r8
 8007c7a:	47d0      	blx	sl
 8007c7c:	3001      	adds	r0, #1
 8007c7e:	d09d      	beq.n	8007bbc <_printf_i+0x160>
 8007c80:	3501      	adds	r5, #1
 8007c82:	68e3      	ldr	r3, [r4, #12]
 8007c84:	9903      	ldr	r1, [sp, #12]
 8007c86:	1a5b      	subs	r3, r3, r1
 8007c88:	42ab      	cmp	r3, r5
 8007c8a:	dcf2      	bgt.n	8007c72 <_printf_i+0x216>
 8007c8c:	e7eb      	b.n	8007c66 <_printf_i+0x20a>
 8007c8e:	2500      	movs	r5, #0
 8007c90:	f104 0619 	add.w	r6, r4, #25
 8007c94:	e7f5      	b.n	8007c82 <_printf_i+0x226>
 8007c96:	bf00      	nop
 8007c98:	0800c3b2 	.word	0x0800c3b2
 8007c9c:	0800c3c3 	.word	0x0800c3c3

08007ca0 <_scanf_float>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	b087      	sub	sp, #28
 8007ca6:	4617      	mov	r7, r2
 8007ca8:	9303      	str	r3, [sp, #12]
 8007caa:	688b      	ldr	r3, [r1, #8]
 8007cac:	1e5a      	subs	r2, r3, #1
 8007cae:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007cb2:	bf83      	ittte	hi
 8007cb4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007cb8:	195b      	addhi	r3, r3, r5
 8007cba:	9302      	strhi	r3, [sp, #8]
 8007cbc:	2300      	movls	r3, #0
 8007cbe:	bf86      	itte	hi
 8007cc0:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007cc4:	608b      	strhi	r3, [r1, #8]
 8007cc6:	9302      	strls	r3, [sp, #8]
 8007cc8:	680b      	ldr	r3, [r1, #0]
 8007cca:	468b      	mov	fp, r1
 8007ccc:	2500      	movs	r5, #0
 8007cce:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007cd2:	f84b 3b1c 	str.w	r3, [fp], #28
 8007cd6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007cda:	4680      	mov	r8, r0
 8007cdc:	460c      	mov	r4, r1
 8007cde:	465e      	mov	r6, fp
 8007ce0:	46aa      	mov	sl, r5
 8007ce2:	46a9      	mov	r9, r5
 8007ce4:	9501      	str	r5, [sp, #4]
 8007ce6:	68a2      	ldr	r2, [r4, #8]
 8007ce8:	b152      	cbz	r2, 8007d00 <_scanf_float+0x60>
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	2b4e      	cmp	r3, #78	; 0x4e
 8007cf0:	d864      	bhi.n	8007dbc <_scanf_float+0x11c>
 8007cf2:	2b40      	cmp	r3, #64	; 0x40
 8007cf4:	d83c      	bhi.n	8007d70 <_scanf_float+0xd0>
 8007cf6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007cfa:	b2c8      	uxtb	r0, r1
 8007cfc:	280e      	cmp	r0, #14
 8007cfe:	d93a      	bls.n	8007d76 <_scanf_float+0xd6>
 8007d00:	f1b9 0f00 	cmp.w	r9, #0
 8007d04:	d003      	beq.n	8007d0e <_scanf_float+0x6e>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d0c:	6023      	str	r3, [r4, #0]
 8007d0e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d12:	f1ba 0f01 	cmp.w	sl, #1
 8007d16:	f200 8113 	bhi.w	8007f40 <_scanf_float+0x2a0>
 8007d1a:	455e      	cmp	r6, fp
 8007d1c:	f200 8105 	bhi.w	8007f2a <_scanf_float+0x28a>
 8007d20:	2501      	movs	r5, #1
 8007d22:	4628      	mov	r0, r5
 8007d24:	b007      	add	sp, #28
 8007d26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d2a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007d2e:	2a0d      	cmp	r2, #13
 8007d30:	d8e6      	bhi.n	8007d00 <_scanf_float+0x60>
 8007d32:	a101      	add	r1, pc, #4	; (adr r1, 8007d38 <_scanf_float+0x98>)
 8007d34:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d38:	08007e77 	.word	0x08007e77
 8007d3c:	08007d01 	.word	0x08007d01
 8007d40:	08007d01 	.word	0x08007d01
 8007d44:	08007d01 	.word	0x08007d01
 8007d48:	08007ed7 	.word	0x08007ed7
 8007d4c:	08007eaf 	.word	0x08007eaf
 8007d50:	08007d01 	.word	0x08007d01
 8007d54:	08007d01 	.word	0x08007d01
 8007d58:	08007e85 	.word	0x08007e85
 8007d5c:	08007d01 	.word	0x08007d01
 8007d60:	08007d01 	.word	0x08007d01
 8007d64:	08007d01 	.word	0x08007d01
 8007d68:	08007d01 	.word	0x08007d01
 8007d6c:	08007e3d 	.word	0x08007e3d
 8007d70:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007d74:	e7db      	b.n	8007d2e <_scanf_float+0x8e>
 8007d76:	290e      	cmp	r1, #14
 8007d78:	d8c2      	bhi.n	8007d00 <_scanf_float+0x60>
 8007d7a:	a001      	add	r0, pc, #4	; (adr r0, 8007d80 <_scanf_float+0xe0>)
 8007d7c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d80:	08007e2f 	.word	0x08007e2f
 8007d84:	08007d01 	.word	0x08007d01
 8007d88:	08007e2f 	.word	0x08007e2f
 8007d8c:	08007ec3 	.word	0x08007ec3
 8007d90:	08007d01 	.word	0x08007d01
 8007d94:	08007ddd 	.word	0x08007ddd
 8007d98:	08007e19 	.word	0x08007e19
 8007d9c:	08007e19 	.word	0x08007e19
 8007da0:	08007e19 	.word	0x08007e19
 8007da4:	08007e19 	.word	0x08007e19
 8007da8:	08007e19 	.word	0x08007e19
 8007dac:	08007e19 	.word	0x08007e19
 8007db0:	08007e19 	.word	0x08007e19
 8007db4:	08007e19 	.word	0x08007e19
 8007db8:	08007e19 	.word	0x08007e19
 8007dbc:	2b6e      	cmp	r3, #110	; 0x6e
 8007dbe:	d809      	bhi.n	8007dd4 <_scanf_float+0x134>
 8007dc0:	2b60      	cmp	r3, #96	; 0x60
 8007dc2:	d8b2      	bhi.n	8007d2a <_scanf_float+0x8a>
 8007dc4:	2b54      	cmp	r3, #84	; 0x54
 8007dc6:	d077      	beq.n	8007eb8 <_scanf_float+0x218>
 8007dc8:	2b59      	cmp	r3, #89	; 0x59
 8007dca:	d199      	bne.n	8007d00 <_scanf_float+0x60>
 8007dcc:	2d07      	cmp	r5, #7
 8007dce:	d197      	bne.n	8007d00 <_scanf_float+0x60>
 8007dd0:	2508      	movs	r5, #8
 8007dd2:	e029      	b.n	8007e28 <_scanf_float+0x188>
 8007dd4:	2b74      	cmp	r3, #116	; 0x74
 8007dd6:	d06f      	beq.n	8007eb8 <_scanf_float+0x218>
 8007dd8:	2b79      	cmp	r3, #121	; 0x79
 8007dda:	e7f6      	b.n	8007dca <_scanf_float+0x12a>
 8007ddc:	6821      	ldr	r1, [r4, #0]
 8007dde:	05c8      	lsls	r0, r1, #23
 8007de0:	d51a      	bpl.n	8007e18 <_scanf_float+0x178>
 8007de2:	9b02      	ldr	r3, [sp, #8]
 8007de4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007de8:	6021      	str	r1, [r4, #0]
 8007dea:	f109 0901 	add.w	r9, r9, #1
 8007dee:	b11b      	cbz	r3, 8007df8 <_scanf_float+0x158>
 8007df0:	3b01      	subs	r3, #1
 8007df2:	3201      	adds	r2, #1
 8007df4:	9302      	str	r3, [sp, #8]
 8007df6:	60a2      	str	r2, [r4, #8]
 8007df8:	68a3      	ldr	r3, [r4, #8]
 8007dfa:	3b01      	subs	r3, #1
 8007dfc:	60a3      	str	r3, [r4, #8]
 8007dfe:	6923      	ldr	r3, [r4, #16]
 8007e00:	3301      	adds	r3, #1
 8007e02:	6123      	str	r3, [r4, #16]
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3b01      	subs	r3, #1
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	607b      	str	r3, [r7, #4]
 8007e0c:	f340 8084 	ble.w	8007f18 <_scanf_float+0x278>
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	3301      	adds	r3, #1
 8007e14:	603b      	str	r3, [r7, #0]
 8007e16:	e766      	b.n	8007ce6 <_scanf_float+0x46>
 8007e18:	eb1a 0f05 	cmn.w	sl, r5
 8007e1c:	f47f af70 	bne.w	8007d00 <_scanf_float+0x60>
 8007e20:	6822      	ldr	r2, [r4, #0]
 8007e22:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007e26:	6022      	str	r2, [r4, #0]
 8007e28:	f806 3b01 	strb.w	r3, [r6], #1
 8007e2c:	e7e4      	b.n	8007df8 <_scanf_float+0x158>
 8007e2e:	6822      	ldr	r2, [r4, #0]
 8007e30:	0610      	lsls	r0, r2, #24
 8007e32:	f57f af65 	bpl.w	8007d00 <_scanf_float+0x60>
 8007e36:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e3a:	e7f4      	b.n	8007e26 <_scanf_float+0x186>
 8007e3c:	f1ba 0f00 	cmp.w	sl, #0
 8007e40:	d10e      	bne.n	8007e60 <_scanf_float+0x1c0>
 8007e42:	f1b9 0f00 	cmp.w	r9, #0
 8007e46:	d10e      	bne.n	8007e66 <_scanf_float+0x1c6>
 8007e48:	6822      	ldr	r2, [r4, #0]
 8007e4a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e4e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e52:	d108      	bne.n	8007e66 <_scanf_float+0x1c6>
 8007e54:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007e58:	6022      	str	r2, [r4, #0]
 8007e5a:	f04f 0a01 	mov.w	sl, #1
 8007e5e:	e7e3      	b.n	8007e28 <_scanf_float+0x188>
 8007e60:	f1ba 0f02 	cmp.w	sl, #2
 8007e64:	d055      	beq.n	8007f12 <_scanf_float+0x272>
 8007e66:	2d01      	cmp	r5, #1
 8007e68:	d002      	beq.n	8007e70 <_scanf_float+0x1d0>
 8007e6a:	2d04      	cmp	r5, #4
 8007e6c:	f47f af48 	bne.w	8007d00 <_scanf_float+0x60>
 8007e70:	3501      	adds	r5, #1
 8007e72:	b2ed      	uxtb	r5, r5
 8007e74:	e7d8      	b.n	8007e28 <_scanf_float+0x188>
 8007e76:	f1ba 0f01 	cmp.w	sl, #1
 8007e7a:	f47f af41 	bne.w	8007d00 <_scanf_float+0x60>
 8007e7e:	f04f 0a02 	mov.w	sl, #2
 8007e82:	e7d1      	b.n	8007e28 <_scanf_float+0x188>
 8007e84:	b97d      	cbnz	r5, 8007ea6 <_scanf_float+0x206>
 8007e86:	f1b9 0f00 	cmp.w	r9, #0
 8007e8a:	f47f af3c 	bne.w	8007d06 <_scanf_float+0x66>
 8007e8e:	6822      	ldr	r2, [r4, #0]
 8007e90:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007e94:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007e98:	f47f af39 	bne.w	8007d0e <_scanf_float+0x6e>
 8007e9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007ea0:	6022      	str	r2, [r4, #0]
 8007ea2:	2501      	movs	r5, #1
 8007ea4:	e7c0      	b.n	8007e28 <_scanf_float+0x188>
 8007ea6:	2d03      	cmp	r5, #3
 8007ea8:	d0e2      	beq.n	8007e70 <_scanf_float+0x1d0>
 8007eaa:	2d05      	cmp	r5, #5
 8007eac:	e7de      	b.n	8007e6c <_scanf_float+0x1cc>
 8007eae:	2d02      	cmp	r5, #2
 8007eb0:	f47f af26 	bne.w	8007d00 <_scanf_float+0x60>
 8007eb4:	2503      	movs	r5, #3
 8007eb6:	e7b7      	b.n	8007e28 <_scanf_float+0x188>
 8007eb8:	2d06      	cmp	r5, #6
 8007eba:	f47f af21 	bne.w	8007d00 <_scanf_float+0x60>
 8007ebe:	2507      	movs	r5, #7
 8007ec0:	e7b2      	b.n	8007e28 <_scanf_float+0x188>
 8007ec2:	6822      	ldr	r2, [r4, #0]
 8007ec4:	0591      	lsls	r1, r2, #22
 8007ec6:	f57f af1b 	bpl.w	8007d00 <_scanf_float+0x60>
 8007eca:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007ece:	6022      	str	r2, [r4, #0]
 8007ed0:	f8cd 9004 	str.w	r9, [sp, #4]
 8007ed4:	e7a8      	b.n	8007e28 <_scanf_float+0x188>
 8007ed6:	6822      	ldr	r2, [r4, #0]
 8007ed8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007edc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007ee0:	d006      	beq.n	8007ef0 <_scanf_float+0x250>
 8007ee2:	0550      	lsls	r0, r2, #21
 8007ee4:	f57f af0c 	bpl.w	8007d00 <_scanf_float+0x60>
 8007ee8:	f1b9 0f00 	cmp.w	r9, #0
 8007eec:	f43f af0f 	beq.w	8007d0e <_scanf_float+0x6e>
 8007ef0:	0591      	lsls	r1, r2, #22
 8007ef2:	bf58      	it	pl
 8007ef4:	9901      	ldrpl	r1, [sp, #4]
 8007ef6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007efa:	bf58      	it	pl
 8007efc:	eba9 0101 	subpl.w	r1, r9, r1
 8007f00:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007f04:	bf58      	it	pl
 8007f06:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007f0a:	6022      	str	r2, [r4, #0]
 8007f0c:	f04f 0900 	mov.w	r9, #0
 8007f10:	e78a      	b.n	8007e28 <_scanf_float+0x188>
 8007f12:	f04f 0a03 	mov.w	sl, #3
 8007f16:	e787      	b.n	8007e28 <_scanf_float+0x188>
 8007f18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007f1c:	4639      	mov	r1, r7
 8007f1e:	4640      	mov	r0, r8
 8007f20:	4798      	blx	r3
 8007f22:	2800      	cmp	r0, #0
 8007f24:	f43f aedf 	beq.w	8007ce6 <_scanf_float+0x46>
 8007f28:	e6ea      	b.n	8007d00 <_scanf_float+0x60>
 8007f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f2e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f32:	463a      	mov	r2, r7
 8007f34:	4640      	mov	r0, r8
 8007f36:	4798      	blx	r3
 8007f38:	6923      	ldr	r3, [r4, #16]
 8007f3a:	3b01      	subs	r3, #1
 8007f3c:	6123      	str	r3, [r4, #16]
 8007f3e:	e6ec      	b.n	8007d1a <_scanf_float+0x7a>
 8007f40:	1e6b      	subs	r3, r5, #1
 8007f42:	2b06      	cmp	r3, #6
 8007f44:	d825      	bhi.n	8007f92 <_scanf_float+0x2f2>
 8007f46:	2d02      	cmp	r5, #2
 8007f48:	d836      	bhi.n	8007fb8 <_scanf_float+0x318>
 8007f4a:	455e      	cmp	r6, fp
 8007f4c:	f67f aee8 	bls.w	8007d20 <_scanf_float+0x80>
 8007f50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f54:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f58:	463a      	mov	r2, r7
 8007f5a:	4640      	mov	r0, r8
 8007f5c:	4798      	blx	r3
 8007f5e:	6923      	ldr	r3, [r4, #16]
 8007f60:	3b01      	subs	r3, #1
 8007f62:	6123      	str	r3, [r4, #16]
 8007f64:	e7f1      	b.n	8007f4a <_scanf_float+0x2aa>
 8007f66:	9802      	ldr	r0, [sp, #8]
 8007f68:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007f6c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007f70:	9002      	str	r0, [sp, #8]
 8007f72:	463a      	mov	r2, r7
 8007f74:	4640      	mov	r0, r8
 8007f76:	4798      	blx	r3
 8007f78:	6923      	ldr	r3, [r4, #16]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	6123      	str	r3, [r4, #16]
 8007f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f82:	fa5f fa8a 	uxtb.w	sl, sl
 8007f86:	f1ba 0f02 	cmp.w	sl, #2
 8007f8a:	d1ec      	bne.n	8007f66 <_scanf_float+0x2c6>
 8007f8c:	3d03      	subs	r5, #3
 8007f8e:	b2ed      	uxtb	r5, r5
 8007f90:	1b76      	subs	r6, r6, r5
 8007f92:	6823      	ldr	r3, [r4, #0]
 8007f94:	05da      	lsls	r2, r3, #23
 8007f96:	d52f      	bpl.n	8007ff8 <_scanf_float+0x358>
 8007f98:	055b      	lsls	r3, r3, #21
 8007f9a:	d510      	bpl.n	8007fbe <_scanf_float+0x31e>
 8007f9c:	455e      	cmp	r6, fp
 8007f9e:	f67f aebf 	bls.w	8007d20 <_scanf_float+0x80>
 8007fa2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fa6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007faa:	463a      	mov	r2, r7
 8007fac:	4640      	mov	r0, r8
 8007fae:	4798      	blx	r3
 8007fb0:	6923      	ldr	r3, [r4, #16]
 8007fb2:	3b01      	subs	r3, #1
 8007fb4:	6123      	str	r3, [r4, #16]
 8007fb6:	e7f1      	b.n	8007f9c <_scanf_float+0x2fc>
 8007fb8:	46aa      	mov	sl, r5
 8007fba:	9602      	str	r6, [sp, #8]
 8007fbc:	e7df      	b.n	8007f7e <_scanf_float+0x2de>
 8007fbe:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007fc2:	6923      	ldr	r3, [r4, #16]
 8007fc4:	2965      	cmp	r1, #101	; 0x65
 8007fc6:	f103 33ff 	add.w	r3, r3, #4294967295
 8007fca:	f106 35ff 	add.w	r5, r6, #4294967295
 8007fce:	6123      	str	r3, [r4, #16]
 8007fd0:	d00c      	beq.n	8007fec <_scanf_float+0x34c>
 8007fd2:	2945      	cmp	r1, #69	; 0x45
 8007fd4:	d00a      	beq.n	8007fec <_scanf_float+0x34c>
 8007fd6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007fda:	463a      	mov	r2, r7
 8007fdc:	4640      	mov	r0, r8
 8007fde:	4798      	blx	r3
 8007fe0:	6923      	ldr	r3, [r4, #16]
 8007fe2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007fe6:	3b01      	subs	r3, #1
 8007fe8:	1eb5      	subs	r5, r6, #2
 8007fea:	6123      	str	r3, [r4, #16]
 8007fec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007ff0:	463a      	mov	r2, r7
 8007ff2:	4640      	mov	r0, r8
 8007ff4:	4798      	blx	r3
 8007ff6:	462e      	mov	r6, r5
 8007ff8:	6825      	ldr	r5, [r4, #0]
 8007ffa:	f015 0510 	ands.w	r5, r5, #16
 8007ffe:	d158      	bne.n	80080b2 <_scanf_float+0x412>
 8008000:	7035      	strb	r5, [r6, #0]
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800800c:	d11c      	bne.n	8008048 <_scanf_float+0x3a8>
 800800e:	9b01      	ldr	r3, [sp, #4]
 8008010:	454b      	cmp	r3, r9
 8008012:	eba3 0209 	sub.w	r2, r3, r9
 8008016:	d124      	bne.n	8008062 <_scanf_float+0x3c2>
 8008018:	2200      	movs	r2, #0
 800801a:	4659      	mov	r1, fp
 800801c:	4640      	mov	r0, r8
 800801e:	f7ff f9c7 	bl	80073b0 <_strtod_r>
 8008022:	9b03      	ldr	r3, [sp, #12]
 8008024:	6821      	ldr	r1, [r4, #0]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f011 0f02 	tst.w	r1, #2
 800802c:	ec57 6b10 	vmov	r6, r7, d0
 8008030:	f103 0204 	add.w	r2, r3, #4
 8008034:	d020      	beq.n	8008078 <_scanf_float+0x3d8>
 8008036:	9903      	ldr	r1, [sp, #12]
 8008038:	600a      	str	r2, [r1, #0]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	e9c3 6700 	strd	r6, r7, [r3]
 8008040:	68e3      	ldr	r3, [r4, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60e3      	str	r3, [r4, #12]
 8008046:	e66c      	b.n	8007d22 <_scanf_float+0x82>
 8008048:	9b04      	ldr	r3, [sp, #16]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d0e4      	beq.n	8008018 <_scanf_float+0x378>
 800804e:	9905      	ldr	r1, [sp, #20]
 8008050:	230a      	movs	r3, #10
 8008052:	462a      	mov	r2, r5
 8008054:	3101      	adds	r1, #1
 8008056:	4640      	mov	r0, r8
 8008058:	f002 fa42 	bl	800a4e0 <_strtol_r>
 800805c:	9b04      	ldr	r3, [sp, #16]
 800805e:	9e05      	ldr	r6, [sp, #20]
 8008060:	1ac2      	subs	r2, r0, r3
 8008062:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008066:	429e      	cmp	r6, r3
 8008068:	bf28      	it	cs
 800806a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800806e:	4912      	ldr	r1, [pc, #72]	; (80080b8 <_scanf_float+0x418>)
 8008070:	4630      	mov	r0, r6
 8008072:	f000 f8f9 	bl	8008268 <siprintf>
 8008076:	e7cf      	b.n	8008018 <_scanf_float+0x378>
 8008078:	f011 0f04 	tst.w	r1, #4
 800807c:	9903      	ldr	r1, [sp, #12]
 800807e:	600a      	str	r2, [r1, #0]
 8008080:	d1db      	bne.n	800803a <_scanf_float+0x39a>
 8008082:	f8d3 8000 	ldr.w	r8, [r3]
 8008086:	ee10 2a10 	vmov	r2, s0
 800808a:	ee10 0a10 	vmov	r0, s0
 800808e:	463b      	mov	r3, r7
 8008090:	4639      	mov	r1, r7
 8008092:	f7f8 fd6b 	bl	8000b6c <__aeabi_dcmpun>
 8008096:	b128      	cbz	r0, 80080a4 <_scanf_float+0x404>
 8008098:	4808      	ldr	r0, [pc, #32]	; (80080bc <_scanf_float+0x41c>)
 800809a:	f000 fa05 	bl	80084a8 <nanf>
 800809e:	ed88 0a00 	vstr	s0, [r8]
 80080a2:	e7cd      	b.n	8008040 <_scanf_float+0x3a0>
 80080a4:	4630      	mov	r0, r6
 80080a6:	4639      	mov	r1, r7
 80080a8:	f7f8 fdbe 	bl	8000c28 <__aeabi_d2f>
 80080ac:	f8c8 0000 	str.w	r0, [r8]
 80080b0:	e7c6      	b.n	8008040 <_scanf_float+0x3a0>
 80080b2:	2500      	movs	r5, #0
 80080b4:	e635      	b.n	8007d22 <_scanf_float+0x82>
 80080b6:	bf00      	nop
 80080b8:	0800c3d4 	.word	0x0800c3d4
 80080bc:	0800c771 	.word	0x0800c771

080080c0 <std>:
 80080c0:	2300      	movs	r3, #0
 80080c2:	b510      	push	{r4, lr}
 80080c4:	4604      	mov	r4, r0
 80080c6:	e9c0 3300 	strd	r3, r3, [r0]
 80080ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080ce:	6083      	str	r3, [r0, #8]
 80080d0:	8181      	strh	r1, [r0, #12]
 80080d2:	6643      	str	r3, [r0, #100]	; 0x64
 80080d4:	81c2      	strh	r2, [r0, #14]
 80080d6:	6183      	str	r3, [r0, #24]
 80080d8:	4619      	mov	r1, r3
 80080da:	2208      	movs	r2, #8
 80080dc:	305c      	adds	r0, #92	; 0x5c
 80080de:	f000 f926 	bl	800832e <memset>
 80080e2:	4b0d      	ldr	r3, [pc, #52]	; (8008118 <std+0x58>)
 80080e4:	6263      	str	r3, [r4, #36]	; 0x24
 80080e6:	4b0d      	ldr	r3, [pc, #52]	; (800811c <std+0x5c>)
 80080e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80080ea:	4b0d      	ldr	r3, [pc, #52]	; (8008120 <std+0x60>)
 80080ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80080ee:	4b0d      	ldr	r3, [pc, #52]	; (8008124 <std+0x64>)
 80080f0:	6323      	str	r3, [r4, #48]	; 0x30
 80080f2:	4b0d      	ldr	r3, [pc, #52]	; (8008128 <std+0x68>)
 80080f4:	6224      	str	r4, [r4, #32]
 80080f6:	429c      	cmp	r4, r3
 80080f8:	d006      	beq.n	8008108 <std+0x48>
 80080fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80080fe:	4294      	cmp	r4, r2
 8008100:	d002      	beq.n	8008108 <std+0x48>
 8008102:	33d0      	adds	r3, #208	; 0xd0
 8008104:	429c      	cmp	r4, r3
 8008106:	d105      	bne.n	8008114 <std+0x54>
 8008108:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800810c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008110:	f000 b9ae 	b.w	8008470 <__retarget_lock_init_recursive>
 8008114:	bd10      	pop	{r4, pc}
 8008116:	bf00      	nop
 8008118:	080082a9 	.word	0x080082a9
 800811c:	080082cb 	.word	0x080082cb
 8008120:	08008303 	.word	0x08008303
 8008124:	08008327 	.word	0x08008327
 8008128:	200006b0 	.word	0x200006b0

0800812c <stdio_exit_handler>:
 800812c:	4a02      	ldr	r2, [pc, #8]	; (8008138 <stdio_exit_handler+0xc>)
 800812e:	4903      	ldr	r1, [pc, #12]	; (800813c <stdio_exit_handler+0x10>)
 8008130:	4803      	ldr	r0, [pc, #12]	; (8008140 <stdio_exit_handler+0x14>)
 8008132:	f000 b869 	b.w	8008208 <_fwalk_sglue>
 8008136:	bf00      	nop
 8008138:	20000044 	.word	0x20000044
 800813c:	0800ab45 	.word	0x0800ab45
 8008140:	200001bc 	.word	0x200001bc

08008144 <cleanup_stdio>:
 8008144:	6841      	ldr	r1, [r0, #4]
 8008146:	4b0c      	ldr	r3, [pc, #48]	; (8008178 <cleanup_stdio+0x34>)
 8008148:	4299      	cmp	r1, r3
 800814a:	b510      	push	{r4, lr}
 800814c:	4604      	mov	r4, r0
 800814e:	d001      	beq.n	8008154 <cleanup_stdio+0x10>
 8008150:	f002 fcf8 	bl	800ab44 <_fflush_r>
 8008154:	68a1      	ldr	r1, [r4, #8]
 8008156:	4b09      	ldr	r3, [pc, #36]	; (800817c <cleanup_stdio+0x38>)
 8008158:	4299      	cmp	r1, r3
 800815a:	d002      	beq.n	8008162 <cleanup_stdio+0x1e>
 800815c:	4620      	mov	r0, r4
 800815e:	f002 fcf1 	bl	800ab44 <_fflush_r>
 8008162:	68e1      	ldr	r1, [r4, #12]
 8008164:	4b06      	ldr	r3, [pc, #24]	; (8008180 <cleanup_stdio+0x3c>)
 8008166:	4299      	cmp	r1, r3
 8008168:	d004      	beq.n	8008174 <cleanup_stdio+0x30>
 800816a:	4620      	mov	r0, r4
 800816c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008170:	f002 bce8 	b.w	800ab44 <_fflush_r>
 8008174:	bd10      	pop	{r4, pc}
 8008176:	bf00      	nop
 8008178:	200006b0 	.word	0x200006b0
 800817c:	20000718 	.word	0x20000718
 8008180:	20000780 	.word	0x20000780

08008184 <global_stdio_init.part.0>:
 8008184:	b510      	push	{r4, lr}
 8008186:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <global_stdio_init.part.0+0x30>)
 8008188:	4c0b      	ldr	r4, [pc, #44]	; (80081b8 <global_stdio_init.part.0+0x34>)
 800818a:	4a0c      	ldr	r2, [pc, #48]	; (80081bc <global_stdio_init.part.0+0x38>)
 800818c:	601a      	str	r2, [r3, #0]
 800818e:	4620      	mov	r0, r4
 8008190:	2200      	movs	r2, #0
 8008192:	2104      	movs	r1, #4
 8008194:	f7ff ff94 	bl	80080c0 <std>
 8008198:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800819c:	2201      	movs	r2, #1
 800819e:	2109      	movs	r1, #9
 80081a0:	f7ff ff8e 	bl	80080c0 <std>
 80081a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80081a8:	2202      	movs	r2, #2
 80081aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081ae:	2112      	movs	r1, #18
 80081b0:	f7ff bf86 	b.w	80080c0 <std>
 80081b4:	200007e8 	.word	0x200007e8
 80081b8:	200006b0 	.word	0x200006b0
 80081bc:	0800812d 	.word	0x0800812d

080081c0 <__sfp_lock_acquire>:
 80081c0:	4801      	ldr	r0, [pc, #4]	; (80081c8 <__sfp_lock_acquire+0x8>)
 80081c2:	f000 b956 	b.w	8008472 <__retarget_lock_acquire_recursive>
 80081c6:	bf00      	nop
 80081c8:	200007f1 	.word	0x200007f1

080081cc <__sfp_lock_release>:
 80081cc:	4801      	ldr	r0, [pc, #4]	; (80081d4 <__sfp_lock_release+0x8>)
 80081ce:	f000 b951 	b.w	8008474 <__retarget_lock_release_recursive>
 80081d2:	bf00      	nop
 80081d4:	200007f1 	.word	0x200007f1

080081d8 <__sinit>:
 80081d8:	b510      	push	{r4, lr}
 80081da:	4604      	mov	r4, r0
 80081dc:	f7ff fff0 	bl	80081c0 <__sfp_lock_acquire>
 80081e0:	6a23      	ldr	r3, [r4, #32]
 80081e2:	b11b      	cbz	r3, 80081ec <__sinit+0x14>
 80081e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e8:	f7ff bff0 	b.w	80081cc <__sfp_lock_release>
 80081ec:	4b04      	ldr	r3, [pc, #16]	; (8008200 <__sinit+0x28>)
 80081ee:	6223      	str	r3, [r4, #32]
 80081f0:	4b04      	ldr	r3, [pc, #16]	; (8008204 <__sinit+0x2c>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1f5      	bne.n	80081e4 <__sinit+0xc>
 80081f8:	f7ff ffc4 	bl	8008184 <global_stdio_init.part.0>
 80081fc:	e7f2      	b.n	80081e4 <__sinit+0xc>
 80081fe:	bf00      	nop
 8008200:	08008145 	.word	0x08008145
 8008204:	200007e8 	.word	0x200007e8

08008208 <_fwalk_sglue>:
 8008208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800820c:	4607      	mov	r7, r0
 800820e:	4688      	mov	r8, r1
 8008210:	4614      	mov	r4, r2
 8008212:	2600      	movs	r6, #0
 8008214:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008218:	f1b9 0901 	subs.w	r9, r9, #1
 800821c:	d505      	bpl.n	800822a <_fwalk_sglue+0x22>
 800821e:	6824      	ldr	r4, [r4, #0]
 8008220:	2c00      	cmp	r4, #0
 8008222:	d1f7      	bne.n	8008214 <_fwalk_sglue+0xc>
 8008224:	4630      	mov	r0, r6
 8008226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800822a:	89ab      	ldrh	r3, [r5, #12]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d907      	bls.n	8008240 <_fwalk_sglue+0x38>
 8008230:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008234:	3301      	adds	r3, #1
 8008236:	d003      	beq.n	8008240 <_fwalk_sglue+0x38>
 8008238:	4629      	mov	r1, r5
 800823a:	4638      	mov	r0, r7
 800823c:	47c0      	blx	r8
 800823e:	4306      	orrs	r6, r0
 8008240:	3568      	adds	r5, #104	; 0x68
 8008242:	e7e9      	b.n	8008218 <_fwalk_sglue+0x10>

08008244 <iprintf>:
 8008244:	b40f      	push	{r0, r1, r2, r3}
 8008246:	b507      	push	{r0, r1, r2, lr}
 8008248:	4906      	ldr	r1, [pc, #24]	; (8008264 <iprintf+0x20>)
 800824a:	ab04      	add	r3, sp, #16
 800824c:	6808      	ldr	r0, [r1, #0]
 800824e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008252:	6881      	ldr	r1, [r0, #8]
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	f002 fad5 	bl	800a804 <_vfiprintf_r>
 800825a:	b003      	add	sp, #12
 800825c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008260:	b004      	add	sp, #16
 8008262:	4770      	bx	lr
 8008264:	20000208 	.word	0x20000208

08008268 <siprintf>:
 8008268:	b40e      	push	{r1, r2, r3}
 800826a:	b500      	push	{lr}
 800826c:	b09c      	sub	sp, #112	; 0x70
 800826e:	ab1d      	add	r3, sp, #116	; 0x74
 8008270:	9002      	str	r0, [sp, #8]
 8008272:	9006      	str	r0, [sp, #24]
 8008274:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008278:	4809      	ldr	r0, [pc, #36]	; (80082a0 <siprintf+0x38>)
 800827a:	9107      	str	r1, [sp, #28]
 800827c:	9104      	str	r1, [sp, #16]
 800827e:	4909      	ldr	r1, [pc, #36]	; (80082a4 <siprintf+0x3c>)
 8008280:	f853 2b04 	ldr.w	r2, [r3], #4
 8008284:	9105      	str	r1, [sp, #20]
 8008286:	6800      	ldr	r0, [r0, #0]
 8008288:	9301      	str	r3, [sp, #4]
 800828a:	a902      	add	r1, sp, #8
 800828c:	f002 f992 	bl	800a5b4 <_svfiprintf_r>
 8008290:	9b02      	ldr	r3, [sp, #8]
 8008292:	2200      	movs	r2, #0
 8008294:	701a      	strb	r2, [r3, #0]
 8008296:	b01c      	add	sp, #112	; 0x70
 8008298:	f85d eb04 	ldr.w	lr, [sp], #4
 800829c:	b003      	add	sp, #12
 800829e:	4770      	bx	lr
 80082a0:	20000208 	.word	0x20000208
 80082a4:	ffff0208 	.word	0xffff0208

080082a8 <__sread>:
 80082a8:	b510      	push	{r4, lr}
 80082aa:	460c      	mov	r4, r1
 80082ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b0:	f000 f890 	bl	80083d4 <_read_r>
 80082b4:	2800      	cmp	r0, #0
 80082b6:	bfab      	itete	ge
 80082b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80082ba:	89a3      	ldrhlt	r3, [r4, #12]
 80082bc:	181b      	addge	r3, r3, r0
 80082be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80082c2:	bfac      	ite	ge
 80082c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80082c6:	81a3      	strhlt	r3, [r4, #12]
 80082c8:	bd10      	pop	{r4, pc}

080082ca <__swrite>:
 80082ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082ce:	461f      	mov	r7, r3
 80082d0:	898b      	ldrh	r3, [r1, #12]
 80082d2:	05db      	lsls	r3, r3, #23
 80082d4:	4605      	mov	r5, r0
 80082d6:	460c      	mov	r4, r1
 80082d8:	4616      	mov	r6, r2
 80082da:	d505      	bpl.n	80082e8 <__swrite+0x1e>
 80082dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082e0:	2302      	movs	r3, #2
 80082e2:	2200      	movs	r2, #0
 80082e4:	f000 f864 	bl	80083b0 <_lseek_r>
 80082e8:	89a3      	ldrh	r3, [r4, #12]
 80082ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082f2:	81a3      	strh	r3, [r4, #12]
 80082f4:	4632      	mov	r2, r6
 80082f6:	463b      	mov	r3, r7
 80082f8:	4628      	mov	r0, r5
 80082fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082fe:	f000 b87b 	b.w	80083f8 <_write_r>

08008302 <__sseek>:
 8008302:	b510      	push	{r4, lr}
 8008304:	460c      	mov	r4, r1
 8008306:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800830a:	f000 f851 	bl	80083b0 <_lseek_r>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	89a3      	ldrh	r3, [r4, #12]
 8008312:	bf15      	itete	ne
 8008314:	6560      	strne	r0, [r4, #84]	; 0x54
 8008316:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800831a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800831e:	81a3      	strheq	r3, [r4, #12]
 8008320:	bf18      	it	ne
 8008322:	81a3      	strhne	r3, [r4, #12]
 8008324:	bd10      	pop	{r4, pc}

08008326 <__sclose>:
 8008326:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800832a:	f000 b831 	b.w	8008390 <_close_r>

0800832e <memset>:
 800832e:	4402      	add	r2, r0
 8008330:	4603      	mov	r3, r0
 8008332:	4293      	cmp	r3, r2
 8008334:	d100      	bne.n	8008338 <memset+0xa>
 8008336:	4770      	bx	lr
 8008338:	f803 1b01 	strb.w	r1, [r3], #1
 800833c:	e7f9      	b.n	8008332 <memset+0x4>

0800833e <strncmp>:
 800833e:	b510      	push	{r4, lr}
 8008340:	b16a      	cbz	r2, 800835e <strncmp+0x20>
 8008342:	3901      	subs	r1, #1
 8008344:	1884      	adds	r4, r0, r2
 8008346:	f810 2b01 	ldrb.w	r2, [r0], #1
 800834a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800834e:	429a      	cmp	r2, r3
 8008350:	d103      	bne.n	800835a <strncmp+0x1c>
 8008352:	42a0      	cmp	r0, r4
 8008354:	d001      	beq.n	800835a <strncmp+0x1c>
 8008356:	2a00      	cmp	r2, #0
 8008358:	d1f5      	bne.n	8008346 <strncmp+0x8>
 800835a:	1ad0      	subs	r0, r2, r3
 800835c:	bd10      	pop	{r4, pc}
 800835e:	4610      	mov	r0, r2
 8008360:	e7fc      	b.n	800835c <strncmp+0x1e>

08008362 <strncpy>:
 8008362:	b510      	push	{r4, lr}
 8008364:	3901      	subs	r1, #1
 8008366:	4603      	mov	r3, r0
 8008368:	b132      	cbz	r2, 8008378 <strncpy+0x16>
 800836a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800836e:	f803 4b01 	strb.w	r4, [r3], #1
 8008372:	3a01      	subs	r2, #1
 8008374:	2c00      	cmp	r4, #0
 8008376:	d1f7      	bne.n	8008368 <strncpy+0x6>
 8008378:	441a      	add	r2, r3
 800837a:	2100      	movs	r1, #0
 800837c:	4293      	cmp	r3, r2
 800837e:	d100      	bne.n	8008382 <strncpy+0x20>
 8008380:	bd10      	pop	{r4, pc}
 8008382:	f803 1b01 	strb.w	r1, [r3], #1
 8008386:	e7f9      	b.n	800837c <strncpy+0x1a>

08008388 <_localeconv_r>:
 8008388:	4800      	ldr	r0, [pc, #0]	; (800838c <_localeconv_r+0x4>)
 800838a:	4770      	bx	lr
 800838c:	20000140 	.word	0x20000140

08008390 <_close_r>:
 8008390:	b538      	push	{r3, r4, r5, lr}
 8008392:	4d06      	ldr	r5, [pc, #24]	; (80083ac <_close_r+0x1c>)
 8008394:	2300      	movs	r3, #0
 8008396:	4604      	mov	r4, r0
 8008398:	4608      	mov	r0, r1
 800839a:	602b      	str	r3, [r5, #0]
 800839c:	f7fa fe79 	bl	8003092 <_close>
 80083a0:	1c43      	adds	r3, r0, #1
 80083a2:	d102      	bne.n	80083aa <_close_r+0x1a>
 80083a4:	682b      	ldr	r3, [r5, #0]
 80083a6:	b103      	cbz	r3, 80083aa <_close_r+0x1a>
 80083a8:	6023      	str	r3, [r4, #0]
 80083aa:	bd38      	pop	{r3, r4, r5, pc}
 80083ac:	200007ec 	.word	0x200007ec

080083b0 <_lseek_r>:
 80083b0:	b538      	push	{r3, r4, r5, lr}
 80083b2:	4d07      	ldr	r5, [pc, #28]	; (80083d0 <_lseek_r+0x20>)
 80083b4:	4604      	mov	r4, r0
 80083b6:	4608      	mov	r0, r1
 80083b8:	4611      	mov	r1, r2
 80083ba:	2200      	movs	r2, #0
 80083bc:	602a      	str	r2, [r5, #0]
 80083be:	461a      	mov	r2, r3
 80083c0:	f7fa fe8e 	bl	80030e0 <_lseek>
 80083c4:	1c43      	adds	r3, r0, #1
 80083c6:	d102      	bne.n	80083ce <_lseek_r+0x1e>
 80083c8:	682b      	ldr	r3, [r5, #0]
 80083ca:	b103      	cbz	r3, 80083ce <_lseek_r+0x1e>
 80083cc:	6023      	str	r3, [r4, #0]
 80083ce:	bd38      	pop	{r3, r4, r5, pc}
 80083d0:	200007ec 	.word	0x200007ec

080083d4 <_read_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d07      	ldr	r5, [pc, #28]	; (80083f4 <_read_r+0x20>)
 80083d8:	4604      	mov	r4, r0
 80083da:	4608      	mov	r0, r1
 80083dc:	4611      	mov	r1, r2
 80083de:	2200      	movs	r2, #0
 80083e0:	602a      	str	r2, [r5, #0]
 80083e2:	461a      	mov	r2, r3
 80083e4:	f7fa fe1c 	bl	8003020 <_read>
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	d102      	bne.n	80083f2 <_read_r+0x1e>
 80083ec:	682b      	ldr	r3, [r5, #0]
 80083ee:	b103      	cbz	r3, 80083f2 <_read_r+0x1e>
 80083f0:	6023      	str	r3, [r4, #0]
 80083f2:	bd38      	pop	{r3, r4, r5, pc}
 80083f4:	200007ec 	.word	0x200007ec

080083f8 <_write_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d07      	ldr	r5, [pc, #28]	; (8008418 <_write_r+0x20>)
 80083fc:	4604      	mov	r4, r0
 80083fe:	4608      	mov	r0, r1
 8008400:	4611      	mov	r1, r2
 8008402:	2200      	movs	r2, #0
 8008404:	602a      	str	r2, [r5, #0]
 8008406:	461a      	mov	r2, r3
 8008408:	f7fa fe27 	bl	800305a <_write>
 800840c:	1c43      	adds	r3, r0, #1
 800840e:	d102      	bne.n	8008416 <_write_r+0x1e>
 8008410:	682b      	ldr	r3, [r5, #0]
 8008412:	b103      	cbz	r3, 8008416 <_write_r+0x1e>
 8008414:	6023      	str	r3, [r4, #0]
 8008416:	bd38      	pop	{r3, r4, r5, pc}
 8008418:	200007ec 	.word	0x200007ec

0800841c <__errno>:
 800841c:	4b01      	ldr	r3, [pc, #4]	; (8008424 <__errno+0x8>)
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	20000208 	.word	0x20000208

08008428 <__libc_init_array>:
 8008428:	b570      	push	{r4, r5, r6, lr}
 800842a:	4d0d      	ldr	r5, [pc, #52]	; (8008460 <__libc_init_array+0x38>)
 800842c:	4c0d      	ldr	r4, [pc, #52]	; (8008464 <__libc_init_array+0x3c>)
 800842e:	1b64      	subs	r4, r4, r5
 8008430:	10a4      	asrs	r4, r4, #2
 8008432:	2600      	movs	r6, #0
 8008434:	42a6      	cmp	r6, r4
 8008436:	d109      	bne.n	800844c <__libc_init_array+0x24>
 8008438:	4d0b      	ldr	r5, [pc, #44]	; (8008468 <__libc_init_array+0x40>)
 800843a:	4c0c      	ldr	r4, [pc, #48]	; (800846c <__libc_init_array+0x44>)
 800843c:	f003 ff54 	bl	800c2e8 <_init>
 8008440:	1b64      	subs	r4, r4, r5
 8008442:	10a4      	asrs	r4, r4, #2
 8008444:	2600      	movs	r6, #0
 8008446:	42a6      	cmp	r6, r4
 8008448:	d105      	bne.n	8008456 <__libc_init_array+0x2e>
 800844a:	bd70      	pop	{r4, r5, r6, pc}
 800844c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008450:	4798      	blx	r3
 8008452:	3601      	adds	r6, #1
 8008454:	e7ee      	b.n	8008434 <__libc_init_array+0xc>
 8008456:	f855 3b04 	ldr.w	r3, [r5], #4
 800845a:	4798      	blx	r3
 800845c:	3601      	adds	r6, #1
 800845e:	e7f2      	b.n	8008446 <__libc_init_array+0x1e>
 8008460:	0800c958 	.word	0x0800c958
 8008464:	0800c958 	.word	0x0800c958
 8008468:	0800c958 	.word	0x0800c958
 800846c:	0800c95c 	.word	0x0800c95c

08008470 <__retarget_lock_init_recursive>:
 8008470:	4770      	bx	lr

08008472 <__retarget_lock_acquire_recursive>:
 8008472:	4770      	bx	lr

08008474 <__retarget_lock_release_recursive>:
 8008474:	4770      	bx	lr

08008476 <memcpy>:
 8008476:	440a      	add	r2, r1
 8008478:	4291      	cmp	r1, r2
 800847a:	f100 33ff 	add.w	r3, r0, #4294967295
 800847e:	d100      	bne.n	8008482 <memcpy+0xc>
 8008480:	4770      	bx	lr
 8008482:	b510      	push	{r4, lr}
 8008484:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008488:	f803 4f01 	strb.w	r4, [r3, #1]!
 800848c:	4291      	cmp	r1, r2
 800848e:	d1f9      	bne.n	8008484 <memcpy+0xe>
 8008490:	bd10      	pop	{r4, pc}
 8008492:	0000      	movs	r0, r0
 8008494:	0000      	movs	r0, r0
	...

08008498 <nan>:
 8008498:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80084a0 <nan+0x8>
 800849c:	4770      	bx	lr
 800849e:	bf00      	nop
 80084a0:	00000000 	.word	0x00000000
 80084a4:	7ff80000 	.word	0x7ff80000

080084a8 <nanf>:
 80084a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80084b0 <nanf+0x8>
 80084ac:	4770      	bx	lr
 80084ae:	bf00      	nop
 80084b0:	7fc00000 	.word	0x7fc00000

080084b4 <quorem>:
 80084b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084b8:	6903      	ldr	r3, [r0, #16]
 80084ba:	690c      	ldr	r4, [r1, #16]
 80084bc:	42a3      	cmp	r3, r4
 80084be:	4607      	mov	r7, r0
 80084c0:	db7e      	blt.n	80085c0 <quorem+0x10c>
 80084c2:	3c01      	subs	r4, #1
 80084c4:	f101 0814 	add.w	r8, r1, #20
 80084c8:	f100 0514 	add.w	r5, r0, #20
 80084cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084d6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084da:	3301      	adds	r3, #1
 80084dc:	429a      	cmp	r2, r3
 80084de:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80084e2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084e6:	fbb2 f6f3 	udiv	r6, r2, r3
 80084ea:	d331      	bcc.n	8008550 <quorem+0x9c>
 80084ec:	f04f 0e00 	mov.w	lr, #0
 80084f0:	4640      	mov	r0, r8
 80084f2:	46ac      	mov	ip, r5
 80084f4:	46f2      	mov	sl, lr
 80084f6:	f850 2b04 	ldr.w	r2, [r0], #4
 80084fa:	b293      	uxth	r3, r2
 80084fc:	fb06 e303 	mla	r3, r6, r3, lr
 8008500:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008504:	0c1a      	lsrs	r2, r3, #16
 8008506:	b29b      	uxth	r3, r3
 8008508:	ebaa 0303 	sub.w	r3, sl, r3
 800850c:	f8dc a000 	ldr.w	sl, [ip]
 8008510:	fa13 f38a 	uxtah	r3, r3, sl
 8008514:	fb06 220e 	mla	r2, r6, lr, r2
 8008518:	9300      	str	r3, [sp, #0]
 800851a:	9b00      	ldr	r3, [sp, #0]
 800851c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008520:	b292      	uxth	r2, r2
 8008522:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008526:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800852a:	f8bd 3000 	ldrh.w	r3, [sp]
 800852e:	4581      	cmp	r9, r0
 8008530:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008534:	f84c 3b04 	str.w	r3, [ip], #4
 8008538:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800853c:	d2db      	bcs.n	80084f6 <quorem+0x42>
 800853e:	f855 300b 	ldr.w	r3, [r5, fp]
 8008542:	b92b      	cbnz	r3, 8008550 <quorem+0x9c>
 8008544:	9b01      	ldr	r3, [sp, #4]
 8008546:	3b04      	subs	r3, #4
 8008548:	429d      	cmp	r5, r3
 800854a:	461a      	mov	r2, r3
 800854c:	d32c      	bcc.n	80085a8 <quorem+0xf4>
 800854e:	613c      	str	r4, [r7, #16]
 8008550:	4638      	mov	r0, r7
 8008552:	f001 fd5b 	bl	800a00c <__mcmp>
 8008556:	2800      	cmp	r0, #0
 8008558:	db22      	blt.n	80085a0 <quorem+0xec>
 800855a:	3601      	adds	r6, #1
 800855c:	4629      	mov	r1, r5
 800855e:	2000      	movs	r0, #0
 8008560:	f858 2b04 	ldr.w	r2, [r8], #4
 8008564:	f8d1 c000 	ldr.w	ip, [r1]
 8008568:	b293      	uxth	r3, r2
 800856a:	1ac3      	subs	r3, r0, r3
 800856c:	0c12      	lsrs	r2, r2, #16
 800856e:	fa13 f38c 	uxtah	r3, r3, ip
 8008572:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008576:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800857a:	b29b      	uxth	r3, r3
 800857c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008580:	45c1      	cmp	r9, r8
 8008582:	f841 3b04 	str.w	r3, [r1], #4
 8008586:	ea4f 4022 	mov.w	r0, r2, asr #16
 800858a:	d2e9      	bcs.n	8008560 <quorem+0xac>
 800858c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008590:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008594:	b922      	cbnz	r2, 80085a0 <quorem+0xec>
 8008596:	3b04      	subs	r3, #4
 8008598:	429d      	cmp	r5, r3
 800859a:	461a      	mov	r2, r3
 800859c:	d30a      	bcc.n	80085b4 <quorem+0x100>
 800859e:	613c      	str	r4, [r7, #16]
 80085a0:	4630      	mov	r0, r6
 80085a2:	b003      	add	sp, #12
 80085a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085a8:	6812      	ldr	r2, [r2, #0]
 80085aa:	3b04      	subs	r3, #4
 80085ac:	2a00      	cmp	r2, #0
 80085ae:	d1ce      	bne.n	800854e <quorem+0x9a>
 80085b0:	3c01      	subs	r4, #1
 80085b2:	e7c9      	b.n	8008548 <quorem+0x94>
 80085b4:	6812      	ldr	r2, [r2, #0]
 80085b6:	3b04      	subs	r3, #4
 80085b8:	2a00      	cmp	r2, #0
 80085ba:	d1f0      	bne.n	800859e <quorem+0xea>
 80085bc:	3c01      	subs	r4, #1
 80085be:	e7eb      	b.n	8008598 <quorem+0xe4>
 80085c0:	2000      	movs	r0, #0
 80085c2:	e7ee      	b.n	80085a2 <quorem+0xee>
 80085c4:	0000      	movs	r0, r0
	...

080085c8 <_dtoa_r>:
 80085c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085cc:	ed2d 8b04 	vpush	{d8-d9}
 80085d0:	69c5      	ldr	r5, [r0, #28]
 80085d2:	b093      	sub	sp, #76	; 0x4c
 80085d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80085d8:	ec57 6b10 	vmov	r6, r7, d0
 80085dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80085e0:	9107      	str	r1, [sp, #28]
 80085e2:	4604      	mov	r4, r0
 80085e4:	920a      	str	r2, [sp, #40]	; 0x28
 80085e6:	930d      	str	r3, [sp, #52]	; 0x34
 80085e8:	b975      	cbnz	r5, 8008608 <_dtoa_r+0x40>
 80085ea:	2010      	movs	r0, #16
 80085ec:	f001 f982 	bl	80098f4 <malloc>
 80085f0:	4602      	mov	r2, r0
 80085f2:	61e0      	str	r0, [r4, #28]
 80085f4:	b920      	cbnz	r0, 8008600 <_dtoa_r+0x38>
 80085f6:	4bae      	ldr	r3, [pc, #696]	; (80088b0 <_dtoa_r+0x2e8>)
 80085f8:	21ef      	movs	r1, #239	; 0xef
 80085fa:	48ae      	ldr	r0, [pc, #696]	; (80088b4 <_dtoa_r+0x2ec>)
 80085fc:	f002 fb8a 	bl	800ad14 <__assert_func>
 8008600:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008604:	6005      	str	r5, [r0, #0]
 8008606:	60c5      	str	r5, [r0, #12]
 8008608:	69e3      	ldr	r3, [r4, #28]
 800860a:	6819      	ldr	r1, [r3, #0]
 800860c:	b151      	cbz	r1, 8008624 <_dtoa_r+0x5c>
 800860e:	685a      	ldr	r2, [r3, #4]
 8008610:	604a      	str	r2, [r1, #4]
 8008612:	2301      	movs	r3, #1
 8008614:	4093      	lsls	r3, r2
 8008616:	608b      	str	r3, [r1, #8]
 8008618:	4620      	mov	r0, r4
 800861a:	f001 fa71 	bl	8009b00 <_Bfree>
 800861e:	69e3      	ldr	r3, [r4, #28]
 8008620:	2200      	movs	r2, #0
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	1e3b      	subs	r3, r7, #0
 8008626:	bfbb      	ittet	lt
 8008628:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800862c:	9303      	strlt	r3, [sp, #12]
 800862e:	2300      	movge	r3, #0
 8008630:	2201      	movlt	r2, #1
 8008632:	bfac      	ite	ge
 8008634:	f8c8 3000 	strge.w	r3, [r8]
 8008638:	f8c8 2000 	strlt.w	r2, [r8]
 800863c:	4b9e      	ldr	r3, [pc, #632]	; (80088b8 <_dtoa_r+0x2f0>)
 800863e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008642:	ea33 0308 	bics.w	r3, r3, r8
 8008646:	d11b      	bne.n	8008680 <_dtoa_r+0xb8>
 8008648:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800864a:	f242 730f 	movw	r3, #9999	; 0x270f
 800864e:	6013      	str	r3, [r2, #0]
 8008650:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008654:	4333      	orrs	r3, r6
 8008656:	f000 8593 	beq.w	8009180 <_dtoa_r+0xbb8>
 800865a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800865c:	b963      	cbnz	r3, 8008678 <_dtoa_r+0xb0>
 800865e:	4b97      	ldr	r3, [pc, #604]	; (80088bc <_dtoa_r+0x2f4>)
 8008660:	e027      	b.n	80086b2 <_dtoa_r+0xea>
 8008662:	4b97      	ldr	r3, [pc, #604]	; (80088c0 <_dtoa_r+0x2f8>)
 8008664:	9300      	str	r3, [sp, #0]
 8008666:	3308      	adds	r3, #8
 8008668:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800866a:	6013      	str	r3, [r2, #0]
 800866c:	9800      	ldr	r0, [sp, #0]
 800866e:	b013      	add	sp, #76	; 0x4c
 8008670:	ecbd 8b04 	vpop	{d8-d9}
 8008674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008678:	4b90      	ldr	r3, [pc, #576]	; (80088bc <_dtoa_r+0x2f4>)
 800867a:	9300      	str	r3, [sp, #0]
 800867c:	3303      	adds	r3, #3
 800867e:	e7f3      	b.n	8008668 <_dtoa_r+0xa0>
 8008680:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008684:	2200      	movs	r2, #0
 8008686:	ec51 0b17 	vmov	r0, r1, d7
 800868a:	eeb0 8a47 	vmov.f32	s16, s14
 800868e:	eef0 8a67 	vmov.f32	s17, s15
 8008692:	2300      	movs	r3, #0
 8008694:	f7f8 fa38 	bl	8000b08 <__aeabi_dcmpeq>
 8008698:	4681      	mov	r9, r0
 800869a:	b160      	cbz	r0, 80086b6 <_dtoa_r+0xee>
 800869c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800869e:	2301      	movs	r3, #1
 80086a0:	6013      	str	r3, [r2, #0]
 80086a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8568 	beq.w	800917a <_dtoa_r+0xbb2>
 80086aa:	4b86      	ldr	r3, [pc, #536]	; (80088c4 <_dtoa_r+0x2fc>)
 80086ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80086ae:	6013      	str	r3, [r2, #0]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	e7da      	b.n	800866c <_dtoa_r+0xa4>
 80086b6:	aa10      	add	r2, sp, #64	; 0x40
 80086b8:	a911      	add	r1, sp, #68	; 0x44
 80086ba:	4620      	mov	r0, r4
 80086bc:	eeb0 0a48 	vmov.f32	s0, s16
 80086c0:	eef0 0a68 	vmov.f32	s1, s17
 80086c4:	f001 fdb8 	bl	800a238 <__d2b>
 80086c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80086cc:	4682      	mov	sl, r0
 80086ce:	2d00      	cmp	r5, #0
 80086d0:	d07f      	beq.n	80087d2 <_dtoa_r+0x20a>
 80086d2:	ee18 3a90 	vmov	r3, s17
 80086d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80086da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80086de:	ec51 0b18 	vmov	r0, r1, d8
 80086e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80086e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80086ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80086ee:	4619      	mov	r1, r3
 80086f0:	2200      	movs	r2, #0
 80086f2:	4b75      	ldr	r3, [pc, #468]	; (80088c8 <_dtoa_r+0x300>)
 80086f4:	f7f7 fde8 	bl	80002c8 <__aeabi_dsub>
 80086f8:	a367      	add	r3, pc, #412	; (adr r3, 8008898 <_dtoa_r+0x2d0>)
 80086fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086fe:	f7f7 ff9b 	bl	8000638 <__aeabi_dmul>
 8008702:	a367      	add	r3, pc, #412	; (adr r3, 80088a0 <_dtoa_r+0x2d8>)
 8008704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008708:	f7f7 fde0 	bl	80002cc <__adddf3>
 800870c:	4606      	mov	r6, r0
 800870e:	4628      	mov	r0, r5
 8008710:	460f      	mov	r7, r1
 8008712:	f7f7 ff27 	bl	8000564 <__aeabi_i2d>
 8008716:	a364      	add	r3, pc, #400	; (adr r3, 80088a8 <_dtoa_r+0x2e0>)
 8008718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800871c:	f7f7 ff8c 	bl	8000638 <__aeabi_dmul>
 8008720:	4602      	mov	r2, r0
 8008722:	460b      	mov	r3, r1
 8008724:	4630      	mov	r0, r6
 8008726:	4639      	mov	r1, r7
 8008728:	f7f7 fdd0 	bl	80002cc <__adddf3>
 800872c:	4606      	mov	r6, r0
 800872e:	460f      	mov	r7, r1
 8008730:	f7f8 fa32 	bl	8000b98 <__aeabi_d2iz>
 8008734:	2200      	movs	r2, #0
 8008736:	4683      	mov	fp, r0
 8008738:	2300      	movs	r3, #0
 800873a:	4630      	mov	r0, r6
 800873c:	4639      	mov	r1, r7
 800873e:	f7f8 f9ed 	bl	8000b1c <__aeabi_dcmplt>
 8008742:	b148      	cbz	r0, 8008758 <_dtoa_r+0x190>
 8008744:	4658      	mov	r0, fp
 8008746:	f7f7 ff0d 	bl	8000564 <__aeabi_i2d>
 800874a:	4632      	mov	r2, r6
 800874c:	463b      	mov	r3, r7
 800874e:	f7f8 f9db 	bl	8000b08 <__aeabi_dcmpeq>
 8008752:	b908      	cbnz	r0, 8008758 <_dtoa_r+0x190>
 8008754:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008758:	f1bb 0f16 	cmp.w	fp, #22
 800875c:	d857      	bhi.n	800880e <_dtoa_r+0x246>
 800875e:	4b5b      	ldr	r3, [pc, #364]	; (80088cc <_dtoa_r+0x304>)
 8008760:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008768:	ec51 0b18 	vmov	r0, r1, d8
 800876c:	f7f8 f9d6 	bl	8000b1c <__aeabi_dcmplt>
 8008770:	2800      	cmp	r0, #0
 8008772:	d04e      	beq.n	8008812 <_dtoa_r+0x24a>
 8008774:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008778:	2300      	movs	r3, #0
 800877a:	930c      	str	r3, [sp, #48]	; 0x30
 800877c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800877e:	1b5b      	subs	r3, r3, r5
 8008780:	1e5a      	subs	r2, r3, #1
 8008782:	bf45      	ittet	mi
 8008784:	f1c3 0301 	rsbmi	r3, r3, #1
 8008788:	9305      	strmi	r3, [sp, #20]
 800878a:	2300      	movpl	r3, #0
 800878c:	2300      	movmi	r3, #0
 800878e:	9206      	str	r2, [sp, #24]
 8008790:	bf54      	ite	pl
 8008792:	9305      	strpl	r3, [sp, #20]
 8008794:	9306      	strmi	r3, [sp, #24]
 8008796:	f1bb 0f00 	cmp.w	fp, #0
 800879a:	db3c      	blt.n	8008816 <_dtoa_r+0x24e>
 800879c:	9b06      	ldr	r3, [sp, #24]
 800879e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80087a2:	445b      	add	r3, fp
 80087a4:	9306      	str	r3, [sp, #24]
 80087a6:	2300      	movs	r3, #0
 80087a8:	9308      	str	r3, [sp, #32]
 80087aa:	9b07      	ldr	r3, [sp, #28]
 80087ac:	2b09      	cmp	r3, #9
 80087ae:	d868      	bhi.n	8008882 <_dtoa_r+0x2ba>
 80087b0:	2b05      	cmp	r3, #5
 80087b2:	bfc4      	itt	gt
 80087b4:	3b04      	subgt	r3, #4
 80087b6:	9307      	strgt	r3, [sp, #28]
 80087b8:	9b07      	ldr	r3, [sp, #28]
 80087ba:	f1a3 0302 	sub.w	r3, r3, #2
 80087be:	bfcc      	ite	gt
 80087c0:	2500      	movgt	r5, #0
 80087c2:	2501      	movle	r5, #1
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	f200 8085 	bhi.w	80088d4 <_dtoa_r+0x30c>
 80087ca:	e8df f003 	tbb	[pc, r3]
 80087ce:	3b2e      	.short	0x3b2e
 80087d0:	5839      	.short	0x5839
 80087d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80087d6:	441d      	add	r5, r3
 80087d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80087dc:	2b20      	cmp	r3, #32
 80087de:	bfc1      	itttt	gt
 80087e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80087e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80087e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80087ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80087f0:	bfd6      	itet	le
 80087f2:	f1c3 0320 	rsble	r3, r3, #32
 80087f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80087fa:	fa06 f003 	lslle.w	r0, r6, r3
 80087fe:	f7f7 fea1 	bl	8000544 <__aeabi_ui2d>
 8008802:	2201      	movs	r2, #1
 8008804:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008808:	3d01      	subs	r5, #1
 800880a:	920e      	str	r2, [sp, #56]	; 0x38
 800880c:	e76f      	b.n	80086ee <_dtoa_r+0x126>
 800880e:	2301      	movs	r3, #1
 8008810:	e7b3      	b.n	800877a <_dtoa_r+0x1b2>
 8008812:	900c      	str	r0, [sp, #48]	; 0x30
 8008814:	e7b2      	b.n	800877c <_dtoa_r+0x1b4>
 8008816:	9b05      	ldr	r3, [sp, #20]
 8008818:	eba3 030b 	sub.w	r3, r3, fp
 800881c:	9305      	str	r3, [sp, #20]
 800881e:	f1cb 0300 	rsb	r3, fp, #0
 8008822:	9308      	str	r3, [sp, #32]
 8008824:	2300      	movs	r3, #0
 8008826:	930b      	str	r3, [sp, #44]	; 0x2c
 8008828:	e7bf      	b.n	80087aa <_dtoa_r+0x1e2>
 800882a:	2300      	movs	r3, #0
 800882c:	9309      	str	r3, [sp, #36]	; 0x24
 800882e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008830:	2b00      	cmp	r3, #0
 8008832:	dc52      	bgt.n	80088da <_dtoa_r+0x312>
 8008834:	2301      	movs	r3, #1
 8008836:	9301      	str	r3, [sp, #4]
 8008838:	9304      	str	r3, [sp, #16]
 800883a:	461a      	mov	r2, r3
 800883c:	920a      	str	r2, [sp, #40]	; 0x28
 800883e:	e00b      	b.n	8008858 <_dtoa_r+0x290>
 8008840:	2301      	movs	r3, #1
 8008842:	e7f3      	b.n	800882c <_dtoa_r+0x264>
 8008844:	2300      	movs	r3, #0
 8008846:	9309      	str	r3, [sp, #36]	; 0x24
 8008848:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800884a:	445b      	add	r3, fp
 800884c:	9301      	str	r3, [sp, #4]
 800884e:	3301      	adds	r3, #1
 8008850:	2b01      	cmp	r3, #1
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	bfb8      	it	lt
 8008856:	2301      	movlt	r3, #1
 8008858:	69e0      	ldr	r0, [r4, #28]
 800885a:	2100      	movs	r1, #0
 800885c:	2204      	movs	r2, #4
 800885e:	f102 0614 	add.w	r6, r2, #20
 8008862:	429e      	cmp	r6, r3
 8008864:	d93d      	bls.n	80088e2 <_dtoa_r+0x31a>
 8008866:	6041      	str	r1, [r0, #4]
 8008868:	4620      	mov	r0, r4
 800886a:	f001 f909 	bl	8009a80 <_Balloc>
 800886e:	9000      	str	r0, [sp, #0]
 8008870:	2800      	cmp	r0, #0
 8008872:	d139      	bne.n	80088e8 <_dtoa_r+0x320>
 8008874:	4b16      	ldr	r3, [pc, #88]	; (80088d0 <_dtoa_r+0x308>)
 8008876:	4602      	mov	r2, r0
 8008878:	f240 11af 	movw	r1, #431	; 0x1af
 800887c:	e6bd      	b.n	80085fa <_dtoa_r+0x32>
 800887e:	2301      	movs	r3, #1
 8008880:	e7e1      	b.n	8008846 <_dtoa_r+0x27e>
 8008882:	2501      	movs	r5, #1
 8008884:	2300      	movs	r3, #0
 8008886:	9307      	str	r3, [sp, #28]
 8008888:	9509      	str	r5, [sp, #36]	; 0x24
 800888a:	f04f 33ff 	mov.w	r3, #4294967295
 800888e:	9301      	str	r3, [sp, #4]
 8008890:	9304      	str	r3, [sp, #16]
 8008892:	2200      	movs	r2, #0
 8008894:	2312      	movs	r3, #18
 8008896:	e7d1      	b.n	800883c <_dtoa_r+0x274>
 8008898:	636f4361 	.word	0x636f4361
 800889c:	3fd287a7 	.word	0x3fd287a7
 80088a0:	8b60c8b3 	.word	0x8b60c8b3
 80088a4:	3fc68a28 	.word	0x3fc68a28
 80088a8:	509f79fb 	.word	0x509f79fb
 80088ac:	3fd34413 	.word	0x3fd34413
 80088b0:	0800c3ee 	.word	0x0800c3ee
 80088b4:	0800c405 	.word	0x0800c405
 80088b8:	7ff00000 	.word	0x7ff00000
 80088bc:	0800c3ea 	.word	0x0800c3ea
 80088c0:	0800c3e1 	.word	0x0800c3e1
 80088c4:	0800c3b1 	.word	0x0800c3b1
 80088c8:	3ff80000 	.word	0x3ff80000
 80088cc:	0800c550 	.word	0x0800c550
 80088d0:	0800c45d 	.word	0x0800c45d
 80088d4:	2301      	movs	r3, #1
 80088d6:	9309      	str	r3, [sp, #36]	; 0x24
 80088d8:	e7d7      	b.n	800888a <_dtoa_r+0x2c2>
 80088da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088dc:	9301      	str	r3, [sp, #4]
 80088de:	9304      	str	r3, [sp, #16]
 80088e0:	e7ba      	b.n	8008858 <_dtoa_r+0x290>
 80088e2:	3101      	adds	r1, #1
 80088e4:	0052      	lsls	r2, r2, #1
 80088e6:	e7ba      	b.n	800885e <_dtoa_r+0x296>
 80088e8:	69e3      	ldr	r3, [r4, #28]
 80088ea:	9a00      	ldr	r2, [sp, #0]
 80088ec:	601a      	str	r2, [r3, #0]
 80088ee:	9b04      	ldr	r3, [sp, #16]
 80088f0:	2b0e      	cmp	r3, #14
 80088f2:	f200 80a8 	bhi.w	8008a46 <_dtoa_r+0x47e>
 80088f6:	2d00      	cmp	r5, #0
 80088f8:	f000 80a5 	beq.w	8008a46 <_dtoa_r+0x47e>
 80088fc:	f1bb 0f00 	cmp.w	fp, #0
 8008900:	dd38      	ble.n	8008974 <_dtoa_r+0x3ac>
 8008902:	4bc0      	ldr	r3, [pc, #768]	; (8008c04 <_dtoa_r+0x63c>)
 8008904:	f00b 020f 	and.w	r2, fp, #15
 8008908:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800890c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008910:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008914:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008918:	d019      	beq.n	800894e <_dtoa_r+0x386>
 800891a:	4bbb      	ldr	r3, [pc, #748]	; (8008c08 <_dtoa_r+0x640>)
 800891c:	ec51 0b18 	vmov	r0, r1, d8
 8008920:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008924:	f7f7 ffb2 	bl	800088c <__aeabi_ddiv>
 8008928:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800892c:	f008 080f 	and.w	r8, r8, #15
 8008930:	2503      	movs	r5, #3
 8008932:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008c08 <_dtoa_r+0x640>
 8008936:	f1b8 0f00 	cmp.w	r8, #0
 800893a:	d10a      	bne.n	8008952 <_dtoa_r+0x38a>
 800893c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008940:	4632      	mov	r2, r6
 8008942:	463b      	mov	r3, r7
 8008944:	f7f7 ffa2 	bl	800088c <__aeabi_ddiv>
 8008948:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800894c:	e02b      	b.n	80089a6 <_dtoa_r+0x3de>
 800894e:	2502      	movs	r5, #2
 8008950:	e7ef      	b.n	8008932 <_dtoa_r+0x36a>
 8008952:	f018 0f01 	tst.w	r8, #1
 8008956:	d008      	beq.n	800896a <_dtoa_r+0x3a2>
 8008958:	4630      	mov	r0, r6
 800895a:	4639      	mov	r1, r7
 800895c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008960:	f7f7 fe6a 	bl	8000638 <__aeabi_dmul>
 8008964:	3501      	adds	r5, #1
 8008966:	4606      	mov	r6, r0
 8008968:	460f      	mov	r7, r1
 800896a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800896e:	f109 0908 	add.w	r9, r9, #8
 8008972:	e7e0      	b.n	8008936 <_dtoa_r+0x36e>
 8008974:	f000 809f 	beq.w	8008ab6 <_dtoa_r+0x4ee>
 8008978:	f1cb 0600 	rsb	r6, fp, #0
 800897c:	4ba1      	ldr	r3, [pc, #644]	; (8008c04 <_dtoa_r+0x63c>)
 800897e:	4fa2      	ldr	r7, [pc, #648]	; (8008c08 <_dtoa_r+0x640>)
 8008980:	f006 020f 	and.w	r2, r6, #15
 8008984:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800898c:	ec51 0b18 	vmov	r0, r1, d8
 8008990:	f7f7 fe52 	bl	8000638 <__aeabi_dmul>
 8008994:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008998:	1136      	asrs	r6, r6, #4
 800899a:	2300      	movs	r3, #0
 800899c:	2502      	movs	r5, #2
 800899e:	2e00      	cmp	r6, #0
 80089a0:	d17e      	bne.n	8008aa0 <_dtoa_r+0x4d8>
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d1d0      	bne.n	8008948 <_dtoa_r+0x380>
 80089a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80089a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	f000 8084 	beq.w	8008aba <_dtoa_r+0x4f2>
 80089b2:	4b96      	ldr	r3, [pc, #600]	; (8008c0c <_dtoa_r+0x644>)
 80089b4:	2200      	movs	r2, #0
 80089b6:	4640      	mov	r0, r8
 80089b8:	4649      	mov	r1, r9
 80089ba:	f7f8 f8af 	bl	8000b1c <__aeabi_dcmplt>
 80089be:	2800      	cmp	r0, #0
 80089c0:	d07b      	beq.n	8008aba <_dtoa_r+0x4f2>
 80089c2:	9b04      	ldr	r3, [sp, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d078      	beq.n	8008aba <_dtoa_r+0x4f2>
 80089c8:	9b01      	ldr	r3, [sp, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dd39      	ble.n	8008a42 <_dtoa_r+0x47a>
 80089ce:	4b90      	ldr	r3, [pc, #576]	; (8008c10 <_dtoa_r+0x648>)
 80089d0:	2200      	movs	r2, #0
 80089d2:	4640      	mov	r0, r8
 80089d4:	4649      	mov	r1, r9
 80089d6:	f7f7 fe2f 	bl	8000638 <__aeabi_dmul>
 80089da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80089de:	9e01      	ldr	r6, [sp, #4]
 80089e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80089e4:	3501      	adds	r5, #1
 80089e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80089ea:	4628      	mov	r0, r5
 80089ec:	f7f7 fdba 	bl	8000564 <__aeabi_i2d>
 80089f0:	4642      	mov	r2, r8
 80089f2:	464b      	mov	r3, r9
 80089f4:	f7f7 fe20 	bl	8000638 <__aeabi_dmul>
 80089f8:	4b86      	ldr	r3, [pc, #536]	; (8008c14 <_dtoa_r+0x64c>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	f7f7 fc66 	bl	80002cc <__adddf3>
 8008a00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a08:	9303      	str	r3, [sp, #12]
 8008a0a:	2e00      	cmp	r6, #0
 8008a0c:	d158      	bne.n	8008ac0 <_dtoa_r+0x4f8>
 8008a0e:	4b82      	ldr	r3, [pc, #520]	; (8008c18 <_dtoa_r+0x650>)
 8008a10:	2200      	movs	r2, #0
 8008a12:	4640      	mov	r0, r8
 8008a14:	4649      	mov	r1, r9
 8008a16:	f7f7 fc57 	bl	80002c8 <__aeabi_dsub>
 8008a1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a1e:	4680      	mov	r8, r0
 8008a20:	4689      	mov	r9, r1
 8008a22:	f7f8 f899 	bl	8000b58 <__aeabi_dcmpgt>
 8008a26:	2800      	cmp	r0, #0
 8008a28:	f040 8296 	bne.w	8008f58 <_dtoa_r+0x990>
 8008a2c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008a30:	4640      	mov	r0, r8
 8008a32:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008a36:	4649      	mov	r1, r9
 8008a38:	f7f8 f870 	bl	8000b1c <__aeabi_dcmplt>
 8008a3c:	2800      	cmp	r0, #0
 8008a3e:	f040 8289 	bne.w	8008f54 <_dtoa_r+0x98c>
 8008a42:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008a46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f2c0 814e 	blt.w	8008cea <_dtoa_r+0x722>
 8008a4e:	f1bb 0f0e 	cmp.w	fp, #14
 8008a52:	f300 814a 	bgt.w	8008cea <_dtoa_r+0x722>
 8008a56:	4b6b      	ldr	r3, [pc, #428]	; (8008c04 <_dtoa_r+0x63c>)
 8008a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008a5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	f280 80dc 	bge.w	8008c20 <_dtoa_r+0x658>
 8008a68:	9b04      	ldr	r3, [sp, #16]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	f300 80d8 	bgt.w	8008c20 <_dtoa_r+0x658>
 8008a70:	f040 826f 	bne.w	8008f52 <_dtoa_r+0x98a>
 8008a74:	4b68      	ldr	r3, [pc, #416]	; (8008c18 <_dtoa_r+0x650>)
 8008a76:	2200      	movs	r2, #0
 8008a78:	4640      	mov	r0, r8
 8008a7a:	4649      	mov	r1, r9
 8008a7c:	f7f7 fddc 	bl	8000638 <__aeabi_dmul>
 8008a80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008a84:	f7f8 f85e 	bl	8000b44 <__aeabi_dcmpge>
 8008a88:	9e04      	ldr	r6, [sp, #16]
 8008a8a:	4637      	mov	r7, r6
 8008a8c:	2800      	cmp	r0, #0
 8008a8e:	f040 8245 	bne.w	8008f1c <_dtoa_r+0x954>
 8008a92:	9d00      	ldr	r5, [sp, #0]
 8008a94:	2331      	movs	r3, #49	; 0x31
 8008a96:	f805 3b01 	strb.w	r3, [r5], #1
 8008a9a:	f10b 0b01 	add.w	fp, fp, #1
 8008a9e:	e241      	b.n	8008f24 <_dtoa_r+0x95c>
 8008aa0:	07f2      	lsls	r2, r6, #31
 8008aa2:	d505      	bpl.n	8008ab0 <_dtoa_r+0x4e8>
 8008aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa8:	f7f7 fdc6 	bl	8000638 <__aeabi_dmul>
 8008aac:	3501      	adds	r5, #1
 8008aae:	2301      	movs	r3, #1
 8008ab0:	1076      	asrs	r6, r6, #1
 8008ab2:	3708      	adds	r7, #8
 8008ab4:	e773      	b.n	800899e <_dtoa_r+0x3d6>
 8008ab6:	2502      	movs	r5, #2
 8008ab8:	e775      	b.n	80089a6 <_dtoa_r+0x3de>
 8008aba:	9e04      	ldr	r6, [sp, #16]
 8008abc:	465f      	mov	r7, fp
 8008abe:	e792      	b.n	80089e6 <_dtoa_r+0x41e>
 8008ac0:	9900      	ldr	r1, [sp, #0]
 8008ac2:	4b50      	ldr	r3, [pc, #320]	; (8008c04 <_dtoa_r+0x63c>)
 8008ac4:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ac8:	4431      	add	r1, r6
 8008aca:	9102      	str	r1, [sp, #8]
 8008acc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ace:	eeb0 9a47 	vmov.f32	s18, s14
 8008ad2:	eef0 9a67 	vmov.f32	s19, s15
 8008ad6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008ada:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008ade:	2900      	cmp	r1, #0
 8008ae0:	d044      	beq.n	8008b6c <_dtoa_r+0x5a4>
 8008ae2:	494e      	ldr	r1, [pc, #312]	; (8008c1c <_dtoa_r+0x654>)
 8008ae4:	2000      	movs	r0, #0
 8008ae6:	f7f7 fed1 	bl	800088c <__aeabi_ddiv>
 8008aea:	ec53 2b19 	vmov	r2, r3, d9
 8008aee:	f7f7 fbeb 	bl	80002c8 <__aeabi_dsub>
 8008af2:	9d00      	ldr	r5, [sp, #0]
 8008af4:	ec41 0b19 	vmov	d9, r0, r1
 8008af8:	4649      	mov	r1, r9
 8008afa:	4640      	mov	r0, r8
 8008afc:	f7f8 f84c 	bl	8000b98 <__aeabi_d2iz>
 8008b00:	4606      	mov	r6, r0
 8008b02:	f7f7 fd2f 	bl	8000564 <__aeabi_i2d>
 8008b06:	4602      	mov	r2, r0
 8008b08:	460b      	mov	r3, r1
 8008b0a:	4640      	mov	r0, r8
 8008b0c:	4649      	mov	r1, r9
 8008b0e:	f7f7 fbdb 	bl	80002c8 <__aeabi_dsub>
 8008b12:	3630      	adds	r6, #48	; 0x30
 8008b14:	f805 6b01 	strb.w	r6, [r5], #1
 8008b18:	ec53 2b19 	vmov	r2, r3, d9
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	4689      	mov	r9, r1
 8008b20:	f7f7 fffc 	bl	8000b1c <__aeabi_dcmplt>
 8008b24:	2800      	cmp	r0, #0
 8008b26:	d164      	bne.n	8008bf2 <_dtoa_r+0x62a>
 8008b28:	4642      	mov	r2, r8
 8008b2a:	464b      	mov	r3, r9
 8008b2c:	4937      	ldr	r1, [pc, #220]	; (8008c0c <_dtoa_r+0x644>)
 8008b2e:	2000      	movs	r0, #0
 8008b30:	f7f7 fbca 	bl	80002c8 <__aeabi_dsub>
 8008b34:	ec53 2b19 	vmov	r2, r3, d9
 8008b38:	f7f7 fff0 	bl	8000b1c <__aeabi_dcmplt>
 8008b3c:	2800      	cmp	r0, #0
 8008b3e:	f040 80b6 	bne.w	8008cae <_dtoa_r+0x6e6>
 8008b42:	9b02      	ldr	r3, [sp, #8]
 8008b44:	429d      	cmp	r5, r3
 8008b46:	f43f af7c 	beq.w	8008a42 <_dtoa_r+0x47a>
 8008b4a:	4b31      	ldr	r3, [pc, #196]	; (8008c10 <_dtoa_r+0x648>)
 8008b4c:	ec51 0b19 	vmov	r0, r1, d9
 8008b50:	2200      	movs	r2, #0
 8008b52:	f7f7 fd71 	bl	8000638 <__aeabi_dmul>
 8008b56:	4b2e      	ldr	r3, [pc, #184]	; (8008c10 <_dtoa_r+0x648>)
 8008b58:	ec41 0b19 	vmov	d9, r0, r1
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	4640      	mov	r0, r8
 8008b60:	4649      	mov	r1, r9
 8008b62:	f7f7 fd69 	bl	8000638 <__aeabi_dmul>
 8008b66:	4680      	mov	r8, r0
 8008b68:	4689      	mov	r9, r1
 8008b6a:	e7c5      	b.n	8008af8 <_dtoa_r+0x530>
 8008b6c:	ec51 0b17 	vmov	r0, r1, d7
 8008b70:	f7f7 fd62 	bl	8000638 <__aeabi_dmul>
 8008b74:	9b02      	ldr	r3, [sp, #8]
 8008b76:	9d00      	ldr	r5, [sp, #0]
 8008b78:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b7a:	ec41 0b19 	vmov	d9, r0, r1
 8008b7e:	4649      	mov	r1, r9
 8008b80:	4640      	mov	r0, r8
 8008b82:	f7f8 f809 	bl	8000b98 <__aeabi_d2iz>
 8008b86:	4606      	mov	r6, r0
 8008b88:	f7f7 fcec 	bl	8000564 <__aeabi_i2d>
 8008b8c:	3630      	adds	r6, #48	; 0x30
 8008b8e:	4602      	mov	r2, r0
 8008b90:	460b      	mov	r3, r1
 8008b92:	4640      	mov	r0, r8
 8008b94:	4649      	mov	r1, r9
 8008b96:	f7f7 fb97 	bl	80002c8 <__aeabi_dsub>
 8008b9a:	f805 6b01 	strb.w	r6, [r5], #1
 8008b9e:	9b02      	ldr	r3, [sp, #8]
 8008ba0:	429d      	cmp	r5, r3
 8008ba2:	4680      	mov	r8, r0
 8008ba4:	4689      	mov	r9, r1
 8008ba6:	f04f 0200 	mov.w	r2, #0
 8008baa:	d124      	bne.n	8008bf6 <_dtoa_r+0x62e>
 8008bac:	4b1b      	ldr	r3, [pc, #108]	; (8008c1c <_dtoa_r+0x654>)
 8008bae:	ec51 0b19 	vmov	r0, r1, d9
 8008bb2:	f7f7 fb8b 	bl	80002cc <__adddf3>
 8008bb6:	4602      	mov	r2, r0
 8008bb8:	460b      	mov	r3, r1
 8008bba:	4640      	mov	r0, r8
 8008bbc:	4649      	mov	r1, r9
 8008bbe:	f7f7 ffcb 	bl	8000b58 <__aeabi_dcmpgt>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	d173      	bne.n	8008cae <_dtoa_r+0x6e6>
 8008bc6:	ec53 2b19 	vmov	r2, r3, d9
 8008bca:	4914      	ldr	r1, [pc, #80]	; (8008c1c <_dtoa_r+0x654>)
 8008bcc:	2000      	movs	r0, #0
 8008bce:	f7f7 fb7b 	bl	80002c8 <__aeabi_dsub>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	460b      	mov	r3, r1
 8008bd6:	4640      	mov	r0, r8
 8008bd8:	4649      	mov	r1, r9
 8008bda:	f7f7 ff9f 	bl	8000b1c <__aeabi_dcmplt>
 8008bde:	2800      	cmp	r0, #0
 8008be0:	f43f af2f 	beq.w	8008a42 <_dtoa_r+0x47a>
 8008be4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008be6:	1e6b      	subs	r3, r5, #1
 8008be8:	930f      	str	r3, [sp, #60]	; 0x3c
 8008bea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008bee:	2b30      	cmp	r3, #48	; 0x30
 8008bf0:	d0f8      	beq.n	8008be4 <_dtoa_r+0x61c>
 8008bf2:	46bb      	mov	fp, r7
 8008bf4:	e04a      	b.n	8008c8c <_dtoa_r+0x6c4>
 8008bf6:	4b06      	ldr	r3, [pc, #24]	; (8008c10 <_dtoa_r+0x648>)
 8008bf8:	f7f7 fd1e 	bl	8000638 <__aeabi_dmul>
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	4689      	mov	r9, r1
 8008c00:	e7bd      	b.n	8008b7e <_dtoa_r+0x5b6>
 8008c02:	bf00      	nop
 8008c04:	0800c550 	.word	0x0800c550
 8008c08:	0800c528 	.word	0x0800c528
 8008c0c:	3ff00000 	.word	0x3ff00000
 8008c10:	40240000 	.word	0x40240000
 8008c14:	401c0000 	.word	0x401c0000
 8008c18:	40140000 	.word	0x40140000
 8008c1c:	3fe00000 	.word	0x3fe00000
 8008c20:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c24:	9d00      	ldr	r5, [sp, #0]
 8008c26:	4642      	mov	r2, r8
 8008c28:	464b      	mov	r3, r9
 8008c2a:	4630      	mov	r0, r6
 8008c2c:	4639      	mov	r1, r7
 8008c2e:	f7f7 fe2d 	bl	800088c <__aeabi_ddiv>
 8008c32:	f7f7 ffb1 	bl	8000b98 <__aeabi_d2iz>
 8008c36:	9001      	str	r0, [sp, #4]
 8008c38:	f7f7 fc94 	bl	8000564 <__aeabi_i2d>
 8008c3c:	4642      	mov	r2, r8
 8008c3e:	464b      	mov	r3, r9
 8008c40:	f7f7 fcfa 	bl	8000638 <__aeabi_dmul>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4630      	mov	r0, r6
 8008c4a:	4639      	mov	r1, r7
 8008c4c:	f7f7 fb3c 	bl	80002c8 <__aeabi_dsub>
 8008c50:	9e01      	ldr	r6, [sp, #4]
 8008c52:	9f04      	ldr	r7, [sp, #16]
 8008c54:	3630      	adds	r6, #48	; 0x30
 8008c56:	f805 6b01 	strb.w	r6, [r5], #1
 8008c5a:	9e00      	ldr	r6, [sp, #0]
 8008c5c:	1bae      	subs	r6, r5, r6
 8008c5e:	42b7      	cmp	r7, r6
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	d134      	bne.n	8008cd0 <_dtoa_r+0x708>
 8008c66:	f7f7 fb31 	bl	80002cc <__adddf3>
 8008c6a:	4642      	mov	r2, r8
 8008c6c:	464b      	mov	r3, r9
 8008c6e:	4606      	mov	r6, r0
 8008c70:	460f      	mov	r7, r1
 8008c72:	f7f7 ff71 	bl	8000b58 <__aeabi_dcmpgt>
 8008c76:	b9c8      	cbnz	r0, 8008cac <_dtoa_r+0x6e4>
 8008c78:	4642      	mov	r2, r8
 8008c7a:	464b      	mov	r3, r9
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	4639      	mov	r1, r7
 8008c80:	f7f7 ff42 	bl	8000b08 <__aeabi_dcmpeq>
 8008c84:	b110      	cbz	r0, 8008c8c <_dtoa_r+0x6c4>
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	07db      	lsls	r3, r3, #31
 8008c8a:	d40f      	bmi.n	8008cac <_dtoa_r+0x6e4>
 8008c8c:	4651      	mov	r1, sl
 8008c8e:	4620      	mov	r0, r4
 8008c90:	f000 ff36 	bl	8009b00 <_Bfree>
 8008c94:	2300      	movs	r3, #0
 8008c96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c98:	702b      	strb	r3, [r5, #0]
 8008c9a:	f10b 0301 	add.w	r3, fp, #1
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f43f ace2 	beq.w	800866c <_dtoa_r+0xa4>
 8008ca8:	601d      	str	r5, [r3, #0]
 8008caa:	e4df      	b.n	800866c <_dtoa_r+0xa4>
 8008cac:	465f      	mov	r7, fp
 8008cae:	462b      	mov	r3, r5
 8008cb0:	461d      	mov	r5, r3
 8008cb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008cb6:	2a39      	cmp	r2, #57	; 0x39
 8008cb8:	d106      	bne.n	8008cc8 <_dtoa_r+0x700>
 8008cba:	9a00      	ldr	r2, [sp, #0]
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d1f7      	bne.n	8008cb0 <_dtoa_r+0x6e8>
 8008cc0:	9900      	ldr	r1, [sp, #0]
 8008cc2:	2230      	movs	r2, #48	; 0x30
 8008cc4:	3701      	adds	r7, #1
 8008cc6:	700a      	strb	r2, [r1, #0]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	3201      	adds	r2, #1
 8008ccc:	701a      	strb	r2, [r3, #0]
 8008cce:	e790      	b.n	8008bf2 <_dtoa_r+0x62a>
 8008cd0:	4ba3      	ldr	r3, [pc, #652]	; (8008f60 <_dtoa_r+0x998>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	f7f7 fcb0 	bl	8000638 <__aeabi_dmul>
 8008cd8:	2200      	movs	r2, #0
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4606      	mov	r6, r0
 8008cde:	460f      	mov	r7, r1
 8008ce0:	f7f7 ff12 	bl	8000b08 <__aeabi_dcmpeq>
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d09e      	beq.n	8008c26 <_dtoa_r+0x65e>
 8008ce8:	e7d0      	b.n	8008c8c <_dtoa_r+0x6c4>
 8008cea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008cec:	2a00      	cmp	r2, #0
 8008cee:	f000 80ca 	beq.w	8008e86 <_dtoa_r+0x8be>
 8008cf2:	9a07      	ldr	r2, [sp, #28]
 8008cf4:	2a01      	cmp	r2, #1
 8008cf6:	f300 80ad 	bgt.w	8008e54 <_dtoa_r+0x88c>
 8008cfa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	f000 80a5 	beq.w	8008e4c <_dtoa_r+0x884>
 8008d02:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008d06:	9e08      	ldr	r6, [sp, #32]
 8008d08:	9d05      	ldr	r5, [sp, #20]
 8008d0a:	9a05      	ldr	r2, [sp, #20]
 8008d0c:	441a      	add	r2, r3
 8008d0e:	9205      	str	r2, [sp, #20]
 8008d10:	9a06      	ldr	r2, [sp, #24]
 8008d12:	2101      	movs	r1, #1
 8008d14:	441a      	add	r2, r3
 8008d16:	4620      	mov	r0, r4
 8008d18:	9206      	str	r2, [sp, #24]
 8008d1a:	f000 fff1 	bl	8009d00 <__i2b>
 8008d1e:	4607      	mov	r7, r0
 8008d20:	b165      	cbz	r5, 8008d3c <_dtoa_r+0x774>
 8008d22:	9b06      	ldr	r3, [sp, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	dd09      	ble.n	8008d3c <_dtoa_r+0x774>
 8008d28:	42ab      	cmp	r3, r5
 8008d2a:	9a05      	ldr	r2, [sp, #20]
 8008d2c:	bfa8      	it	ge
 8008d2e:	462b      	movge	r3, r5
 8008d30:	1ad2      	subs	r2, r2, r3
 8008d32:	9205      	str	r2, [sp, #20]
 8008d34:	9a06      	ldr	r2, [sp, #24]
 8008d36:	1aed      	subs	r5, r5, r3
 8008d38:	1ad3      	subs	r3, r2, r3
 8008d3a:	9306      	str	r3, [sp, #24]
 8008d3c:	9b08      	ldr	r3, [sp, #32]
 8008d3e:	b1f3      	cbz	r3, 8008d7e <_dtoa_r+0x7b6>
 8008d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	f000 80a3 	beq.w	8008e8e <_dtoa_r+0x8c6>
 8008d48:	2e00      	cmp	r6, #0
 8008d4a:	dd10      	ble.n	8008d6e <_dtoa_r+0x7a6>
 8008d4c:	4639      	mov	r1, r7
 8008d4e:	4632      	mov	r2, r6
 8008d50:	4620      	mov	r0, r4
 8008d52:	f001 f895 	bl	8009e80 <__pow5mult>
 8008d56:	4652      	mov	r2, sl
 8008d58:	4601      	mov	r1, r0
 8008d5a:	4607      	mov	r7, r0
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f000 ffe5 	bl	8009d2c <__multiply>
 8008d62:	4651      	mov	r1, sl
 8008d64:	4680      	mov	r8, r0
 8008d66:	4620      	mov	r0, r4
 8008d68:	f000 feca 	bl	8009b00 <_Bfree>
 8008d6c:	46c2      	mov	sl, r8
 8008d6e:	9b08      	ldr	r3, [sp, #32]
 8008d70:	1b9a      	subs	r2, r3, r6
 8008d72:	d004      	beq.n	8008d7e <_dtoa_r+0x7b6>
 8008d74:	4651      	mov	r1, sl
 8008d76:	4620      	mov	r0, r4
 8008d78:	f001 f882 	bl	8009e80 <__pow5mult>
 8008d7c:	4682      	mov	sl, r0
 8008d7e:	2101      	movs	r1, #1
 8008d80:	4620      	mov	r0, r4
 8008d82:	f000 ffbd 	bl	8009d00 <__i2b>
 8008d86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	4606      	mov	r6, r0
 8008d8c:	f340 8081 	ble.w	8008e92 <_dtoa_r+0x8ca>
 8008d90:	461a      	mov	r2, r3
 8008d92:	4601      	mov	r1, r0
 8008d94:	4620      	mov	r0, r4
 8008d96:	f001 f873 	bl	8009e80 <__pow5mult>
 8008d9a:	9b07      	ldr	r3, [sp, #28]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	4606      	mov	r6, r0
 8008da0:	dd7a      	ble.n	8008e98 <_dtoa_r+0x8d0>
 8008da2:	f04f 0800 	mov.w	r8, #0
 8008da6:	6933      	ldr	r3, [r6, #16]
 8008da8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008dac:	6918      	ldr	r0, [r3, #16]
 8008dae:	f000 ff59 	bl	8009c64 <__hi0bits>
 8008db2:	f1c0 0020 	rsb	r0, r0, #32
 8008db6:	9b06      	ldr	r3, [sp, #24]
 8008db8:	4418      	add	r0, r3
 8008dba:	f010 001f 	ands.w	r0, r0, #31
 8008dbe:	f000 8094 	beq.w	8008eea <_dtoa_r+0x922>
 8008dc2:	f1c0 0320 	rsb	r3, r0, #32
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	f340 8085 	ble.w	8008ed6 <_dtoa_r+0x90e>
 8008dcc:	9b05      	ldr	r3, [sp, #20]
 8008dce:	f1c0 001c 	rsb	r0, r0, #28
 8008dd2:	4403      	add	r3, r0
 8008dd4:	9305      	str	r3, [sp, #20]
 8008dd6:	9b06      	ldr	r3, [sp, #24]
 8008dd8:	4403      	add	r3, r0
 8008dda:	4405      	add	r5, r0
 8008ddc:	9306      	str	r3, [sp, #24]
 8008dde:	9b05      	ldr	r3, [sp, #20]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dd05      	ble.n	8008df0 <_dtoa_r+0x828>
 8008de4:	4651      	mov	r1, sl
 8008de6:	461a      	mov	r2, r3
 8008de8:	4620      	mov	r0, r4
 8008dea:	f001 f8a3 	bl	8009f34 <__lshift>
 8008dee:	4682      	mov	sl, r0
 8008df0:	9b06      	ldr	r3, [sp, #24]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	dd05      	ble.n	8008e02 <_dtoa_r+0x83a>
 8008df6:	4631      	mov	r1, r6
 8008df8:	461a      	mov	r2, r3
 8008dfa:	4620      	mov	r0, r4
 8008dfc:	f001 f89a 	bl	8009f34 <__lshift>
 8008e00:	4606      	mov	r6, r0
 8008e02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d072      	beq.n	8008eee <_dtoa_r+0x926>
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4650      	mov	r0, sl
 8008e0c:	f001 f8fe 	bl	800a00c <__mcmp>
 8008e10:	2800      	cmp	r0, #0
 8008e12:	da6c      	bge.n	8008eee <_dtoa_r+0x926>
 8008e14:	2300      	movs	r3, #0
 8008e16:	4651      	mov	r1, sl
 8008e18:	220a      	movs	r2, #10
 8008e1a:	4620      	mov	r0, r4
 8008e1c:	f000 fe92 	bl	8009b44 <__multadd>
 8008e20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e22:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e26:	4682      	mov	sl, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f000 81b0 	beq.w	800918e <_dtoa_r+0xbc6>
 8008e2e:	2300      	movs	r3, #0
 8008e30:	4639      	mov	r1, r7
 8008e32:	220a      	movs	r2, #10
 8008e34:	4620      	mov	r0, r4
 8008e36:	f000 fe85 	bl	8009b44 <__multadd>
 8008e3a:	9b01      	ldr	r3, [sp, #4]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	4607      	mov	r7, r0
 8008e40:	f300 8096 	bgt.w	8008f70 <_dtoa_r+0x9a8>
 8008e44:	9b07      	ldr	r3, [sp, #28]
 8008e46:	2b02      	cmp	r3, #2
 8008e48:	dc59      	bgt.n	8008efe <_dtoa_r+0x936>
 8008e4a:	e091      	b.n	8008f70 <_dtoa_r+0x9a8>
 8008e4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008e52:	e758      	b.n	8008d06 <_dtoa_r+0x73e>
 8008e54:	9b04      	ldr	r3, [sp, #16]
 8008e56:	1e5e      	subs	r6, r3, #1
 8008e58:	9b08      	ldr	r3, [sp, #32]
 8008e5a:	42b3      	cmp	r3, r6
 8008e5c:	bfbf      	itttt	lt
 8008e5e:	9b08      	ldrlt	r3, [sp, #32]
 8008e60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008e62:	9608      	strlt	r6, [sp, #32]
 8008e64:	1af3      	sublt	r3, r6, r3
 8008e66:	bfb4      	ite	lt
 8008e68:	18d2      	addlt	r2, r2, r3
 8008e6a:	1b9e      	subge	r6, r3, r6
 8008e6c:	9b04      	ldr	r3, [sp, #16]
 8008e6e:	bfbc      	itt	lt
 8008e70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008e72:	2600      	movlt	r6, #0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	bfb7      	itett	lt
 8008e78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008e7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008e80:	1a9d      	sublt	r5, r3, r2
 8008e82:	2300      	movlt	r3, #0
 8008e84:	e741      	b.n	8008d0a <_dtoa_r+0x742>
 8008e86:	9e08      	ldr	r6, [sp, #32]
 8008e88:	9d05      	ldr	r5, [sp, #20]
 8008e8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008e8c:	e748      	b.n	8008d20 <_dtoa_r+0x758>
 8008e8e:	9a08      	ldr	r2, [sp, #32]
 8008e90:	e770      	b.n	8008d74 <_dtoa_r+0x7ac>
 8008e92:	9b07      	ldr	r3, [sp, #28]
 8008e94:	2b01      	cmp	r3, #1
 8008e96:	dc19      	bgt.n	8008ecc <_dtoa_r+0x904>
 8008e98:	9b02      	ldr	r3, [sp, #8]
 8008e9a:	b9bb      	cbnz	r3, 8008ecc <_dtoa_r+0x904>
 8008e9c:	9b03      	ldr	r3, [sp, #12]
 8008e9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ea2:	b99b      	cbnz	r3, 8008ecc <_dtoa_r+0x904>
 8008ea4:	9b03      	ldr	r3, [sp, #12]
 8008ea6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008eaa:	0d1b      	lsrs	r3, r3, #20
 8008eac:	051b      	lsls	r3, r3, #20
 8008eae:	b183      	cbz	r3, 8008ed2 <_dtoa_r+0x90a>
 8008eb0:	9b05      	ldr	r3, [sp, #20]
 8008eb2:	3301      	adds	r3, #1
 8008eb4:	9305      	str	r3, [sp, #20]
 8008eb6:	9b06      	ldr	r3, [sp, #24]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	9306      	str	r3, [sp, #24]
 8008ebc:	f04f 0801 	mov.w	r8, #1
 8008ec0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	f47f af6f 	bne.w	8008da6 <_dtoa_r+0x7de>
 8008ec8:	2001      	movs	r0, #1
 8008eca:	e774      	b.n	8008db6 <_dtoa_r+0x7ee>
 8008ecc:	f04f 0800 	mov.w	r8, #0
 8008ed0:	e7f6      	b.n	8008ec0 <_dtoa_r+0x8f8>
 8008ed2:	4698      	mov	r8, r3
 8008ed4:	e7f4      	b.n	8008ec0 <_dtoa_r+0x8f8>
 8008ed6:	d082      	beq.n	8008dde <_dtoa_r+0x816>
 8008ed8:	9a05      	ldr	r2, [sp, #20]
 8008eda:	331c      	adds	r3, #28
 8008edc:	441a      	add	r2, r3
 8008ede:	9205      	str	r2, [sp, #20]
 8008ee0:	9a06      	ldr	r2, [sp, #24]
 8008ee2:	441a      	add	r2, r3
 8008ee4:	441d      	add	r5, r3
 8008ee6:	9206      	str	r2, [sp, #24]
 8008ee8:	e779      	b.n	8008dde <_dtoa_r+0x816>
 8008eea:	4603      	mov	r3, r0
 8008eec:	e7f4      	b.n	8008ed8 <_dtoa_r+0x910>
 8008eee:	9b04      	ldr	r3, [sp, #16]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	dc37      	bgt.n	8008f64 <_dtoa_r+0x99c>
 8008ef4:	9b07      	ldr	r3, [sp, #28]
 8008ef6:	2b02      	cmp	r3, #2
 8008ef8:	dd34      	ble.n	8008f64 <_dtoa_r+0x99c>
 8008efa:	9b04      	ldr	r3, [sp, #16]
 8008efc:	9301      	str	r3, [sp, #4]
 8008efe:	9b01      	ldr	r3, [sp, #4]
 8008f00:	b963      	cbnz	r3, 8008f1c <_dtoa_r+0x954>
 8008f02:	4631      	mov	r1, r6
 8008f04:	2205      	movs	r2, #5
 8008f06:	4620      	mov	r0, r4
 8008f08:	f000 fe1c 	bl	8009b44 <__multadd>
 8008f0c:	4601      	mov	r1, r0
 8008f0e:	4606      	mov	r6, r0
 8008f10:	4650      	mov	r0, sl
 8008f12:	f001 f87b 	bl	800a00c <__mcmp>
 8008f16:	2800      	cmp	r0, #0
 8008f18:	f73f adbb 	bgt.w	8008a92 <_dtoa_r+0x4ca>
 8008f1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f1e:	9d00      	ldr	r5, [sp, #0]
 8008f20:	ea6f 0b03 	mvn.w	fp, r3
 8008f24:	f04f 0800 	mov.w	r8, #0
 8008f28:	4631      	mov	r1, r6
 8008f2a:	4620      	mov	r0, r4
 8008f2c:	f000 fde8 	bl	8009b00 <_Bfree>
 8008f30:	2f00      	cmp	r7, #0
 8008f32:	f43f aeab 	beq.w	8008c8c <_dtoa_r+0x6c4>
 8008f36:	f1b8 0f00 	cmp.w	r8, #0
 8008f3a:	d005      	beq.n	8008f48 <_dtoa_r+0x980>
 8008f3c:	45b8      	cmp	r8, r7
 8008f3e:	d003      	beq.n	8008f48 <_dtoa_r+0x980>
 8008f40:	4641      	mov	r1, r8
 8008f42:	4620      	mov	r0, r4
 8008f44:	f000 fddc 	bl	8009b00 <_Bfree>
 8008f48:	4639      	mov	r1, r7
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	f000 fdd8 	bl	8009b00 <_Bfree>
 8008f50:	e69c      	b.n	8008c8c <_dtoa_r+0x6c4>
 8008f52:	2600      	movs	r6, #0
 8008f54:	4637      	mov	r7, r6
 8008f56:	e7e1      	b.n	8008f1c <_dtoa_r+0x954>
 8008f58:	46bb      	mov	fp, r7
 8008f5a:	4637      	mov	r7, r6
 8008f5c:	e599      	b.n	8008a92 <_dtoa_r+0x4ca>
 8008f5e:	bf00      	nop
 8008f60:	40240000 	.word	0x40240000
 8008f64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	f000 80c8 	beq.w	80090fc <_dtoa_r+0xb34>
 8008f6c:	9b04      	ldr	r3, [sp, #16]
 8008f6e:	9301      	str	r3, [sp, #4]
 8008f70:	2d00      	cmp	r5, #0
 8008f72:	dd05      	ble.n	8008f80 <_dtoa_r+0x9b8>
 8008f74:	4639      	mov	r1, r7
 8008f76:	462a      	mov	r2, r5
 8008f78:	4620      	mov	r0, r4
 8008f7a:	f000 ffdb 	bl	8009f34 <__lshift>
 8008f7e:	4607      	mov	r7, r0
 8008f80:	f1b8 0f00 	cmp.w	r8, #0
 8008f84:	d05b      	beq.n	800903e <_dtoa_r+0xa76>
 8008f86:	6879      	ldr	r1, [r7, #4]
 8008f88:	4620      	mov	r0, r4
 8008f8a:	f000 fd79 	bl	8009a80 <_Balloc>
 8008f8e:	4605      	mov	r5, r0
 8008f90:	b928      	cbnz	r0, 8008f9e <_dtoa_r+0x9d6>
 8008f92:	4b83      	ldr	r3, [pc, #524]	; (80091a0 <_dtoa_r+0xbd8>)
 8008f94:	4602      	mov	r2, r0
 8008f96:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008f9a:	f7ff bb2e 	b.w	80085fa <_dtoa_r+0x32>
 8008f9e:	693a      	ldr	r2, [r7, #16]
 8008fa0:	3202      	adds	r2, #2
 8008fa2:	0092      	lsls	r2, r2, #2
 8008fa4:	f107 010c 	add.w	r1, r7, #12
 8008fa8:	300c      	adds	r0, #12
 8008faa:	f7ff fa64 	bl	8008476 <memcpy>
 8008fae:	2201      	movs	r2, #1
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	f000 ffbe 	bl	8009f34 <__lshift>
 8008fb8:	9b00      	ldr	r3, [sp, #0]
 8008fba:	3301      	adds	r3, #1
 8008fbc:	9304      	str	r3, [sp, #16]
 8008fbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	9308      	str	r3, [sp, #32]
 8008fc6:	9b02      	ldr	r3, [sp, #8]
 8008fc8:	f003 0301 	and.w	r3, r3, #1
 8008fcc:	46b8      	mov	r8, r7
 8008fce:	9306      	str	r3, [sp, #24]
 8008fd0:	4607      	mov	r7, r0
 8008fd2:	9b04      	ldr	r3, [sp, #16]
 8008fd4:	4631      	mov	r1, r6
 8008fd6:	3b01      	subs	r3, #1
 8008fd8:	4650      	mov	r0, sl
 8008fda:	9301      	str	r3, [sp, #4]
 8008fdc:	f7ff fa6a 	bl	80084b4 <quorem>
 8008fe0:	4641      	mov	r1, r8
 8008fe2:	9002      	str	r0, [sp, #8]
 8008fe4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008fe8:	4650      	mov	r0, sl
 8008fea:	f001 f80f 	bl	800a00c <__mcmp>
 8008fee:	463a      	mov	r2, r7
 8008ff0:	9005      	str	r0, [sp, #20]
 8008ff2:	4631      	mov	r1, r6
 8008ff4:	4620      	mov	r0, r4
 8008ff6:	f001 f825 	bl	800a044 <__mdiff>
 8008ffa:	68c2      	ldr	r2, [r0, #12]
 8008ffc:	4605      	mov	r5, r0
 8008ffe:	bb02      	cbnz	r2, 8009042 <_dtoa_r+0xa7a>
 8009000:	4601      	mov	r1, r0
 8009002:	4650      	mov	r0, sl
 8009004:	f001 f802 	bl	800a00c <__mcmp>
 8009008:	4602      	mov	r2, r0
 800900a:	4629      	mov	r1, r5
 800900c:	4620      	mov	r0, r4
 800900e:	9209      	str	r2, [sp, #36]	; 0x24
 8009010:	f000 fd76 	bl	8009b00 <_Bfree>
 8009014:	9b07      	ldr	r3, [sp, #28]
 8009016:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009018:	9d04      	ldr	r5, [sp, #16]
 800901a:	ea43 0102 	orr.w	r1, r3, r2
 800901e:	9b06      	ldr	r3, [sp, #24]
 8009020:	4319      	orrs	r1, r3
 8009022:	d110      	bne.n	8009046 <_dtoa_r+0xa7e>
 8009024:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009028:	d029      	beq.n	800907e <_dtoa_r+0xab6>
 800902a:	9b05      	ldr	r3, [sp, #20]
 800902c:	2b00      	cmp	r3, #0
 800902e:	dd02      	ble.n	8009036 <_dtoa_r+0xa6e>
 8009030:	9b02      	ldr	r3, [sp, #8]
 8009032:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009036:	9b01      	ldr	r3, [sp, #4]
 8009038:	f883 9000 	strb.w	r9, [r3]
 800903c:	e774      	b.n	8008f28 <_dtoa_r+0x960>
 800903e:	4638      	mov	r0, r7
 8009040:	e7ba      	b.n	8008fb8 <_dtoa_r+0x9f0>
 8009042:	2201      	movs	r2, #1
 8009044:	e7e1      	b.n	800900a <_dtoa_r+0xa42>
 8009046:	9b05      	ldr	r3, [sp, #20]
 8009048:	2b00      	cmp	r3, #0
 800904a:	db04      	blt.n	8009056 <_dtoa_r+0xa8e>
 800904c:	9907      	ldr	r1, [sp, #28]
 800904e:	430b      	orrs	r3, r1
 8009050:	9906      	ldr	r1, [sp, #24]
 8009052:	430b      	orrs	r3, r1
 8009054:	d120      	bne.n	8009098 <_dtoa_r+0xad0>
 8009056:	2a00      	cmp	r2, #0
 8009058:	dded      	ble.n	8009036 <_dtoa_r+0xa6e>
 800905a:	4651      	mov	r1, sl
 800905c:	2201      	movs	r2, #1
 800905e:	4620      	mov	r0, r4
 8009060:	f000 ff68 	bl	8009f34 <__lshift>
 8009064:	4631      	mov	r1, r6
 8009066:	4682      	mov	sl, r0
 8009068:	f000 ffd0 	bl	800a00c <__mcmp>
 800906c:	2800      	cmp	r0, #0
 800906e:	dc03      	bgt.n	8009078 <_dtoa_r+0xab0>
 8009070:	d1e1      	bne.n	8009036 <_dtoa_r+0xa6e>
 8009072:	f019 0f01 	tst.w	r9, #1
 8009076:	d0de      	beq.n	8009036 <_dtoa_r+0xa6e>
 8009078:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800907c:	d1d8      	bne.n	8009030 <_dtoa_r+0xa68>
 800907e:	9a01      	ldr	r2, [sp, #4]
 8009080:	2339      	movs	r3, #57	; 0x39
 8009082:	7013      	strb	r3, [r2, #0]
 8009084:	462b      	mov	r3, r5
 8009086:	461d      	mov	r5, r3
 8009088:	3b01      	subs	r3, #1
 800908a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800908e:	2a39      	cmp	r2, #57	; 0x39
 8009090:	d06c      	beq.n	800916c <_dtoa_r+0xba4>
 8009092:	3201      	adds	r2, #1
 8009094:	701a      	strb	r2, [r3, #0]
 8009096:	e747      	b.n	8008f28 <_dtoa_r+0x960>
 8009098:	2a00      	cmp	r2, #0
 800909a:	dd07      	ble.n	80090ac <_dtoa_r+0xae4>
 800909c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80090a0:	d0ed      	beq.n	800907e <_dtoa_r+0xab6>
 80090a2:	9a01      	ldr	r2, [sp, #4]
 80090a4:	f109 0301 	add.w	r3, r9, #1
 80090a8:	7013      	strb	r3, [r2, #0]
 80090aa:	e73d      	b.n	8008f28 <_dtoa_r+0x960>
 80090ac:	9b04      	ldr	r3, [sp, #16]
 80090ae:	9a08      	ldr	r2, [sp, #32]
 80090b0:	f803 9c01 	strb.w	r9, [r3, #-1]
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d043      	beq.n	8009140 <_dtoa_r+0xb78>
 80090b8:	4651      	mov	r1, sl
 80090ba:	2300      	movs	r3, #0
 80090bc:	220a      	movs	r2, #10
 80090be:	4620      	mov	r0, r4
 80090c0:	f000 fd40 	bl	8009b44 <__multadd>
 80090c4:	45b8      	cmp	r8, r7
 80090c6:	4682      	mov	sl, r0
 80090c8:	f04f 0300 	mov.w	r3, #0
 80090cc:	f04f 020a 	mov.w	r2, #10
 80090d0:	4641      	mov	r1, r8
 80090d2:	4620      	mov	r0, r4
 80090d4:	d107      	bne.n	80090e6 <_dtoa_r+0xb1e>
 80090d6:	f000 fd35 	bl	8009b44 <__multadd>
 80090da:	4680      	mov	r8, r0
 80090dc:	4607      	mov	r7, r0
 80090de:	9b04      	ldr	r3, [sp, #16]
 80090e0:	3301      	adds	r3, #1
 80090e2:	9304      	str	r3, [sp, #16]
 80090e4:	e775      	b.n	8008fd2 <_dtoa_r+0xa0a>
 80090e6:	f000 fd2d 	bl	8009b44 <__multadd>
 80090ea:	4639      	mov	r1, r7
 80090ec:	4680      	mov	r8, r0
 80090ee:	2300      	movs	r3, #0
 80090f0:	220a      	movs	r2, #10
 80090f2:	4620      	mov	r0, r4
 80090f4:	f000 fd26 	bl	8009b44 <__multadd>
 80090f8:	4607      	mov	r7, r0
 80090fa:	e7f0      	b.n	80090de <_dtoa_r+0xb16>
 80090fc:	9b04      	ldr	r3, [sp, #16]
 80090fe:	9301      	str	r3, [sp, #4]
 8009100:	9d00      	ldr	r5, [sp, #0]
 8009102:	4631      	mov	r1, r6
 8009104:	4650      	mov	r0, sl
 8009106:	f7ff f9d5 	bl	80084b4 <quorem>
 800910a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800910e:	9b00      	ldr	r3, [sp, #0]
 8009110:	f805 9b01 	strb.w	r9, [r5], #1
 8009114:	1aea      	subs	r2, r5, r3
 8009116:	9b01      	ldr	r3, [sp, #4]
 8009118:	4293      	cmp	r3, r2
 800911a:	dd07      	ble.n	800912c <_dtoa_r+0xb64>
 800911c:	4651      	mov	r1, sl
 800911e:	2300      	movs	r3, #0
 8009120:	220a      	movs	r2, #10
 8009122:	4620      	mov	r0, r4
 8009124:	f000 fd0e 	bl	8009b44 <__multadd>
 8009128:	4682      	mov	sl, r0
 800912a:	e7ea      	b.n	8009102 <_dtoa_r+0xb3a>
 800912c:	9b01      	ldr	r3, [sp, #4]
 800912e:	2b00      	cmp	r3, #0
 8009130:	bfc8      	it	gt
 8009132:	461d      	movgt	r5, r3
 8009134:	9b00      	ldr	r3, [sp, #0]
 8009136:	bfd8      	it	le
 8009138:	2501      	movle	r5, #1
 800913a:	441d      	add	r5, r3
 800913c:	f04f 0800 	mov.w	r8, #0
 8009140:	4651      	mov	r1, sl
 8009142:	2201      	movs	r2, #1
 8009144:	4620      	mov	r0, r4
 8009146:	f000 fef5 	bl	8009f34 <__lshift>
 800914a:	4631      	mov	r1, r6
 800914c:	4682      	mov	sl, r0
 800914e:	f000 ff5d 	bl	800a00c <__mcmp>
 8009152:	2800      	cmp	r0, #0
 8009154:	dc96      	bgt.n	8009084 <_dtoa_r+0xabc>
 8009156:	d102      	bne.n	800915e <_dtoa_r+0xb96>
 8009158:	f019 0f01 	tst.w	r9, #1
 800915c:	d192      	bne.n	8009084 <_dtoa_r+0xabc>
 800915e:	462b      	mov	r3, r5
 8009160:	461d      	mov	r5, r3
 8009162:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009166:	2a30      	cmp	r2, #48	; 0x30
 8009168:	d0fa      	beq.n	8009160 <_dtoa_r+0xb98>
 800916a:	e6dd      	b.n	8008f28 <_dtoa_r+0x960>
 800916c:	9a00      	ldr	r2, [sp, #0]
 800916e:	429a      	cmp	r2, r3
 8009170:	d189      	bne.n	8009086 <_dtoa_r+0xabe>
 8009172:	f10b 0b01 	add.w	fp, fp, #1
 8009176:	2331      	movs	r3, #49	; 0x31
 8009178:	e796      	b.n	80090a8 <_dtoa_r+0xae0>
 800917a:	4b0a      	ldr	r3, [pc, #40]	; (80091a4 <_dtoa_r+0xbdc>)
 800917c:	f7ff ba99 	b.w	80086b2 <_dtoa_r+0xea>
 8009180:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009182:	2b00      	cmp	r3, #0
 8009184:	f47f aa6d 	bne.w	8008662 <_dtoa_r+0x9a>
 8009188:	4b07      	ldr	r3, [pc, #28]	; (80091a8 <_dtoa_r+0xbe0>)
 800918a:	f7ff ba92 	b.w	80086b2 <_dtoa_r+0xea>
 800918e:	9b01      	ldr	r3, [sp, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	dcb5      	bgt.n	8009100 <_dtoa_r+0xb38>
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	2b02      	cmp	r3, #2
 8009198:	f73f aeb1 	bgt.w	8008efe <_dtoa_r+0x936>
 800919c:	e7b0      	b.n	8009100 <_dtoa_r+0xb38>
 800919e:	bf00      	nop
 80091a0:	0800c45d 	.word	0x0800c45d
 80091a4:	0800c3b0 	.word	0x0800c3b0
 80091a8:	0800c3e1 	.word	0x0800c3e1

080091ac <_free_r>:
 80091ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80091ae:	2900      	cmp	r1, #0
 80091b0:	d044      	beq.n	800923c <_free_r+0x90>
 80091b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b6:	9001      	str	r0, [sp, #4]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	f1a1 0404 	sub.w	r4, r1, #4
 80091be:	bfb8      	it	lt
 80091c0:	18e4      	addlt	r4, r4, r3
 80091c2:	f000 fc51 	bl	8009a68 <__malloc_lock>
 80091c6:	4a1e      	ldr	r2, [pc, #120]	; (8009240 <_free_r+0x94>)
 80091c8:	9801      	ldr	r0, [sp, #4]
 80091ca:	6813      	ldr	r3, [r2, #0]
 80091cc:	b933      	cbnz	r3, 80091dc <_free_r+0x30>
 80091ce:	6063      	str	r3, [r4, #4]
 80091d0:	6014      	str	r4, [r2, #0]
 80091d2:	b003      	add	sp, #12
 80091d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091d8:	f000 bc4c 	b.w	8009a74 <__malloc_unlock>
 80091dc:	42a3      	cmp	r3, r4
 80091de:	d908      	bls.n	80091f2 <_free_r+0x46>
 80091e0:	6825      	ldr	r5, [r4, #0]
 80091e2:	1961      	adds	r1, r4, r5
 80091e4:	428b      	cmp	r3, r1
 80091e6:	bf01      	itttt	eq
 80091e8:	6819      	ldreq	r1, [r3, #0]
 80091ea:	685b      	ldreq	r3, [r3, #4]
 80091ec:	1949      	addeq	r1, r1, r5
 80091ee:	6021      	streq	r1, [r4, #0]
 80091f0:	e7ed      	b.n	80091ce <_free_r+0x22>
 80091f2:	461a      	mov	r2, r3
 80091f4:	685b      	ldr	r3, [r3, #4]
 80091f6:	b10b      	cbz	r3, 80091fc <_free_r+0x50>
 80091f8:	42a3      	cmp	r3, r4
 80091fa:	d9fa      	bls.n	80091f2 <_free_r+0x46>
 80091fc:	6811      	ldr	r1, [r2, #0]
 80091fe:	1855      	adds	r5, r2, r1
 8009200:	42a5      	cmp	r5, r4
 8009202:	d10b      	bne.n	800921c <_free_r+0x70>
 8009204:	6824      	ldr	r4, [r4, #0]
 8009206:	4421      	add	r1, r4
 8009208:	1854      	adds	r4, r2, r1
 800920a:	42a3      	cmp	r3, r4
 800920c:	6011      	str	r1, [r2, #0]
 800920e:	d1e0      	bne.n	80091d2 <_free_r+0x26>
 8009210:	681c      	ldr	r4, [r3, #0]
 8009212:	685b      	ldr	r3, [r3, #4]
 8009214:	6053      	str	r3, [r2, #4]
 8009216:	440c      	add	r4, r1
 8009218:	6014      	str	r4, [r2, #0]
 800921a:	e7da      	b.n	80091d2 <_free_r+0x26>
 800921c:	d902      	bls.n	8009224 <_free_r+0x78>
 800921e:	230c      	movs	r3, #12
 8009220:	6003      	str	r3, [r0, #0]
 8009222:	e7d6      	b.n	80091d2 <_free_r+0x26>
 8009224:	6825      	ldr	r5, [r4, #0]
 8009226:	1961      	adds	r1, r4, r5
 8009228:	428b      	cmp	r3, r1
 800922a:	bf04      	itt	eq
 800922c:	6819      	ldreq	r1, [r3, #0]
 800922e:	685b      	ldreq	r3, [r3, #4]
 8009230:	6063      	str	r3, [r4, #4]
 8009232:	bf04      	itt	eq
 8009234:	1949      	addeq	r1, r1, r5
 8009236:	6021      	streq	r1, [r4, #0]
 8009238:	6054      	str	r4, [r2, #4]
 800923a:	e7ca      	b.n	80091d2 <_free_r+0x26>
 800923c:	b003      	add	sp, #12
 800923e:	bd30      	pop	{r4, r5, pc}
 8009240:	200007f4 	.word	0x200007f4

08009244 <rshift>:
 8009244:	6903      	ldr	r3, [r0, #16]
 8009246:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800924a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800924e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009252:	f100 0414 	add.w	r4, r0, #20
 8009256:	dd45      	ble.n	80092e4 <rshift+0xa0>
 8009258:	f011 011f 	ands.w	r1, r1, #31
 800925c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009260:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009264:	d10c      	bne.n	8009280 <rshift+0x3c>
 8009266:	f100 0710 	add.w	r7, r0, #16
 800926a:	4629      	mov	r1, r5
 800926c:	42b1      	cmp	r1, r6
 800926e:	d334      	bcc.n	80092da <rshift+0x96>
 8009270:	1a9b      	subs	r3, r3, r2
 8009272:	009b      	lsls	r3, r3, #2
 8009274:	1eea      	subs	r2, r5, #3
 8009276:	4296      	cmp	r6, r2
 8009278:	bf38      	it	cc
 800927a:	2300      	movcc	r3, #0
 800927c:	4423      	add	r3, r4
 800927e:	e015      	b.n	80092ac <rshift+0x68>
 8009280:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009284:	f1c1 0820 	rsb	r8, r1, #32
 8009288:	40cf      	lsrs	r7, r1
 800928a:	f105 0e04 	add.w	lr, r5, #4
 800928e:	46a1      	mov	r9, r4
 8009290:	4576      	cmp	r6, lr
 8009292:	46f4      	mov	ip, lr
 8009294:	d815      	bhi.n	80092c2 <rshift+0x7e>
 8009296:	1a9a      	subs	r2, r3, r2
 8009298:	0092      	lsls	r2, r2, #2
 800929a:	3a04      	subs	r2, #4
 800929c:	3501      	adds	r5, #1
 800929e:	42ae      	cmp	r6, r5
 80092a0:	bf38      	it	cc
 80092a2:	2200      	movcc	r2, #0
 80092a4:	18a3      	adds	r3, r4, r2
 80092a6:	50a7      	str	r7, [r4, r2]
 80092a8:	b107      	cbz	r7, 80092ac <rshift+0x68>
 80092aa:	3304      	adds	r3, #4
 80092ac:	1b1a      	subs	r2, r3, r4
 80092ae:	42a3      	cmp	r3, r4
 80092b0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80092b4:	bf08      	it	eq
 80092b6:	2300      	moveq	r3, #0
 80092b8:	6102      	str	r2, [r0, #16]
 80092ba:	bf08      	it	eq
 80092bc:	6143      	streq	r3, [r0, #20]
 80092be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80092c2:	f8dc c000 	ldr.w	ip, [ip]
 80092c6:	fa0c fc08 	lsl.w	ip, ip, r8
 80092ca:	ea4c 0707 	orr.w	r7, ip, r7
 80092ce:	f849 7b04 	str.w	r7, [r9], #4
 80092d2:	f85e 7b04 	ldr.w	r7, [lr], #4
 80092d6:	40cf      	lsrs	r7, r1
 80092d8:	e7da      	b.n	8009290 <rshift+0x4c>
 80092da:	f851 cb04 	ldr.w	ip, [r1], #4
 80092de:	f847 cf04 	str.w	ip, [r7, #4]!
 80092e2:	e7c3      	b.n	800926c <rshift+0x28>
 80092e4:	4623      	mov	r3, r4
 80092e6:	e7e1      	b.n	80092ac <rshift+0x68>

080092e8 <__hexdig_fun>:
 80092e8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80092ec:	2b09      	cmp	r3, #9
 80092ee:	d802      	bhi.n	80092f6 <__hexdig_fun+0xe>
 80092f0:	3820      	subs	r0, #32
 80092f2:	b2c0      	uxtb	r0, r0
 80092f4:	4770      	bx	lr
 80092f6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80092fa:	2b05      	cmp	r3, #5
 80092fc:	d801      	bhi.n	8009302 <__hexdig_fun+0x1a>
 80092fe:	3847      	subs	r0, #71	; 0x47
 8009300:	e7f7      	b.n	80092f2 <__hexdig_fun+0xa>
 8009302:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009306:	2b05      	cmp	r3, #5
 8009308:	d801      	bhi.n	800930e <__hexdig_fun+0x26>
 800930a:	3827      	subs	r0, #39	; 0x27
 800930c:	e7f1      	b.n	80092f2 <__hexdig_fun+0xa>
 800930e:	2000      	movs	r0, #0
 8009310:	4770      	bx	lr
	...

08009314 <__gethex>:
 8009314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009318:	4617      	mov	r7, r2
 800931a:	680a      	ldr	r2, [r1, #0]
 800931c:	b085      	sub	sp, #20
 800931e:	f102 0b02 	add.w	fp, r2, #2
 8009322:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009326:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800932a:	4681      	mov	r9, r0
 800932c:	468a      	mov	sl, r1
 800932e:	9302      	str	r3, [sp, #8]
 8009330:	32fe      	adds	r2, #254	; 0xfe
 8009332:	eb02 030b 	add.w	r3, r2, fp
 8009336:	46d8      	mov	r8, fp
 8009338:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800933c:	9301      	str	r3, [sp, #4]
 800933e:	2830      	cmp	r0, #48	; 0x30
 8009340:	d0f7      	beq.n	8009332 <__gethex+0x1e>
 8009342:	f7ff ffd1 	bl	80092e8 <__hexdig_fun>
 8009346:	4604      	mov	r4, r0
 8009348:	2800      	cmp	r0, #0
 800934a:	d138      	bne.n	80093be <__gethex+0xaa>
 800934c:	49a7      	ldr	r1, [pc, #668]	; (80095ec <__gethex+0x2d8>)
 800934e:	2201      	movs	r2, #1
 8009350:	4640      	mov	r0, r8
 8009352:	f7fe fff4 	bl	800833e <strncmp>
 8009356:	4606      	mov	r6, r0
 8009358:	2800      	cmp	r0, #0
 800935a:	d169      	bne.n	8009430 <__gethex+0x11c>
 800935c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8009360:	465d      	mov	r5, fp
 8009362:	f7ff ffc1 	bl	80092e8 <__hexdig_fun>
 8009366:	2800      	cmp	r0, #0
 8009368:	d064      	beq.n	8009434 <__gethex+0x120>
 800936a:	465a      	mov	r2, fp
 800936c:	7810      	ldrb	r0, [r2, #0]
 800936e:	2830      	cmp	r0, #48	; 0x30
 8009370:	4690      	mov	r8, r2
 8009372:	f102 0201 	add.w	r2, r2, #1
 8009376:	d0f9      	beq.n	800936c <__gethex+0x58>
 8009378:	f7ff ffb6 	bl	80092e8 <__hexdig_fun>
 800937c:	2301      	movs	r3, #1
 800937e:	fab0 f480 	clz	r4, r0
 8009382:	0964      	lsrs	r4, r4, #5
 8009384:	465e      	mov	r6, fp
 8009386:	9301      	str	r3, [sp, #4]
 8009388:	4642      	mov	r2, r8
 800938a:	4615      	mov	r5, r2
 800938c:	3201      	adds	r2, #1
 800938e:	7828      	ldrb	r0, [r5, #0]
 8009390:	f7ff ffaa 	bl	80092e8 <__hexdig_fun>
 8009394:	2800      	cmp	r0, #0
 8009396:	d1f8      	bne.n	800938a <__gethex+0x76>
 8009398:	4994      	ldr	r1, [pc, #592]	; (80095ec <__gethex+0x2d8>)
 800939a:	2201      	movs	r2, #1
 800939c:	4628      	mov	r0, r5
 800939e:	f7fe ffce 	bl	800833e <strncmp>
 80093a2:	b978      	cbnz	r0, 80093c4 <__gethex+0xb0>
 80093a4:	b946      	cbnz	r6, 80093b8 <__gethex+0xa4>
 80093a6:	1c6e      	adds	r6, r5, #1
 80093a8:	4632      	mov	r2, r6
 80093aa:	4615      	mov	r5, r2
 80093ac:	3201      	adds	r2, #1
 80093ae:	7828      	ldrb	r0, [r5, #0]
 80093b0:	f7ff ff9a 	bl	80092e8 <__hexdig_fun>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	d1f8      	bne.n	80093aa <__gethex+0x96>
 80093b8:	1b73      	subs	r3, r6, r5
 80093ba:	009e      	lsls	r6, r3, #2
 80093bc:	e004      	b.n	80093c8 <__gethex+0xb4>
 80093be:	2400      	movs	r4, #0
 80093c0:	4626      	mov	r6, r4
 80093c2:	e7e1      	b.n	8009388 <__gethex+0x74>
 80093c4:	2e00      	cmp	r6, #0
 80093c6:	d1f7      	bne.n	80093b8 <__gethex+0xa4>
 80093c8:	782b      	ldrb	r3, [r5, #0]
 80093ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80093ce:	2b50      	cmp	r3, #80	; 0x50
 80093d0:	d13d      	bne.n	800944e <__gethex+0x13a>
 80093d2:	786b      	ldrb	r3, [r5, #1]
 80093d4:	2b2b      	cmp	r3, #43	; 0x2b
 80093d6:	d02f      	beq.n	8009438 <__gethex+0x124>
 80093d8:	2b2d      	cmp	r3, #45	; 0x2d
 80093da:	d031      	beq.n	8009440 <__gethex+0x12c>
 80093dc:	1c69      	adds	r1, r5, #1
 80093de:	f04f 0b00 	mov.w	fp, #0
 80093e2:	7808      	ldrb	r0, [r1, #0]
 80093e4:	f7ff ff80 	bl	80092e8 <__hexdig_fun>
 80093e8:	1e42      	subs	r2, r0, #1
 80093ea:	b2d2      	uxtb	r2, r2
 80093ec:	2a18      	cmp	r2, #24
 80093ee:	d82e      	bhi.n	800944e <__gethex+0x13a>
 80093f0:	f1a0 0210 	sub.w	r2, r0, #16
 80093f4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093f8:	f7ff ff76 	bl	80092e8 <__hexdig_fun>
 80093fc:	f100 3cff 	add.w	ip, r0, #4294967295
 8009400:	fa5f fc8c 	uxtb.w	ip, ip
 8009404:	f1bc 0f18 	cmp.w	ip, #24
 8009408:	d91d      	bls.n	8009446 <__gethex+0x132>
 800940a:	f1bb 0f00 	cmp.w	fp, #0
 800940e:	d000      	beq.n	8009412 <__gethex+0xfe>
 8009410:	4252      	negs	r2, r2
 8009412:	4416      	add	r6, r2
 8009414:	f8ca 1000 	str.w	r1, [sl]
 8009418:	b1dc      	cbz	r4, 8009452 <__gethex+0x13e>
 800941a:	9b01      	ldr	r3, [sp, #4]
 800941c:	2b00      	cmp	r3, #0
 800941e:	bf14      	ite	ne
 8009420:	f04f 0800 	movne.w	r8, #0
 8009424:	f04f 0806 	moveq.w	r8, #6
 8009428:	4640      	mov	r0, r8
 800942a:	b005      	add	sp, #20
 800942c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009430:	4645      	mov	r5, r8
 8009432:	4626      	mov	r6, r4
 8009434:	2401      	movs	r4, #1
 8009436:	e7c7      	b.n	80093c8 <__gethex+0xb4>
 8009438:	f04f 0b00 	mov.w	fp, #0
 800943c:	1ca9      	adds	r1, r5, #2
 800943e:	e7d0      	b.n	80093e2 <__gethex+0xce>
 8009440:	f04f 0b01 	mov.w	fp, #1
 8009444:	e7fa      	b.n	800943c <__gethex+0x128>
 8009446:	230a      	movs	r3, #10
 8009448:	fb03 0002 	mla	r0, r3, r2, r0
 800944c:	e7d0      	b.n	80093f0 <__gethex+0xdc>
 800944e:	4629      	mov	r1, r5
 8009450:	e7e0      	b.n	8009414 <__gethex+0x100>
 8009452:	eba5 0308 	sub.w	r3, r5, r8
 8009456:	3b01      	subs	r3, #1
 8009458:	4621      	mov	r1, r4
 800945a:	2b07      	cmp	r3, #7
 800945c:	dc0a      	bgt.n	8009474 <__gethex+0x160>
 800945e:	4648      	mov	r0, r9
 8009460:	f000 fb0e 	bl	8009a80 <_Balloc>
 8009464:	4604      	mov	r4, r0
 8009466:	b940      	cbnz	r0, 800947a <__gethex+0x166>
 8009468:	4b61      	ldr	r3, [pc, #388]	; (80095f0 <__gethex+0x2dc>)
 800946a:	4602      	mov	r2, r0
 800946c:	21e4      	movs	r1, #228	; 0xe4
 800946e:	4861      	ldr	r0, [pc, #388]	; (80095f4 <__gethex+0x2e0>)
 8009470:	f001 fc50 	bl	800ad14 <__assert_func>
 8009474:	3101      	adds	r1, #1
 8009476:	105b      	asrs	r3, r3, #1
 8009478:	e7ef      	b.n	800945a <__gethex+0x146>
 800947a:	f100 0a14 	add.w	sl, r0, #20
 800947e:	2300      	movs	r3, #0
 8009480:	495a      	ldr	r1, [pc, #360]	; (80095ec <__gethex+0x2d8>)
 8009482:	f8cd a004 	str.w	sl, [sp, #4]
 8009486:	469b      	mov	fp, r3
 8009488:	45a8      	cmp	r8, r5
 800948a:	d342      	bcc.n	8009512 <__gethex+0x1fe>
 800948c:	9801      	ldr	r0, [sp, #4]
 800948e:	f840 bb04 	str.w	fp, [r0], #4
 8009492:	eba0 000a 	sub.w	r0, r0, sl
 8009496:	1080      	asrs	r0, r0, #2
 8009498:	6120      	str	r0, [r4, #16]
 800949a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800949e:	4658      	mov	r0, fp
 80094a0:	f000 fbe0 	bl	8009c64 <__hi0bits>
 80094a4:	683d      	ldr	r5, [r7, #0]
 80094a6:	eba8 0000 	sub.w	r0, r8, r0
 80094aa:	42a8      	cmp	r0, r5
 80094ac:	dd59      	ble.n	8009562 <__gethex+0x24e>
 80094ae:	eba0 0805 	sub.w	r8, r0, r5
 80094b2:	4641      	mov	r1, r8
 80094b4:	4620      	mov	r0, r4
 80094b6:	f000 ff6f 	bl	800a398 <__any_on>
 80094ba:	4683      	mov	fp, r0
 80094bc:	b1b8      	cbz	r0, 80094ee <__gethex+0x1da>
 80094be:	f108 33ff 	add.w	r3, r8, #4294967295
 80094c2:	1159      	asrs	r1, r3, #5
 80094c4:	f003 021f 	and.w	r2, r3, #31
 80094c8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80094cc:	f04f 0b01 	mov.w	fp, #1
 80094d0:	fa0b f202 	lsl.w	r2, fp, r2
 80094d4:	420a      	tst	r2, r1
 80094d6:	d00a      	beq.n	80094ee <__gethex+0x1da>
 80094d8:	455b      	cmp	r3, fp
 80094da:	dd06      	ble.n	80094ea <__gethex+0x1d6>
 80094dc:	f1a8 0102 	sub.w	r1, r8, #2
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 ff59 	bl	800a398 <__any_on>
 80094e6:	2800      	cmp	r0, #0
 80094e8:	d138      	bne.n	800955c <__gethex+0x248>
 80094ea:	f04f 0b02 	mov.w	fp, #2
 80094ee:	4641      	mov	r1, r8
 80094f0:	4620      	mov	r0, r4
 80094f2:	f7ff fea7 	bl	8009244 <rshift>
 80094f6:	4446      	add	r6, r8
 80094f8:	68bb      	ldr	r3, [r7, #8]
 80094fa:	42b3      	cmp	r3, r6
 80094fc:	da41      	bge.n	8009582 <__gethex+0x26e>
 80094fe:	4621      	mov	r1, r4
 8009500:	4648      	mov	r0, r9
 8009502:	f000 fafd 	bl	8009b00 <_Bfree>
 8009506:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009508:	2300      	movs	r3, #0
 800950a:	6013      	str	r3, [r2, #0]
 800950c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8009510:	e78a      	b.n	8009428 <__gethex+0x114>
 8009512:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8009516:	2a2e      	cmp	r2, #46	; 0x2e
 8009518:	d014      	beq.n	8009544 <__gethex+0x230>
 800951a:	2b20      	cmp	r3, #32
 800951c:	d106      	bne.n	800952c <__gethex+0x218>
 800951e:	9b01      	ldr	r3, [sp, #4]
 8009520:	f843 bb04 	str.w	fp, [r3], #4
 8009524:	f04f 0b00 	mov.w	fp, #0
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	465b      	mov	r3, fp
 800952c:	7828      	ldrb	r0, [r5, #0]
 800952e:	9303      	str	r3, [sp, #12]
 8009530:	f7ff feda 	bl	80092e8 <__hexdig_fun>
 8009534:	9b03      	ldr	r3, [sp, #12]
 8009536:	f000 000f 	and.w	r0, r0, #15
 800953a:	4098      	lsls	r0, r3
 800953c:	ea4b 0b00 	orr.w	fp, fp, r0
 8009540:	3304      	adds	r3, #4
 8009542:	e7a1      	b.n	8009488 <__gethex+0x174>
 8009544:	45a8      	cmp	r8, r5
 8009546:	d8e8      	bhi.n	800951a <__gethex+0x206>
 8009548:	2201      	movs	r2, #1
 800954a:	4628      	mov	r0, r5
 800954c:	9303      	str	r3, [sp, #12]
 800954e:	f7fe fef6 	bl	800833e <strncmp>
 8009552:	4926      	ldr	r1, [pc, #152]	; (80095ec <__gethex+0x2d8>)
 8009554:	9b03      	ldr	r3, [sp, #12]
 8009556:	2800      	cmp	r0, #0
 8009558:	d1df      	bne.n	800951a <__gethex+0x206>
 800955a:	e795      	b.n	8009488 <__gethex+0x174>
 800955c:	f04f 0b03 	mov.w	fp, #3
 8009560:	e7c5      	b.n	80094ee <__gethex+0x1da>
 8009562:	da0b      	bge.n	800957c <__gethex+0x268>
 8009564:	eba5 0800 	sub.w	r8, r5, r0
 8009568:	4621      	mov	r1, r4
 800956a:	4642      	mov	r2, r8
 800956c:	4648      	mov	r0, r9
 800956e:	f000 fce1 	bl	8009f34 <__lshift>
 8009572:	eba6 0608 	sub.w	r6, r6, r8
 8009576:	4604      	mov	r4, r0
 8009578:	f100 0a14 	add.w	sl, r0, #20
 800957c:	f04f 0b00 	mov.w	fp, #0
 8009580:	e7ba      	b.n	80094f8 <__gethex+0x1e4>
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	42b3      	cmp	r3, r6
 8009586:	dd73      	ble.n	8009670 <__gethex+0x35c>
 8009588:	1b9e      	subs	r6, r3, r6
 800958a:	42b5      	cmp	r5, r6
 800958c:	dc34      	bgt.n	80095f8 <__gethex+0x2e4>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b02      	cmp	r3, #2
 8009592:	d023      	beq.n	80095dc <__gethex+0x2c8>
 8009594:	2b03      	cmp	r3, #3
 8009596:	d025      	beq.n	80095e4 <__gethex+0x2d0>
 8009598:	2b01      	cmp	r3, #1
 800959a:	d115      	bne.n	80095c8 <__gethex+0x2b4>
 800959c:	42b5      	cmp	r5, r6
 800959e:	d113      	bne.n	80095c8 <__gethex+0x2b4>
 80095a0:	2d01      	cmp	r5, #1
 80095a2:	d10b      	bne.n	80095bc <__gethex+0x2a8>
 80095a4:	9a02      	ldr	r2, [sp, #8]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6013      	str	r3, [r2, #0]
 80095aa:	2301      	movs	r3, #1
 80095ac:	6123      	str	r3, [r4, #16]
 80095ae:	f8ca 3000 	str.w	r3, [sl]
 80095b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80095b4:	f04f 0862 	mov.w	r8, #98	; 0x62
 80095b8:	601c      	str	r4, [r3, #0]
 80095ba:	e735      	b.n	8009428 <__gethex+0x114>
 80095bc:	1e69      	subs	r1, r5, #1
 80095be:	4620      	mov	r0, r4
 80095c0:	f000 feea 	bl	800a398 <__any_on>
 80095c4:	2800      	cmp	r0, #0
 80095c6:	d1ed      	bne.n	80095a4 <__gethex+0x290>
 80095c8:	4621      	mov	r1, r4
 80095ca:	4648      	mov	r0, r9
 80095cc:	f000 fa98 	bl	8009b00 <_Bfree>
 80095d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095d2:	2300      	movs	r3, #0
 80095d4:	6013      	str	r3, [r2, #0]
 80095d6:	f04f 0850 	mov.w	r8, #80	; 0x50
 80095da:	e725      	b.n	8009428 <__gethex+0x114>
 80095dc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d1f2      	bne.n	80095c8 <__gethex+0x2b4>
 80095e2:	e7df      	b.n	80095a4 <__gethex+0x290>
 80095e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d1dc      	bne.n	80095a4 <__gethex+0x290>
 80095ea:	e7ed      	b.n	80095c8 <__gethex+0x2b4>
 80095ec:	0800c348 	.word	0x0800c348
 80095f0:	0800c45d 	.word	0x0800c45d
 80095f4:	0800c46e 	.word	0x0800c46e
 80095f8:	f106 38ff 	add.w	r8, r6, #4294967295
 80095fc:	f1bb 0f00 	cmp.w	fp, #0
 8009600:	d133      	bne.n	800966a <__gethex+0x356>
 8009602:	f1b8 0f00 	cmp.w	r8, #0
 8009606:	d004      	beq.n	8009612 <__gethex+0x2fe>
 8009608:	4641      	mov	r1, r8
 800960a:	4620      	mov	r0, r4
 800960c:	f000 fec4 	bl	800a398 <__any_on>
 8009610:	4683      	mov	fp, r0
 8009612:	ea4f 1268 	mov.w	r2, r8, asr #5
 8009616:	2301      	movs	r3, #1
 8009618:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800961c:	f008 081f 	and.w	r8, r8, #31
 8009620:	fa03 f308 	lsl.w	r3, r3, r8
 8009624:	4213      	tst	r3, r2
 8009626:	4631      	mov	r1, r6
 8009628:	4620      	mov	r0, r4
 800962a:	bf18      	it	ne
 800962c:	f04b 0b02 	orrne.w	fp, fp, #2
 8009630:	1bad      	subs	r5, r5, r6
 8009632:	f7ff fe07 	bl	8009244 <rshift>
 8009636:	687e      	ldr	r6, [r7, #4]
 8009638:	f04f 0802 	mov.w	r8, #2
 800963c:	f1bb 0f00 	cmp.w	fp, #0
 8009640:	d04a      	beq.n	80096d8 <__gethex+0x3c4>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	2b02      	cmp	r3, #2
 8009646:	d016      	beq.n	8009676 <__gethex+0x362>
 8009648:	2b03      	cmp	r3, #3
 800964a:	d018      	beq.n	800967e <__gethex+0x36a>
 800964c:	2b01      	cmp	r3, #1
 800964e:	d109      	bne.n	8009664 <__gethex+0x350>
 8009650:	f01b 0f02 	tst.w	fp, #2
 8009654:	d006      	beq.n	8009664 <__gethex+0x350>
 8009656:	f8da 3000 	ldr.w	r3, [sl]
 800965a:	ea4b 0b03 	orr.w	fp, fp, r3
 800965e:	f01b 0f01 	tst.w	fp, #1
 8009662:	d10f      	bne.n	8009684 <__gethex+0x370>
 8009664:	f048 0810 	orr.w	r8, r8, #16
 8009668:	e036      	b.n	80096d8 <__gethex+0x3c4>
 800966a:	f04f 0b01 	mov.w	fp, #1
 800966e:	e7d0      	b.n	8009612 <__gethex+0x2fe>
 8009670:	f04f 0801 	mov.w	r8, #1
 8009674:	e7e2      	b.n	800963c <__gethex+0x328>
 8009676:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009678:	f1c3 0301 	rsb	r3, r3, #1
 800967c:	930f      	str	r3, [sp, #60]	; 0x3c
 800967e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009680:	2b00      	cmp	r3, #0
 8009682:	d0ef      	beq.n	8009664 <__gethex+0x350>
 8009684:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009688:	f104 0214 	add.w	r2, r4, #20
 800968c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009690:	9301      	str	r3, [sp, #4]
 8009692:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009696:	2300      	movs	r3, #0
 8009698:	4694      	mov	ip, r2
 800969a:	f852 1b04 	ldr.w	r1, [r2], #4
 800969e:	f1b1 3fff 	cmp.w	r1, #4294967295
 80096a2:	d01e      	beq.n	80096e2 <__gethex+0x3ce>
 80096a4:	3101      	adds	r1, #1
 80096a6:	f8cc 1000 	str.w	r1, [ip]
 80096aa:	f1b8 0f02 	cmp.w	r8, #2
 80096ae:	f104 0214 	add.w	r2, r4, #20
 80096b2:	d13d      	bne.n	8009730 <__gethex+0x41c>
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	3b01      	subs	r3, #1
 80096b8:	42ab      	cmp	r3, r5
 80096ba:	d10b      	bne.n	80096d4 <__gethex+0x3c0>
 80096bc:	1169      	asrs	r1, r5, #5
 80096be:	2301      	movs	r3, #1
 80096c0:	f005 051f 	and.w	r5, r5, #31
 80096c4:	fa03 f505 	lsl.w	r5, r3, r5
 80096c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80096cc:	421d      	tst	r5, r3
 80096ce:	bf18      	it	ne
 80096d0:	f04f 0801 	movne.w	r8, #1
 80096d4:	f048 0820 	orr.w	r8, r8, #32
 80096d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096da:	601c      	str	r4, [r3, #0]
 80096dc:	9b02      	ldr	r3, [sp, #8]
 80096de:	601e      	str	r6, [r3, #0]
 80096e0:	e6a2      	b.n	8009428 <__gethex+0x114>
 80096e2:	4290      	cmp	r0, r2
 80096e4:	f842 3c04 	str.w	r3, [r2, #-4]
 80096e8:	d8d6      	bhi.n	8009698 <__gethex+0x384>
 80096ea:	68a2      	ldr	r2, [r4, #8]
 80096ec:	4593      	cmp	fp, r2
 80096ee:	db17      	blt.n	8009720 <__gethex+0x40c>
 80096f0:	6861      	ldr	r1, [r4, #4]
 80096f2:	4648      	mov	r0, r9
 80096f4:	3101      	adds	r1, #1
 80096f6:	f000 f9c3 	bl	8009a80 <_Balloc>
 80096fa:	4682      	mov	sl, r0
 80096fc:	b918      	cbnz	r0, 8009706 <__gethex+0x3f2>
 80096fe:	4b1b      	ldr	r3, [pc, #108]	; (800976c <__gethex+0x458>)
 8009700:	4602      	mov	r2, r0
 8009702:	2184      	movs	r1, #132	; 0x84
 8009704:	e6b3      	b.n	800946e <__gethex+0x15a>
 8009706:	6922      	ldr	r2, [r4, #16]
 8009708:	3202      	adds	r2, #2
 800970a:	f104 010c 	add.w	r1, r4, #12
 800970e:	0092      	lsls	r2, r2, #2
 8009710:	300c      	adds	r0, #12
 8009712:	f7fe feb0 	bl	8008476 <memcpy>
 8009716:	4621      	mov	r1, r4
 8009718:	4648      	mov	r0, r9
 800971a:	f000 f9f1 	bl	8009b00 <_Bfree>
 800971e:	4654      	mov	r4, sl
 8009720:	6922      	ldr	r2, [r4, #16]
 8009722:	1c51      	adds	r1, r2, #1
 8009724:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009728:	6121      	str	r1, [r4, #16]
 800972a:	2101      	movs	r1, #1
 800972c:	6151      	str	r1, [r2, #20]
 800972e:	e7bc      	b.n	80096aa <__gethex+0x396>
 8009730:	6921      	ldr	r1, [r4, #16]
 8009732:	4559      	cmp	r1, fp
 8009734:	dd0b      	ble.n	800974e <__gethex+0x43a>
 8009736:	2101      	movs	r1, #1
 8009738:	4620      	mov	r0, r4
 800973a:	f7ff fd83 	bl	8009244 <rshift>
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	3601      	adds	r6, #1
 8009742:	42b3      	cmp	r3, r6
 8009744:	f6ff aedb 	blt.w	80094fe <__gethex+0x1ea>
 8009748:	f04f 0801 	mov.w	r8, #1
 800974c:	e7c2      	b.n	80096d4 <__gethex+0x3c0>
 800974e:	f015 051f 	ands.w	r5, r5, #31
 8009752:	d0f9      	beq.n	8009748 <__gethex+0x434>
 8009754:	9b01      	ldr	r3, [sp, #4]
 8009756:	441a      	add	r2, r3
 8009758:	f1c5 0520 	rsb	r5, r5, #32
 800975c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009760:	f000 fa80 	bl	8009c64 <__hi0bits>
 8009764:	42a8      	cmp	r0, r5
 8009766:	dbe6      	blt.n	8009736 <__gethex+0x422>
 8009768:	e7ee      	b.n	8009748 <__gethex+0x434>
 800976a:	bf00      	nop
 800976c:	0800c45d 	.word	0x0800c45d

08009770 <L_shift>:
 8009770:	f1c2 0208 	rsb	r2, r2, #8
 8009774:	0092      	lsls	r2, r2, #2
 8009776:	b570      	push	{r4, r5, r6, lr}
 8009778:	f1c2 0620 	rsb	r6, r2, #32
 800977c:	6843      	ldr	r3, [r0, #4]
 800977e:	6804      	ldr	r4, [r0, #0]
 8009780:	fa03 f506 	lsl.w	r5, r3, r6
 8009784:	432c      	orrs	r4, r5
 8009786:	40d3      	lsrs	r3, r2
 8009788:	6004      	str	r4, [r0, #0]
 800978a:	f840 3f04 	str.w	r3, [r0, #4]!
 800978e:	4288      	cmp	r0, r1
 8009790:	d3f4      	bcc.n	800977c <L_shift+0xc>
 8009792:	bd70      	pop	{r4, r5, r6, pc}

08009794 <__match>:
 8009794:	b530      	push	{r4, r5, lr}
 8009796:	6803      	ldr	r3, [r0, #0]
 8009798:	3301      	adds	r3, #1
 800979a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800979e:	b914      	cbnz	r4, 80097a6 <__match+0x12>
 80097a0:	6003      	str	r3, [r0, #0]
 80097a2:	2001      	movs	r0, #1
 80097a4:	bd30      	pop	{r4, r5, pc}
 80097a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097aa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 80097ae:	2d19      	cmp	r5, #25
 80097b0:	bf98      	it	ls
 80097b2:	3220      	addls	r2, #32
 80097b4:	42a2      	cmp	r2, r4
 80097b6:	d0f0      	beq.n	800979a <__match+0x6>
 80097b8:	2000      	movs	r0, #0
 80097ba:	e7f3      	b.n	80097a4 <__match+0x10>

080097bc <__hexnan>:
 80097bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097c0:	680b      	ldr	r3, [r1, #0]
 80097c2:	6801      	ldr	r1, [r0, #0]
 80097c4:	115e      	asrs	r6, r3, #5
 80097c6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80097ca:	f013 031f 	ands.w	r3, r3, #31
 80097ce:	b087      	sub	sp, #28
 80097d0:	bf18      	it	ne
 80097d2:	3604      	addne	r6, #4
 80097d4:	2500      	movs	r5, #0
 80097d6:	1f37      	subs	r7, r6, #4
 80097d8:	4682      	mov	sl, r0
 80097da:	4690      	mov	r8, r2
 80097dc:	9301      	str	r3, [sp, #4]
 80097de:	f846 5c04 	str.w	r5, [r6, #-4]
 80097e2:	46b9      	mov	r9, r7
 80097e4:	463c      	mov	r4, r7
 80097e6:	9502      	str	r5, [sp, #8]
 80097e8:	46ab      	mov	fp, r5
 80097ea:	784a      	ldrb	r2, [r1, #1]
 80097ec:	1c4b      	adds	r3, r1, #1
 80097ee:	9303      	str	r3, [sp, #12]
 80097f0:	b342      	cbz	r2, 8009844 <__hexnan+0x88>
 80097f2:	4610      	mov	r0, r2
 80097f4:	9105      	str	r1, [sp, #20]
 80097f6:	9204      	str	r2, [sp, #16]
 80097f8:	f7ff fd76 	bl	80092e8 <__hexdig_fun>
 80097fc:	2800      	cmp	r0, #0
 80097fe:	d14f      	bne.n	80098a0 <__hexnan+0xe4>
 8009800:	9a04      	ldr	r2, [sp, #16]
 8009802:	9905      	ldr	r1, [sp, #20]
 8009804:	2a20      	cmp	r2, #32
 8009806:	d818      	bhi.n	800983a <__hexnan+0x7e>
 8009808:	9b02      	ldr	r3, [sp, #8]
 800980a:	459b      	cmp	fp, r3
 800980c:	dd13      	ble.n	8009836 <__hexnan+0x7a>
 800980e:	454c      	cmp	r4, r9
 8009810:	d206      	bcs.n	8009820 <__hexnan+0x64>
 8009812:	2d07      	cmp	r5, #7
 8009814:	dc04      	bgt.n	8009820 <__hexnan+0x64>
 8009816:	462a      	mov	r2, r5
 8009818:	4649      	mov	r1, r9
 800981a:	4620      	mov	r0, r4
 800981c:	f7ff ffa8 	bl	8009770 <L_shift>
 8009820:	4544      	cmp	r4, r8
 8009822:	d950      	bls.n	80098c6 <__hexnan+0x10a>
 8009824:	2300      	movs	r3, #0
 8009826:	f1a4 0904 	sub.w	r9, r4, #4
 800982a:	f844 3c04 	str.w	r3, [r4, #-4]
 800982e:	f8cd b008 	str.w	fp, [sp, #8]
 8009832:	464c      	mov	r4, r9
 8009834:	461d      	mov	r5, r3
 8009836:	9903      	ldr	r1, [sp, #12]
 8009838:	e7d7      	b.n	80097ea <__hexnan+0x2e>
 800983a:	2a29      	cmp	r2, #41	; 0x29
 800983c:	d155      	bne.n	80098ea <__hexnan+0x12e>
 800983e:	3102      	adds	r1, #2
 8009840:	f8ca 1000 	str.w	r1, [sl]
 8009844:	f1bb 0f00 	cmp.w	fp, #0
 8009848:	d04f      	beq.n	80098ea <__hexnan+0x12e>
 800984a:	454c      	cmp	r4, r9
 800984c:	d206      	bcs.n	800985c <__hexnan+0xa0>
 800984e:	2d07      	cmp	r5, #7
 8009850:	dc04      	bgt.n	800985c <__hexnan+0xa0>
 8009852:	462a      	mov	r2, r5
 8009854:	4649      	mov	r1, r9
 8009856:	4620      	mov	r0, r4
 8009858:	f7ff ff8a 	bl	8009770 <L_shift>
 800985c:	4544      	cmp	r4, r8
 800985e:	d934      	bls.n	80098ca <__hexnan+0x10e>
 8009860:	f1a8 0204 	sub.w	r2, r8, #4
 8009864:	4623      	mov	r3, r4
 8009866:	f853 1b04 	ldr.w	r1, [r3], #4
 800986a:	f842 1f04 	str.w	r1, [r2, #4]!
 800986e:	429f      	cmp	r7, r3
 8009870:	d2f9      	bcs.n	8009866 <__hexnan+0xaa>
 8009872:	1b3b      	subs	r3, r7, r4
 8009874:	f023 0303 	bic.w	r3, r3, #3
 8009878:	3304      	adds	r3, #4
 800987a:	3e03      	subs	r6, #3
 800987c:	3401      	adds	r4, #1
 800987e:	42a6      	cmp	r6, r4
 8009880:	bf38      	it	cc
 8009882:	2304      	movcc	r3, #4
 8009884:	4443      	add	r3, r8
 8009886:	2200      	movs	r2, #0
 8009888:	f843 2b04 	str.w	r2, [r3], #4
 800988c:	429f      	cmp	r7, r3
 800988e:	d2fb      	bcs.n	8009888 <__hexnan+0xcc>
 8009890:	683b      	ldr	r3, [r7, #0]
 8009892:	b91b      	cbnz	r3, 800989c <__hexnan+0xe0>
 8009894:	4547      	cmp	r7, r8
 8009896:	d126      	bne.n	80098e6 <__hexnan+0x12a>
 8009898:	2301      	movs	r3, #1
 800989a:	603b      	str	r3, [r7, #0]
 800989c:	2005      	movs	r0, #5
 800989e:	e025      	b.n	80098ec <__hexnan+0x130>
 80098a0:	3501      	adds	r5, #1
 80098a2:	2d08      	cmp	r5, #8
 80098a4:	f10b 0b01 	add.w	fp, fp, #1
 80098a8:	dd06      	ble.n	80098b8 <__hexnan+0xfc>
 80098aa:	4544      	cmp	r4, r8
 80098ac:	d9c3      	bls.n	8009836 <__hexnan+0x7a>
 80098ae:	2300      	movs	r3, #0
 80098b0:	f844 3c04 	str.w	r3, [r4, #-4]
 80098b4:	2501      	movs	r5, #1
 80098b6:	3c04      	subs	r4, #4
 80098b8:	6822      	ldr	r2, [r4, #0]
 80098ba:	f000 000f 	and.w	r0, r0, #15
 80098be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80098c2:	6020      	str	r0, [r4, #0]
 80098c4:	e7b7      	b.n	8009836 <__hexnan+0x7a>
 80098c6:	2508      	movs	r5, #8
 80098c8:	e7b5      	b.n	8009836 <__hexnan+0x7a>
 80098ca:	9b01      	ldr	r3, [sp, #4]
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d0df      	beq.n	8009890 <__hexnan+0xd4>
 80098d0:	f1c3 0320 	rsb	r3, r3, #32
 80098d4:	f04f 32ff 	mov.w	r2, #4294967295
 80098d8:	40da      	lsrs	r2, r3
 80098da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80098de:	4013      	ands	r3, r2
 80098e0:	f846 3c04 	str.w	r3, [r6, #-4]
 80098e4:	e7d4      	b.n	8009890 <__hexnan+0xd4>
 80098e6:	3f04      	subs	r7, #4
 80098e8:	e7d2      	b.n	8009890 <__hexnan+0xd4>
 80098ea:	2004      	movs	r0, #4
 80098ec:	b007      	add	sp, #28
 80098ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080098f4 <malloc>:
 80098f4:	4b02      	ldr	r3, [pc, #8]	; (8009900 <malloc+0xc>)
 80098f6:	4601      	mov	r1, r0
 80098f8:	6818      	ldr	r0, [r3, #0]
 80098fa:	f000 b823 	b.w	8009944 <_malloc_r>
 80098fe:	bf00      	nop
 8009900:	20000208 	.word	0x20000208

08009904 <sbrk_aligned>:
 8009904:	b570      	push	{r4, r5, r6, lr}
 8009906:	4e0e      	ldr	r6, [pc, #56]	; (8009940 <sbrk_aligned+0x3c>)
 8009908:	460c      	mov	r4, r1
 800990a:	6831      	ldr	r1, [r6, #0]
 800990c:	4605      	mov	r5, r0
 800990e:	b911      	cbnz	r1, 8009916 <sbrk_aligned+0x12>
 8009910:	f001 f9f0 	bl	800acf4 <_sbrk_r>
 8009914:	6030      	str	r0, [r6, #0]
 8009916:	4621      	mov	r1, r4
 8009918:	4628      	mov	r0, r5
 800991a:	f001 f9eb 	bl	800acf4 <_sbrk_r>
 800991e:	1c43      	adds	r3, r0, #1
 8009920:	d00a      	beq.n	8009938 <sbrk_aligned+0x34>
 8009922:	1cc4      	adds	r4, r0, #3
 8009924:	f024 0403 	bic.w	r4, r4, #3
 8009928:	42a0      	cmp	r0, r4
 800992a:	d007      	beq.n	800993c <sbrk_aligned+0x38>
 800992c:	1a21      	subs	r1, r4, r0
 800992e:	4628      	mov	r0, r5
 8009930:	f001 f9e0 	bl	800acf4 <_sbrk_r>
 8009934:	3001      	adds	r0, #1
 8009936:	d101      	bne.n	800993c <sbrk_aligned+0x38>
 8009938:	f04f 34ff 	mov.w	r4, #4294967295
 800993c:	4620      	mov	r0, r4
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	200007f8 	.word	0x200007f8

08009944 <_malloc_r>:
 8009944:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009948:	1ccd      	adds	r5, r1, #3
 800994a:	f025 0503 	bic.w	r5, r5, #3
 800994e:	3508      	adds	r5, #8
 8009950:	2d0c      	cmp	r5, #12
 8009952:	bf38      	it	cc
 8009954:	250c      	movcc	r5, #12
 8009956:	2d00      	cmp	r5, #0
 8009958:	4607      	mov	r7, r0
 800995a:	db01      	blt.n	8009960 <_malloc_r+0x1c>
 800995c:	42a9      	cmp	r1, r5
 800995e:	d905      	bls.n	800996c <_malloc_r+0x28>
 8009960:	230c      	movs	r3, #12
 8009962:	603b      	str	r3, [r7, #0]
 8009964:	2600      	movs	r6, #0
 8009966:	4630      	mov	r0, r6
 8009968:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800996c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a40 <_malloc_r+0xfc>
 8009970:	f000 f87a 	bl	8009a68 <__malloc_lock>
 8009974:	f8d8 3000 	ldr.w	r3, [r8]
 8009978:	461c      	mov	r4, r3
 800997a:	bb5c      	cbnz	r4, 80099d4 <_malloc_r+0x90>
 800997c:	4629      	mov	r1, r5
 800997e:	4638      	mov	r0, r7
 8009980:	f7ff ffc0 	bl	8009904 <sbrk_aligned>
 8009984:	1c43      	adds	r3, r0, #1
 8009986:	4604      	mov	r4, r0
 8009988:	d155      	bne.n	8009a36 <_malloc_r+0xf2>
 800998a:	f8d8 4000 	ldr.w	r4, [r8]
 800998e:	4626      	mov	r6, r4
 8009990:	2e00      	cmp	r6, #0
 8009992:	d145      	bne.n	8009a20 <_malloc_r+0xdc>
 8009994:	2c00      	cmp	r4, #0
 8009996:	d048      	beq.n	8009a2a <_malloc_r+0xe6>
 8009998:	6823      	ldr	r3, [r4, #0]
 800999a:	4631      	mov	r1, r6
 800999c:	4638      	mov	r0, r7
 800999e:	eb04 0903 	add.w	r9, r4, r3
 80099a2:	f001 f9a7 	bl	800acf4 <_sbrk_r>
 80099a6:	4581      	cmp	r9, r0
 80099a8:	d13f      	bne.n	8009a2a <_malloc_r+0xe6>
 80099aa:	6821      	ldr	r1, [r4, #0]
 80099ac:	1a6d      	subs	r5, r5, r1
 80099ae:	4629      	mov	r1, r5
 80099b0:	4638      	mov	r0, r7
 80099b2:	f7ff ffa7 	bl	8009904 <sbrk_aligned>
 80099b6:	3001      	adds	r0, #1
 80099b8:	d037      	beq.n	8009a2a <_malloc_r+0xe6>
 80099ba:	6823      	ldr	r3, [r4, #0]
 80099bc:	442b      	add	r3, r5
 80099be:	6023      	str	r3, [r4, #0]
 80099c0:	f8d8 3000 	ldr.w	r3, [r8]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d038      	beq.n	8009a3a <_malloc_r+0xf6>
 80099c8:	685a      	ldr	r2, [r3, #4]
 80099ca:	42a2      	cmp	r2, r4
 80099cc:	d12b      	bne.n	8009a26 <_malloc_r+0xe2>
 80099ce:	2200      	movs	r2, #0
 80099d0:	605a      	str	r2, [r3, #4]
 80099d2:	e00f      	b.n	80099f4 <_malloc_r+0xb0>
 80099d4:	6822      	ldr	r2, [r4, #0]
 80099d6:	1b52      	subs	r2, r2, r5
 80099d8:	d41f      	bmi.n	8009a1a <_malloc_r+0xd6>
 80099da:	2a0b      	cmp	r2, #11
 80099dc:	d917      	bls.n	8009a0e <_malloc_r+0xca>
 80099de:	1961      	adds	r1, r4, r5
 80099e0:	42a3      	cmp	r3, r4
 80099e2:	6025      	str	r5, [r4, #0]
 80099e4:	bf18      	it	ne
 80099e6:	6059      	strne	r1, [r3, #4]
 80099e8:	6863      	ldr	r3, [r4, #4]
 80099ea:	bf08      	it	eq
 80099ec:	f8c8 1000 	streq.w	r1, [r8]
 80099f0:	5162      	str	r2, [r4, r5]
 80099f2:	604b      	str	r3, [r1, #4]
 80099f4:	4638      	mov	r0, r7
 80099f6:	f104 060b 	add.w	r6, r4, #11
 80099fa:	f000 f83b 	bl	8009a74 <__malloc_unlock>
 80099fe:	f026 0607 	bic.w	r6, r6, #7
 8009a02:	1d23      	adds	r3, r4, #4
 8009a04:	1af2      	subs	r2, r6, r3
 8009a06:	d0ae      	beq.n	8009966 <_malloc_r+0x22>
 8009a08:	1b9b      	subs	r3, r3, r6
 8009a0a:	50a3      	str	r3, [r4, r2]
 8009a0c:	e7ab      	b.n	8009966 <_malloc_r+0x22>
 8009a0e:	42a3      	cmp	r3, r4
 8009a10:	6862      	ldr	r2, [r4, #4]
 8009a12:	d1dd      	bne.n	80099d0 <_malloc_r+0x8c>
 8009a14:	f8c8 2000 	str.w	r2, [r8]
 8009a18:	e7ec      	b.n	80099f4 <_malloc_r+0xb0>
 8009a1a:	4623      	mov	r3, r4
 8009a1c:	6864      	ldr	r4, [r4, #4]
 8009a1e:	e7ac      	b.n	800997a <_malloc_r+0x36>
 8009a20:	4634      	mov	r4, r6
 8009a22:	6876      	ldr	r6, [r6, #4]
 8009a24:	e7b4      	b.n	8009990 <_malloc_r+0x4c>
 8009a26:	4613      	mov	r3, r2
 8009a28:	e7cc      	b.n	80099c4 <_malloc_r+0x80>
 8009a2a:	230c      	movs	r3, #12
 8009a2c:	603b      	str	r3, [r7, #0]
 8009a2e:	4638      	mov	r0, r7
 8009a30:	f000 f820 	bl	8009a74 <__malloc_unlock>
 8009a34:	e797      	b.n	8009966 <_malloc_r+0x22>
 8009a36:	6025      	str	r5, [r4, #0]
 8009a38:	e7dc      	b.n	80099f4 <_malloc_r+0xb0>
 8009a3a:	605b      	str	r3, [r3, #4]
 8009a3c:	deff      	udf	#255	; 0xff
 8009a3e:	bf00      	nop
 8009a40:	200007f4 	.word	0x200007f4

08009a44 <__ascii_mbtowc>:
 8009a44:	b082      	sub	sp, #8
 8009a46:	b901      	cbnz	r1, 8009a4a <__ascii_mbtowc+0x6>
 8009a48:	a901      	add	r1, sp, #4
 8009a4a:	b142      	cbz	r2, 8009a5e <__ascii_mbtowc+0x1a>
 8009a4c:	b14b      	cbz	r3, 8009a62 <__ascii_mbtowc+0x1e>
 8009a4e:	7813      	ldrb	r3, [r2, #0]
 8009a50:	600b      	str	r3, [r1, #0]
 8009a52:	7812      	ldrb	r2, [r2, #0]
 8009a54:	1e10      	subs	r0, r2, #0
 8009a56:	bf18      	it	ne
 8009a58:	2001      	movne	r0, #1
 8009a5a:	b002      	add	sp, #8
 8009a5c:	4770      	bx	lr
 8009a5e:	4610      	mov	r0, r2
 8009a60:	e7fb      	b.n	8009a5a <__ascii_mbtowc+0x16>
 8009a62:	f06f 0001 	mvn.w	r0, #1
 8009a66:	e7f8      	b.n	8009a5a <__ascii_mbtowc+0x16>

08009a68 <__malloc_lock>:
 8009a68:	4801      	ldr	r0, [pc, #4]	; (8009a70 <__malloc_lock+0x8>)
 8009a6a:	f7fe bd02 	b.w	8008472 <__retarget_lock_acquire_recursive>
 8009a6e:	bf00      	nop
 8009a70:	200007f0 	.word	0x200007f0

08009a74 <__malloc_unlock>:
 8009a74:	4801      	ldr	r0, [pc, #4]	; (8009a7c <__malloc_unlock+0x8>)
 8009a76:	f7fe bcfd 	b.w	8008474 <__retarget_lock_release_recursive>
 8009a7a:	bf00      	nop
 8009a7c:	200007f0 	.word	0x200007f0

08009a80 <_Balloc>:
 8009a80:	b570      	push	{r4, r5, r6, lr}
 8009a82:	69c6      	ldr	r6, [r0, #28]
 8009a84:	4604      	mov	r4, r0
 8009a86:	460d      	mov	r5, r1
 8009a88:	b976      	cbnz	r6, 8009aa8 <_Balloc+0x28>
 8009a8a:	2010      	movs	r0, #16
 8009a8c:	f7ff ff32 	bl	80098f4 <malloc>
 8009a90:	4602      	mov	r2, r0
 8009a92:	61e0      	str	r0, [r4, #28]
 8009a94:	b920      	cbnz	r0, 8009aa0 <_Balloc+0x20>
 8009a96:	4b18      	ldr	r3, [pc, #96]	; (8009af8 <_Balloc+0x78>)
 8009a98:	4818      	ldr	r0, [pc, #96]	; (8009afc <_Balloc+0x7c>)
 8009a9a:	216b      	movs	r1, #107	; 0x6b
 8009a9c:	f001 f93a 	bl	800ad14 <__assert_func>
 8009aa0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009aa4:	6006      	str	r6, [r0, #0]
 8009aa6:	60c6      	str	r6, [r0, #12]
 8009aa8:	69e6      	ldr	r6, [r4, #28]
 8009aaa:	68f3      	ldr	r3, [r6, #12]
 8009aac:	b183      	cbz	r3, 8009ad0 <_Balloc+0x50>
 8009aae:	69e3      	ldr	r3, [r4, #28]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ab6:	b9b8      	cbnz	r0, 8009ae8 <_Balloc+0x68>
 8009ab8:	2101      	movs	r1, #1
 8009aba:	fa01 f605 	lsl.w	r6, r1, r5
 8009abe:	1d72      	adds	r2, r6, #5
 8009ac0:	0092      	lsls	r2, r2, #2
 8009ac2:	4620      	mov	r0, r4
 8009ac4:	f001 f944 	bl	800ad50 <_calloc_r>
 8009ac8:	b160      	cbz	r0, 8009ae4 <_Balloc+0x64>
 8009aca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009ace:	e00e      	b.n	8009aee <_Balloc+0x6e>
 8009ad0:	2221      	movs	r2, #33	; 0x21
 8009ad2:	2104      	movs	r1, #4
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f001 f93b 	bl	800ad50 <_calloc_r>
 8009ada:	69e3      	ldr	r3, [r4, #28]
 8009adc:	60f0      	str	r0, [r6, #12]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e4      	bne.n	8009aae <_Balloc+0x2e>
 8009ae4:	2000      	movs	r0, #0
 8009ae6:	bd70      	pop	{r4, r5, r6, pc}
 8009ae8:	6802      	ldr	r2, [r0, #0]
 8009aea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009aee:	2300      	movs	r3, #0
 8009af0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009af4:	e7f7      	b.n	8009ae6 <_Balloc+0x66>
 8009af6:	bf00      	nop
 8009af8:	0800c3ee 	.word	0x0800c3ee
 8009afc:	0800c4ce 	.word	0x0800c4ce

08009b00 <_Bfree>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	69c6      	ldr	r6, [r0, #28]
 8009b04:	4605      	mov	r5, r0
 8009b06:	460c      	mov	r4, r1
 8009b08:	b976      	cbnz	r6, 8009b28 <_Bfree+0x28>
 8009b0a:	2010      	movs	r0, #16
 8009b0c:	f7ff fef2 	bl	80098f4 <malloc>
 8009b10:	4602      	mov	r2, r0
 8009b12:	61e8      	str	r0, [r5, #28]
 8009b14:	b920      	cbnz	r0, 8009b20 <_Bfree+0x20>
 8009b16:	4b09      	ldr	r3, [pc, #36]	; (8009b3c <_Bfree+0x3c>)
 8009b18:	4809      	ldr	r0, [pc, #36]	; (8009b40 <_Bfree+0x40>)
 8009b1a:	218f      	movs	r1, #143	; 0x8f
 8009b1c:	f001 f8fa 	bl	800ad14 <__assert_func>
 8009b20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b24:	6006      	str	r6, [r0, #0]
 8009b26:	60c6      	str	r6, [r0, #12]
 8009b28:	b13c      	cbz	r4, 8009b3a <_Bfree+0x3a>
 8009b2a:	69eb      	ldr	r3, [r5, #28]
 8009b2c:	6862      	ldr	r2, [r4, #4]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b34:	6021      	str	r1, [r4, #0]
 8009b36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b3a:	bd70      	pop	{r4, r5, r6, pc}
 8009b3c:	0800c3ee 	.word	0x0800c3ee
 8009b40:	0800c4ce 	.word	0x0800c4ce

08009b44 <__multadd>:
 8009b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b48:	690d      	ldr	r5, [r1, #16]
 8009b4a:	4607      	mov	r7, r0
 8009b4c:	460c      	mov	r4, r1
 8009b4e:	461e      	mov	r6, r3
 8009b50:	f101 0c14 	add.w	ip, r1, #20
 8009b54:	2000      	movs	r0, #0
 8009b56:	f8dc 3000 	ldr.w	r3, [ip]
 8009b5a:	b299      	uxth	r1, r3
 8009b5c:	fb02 6101 	mla	r1, r2, r1, r6
 8009b60:	0c1e      	lsrs	r6, r3, #16
 8009b62:	0c0b      	lsrs	r3, r1, #16
 8009b64:	fb02 3306 	mla	r3, r2, r6, r3
 8009b68:	b289      	uxth	r1, r1
 8009b6a:	3001      	adds	r0, #1
 8009b6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b70:	4285      	cmp	r5, r0
 8009b72:	f84c 1b04 	str.w	r1, [ip], #4
 8009b76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b7a:	dcec      	bgt.n	8009b56 <__multadd+0x12>
 8009b7c:	b30e      	cbz	r6, 8009bc2 <__multadd+0x7e>
 8009b7e:	68a3      	ldr	r3, [r4, #8]
 8009b80:	42ab      	cmp	r3, r5
 8009b82:	dc19      	bgt.n	8009bb8 <__multadd+0x74>
 8009b84:	6861      	ldr	r1, [r4, #4]
 8009b86:	4638      	mov	r0, r7
 8009b88:	3101      	adds	r1, #1
 8009b8a:	f7ff ff79 	bl	8009a80 <_Balloc>
 8009b8e:	4680      	mov	r8, r0
 8009b90:	b928      	cbnz	r0, 8009b9e <__multadd+0x5a>
 8009b92:	4602      	mov	r2, r0
 8009b94:	4b0c      	ldr	r3, [pc, #48]	; (8009bc8 <__multadd+0x84>)
 8009b96:	480d      	ldr	r0, [pc, #52]	; (8009bcc <__multadd+0x88>)
 8009b98:	21ba      	movs	r1, #186	; 0xba
 8009b9a:	f001 f8bb 	bl	800ad14 <__assert_func>
 8009b9e:	6922      	ldr	r2, [r4, #16]
 8009ba0:	3202      	adds	r2, #2
 8009ba2:	f104 010c 	add.w	r1, r4, #12
 8009ba6:	0092      	lsls	r2, r2, #2
 8009ba8:	300c      	adds	r0, #12
 8009baa:	f7fe fc64 	bl	8008476 <memcpy>
 8009bae:	4621      	mov	r1, r4
 8009bb0:	4638      	mov	r0, r7
 8009bb2:	f7ff ffa5 	bl	8009b00 <_Bfree>
 8009bb6:	4644      	mov	r4, r8
 8009bb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009bbc:	3501      	adds	r5, #1
 8009bbe:	615e      	str	r6, [r3, #20]
 8009bc0:	6125      	str	r5, [r4, #16]
 8009bc2:	4620      	mov	r0, r4
 8009bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc8:	0800c45d 	.word	0x0800c45d
 8009bcc:	0800c4ce 	.word	0x0800c4ce

08009bd0 <__s2b>:
 8009bd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bd4:	460c      	mov	r4, r1
 8009bd6:	4615      	mov	r5, r2
 8009bd8:	461f      	mov	r7, r3
 8009bda:	2209      	movs	r2, #9
 8009bdc:	3308      	adds	r3, #8
 8009bde:	4606      	mov	r6, r0
 8009be0:	fb93 f3f2 	sdiv	r3, r3, r2
 8009be4:	2100      	movs	r1, #0
 8009be6:	2201      	movs	r2, #1
 8009be8:	429a      	cmp	r2, r3
 8009bea:	db09      	blt.n	8009c00 <__s2b+0x30>
 8009bec:	4630      	mov	r0, r6
 8009bee:	f7ff ff47 	bl	8009a80 <_Balloc>
 8009bf2:	b940      	cbnz	r0, 8009c06 <__s2b+0x36>
 8009bf4:	4602      	mov	r2, r0
 8009bf6:	4b19      	ldr	r3, [pc, #100]	; (8009c5c <__s2b+0x8c>)
 8009bf8:	4819      	ldr	r0, [pc, #100]	; (8009c60 <__s2b+0x90>)
 8009bfa:	21d3      	movs	r1, #211	; 0xd3
 8009bfc:	f001 f88a 	bl	800ad14 <__assert_func>
 8009c00:	0052      	lsls	r2, r2, #1
 8009c02:	3101      	adds	r1, #1
 8009c04:	e7f0      	b.n	8009be8 <__s2b+0x18>
 8009c06:	9b08      	ldr	r3, [sp, #32]
 8009c08:	6143      	str	r3, [r0, #20]
 8009c0a:	2d09      	cmp	r5, #9
 8009c0c:	f04f 0301 	mov.w	r3, #1
 8009c10:	6103      	str	r3, [r0, #16]
 8009c12:	dd16      	ble.n	8009c42 <__s2b+0x72>
 8009c14:	f104 0909 	add.w	r9, r4, #9
 8009c18:	46c8      	mov	r8, r9
 8009c1a:	442c      	add	r4, r5
 8009c1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009c20:	4601      	mov	r1, r0
 8009c22:	3b30      	subs	r3, #48	; 0x30
 8009c24:	220a      	movs	r2, #10
 8009c26:	4630      	mov	r0, r6
 8009c28:	f7ff ff8c 	bl	8009b44 <__multadd>
 8009c2c:	45a0      	cmp	r8, r4
 8009c2e:	d1f5      	bne.n	8009c1c <__s2b+0x4c>
 8009c30:	f1a5 0408 	sub.w	r4, r5, #8
 8009c34:	444c      	add	r4, r9
 8009c36:	1b2d      	subs	r5, r5, r4
 8009c38:	1963      	adds	r3, r4, r5
 8009c3a:	42bb      	cmp	r3, r7
 8009c3c:	db04      	blt.n	8009c48 <__s2b+0x78>
 8009c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c42:	340a      	adds	r4, #10
 8009c44:	2509      	movs	r5, #9
 8009c46:	e7f6      	b.n	8009c36 <__s2b+0x66>
 8009c48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009c4c:	4601      	mov	r1, r0
 8009c4e:	3b30      	subs	r3, #48	; 0x30
 8009c50:	220a      	movs	r2, #10
 8009c52:	4630      	mov	r0, r6
 8009c54:	f7ff ff76 	bl	8009b44 <__multadd>
 8009c58:	e7ee      	b.n	8009c38 <__s2b+0x68>
 8009c5a:	bf00      	nop
 8009c5c:	0800c45d 	.word	0x0800c45d
 8009c60:	0800c4ce 	.word	0x0800c4ce

08009c64 <__hi0bits>:
 8009c64:	0c03      	lsrs	r3, r0, #16
 8009c66:	041b      	lsls	r3, r3, #16
 8009c68:	b9d3      	cbnz	r3, 8009ca0 <__hi0bits+0x3c>
 8009c6a:	0400      	lsls	r0, r0, #16
 8009c6c:	2310      	movs	r3, #16
 8009c6e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c72:	bf04      	itt	eq
 8009c74:	0200      	lsleq	r0, r0, #8
 8009c76:	3308      	addeq	r3, #8
 8009c78:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c7c:	bf04      	itt	eq
 8009c7e:	0100      	lsleq	r0, r0, #4
 8009c80:	3304      	addeq	r3, #4
 8009c82:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c86:	bf04      	itt	eq
 8009c88:	0080      	lsleq	r0, r0, #2
 8009c8a:	3302      	addeq	r3, #2
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	db05      	blt.n	8009c9c <__hi0bits+0x38>
 8009c90:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c94:	f103 0301 	add.w	r3, r3, #1
 8009c98:	bf08      	it	eq
 8009c9a:	2320      	moveq	r3, #32
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	4770      	bx	lr
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	e7e4      	b.n	8009c6e <__hi0bits+0xa>

08009ca4 <__lo0bits>:
 8009ca4:	6803      	ldr	r3, [r0, #0]
 8009ca6:	f013 0207 	ands.w	r2, r3, #7
 8009caa:	d00c      	beq.n	8009cc6 <__lo0bits+0x22>
 8009cac:	07d9      	lsls	r1, r3, #31
 8009cae:	d422      	bmi.n	8009cf6 <__lo0bits+0x52>
 8009cb0:	079a      	lsls	r2, r3, #30
 8009cb2:	bf49      	itett	mi
 8009cb4:	085b      	lsrmi	r3, r3, #1
 8009cb6:	089b      	lsrpl	r3, r3, #2
 8009cb8:	6003      	strmi	r3, [r0, #0]
 8009cba:	2201      	movmi	r2, #1
 8009cbc:	bf5c      	itt	pl
 8009cbe:	6003      	strpl	r3, [r0, #0]
 8009cc0:	2202      	movpl	r2, #2
 8009cc2:	4610      	mov	r0, r2
 8009cc4:	4770      	bx	lr
 8009cc6:	b299      	uxth	r1, r3
 8009cc8:	b909      	cbnz	r1, 8009cce <__lo0bits+0x2a>
 8009cca:	0c1b      	lsrs	r3, r3, #16
 8009ccc:	2210      	movs	r2, #16
 8009cce:	b2d9      	uxtb	r1, r3
 8009cd0:	b909      	cbnz	r1, 8009cd6 <__lo0bits+0x32>
 8009cd2:	3208      	adds	r2, #8
 8009cd4:	0a1b      	lsrs	r3, r3, #8
 8009cd6:	0719      	lsls	r1, r3, #28
 8009cd8:	bf04      	itt	eq
 8009cda:	091b      	lsreq	r3, r3, #4
 8009cdc:	3204      	addeq	r2, #4
 8009cde:	0799      	lsls	r1, r3, #30
 8009ce0:	bf04      	itt	eq
 8009ce2:	089b      	lsreq	r3, r3, #2
 8009ce4:	3202      	addeq	r2, #2
 8009ce6:	07d9      	lsls	r1, r3, #31
 8009ce8:	d403      	bmi.n	8009cf2 <__lo0bits+0x4e>
 8009cea:	085b      	lsrs	r3, r3, #1
 8009cec:	f102 0201 	add.w	r2, r2, #1
 8009cf0:	d003      	beq.n	8009cfa <__lo0bits+0x56>
 8009cf2:	6003      	str	r3, [r0, #0]
 8009cf4:	e7e5      	b.n	8009cc2 <__lo0bits+0x1e>
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	e7e3      	b.n	8009cc2 <__lo0bits+0x1e>
 8009cfa:	2220      	movs	r2, #32
 8009cfc:	e7e1      	b.n	8009cc2 <__lo0bits+0x1e>
	...

08009d00 <__i2b>:
 8009d00:	b510      	push	{r4, lr}
 8009d02:	460c      	mov	r4, r1
 8009d04:	2101      	movs	r1, #1
 8009d06:	f7ff febb 	bl	8009a80 <_Balloc>
 8009d0a:	4602      	mov	r2, r0
 8009d0c:	b928      	cbnz	r0, 8009d1a <__i2b+0x1a>
 8009d0e:	4b05      	ldr	r3, [pc, #20]	; (8009d24 <__i2b+0x24>)
 8009d10:	4805      	ldr	r0, [pc, #20]	; (8009d28 <__i2b+0x28>)
 8009d12:	f240 1145 	movw	r1, #325	; 0x145
 8009d16:	f000 fffd 	bl	800ad14 <__assert_func>
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	6144      	str	r4, [r0, #20]
 8009d1e:	6103      	str	r3, [r0, #16]
 8009d20:	bd10      	pop	{r4, pc}
 8009d22:	bf00      	nop
 8009d24:	0800c45d 	.word	0x0800c45d
 8009d28:	0800c4ce 	.word	0x0800c4ce

08009d2c <__multiply>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	4691      	mov	r9, r2
 8009d32:	690a      	ldr	r2, [r1, #16]
 8009d34:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	bfb8      	it	lt
 8009d3c:	460b      	movlt	r3, r1
 8009d3e:	460c      	mov	r4, r1
 8009d40:	bfbc      	itt	lt
 8009d42:	464c      	movlt	r4, r9
 8009d44:	4699      	movlt	r9, r3
 8009d46:	6927      	ldr	r7, [r4, #16]
 8009d48:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009d4c:	68a3      	ldr	r3, [r4, #8]
 8009d4e:	6861      	ldr	r1, [r4, #4]
 8009d50:	eb07 060a 	add.w	r6, r7, sl
 8009d54:	42b3      	cmp	r3, r6
 8009d56:	b085      	sub	sp, #20
 8009d58:	bfb8      	it	lt
 8009d5a:	3101      	addlt	r1, #1
 8009d5c:	f7ff fe90 	bl	8009a80 <_Balloc>
 8009d60:	b930      	cbnz	r0, 8009d70 <__multiply+0x44>
 8009d62:	4602      	mov	r2, r0
 8009d64:	4b44      	ldr	r3, [pc, #272]	; (8009e78 <__multiply+0x14c>)
 8009d66:	4845      	ldr	r0, [pc, #276]	; (8009e7c <__multiply+0x150>)
 8009d68:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009d6c:	f000 ffd2 	bl	800ad14 <__assert_func>
 8009d70:	f100 0514 	add.w	r5, r0, #20
 8009d74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d78:	462b      	mov	r3, r5
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	4543      	cmp	r3, r8
 8009d7e:	d321      	bcc.n	8009dc4 <__multiply+0x98>
 8009d80:	f104 0314 	add.w	r3, r4, #20
 8009d84:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d88:	f109 0314 	add.w	r3, r9, #20
 8009d8c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d90:	9202      	str	r2, [sp, #8]
 8009d92:	1b3a      	subs	r2, r7, r4
 8009d94:	3a15      	subs	r2, #21
 8009d96:	f022 0203 	bic.w	r2, r2, #3
 8009d9a:	3204      	adds	r2, #4
 8009d9c:	f104 0115 	add.w	r1, r4, #21
 8009da0:	428f      	cmp	r7, r1
 8009da2:	bf38      	it	cc
 8009da4:	2204      	movcc	r2, #4
 8009da6:	9201      	str	r2, [sp, #4]
 8009da8:	9a02      	ldr	r2, [sp, #8]
 8009daa:	9303      	str	r3, [sp, #12]
 8009dac:	429a      	cmp	r2, r3
 8009dae:	d80c      	bhi.n	8009dca <__multiply+0x9e>
 8009db0:	2e00      	cmp	r6, #0
 8009db2:	dd03      	ble.n	8009dbc <__multiply+0x90>
 8009db4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d05b      	beq.n	8009e74 <__multiply+0x148>
 8009dbc:	6106      	str	r6, [r0, #16]
 8009dbe:	b005      	add	sp, #20
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	f843 2b04 	str.w	r2, [r3], #4
 8009dc8:	e7d8      	b.n	8009d7c <__multiply+0x50>
 8009dca:	f8b3 a000 	ldrh.w	sl, [r3]
 8009dce:	f1ba 0f00 	cmp.w	sl, #0
 8009dd2:	d024      	beq.n	8009e1e <__multiply+0xf2>
 8009dd4:	f104 0e14 	add.w	lr, r4, #20
 8009dd8:	46a9      	mov	r9, r5
 8009dda:	f04f 0c00 	mov.w	ip, #0
 8009dde:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009de2:	f8d9 1000 	ldr.w	r1, [r9]
 8009de6:	fa1f fb82 	uxth.w	fp, r2
 8009dea:	b289      	uxth	r1, r1
 8009dec:	fb0a 110b 	mla	r1, sl, fp, r1
 8009df0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009df4:	f8d9 2000 	ldr.w	r2, [r9]
 8009df8:	4461      	add	r1, ip
 8009dfa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009dfe:	fb0a c20b 	mla	r2, sl, fp, ip
 8009e02:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009e06:	b289      	uxth	r1, r1
 8009e08:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e0c:	4577      	cmp	r7, lr
 8009e0e:	f849 1b04 	str.w	r1, [r9], #4
 8009e12:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009e16:	d8e2      	bhi.n	8009dde <__multiply+0xb2>
 8009e18:	9a01      	ldr	r2, [sp, #4]
 8009e1a:	f845 c002 	str.w	ip, [r5, r2]
 8009e1e:	9a03      	ldr	r2, [sp, #12]
 8009e20:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009e24:	3304      	adds	r3, #4
 8009e26:	f1b9 0f00 	cmp.w	r9, #0
 8009e2a:	d021      	beq.n	8009e70 <__multiply+0x144>
 8009e2c:	6829      	ldr	r1, [r5, #0]
 8009e2e:	f104 0c14 	add.w	ip, r4, #20
 8009e32:	46ae      	mov	lr, r5
 8009e34:	f04f 0a00 	mov.w	sl, #0
 8009e38:	f8bc b000 	ldrh.w	fp, [ip]
 8009e3c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009e40:	fb09 220b 	mla	r2, r9, fp, r2
 8009e44:	4452      	add	r2, sl
 8009e46:	b289      	uxth	r1, r1
 8009e48:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009e4c:	f84e 1b04 	str.w	r1, [lr], #4
 8009e50:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009e54:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e58:	f8be 1000 	ldrh.w	r1, [lr]
 8009e5c:	fb09 110a 	mla	r1, r9, sl, r1
 8009e60:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009e64:	4567      	cmp	r7, ip
 8009e66:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009e6a:	d8e5      	bhi.n	8009e38 <__multiply+0x10c>
 8009e6c:	9a01      	ldr	r2, [sp, #4]
 8009e6e:	50a9      	str	r1, [r5, r2]
 8009e70:	3504      	adds	r5, #4
 8009e72:	e799      	b.n	8009da8 <__multiply+0x7c>
 8009e74:	3e01      	subs	r6, #1
 8009e76:	e79b      	b.n	8009db0 <__multiply+0x84>
 8009e78:	0800c45d 	.word	0x0800c45d
 8009e7c:	0800c4ce 	.word	0x0800c4ce

08009e80 <__pow5mult>:
 8009e80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e84:	4615      	mov	r5, r2
 8009e86:	f012 0203 	ands.w	r2, r2, #3
 8009e8a:	4606      	mov	r6, r0
 8009e8c:	460f      	mov	r7, r1
 8009e8e:	d007      	beq.n	8009ea0 <__pow5mult+0x20>
 8009e90:	4c25      	ldr	r4, [pc, #148]	; (8009f28 <__pow5mult+0xa8>)
 8009e92:	3a01      	subs	r2, #1
 8009e94:	2300      	movs	r3, #0
 8009e96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e9a:	f7ff fe53 	bl	8009b44 <__multadd>
 8009e9e:	4607      	mov	r7, r0
 8009ea0:	10ad      	asrs	r5, r5, #2
 8009ea2:	d03d      	beq.n	8009f20 <__pow5mult+0xa0>
 8009ea4:	69f4      	ldr	r4, [r6, #28]
 8009ea6:	b97c      	cbnz	r4, 8009ec8 <__pow5mult+0x48>
 8009ea8:	2010      	movs	r0, #16
 8009eaa:	f7ff fd23 	bl	80098f4 <malloc>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	61f0      	str	r0, [r6, #28]
 8009eb2:	b928      	cbnz	r0, 8009ec0 <__pow5mult+0x40>
 8009eb4:	4b1d      	ldr	r3, [pc, #116]	; (8009f2c <__pow5mult+0xac>)
 8009eb6:	481e      	ldr	r0, [pc, #120]	; (8009f30 <__pow5mult+0xb0>)
 8009eb8:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009ebc:	f000 ff2a 	bl	800ad14 <__assert_func>
 8009ec0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009ec4:	6004      	str	r4, [r0, #0]
 8009ec6:	60c4      	str	r4, [r0, #12]
 8009ec8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009ecc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ed0:	b94c      	cbnz	r4, 8009ee6 <__pow5mult+0x66>
 8009ed2:	f240 2171 	movw	r1, #625	; 0x271
 8009ed6:	4630      	mov	r0, r6
 8009ed8:	f7ff ff12 	bl	8009d00 <__i2b>
 8009edc:	2300      	movs	r3, #0
 8009ede:	f8c8 0008 	str.w	r0, [r8, #8]
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	6003      	str	r3, [r0, #0]
 8009ee6:	f04f 0900 	mov.w	r9, #0
 8009eea:	07eb      	lsls	r3, r5, #31
 8009eec:	d50a      	bpl.n	8009f04 <__pow5mult+0x84>
 8009eee:	4639      	mov	r1, r7
 8009ef0:	4622      	mov	r2, r4
 8009ef2:	4630      	mov	r0, r6
 8009ef4:	f7ff ff1a 	bl	8009d2c <__multiply>
 8009ef8:	4639      	mov	r1, r7
 8009efa:	4680      	mov	r8, r0
 8009efc:	4630      	mov	r0, r6
 8009efe:	f7ff fdff 	bl	8009b00 <_Bfree>
 8009f02:	4647      	mov	r7, r8
 8009f04:	106d      	asrs	r5, r5, #1
 8009f06:	d00b      	beq.n	8009f20 <__pow5mult+0xa0>
 8009f08:	6820      	ldr	r0, [r4, #0]
 8009f0a:	b938      	cbnz	r0, 8009f1c <__pow5mult+0x9c>
 8009f0c:	4622      	mov	r2, r4
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4630      	mov	r0, r6
 8009f12:	f7ff ff0b 	bl	8009d2c <__multiply>
 8009f16:	6020      	str	r0, [r4, #0]
 8009f18:	f8c0 9000 	str.w	r9, [r0]
 8009f1c:	4604      	mov	r4, r0
 8009f1e:	e7e4      	b.n	8009eea <__pow5mult+0x6a>
 8009f20:	4638      	mov	r0, r7
 8009f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f26:	bf00      	nop
 8009f28:	0800c618 	.word	0x0800c618
 8009f2c:	0800c3ee 	.word	0x0800c3ee
 8009f30:	0800c4ce 	.word	0x0800c4ce

08009f34 <__lshift>:
 8009f34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f38:	460c      	mov	r4, r1
 8009f3a:	6849      	ldr	r1, [r1, #4]
 8009f3c:	6923      	ldr	r3, [r4, #16]
 8009f3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	4607      	mov	r7, r0
 8009f46:	4691      	mov	r9, r2
 8009f48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009f4c:	f108 0601 	add.w	r6, r8, #1
 8009f50:	42b3      	cmp	r3, r6
 8009f52:	db0b      	blt.n	8009f6c <__lshift+0x38>
 8009f54:	4638      	mov	r0, r7
 8009f56:	f7ff fd93 	bl	8009a80 <_Balloc>
 8009f5a:	4605      	mov	r5, r0
 8009f5c:	b948      	cbnz	r0, 8009f72 <__lshift+0x3e>
 8009f5e:	4602      	mov	r2, r0
 8009f60:	4b28      	ldr	r3, [pc, #160]	; (800a004 <__lshift+0xd0>)
 8009f62:	4829      	ldr	r0, [pc, #164]	; (800a008 <__lshift+0xd4>)
 8009f64:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009f68:	f000 fed4 	bl	800ad14 <__assert_func>
 8009f6c:	3101      	adds	r1, #1
 8009f6e:	005b      	lsls	r3, r3, #1
 8009f70:	e7ee      	b.n	8009f50 <__lshift+0x1c>
 8009f72:	2300      	movs	r3, #0
 8009f74:	f100 0114 	add.w	r1, r0, #20
 8009f78:	f100 0210 	add.w	r2, r0, #16
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	4553      	cmp	r3, sl
 8009f80:	db33      	blt.n	8009fea <__lshift+0xb6>
 8009f82:	6920      	ldr	r0, [r4, #16]
 8009f84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f88:	f104 0314 	add.w	r3, r4, #20
 8009f8c:	f019 091f 	ands.w	r9, r9, #31
 8009f90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f98:	d02b      	beq.n	8009ff2 <__lshift+0xbe>
 8009f9a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f9e:	468a      	mov	sl, r1
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	fa00 f009 	lsl.w	r0, r0, r9
 8009fa8:	4310      	orrs	r0, r2
 8009faa:	f84a 0b04 	str.w	r0, [sl], #4
 8009fae:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb2:	459c      	cmp	ip, r3
 8009fb4:	fa22 f20e 	lsr.w	r2, r2, lr
 8009fb8:	d8f3      	bhi.n	8009fa2 <__lshift+0x6e>
 8009fba:	ebac 0304 	sub.w	r3, ip, r4
 8009fbe:	3b15      	subs	r3, #21
 8009fc0:	f023 0303 	bic.w	r3, r3, #3
 8009fc4:	3304      	adds	r3, #4
 8009fc6:	f104 0015 	add.w	r0, r4, #21
 8009fca:	4584      	cmp	ip, r0
 8009fcc:	bf38      	it	cc
 8009fce:	2304      	movcc	r3, #4
 8009fd0:	50ca      	str	r2, [r1, r3]
 8009fd2:	b10a      	cbz	r2, 8009fd8 <__lshift+0xa4>
 8009fd4:	f108 0602 	add.w	r6, r8, #2
 8009fd8:	3e01      	subs	r6, #1
 8009fda:	4638      	mov	r0, r7
 8009fdc:	612e      	str	r6, [r5, #16]
 8009fde:	4621      	mov	r1, r4
 8009fe0:	f7ff fd8e 	bl	8009b00 <_Bfree>
 8009fe4:	4628      	mov	r0, r5
 8009fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fea:	f842 0f04 	str.w	r0, [r2, #4]!
 8009fee:	3301      	adds	r3, #1
 8009ff0:	e7c5      	b.n	8009f7e <__lshift+0x4a>
 8009ff2:	3904      	subs	r1, #4
 8009ff4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ff8:	f841 2f04 	str.w	r2, [r1, #4]!
 8009ffc:	459c      	cmp	ip, r3
 8009ffe:	d8f9      	bhi.n	8009ff4 <__lshift+0xc0>
 800a000:	e7ea      	b.n	8009fd8 <__lshift+0xa4>
 800a002:	bf00      	nop
 800a004:	0800c45d 	.word	0x0800c45d
 800a008:	0800c4ce 	.word	0x0800c4ce

0800a00c <__mcmp>:
 800a00c:	b530      	push	{r4, r5, lr}
 800a00e:	6902      	ldr	r2, [r0, #16]
 800a010:	690c      	ldr	r4, [r1, #16]
 800a012:	1b12      	subs	r2, r2, r4
 800a014:	d10e      	bne.n	800a034 <__mcmp+0x28>
 800a016:	f100 0314 	add.w	r3, r0, #20
 800a01a:	3114      	adds	r1, #20
 800a01c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a020:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a024:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a028:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a02c:	42a5      	cmp	r5, r4
 800a02e:	d003      	beq.n	800a038 <__mcmp+0x2c>
 800a030:	d305      	bcc.n	800a03e <__mcmp+0x32>
 800a032:	2201      	movs	r2, #1
 800a034:	4610      	mov	r0, r2
 800a036:	bd30      	pop	{r4, r5, pc}
 800a038:	4283      	cmp	r3, r0
 800a03a:	d3f3      	bcc.n	800a024 <__mcmp+0x18>
 800a03c:	e7fa      	b.n	800a034 <__mcmp+0x28>
 800a03e:	f04f 32ff 	mov.w	r2, #4294967295
 800a042:	e7f7      	b.n	800a034 <__mcmp+0x28>

0800a044 <__mdiff>:
 800a044:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a048:	460c      	mov	r4, r1
 800a04a:	4606      	mov	r6, r0
 800a04c:	4611      	mov	r1, r2
 800a04e:	4620      	mov	r0, r4
 800a050:	4690      	mov	r8, r2
 800a052:	f7ff ffdb 	bl	800a00c <__mcmp>
 800a056:	1e05      	subs	r5, r0, #0
 800a058:	d110      	bne.n	800a07c <__mdiff+0x38>
 800a05a:	4629      	mov	r1, r5
 800a05c:	4630      	mov	r0, r6
 800a05e:	f7ff fd0f 	bl	8009a80 <_Balloc>
 800a062:	b930      	cbnz	r0, 800a072 <__mdiff+0x2e>
 800a064:	4b3a      	ldr	r3, [pc, #232]	; (800a150 <__mdiff+0x10c>)
 800a066:	4602      	mov	r2, r0
 800a068:	f240 2137 	movw	r1, #567	; 0x237
 800a06c:	4839      	ldr	r0, [pc, #228]	; (800a154 <__mdiff+0x110>)
 800a06e:	f000 fe51 	bl	800ad14 <__assert_func>
 800a072:	2301      	movs	r3, #1
 800a074:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a078:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a07c:	bfa4      	itt	ge
 800a07e:	4643      	movge	r3, r8
 800a080:	46a0      	movge	r8, r4
 800a082:	4630      	mov	r0, r6
 800a084:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a088:	bfa6      	itte	ge
 800a08a:	461c      	movge	r4, r3
 800a08c:	2500      	movge	r5, #0
 800a08e:	2501      	movlt	r5, #1
 800a090:	f7ff fcf6 	bl	8009a80 <_Balloc>
 800a094:	b920      	cbnz	r0, 800a0a0 <__mdiff+0x5c>
 800a096:	4b2e      	ldr	r3, [pc, #184]	; (800a150 <__mdiff+0x10c>)
 800a098:	4602      	mov	r2, r0
 800a09a:	f240 2145 	movw	r1, #581	; 0x245
 800a09e:	e7e5      	b.n	800a06c <__mdiff+0x28>
 800a0a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a0a4:	6926      	ldr	r6, [r4, #16]
 800a0a6:	60c5      	str	r5, [r0, #12]
 800a0a8:	f104 0914 	add.w	r9, r4, #20
 800a0ac:	f108 0514 	add.w	r5, r8, #20
 800a0b0:	f100 0e14 	add.w	lr, r0, #20
 800a0b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a0b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a0bc:	f108 0210 	add.w	r2, r8, #16
 800a0c0:	46f2      	mov	sl, lr
 800a0c2:	2100      	movs	r1, #0
 800a0c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800a0c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a0cc:	fa11 f88b 	uxtah	r8, r1, fp
 800a0d0:	b299      	uxth	r1, r3
 800a0d2:	0c1b      	lsrs	r3, r3, #16
 800a0d4:	eba8 0801 	sub.w	r8, r8, r1
 800a0d8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a0dc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a0e0:	fa1f f888 	uxth.w	r8, r8
 800a0e4:	1419      	asrs	r1, r3, #16
 800a0e6:	454e      	cmp	r6, r9
 800a0e8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a0ec:	f84a 3b04 	str.w	r3, [sl], #4
 800a0f0:	d8e8      	bhi.n	800a0c4 <__mdiff+0x80>
 800a0f2:	1b33      	subs	r3, r6, r4
 800a0f4:	3b15      	subs	r3, #21
 800a0f6:	f023 0303 	bic.w	r3, r3, #3
 800a0fa:	3304      	adds	r3, #4
 800a0fc:	3415      	adds	r4, #21
 800a0fe:	42a6      	cmp	r6, r4
 800a100:	bf38      	it	cc
 800a102:	2304      	movcc	r3, #4
 800a104:	441d      	add	r5, r3
 800a106:	4473      	add	r3, lr
 800a108:	469e      	mov	lr, r3
 800a10a:	462e      	mov	r6, r5
 800a10c:	4566      	cmp	r6, ip
 800a10e:	d30e      	bcc.n	800a12e <__mdiff+0xea>
 800a110:	f10c 0203 	add.w	r2, ip, #3
 800a114:	1b52      	subs	r2, r2, r5
 800a116:	f022 0203 	bic.w	r2, r2, #3
 800a11a:	3d03      	subs	r5, #3
 800a11c:	45ac      	cmp	ip, r5
 800a11e:	bf38      	it	cc
 800a120:	2200      	movcc	r2, #0
 800a122:	4413      	add	r3, r2
 800a124:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a128:	b17a      	cbz	r2, 800a14a <__mdiff+0x106>
 800a12a:	6107      	str	r7, [r0, #16]
 800a12c:	e7a4      	b.n	800a078 <__mdiff+0x34>
 800a12e:	f856 8b04 	ldr.w	r8, [r6], #4
 800a132:	fa11 f288 	uxtah	r2, r1, r8
 800a136:	1414      	asrs	r4, r2, #16
 800a138:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a13c:	b292      	uxth	r2, r2
 800a13e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a142:	f84e 2b04 	str.w	r2, [lr], #4
 800a146:	1421      	asrs	r1, r4, #16
 800a148:	e7e0      	b.n	800a10c <__mdiff+0xc8>
 800a14a:	3f01      	subs	r7, #1
 800a14c:	e7ea      	b.n	800a124 <__mdiff+0xe0>
 800a14e:	bf00      	nop
 800a150:	0800c45d 	.word	0x0800c45d
 800a154:	0800c4ce 	.word	0x0800c4ce

0800a158 <__ulp>:
 800a158:	b082      	sub	sp, #8
 800a15a:	ed8d 0b00 	vstr	d0, [sp]
 800a15e:	9a01      	ldr	r2, [sp, #4]
 800a160:	4b0f      	ldr	r3, [pc, #60]	; (800a1a0 <__ulp+0x48>)
 800a162:	4013      	ands	r3, r2
 800a164:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	dc08      	bgt.n	800a17e <__ulp+0x26>
 800a16c:	425b      	negs	r3, r3
 800a16e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a172:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a176:	da04      	bge.n	800a182 <__ulp+0x2a>
 800a178:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a17c:	4113      	asrs	r3, r2
 800a17e:	2200      	movs	r2, #0
 800a180:	e008      	b.n	800a194 <__ulp+0x3c>
 800a182:	f1a2 0314 	sub.w	r3, r2, #20
 800a186:	2b1e      	cmp	r3, #30
 800a188:	bfda      	itte	le
 800a18a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a18e:	40da      	lsrle	r2, r3
 800a190:	2201      	movgt	r2, #1
 800a192:	2300      	movs	r3, #0
 800a194:	4619      	mov	r1, r3
 800a196:	4610      	mov	r0, r2
 800a198:	ec41 0b10 	vmov	d0, r0, r1
 800a19c:	b002      	add	sp, #8
 800a19e:	4770      	bx	lr
 800a1a0:	7ff00000 	.word	0x7ff00000

0800a1a4 <__b2d>:
 800a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1a8:	6906      	ldr	r6, [r0, #16]
 800a1aa:	f100 0814 	add.w	r8, r0, #20
 800a1ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a1b2:	1f37      	subs	r7, r6, #4
 800a1b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a1b8:	4610      	mov	r0, r2
 800a1ba:	f7ff fd53 	bl	8009c64 <__hi0bits>
 800a1be:	f1c0 0320 	rsb	r3, r0, #32
 800a1c2:	280a      	cmp	r0, #10
 800a1c4:	600b      	str	r3, [r1, #0]
 800a1c6:	491b      	ldr	r1, [pc, #108]	; (800a234 <__b2d+0x90>)
 800a1c8:	dc15      	bgt.n	800a1f6 <__b2d+0x52>
 800a1ca:	f1c0 0c0b 	rsb	ip, r0, #11
 800a1ce:	fa22 f30c 	lsr.w	r3, r2, ip
 800a1d2:	45b8      	cmp	r8, r7
 800a1d4:	ea43 0501 	orr.w	r5, r3, r1
 800a1d8:	bf34      	ite	cc
 800a1da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1de:	2300      	movcs	r3, #0
 800a1e0:	3015      	adds	r0, #21
 800a1e2:	fa02 f000 	lsl.w	r0, r2, r0
 800a1e6:	fa23 f30c 	lsr.w	r3, r3, ip
 800a1ea:	4303      	orrs	r3, r0
 800a1ec:	461c      	mov	r4, r3
 800a1ee:	ec45 4b10 	vmov	d0, r4, r5
 800a1f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1f6:	45b8      	cmp	r8, r7
 800a1f8:	bf3a      	itte	cc
 800a1fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a1fe:	f1a6 0708 	subcc.w	r7, r6, #8
 800a202:	2300      	movcs	r3, #0
 800a204:	380b      	subs	r0, #11
 800a206:	d012      	beq.n	800a22e <__b2d+0x8a>
 800a208:	f1c0 0120 	rsb	r1, r0, #32
 800a20c:	fa23 f401 	lsr.w	r4, r3, r1
 800a210:	4082      	lsls	r2, r0
 800a212:	4322      	orrs	r2, r4
 800a214:	4547      	cmp	r7, r8
 800a216:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800a21a:	bf8c      	ite	hi
 800a21c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a220:	2200      	movls	r2, #0
 800a222:	4083      	lsls	r3, r0
 800a224:	40ca      	lsrs	r2, r1
 800a226:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a22a:	4313      	orrs	r3, r2
 800a22c:	e7de      	b.n	800a1ec <__b2d+0x48>
 800a22e:	ea42 0501 	orr.w	r5, r2, r1
 800a232:	e7db      	b.n	800a1ec <__b2d+0x48>
 800a234:	3ff00000 	.word	0x3ff00000

0800a238 <__d2b>:
 800a238:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a23c:	460f      	mov	r7, r1
 800a23e:	2101      	movs	r1, #1
 800a240:	ec59 8b10 	vmov	r8, r9, d0
 800a244:	4616      	mov	r6, r2
 800a246:	f7ff fc1b 	bl	8009a80 <_Balloc>
 800a24a:	4604      	mov	r4, r0
 800a24c:	b930      	cbnz	r0, 800a25c <__d2b+0x24>
 800a24e:	4602      	mov	r2, r0
 800a250:	4b24      	ldr	r3, [pc, #144]	; (800a2e4 <__d2b+0xac>)
 800a252:	4825      	ldr	r0, [pc, #148]	; (800a2e8 <__d2b+0xb0>)
 800a254:	f240 310f 	movw	r1, #783	; 0x30f
 800a258:	f000 fd5c 	bl	800ad14 <__assert_func>
 800a25c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a260:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a264:	bb2d      	cbnz	r5, 800a2b2 <__d2b+0x7a>
 800a266:	9301      	str	r3, [sp, #4]
 800a268:	f1b8 0300 	subs.w	r3, r8, #0
 800a26c:	d026      	beq.n	800a2bc <__d2b+0x84>
 800a26e:	4668      	mov	r0, sp
 800a270:	9300      	str	r3, [sp, #0]
 800a272:	f7ff fd17 	bl	8009ca4 <__lo0bits>
 800a276:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a27a:	b1e8      	cbz	r0, 800a2b8 <__d2b+0x80>
 800a27c:	f1c0 0320 	rsb	r3, r0, #32
 800a280:	fa02 f303 	lsl.w	r3, r2, r3
 800a284:	430b      	orrs	r3, r1
 800a286:	40c2      	lsrs	r2, r0
 800a288:	6163      	str	r3, [r4, #20]
 800a28a:	9201      	str	r2, [sp, #4]
 800a28c:	9b01      	ldr	r3, [sp, #4]
 800a28e:	61a3      	str	r3, [r4, #24]
 800a290:	2b00      	cmp	r3, #0
 800a292:	bf14      	ite	ne
 800a294:	2202      	movne	r2, #2
 800a296:	2201      	moveq	r2, #1
 800a298:	6122      	str	r2, [r4, #16]
 800a29a:	b1bd      	cbz	r5, 800a2cc <__d2b+0x94>
 800a29c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a2a0:	4405      	add	r5, r0
 800a2a2:	603d      	str	r5, [r7, #0]
 800a2a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a2a8:	6030      	str	r0, [r6, #0]
 800a2aa:	4620      	mov	r0, r4
 800a2ac:	b003      	add	sp, #12
 800a2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2b6:	e7d6      	b.n	800a266 <__d2b+0x2e>
 800a2b8:	6161      	str	r1, [r4, #20]
 800a2ba:	e7e7      	b.n	800a28c <__d2b+0x54>
 800a2bc:	a801      	add	r0, sp, #4
 800a2be:	f7ff fcf1 	bl	8009ca4 <__lo0bits>
 800a2c2:	9b01      	ldr	r3, [sp, #4]
 800a2c4:	6163      	str	r3, [r4, #20]
 800a2c6:	3020      	adds	r0, #32
 800a2c8:	2201      	movs	r2, #1
 800a2ca:	e7e5      	b.n	800a298 <__d2b+0x60>
 800a2cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a2d0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a2d4:	6038      	str	r0, [r7, #0]
 800a2d6:	6918      	ldr	r0, [r3, #16]
 800a2d8:	f7ff fcc4 	bl	8009c64 <__hi0bits>
 800a2dc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a2e0:	e7e2      	b.n	800a2a8 <__d2b+0x70>
 800a2e2:	bf00      	nop
 800a2e4:	0800c45d 	.word	0x0800c45d
 800a2e8:	0800c4ce 	.word	0x0800c4ce

0800a2ec <__ratio>:
 800a2ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f0:	4688      	mov	r8, r1
 800a2f2:	4669      	mov	r1, sp
 800a2f4:	4681      	mov	r9, r0
 800a2f6:	f7ff ff55 	bl	800a1a4 <__b2d>
 800a2fa:	a901      	add	r1, sp, #4
 800a2fc:	4640      	mov	r0, r8
 800a2fe:	ec55 4b10 	vmov	r4, r5, d0
 800a302:	f7ff ff4f 	bl	800a1a4 <__b2d>
 800a306:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a30a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a30e:	eba3 0c02 	sub.w	ip, r3, r2
 800a312:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a316:	1a9b      	subs	r3, r3, r2
 800a318:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a31c:	ec51 0b10 	vmov	r0, r1, d0
 800a320:	2b00      	cmp	r3, #0
 800a322:	bfd6      	itet	le
 800a324:	460a      	movle	r2, r1
 800a326:	462a      	movgt	r2, r5
 800a328:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a32c:	468b      	mov	fp, r1
 800a32e:	462f      	mov	r7, r5
 800a330:	bfd4      	ite	le
 800a332:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a336:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a33a:	4620      	mov	r0, r4
 800a33c:	ee10 2a10 	vmov	r2, s0
 800a340:	465b      	mov	r3, fp
 800a342:	4639      	mov	r1, r7
 800a344:	f7f6 faa2 	bl	800088c <__aeabi_ddiv>
 800a348:	ec41 0b10 	vmov	d0, r0, r1
 800a34c:	b003      	add	sp, #12
 800a34e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a352 <__copybits>:
 800a352:	3901      	subs	r1, #1
 800a354:	b570      	push	{r4, r5, r6, lr}
 800a356:	1149      	asrs	r1, r1, #5
 800a358:	6914      	ldr	r4, [r2, #16]
 800a35a:	3101      	adds	r1, #1
 800a35c:	f102 0314 	add.w	r3, r2, #20
 800a360:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a364:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a368:	1f05      	subs	r5, r0, #4
 800a36a:	42a3      	cmp	r3, r4
 800a36c:	d30c      	bcc.n	800a388 <__copybits+0x36>
 800a36e:	1aa3      	subs	r3, r4, r2
 800a370:	3b11      	subs	r3, #17
 800a372:	f023 0303 	bic.w	r3, r3, #3
 800a376:	3211      	adds	r2, #17
 800a378:	42a2      	cmp	r2, r4
 800a37a:	bf88      	it	hi
 800a37c:	2300      	movhi	r3, #0
 800a37e:	4418      	add	r0, r3
 800a380:	2300      	movs	r3, #0
 800a382:	4288      	cmp	r0, r1
 800a384:	d305      	bcc.n	800a392 <__copybits+0x40>
 800a386:	bd70      	pop	{r4, r5, r6, pc}
 800a388:	f853 6b04 	ldr.w	r6, [r3], #4
 800a38c:	f845 6f04 	str.w	r6, [r5, #4]!
 800a390:	e7eb      	b.n	800a36a <__copybits+0x18>
 800a392:	f840 3b04 	str.w	r3, [r0], #4
 800a396:	e7f4      	b.n	800a382 <__copybits+0x30>

0800a398 <__any_on>:
 800a398:	f100 0214 	add.w	r2, r0, #20
 800a39c:	6900      	ldr	r0, [r0, #16]
 800a39e:	114b      	asrs	r3, r1, #5
 800a3a0:	4298      	cmp	r0, r3
 800a3a2:	b510      	push	{r4, lr}
 800a3a4:	db11      	blt.n	800a3ca <__any_on+0x32>
 800a3a6:	dd0a      	ble.n	800a3be <__any_on+0x26>
 800a3a8:	f011 011f 	ands.w	r1, r1, #31
 800a3ac:	d007      	beq.n	800a3be <__any_on+0x26>
 800a3ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a3b2:	fa24 f001 	lsr.w	r0, r4, r1
 800a3b6:	fa00 f101 	lsl.w	r1, r0, r1
 800a3ba:	428c      	cmp	r4, r1
 800a3bc:	d10b      	bne.n	800a3d6 <__any_on+0x3e>
 800a3be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d803      	bhi.n	800a3ce <__any_on+0x36>
 800a3c6:	2000      	movs	r0, #0
 800a3c8:	bd10      	pop	{r4, pc}
 800a3ca:	4603      	mov	r3, r0
 800a3cc:	e7f7      	b.n	800a3be <__any_on+0x26>
 800a3ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3d2:	2900      	cmp	r1, #0
 800a3d4:	d0f5      	beq.n	800a3c2 <__any_on+0x2a>
 800a3d6:	2001      	movs	r0, #1
 800a3d8:	e7f6      	b.n	800a3c8 <__any_on+0x30>
	...

0800a3dc <_strtol_l.constprop.0>:
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3e2:	d001      	beq.n	800a3e8 <_strtol_l.constprop.0+0xc>
 800a3e4:	2b24      	cmp	r3, #36	; 0x24
 800a3e6:	d906      	bls.n	800a3f6 <_strtol_l.constprop.0+0x1a>
 800a3e8:	f7fe f818 	bl	800841c <__errno>
 800a3ec:	2316      	movs	r3, #22
 800a3ee:	6003      	str	r3, [r0, #0]
 800a3f0:	2000      	movs	r0, #0
 800a3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a4dc <_strtol_l.constprop.0+0x100>
 800a3fa:	460d      	mov	r5, r1
 800a3fc:	462e      	mov	r6, r5
 800a3fe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a402:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800a406:	f017 0708 	ands.w	r7, r7, #8
 800a40a:	d1f7      	bne.n	800a3fc <_strtol_l.constprop.0+0x20>
 800a40c:	2c2d      	cmp	r4, #45	; 0x2d
 800a40e:	d132      	bne.n	800a476 <_strtol_l.constprop.0+0x9a>
 800a410:	782c      	ldrb	r4, [r5, #0]
 800a412:	2701      	movs	r7, #1
 800a414:	1cb5      	adds	r5, r6, #2
 800a416:	2b00      	cmp	r3, #0
 800a418:	d05b      	beq.n	800a4d2 <_strtol_l.constprop.0+0xf6>
 800a41a:	2b10      	cmp	r3, #16
 800a41c:	d109      	bne.n	800a432 <_strtol_l.constprop.0+0x56>
 800a41e:	2c30      	cmp	r4, #48	; 0x30
 800a420:	d107      	bne.n	800a432 <_strtol_l.constprop.0+0x56>
 800a422:	782c      	ldrb	r4, [r5, #0]
 800a424:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a428:	2c58      	cmp	r4, #88	; 0x58
 800a42a:	d14d      	bne.n	800a4c8 <_strtol_l.constprop.0+0xec>
 800a42c:	786c      	ldrb	r4, [r5, #1]
 800a42e:	2310      	movs	r3, #16
 800a430:	3502      	adds	r5, #2
 800a432:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a436:	f108 38ff 	add.w	r8, r8, #4294967295
 800a43a:	f04f 0e00 	mov.w	lr, #0
 800a43e:	fbb8 f9f3 	udiv	r9, r8, r3
 800a442:	4676      	mov	r6, lr
 800a444:	fb03 8a19 	mls	sl, r3, r9, r8
 800a448:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a44c:	f1bc 0f09 	cmp.w	ip, #9
 800a450:	d816      	bhi.n	800a480 <_strtol_l.constprop.0+0xa4>
 800a452:	4664      	mov	r4, ip
 800a454:	42a3      	cmp	r3, r4
 800a456:	dd24      	ble.n	800a4a2 <_strtol_l.constprop.0+0xc6>
 800a458:	f1be 3fff 	cmp.w	lr, #4294967295
 800a45c:	d008      	beq.n	800a470 <_strtol_l.constprop.0+0x94>
 800a45e:	45b1      	cmp	r9, r6
 800a460:	d31c      	bcc.n	800a49c <_strtol_l.constprop.0+0xc0>
 800a462:	d101      	bne.n	800a468 <_strtol_l.constprop.0+0x8c>
 800a464:	45a2      	cmp	sl, r4
 800a466:	db19      	blt.n	800a49c <_strtol_l.constprop.0+0xc0>
 800a468:	fb06 4603 	mla	r6, r6, r3, r4
 800a46c:	f04f 0e01 	mov.w	lr, #1
 800a470:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a474:	e7e8      	b.n	800a448 <_strtol_l.constprop.0+0x6c>
 800a476:	2c2b      	cmp	r4, #43	; 0x2b
 800a478:	bf04      	itt	eq
 800a47a:	782c      	ldrbeq	r4, [r5, #0]
 800a47c:	1cb5      	addeq	r5, r6, #2
 800a47e:	e7ca      	b.n	800a416 <_strtol_l.constprop.0+0x3a>
 800a480:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a484:	f1bc 0f19 	cmp.w	ip, #25
 800a488:	d801      	bhi.n	800a48e <_strtol_l.constprop.0+0xb2>
 800a48a:	3c37      	subs	r4, #55	; 0x37
 800a48c:	e7e2      	b.n	800a454 <_strtol_l.constprop.0+0x78>
 800a48e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a492:	f1bc 0f19 	cmp.w	ip, #25
 800a496:	d804      	bhi.n	800a4a2 <_strtol_l.constprop.0+0xc6>
 800a498:	3c57      	subs	r4, #87	; 0x57
 800a49a:	e7db      	b.n	800a454 <_strtol_l.constprop.0+0x78>
 800a49c:	f04f 3eff 	mov.w	lr, #4294967295
 800a4a0:	e7e6      	b.n	800a470 <_strtol_l.constprop.0+0x94>
 800a4a2:	f1be 3fff 	cmp.w	lr, #4294967295
 800a4a6:	d105      	bne.n	800a4b4 <_strtol_l.constprop.0+0xd8>
 800a4a8:	2322      	movs	r3, #34	; 0x22
 800a4aa:	6003      	str	r3, [r0, #0]
 800a4ac:	4646      	mov	r6, r8
 800a4ae:	b942      	cbnz	r2, 800a4c2 <_strtol_l.constprop.0+0xe6>
 800a4b0:	4630      	mov	r0, r6
 800a4b2:	e79e      	b.n	800a3f2 <_strtol_l.constprop.0+0x16>
 800a4b4:	b107      	cbz	r7, 800a4b8 <_strtol_l.constprop.0+0xdc>
 800a4b6:	4276      	negs	r6, r6
 800a4b8:	2a00      	cmp	r2, #0
 800a4ba:	d0f9      	beq.n	800a4b0 <_strtol_l.constprop.0+0xd4>
 800a4bc:	f1be 0f00 	cmp.w	lr, #0
 800a4c0:	d000      	beq.n	800a4c4 <_strtol_l.constprop.0+0xe8>
 800a4c2:	1e69      	subs	r1, r5, #1
 800a4c4:	6011      	str	r1, [r2, #0]
 800a4c6:	e7f3      	b.n	800a4b0 <_strtol_l.constprop.0+0xd4>
 800a4c8:	2430      	movs	r4, #48	; 0x30
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d1b1      	bne.n	800a432 <_strtol_l.constprop.0+0x56>
 800a4ce:	2308      	movs	r3, #8
 800a4d0:	e7af      	b.n	800a432 <_strtol_l.constprop.0+0x56>
 800a4d2:	2c30      	cmp	r4, #48	; 0x30
 800a4d4:	d0a5      	beq.n	800a422 <_strtol_l.constprop.0+0x46>
 800a4d6:	230a      	movs	r3, #10
 800a4d8:	e7ab      	b.n	800a432 <_strtol_l.constprop.0+0x56>
 800a4da:	bf00      	nop
 800a4dc:	0800c625 	.word	0x0800c625

0800a4e0 <_strtol_r>:
 800a4e0:	f7ff bf7c 	b.w	800a3dc <_strtol_l.constprop.0>

0800a4e4 <__ascii_wctomb>:
 800a4e4:	b149      	cbz	r1, 800a4fa <__ascii_wctomb+0x16>
 800a4e6:	2aff      	cmp	r2, #255	; 0xff
 800a4e8:	bf85      	ittet	hi
 800a4ea:	238a      	movhi	r3, #138	; 0x8a
 800a4ec:	6003      	strhi	r3, [r0, #0]
 800a4ee:	700a      	strbls	r2, [r1, #0]
 800a4f0:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4f4:	bf98      	it	ls
 800a4f6:	2001      	movls	r0, #1
 800a4f8:	4770      	bx	lr
 800a4fa:	4608      	mov	r0, r1
 800a4fc:	4770      	bx	lr

0800a4fe <__ssputs_r>:
 800a4fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a502:	688e      	ldr	r6, [r1, #8]
 800a504:	461f      	mov	r7, r3
 800a506:	42be      	cmp	r6, r7
 800a508:	680b      	ldr	r3, [r1, #0]
 800a50a:	4682      	mov	sl, r0
 800a50c:	460c      	mov	r4, r1
 800a50e:	4690      	mov	r8, r2
 800a510:	d82c      	bhi.n	800a56c <__ssputs_r+0x6e>
 800a512:	898a      	ldrh	r2, [r1, #12]
 800a514:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a518:	d026      	beq.n	800a568 <__ssputs_r+0x6a>
 800a51a:	6965      	ldr	r5, [r4, #20]
 800a51c:	6909      	ldr	r1, [r1, #16]
 800a51e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a522:	eba3 0901 	sub.w	r9, r3, r1
 800a526:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a52a:	1c7b      	adds	r3, r7, #1
 800a52c:	444b      	add	r3, r9
 800a52e:	106d      	asrs	r5, r5, #1
 800a530:	429d      	cmp	r5, r3
 800a532:	bf38      	it	cc
 800a534:	461d      	movcc	r5, r3
 800a536:	0553      	lsls	r3, r2, #21
 800a538:	d527      	bpl.n	800a58a <__ssputs_r+0x8c>
 800a53a:	4629      	mov	r1, r5
 800a53c:	f7ff fa02 	bl	8009944 <_malloc_r>
 800a540:	4606      	mov	r6, r0
 800a542:	b360      	cbz	r0, 800a59e <__ssputs_r+0xa0>
 800a544:	6921      	ldr	r1, [r4, #16]
 800a546:	464a      	mov	r2, r9
 800a548:	f7fd ff95 	bl	8008476 <memcpy>
 800a54c:	89a3      	ldrh	r3, [r4, #12]
 800a54e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a556:	81a3      	strh	r3, [r4, #12]
 800a558:	6126      	str	r6, [r4, #16]
 800a55a:	6165      	str	r5, [r4, #20]
 800a55c:	444e      	add	r6, r9
 800a55e:	eba5 0509 	sub.w	r5, r5, r9
 800a562:	6026      	str	r6, [r4, #0]
 800a564:	60a5      	str	r5, [r4, #8]
 800a566:	463e      	mov	r6, r7
 800a568:	42be      	cmp	r6, r7
 800a56a:	d900      	bls.n	800a56e <__ssputs_r+0x70>
 800a56c:	463e      	mov	r6, r7
 800a56e:	6820      	ldr	r0, [r4, #0]
 800a570:	4632      	mov	r2, r6
 800a572:	4641      	mov	r1, r8
 800a574:	f000 fba4 	bl	800acc0 <memmove>
 800a578:	68a3      	ldr	r3, [r4, #8]
 800a57a:	1b9b      	subs	r3, r3, r6
 800a57c:	60a3      	str	r3, [r4, #8]
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	4433      	add	r3, r6
 800a582:	6023      	str	r3, [r4, #0]
 800a584:	2000      	movs	r0, #0
 800a586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a58a:	462a      	mov	r2, r5
 800a58c:	f000 fbf6 	bl	800ad7c <_realloc_r>
 800a590:	4606      	mov	r6, r0
 800a592:	2800      	cmp	r0, #0
 800a594:	d1e0      	bne.n	800a558 <__ssputs_r+0x5a>
 800a596:	6921      	ldr	r1, [r4, #16]
 800a598:	4650      	mov	r0, sl
 800a59a:	f7fe fe07 	bl	80091ac <_free_r>
 800a59e:	230c      	movs	r3, #12
 800a5a0:	f8ca 3000 	str.w	r3, [sl]
 800a5a4:	89a3      	ldrh	r3, [r4, #12]
 800a5a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5aa:	81a3      	strh	r3, [r4, #12]
 800a5ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a5b0:	e7e9      	b.n	800a586 <__ssputs_r+0x88>
	...

0800a5b4 <_svfiprintf_r>:
 800a5b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b8:	4698      	mov	r8, r3
 800a5ba:	898b      	ldrh	r3, [r1, #12]
 800a5bc:	061b      	lsls	r3, r3, #24
 800a5be:	b09d      	sub	sp, #116	; 0x74
 800a5c0:	4607      	mov	r7, r0
 800a5c2:	460d      	mov	r5, r1
 800a5c4:	4614      	mov	r4, r2
 800a5c6:	d50e      	bpl.n	800a5e6 <_svfiprintf_r+0x32>
 800a5c8:	690b      	ldr	r3, [r1, #16]
 800a5ca:	b963      	cbnz	r3, 800a5e6 <_svfiprintf_r+0x32>
 800a5cc:	2140      	movs	r1, #64	; 0x40
 800a5ce:	f7ff f9b9 	bl	8009944 <_malloc_r>
 800a5d2:	6028      	str	r0, [r5, #0]
 800a5d4:	6128      	str	r0, [r5, #16]
 800a5d6:	b920      	cbnz	r0, 800a5e2 <_svfiprintf_r+0x2e>
 800a5d8:	230c      	movs	r3, #12
 800a5da:	603b      	str	r3, [r7, #0]
 800a5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a5e0:	e0d0      	b.n	800a784 <_svfiprintf_r+0x1d0>
 800a5e2:	2340      	movs	r3, #64	; 0x40
 800a5e4:	616b      	str	r3, [r5, #20]
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	9309      	str	r3, [sp, #36]	; 0x24
 800a5ea:	2320      	movs	r3, #32
 800a5ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a5f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5f4:	2330      	movs	r3, #48	; 0x30
 800a5f6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a79c <_svfiprintf_r+0x1e8>
 800a5fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a5fe:	f04f 0901 	mov.w	r9, #1
 800a602:	4623      	mov	r3, r4
 800a604:	469a      	mov	sl, r3
 800a606:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a60a:	b10a      	cbz	r2, 800a610 <_svfiprintf_r+0x5c>
 800a60c:	2a25      	cmp	r2, #37	; 0x25
 800a60e:	d1f9      	bne.n	800a604 <_svfiprintf_r+0x50>
 800a610:	ebba 0b04 	subs.w	fp, sl, r4
 800a614:	d00b      	beq.n	800a62e <_svfiprintf_r+0x7a>
 800a616:	465b      	mov	r3, fp
 800a618:	4622      	mov	r2, r4
 800a61a:	4629      	mov	r1, r5
 800a61c:	4638      	mov	r0, r7
 800a61e:	f7ff ff6e 	bl	800a4fe <__ssputs_r>
 800a622:	3001      	adds	r0, #1
 800a624:	f000 80a9 	beq.w	800a77a <_svfiprintf_r+0x1c6>
 800a628:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a62a:	445a      	add	r2, fp
 800a62c:	9209      	str	r2, [sp, #36]	; 0x24
 800a62e:	f89a 3000 	ldrb.w	r3, [sl]
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 80a1 	beq.w	800a77a <_svfiprintf_r+0x1c6>
 800a638:	2300      	movs	r3, #0
 800a63a:	f04f 32ff 	mov.w	r2, #4294967295
 800a63e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a642:	f10a 0a01 	add.w	sl, sl, #1
 800a646:	9304      	str	r3, [sp, #16]
 800a648:	9307      	str	r3, [sp, #28]
 800a64a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a64e:	931a      	str	r3, [sp, #104]	; 0x68
 800a650:	4654      	mov	r4, sl
 800a652:	2205      	movs	r2, #5
 800a654:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a658:	4850      	ldr	r0, [pc, #320]	; (800a79c <_svfiprintf_r+0x1e8>)
 800a65a:	f7f5 fdd9 	bl	8000210 <memchr>
 800a65e:	9a04      	ldr	r2, [sp, #16]
 800a660:	b9d8      	cbnz	r0, 800a69a <_svfiprintf_r+0xe6>
 800a662:	06d0      	lsls	r0, r2, #27
 800a664:	bf44      	itt	mi
 800a666:	2320      	movmi	r3, #32
 800a668:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a66c:	0711      	lsls	r1, r2, #28
 800a66e:	bf44      	itt	mi
 800a670:	232b      	movmi	r3, #43	; 0x2b
 800a672:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a676:	f89a 3000 	ldrb.w	r3, [sl]
 800a67a:	2b2a      	cmp	r3, #42	; 0x2a
 800a67c:	d015      	beq.n	800a6aa <_svfiprintf_r+0xf6>
 800a67e:	9a07      	ldr	r2, [sp, #28]
 800a680:	4654      	mov	r4, sl
 800a682:	2000      	movs	r0, #0
 800a684:	f04f 0c0a 	mov.w	ip, #10
 800a688:	4621      	mov	r1, r4
 800a68a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a68e:	3b30      	subs	r3, #48	; 0x30
 800a690:	2b09      	cmp	r3, #9
 800a692:	d94d      	bls.n	800a730 <_svfiprintf_r+0x17c>
 800a694:	b1b0      	cbz	r0, 800a6c4 <_svfiprintf_r+0x110>
 800a696:	9207      	str	r2, [sp, #28]
 800a698:	e014      	b.n	800a6c4 <_svfiprintf_r+0x110>
 800a69a:	eba0 0308 	sub.w	r3, r0, r8
 800a69e:	fa09 f303 	lsl.w	r3, r9, r3
 800a6a2:	4313      	orrs	r3, r2
 800a6a4:	9304      	str	r3, [sp, #16]
 800a6a6:	46a2      	mov	sl, r4
 800a6a8:	e7d2      	b.n	800a650 <_svfiprintf_r+0x9c>
 800a6aa:	9b03      	ldr	r3, [sp, #12]
 800a6ac:	1d19      	adds	r1, r3, #4
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	9103      	str	r1, [sp, #12]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	bfbb      	ittet	lt
 800a6b6:	425b      	neglt	r3, r3
 800a6b8:	f042 0202 	orrlt.w	r2, r2, #2
 800a6bc:	9307      	strge	r3, [sp, #28]
 800a6be:	9307      	strlt	r3, [sp, #28]
 800a6c0:	bfb8      	it	lt
 800a6c2:	9204      	strlt	r2, [sp, #16]
 800a6c4:	7823      	ldrb	r3, [r4, #0]
 800a6c6:	2b2e      	cmp	r3, #46	; 0x2e
 800a6c8:	d10c      	bne.n	800a6e4 <_svfiprintf_r+0x130>
 800a6ca:	7863      	ldrb	r3, [r4, #1]
 800a6cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a6ce:	d134      	bne.n	800a73a <_svfiprintf_r+0x186>
 800a6d0:	9b03      	ldr	r3, [sp, #12]
 800a6d2:	1d1a      	adds	r2, r3, #4
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	9203      	str	r2, [sp, #12]
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	bfb8      	it	lt
 800a6dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a6e0:	3402      	adds	r4, #2
 800a6e2:	9305      	str	r3, [sp, #20]
 800a6e4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a7ac <_svfiprintf_r+0x1f8>
 800a6e8:	7821      	ldrb	r1, [r4, #0]
 800a6ea:	2203      	movs	r2, #3
 800a6ec:	4650      	mov	r0, sl
 800a6ee:	f7f5 fd8f 	bl	8000210 <memchr>
 800a6f2:	b138      	cbz	r0, 800a704 <_svfiprintf_r+0x150>
 800a6f4:	9b04      	ldr	r3, [sp, #16]
 800a6f6:	eba0 000a 	sub.w	r0, r0, sl
 800a6fa:	2240      	movs	r2, #64	; 0x40
 800a6fc:	4082      	lsls	r2, r0
 800a6fe:	4313      	orrs	r3, r2
 800a700:	3401      	adds	r4, #1
 800a702:	9304      	str	r3, [sp, #16]
 800a704:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a708:	4825      	ldr	r0, [pc, #148]	; (800a7a0 <_svfiprintf_r+0x1ec>)
 800a70a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a70e:	2206      	movs	r2, #6
 800a710:	f7f5 fd7e 	bl	8000210 <memchr>
 800a714:	2800      	cmp	r0, #0
 800a716:	d038      	beq.n	800a78a <_svfiprintf_r+0x1d6>
 800a718:	4b22      	ldr	r3, [pc, #136]	; (800a7a4 <_svfiprintf_r+0x1f0>)
 800a71a:	bb1b      	cbnz	r3, 800a764 <_svfiprintf_r+0x1b0>
 800a71c:	9b03      	ldr	r3, [sp, #12]
 800a71e:	3307      	adds	r3, #7
 800a720:	f023 0307 	bic.w	r3, r3, #7
 800a724:	3308      	adds	r3, #8
 800a726:	9303      	str	r3, [sp, #12]
 800a728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a72a:	4433      	add	r3, r6
 800a72c:	9309      	str	r3, [sp, #36]	; 0x24
 800a72e:	e768      	b.n	800a602 <_svfiprintf_r+0x4e>
 800a730:	fb0c 3202 	mla	r2, ip, r2, r3
 800a734:	460c      	mov	r4, r1
 800a736:	2001      	movs	r0, #1
 800a738:	e7a6      	b.n	800a688 <_svfiprintf_r+0xd4>
 800a73a:	2300      	movs	r3, #0
 800a73c:	3401      	adds	r4, #1
 800a73e:	9305      	str	r3, [sp, #20]
 800a740:	4619      	mov	r1, r3
 800a742:	f04f 0c0a 	mov.w	ip, #10
 800a746:	4620      	mov	r0, r4
 800a748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a74c:	3a30      	subs	r2, #48	; 0x30
 800a74e:	2a09      	cmp	r2, #9
 800a750:	d903      	bls.n	800a75a <_svfiprintf_r+0x1a6>
 800a752:	2b00      	cmp	r3, #0
 800a754:	d0c6      	beq.n	800a6e4 <_svfiprintf_r+0x130>
 800a756:	9105      	str	r1, [sp, #20]
 800a758:	e7c4      	b.n	800a6e4 <_svfiprintf_r+0x130>
 800a75a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a75e:	4604      	mov	r4, r0
 800a760:	2301      	movs	r3, #1
 800a762:	e7f0      	b.n	800a746 <_svfiprintf_r+0x192>
 800a764:	ab03      	add	r3, sp, #12
 800a766:	9300      	str	r3, [sp, #0]
 800a768:	462a      	mov	r2, r5
 800a76a:	4b0f      	ldr	r3, [pc, #60]	; (800a7a8 <_svfiprintf_r+0x1f4>)
 800a76c:	a904      	add	r1, sp, #16
 800a76e:	4638      	mov	r0, r7
 800a770:	f7fc fed0 	bl	8007514 <_printf_float>
 800a774:	1c42      	adds	r2, r0, #1
 800a776:	4606      	mov	r6, r0
 800a778:	d1d6      	bne.n	800a728 <_svfiprintf_r+0x174>
 800a77a:	89ab      	ldrh	r3, [r5, #12]
 800a77c:	065b      	lsls	r3, r3, #25
 800a77e:	f53f af2d 	bmi.w	800a5dc <_svfiprintf_r+0x28>
 800a782:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a784:	b01d      	add	sp, #116	; 0x74
 800a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78a:	ab03      	add	r3, sp, #12
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	462a      	mov	r2, r5
 800a790:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <_svfiprintf_r+0x1f4>)
 800a792:	a904      	add	r1, sp, #16
 800a794:	4638      	mov	r0, r7
 800a796:	f7fd f961 	bl	8007a5c <_printf_i>
 800a79a:	e7eb      	b.n	800a774 <_svfiprintf_r+0x1c0>
 800a79c:	0800c725 	.word	0x0800c725
 800a7a0:	0800c72f 	.word	0x0800c72f
 800a7a4:	08007515 	.word	0x08007515
 800a7a8:	0800a4ff 	.word	0x0800a4ff
 800a7ac:	0800c72b 	.word	0x0800c72b

0800a7b0 <__sfputc_r>:
 800a7b0:	6893      	ldr	r3, [r2, #8]
 800a7b2:	3b01      	subs	r3, #1
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	b410      	push	{r4}
 800a7b8:	6093      	str	r3, [r2, #8]
 800a7ba:	da08      	bge.n	800a7ce <__sfputc_r+0x1e>
 800a7bc:	6994      	ldr	r4, [r2, #24]
 800a7be:	42a3      	cmp	r3, r4
 800a7c0:	db01      	blt.n	800a7c6 <__sfputc_r+0x16>
 800a7c2:	290a      	cmp	r1, #10
 800a7c4:	d103      	bne.n	800a7ce <__sfputc_r+0x1e>
 800a7c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7ca:	f000 b9e3 	b.w	800ab94 <__swbuf_r>
 800a7ce:	6813      	ldr	r3, [r2, #0]
 800a7d0:	1c58      	adds	r0, r3, #1
 800a7d2:	6010      	str	r0, [r2, #0]
 800a7d4:	7019      	strb	r1, [r3, #0]
 800a7d6:	4608      	mov	r0, r1
 800a7d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7dc:	4770      	bx	lr

0800a7de <__sfputs_r>:
 800a7de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e0:	4606      	mov	r6, r0
 800a7e2:	460f      	mov	r7, r1
 800a7e4:	4614      	mov	r4, r2
 800a7e6:	18d5      	adds	r5, r2, r3
 800a7e8:	42ac      	cmp	r4, r5
 800a7ea:	d101      	bne.n	800a7f0 <__sfputs_r+0x12>
 800a7ec:	2000      	movs	r0, #0
 800a7ee:	e007      	b.n	800a800 <__sfputs_r+0x22>
 800a7f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f4:	463a      	mov	r2, r7
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7ff ffda 	bl	800a7b0 <__sfputc_r>
 800a7fc:	1c43      	adds	r3, r0, #1
 800a7fe:	d1f3      	bne.n	800a7e8 <__sfputs_r+0xa>
 800a800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a804 <_vfiprintf_r>:
 800a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a808:	460d      	mov	r5, r1
 800a80a:	b09d      	sub	sp, #116	; 0x74
 800a80c:	4614      	mov	r4, r2
 800a80e:	4698      	mov	r8, r3
 800a810:	4606      	mov	r6, r0
 800a812:	b118      	cbz	r0, 800a81c <_vfiprintf_r+0x18>
 800a814:	6a03      	ldr	r3, [r0, #32]
 800a816:	b90b      	cbnz	r3, 800a81c <_vfiprintf_r+0x18>
 800a818:	f7fd fcde 	bl	80081d8 <__sinit>
 800a81c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a81e:	07d9      	lsls	r1, r3, #31
 800a820:	d405      	bmi.n	800a82e <_vfiprintf_r+0x2a>
 800a822:	89ab      	ldrh	r3, [r5, #12]
 800a824:	059a      	lsls	r2, r3, #22
 800a826:	d402      	bmi.n	800a82e <_vfiprintf_r+0x2a>
 800a828:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a82a:	f7fd fe22 	bl	8008472 <__retarget_lock_acquire_recursive>
 800a82e:	89ab      	ldrh	r3, [r5, #12]
 800a830:	071b      	lsls	r3, r3, #28
 800a832:	d501      	bpl.n	800a838 <_vfiprintf_r+0x34>
 800a834:	692b      	ldr	r3, [r5, #16]
 800a836:	b99b      	cbnz	r3, 800a860 <_vfiprintf_r+0x5c>
 800a838:	4629      	mov	r1, r5
 800a83a:	4630      	mov	r0, r6
 800a83c:	f000 f9e8 	bl	800ac10 <__swsetup_r>
 800a840:	b170      	cbz	r0, 800a860 <_vfiprintf_r+0x5c>
 800a842:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a844:	07dc      	lsls	r4, r3, #31
 800a846:	d504      	bpl.n	800a852 <_vfiprintf_r+0x4e>
 800a848:	f04f 30ff 	mov.w	r0, #4294967295
 800a84c:	b01d      	add	sp, #116	; 0x74
 800a84e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a852:	89ab      	ldrh	r3, [r5, #12]
 800a854:	0598      	lsls	r0, r3, #22
 800a856:	d4f7      	bmi.n	800a848 <_vfiprintf_r+0x44>
 800a858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a85a:	f7fd fe0b 	bl	8008474 <__retarget_lock_release_recursive>
 800a85e:	e7f3      	b.n	800a848 <_vfiprintf_r+0x44>
 800a860:	2300      	movs	r3, #0
 800a862:	9309      	str	r3, [sp, #36]	; 0x24
 800a864:	2320      	movs	r3, #32
 800a866:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a86a:	f8cd 800c 	str.w	r8, [sp, #12]
 800a86e:	2330      	movs	r3, #48	; 0x30
 800a870:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800aa24 <_vfiprintf_r+0x220>
 800a874:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a878:	f04f 0901 	mov.w	r9, #1
 800a87c:	4623      	mov	r3, r4
 800a87e:	469a      	mov	sl, r3
 800a880:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a884:	b10a      	cbz	r2, 800a88a <_vfiprintf_r+0x86>
 800a886:	2a25      	cmp	r2, #37	; 0x25
 800a888:	d1f9      	bne.n	800a87e <_vfiprintf_r+0x7a>
 800a88a:	ebba 0b04 	subs.w	fp, sl, r4
 800a88e:	d00b      	beq.n	800a8a8 <_vfiprintf_r+0xa4>
 800a890:	465b      	mov	r3, fp
 800a892:	4622      	mov	r2, r4
 800a894:	4629      	mov	r1, r5
 800a896:	4630      	mov	r0, r6
 800a898:	f7ff ffa1 	bl	800a7de <__sfputs_r>
 800a89c:	3001      	adds	r0, #1
 800a89e:	f000 80a9 	beq.w	800a9f4 <_vfiprintf_r+0x1f0>
 800a8a2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a8a4:	445a      	add	r2, fp
 800a8a6:	9209      	str	r2, [sp, #36]	; 0x24
 800a8a8:	f89a 3000 	ldrb.w	r3, [sl]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	f000 80a1 	beq.w	800a9f4 <_vfiprintf_r+0x1f0>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f04f 32ff 	mov.w	r2, #4294967295
 800a8b8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a8bc:	f10a 0a01 	add.w	sl, sl, #1
 800a8c0:	9304      	str	r3, [sp, #16]
 800a8c2:	9307      	str	r3, [sp, #28]
 800a8c4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a8c8:	931a      	str	r3, [sp, #104]	; 0x68
 800a8ca:	4654      	mov	r4, sl
 800a8cc:	2205      	movs	r2, #5
 800a8ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8d2:	4854      	ldr	r0, [pc, #336]	; (800aa24 <_vfiprintf_r+0x220>)
 800a8d4:	f7f5 fc9c 	bl	8000210 <memchr>
 800a8d8:	9a04      	ldr	r2, [sp, #16]
 800a8da:	b9d8      	cbnz	r0, 800a914 <_vfiprintf_r+0x110>
 800a8dc:	06d1      	lsls	r1, r2, #27
 800a8de:	bf44      	itt	mi
 800a8e0:	2320      	movmi	r3, #32
 800a8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8e6:	0713      	lsls	r3, r2, #28
 800a8e8:	bf44      	itt	mi
 800a8ea:	232b      	movmi	r3, #43	; 0x2b
 800a8ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f4:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f6:	d015      	beq.n	800a924 <_vfiprintf_r+0x120>
 800a8f8:	9a07      	ldr	r2, [sp, #28]
 800a8fa:	4654      	mov	r4, sl
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	f04f 0c0a 	mov.w	ip, #10
 800a902:	4621      	mov	r1, r4
 800a904:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a908:	3b30      	subs	r3, #48	; 0x30
 800a90a:	2b09      	cmp	r3, #9
 800a90c:	d94d      	bls.n	800a9aa <_vfiprintf_r+0x1a6>
 800a90e:	b1b0      	cbz	r0, 800a93e <_vfiprintf_r+0x13a>
 800a910:	9207      	str	r2, [sp, #28]
 800a912:	e014      	b.n	800a93e <_vfiprintf_r+0x13a>
 800a914:	eba0 0308 	sub.w	r3, r0, r8
 800a918:	fa09 f303 	lsl.w	r3, r9, r3
 800a91c:	4313      	orrs	r3, r2
 800a91e:	9304      	str	r3, [sp, #16]
 800a920:	46a2      	mov	sl, r4
 800a922:	e7d2      	b.n	800a8ca <_vfiprintf_r+0xc6>
 800a924:	9b03      	ldr	r3, [sp, #12]
 800a926:	1d19      	adds	r1, r3, #4
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	9103      	str	r1, [sp, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	bfbb      	ittet	lt
 800a930:	425b      	neglt	r3, r3
 800a932:	f042 0202 	orrlt.w	r2, r2, #2
 800a936:	9307      	strge	r3, [sp, #28]
 800a938:	9307      	strlt	r3, [sp, #28]
 800a93a:	bfb8      	it	lt
 800a93c:	9204      	strlt	r2, [sp, #16]
 800a93e:	7823      	ldrb	r3, [r4, #0]
 800a940:	2b2e      	cmp	r3, #46	; 0x2e
 800a942:	d10c      	bne.n	800a95e <_vfiprintf_r+0x15a>
 800a944:	7863      	ldrb	r3, [r4, #1]
 800a946:	2b2a      	cmp	r3, #42	; 0x2a
 800a948:	d134      	bne.n	800a9b4 <_vfiprintf_r+0x1b0>
 800a94a:	9b03      	ldr	r3, [sp, #12]
 800a94c:	1d1a      	adds	r2, r3, #4
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	9203      	str	r2, [sp, #12]
 800a952:	2b00      	cmp	r3, #0
 800a954:	bfb8      	it	lt
 800a956:	f04f 33ff 	movlt.w	r3, #4294967295
 800a95a:	3402      	adds	r4, #2
 800a95c:	9305      	str	r3, [sp, #20]
 800a95e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800aa34 <_vfiprintf_r+0x230>
 800a962:	7821      	ldrb	r1, [r4, #0]
 800a964:	2203      	movs	r2, #3
 800a966:	4650      	mov	r0, sl
 800a968:	f7f5 fc52 	bl	8000210 <memchr>
 800a96c:	b138      	cbz	r0, 800a97e <_vfiprintf_r+0x17a>
 800a96e:	9b04      	ldr	r3, [sp, #16]
 800a970:	eba0 000a 	sub.w	r0, r0, sl
 800a974:	2240      	movs	r2, #64	; 0x40
 800a976:	4082      	lsls	r2, r0
 800a978:	4313      	orrs	r3, r2
 800a97a:	3401      	adds	r4, #1
 800a97c:	9304      	str	r3, [sp, #16]
 800a97e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a982:	4829      	ldr	r0, [pc, #164]	; (800aa28 <_vfiprintf_r+0x224>)
 800a984:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a988:	2206      	movs	r2, #6
 800a98a:	f7f5 fc41 	bl	8000210 <memchr>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d03f      	beq.n	800aa12 <_vfiprintf_r+0x20e>
 800a992:	4b26      	ldr	r3, [pc, #152]	; (800aa2c <_vfiprintf_r+0x228>)
 800a994:	bb1b      	cbnz	r3, 800a9de <_vfiprintf_r+0x1da>
 800a996:	9b03      	ldr	r3, [sp, #12]
 800a998:	3307      	adds	r3, #7
 800a99a:	f023 0307 	bic.w	r3, r3, #7
 800a99e:	3308      	adds	r3, #8
 800a9a0:	9303      	str	r3, [sp, #12]
 800a9a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9a4:	443b      	add	r3, r7
 800a9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a9a8:	e768      	b.n	800a87c <_vfiprintf_r+0x78>
 800a9aa:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9ae:	460c      	mov	r4, r1
 800a9b0:	2001      	movs	r0, #1
 800a9b2:	e7a6      	b.n	800a902 <_vfiprintf_r+0xfe>
 800a9b4:	2300      	movs	r3, #0
 800a9b6:	3401      	adds	r4, #1
 800a9b8:	9305      	str	r3, [sp, #20]
 800a9ba:	4619      	mov	r1, r3
 800a9bc:	f04f 0c0a 	mov.w	ip, #10
 800a9c0:	4620      	mov	r0, r4
 800a9c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a9c6:	3a30      	subs	r2, #48	; 0x30
 800a9c8:	2a09      	cmp	r2, #9
 800a9ca:	d903      	bls.n	800a9d4 <_vfiprintf_r+0x1d0>
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d0c6      	beq.n	800a95e <_vfiprintf_r+0x15a>
 800a9d0:	9105      	str	r1, [sp, #20]
 800a9d2:	e7c4      	b.n	800a95e <_vfiprintf_r+0x15a>
 800a9d4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a9d8:	4604      	mov	r4, r0
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e7f0      	b.n	800a9c0 <_vfiprintf_r+0x1bc>
 800a9de:	ab03      	add	r3, sp, #12
 800a9e0:	9300      	str	r3, [sp, #0]
 800a9e2:	462a      	mov	r2, r5
 800a9e4:	4b12      	ldr	r3, [pc, #72]	; (800aa30 <_vfiprintf_r+0x22c>)
 800a9e6:	a904      	add	r1, sp, #16
 800a9e8:	4630      	mov	r0, r6
 800a9ea:	f7fc fd93 	bl	8007514 <_printf_float>
 800a9ee:	4607      	mov	r7, r0
 800a9f0:	1c78      	adds	r0, r7, #1
 800a9f2:	d1d6      	bne.n	800a9a2 <_vfiprintf_r+0x19e>
 800a9f4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9f6:	07d9      	lsls	r1, r3, #31
 800a9f8:	d405      	bmi.n	800aa06 <_vfiprintf_r+0x202>
 800a9fa:	89ab      	ldrh	r3, [r5, #12]
 800a9fc:	059a      	lsls	r2, r3, #22
 800a9fe:	d402      	bmi.n	800aa06 <_vfiprintf_r+0x202>
 800aa00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800aa02:	f7fd fd37 	bl	8008474 <__retarget_lock_release_recursive>
 800aa06:	89ab      	ldrh	r3, [r5, #12]
 800aa08:	065b      	lsls	r3, r3, #25
 800aa0a:	f53f af1d 	bmi.w	800a848 <_vfiprintf_r+0x44>
 800aa0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800aa10:	e71c      	b.n	800a84c <_vfiprintf_r+0x48>
 800aa12:	ab03      	add	r3, sp, #12
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	462a      	mov	r2, r5
 800aa18:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <_vfiprintf_r+0x22c>)
 800aa1a:	a904      	add	r1, sp, #16
 800aa1c:	4630      	mov	r0, r6
 800aa1e:	f7fd f81d 	bl	8007a5c <_printf_i>
 800aa22:	e7e4      	b.n	800a9ee <_vfiprintf_r+0x1ea>
 800aa24:	0800c725 	.word	0x0800c725
 800aa28:	0800c72f 	.word	0x0800c72f
 800aa2c:	08007515 	.word	0x08007515
 800aa30:	0800a7df 	.word	0x0800a7df
 800aa34:	0800c72b 	.word	0x0800c72b

0800aa38 <__sflush_r>:
 800aa38:	898a      	ldrh	r2, [r1, #12]
 800aa3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa3e:	4605      	mov	r5, r0
 800aa40:	0710      	lsls	r0, r2, #28
 800aa42:	460c      	mov	r4, r1
 800aa44:	d458      	bmi.n	800aaf8 <__sflush_r+0xc0>
 800aa46:	684b      	ldr	r3, [r1, #4]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	dc05      	bgt.n	800aa58 <__sflush_r+0x20>
 800aa4c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	dc02      	bgt.n	800aa58 <__sflush_r+0x20>
 800aa52:	2000      	movs	r0, #0
 800aa54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa5a:	2e00      	cmp	r6, #0
 800aa5c:	d0f9      	beq.n	800aa52 <__sflush_r+0x1a>
 800aa5e:	2300      	movs	r3, #0
 800aa60:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800aa64:	682f      	ldr	r7, [r5, #0]
 800aa66:	6a21      	ldr	r1, [r4, #32]
 800aa68:	602b      	str	r3, [r5, #0]
 800aa6a:	d032      	beq.n	800aad2 <__sflush_r+0x9a>
 800aa6c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800aa6e:	89a3      	ldrh	r3, [r4, #12]
 800aa70:	075a      	lsls	r2, r3, #29
 800aa72:	d505      	bpl.n	800aa80 <__sflush_r+0x48>
 800aa74:	6863      	ldr	r3, [r4, #4]
 800aa76:	1ac0      	subs	r0, r0, r3
 800aa78:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800aa7a:	b10b      	cbz	r3, 800aa80 <__sflush_r+0x48>
 800aa7c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800aa7e:	1ac0      	subs	r0, r0, r3
 800aa80:	2300      	movs	r3, #0
 800aa82:	4602      	mov	r2, r0
 800aa84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800aa86:	6a21      	ldr	r1, [r4, #32]
 800aa88:	4628      	mov	r0, r5
 800aa8a:	47b0      	blx	r6
 800aa8c:	1c43      	adds	r3, r0, #1
 800aa8e:	89a3      	ldrh	r3, [r4, #12]
 800aa90:	d106      	bne.n	800aaa0 <__sflush_r+0x68>
 800aa92:	6829      	ldr	r1, [r5, #0]
 800aa94:	291d      	cmp	r1, #29
 800aa96:	d82b      	bhi.n	800aaf0 <__sflush_r+0xb8>
 800aa98:	4a29      	ldr	r2, [pc, #164]	; (800ab40 <__sflush_r+0x108>)
 800aa9a:	410a      	asrs	r2, r1
 800aa9c:	07d6      	lsls	r6, r2, #31
 800aa9e:	d427      	bmi.n	800aaf0 <__sflush_r+0xb8>
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	6062      	str	r2, [r4, #4]
 800aaa4:	04d9      	lsls	r1, r3, #19
 800aaa6:	6922      	ldr	r2, [r4, #16]
 800aaa8:	6022      	str	r2, [r4, #0]
 800aaaa:	d504      	bpl.n	800aab6 <__sflush_r+0x7e>
 800aaac:	1c42      	adds	r2, r0, #1
 800aaae:	d101      	bne.n	800aab4 <__sflush_r+0x7c>
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	b903      	cbnz	r3, 800aab6 <__sflush_r+0x7e>
 800aab4:	6560      	str	r0, [r4, #84]	; 0x54
 800aab6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aab8:	602f      	str	r7, [r5, #0]
 800aaba:	2900      	cmp	r1, #0
 800aabc:	d0c9      	beq.n	800aa52 <__sflush_r+0x1a>
 800aabe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aac2:	4299      	cmp	r1, r3
 800aac4:	d002      	beq.n	800aacc <__sflush_r+0x94>
 800aac6:	4628      	mov	r0, r5
 800aac8:	f7fe fb70 	bl	80091ac <_free_r>
 800aacc:	2000      	movs	r0, #0
 800aace:	6360      	str	r0, [r4, #52]	; 0x34
 800aad0:	e7c0      	b.n	800aa54 <__sflush_r+0x1c>
 800aad2:	2301      	movs	r3, #1
 800aad4:	4628      	mov	r0, r5
 800aad6:	47b0      	blx	r6
 800aad8:	1c41      	adds	r1, r0, #1
 800aada:	d1c8      	bne.n	800aa6e <__sflush_r+0x36>
 800aadc:	682b      	ldr	r3, [r5, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d0c5      	beq.n	800aa6e <__sflush_r+0x36>
 800aae2:	2b1d      	cmp	r3, #29
 800aae4:	d001      	beq.n	800aaea <__sflush_r+0xb2>
 800aae6:	2b16      	cmp	r3, #22
 800aae8:	d101      	bne.n	800aaee <__sflush_r+0xb6>
 800aaea:	602f      	str	r7, [r5, #0]
 800aaec:	e7b1      	b.n	800aa52 <__sflush_r+0x1a>
 800aaee:	89a3      	ldrh	r3, [r4, #12]
 800aaf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aaf4:	81a3      	strh	r3, [r4, #12]
 800aaf6:	e7ad      	b.n	800aa54 <__sflush_r+0x1c>
 800aaf8:	690f      	ldr	r7, [r1, #16]
 800aafa:	2f00      	cmp	r7, #0
 800aafc:	d0a9      	beq.n	800aa52 <__sflush_r+0x1a>
 800aafe:	0793      	lsls	r3, r2, #30
 800ab00:	680e      	ldr	r6, [r1, #0]
 800ab02:	bf08      	it	eq
 800ab04:	694b      	ldreq	r3, [r1, #20]
 800ab06:	600f      	str	r7, [r1, #0]
 800ab08:	bf18      	it	ne
 800ab0a:	2300      	movne	r3, #0
 800ab0c:	eba6 0807 	sub.w	r8, r6, r7
 800ab10:	608b      	str	r3, [r1, #8]
 800ab12:	f1b8 0f00 	cmp.w	r8, #0
 800ab16:	dd9c      	ble.n	800aa52 <__sflush_r+0x1a>
 800ab18:	6a21      	ldr	r1, [r4, #32]
 800ab1a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ab1c:	4643      	mov	r3, r8
 800ab1e:	463a      	mov	r2, r7
 800ab20:	4628      	mov	r0, r5
 800ab22:	47b0      	blx	r6
 800ab24:	2800      	cmp	r0, #0
 800ab26:	dc06      	bgt.n	800ab36 <__sflush_r+0xfe>
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ab2e:	81a3      	strh	r3, [r4, #12]
 800ab30:	f04f 30ff 	mov.w	r0, #4294967295
 800ab34:	e78e      	b.n	800aa54 <__sflush_r+0x1c>
 800ab36:	4407      	add	r7, r0
 800ab38:	eba8 0800 	sub.w	r8, r8, r0
 800ab3c:	e7e9      	b.n	800ab12 <__sflush_r+0xda>
 800ab3e:	bf00      	nop
 800ab40:	dfbffffe 	.word	0xdfbffffe

0800ab44 <_fflush_r>:
 800ab44:	b538      	push	{r3, r4, r5, lr}
 800ab46:	690b      	ldr	r3, [r1, #16]
 800ab48:	4605      	mov	r5, r0
 800ab4a:	460c      	mov	r4, r1
 800ab4c:	b913      	cbnz	r3, 800ab54 <_fflush_r+0x10>
 800ab4e:	2500      	movs	r5, #0
 800ab50:	4628      	mov	r0, r5
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	b118      	cbz	r0, 800ab5e <_fflush_r+0x1a>
 800ab56:	6a03      	ldr	r3, [r0, #32]
 800ab58:	b90b      	cbnz	r3, 800ab5e <_fflush_r+0x1a>
 800ab5a:	f7fd fb3d 	bl	80081d8 <__sinit>
 800ab5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d0f3      	beq.n	800ab4e <_fflush_r+0xa>
 800ab66:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ab68:	07d0      	lsls	r0, r2, #31
 800ab6a:	d404      	bmi.n	800ab76 <_fflush_r+0x32>
 800ab6c:	0599      	lsls	r1, r3, #22
 800ab6e:	d402      	bmi.n	800ab76 <_fflush_r+0x32>
 800ab70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab72:	f7fd fc7e 	bl	8008472 <__retarget_lock_acquire_recursive>
 800ab76:	4628      	mov	r0, r5
 800ab78:	4621      	mov	r1, r4
 800ab7a:	f7ff ff5d 	bl	800aa38 <__sflush_r>
 800ab7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab80:	07da      	lsls	r2, r3, #31
 800ab82:	4605      	mov	r5, r0
 800ab84:	d4e4      	bmi.n	800ab50 <_fflush_r+0xc>
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	059b      	lsls	r3, r3, #22
 800ab8a:	d4e1      	bmi.n	800ab50 <_fflush_r+0xc>
 800ab8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab8e:	f7fd fc71 	bl	8008474 <__retarget_lock_release_recursive>
 800ab92:	e7dd      	b.n	800ab50 <_fflush_r+0xc>

0800ab94 <__swbuf_r>:
 800ab94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab96:	460e      	mov	r6, r1
 800ab98:	4614      	mov	r4, r2
 800ab9a:	4605      	mov	r5, r0
 800ab9c:	b118      	cbz	r0, 800aba6 <__swbuf_r+0x12>
 800ab9e:	6a03      	ldr	r3, [r0, #32]
 800aba0:	b90b      	cbnz	r3, 800aba6 <__swbuf_r+0x12>
 800aba2:	f7fd fb19 	bl	80081d8 <__sinit>
 800aba6:	69a3      	ldr	r3, [r4, #24]
 800aba8:	60a3      	str	r3, [r4, #8]
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	071a      	lsls	r2, r3, #28
 800abae:	d525      	bpl.n	800abfc <__swbuf_r+0x68>
 800abb0:	6923      	ldr	r3, [r4, #16]
 800abb2:	b31b      	cbz	r3, 800abfc <__swbuf_r+0x68>
 800abb4:	6823      	ldr	r3, [r4, #0]
 800abb6:	6922      	ldr	r2, [r4, #16]
 800abb8:	1a98      	subs	r0, r3, r2
 800abba:	6963      	ldr	r3, [r4, #20]
 800abbc:	b2f6      	uxtb	r6, r6
 800abbe:	4283      	cmp	r3, r0
 800abc0:	4637      	mov	r7, r6
 800abc2:	dc04      	bgt.n	800abce <__swbuf_r+0x3a>
 800abc4:	4621      	mov	r1, r4
 800abc6:	4628      	mov	r0, r5
 800abc8:	f7ff ffbc 	bl	800ab44 <_fflush_r>
 800abcc:	b9e0      	cbnz	r0, 800ac08 <__swbuf_r+0x74>
 800abce:	68a3      	ldr	r3, [r4, #8]
 800abd0:	3b01      	subs	r3, #1
 800abd2:	60a3      	str	r3, [r4, #8]
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	1c5a      	adds	r2, r3, #1
 800abd8:	6022      	str	r2, [r4, #0]
 800abda:	701e      	strb	r6, [r3, #0]
 800abdc:	6962      	ldr	r2, [r4, #20]
 800abde:	1c43      	adds	r3, r0, #1
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d004      	beq.n	800abee <__swbuf_r+0x5a>
 800abe4:	89a3      	ldrh	r3, [r4, #12]
 800abe6:	07db      	lsls	r3, r3, #31
 800abe8:	d506      	bpl.n	800abf8 <__swbuf_r+0x64>
 800abea:	2e0a      	cmp	r6, #10
 800abec:	d104      	bne.n	800abf8 <__swbuf_r+0x64>
 800abee:	4621      	mov	r1, r4
 800abf0:	4628      	mov	r0, r5
 800abf2:	f7ff ffa7 	bl	800ab44 <_fflush_r>
 800abf6:	b938      	cbnz	r0, 800ac08 <__swbuf_r+0x74>
 800abf8:	4638      	mov	r0, r7
 800abfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800abfc:	4621      	mov	r1, r4
 800abfe:	4628      	mov	r0, r5
 800ac00:	f000 f806 	bl	800ac10 <__swsetup_r>
 800ac04:	2800      	cmp	r0, #0
 800ac06:	d0d5      	beq.n	800abb4 <__swbuf_r+0x20>
 800ac08:	f04f 37ff 	mov.w	r7, #4294967295
 800ac0c:	e7f4      	b.n	800abf8 <__swbuf_r+0x64>
	...

0800ac10 <__swsetup_r>:
 800ac10:	b538      	push	{r3, r4, r5, lr}
 800ac12:	4b2a      	ldr	r3, [pc, #168]	; (800acbc <__swsetup_r+0xac>)
 800ac14:	4605      	mov	r5, r0
 800ac16:	6818      	ldr	r0, [r3, #0]
 800ac18:	460c      	mov	r4, r1
 800ac1a:	b118      	cbz	r0, 800ac24 <__swsetup_r+0x14>
 800ac1c:	6a03      	ldr	r3, [r0, #32]
 800ac1e:	b90b      	cbnz	r3, 800ac24 <__swsetup_r+0x14>
 800ac20:	f7fd fada 	bl	80081d8 <__sinit>
 800ac24:	89a3      	ldrh	r3, [r4, #12]
 800ac26:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac2a:	0718      	lsls	r0, r3, #28
 800ac2c:	d422      	bmi.n	800ac74 <__swsetup_r+0x64>
 800ac2e:	06d9      	lsls	r1, r3, #27
 800ac30:	d407      	bmi.n	800ac42 <__swsetup_r+0x32>
 800ac32:	2309      	movs	r3, #9
 800ac34:	602b      	str	r3, [r5, #0]
 800ac36:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ac3a:	81a3      	strh	r3, [r4, #12]
 800ac3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac40:	e034      	b.n	800acac <__swsetup_r+0x9c>
 800ac42:	0758      	lsls	r0, r3, #29
 800ac44:	d512      	bpl.n	800ac6c <__swsetup_r+0x5c>
 800ac46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ac48:	b141      	cbz	r1, 800ac5c <__swsetup_r+0x4c>
 800ac4a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ac4e:	4299      	cmp	r1, r3
 800ac50:	d002      	beq.n	800ac58 <__swsetup_r+0x48>
 800ac52:	4628      	mov	r0, r5
 800ac54:	f7fe faaa 	bl	80091ac <_free_r>
 800ac58:	2300      	movs	r3, #0
 800ac5a:	6363      	str	r3, [r4, #52]	; 0x34
 800ac5c:	89a3      	ldrh	r3, [r4, #12]
 800ac5e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ac62:	81a3      	strh	r3, [r4, #12]
 800ac64:	2300      	movs	r3, #0
 800ac66:	6063      	str	r3, [r4, #4]
 800ac68:	6923      	ldr	r3, [r4, #16]
 800ac6a:	6023      	str	r3, [r4, #0]
 800ac6c:	89a3      	ldrh	r3, [r4, #12]
 800ac6e:	f043 0308 	orr.w	r3, r3, #8
 800ac72:	81a3      	strh	r3, [r4, #12]
 800ac74:	6923      	ldr	r3, [r4, #16]
 800ac76:	b94b      	cbnz	r3, 800ac8c <__swsetup_r+0x7c>
 800ac78:	89a3      	ldrh	r3, [r4, #12]
 800ac7a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ac7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ac82:	d003      	beq.n	800ac8c <__swsetup_r+0x7c>
 800ac84:	4621      	mov	r1, r4
 800ac86:	4628      	mov	r0, r5
 800ac88:	f000 f8e0 	bl	800ae4c <__smakebuf_r>
 800ac8c:	89a0      	ldrh	r0, [r4, #12]
 800ac8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ac92:	f010 0301 	ands.w	r3, r0, #1
 800ac96:	d00a      	beq.n	800acae <__swsetup_r+0x9e>
 800ac98:	2300      	movs	r3, #0
 800ac9a:	60a3      	str	r3, [r4, #8]
 800ac9c:	6963      	ldr	r3, [r4, #20]
 800ac9e:	425b      	negs	r3, r3
 800aca0:	61a3      	str	r3, [r4, #24]
 800aca2:	6923      	ldr	r3, [r4, #16]
 800aca4:	b943      	cbnz	r3, 800acb8 <__swsetup_r+0xa8>
 800aca6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800acaa:	d1c4      	bne.n	800ac36 <__swsetup_r+0x26>
 800acac:	bd38      	pop	{r3, r4, r5, pc}
 800acae:	0781      	lsls	r1, r0, #30
 800acb0:	bf58      	it	pl
 800acb2:	6963      	ldrpl	r3, [r4, #20]
 800acb4:	60a3      	str	r3, [r4, #8]
 800acb6:	e7f4      	b.n	800aca2 <__swsetup_r+0x92>
 800acb8:	2000      	movs	r0, #0
 800acba:	e7f7      	b.n	800acac <__swsetup_r+0x9c>
 800acbc:	20000208 	.word	0x20000208

0800acc0 <memmove>:
 800acc0:	4288      	cmp	r0, r1
 800acc2:	b510      	push	{r4, lr}
 800acc4:	eb01 0402 	add.w	r4, r1, r2
 800acc8:	d902      	bls.n	800acd0 <memmove+0x10>
 800acca:	4284      	cmp	r4, r0
 800accc:	4623      	mov	r3, r4
 800acce:	d807      	bhi.n	800ace0 <memmove+0x20>
 800acd0:	1e43      	subs	r3, r0, #1
 800acd2:	42a1      	cmp	r1, r4
 800acd4:	d008      	beq.n	800ace8 <memmove+0x28>
 800acd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800acda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800acde:	e7f8      	b.n	800acd2 <memmove+0x12>
 800ace0:	4402      	add	r2, r0
 800ace2:	4601      	mov	r1, r0
 800ace4:	428a      	cmp	r2, r1
 800ace6:	d100      	bne.n	800acea <memmove+0x2a>
 800ace8:	bd10      	pop	{r4, pc}
 800acea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800acee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800acf2:	e7f7      	b.n	800ace4 <memmove+0x24>

0800acf4 <_sbrk_r>:
 800acf4:	b538      	push	{r3, r4, r5, lr}
 800acf6:	4d06      	ldr	r5, [pc, #24]	; (800ad10 <_sbrk_r+0x1c>)
 800acf8:	2300      	movs	r3, #0
 800acfa:	4604      	mov	r4, r0
 800acfc:	4608      	mov	r0, r1
 800acfe:	602b      	str	r3, [r5, #0]
 800ad00:	f7f8 f9fc 	bl	80030fc <_sbrk>
 800ad04:	1c43      	adds	r3, r0, #1
 800ad06:	d102      	bne.n	800ad0e <_sbrk_r+0x1a>
 800ad08:	682b      	ldr	r3, [r5, #0]
 800ad0a:	b103      	cbz	r3, 800ad0e <_sbrk_r+0x1a>
 800ad0c:	6023      	str	r3, [r4, #0]
 800ad0e:	bd38      	pop	{r3, r4, r5, pc}
 800ad10:	200007ec 	.word	0x200007ec

0800ad14 <__assert_func>:
 800ad14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ad16:	4614      	mov	r4, r2
 800ad18:	461a      	mov	r2, r3
 800ad1a:	4b09      	ldr	r3, [pc, #36]	; (800ad40 <__assert_func+0x2c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	4605      	mov	r5, r0
 800ad20:	68d8      	ldr	r0, [r3, #12]
 800ad22:	b14c      	cbz	r4, 800ad38 <__assert_func+0x24>
 800ad24:	4b07      	ldr	r3, [pc, #28]	; (800ad44 <__assert_func+0x30>)
 800ad26:	9100      	str	r1, [sp, #0]
 800ad28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ad2c:	4906      	ldr	r1, [pc, #24]	; (800ad48 <__assert_func+0x34>)
 800ad2e:	462b      	mov	r3, r5
 800ad30:	f000 f854 	bl	800addc <fiprintf>
 800ad34:	f000 f8e8 	bl	800af08 <abort>
 800ad38:	4b04      	ldr	r3, [pc, #16]	; (800ad4c <__assert_func+0x38>)
 800ad3a:	461c      	mov	r4, r3
 800ad3c:	e7f3      	b.n	800ad26 <__assert_func+0x12>
 800ad3e:	bf00      	nop
 800ad40:	20000208 	.word	0x20000208
 800ad44:	0800c736 	.word	0x0800c736
 800ad48:	0800c743 	.word	0x0800c743
 800ad4c:	0800c771 	.word	0x0800c771

0800ad50 <_calloc_r>:
 800ad50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad52:	fba1 2402 	umull	r2, r4, r1, r2
 800ad56:	b94c      	cbnz	r4, 800ad6c <_calloc_r+0x1c>
 800ad58:	4611      	mov	r1, r2
 800ad5a:	9201      	str	r2, [sp, #4]
 800ad5c:	f7fe fdf2 	bl	8009944 <_malloc_r>
 800ad60:	9a01      	ldr	r2, [sp, #4]
 800ad62:	4605      	mov	r5, r0
 800ad64:	b930      	cbnz	r0, 800ad74 <_calloc_r+0x24>
 800ad66:	4628      	mov	r0, r5
 800ad68:	b003      	add	sp, #12
 800ad6a:	bd30      	pop	{r4, r5, pc}
 800ad6c:	220c      	movs	r2, #12
 800ad6e:	6002      	str	r2, [r0, #0]
 800ad70:	2500      	movs	r5, #0
 800ad72:	e7f8      	b.n	800ad66 <_calloc_r+0x16>
 800ad74:	4621      	mov	r1, r4
 800ad76:	f7fd fada 	bl	800832e <memset>
 800ad7a:	e7f4      	b.n	800ad66 <_calloc_r+0x16>

0800ad7c <_realloc_r>:
 800ad7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad80:	4680      	mov	r8, r0
 800ad82:	4614      	mov	r4, r2
 800ad84:	460e      	mov	r6, r1
 800ad86:	b921      	cbnz	r1, 800ad92 <_realloc_r+0x16>
 800ad88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad8c:	4611      	mov	r1, r2
 800ad8e:	f7fe bdd9 	b.w	8009944 <_malloc_r>
 800ad92:	b92a      	cbnz	r2, 800ada0 <_realloc_r+0x24>
 800ad94:	f7fe fa0a 	bl	80091ac <_free_r>
 800ad98:	4625      	mov	r5, r4
 800ad9a:	4628      	mov	r0, r5
 800ad9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ada0:	f000 f8b9 	bl	800af16 <_malloc_usable_size_r>
 800ada4:	4284      	cmp	r4, r0
 800ada6:	4607      	mov	r7, r0
 800ada8:	d802      	bhi.n	800adb0 <_realloc_r+0x34>
 800adaa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800adae:	d812      	bhi.n	800add6 <_realloc_r+0x5a>
 800adb0:	4621      	mov	r1, r4
 800adb2:	4640      	mov	r0, r8
 800adb4:	f7fe fdc6 	bl	8009944 <_malloc_r>
 800adb8:	4605      	mov	r5, r0
 800adba:	2800      	cmp	r0, #0
 800adbc:	d0ed      	beq.n	800ad9a <_realloc_r+0x1e>
 800adbe:	42bc      	cmp	r4, r7
 800adc0:	4622      	mov	r2, r4
 800adc2:	4631      	mov	r1, r6
 800adc4:	bf28      	it	cs
 800adc6:	463a      	movcs	r2, r7
 800adc8:	f7fd fb55 	bl	8008476 <memcpy>
 800adcc:	4631      	mov	r1, r6
 800adce:	4640      	mov	r0, r8
 800add0:	f7fe f9ec 	bl	80091ac <_free_r>
 800add4:	e7e1      	b.n	800ad9a <_realloc_r+0x1e>
 800add6:	4635      	mov	r5, r6
 800add8:	e7df      	b.n	800ad9a <_realloc_r+0x1e>
	...

0800addc <fiprintf>:
 800addc:	b40e      	push	{r1, r2, r3}
 800adde:	b503      	push	{r0, r1, lr}
 800ade0:	4601      	mov	r1, r0
 800ade2:	ab03      	add	r3, sp, #12
 800ade4:	4805      	ldr	r0, [pc, #20]	; (800adfc <fiprintf+0x20>)
 800ade6:	f853 2b04 	ldr.w	r2, [r3], #4
 800adea:	6800      	ldr	r0, [r0, #0]
 800adec:	9301      	str	r3, [sp, #4]
 800adee:	f7ff fd09 	bl	800a804 <_vfiprintf_r>
 800adf2:	b002      	add	sp, #8
 800adf4:	f85d eb04 	ldr.w	lr, [sp], #4
 800adf8:	b003      	add	sp, #12
 800adfa:	4770      	bx	lr
 800adfc:	20000208 	.word	0x20000208

0800ae00 <__swhatbuf_r>:
 800ae00:	b570      	push	{r4, r5, r6, lr}
 800ae02:	460c      	mov	r4, r1
 800ae04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae08:	2900      	cmp	r1, #0
 800ae0a:	b096      	sub	sp, #88	; 0x58
 800ae0c:	4615      	mov	r5, r2
 800ae0e:	461e      	mov	r6, r3
 800ae10:	da0d      	bge.n	800ae2e <__swhatbuf_r+0x2e>
 800ae12:	89a3      	ldrh	r3, [r4, #12]
 800ae14:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ae18:	f04f 0100 	mov.w	r1, #0
 800ae1c:	bf0c      	ite	eq
 800ae1e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ae22:	2340      	movne	r3, #64	; 0x40
 800ae24:	2000      	movs	r0, #0
 800ae26:	6031      	str	r1, [r6, #0]
 800ae28:	602b      	str	r3, [r5, #0]
 800ae2a:	b016      	add	sp, #88	; 0x58
 800ae2c:	bd70      	pop	{r4, r5, r6, pc}
 800ae2e:	466a      	mov	r2, sp
 800ae30:	f000 f848 	bl	800aec4 <_fstat_r>
 800ae34:	2800      	cmp	r0, #0
 800ae36:	dbec      	blt.n	800ae12 <__swhatbuf_r+0x12>
 800ae38:	9901      	ldr	r1, [sp, #4]
 800ae3a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ae3e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ae42:	4259      	negs	r1, r3
 800ae44:	4159      	adcs	r1, r3
 800ae46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae4a:	e7eb      	b.n	800ae24 <__swhatbuf_r+0x24>

0800ae4c <__smakebuf_r>:
 800ae4c:	898b      	ldrh	r3, [r1, #12]
 800ae4e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ae50:	079d      	lsls	r5, r3, #30
 800ae52:	4606      	mov	r6, r0
 800ae54:	460c      	mov	r4, r1
 800ae56:	d507      	bpl.n	800ae68 <__smakebuf_r+0x1c>
 800ae58:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ae5c:	6023      	str	r3, [r4, #0]
 800ae5e:	6123      	str	r3, [r4, #16]
 800ae60:	2301      	movs	r3, #1
 800ae62:	6163      	str	r3, [r4, #20]
 800ae64:	b002      	add	sp, #8
 800ae66:	bd70      	pop	{r4, r5, r6, pc}
 800ae68:	ab01      	add	r3, sp, #4
 800ae6a:	466a      	mov	r2, sp
 800ae6c:	f7ff ffc8 	bl	800ae00 <__swhatbuf_r>
 800ae70:	9900      	ldr	r1, [sp, #0]
 800ae72:	4605      	mov	r5, r0
 800ae74:	4630      	mov	r0, r6
 800ae76:	f7fe fd65 	bl	8009944 <_malloc_r>
 800ae7a:	b948      	cbnz	r0, 800ae90 <__smakebuf_r+0x44>
 800ae7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae80:	059a      	lsls	r2, r3, #22
 800ae82:	d4ef      	bmi.n	800ae64 <__smakebuf_r+0x18>
 800ae84:	f023 0303 	bic.w	r3, r3, #3
 800ae88:	f043 0302 	orr.w	r3, r3, #2
 800ae8c:	81a3      	strh	r3, [r4, #12]
 800ae8e:	e7e3      	b.n	800ae58 <__smakebuf_r+0xc>
 800ae90:	89a3      	ldrh	r3, [r4, #12]
 800ae92:	6020      	str	r0, [r4, #0]
 800ae94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ae98:	81a3      	strh	r3, [r4, #12]
 800ae9a:	9b00      	ldr	r3, [sp, #0]
 800ae9c:	6163      	str	r3, [r4, #20]
 800ae9e:	9b01      	ldr	r3, [sp, #4]
 800aea0:	6120      	str	r0, [r4, #16]
 800aea2:	b15b      	cbz	r3, 800aebc <__smakebuf_r+0x70>
 800aea4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f000 f81d 	bl	800aee8 <_isatty_r>
 800aeae:	b128      	cbz	r0, 800aebc <__smakebuf_r+0x70>
 800aeb0:	89a3      	ldrh	r3, [r4, #12]
 800aeb2:	f023 0303 	bic.w	r3, r3, #3
 800aeb6:	f043 0301 	orr.w	r3, r3, #1
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	89a3      	ldrh	r3, [r4, #12]
 800aebe:	431d      	orrs	r5, r3
 800aec0:	81a5      	strh	r5, [r4, #12]
 800aec2:	e7cf      	b.n	800ae64 <__smakebuf_r+0x18>

0800aec4 <_fstat_r>:
 800aec4:	b538      	push	{r3, r4, r5, lr}
 800aec6:	4d07      	ldr	r5, [pc, #28]	; (800aee4 <_fstat_r+0x20>)
 800aec8:	2300      	movs	r3, #0
 800aeca:	4604      	mov	r4, r0
 800aecc:	4608      	mov	r0, r1
 800aece:	4611      	mov	r1, r2
 800aed0:	602b      	str	r3, [r5, #0]
 800aed2:	f7f8 f8ea 	bl	80030aa <_fstat>
 800aed6:	1c43      	adds	r3, r0, #1
 800aed8:	d102      	bne.n	800aee0 <_fstat_r+0x1c>
 800aeda:	682b      	ldr	r3, [r5, #0]
 800aedc:	b103      	cbz	r3, 800aee0 <_fstat_r+0x1c>
 800aede:	6023      	str	r3, [r4, #0]
 800aee0:	bd38      	pop	{r3, r4, r5, pc}
 800aee2:	bf00      	nop
 800aee4:	200007ec 	.word	0x200007ec

0800aee8 <_isatty_r>:
 800aee8:	b538      	push	{r3, r4, r5, lr}
 800aeea:	4d06      	ldr	r5, [pc, #24]	; (800af04 <_isatty_r+0x1c>)
 800aeec:	2300      	movs	r3, #0
 800aeee:	4604      	mov	r4, r0
 800aef0:	4608      	mov	r0, r1
 800aef2:	602b      	str	r3, [r5, #0]
 800aef4:	f7f8 f8e9 	bl	80030ca <_isatty>
 800aef8:	1c43      	adds	r3, r0, #1
 800aefa:	d102      	bne.n	800af02 <_isatty_r+0x1a>
 800aefc:	682b      	ldr	r3, [r5, #0]
 800aefe:	b103      	cbz	r3, 800af02 <_isatty_r+0x1a>
 800af00:	6023      	str	r3, [r4, #0]
 800af02:	bd38      	pop	{r3, r4, r5, pc}
 800af04:	200007ec 	.word	0x200007ec

0800af08 <abort>:
 800af08:	b508      	push	{r3, lr}
 800af0a:	2006      	movs	r0, #6
 800af0c:	f000 f834 	bl	800af78 <raise>
 800af10:	2001      	movs	r0, #1
 800af12:	f7f8 f87b 	bl	800300c <_exit>

0800af16 <_malloc_usable_size_r>:
 800af16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af1a:	1f18      	subs	r0, r3, #4
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	bfbc      	itt	lt
 800af20:	580b      	ldrlt	r3, [r1, r0]
 800af22:	18c0      	addlt	r0, r0, r3
 800af24:	4770      	bx	lr

0800af26 <_raise_r>:
 800af26:	291f      	cmp	r1, #31
 800af28:	b538      	push	{r3, r4, r5, lr}
 800af2a:	4604      	mov	r4, r0
 800af2c:	460d      	mov	r5, r1
 800af2e:	d904      	bls.n	800af3a <_raise_r+0x14>
 800af30:	2316      	movs	r3, #22
 800af32:	6003      	str	r3, [r0, #0]
 800af34:	f04f 30ff 	mov.w	r0, #4294967295
 800af38:	bd38      	pop	{r3, r4, r5, pc}
 800af3a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af3c:	b112      	cbz	r2, 800af44 <_raise_r+0x1e>
 800af3e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af42:	b94b      	cbnz	r3, 800af58 <_raise_r+0x32>
 800af44:	4620      	mov	r0, r4
 800af46:	f000 f831 	bl	800afac <_getpid_r>
 800af4a:	462a      	mov	r2, r5
 800af4c:	4601      	mov	r1, r0
 800af4e:	4620      	mov	r0, r4
 800af50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af54:	f000 b818 	b.w	800af88 <_kill_r>
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d00a      	beq.n	800af72 <_raise_r+0x4c>
 800af5c:	1c59      	adds	r1, r3, #1
 800af5e:	d103      	bne.n	800af68 <_raise_r+0x42>
 800af60:	2316      	movs	r3, #22
 800af62:	6003      	str	r3, [r0, #0]
 800af64:	2001      	movs	r0, #1
 800af66:	e7e7      	b.n	800af38 <_raise_r+0x12>
 800af68:	2400      	movs	r4, #0
 800af6a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af6e:	4628      	mov	r0, r5
 800af70:	4798      	blx	r3
 800af72:	2000      	movs	r0, #0
 800af74:	e7e0      	b.n	800af38 <_raise_r+0x12>
	...

0800af78 <raise>:
 800af78:	4b02      	ldr	r3, [pc, #8]	; (800af84 <raise+0xc>)
 800af7a:	4601      	mov	r1, r0
 800af7c:	6818      	ldr	r0, [r3, #0]
 800af7e:	f7ff bfd2 	b.w	800af26 <_raise_r>
 800af82:	bf00      	nop
 800af84:	20000208 	.word	0x20000208

0800af88 <_kill_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	4d07      	ldr	r5, [pc, #28]	; (800afa8 <_kill_r+0x20>)
 800af8c:	2300      	movs	r3, #0
 800af8e:	4604      	mov	r4, r0
 800af90:	4608      	mov	r0, r1
 800af92:	4611      	mov	r1, r2
 800af94:	602b      	str	r3, [r5, #0]
 800af96:	f7f8 f829 	bl	8002fec <_kill>
 800af9a:	1c43      	adds	r3, r0, #1
 800af9c:	d102      	bne.n	800afa4 <_kill_r+0x1c>
 800af9e:	682b      	ldr	r3, [r5, #0]
 800afa0:	b103      	cbz	r3, 800afa4 <_kill_r+0x1c>
 800afa2:	6023      	str	r3, [r4, #0]
 800afa4:	bd38      	pop	{r3, r4, r5, pc}
 800afa6:	bf00      	nop
 800afa8:	200007ec 	.word	0x200007ec

0800afac <_getpid_r>:
 800afac:	f7f8 b816 	b.w	8002fdc <_getpid>

0800afb0 <sqrt>:
 800afb0:	b538      	push	{r3, r4, r5, lr}
 800afb2:	ed2d 8b02 	vpush	{d8}
 800afb6:	ec55 4b10 	vmov	r4, r5, d0
 800afba:	f000 f8d1 	bl	800b160 <__ieee754_sqrt>
 800afbe:	4622      	mov	r2, r4
 800afc0:	462b      	mov	r3, r5
 800afc2:	4620      	mov	r0, r4
 800afc4:	4629      	mov	r1, r5
 800afc6:	eeb0 8a40 	vmov.f32	s16, s0
 800afca:	eef0 8a60 	vmov.f32	s17, s1
 800afce:	f7f5 fdcd 	bl	8000b6c <__aeabi_dcmpun>
 800afd2:	b990      	cbnz	r0, 800affa <sqrt+0x4a>
 800afd4:	2200      	movs	r2, #0
 800afd6:	2300      	movs	r3, #0
 800afd8:	4620      	mov	r0, r4
 800afda:	4629      	mov	r1, r5
 800afdc:	f7f5 fd9e 	bl	8000b1c <__aeabi_dcmplt>
 800afe0:	b158      	cbz	r0, 800affa <sqrt+0x4a>
 800afe2:	f7fd fa1b 	bl	800841c <__errno>
 800afe6:	2321      	movs	r3, #33	; 0x21
 800afe8:	6003      	str	r3, [r0, #0]
 800afea:	2200      	movs	r2, #0
 800afec:	2300      	movs	r3, #0
 800afee:	4610      	mov	r0, r2
 800aff0:	4619      	mov	r1, r3
 800aff2:	f7f5 fc4b 	bl	800088c <__aeabi_ddiv>
 800aff6:	ec41 0b18 	vmov	d8, r0, r1
 800affa:	eeb0 0a48 	vmov.f32	s0, s16
 800affe:	eef0 0a68 	vmov.f32	s1, s17
 800b002:	ecbd 8b02 	vpop	{d8}
 800b006:	bd38      	pop	{r3, r4, r5, pc}

0800b008 <cos>:
 800b008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b00a:	ec53 2b10 	vmov	r2, r3, d0
 800b00e:	4826      	ldr	r0, [pc, #152]	; (800b0a8 <cos+0xa0>)
 800b010:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b014:	4281      	cmp	r1, r0
 800b016:	dc06      	bgt.n	800b026 <cos+0x1e>
 800b018:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800b0a0 <cos+0x98>
 800b01c:	b005      	add	sp, #20
 800b01e:	f85d eb04 	ldr.w	lr, [sp], #4
 800b022:	f000 b979 	b.w	800b318 <__kernel_cos>
 800b026:	4821      	ldr	r0, [pc, #132]	; (800b0ac <cos+0xa4>)
 800b028:	4281      	cmp	r1, r0
 800b02a:	dd09      	ble.n	800b040 <cos+0x38>
 800b02c:	ee10 0a10 	vmov	r0, s0
 800b030:	4619      	mov	r1, r3
 800b032:	f7f5 f949 	bl	80002c8 <__aeabi_dsub>
 800b036:	ec41 0b10 	vmov	d0, r0, r1
 800b03a:	b005      	add	sp, #20
 800b03c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b040:	4668      	mov	r0, sp
 800b042:	f000 faf1 	bl	800b628 <__ieee754_rem_pio2>
 800b046:	f000 0003 	and.w	r0, r0, #3
 800b04a:	2801      	cmp	r0, #1
 800b04c:	d00b      	beq.n	800b066 <cos+0x5e>
 800b04e:	2802      	cmp	r0, #2
 800b050:	d016      	beq.n	800b080 <cos+0x78>
 800b052:	b9e0      	cbnz	r0, 800b08e <cos+0x86>
 800b054:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b058:	ed9d 0b00 	vldr	d0, [sp]
 800b05c:	f000 f95c 	bl	800b318 <__kernel_cos>
 800b060:	ec51 0b10 	vmov	r0, r1, d0
 800b064:	e7e7      	b.n	800b036 <cos+0x2e>
 800b066:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b06a:	ed9d 0b00 	vldr	d0, [sp]
 800b06e:	f000 fa1b 	bl	800b4a8 <__kernel_sin>
 800b072:	ec53 2b10 	vmov	r2, r3, d0
 800b076:	ee10 0a10 	vmov	r0, s0
 800b07a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b07e:	e7da      	b.n	800b036 <cos+0x2e>
 800b080:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b084:	ed9d 0b00 	vldr	d0, [sp]
 800b088:	f000 f946 	bl	800b318 <__kernel_cos>
 800b08c:	e7f1      	b.n	800b072 <cos+0x6a>
 800b08e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b092:	ed9d 0b00 	vldr	d0, [sp]
 800b096:	2001      	movs	r0, #1
 800b098:	f000 fa06 	bl	800b4a8 <__kernel_sin>
 800b09c:	e7e0      	b.n	800b060 <cos+0x58>
 800b09e:	bf00      	nop
	...
 800b0a8:	3fe921fb 	.word	0x3fe921fb
 800b0ac:	7fefffff 	.word	0x7fefffff

0800b0b0 <sin>:
 800b0b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b0b2:	ec53 2b10 	vmov	r2, r3, d0
 800b0b6:	4828      	ldr	r0, [pc, #160]	; (800b158 <sin+0xa8>)
 800b0b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0bc:	4281      	cmp	r1, r0
 800b0be:	dc07      	bgt.n	800b0d0 <sin+0x20>
 800b0c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800b150 <sin+0xa0>
 800b0c4:	2000      	movs	r0, #0
 800b0c6:	b005      	add	sp, #20
 800b0c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0cc:	f000 b9ec 	b.w	800b4a8 <__kernel_sin>
 800b0d0:	4822      	ldr	r0, [pc, #136]	; (800b15c <sin+0xac>)
 800b0d2:	4281      	cmp	r1, r0
 800b0d4:	dd09      	ble.n	800b0ea <sin+0x3a>
 800b0d6:	ee10 0a10 	vmov	r0, s0
 800b0da:	4619      	mov	r1, r3
 800b0dc:	f7f5 f8f4 	bl	80002c8 <__aeabi_dsub>
 800b0e0:	ec41 0b10 	vmov	d0, r0, r1
 800b0e4:	b005      	add	sp, #20
 800b0e6:	f85d fb04 	ldr.w	pc, [sp], #4
 800b0ea:	4668      	mov	r0, sp
 800b0ec:	f000 fa9c 	bl	800b628 <__ieee754_rem_pio2>
 800b0f0:	f000 0003 	and.w	r0, r0, #3
 800b0f4:	2801      	cmp	r0, #1
 800b0f6:	d00c      	beq.n	800b112 <sin+0x62>
 800b0f8:	2802      	cmp	r0, #2
 800b0fa:	d011      	beq.n	800b120 <sin+0x70>
 800b0fc:	b9f0      	cbnz	r0, 800b13c <sin+0x8c>
 800b0fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b102:	ed9d 0b00 	vldr	d0, [sp]
 800b106:	2001      	movs	r0, #1
 800b108:	f000 f9ce 	bl	800b4a8 <__kernel_sin>
 800b10c:	ec51 0b10 	vmov	r0, r1, d0
 800b110:	e7e6      	b.n	800b0e0 <sin+0x30>
 800b112:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b116:	ed9d 0b00 	vldr	d0, [sp]
 800b11a:	f000 f8fd 	bl	800b318 <__kernel_cos>
 800b11e:	e7f5      	b.n	800b10c <sin+0x5c>
 800b120:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b124:	ed9d 0b00 	vldr	d0, [sp]
 800b128:	2001      	movs	r0, #1
 800b12a:	f000 f9bd 	bl	800b4a8 <__kernel_sin>
 800b12e:	ec53 2b10 	vmov	r2, r3, d0
 800b132:	ee10 0a10 	vmov	r0, s0
 800b136:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800b13a:	e7d1      	b.n	800b0e0 <sin+0x30>
 800b13c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b140:	ed9d 0b00 	vldr	d0, [sp]
 800b144:	f000 f8e8 	bl	800b318 <__kernel_cos>
 800b148:	e7f1      	b.n	800b12e <sin+0x7e>
 800b14a:	bf00      	nop
 800b14c:	f3af 8000 	nop.w
	...
 800b158:	3fe921fb 	.word	0x3fe921fb
 800b15c:	7fefffff 	.word	0x7fefffff

0800b160 <__ieee754_sqrt>:
 800b160:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b164:	ec55 4b10 	vmov	r4, r5, d0
 800b168:	4e67      	ldr	r6, [pc, #412]	; (800b308 <__ieee754_sqrt+0x1a8>)
 800b16a:	43ae      	bics	r6, r5
 800b16c:	ee10 0a10 	vmov	r0, s0
 800b170:	ee10 2a10 	vmov	r2, s0
 800b174:	4629      	mov	r1, r5
 800b176:	462b      	mov	r3, r5
 800b178:	d10d      	bne.n	800b196 <__ieee754_sqrt+0x36>
 800b17a:	f7f5 fa5d 	bl	8000638 <__aeabi_dmul>
 800b17e:	4602      	mov	r2, r0
 800b180:	460b      	mov	r3, r1
 800b182:	4620      	mov	r0, r4
 800b184:	4629      	mov	r1, r5
 800b186:	f7f5 f8a1 	bl	80002cc <__adddf3>
 800b18a:	4604      	mov	r4, r0
 800b18c:	460d      	mov	r5, r1
 800b18e:	ec45 4b10 	vmov	d0, r4, r5
 800b192:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b196:	2d00      	cmp	r5, #0
 800b198:	dc0b      	bgt.n	800b1b2 <__ieee754_sqrt+0x52>
 800b19a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b19e:	4326      	orrs	r6, r4
 800b1a0:	d0f5      	beq.n	800b18e <__ieee754_sqrt+0x2e>
 800b1a2:	b135      	cbz	r5, 800b1b2 <__ieee754_sqrt+0x52>
 800b1a4:	f7f5 f890 	bl	80002c8 <__aeabi_dsub>
 800b1a8:	4602      	mov	r2, r0
 800b1aa:	460b      	mov	r3, r1
 800b1ac:	f7f5 fb6e 	bl	800088c <__aeabi_ddiv>
 800b1b0:	e7eb      	b.n	800b18a <__ieee754_sqrt+0x2a>
 800b1b2:	1509      	asrs	r1, r1, #20
 800b1b4:	f000 808d 	beq.w	800b2d2 <__ieee754_sqrt+0x172>
 800b1b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b1bc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800b1c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1c4:	07c9      	lsls	r1, r1, #31
 800b1c6:	bf5c      	itt	pl
 800b1c8:	005b      	lslpl	r3, r3, #1
 800b1ca:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800b1ce:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b1d2:	bf58      	it	pl
 800b1d4:	0052      	lslpl	r2, r2, #1
 800b1d6:	2500      	movs	r5, #0
 800b1d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b1dc:	1076      	asrs	r6, r6, #1
 800b1de:	0052      	lsls	r2, r2, #1
 800b1e0:	f04f 0e16 	mov.w	lr, #22
 800b1e4:	46ac      	mov	ip, r5
 800b1e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b1ea:	eb0c 0001 	add.w	r0, ip, r1
 800b1ee:	4298      	cmp	r0, r3
 800b1f0:	bfde      	ittt	le
 800b1f2:	1a1b      	suble	r3, r3, r0
 800b1f4:	eb00 0c01 	addle.w	ip, r0, r1
 800b1f8:	186d      	addle	r5, r5, r1
 800b1fa:	005b      	lsls	r3, r3, #1
 800b1fc:	f1be 0e01 	subs.w	lr, lr, #1
 800b200:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b204:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b208:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b20c:	d1ed      	bne.n	800b1ea <__ieee754_sqrt+0x8a>
 800b20e:	4674      	mov	r4, lr
 800b210:	2720      	movs	r7, #32
 800b212:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800b216:	4563      	cmp	r3, ip
 800b218:	eb01 000e 	add.w	r0, r1, lr
 800b21c:	dc02      	bgt.n	800b224 <__ieee754_sqrt+0xc4>
 800b21e:	d113      	bne.n	800b248 <__ieee754_sqrt+0xe8>
 800b220:	4290      	cmp	r0, r2
 800b222:	d811      	bhi.n	800b248 <__ieee754_sqrt+0xe8>
 800b224:	2800      	cmp	r0, #0
 800b226:	eb00 0e01 	add.w	lr, r0, r1
 800b22a:	da57      	bge.n	800b2dc <__ieee754_sqrt+0x17c>
 800b22c:	f1be 0f00 	cmp.w	lr, #0
 800b230:	db54      	blt.n	800b2dc <__ieee754_sqrt+0x17c>
 800b232:	f10c 0801 	add.w	r8, ip, #1
 800b236:	eba3 030c 	sub.w	r3, r3, ip
 800b23a:	4290      	cmp	r0, r2
 800b23c:	bf88      	it	hi
 800b23e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b242:	1a12      	subs	r2, r2, r0
 800b244:	440c      	add	r4, r1
 800b246:	46c4      	mov	ip, r8
 800b248:	005b      	lsls	r3, r3, #1
 800b24a:	3f01      	subs	r7, #1
 800b24c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800b250:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800b254:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800b258:	d1dd      	bne.n	800b216 <__ieee754_sqrt+0xb6>
 800b25a:	4313      	orrs	r3, r2
 800b25c:	d01b      	beq.n	800b296 <__ieee754_sqrt+0x136>
 800b25e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800b30c <__ieee754_sqrt+0x1ac>
 800b262:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800b310 <__ieee754_sqrt+0x1b0>
 800b266:	e9da 0100 	ldrd	r0, r1, [sl]
 800b26a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b26e:	f7f5 f82b 	bl	80002c8 <__aeabi_dsub>
 800b272:	e9da 8900 	ldrd	r8, r9, [sl]
 800b276:	4602      	mov	r2, r0
 800b278:	460b      	mov	r3, r1
 800b27a:	4640      	mov	r0, r8
 800b27c:	4649      	mov	r1, r9
 800b27e:	f7f5 fc57 	bl	8000b30 <__aeabi_dcmple>
 800b282:	b140      	cbz	r0, 800b296 <__ieee754_sqrt+0x136>
 800b284:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b288:	e9da 0100 	ldrd	r0, r1, [sl]
 800b28c:	e9db 2300 	ldrd	r2, r3, [fp]
 800b290:	d126      	bne.n	800b2e0 <__ieee754_sqrt+0x180>
 800b292:	3501      	adds	r5, #1
 800b294:	463c      	mov	r4, r7
 800b296:	106a      	asrs	r2, r5, #1
 800b298:	0863      	lsrs	r3, r4, #1
 800b29a:	07e9      	lsls	r1, r5, #31
 800b29c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800b2a0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800b2a4:	bf48      	it	mi
 800b2a6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800b2aa:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800b2ae:	461c      	mov	r4, r3
 800b2b0:	e76d      	b.n	800b18e <__ieee754_sqrt+0x2e>
 800b2b2:	0ad3      	lsrs	r3, r2, #11
 800b2b4:	3815      	subs	r0, #21
 800b2b6:	0552      	lsls	r2, r2, #21
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d0fa      	beq.n	800b2b2 <__ieee754_sqrt+0x152>
 800b2bc:	02dc      	lsls	r4, r3, #11
 800b2be:	d50a      	bpl.n	800b2d6 <__ieee754_sqrt+0x176>
 800b2c0:	f1c1 0420 	rsb	r4, r1, #32
 800b2c4:	fa22 f404 	lsr.w	r4, r2, r4
 800b2c8:	1e4d      	subs	r5, r1, #1
 800b2ca:	408a      	lsls	r2, r1
 800b2cc:	4323      	orrs	r3, r4
 800b2ce:	1b41      	subs	r1, r0, r5
 800b2d0:	e772      	b.n	800b1b8 <__ieee754_sqrt+0x58>
 800b2d2:	4608      	mov	r0, r1
 800b2d4:	e7f0      	b.n	800b2b8 <__ieee754_sqrt+0x158>
 800b2d6:	005b      	lsls	r3, r3, #1
 800b2d8:	3101      	adds	r1, #1
 800b2da:	e7ef      	b.n	800b2bc <__ieee754_sqrt+0x15c>
 800b2dc:	46e0      	mov	r8, ip
 800b2de:	e7aa      	b.n	800b236 <__ieee754_sqrt+0xd6>
 800b2e0:	f7f4 fff4 	bl	80002cc <__adddf3>
 800b2e4:	e9da 8900 	ldrd	r8, r9, [sl]
 800b2e8:	4602      	mov	r2, r0
 800b2ea:	460b      	mov	r3, r1
 800b2ec:	4640      	mov	r0, r8
 800b2ee:	4649      	mov	r1, r9
 800b2f0:	f7f5 fc14 	bl	8000b1c <__aeabi_dcmplt>
 800b2f4:	b120      	cbz	r0, 800b300 <__ieee754_sqrt+0x1a0>
 800b2f6:	1ca0      	adds	r0, r4, #2
 800b2f8:	bf08      	it	eq
 800b2fa:	3501      	addeq	r5, #1
 800b2fc:	3402      	adds	r4, #2
 800b2fe:	e7ca      	b.n	800b296 <__ieee754_sqrt+0x136>
 800b300:	3401      	adds	r4, #1
 800b302:	f024 0401 	bic.w	r4, r4, #1
 800b306:	e7c6      	b.n	800b296 <__ieee754_sqrt+0x136>
 800b308:	7ff00000 	.word	0x7ff00000
 800b30c:	20000210 	.word	0x20000210
 800b310:	20000218 	.word	0x20000218
 800b314:	00000000 	.word	0x00000000

0800b318 <__kernel_cos>:
 800b318:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31c:	ec57 6b10 	vmov	r6, r7, d0
 800b320:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b324:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b328:	ed8d 1b00 	vstr	d1, [sp]
 800b32c:	da07      	bge.n	800b33e <__kernel_cos+0x26>
 800b32e:	ee10 0a10 	vmov	r0, s0
 800b332:	4639      	mov	r1, r7
 800b334:	f7f5 fc30 	bl	8000b98 <__aeabi_d2iz>
 800b338:	2800      	cmp	r0, #0
 800b33a:	f000 8088 	beq.w	800b44e <__kernel_cos+0x136>
 800b33e:	4632      	mov	r2, r6
 800b340:	463b      	mov	r3, r7
 800b342:	4630      	mov	r0, r6
 800b344:	4639      	mov	r1, r7
 800b346:	f7f5 f977 	bl	8000638 <__aeabi_dmul>
 800b34a:	4b51      	ldr	r3, [pc, #324]	; (800b490 <__kernel_cos+0x178>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	4604      	mov	r4, r0
 800b350:	460d      	mov	r5, r1
 800b352:	f7f5 f971 	bl	8000638 <__aeabi_dmul>
 800b356:	a340      	add	r3, pc, #256	; (adr r3, 800b458 <__kernel_cos+0x140>)
 800b358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35c:	4682      	mov	sl, r0
 800b35e:	468b      	mov	fp, r1
 800b360:	4620      	mov	r0, r4
 800b362:	4629      	mov	r1, r5
 800b364:	f7f5 f968 	bl	8000638 <__aeabi_dmul>
 800b368:	a33d      	add	r3, pc, #244	; (adr r3, 800b460 <__kernel_cos+0x148>)
 800b36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b36e:	f7f4 ffad 	bl	80002cc <__adddf3>
 800b372:	4622      	mov	r2, r4
 800b374:	462b      	mov	r3, r5
 800b376:	f7f5 f95f 	bl	8000638 <__aeabi_dmul>
 800b37a:	a33b      	add	r3, pc, #236	; (adr r3, 800b468 <__kernel_cos+0x150>)
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	f7f4 ffa2 	bl	80002c8 <__aeabi_dsub>
 800b384:	4622      	mov	r2, r4
 800b386:	462b      	mov	r3, r5
 800b388:	f7f5 f956 	bl	8000638 <__aeabi_dmul>
 800b38c:	a338      	add	r3, pc, #224	; (adr r3, 800b470 <__kernel_cos+0x158>)
 800b38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b392:	f7f4 ff9b 	bl	80002cc <__adddf3>
 800b396:	4622      	mov	r2, r4
 800b398:	462b      	mov	r3, r5
 800b39a:	f7f5 f94d 	bl	8000638 <__aeabi_dmul>
 800b39e:	a336      	add	r3, pc, #216	; (adr r3, 800b478 <__kernel_cos+0x160>)
 800b3a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3a4:	f7f4 ff90 	bl	80002c8 <__aeabi_dsub>
 800b3a8:	4622      	mov	r2, r4
 800b3aa:	462b      	mov	r3, r5
 800b3ac:	f7f5 f944 	bl	8000638 <__aeabi_dmul>
 800b3b0:	a333      	add	r3, pc, #204	; (adr r3, 800b480 <__kernel_cos+0x168>)
 800b3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b6:	f7f4 ff89 	bl	80002cc <__adddf3>
 800b3ba:	4622      	mov	r2, r4
 800b3bc:	462b      	mov	r3, r5
 800b3be:	f7f5 f93b 	bl	8000638 <__aeabi_dmul>
 800b3c2:	4622      	mov	r2, r4
 800b3c4:	462b      	mov	r3, r5
 800b3c6:	f7f5 f937 	bl	8000638 <__aeabi_dmul>
 800b3ca:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	460d      	mov	r5, r1
 800b3d2:	4630      	mov	r0, r6
 800b3d4:	4639      	mov	r1, r7
 800b3d6:	f7f5 f92f 	bl	8000638 <__aeabi_dmul>
 800b3da:	460b      	mov	r3, r1
 800b3dc:	4602      	mov	r2, r0
 800b3de:	4629      	mov	r1, r5
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f7f4 ff71 	bl	80002c8 <__aeabi_dsub>
 800b3e6:	4b2b      	ldr	r3, [pc, #172]	; (800b494 <__kernel_cos+0x17c>)
 800b3e8:	4598      	cmp	r8, r3
 800b3ea:	4606      	mov	r6, r0
 800b3ec:	460f      	mov	r7, r1
 800b3ee:	dc10      	bgt.n	800b412 <__kernel_cos+0xfa>
 800b3f0:	4602      	mov	r2, r0
 800b3f2:	460b      	mov	r3, r1
 800b3f4:	4650      	mov	r0, sl
 800b3f6:	4659      	mov	r1, fp
 800b3f8:	f7f4 ff66 	bl	80002c8 <__aeabi_dsub>
 800b3fc:	460b      	mov	r3, r1
 800b3fe:	4926      	ldr	r1, [pc, #152]	; (800b498 <__kernel_cos+0x180>)
 800b400:	4602      	mov	r2, r0
 800b402:	2000      	movs	r0, #0
 800b404:	f7f4 ff60 	bl	80002c8 <__aeabi_dsub>
 800b408:	ec41 0b10 	vmov	d0, r0, r1
 800b40c:	b003      	add	sp, #12
 800b40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b412:	4b22      	ldr	r3, [pc, #136]	; (800b49c <__kernel_cos+0x184>)
 800b414:	4920      	ldr	r1, [pc, #128]	; (800b498 <__kernel_cos+0x180>)
 800b416:	4598      	cmp	r8, r3
 800b418:	bfcc      	ite	gt
 800b41a:	4d21      	ldrgt	r5, [pc, #132]	; (800b4a0 <__kernel_cos+0x188>)
 800b41c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b420:	2400      	movs	r4, #0
 800b422:	4622      	mov	r2, r4
 800b424:	462b      	mov	r3, r5
 800b426:	2000      	movs	r0, #0
 800b428:	f7f4 ff4e 	bl	80002c8 <__aeabi_dsub>
 800b42c:	4622      	mov	r2, r4
 800b42e:	4680      	mov	r8, r0
 800b430:	4689      	mov	r9, r1
 800b432:	462b      	mov	r3, r5
 800b434:	4650      	mov	r0, sl
 800b436:	4659      	mov	r1, fp
 800b438:	f7f4 ff46 	bl	80002c8 <__aeabi_dsub>
 800b43c:	4632      	mov	r2, r6
 800b43e:	463b      	mov	r3, r7
 800b440:	f7f4 ff42 	bl	80002c8 <__aeabi_dsub>
 800b444:	4602      	mov	r2, r0
 800b446:	460b      	mov	r3, r1
 800b448:	4640      	mov	r0, r8
 800b44a:	4649      	mov	r1, r9
 800b44c:	e7da      	b.n	800b404 <__kernel_cos+0xec>
 800b44e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b488 <__kernel_cos+0x170>
 800b452:	e7db      	b.n	800b40c <__kernel_cos+0xf4>
 800b454:	f3af 8000 	nop.w
 800b458:	be8838d4 	.word	0xbe8838d4
 800b45c:	bda8fae9 	.word	0xbda8fae9
 800b460:	bdb4b1c4 	.word	0xbdb4b1c4
 800b464:	3e21ee9e 	.word	0x3e21ee9e
 800b468:	809c52ad 	.word	0x809c52ad
 800b46c:	3e927e4f 	.word	0x3e927e4f
 800b470:	19cb1590 	.word	0x19cb1590
 800b474:	3efa01a0 	.word	0x3efa01a0
 800b478:	16c15177 	.word	0x16c15177
 800b47c:	3f56c16c 	.word	0x3f56c16c
 800b480:	5555554c 	.word	0x5555554c
 800b484:	3fa55555 	.word	0x3fa55555
 800b488:	00000000 	.word	0x00000000
 800b48c:	3ff00000 	.word	0x3ff00000
 800b490:	3fe00000 	.word	0x3fe00000
 800b494:	3fd33332 	.word	0x3fd33332
 800b498:	3ff00000 	.word	0x3ff00000
 800b49c:	3fe90000 	.word	0x3fe90000
 800b4a0:	3fd20000 	.word	0x3fd20000
 800b4a4:	00000000 	.word	0x00000000

0800b4a8 <__kernel_sin>:
 800b4a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4ac:	ed2d 8b04 	vpush	{d8-d9}
 800b4b0:	eeb0 8a41 	vmov.f32	s16, s2
 800b4b4:	eef0 8a61 	vmov.f32	s17, s3
 800b4b8:	ec55 4b10 	vmov	r4, r5, d0
 800b4bc:	b083      	sub	sp, #12
 800b4be:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800b4c2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800b4c6:	9001      	str	r0, [sp, #4]
 800b4c8:	da06      	bge.n	800b4d8 <__kernel_sin+0x30>
 800b4ca:	ee10 0a10 	vmov	r0, s0
 800b4ce:	4629      	mov	r1, r5
 800b4d0:	f7f5 fb62 	bl	8000b98 <__aeabi_d2iz>
 800b4d4:	2800      	cmp	r0, #0
 800b4d6:	d051      	beq.n	800b57c <__kernel_sin+0xd4>
 800b4d8:	4622      	mov	r2, r4
 800b4da:	462b      	mov	r3, r5
 800b4dc:	4620      	mov	r0, r4
 800b4de:	4629      	mov	r1, r5
 800b4e0:	f7f5 f8aa 	bl	8000638 <__aeabi_dmul>
 800b4e4:	4682      	mov	sl, r0
 800b4e6:	468b      	mov	fp, r1
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	460b      	mov	r3, r1
 800b4ec:	4620      	mov	r0, r4
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	f7f5 f8a2 	bl	8000638 <__aeabi_dmul>
 800b4f4:	a341      	add	r3, pc, #260	; (adr r3, 800b5fc <__kernel_sin+0x154>)
 800b4f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4fa:	4680      	mov	r8, r0
 800b4fc:	4689      	mov	r9, r1
 800b4fe:	4650      	mov	r0, sl
 800b500:	4659      	mov	r1, fp
 800b502:	f7f5 f899 	bl	8000638 <__aeabi_dmul>
 800b506:	a33f      	add	r3, pc, #252	; (adr r3, 800b604 <__kernel_sin+0x15c>)
 800b508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b50c:	f7f4 fedc 	bl	80002c8 <__aeabi_dsub>
 800b510:	4652      	mov	r2, sl
 800b512:	465b      	mov	r3, fp
 800b514:	f7f5 f890 	bl	8000638 <__aeabi_dmul>
 800b518:	a33c      	add	r3, pc, #240	; (adr r3, 800b60c <__kernel_sin+0x164>)
 800b51a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b51e:	f7f4 fed5 	bl	80002cc <__adddf3>
 800b522:	4652      	mov	r2, sl
 800b524:	465b      	mov	r3, fp
 800b526:	f7f5 f887 	bl	8000638 <__aeabi_dmul>
 800b52a:	a33a      	add	r3, pc, #232	; (adr r3, 800b614 <__kernel_sin+0x16c>)
 800b52c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b530:	f7f4 feca 	bl	80002c8 <__aeabi_dsub>
 800b534:	4652      	mov	r2, sl
 800b536:	465b      	mov	r3, fp
 800b538:	f7f5 f87e 	bl	8000638 <__aeabi_dmul>
 800b53c:	a337      	add	r3, pc, #220	; (adr r3, 800b61c <__kernel_sin+0x174>)
 800b53e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b542:	f7f4 fec3 	bl	80002cc <__adddf3>
 800b546:	9b01      	ldr	r3, [sp, #4]
 800b548:	4606      	mov	r6, r0
 800b54a:	460f      	mov	r7, r1
 800b54c:	b9eb      	cbnz	r3, 800b58a <__kernel_sin+0xe2>
 800b54e:	4602      	mov	r2, r0
 800b550:	460b      	mov	r3, r1
 800b552:	4650      	mov	r0, sl
 800b554:	4659      	mov	r1, fp
 800b556:	f7f5 f86f 	bl	8000638 <__aeabi_dmul>
 800b55a:	a325      	add	r3, pc, #148	; (adr r3, 800b5f0 <__kernel_sin+0x148>)
 800b55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b560:	f7f4 feb2 	bl	80002c8 <__aeabi_dsub>
 800b564:	4642      	mov	r2, r8
 800b566:	464b      	mov	r3, r9
 800b568:	f7f5 f866 	bl	8000638 <__aeabi_dmul>
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4620      	mov	r0, r4
 800b572:	4629      	mov	r1, r5
 800b574:	f7f4 feaa 	bl	80002cc <__adddf3>
 800b578:	4604      	mov	r4, r0
 800b57a:	460d      	mov	r5, r1
 800b57c:	ec45 4b10 	vmov	d0, r4, r5
 800b580:	b003      	add	sp, #12
 800b582:	ecbd 8b04 	vpop	{d8-d9}
 800b586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b58a:	4b1b      	ldr	r3, [pc, #108]	; (800b5f8 <__kernel_sin+0x150>)
 800b58c:	ec51 0b18 	vmov	r0, r1, d8
 800b590:	2200      	movs	r2, #0
 800b592:	f7f5 f851 	bl	8000638 <__aeabi_dmul>
 800b596:	4632      	mov	r2, r6
 800b598:	ec41 0b19 	vmov	d9, r0, r1
 800b59c:	463b      	mov	r3, r7
 800b59e:	4640      	mov	r0, r8
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	f7f5 f849 	bl	8000638 <__aeabi_dmul>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	ec51 0b19 	vmov	r0, r1, d9
 800b5ae:	f7f4 fe8b 	bl	80002c8 <__aeabi_dsub>
 800b5b2:	4652      	mov	r2, sl
 800b5b4:	465b      	mov	r3, fp
 800b5b6:	f7f5 f83f 	bl	8000638 <__aeabi_dmul>
 800b5ba:	ec53 2b18 	vmov	r2, r3, d8
 800b5be:	f7f4 fe83 	bl	80002c8 <__aeabi_dsub>
 800b5c2:	a30b      	add	r3, pc, #44	; (adr r3, 800b5f0 <__kernel_sin+0x148>)
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	4606      	mov	r6, r0
 800b5ca:	460f      	mov	r7, r1
 800b5cc:	4640      	mov	r0, r8
 800b5ce:	4649      	mov	r1, r9
 800b5d0:	f7f5 f832 	bl	8000638 <__aeabi_dmul>
 800b5d4:	4602      	mov	r2, r0
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	4630      	mov	r0, r6
 800b5da:	4639      	mov	r1, r7
 800b5dc:	f7f4 fe76 	bl	80002cc <__adddf3>
 800b5e0:	4602      	mov	r2, r0
 800b5e2:	460b      	mov	r3, r1
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	4629      	mov	r1, r5
 800b5e8:	f7f4 fe6e 	bl	80002c8 <__aeabi_dsub>
 800b5ec:	e7c4      	b.n	800b578 <__kernel_sin+0xd0>
 800b5ee:	bf00      	nop
 800b5f0:	55555549 	.word	0x55555549
 800b5f4:	3fc55555 	.word	0x3fc55555
 800b5f8:	3fe00000 	.word	0x3fe00000
 800b5fc:	5acfd57c 	.word	0x5acfd57c
 800b600:	3de5d93a 	.word	0x3de5d93a
 800b604:	8a2b9ceb 	.word	0x8a2b9ceb
 800b608:	3e5ae5e6 	.word	0x3e5ae5e6
 800b60c:	57b1fe7d 	.word	0x57b1fe7d
 800b610:	3ec71de3 	.word	0x3ec71de3
 800b614:	19c161d5 	.word	0x19c161d5
 800b618:	3f2a01a0 	.word	0x3f2a01a0
 800b61c:	1110f8a6 	.word	0x1110f8a6
 800b620:	3f811111 	.word	0x3f811111
 800b624:	00000000 	.word	0x00000000

0800b628 <__ieee754_rem_pio2>:
 800b628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b62c:	ed2d 8b02 	vpush	{d8}
 800b630:	ec55 4b10 	vmov	r4, r5, d0
 800b634:	4bca      	ldr	r3, [pc, #808]	; (800b960 <__ieee754_rem_pio2+0x338>)
 800b636:	b08b      	sub	sp, #44	; 0x2c
 800b638:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b63c:	4598      	cmp	r8, r3
 800b63e:	4682      	mov	sl, r0
 800b640:	9502      	str	r5, [sp, #8]
 800b642:	dc08      	bgt.n	800b656 <__ieee754_rem_pio2+0x2e>
 800b644:	2200      	movs	r2, #0
 800b646:	2300      	movs	r3, #0
 800b648:	ed80 0b00 	vstr	d0, [r0]
 800b64c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b650:	f04f 0b00 	mov.w	fp, #0
 800b654:	e028      	b.n	800b6a8 <__ieee754_rem_pio2+0x80>
 800b656:	4bc3      	ldr	r3, [pc, #780]	; (800b964 <__ieee754_rem_pio2+0x33c>)
 800b658:	4598      	cmp	r8, r3
 800b65a:	dc78      	bgt.n	800b74e <__ieee754_rem_pio2+0x126>
 800b65c:	9b02      	ldr	r3, [sp, #8]
 800b65e:	4ec2      	ldr	r6, [pc, #776]	; (800b968 <__ieee754_rem_pio2+0x340>)
 800b660:	2b00      	cmp	r3, #0
 800b662:	ee10 0a10 	vmov	r0, s0
 800b666:	a3b0      	add	r3, pc, #704	; (adr r3, 800b928 <__ieee754_rem_pio2+0x300>)
 800b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66c:	4629      	mov	r1, r5
 800b66e:	dd39      	ble.n	800b6e4 <__ieee754_rem_pio2+0xbc>
 800b670:	f7f4 fe2a 	bl	80002c8 <__aeabi_dsub>
 800b674:	45b0      	cmp	r8, r6
 800b676:	4604      	mov	r4, r0
 800b678:	460d      	mov	r5, r1
 800b67a:	d01b      	beq.n	800b6b4 <__ieee754_rem_pio2+0x8c>
 800b67c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b930 <__ieee754_rem_pio2+0x308>)
 800b67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b682:	f7f4 fe21 	bl	80002c8 <__aeabi_dsub>
 800b686:	4602      	mov	r2, r0
 800b688:	460b      	mov	r3, r1
 800b68a:	e9ca 2300 	strd	r2, r3, [sl]
 800b68e:	4620      	mov	r0, r4
 800b690:	4629      	mov	r1, r5
 800b692:	f7f4 fe19 	bl	80002c8 <__aeabi_dsub>
 800b696:	a3a6      	add	r3, pc, #664	; (adr r3, 800b930 <__ieee754_rem_pio2+0x308>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	f7f4 fe14 	bl	80002c8 <__aeabi_dsub>
 800b6a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b6a4:	f04f 0b01 	mov.w	fp, #1
 800b6a8:	4658      	mov	r0, fp
 800b6aa:	b00b      	add	sp, #44	; 0x2c
 800b6ac:	ecbd 8b02 	vpop	{d8}
 800b6b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6b4:	a3a0      	add	r3, pc, #640	; (adr r3, 800b938 <__ieee754_rem_pio2+0x310>)
 800b6b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ba:	f7f4 fe05 	bl	80002c8 <__aeabi_dsub>
 800b6be:	a3a0      	add	r3, pc, #640	; (adr r3, 800b940 <__ieee754_rem_pio2+0x318>)
 800b6c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6c4:	4604      	mov	r4, r0
 800b6c6:	460d      	mov	r5, r1
 800b6c8:	f7f4 fdfe 	bl	80002c8 <__aeabi_dsub>
 800b6cc:	4602      	mov	r2, r0
 800b6ce:	460b      	mov	r3, r1
 800b6d0:	e9ca 2300 	strd	r2, r3, [sl]
 800b6d4:	4620      	mov	r0, r4
 800b6d6:	4629      	mov	r1, r5
 800b6d8:	f7f4 fdf6 	bl	80002c8 <__aeabi_dsub>
 800b6dc:	a398      	add	r3, pc, #608	; (adr r3, 800b940 <__ieee754_rem_pio2+0x318>)
 800b6de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6e2:	e7db      	b.n	800b69c <__ieee754_rem_pio2+0x74>
 800b6e4:	f7f4 fdf2 	bl	80002cc <__adddf3>
 800b6e8:	45b0      	cmp	r8, r6
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	460d      	mov	r5, r1
 800b6ee:	d016      	beq.n	800b71e <__ieee754_rem_pio2+0xf6>
 800b6f0:	a38f      	add	r3, pc, #572	; (adr r3, 800b930 <__ieee754_rem_pio2+0x308>)
 800b6f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f6:	f7f4 fde9 	bl	80002cc <__adddf3>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	e9ca 2300 	strd	r2, r3, [sl]
 800b702:	4620      	mov	r0, r4
 800b704:	4629      	mov	r1, r5
 800b706:	f7f4 fddf 	bl	80002c8 <__aeabi_dsub>
 800b70a:	a389      	add	r3, pc, #548	; (adr r3, 800b930 <__ieee754_rem_pio2+0x308>)
 800b70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b710:	f7f4 fddc 	bl	80002cc <__adddf3>
 800b714:	f04f 3bff 	mov.w	fp, #4294967295
 800b718:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b71c:	e7c4      	b.n	800b6a8 <__ieee754_rem_pio2+0x80>
 800b71e:	a386      	add	r3, pc, #536	; (adr r3, 800b938 <__ieee754_rem_pio2+0x310>)
 800b720:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b724:	f7f4 fdd2 	bl	80002cc <__adddf3>
 800b728:	a385      	add	r3, pc, #532	; (adr r3, 800b940 <__ieee754_rem_pio2+0x318>)
 800b72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72e:	4604      	mov	r4, r0
 800b730:	460d      	mov	r5, r1
 800b732:	f7f4 fdcb 	bl	80002cc <__adddf3>
 800b736:	4602      	mov	r2, r0
 800b738:	460b      	mov	r3, r1
 800b73a:	e9ca 2300 	strd	r2, r3, [sl]
 800b73e:	4620      	mov	r0, r4
 800b740:	4629      	mov	r1, r5
 800b742:	f7f4 fdc1 	bl	80002c8 <__aeabi_dsub>
 800b746:	a37e      	add	r3, pc, #504	; (adr r3, 800b940 <__ieee754_rem_pio2+0x318>)
 800b748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b74c:	e7e0      	b.n	800b710 <__ieee754_rem_pio2+0xe8>
 800b74e:	4b87      	ldr	r3, [pc, #540]	; (800b96c <__ieee754_rem_pio2+0x344>)
 800b750:	4598      	cmp	r8, r3
 800b752:	f300 80d8 	bgt.w	800b906 <__ieee754_rem_pio2+0x2de>
 800b756:	f000 f96d 	bl	800ba34 <fabs>
 800b75a:	ec55 4b10 	vmov	r4, r5, d0
 800b75e:	ee10 0a10 	vmov	r0, s0
 800b762:	a379      	add	r3, pc, #484	; (adr r3, 800b948 <__ieee754_rem_pio2+0x320>)
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	4629      	mov	r1, r5
 800b76a:	f7f4 ff65 	bl	8000638 <__aeabi_dmul>
 800b76e:	4b80      	ldr	r3, [pc, #512]	; (800b970 <__ieee754_rem_pio2+0x348>)
 800b770:	2200      	movs	r2, #0
 800b772:	f7f4 fdab 	bl	80002cc <__adddf3>
 800b776:	f7f5 fa0f 	bl	8000b98 <__aeabi_d2iz>
 800b77a:	4683      	mov	fp, r0
 800b77c:	f7f4 fef2 	bl	8000564 <__aeabi_i2d>
 800b780:	4602      	mov	r2, r0
 800b782:	460b      	mov	r3, r1
 800b784:	ec43 2b18 	vmov	d8, r2, r3
 800b788:	a367      	add	r3, pc, #412	; (adr r3, 800b928 <__ieee754_rem_pio2+0x300>)
 800b78a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b78e:	f7f4 ff53 	bl	8000638 <__aeabi_dmul>
 800b792:	4602      	mov	r2, r0
 800b794:	460b      	mov	r3, r1
 800b796:	4620      	mov	r0, r4
 800b798:	4629      	mov	r1, r5
 800b79a:	f7f4 fd95 	bl	80002c8 <__aeabi_dsub>
 800b79e:	a364      	add	r3, pc, #400	; (adr r3, 800b930 <__ieee754_rem_pio2+0x308>)
 800b7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a4:	4606      	mov	r6, r0
 800b7a6:	460f      	mov	r7, r1
 800b7a8:	ec51 0b18 	vmov	r0, r1, d8
 800b7ac:	f7f4 ff44 	bl	8000638 <__aeabi_dmul>
 800b7b0:	f1bb 0f1f 	cmp.w	fp, #31
 800b7b4:	4604      	mov	r4, r0
 800b7b6:	460d      	mov	r5, r1
 800b7b8:	dc0d      	bgt.n	800b7d6 <__ieee754_rem_pio2+0x1ae>
 800b7ba:	4b6e      	ldr	r3, [pc, #440]	; (800b974 <__ieee754_rem_pio2+0x34c>)
 800b7bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c4:	4543      	cmp	r3, r8
 800b7c6:	d006      	beq.n	800b7d6 <__ieee754_rem_pio2+0x1ae>
 800b7c8:	4622      	mov	r2, r4
 800b7ca:	462b      	mov	r3, r5
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	4639      	mov	r1, r7
 800b7d0:	f7f4 fd7a 	bl	80002c8 <__aeabi_dsub>
 800b7d4:	e00e      	b.n	800b7f4 <__ieee754_rem_pio2+0x1cc>
 800b7d6:	462b      	mov	r3, r5
 800b7d8:	4622      	mov	r2, r4
 800b7da:	4630      	mov	r0, r6
 800b7dc:	4639      	mov	r1, r7
 800b7de:	f7f4 fd73 	bl	80002c8 <__aeabi_dsub>
 800b7e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b7e6:	9303      	str	r3, [sp, #12]
 800b7e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b7ec:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b7f0:	2b10      	cmp	r3, #16
 800b7f2:	dc02      	bgt.n	800b7fa <__ieee754_rem_pio2+0x1d2>
 800b7f4:	e9ca 0100 	strd	r0, r1, [sl]
 800b7f8:	e039      	b.n	800b86e <__ieee754_rem_pio2+0x246>
 800b7fa:	a34f      	add	r3, pc, #316	; (adr r3, 800b938 <__ieee754_rem_pio2+0x310>)
 800b7fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b800:	ec51 0b18 	vmov	r0, r1, d8
 800b804:	f7f4 ff18 	bl	8000638 <__aeabi_dmul>
 800b808:	4604      	mov	r4, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	4602      	mov	r2, r0
 800b80e:	460b      	mov	r3, r1
 800b810:	4630      	mov	r0, r6
 800b812:	4639      	mov	r1, r7
 800b814:	f7f4 fd58 	bl	80002c8 <__aeabi_dsub>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	4680      	mov	r8, r0
 800b81e:	4689      	mov	r9, r1
 800b820:	4630      	mov	r0, r6
 800b822:	4639      	mov	r1, r7
 800b824:	f7f4 fd50 	bl	80002c8 <__aeabi_dsub>
 800b828:	4622      	mov	r2, r4
 800b82a:	462b      	mov	r3, r5
 800b82c:	f7f4 fd4c 	bl	80002c8 <__aeabi_dsub>
 800b830:	a343      	add	r3, pc, #268	; (adr r3, 800b940 <__ieee754_rem_pio2+0x318>)
 800b832:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b836:	4604      	mov	r4, r0
 800b838:	460d      	mov	r5, r1
 800b83a:	ec51 0b18 	vmov	r0, r1, d8
 800b83e:	f7f4 fefb 	bl	8000638 <__aeabi_dmul>
 800b842:	4622      	mov	r2, r4
 800b844:	462b      	mov	r3, r5
 800b846:	f7f4 fd3f 	bl	80002c8 <__aeabi_dsub>
 800b84a:	4602      	mov	r2, r0
 800b84c:	460b      	mov	r3, r1
 800b84e:	4604      	mov	r4, r0
 800b850:	460d      	mov	r5, r1
 800b852:	4640      	mov	r0, r8
 800b854:	4649      	mov	r1, r9
 800b856:	f7f4 fd37 	bl	80002c8 <__aeabi_dsub>
 800b85a:	9a03      	ldr	r2, [sp, #12]
 800b85c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	2b31      	cmp	r3, #49	; 0x31
 800b864:	dc24      	bgt.n	800b8b0 <__ieee754_rem_pio2+0x288>
 800b866:	e9ca 0100 	strd	r0, r1, [sl]
 800b86a:	4646      	mov	r6, r8
 800b86c:	464f      	mov	r7, r9
 800b86e:	e9da 8900 	ldrd	r8, r9, [sl]
 800b872:	4630      	mov	r0, r6
 800b874:	4642      	mov	r2, r8
 800b876:	464b      	mov	r3, r9
 800b878:	4639      	mov	r1, r7
 800b87a:	f7f4 fd25 	bl	80002c8 <__aeabi_dsub>
 800b87e:	462b      	mov	r3, r5
 800b880:	4622      	mov	r2, r4
 800b882:	f7f4 fd21 	bl	80002c8 <__aeabi_dsub>
 800b886:	9b02      	ldr	r3, [sp, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b88e:	f6bf af0b 	bge.w	800b6a8 <__ieee754_rem_pio2+0x80>
 800b892:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b896:	f8ca 3004 	str.w	r3, [sl, #4]
 800b89a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b89e:	f8ca 8000 	str.w	r8, [sl]
 800b8a2:	f8ca 0008 	str.w	r0, [sl, #8]
 800b8a6:	f8ca 300c 	str.w	r3, [sl, #12]
 800b8aa:	f1cb 0b00 	rsb	fp, fp, #0
 800b8ae:	e6fb      	b.n	800b6a8 <__ieee754_rem_pio2+0x80>
 800b8b0:	a327      	add	r3, pc, #156	; (adr r3, 800b950 <__ieee754_rem_pio2+0x328>)
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	ec51 0b18 	vmov	r0, r1, d8
 800b8ba:	f7f4 febd 	bl	8000638 <__aeabi_dmul>
 800b8be:	4604      	mov	r4, r0
 800b8c0:	460d      	mov	r5, r1
 800b8c2:	4602      	mov	r2, r0
 800b8c4:	460b      	mov	r3, r1
 800b8c6:	4640      	mov	r0, r8
 800b8c8:	4649      	mov	r1, r9
 800b8ca:	f7f4 fcfd 	bl	80002c8 <__aeabi_dsub>
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	460b      	mov	r3, r1
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460f      	mov	r7, r1
 800b8d6:	4640      	mov	r0, r8
 800b8d8:	4649      	mov	r1, r9
 800b8da:	f7f4 fcf5 	bl	80002c8 <__aeabi_dsub>
 800b8de:	4622      	mov	r2, r4
 800b8e0:	462b      	mov	r3, r5
 800b8e2:	f7f4 fcf1 	bl	80002c8 <__aeabi_dsub>
 800b8e6:	a31c      	add	r3, pc, #112	; (adr r3, 800b958 <__ieee754_rem_pio2+0x330>)
 800b8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	460d      	mov	r5, r1
 800b8f0:	ec51 0b18 	vmov	r0, r1, d8
 800b8f4:	f7f4 fea0 	bl	8000638 <__aeabi_dmul>
 800b8f8:	4622      	mov	r2, r4
 800b8fa:	462b      	mov	r3, r5
 800b8fc:	f7f4 fce4 	bl	80002c8 <__aeabi_dsub>
 800b900:	4604      	mov	r4, r0
 800b902:	460d      	mov	r5, r1
 800b904:	e760      	b.n	800b7c8 <__ieee754_rem_pio2+0x1a0>
 800b906:	4b1c      	ldr	r3, [pc, #112]	; (800b978 <__ieee754_rem_pio2+0x350>)
 800b908:	4598      	cmp	r8, r3
 800b90a:	dd37      	ble.n	800b97c <__ieee754_rem_pio2+0x354>
 800b90c:	ee10 2a10 	vmov	r2, s0
 800b910:	462b      	mov	r3, r5
 800b912:	4620      	mov	r0, r4
 800b914:	4629      	mov	r1, r5
 800b916:	f7f4 fcd7 	bl	80002c8 <__aeabi_dsub>
 800b91a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b91e:	e9ca 0100 	strd	r0, r1, [sl]
 800b922:	e695      	b.n	800b650 <__ieee754_rem_pio2+0x28>
 800b924:	f3af 8000 	nop.w
 800b928:	54400000 	.word	0x54400000
 800b92c:	3ff921fb 	.word	0x3ff921fb
 800b930:	1a626331 	.word	0x1a626331
 800b934:	3dd0b461 	.word	0x3dd0b461
 800b938:	1a600000 	.word	0x1a600000
 800b93c:	3dd0b461 	.word	0x3dd0b461
 800b940:	2e037073 	.word	0x2e037073
 800b944:	3ba3198a 	.word	0x3ba3198a
 800b948:	6dc9c883 	.word	0x6dc9c883
 800b94c:	3fe45f30 	.word	0x3fe45f30
 800b950:	2e000000 	.word	0x2e000000
 800b954:	3ba3198a 	.word	0x3ba3198a
 800b958:	252049c1 	.word	0x252049c1
 800b95c:	397b839a 	.word	0x397b839a
 800b960:	3fe921fb 	.word	0x3fe921fb
 800b964:	4002d97b 	.word	0x4002d97b
 800b968:	3ff921fb 	.word	0x3ff921fb
 800b96c:	413921fb 	.word	0x413921fb
 800b970:	3fe00000 	.word	0x3fe00000
 800b974:	0800c774 	.word	0x0800c774
 800b978:	7fefffff 	.word	0x7fefffff
 800b97c:	ea4f 5628 	mov.w	r6, r8, asr #20
 800b980:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800b984:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 800b988:	4620      	mov	r0, r4
 800b98a:	460d      	mov	r5, r1
 800b98c:	f7f5 f904 	bl	8000b98 <__aeabi_d2iz>
 800b990:	f7f4 fde8 	bl	8000564 <__aeabi_i2d>
 800b994:	4602      	mov	r2, r0
 800b996:	460b      	mov	r3, r1
 800b998:	4620      	mov	r0, r4
 800b99a:	4629      	mov	r1, r5
 800b99c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b9a0:	f7f4 fc92 	bl	80002c8 <__aeabi_dsub>
 800b9a4:	4b21      	ldr	r3, [pc, #132]	; (800ba2c <__ieee754_rem_pio2+0x404>)
 800b9a6:	2200      	movs	r2, #0
 800b9a8:	f7f4 fe46 	bl	8000638 <__aeabi_dmul>
 800b9ac:	460d      	mov	r5, r1
 800b9ae:	4604      	mov	r4, r0
 800b9b0:	f7f5 f8f2 	bl	8000b98 <__aeabi_d2iz>
 800b9b4:	f7f4 fdd6 	bl	8000564 <__aeabi_i2d>
 800b9b8:	4602      	mov	r2, r0
 800b9ba:	460b      	mov	r3, r1
 800b9bc:	4620      	mov	r0, r4
 800b9be:	4629      	mov	r1, r5
 800b9c0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b9c4:	f7f4 fc80 	bl	80002c8 <__aeabi_dsub>
 800b9c8:	4b18      	ldr	r3, [pc, #96]	; (800ba2c <__ieee754_rem_pio2+0x404>)
 800b9ca:	2200      	movs	r2, #0
 800b9cc:	f7f4 fe34 	bl	8000638 <__aeabi_dmul>
 800b9d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b9d4:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800b9d8:	2703      	movs	r7, #3
 800b9da:	2400      	movs	r4, #0
 800b9dc:	2500      	movs	r5, #0
 800b9de:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 800b9e2:	4622      	mov	r2, r4
 800b9e4:	462b      	mov	r3, r5
 800b9e6:	46b9      	mov	r9, r7
 800b9e8:	3f01      	subs	r7, #1
 800b9ea:	f7f5 f88d 	bl	8000b08 <__aeabi_dcmpeq>
 800b9ee:	2800      	cmp	r0, #0
 800b9f0:	d1f5      	bne.n	800b9de <__ieee754_rem_pio2+0x3b6>
 800b9f2:	4b0f      	ldr	r3, [pc, #60]	; (800ba30 <__ieee754_rem_pio2+0x408>)
 800b9f4:	9301      	str	r3, [sp, #4]
 800b9f6:	2302      	movs	r3, #2
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	4632      	mov	r2, r6
 800b9fc:	464b      	mov	r3, r9
 800b9fe:	4651      	mov	r1, sl
 800ba00:	a804      	add	r0, sp, #16
 800ba02:	f000 f821 	bl	800ba48 <__kernel_rem_pio2>
 800ba06:	9b02      	ldr	r3, [sp, #8]
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	4683      	mov	fp, r0
 800ba0c:	f6bf ae4c 	bge.w	800b6a8 <__ieee754_rem_pio2+0x80>
 800ba10:	e9da 2100 	ldrd	r2, r1, [sl]
 800ba14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba18:	e9ca 2300 	strd	r2, r3, [sl]
 800ba1c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ba20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ba24:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ba28:	e73f      	b.n	800b8aa <__ieee754_rem_pio2+0x282>
 800ba2a:	bf00      	nop
 800ba2c:	41700000 	.word	0x41700000
 800ba30:	0800c7f4 	.word	0x0800c7f4

0800ba34 <fabs>:
 800ba34:	ec51 0b10 	vmov	r0, r1, d0
 800ba38:	ee10 2a10 	vmov	r2, s0
 800ba3c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800ba40:	ec43 2b10 	vmov	d0, r2, r3
 800ba44:	4770      	bx	lr
	...

0800ba48 <__kernel_rem_pio2>:
 800ba48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba4c:	ed2d 8b02 	vpush	{d8}
 800ba50:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800ba54:	f112 0f14 	cmn.w	r2, #20
 800ba58:	9306      	str	r3, [sp, #24]
 800ba5a:	9104      	str	r1, [sp, #16]
 800ba5c:	4bc2      	ldr	r3, [pc, #776]	; (800bd68 <__kernel_rem_pio2+0x320>)
 800ba5e:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800ba60:	9009      	str	r0, [sp, #36]	; 0x24
 800ba62:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ba66:	9300      	str	r3, [sp, #0]
 800ba68:	9b06      	ldr	r3, [sp, #24]
 800ba6a:	f103 33ff 	add.w	r3, r3, #4294967295
 800ba6e:	bfa8      	it	ge
 800ba70:	1ed4      	subge	r4, r2, #3
 800ba72:	9305      	str	r3, [sp, #20]
 800ba74:	bfb2      	itee	lt
 800ba76:	2400      	movlt	r4, #0
 800ba78:	2318      	movge	r3, #24
 800ba7a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ba7e:	f06f 0317 	mvn.w	r3, #23
 800ba82:	fb04 3303 	mla	r3, r4, r3, r3
 800ba86:	eb03 0a02 	add.w	sl, r3, r2
 800ba8a:	9b00      	ldr	r3, [sp, #0]
 800ba8c:	9a05      	ldr	r2, [sp, #20]
 800ba8e:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 800bd58 <__kernel_rem_pio2+0x310>
 800ba92:	eb03 0802 	add.w	r8, r3, r2
 800ba96:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800ba98:	1aa7      	subs	r7, r4, r2
 800ba9a:	ae20      	add	r6, sp, #128	; 0x80
 800ba9c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800baa0:	2500      	movs	r5, #0
 800baa2:	4545      	cmp	r5, r8
 800baa4:	dd13      	ble.n	800bace <__kernel_rem_pio2+0x86>
 800baa6:	9b06      	ldr	r3, [sp, #24]
 800baa8:	aa20      	add	r2, sp, #128	; 0x80
 800baaa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800baae:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800bab2:	f04f 0800 	mov.w	r8, #0
 800bab6:	9b00      	ldr	r3, [sp, #0]
 800bab8:	4598      	cmp	r8, r3
 800baba:	dc31      	bgt.n	800bb20 <__kernel_rem_pio2+0xd8>
 800babc:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 800bd58 <__kernel_rem_pio2+0x310>
 800bac0:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800bac4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bac8:	462f      	mov	r7, r5
 800baca:	2600      	movs	r6, #0
 800bacc:	e01b      	b.n	800bb06 <__kernel_rem_pio2+0xbe>
 800bace:	42ef      	cmn	r7, r5
 800bad0:	d407      	bmi.n	800bae2 <__kernel_rem_pio2+0x9a>
 800bad2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800bad6:	f7f4 fd45 	bl	8000564 <__aeabi_i2d>
 800bada:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bade:	3501      	adds	r5, #1
 800bae0:	e7df      	b.n	800baa2 <__kernel_rem_pio2+0x5a>
 800bae2:	ec51 0b18 	vmov	r0, r1, d8
 800bae6:	e7f8      	b.n	800bada <__kernel_rem_pio2+0x92>
 800bae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800baec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800baf0:	f7f4 fda2 	bl	8000638 <__aeabi_dmul>
 800baf4:	4602      	mov	r2, r0
 800baf6:	460b      	mov	r3, r1
 800baf8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bafc:	f7f4 fbe6 	bl	80002cc <__adddf3>
 800bb00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb04:	3601      	adds	r6, #1
 800bb06:	9b05      	ldr	r3, [sp, #20]
 800bb08:	429e      	cmp	r6, r3
 800bb0a:	f1a7 0708 	sub.w	r7, r7, #8
 800bb0e:	ddeb      	ble.n	800bae8 <__kernel_rem_pio2+0xa0>
 800bb10:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bb14:	f108 0801 	add.w	r8, r8, #1
 800bb18:	ecab 7b02 	vstmia	fp!, {d7}
 800bb1c:	3508      	adds	r5, #8
 800bb1e:	e7ca      	b.n	800bab6 <__kernel_rem_pio2+0x6e>
 800bb20:	9b00      	ldr	r3, [sp, #0]
 800bb22:	aa0c      	add	r2, sp, #48	; 0x30
 800bb24:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bb28:	930b      	str	r3, [sp, #44]	; 0x2c
 800bb2a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800bb2c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bb30:	9c00      	ldr	r4, [sp, #0]
 800bb32:	930a      	str	r3, [sp, #40]	; 0x28
 800bb34:	00e3      	lsls	r3, r4, #3
 800bb36:	9308      	str	r3, [sp, #32]
 800bb38:	ab98      	add	r3, sp, #608	; 0x260
 800bb3a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bb3e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bb42:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 800bb46:	ab70      	add	r3, sp, #448	; 0x1c0
 800bb48:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800bb4c:	46c3      	mov	fp, r8
 800bb4e:	46a1      	mov	r9, r4
 800bb50:	f1b9 0f00 	cmp.w	r9, #0
 800bb54:	f1a5 0508 	sub.w	r5, r5, #8
 800bb58:	dc77      	bgt.n	800bc4a <__kernel_rem_pio2+0x202>
 800bb5a:	ec47 6b10 	vmov	d0, r6, r7
 800bb5e:	4650      	mov	r0, sl
 800bb60:	f000 fac2 	bl	800c0e8 <scalbn>
 800bb64:	ec57 6b10 	vmov	r6, r7, d0
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bb6e:	ee10 0a10 	vmov	r0, s0
 800bb72:	4639      	mov	r1, r7
 800bb74:	f7f4 fd60 	bl	8000638 <__aeabi_dmul>
 800bb78:	ec41 0b10 	vmov	d0, r0, r1
 800bb7c:	f000 fb34 	bl	800c1e8 <floor>
 800bb80:	4b7a      	ldr	r3, [pc, #488]	; (800bd6c <__kernel_rem_pio2+0x324>)
 800bb82:	ec51 0b10 	vmov	r0, r1, d0
 800bb86:	2200      	movs	r2, #0
 800bb88:	f7f4 fd56 	bl	8000638 <__aeabi_dmul>
 800bb8c:	4602      	mov	r2, r0
 800bb8e:	460b      	mov	r3, r1
 800bb90:	4630      	mov	r0, r6
 800bb92:	4639      	mov	r1, r7
 800bb94:	f7f4 fb98 	bl	80002c8 <__aeabi_dsub>
 800bb98:	460f      	mov	r7, r1
 800bb9a:	4606      	mov	r6, r0
 800bb9c:	f7f4 fffc 	bl	8000b98 <__aeabi_d2iz>
 800bba0:	9002      	str	r0, [sp, #8]
 800bba2:	f7f4 fcdf 	bl	8000564 <__aeabi_i2d>
 800bba6:	4602      	mov	r2, r0
 800bba8:	460b      	mov	r3, r1
 800bbaa:	4630      	mov	r0, r6
 800bbac:	4639      	mov	r1, r7
 800bbae:	f7f4 fb8b 	bl	80002c8 <__aeabi_dsub>
 800bbb2:	f1ba 0f00 	cmp.w	sl, #0
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	460f      	mov	r7, r1
 800bbba:	dd6d      	ble.n	800bc98 <__kernel_rem_pio2+0x250>
 800bbbc:	1e61      	subs	r1, r4, #1
 800bbbe:	ab0c      	add	r3, sp, #48	; 0x30
 800bbc0:	9d02      	ldr	r5, [sp, #8]
 800bbc2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bbc6:	f1ca 0018 	rsb	r0, sl, #24
 800bbca:	fa43 f200 	asr.w	r2, r3, r0
 800bbce:	4415      	add	r5, r2
 800bbd0:	4082      	lsls	r2, r0
 800bbd2:	1a9b      	subs	r3, r3, r2
 800bbd4:	aa0c      	add	r2, sp, #48	; 0x30
 800bbd6:	9502      	str	r5, [sp, #8]
 800bbd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800bbdc:	f1ca 0217 	rsb	r2, sl, #23
 800bbe0:	fa43 fb02 	asr.w	fp, r3, r2
 800bbe4:	f1bb 0f00 	cmp.w	fp, #0
 800bbe8:	dd65      	ble.n	800bcb6 <__kernel_rem_pio2+0x26e>
 800bbea:	9b02      	ldr	r3, [sp, #8]
 800bbec:	2200      	movs	r2, #0
 800bbee:	3301      	adds	r3, #1
 800bbf0:	9302      	str	r3, [sp, #8]
 800bbf2:	4615      	mov	r5, r2
 800bbf4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bbf8:	4294      	cmp	r4, r2
 800bbfa:	f300 809f 	bgt.w	800bd3c <__kernel_rem_pio2+0x2f4>
 800bbfe:	f1ba 0f00 	cmp.w	sl, #0
 800bc02:	dd07      	ble.n	800bc14 <__kernel_rem_pio2+0x1cc>
 800bc04:	f1ba 0f01 	cmp.w	sl, #1
 800bc08:	f000 80c1 	beq.w	800bd8e <__kernel_rem_pio2+0x346>
 800bc0c:	f1ba 0f02 	cmp.w	sl, #2
 800bc10:	f000 80c7 	beq.w	800bda2 <__kernel_rem_pio2+0x35a>
 800bc14:	f1bb 0f02 	cmp.w	fp, #2
 800bc18:	d14d      	bne.n	800bcb6 <__kernel_rem_pio2+0x26e>
 800bc1a:	4632      	mov	r2, r6
 800bc1c:	463b      	mov	r3, r7
 800bc1e:	4954      	ldr	r1, [pc, #336]	; (800bd70 <__kernel_rem_pio2+0x328>)
 800bc20:	2000      	movs	r0, #0
 800bc22:	f7f4 fb51 	bl	80002c8 <__aeabi_dsub>
 800bc26:	4606      	mov	r6, r0
 800bc28:	460f      	mov	r7, r1
 800bc2a:	2d00      	cmp	r5, #0
 800bc2c:	d043      	beq.n	800bcb6 <__kernel_rem_pio2+0x26e>
 800bc2e:	4650      	mov	r0, sl
 800bc30:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 800bd60 <__kernel_rem_pio2+0x318>
 800bc34:	f000 fa58 	bl	800c0e8 <scalbn>
 800bc38:	4630      	mov	r0, r6
 800bc3a:	4639      	mov	r1, r7
 800bc3c:	ec53 2b10 	vmov	r2, r3, d0
 800bc40:	f7f4 fb42 	bl	80002c8 <__aeabi_dsub>
 800bc44:	4606      	mov	r6, r0
 800bc46:	460f      	mov	r7, r1
 800bc48:	e035      	b.n	800bcb6 <__kernel_rem_pio2+0x26e>
 800bc4a:	4b4a      	ldr	r3, [pc, #296]	; (800bd74 <__kernel_rem_pio2+0x32c>)
 800bc4c:	2200      	movs	r2, #0
 800bc4e:	4630      	mov	r0, r6
 800bc50:	4639      	mov	r1, r7
 800bc52:	f7f4 fcf1 	bl	8000638 <__aeabi_dmul>
 800bc56:	f7f4 ff9f 	bl	8000b98 <__aeabi_d2iz>
 800bc5a:	f7f4 fc83 	bl	8000564 <__aeabi_i2d>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	460b      	mov	r3, r1
 800bc62:	ec43 2b18 	vmov	d8, r2, r3
 800bc66:	4b44      	ldr	r3, [pc, #272]	; (800bd78 <__kernel_rem_pio2+0x330>)
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f7f4 fce5 	bl	8000638 <__aeabi_dmul>
 800bc6e:	4602      	mov	r2, r0
 800bc70:	460b      	mov	r3, r1
 800bc72:	4630      	mov	r0, r6
 800bc74:	4639      	mov	r1, r7
 800bc76:	f7f4 fb27 	bl	80002c8 <__aeabi_dsub>
 800bc7a:	f7f4 ff8d 	bl	8000b98 <__aeabi_d2iz>
 800bc7e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc82:	f84b 0b04 	str.w	r0, [fp], #4
 800bc86:	ec51 0b18 	vmov	r0, r1, d8
 800bc8a:	f7f4 fb1f 	bl	80002cc <__adddf3>
 800bc8e:	f109 39ff 	add.w	r9, r9, #4294967295
 800bc92:	4606      	mov	r6, r0
 800bc94:	460f      	mov	r7, r1
 800bc96:	e75b      	b.n	800bb50 <__kernel_rem_pio2+0x108>
 800bc98:	d106      	bne.n	800bca8 <__kernel_rem_pio2+0x260>
 800bc9a:	1e63      	subs	r3, r4, #1
 800bc9c:	aa0c      	add	r2, sp, #48	; 0x30
 800bc9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bca2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 800bca6:	e79d      	b.n	800bbe4 <__kernel_rem_pio2+0x19c>
 800bca8:	4b34      	ldr	r3, [pc, #208]	; (800bd7c <__kernel_rem_pio2+0x334>)
 800bcaa:	2200      	movs	r2, #0
 800bcac:	f7f4 ff4a 	bl	8000b44 <__aeabi_dcmpge>
 800bcb0:	2800      	cmp	r0, #0
 800bcb2:	d140      	bne.n	800bd36 <__kernel_rem_pio2+0x2ee>
 800bcb4:	4683      	mov	fp, r0
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	2300      	movs	r3, #0
 800bcba:	4630      	mov	r0, r6
 800bcbc:	4639      	mov	r1, r7
 800bcbe:	f7f4 ff23 	bl	8000b08 <__aeabi_dcmpeq>
 800bcc2:	2800      	cmp	r0, #0
 800bcc4:	f000 80c1 	beq.w	800be4a <__kernel_rem_pio2+0x402>
 800bcc8:	1e65      	subs	r5, r4, #1
 800bcca:	462b      	mov	r3, r5
 800bccc:	2200      	movs	r2, #0
 800bcce:	9900      	ldr	r1, [sp, #0]
 800bcd0:	428b      	cmp	r3, r1
 800bcd2:	da6d      	bge.n	800bdb0 <__kernel_rem_pio2+0x368>
 800bcd4:	2a00      	cmp	r2, #0
 800bcd6:	f000 808a 	beq.w	800bdee <__kernel_rem_pio2+0x3a6>
 800bcda:	ab0c      	add	r3, sp, #48	; 0x30
 800bcdc:	f1aa 0a18 	sub.w	sl, sl, #24
 800bce0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	f000 80ae 	beq.w	800be46 <__kernel_rem_pio2+0x3fe>
 800bcea:	4650      	mov	r0, sl
 800bcec:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 800bd60 <__kernel_rem_pio2+0x318>
 800bcf0:	f000 f9fa 	bl	800c0e8 <scalbn>
 800bcf4:	1c6b      	adds	r3, r5, #1
 800bcf6:	00da      	lsls	r2, r3, #3
 800bcf8:	9205      	str	r2, [sp, #20]
 800bcfa:	ec57 6b10 	vmov	r6, r7, d0
 800bcfe:	aa70      	add	r2, sp, #448	; 0x1c0
 800bd00:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800bd74 <__kernel_rem_pio2+0x32c>
 800bd04:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800bd08:	462c      	mov	r4, r5
 800bd0a:	f04f 0800 	mov.w	r8, #0
 800bd0e:	2c00      	cmp	r4, #0
 800bd10:	f280 80d4 	bge.w	800bebc <__kernel_rem_pio2+0x474>
 800bd14:	462c      	mov	r4, r5
 800bd16:	2c00      	cmp	r4, #0
 800bd18:	f2c0 8102 	blt.w	800bf20 <__kernel_rem_pio2+0x4d8>
 800bd1c:	4b18      	ldr	r3, [pc, #96]	; (800bd80 <__kernel_rem_pio2+0x338>)
 800bd1e:	461e      	mov	r6, r3
 800bd20:	ab70      	add	r3, sp, #448	; 0x1c0
 800bd22:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 800bd26:	1b2b      	subs	r3, r5, r4
 800bd28:	f04f 0900 	mov.w	r9, #0
 800bd2c:	f04f 0a00 	mov.w	sl, #0
 800bd30:	2700      	movs	r7, #0
 800bd32:	9306      	str	r3, [sp, #24]
 800bd34:	e0e6      	b.n	800bf04 <__kernel_rem_pio2+0x4bc>
 800bd36:	f04f 0b02 	mov.w	fp, #2
 800bd3a:	e756      	b.n	800bbea <__kernel_rem_pio2+0x1a2>
 800bd3c:	f8d8 3000 	ldr.w	r3, [r8]
 800bd40:	bb05      	cbnz	r5, 800bd84 <__kernel_rem_pio2+0x33c>
 800bd42:	b123      	cbz	r3, 800bd4e <__kernel_rem_pio2+0x306>
 800bd44:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bd48:	f8c8 3000 	str.w	r3, [r8]
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	3201      	adds	r2, #1
 800bd50:	f108 0804 	add.w	r8, r8, #4
 800bd54:	461d      	mov	r5, r3
 800bd56:	e74f      	b.n	800bbf8 <__kernel_rem_pio2+0x1b0>
	...
 800bd64:	3ff00000 	.word	0x3ff00000
 800bd68:	0800c940 	.word	0x0800c940
 800bd6c:	40200000 	.word	0x40200000
 800bd70:	3ff00000 	.word	0x3ff00000
 800bd74:	3e700000 	.word	0x3e700000
 800bd78:	41700000 	.word	0x41700000
 800bd7c:	3fe00000 	.word	0x3fe00000
 800bd80:	0800c900 	.word	0x0800c900
 800bd84:	1acb      	subs	r3, r1, r3
 800bd86:	f8c8 3000 	str.w	r3, [r8]
 800bd8a:	462b      	mov	r3, r5
 800bd8c:	e7df      	b.n	800bd4e <__kernel_rem_pio2+0x306>
 800bd8e:	1e62      	subs	r2, r4, #1
 800bd90:	ab0c      	add	r3, sp, #48	; 0x30
 800bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd96:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bd9a:	a90c      	add	r1, sp, #48	; 0x30
 800bd9c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bda0:	e738      	b.n	800bc14 <__kernel_rem_pio2+0x1cc>
 800bda2:	1e62      	subs	r2, r4, #1
 800bda4:	ab0c      	add	r3, sp, #48	; 0x30
 800bda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdaa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bdae:	e7f4      	b.n	800bd9a <__kernel_rem_pio2+0x352>
 800bdb0:	a90c      	add	r1, sp, #48	; 0x30
 800bdb2:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bdb6:	3b01      	subs	r3, #1
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	e788      	b.n	800bcce <__kernel_rem_pio2+0x286>
 800bdbc:	3301      	adds	r3, #1
 800bdbe:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bdc2:	2900      	cmp	r1, #0
 800bdc4:	d0fa      	beq.n	800bdbc <__kernel_rem_pio2+0x374>
 800bdc6:	9a08      	ldr	r2, [sp, #32]
 800bdc8:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800bdcc:	446a      	add	r2, sp
 800bdce:	3a98      	subs	r2, #152	; 0x98
 800bdd0:	9208      	str	r2, [sp, #32]
 800bdd2:	9a06      	ldr	r2, [sp, #24]
 800bdd4:	a920      	add	r1, sp, #128	; 0x80
 800bdd6:	18a2      	adds	r2, r4, r2
 800bdd8:	18e3      	adds	r3, r4, r3
 800bdda:	f104 0801 	add.w	r8, r4, #1
 800bdde:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800bde2:	9302      	str	r3, [sp, #8]
 800bde4:	9b02      	ldr	r3, [sp, #8]
 800bde6:	4543      	cmp	r3, r8
 800bde8:	da04      	bge.n	800bdf4 <__kernel_rem_pio2+0x3ac>
 800bdea:	461c      	mov	r4, r3
 800bdec:	e6a2      	b.n	800bb34 <__kernel_rem_pio2+0xec>
 800bdee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e7e4      	b.n	800bdbe <__kernel_rem_pio2+0x376>
 800bdf4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdf6:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bdfa:	f7f4 fbb3 	bl	8000564 <__aeabi_i2d>
 800bdfe:	e8e5 0102 	strd	r0, r1, [r5], #8
 800be02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be04:	46ab      	mov	fp, r5
 800be06:	461c      	mov	r4, r3
 800be08:	f04f 0900 	mov.w	r9, #0
 800be0c:	2600      	movs	r6, #0
 800be0e:	2700      	movs	r7, #0
 800be10:	9b05      	ldr	r3, [sp, #20]
 800be12:	4599      	cmp	r9, r3
 800be14:	dd06      	ble.n	800be24 <__kernel_rem_pio2+0x3dc>
 800be16:	9b08      	ldr	r3, [sp, #32]
 800be18:	e8e3 6702 	strd	r6, r7, [r3], #8
 800be1c:	f108 0801 	add.w	r8, r8, #1
 800be20:	9308      	str	r3, [sp, #32]
 800be22:	e7df      	b.n	800bde4 <__kernel_rem_pio2+0x39c>
 800be24:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800be28:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800be2c:	f7f4 fc04 	bl	8000638 <__aeabi_dmul>
 800be30:	4602      	mov	r2, r0
 800be32:	460b      	mov	r3, r1
 800be34:	4630      	mov	r0, r6
 800be36:	4639      	mov	r1, r7
 800be38:	f7f4 fa48 	bl	80002cc <__adddf3>
 800be3c:	f109 0901 	add.w	r9, r9, #1
 800be40:	4606      	mov	r6, r0
 800be42:	460f      	mov	r7, r1
 800be44:	e7e4      	b.n	800be10 <__kernel_rem_pio2+0x3c8>
 800be46:	3d01      	subs	r5, #1
 800be48:	e747      	b.n	800bcda <__kernel_rem_pio2+0x292>
 800be4a:	ec47 6b10 	vmov	d0, r6, r7
 800be4e:	f1ca 0000 	rsb	r0, sl, #0
 800be52:	f000 f949 	bl	800c0e8 <scalbn>
 800be56:	ec57 6b10 	vmov	r6, r7, d0
 800be5a:	4ba0      	ldr	r3, [pc, #640]	; (800c0dc <__kernel_rem_pio2+0x694>)
 800be5c:	ee10 0a10 	vmov	r0, s0
 800be60:	2200      	movs	r2, #0
 800be62:	4639      	mov	r1, r7
 800be64:	f7f4 fe6e 	bl	8000b44 <__aeabi_dcmpge>
 800be68:	b1f8      	cbz	r0, 800beaa <__kernel_rem_pio2+0x462>
 800be6a:	4b9d      	ldr	r3, [pc, #628]	; (800c0e0 <__kernel_rem_pio2+0x698>)
 800be6c:	2200      	movs	r2, #0
 800be6e:	4630      	mov	r0, r6
 800be70:	4639      	mov	r1, r7
 800be72:	f7f4 fbe1 	bl	8000638 <__aeabi_dmul>
 800be76:	f7f4 fe8f 	bl	8000b98 <__aeabi_d2iz>
 800be7a:	4680      	mov	r8, r0
 800be7c:	f7f4 fb72 	bl	8000564 <__aeabi_i2d>
 800be80:	4b96      	ldr	r3, [pc, #600]	; (800c0dc <__kernel_rem_pio2+0x694>)
 800be82:	2200      	movs	r2, #0
 800be84:	f7f4 fbd8 	bl	8000638 <__aeabi_dmul>
 800be88:	460b      	mov	r3, r1
 800be8a:	4602      	mov	r2, r0
 800be8c:	4639      	mov	r1, r7
 800be8e:	4630      	mov	r0, r6
 800be90:	f7f4 fa1a 	bl	80002c8 <__aeabi_dsub>
 800be94:	f7f4 fe80 	bl	8000b98 <__aeabi_d2iz>
 800be98:	1c65      	adds	r5, r4, #1
 800be9a:	ab0c      	add	r3, sp, #48	; 0x30
 800be9c:	f10a 0a18 	add.w	sl, sl, #24
 800bea0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800bea4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800bea8:	e71f      	b.n	800bcea <__kernel_rem_pio2+0x2a2>
 800beaa:	4630      	mov	r0, r6
 800beac:	4639      	mov	r1, r7
 800beae:	f7f4 fe73 	bl	8000b98 <__aeabi_d2iz>
 800beb2:	ab0c      	add	r3, sp, #48	; 0x30
 800beb4:	4625      	mov	r5, r4
 800beb6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800beba:	e716      	b.n	800bcea <__kernel_rem_pio2+0x2a2>
 800bebc:	ab0c      	add	r3, sp, #48	; 0x30
 800bebe:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800bec2:	f7f4 fb4f 	bl	8000564 <__aeabi_i2d>
 800bec6:	4632      	mov	r2, r6
 800bec8:	463b      	mov	r3, r7
 800beca:	f7f4 fbb5 	bl	8000638 <__aeabi_dmul>
 800bece:	4642      	mov	r2, r8
 800bed0:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800bed4:	464b      	mov	r3, r9
 800bed6:	4630      	mov	r0, r6
 800bed8:	4639      	mov	r1, r7
 800beda:	f7f4 fbad 	bl	8000638 <__aeabi_dmul>
 800bede:	3c01      	subs	r4, #1
 800bee0:	4606      	mov	r6, r0
 800bee2:	460f      	mov	r7, r1
 800bee4:	e713      	b.n	800bd0e <__kernel_rem_pio2+0x2c6>
 800bee6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800beea:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800beee:	f7f4 fba3 	bl	8000638 <__aeabi_dmul>
 800bef2:	4602      	mov	r2, r0
 800bef4:	460b      	mov	r3, r1
 800bef6:	4648      	mov	r0, r9
 800bef8:	4651      	mov	r1, sl
 800befa:	f7f4 f9e7 	bl	80002cc <__adddf3>
 800befe:	3701      	adds	r7, #1
 800bf00:	4681      	mov	r9, r0
 800bf02:	468a      	mov	sl, r1
 800bf04:	9b00      	ldr	r3, [sp, #0]
 800bf06:	429f      	cmp	r7, r3
 800bf08:	dc02      	bgt.n	800bf10 <__kernel_rem_pio2+0x4c8>
 800bf0a:	9b06      	ldr	r3, [sp, #24]
 800bf0c:	429f      	cmp	r7, r3
 800bf0e:	ddea      	ble.n	800bee6 <__kernel_rem_pio2+0x49e>
 800bf10:	9a06      	ldr	r2, [sp, #24]
 800bf12:	ab48      	add	r3, sp, #288	; 0x120
 800bf14:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 800bf18:	e9c6 9a00 	strd	r9, sl, [r6]
 800bf1c:	3c01      	subs	r4, #1
 800bf1e:	e6fa      	b.n	800bd16 <__kernel_rem_pio2+0x2ce>
 800bf20:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	dc0b      	bgt.n	800bf3e <__kernel_rem_pio2+0x4f6>
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	dc39      	bgt.n	800bf9e <__kernel_rem_pio2+0x556>
 800bf2a:	d05d      	beq.n	800bfe8 <__kernel_rem_pio2+0x5a0>
 800bf2c:	9b02      	ldr	r3, [sp, #8]
 800bf2e:	f003 0007 	and.w	r0, r3, #7
 800bf32:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800bf36:	ecbd 8b02 	vpop	{d8}
 800bf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf3e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800bf40:	2b03      	cmp	r3, #3
 800bf42:	d1f3      	bne.n	800bf2c <__kernel_rem_pio2+0x4e4>
 800bf44:	9b05      	ldr	r3, [sp, #20]
 800bf46:	9500      	str	r5, [sp, #0]
 800bf48:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bf4c:	eb0d 0403 	add.w	r4, sp, r3
 800bf50:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800bf54:	46a2      	mov	sl, r4
 800bf56:	9b00      	ldr	r3, [sp, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	f1aa 0a08 	sub.w	sl, sl, #8
 800bf5e:	dc69      	bgt.n	800c034 <__kernel_rem_pio2+0x5ec>
 800bf60:	46aa      	mov	sl, r5
 800bf62:	f1ba 0f01 	cmp.w	sl, #1
 800bf66:	f1a4 0408 	sub.w	r4, r4, #8
 800bf6a:	f300 8083 	bgt.w	800c074 <__kernel_rem_pio2+0x62c>
 800bf6e:	9c05      	ldr	r4, [sp, #20]
 800bf70:	ab48      	add	r3, sp, #288	; 0x120
 800bf72:	441c      	add	r4, r3
 800bf74:	2000      	movs	r0, #0
 800bf76:	2100      	movs	r1, #0
 800bf78:	2d01      	cmp	r5, #1
 800bf7a:	f300 809a 	bgt.w	800c0b2 <__kernel_rem_pio2+0x66a>
 800bf7e:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 800bf82:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800bf86:	f1bb 0f00 	cmp.w	fp, #0
 800bf8a:	f040 8098 	bne.w	800c0be <__kernel_rem_pio2+0x676>
 800bf8e:	9b04      	ldr	r3, [sp, #16]
 800bf90:	e9c3 7800 	strd	r7, r8, [r3]
 800bf94:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800bf98:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bf9c:	e7c6      	b.n	800bf2c <__kernel_rem_pio2+0x4e4>
 800bf9e:	9e05      	ldr	r6, [sp, #20]
 800bfa0:	ab48      	add	r3, sp, #288	; 0x120
 800bfa2:	441e      	add	r6, r3
 800bfa4:	462c      	mov	r4, r5
 800bfa6:	2000      	movs	r0, #0
 800bfa8:	2100      	movs	r1, #0
 800bfaa:	2c00      	cmp	r4, #0
 800bfac:	da33      	bge.n	800c016 <__kernel_rem_pio2+0x5ce>
 800bfae:	f1bb 0f00 	cmp.w	fp, #0
 800bfb2:	d036      	beq.n	800c022 <__kernel_rem_pio2+0x5da>
 800bfb4:	4602      	mov	r2, r0
 800bfb6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfba:	9c04      	ldr	r4, [sp, #16]
 800bfbc:	e9c4 2300 	strd	r2, r3, [r4]
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	460b      	mov	r3, r1
 800bfc4:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 800bfc8:	f7f4 f97e 	bl	80002c8 <__aeabi_dsub>
 800bfcc:	ae4a      	add	r6, sp, #296	; 0x128
 800bfce:	2401      	movs	r4, #1
 800bfd0:	42a5      	cmp	r5, r4
 800bfd2:	da29      	bge.n	800c028 <__kernel_rem_pio2+0x5e0>
 800bfd4:	f1bb 0f00 	cmp.w	fp, #0
 800bfd8:	d002      	beq.n	800bfe0 <__kernel_rem_pio2+0x598>
 800bfda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bfde:	4619      	mov	r1, r3
 800bfe0:	9b04      	ldr	r3, [sp, #16]
 800bfe2:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bfe6:	e7a1      	b.n	800bf2c <__kernel_rem_pio2+0x4e4>
 800bfe8:	9c05      	ldr	r4, [sp, #20]
 800bfea:	ab48      	add	r3, sp, #288	; 0x120
 800bfec:	441c      	add	r4, r3
 800bfee:	2000      	movs	r0, #0
 800bff0:	2100      	movs	r1, #0
 800bff2:	2d00      	cmp	r5, #0
 800bff4:	da09      	bge.n	800c00a <__kernel_rem_pio2+0x5c2>
 800bff6:	f1bb 0f00 	cmp.w	fp, #0
 800bffa:	d002      	beq.n	800c002 <__kernel_rem_pio2+0x5ba>
 800bffc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c000:	4619      	mov	r1, r3
 800c002:	9b04      	ldr	r3, [sp, #16]
 800c004:	e9c3 0100 	strd	r0, r1, [r3]
 800c008:	e790      	b.n	800bf2c <__kernel_rem_pio2+0x4e4>
 800c00a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c00e:	f7f4 f95d 	bl	80002cc <__adddf3>
 800c012:	3d01      	subs	r5, #1
 800c014:	e7ed      	b.n	800bff2 <__kernel_rem_pio2+0x5aa>
 800c016:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800c01a:	f7f4 f957 	bl	80002cc <__adddf3>
 800c01e:	3c01      	subs	r4, #1
 800c020:	e7c3      	b.n	800bfaa <__kernel_rem_pio2+0x562>
 800c022:	4602      	mov	r2, r0
 800c024:	460b      	mov	r3, r1
 800c026:	e7c8      	b.n	800bfba <__kernel_rem_pio2+0x572>
 800c028:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800c02c:	f7f4 f94e 	bl	80002cc <__adddf3>
 800c030:	3401      	adds	r4, #1
 800c032:	e7cd      	b.n	800bfd0 <__kernel_rem_pio2+0x588>
 800c034:	e9da 8900 	ldrd	r8, r9, [sl]
 800c038:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800c03c:	9b00      	ldr	r3, [sp, #0]
 800c03e:	3b01      	subs	r3, #1
 800c040:	9300      	str	r3, [sp, #0]
 800c042:	4632      	mov	r2, r6
 800c044:	463b      	mov	r3, r7
 800c046:	4640      	mov	r0, r8
 800c048:	4649      	mov	r1, r9
 800c04a:	f7f4 f93f 	bl	80002cc <__adddf3>
 800c04e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c052:	4602      	mov	r2, r0
 800c054:	460b      	mov	r3, r1
 800c056:	4640      	mov	r0, r8
 800c058:	4649      	mov	r1, r9
 800c05a:	f7f4 f935 	bl	80002c8 <__aeabi_dsub>
 800c05e:	4632      	mov	r2, r6
 800c060:	463b      	mov	r3, r7
 800c062:	f7f4 f933 	bl	80002cc <__adddf3>
 800c066:	ed9d 7b06 	vldr	d7, [sp, #24]
 800c06a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800c06e:	ed8a 7b00 	vstr	d7, [sl]
 800c072:	e770      	b.n	800bf56 <__kernel_rem_pio2+0x50e>
 800c074:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c078:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c07c:	4640      	mov	r0, r8
 800c07e:	4632      	mov	r2, r6
 800c080:	463b      	mov	r3, r7
 800c082:	4649      	mov	r1, r9
 800c084:	f7f4 f922 	bl	80002cc <__adddf3>
 800c088:	e9cd 0100 	strd	r0, r1, [sp]
 800c08c:	4602      	mov	r2, r0
 800c08e:	460b      	mov	r3, r1
 800c090:	4640      	mov	r0, r8
 800c092:	4649      	mov	r1, r9
 800c094:	f7f4 f918 	bl	80002c8 <__aeabi_dsub>
 800c098:	4632      	mov	r2, r6
 800c09a:	463b      	mov	r3, r7
 800c09c:	f7f4 f916 	bl	80002cc <__adddf3>
 800c0a0:	ed9d 7b00 	vldr	d7, [sp]
 800c0a4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c0a8:	ed84 7b00 	vstr	d7, [r4]
 800c0ac:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c0b0:	e757      	b.n	800bf62 <__kernel_rem_pio2+0x51a>
 800c0b2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c0b6:	f7f4 f909 	bl	80002cc <__adddf3>
 800c0ba:	3d01      	subs	r5, #1
 800c0bc:	e75c      	b.n	800bf78 <__kernel_rem_pio2+0x530>
 800c0be:	9b04      	ldr	r3, [sp, #16]
 800c0c0:	9a04      	ldr	r2, [sp, #16]
 800c0c2:	601f      	str	r7, [r3, #0]
 800c0c4:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 800c0c8:	605c      	str	r4, [r3, #4]
 800c0ca:	609d      	str	r5, [r3, #8]
 800c0cc:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c0d0:	60d3      	str	r3, [r2, #12]
 800c0d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c0d6:	6110      	str	r0, [r2, #16]
 800c0d8:	6153      	str	r3, [r2, #20]
 800c0da:	e727      	b.n	800bf2c <__kernel_rem_pio2+0x4e4>
 800c0dc:	41700000 	.word	0x41700000
 800c0e0:	3e700000 	.word	0x3e700000
 800c0e4:	00000000 	.word	0x00000000

0800c0e8 <scalbn>:
 800c0e8:	b570      	push	{r4, r5, r6, lr}
 800c0ea:	ec55 4b10 	vmov	r4, r5, d0
 800c0ee:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c0f2:	4606      	mov	r6, r0
 800c0f4:	462b      	mov	r3, r5
 800c0f6:	b999      	cbnz	r1, 800c120 <scalbn+0x38>
 800c0f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c0fc:	4323      	orrs	r3, r4
 800c0fe:	d03f      	beq.n	800c180 <scalbn+0x98>
 800c100:	4b35      	ldr	r3, [pc, #212]	; (800c1d8 <scalbn+0xf0>)
 800c102:	4629      	mov	r1, r5
 800c104:	ee10 0a10 	vmov	r0, s0
 800c108:	2200      	movs	r2, #0
 800c10a:	f7f4 fa95 	bl	8000638 <__aeabi_dmul>
 800c10e:	4b33      	ldr	r3, [pc, #204]	; (800c1dc <scalbn+0xf4>)
 800c110:	429e      	cmp	r6, r3
 800c112:	4604      	mov	r4, r0
 800c114:	460d      	mov	r5, r1
 800c116:	da10      	bge.n	800c13a <scalbn+0x52>
 800c118:	a327      	add	r3, pc, #156	; (adr r3, 800c1b8 <scalbn+0xd0>)
 800c11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c11e:	e01f      	b.n	800c160 <scalbn+0x78>
 800c120:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800c124:	4291      	cmp	r1, r2
 800c126:	d10c      	bne.n	800c142 <scalbn+0x5a>
 800c128:	ee10 2a10 	vmov	r2, s0
 800c12c:	4620      	mov	r0, r4
 800c12e:	4629      	mov	r1, r5
 800c130:	f7f4 f8cc 	bl	80002cc <__adddf3>
 800c134:	4604      	mov	r4, r0
 800c136:	460d      	mov	r5, r1
 800c138:	e022      	b.n	800c180 <scalbn+0x98>
 800c13a:	460b      	mov	r3, r1
 800c13c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c140:	3936      	subs	r1, #54	; 0x36
 800c142:	f24c 3250 	movw	r2, #50000	; 0xc350
 800c146:	4296      	cmp	r6, r2
 800c148:	dd0d      	ble.n	800c166 <scalbn+0x7e>
 800c14a:	2d00      	cmp	r5, #0
 800c14c:	a11c      	add	r1, pc, #112	; (adr r1, 800c1c0 <scalbn+0xd8>)
 800c14e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c152:	da02      	bge.n	800c15a <scalbn+0x72>
 800c154:	a11c      	add	r1, pc, #112	; (adr r1, 800c1c8 <scalbn+0xe0>)
 800c156:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c15a:	a319      	add	r3, pc, #100	; (adr r3, 800c1c0 <scalbn+0xd8>)
 800c15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c160:	f7f4 fa6a 	bl	8000638 <__aeabi_dmul>
 800c164:	e7e6      	b.n	800c134 <scalbn+0x4c>
 800c166:	1872      	adds	r2, r6, r1
 800c168:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c16c:	428a      	cmp	r2, r1
 800c16e:	dcec      	bgt.n	800c14a <scalbn+0x62>
 800c170:	2a00      	cmp	r2, #0
 800c172:	dd08      	ble.n	800c186 <scalbn+0x9e>
 800c174:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c178:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c17c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c180:	ec45 4b10 	vmov	d0, r4, r5
 800c184:	bd70      	pop	{r4, r5, r6, pc}
 800c186:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c18a:	da08      	bge.n	800c19e <scalbn+0xb6>
 800c18c:	2d00      	cmp	r5, #0
 800c18e:	a10a      	add	r1, pc, #40	; (adr r1, 800c1b8 <scalbn+0xd0>)
 800c190:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c194:	dac0      	bge.n	800c118 <scalbn+0x30>
 800c196:	a10e      	add	r1, pc, #56	; (adr r1, 800c1d0 <scalbn+0xe8>)
 800c198:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c19c:	e7bc      	b.n	800c118 <scalbn+0x30>
 800c19e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c1a2:	3236      	adds	r2, #54	; 0x36
 800c1a4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c1a8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	4b0c      	ldr	r3, [pc, #48]	; (800c1e0 <scalbn+0xf8>)
 800c1b0:	2200      	movs	r2, #0
 800c1b2:	e7d5      	b.n	800c160 <scalbn+0x78>
 800c1b4:	f3af 8000 	nop.w
 800c1b8:	c2f8f359 	.word	0xc2f8f359
 800c1bc:	01a56e1f 	.word	0x01a56e1f
 800c1c0:	8800759c 	.word	0x8800759c
 800c1c4:	7e37e43c 	.word	0x7e37e43c
 800c1c8:	8800759c 	.word	0x8800759c
 800c1cc:	fe37e43c 	.word	0xfe37e43c
 800c1d0:	c2f8f359 	.word	0xc2f8f359
 800c1d4:	81a56e1f 	.word	0x81a56e1f
 800c1d8:	43500000 	.word	0x43500000
 800c1dc:	ffff3cb0 	.word	0xffff3cb0
 800c1e0:	3c900000 	.word	0x3c900000
 800c1e4:	00000000 	.word	0x00000000

0800c1e8 <floor>:
 800c1e8:	ec51 0b10 	vmov	r0, r1, d0
 800c1ec:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c1f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 800c1f8:	2e13      	cmp	r6, #19
 800c1fa:	ee10 5a10 	vmov	r5, s0
 800c1fe:	ee10 8a10 	vmov	r8, s0
 800c202:	460c      	mov	r4, r1
 800c204:	dc31      	bgt.n	800c26a <floor+0x82>
 800c206:	2e00      	cmp	r6, #0
 800c208:	da14      	bge.n	800c234 <floor+0x4c>
 800c20a:	a333      	add	r3, pc, #204	; (adr r3, 800c2d8 <floor+0xf0>)
 800c20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c210:	f7f4 f85c 	bl	80002cc <__adddf3>
 800c214:	2200      	movs	r2, #0
 800c216:	2300      	movs	r3, #0
 800c218:	f7f4 fc9e 	bl	8000b58 <__aeabi_dcmpgt>
 800c21c:	b138      	cbz	r0, 800c22e <floor+0x46>
 800c21e:	2c00      	cmp	r4, #0
 800c220:	da53      	bge.n	800c2ca <floor+0xe2>
 800c222:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c226:	4325      	orrs	r5, r4
 800c228:	d052      	beq.n	800c2d0 <floor+0xe8>
 800c22a:	4c2d      	ldr	r4, [pc, #180]	; (800c2e0 <floor+0xf8>)
 800c22c:	2500      	movs	r5, #0
 800c22e:	4621      	mov	r1, r4
 800c230:	4628      	mov	r0, r5
 800c232:	e024      	b.n	800c27e <floor+0x96>
 800c234:	4f2b      	ldr	r7, [pc, #172]	; (800c2e4 <floor+0xfc>)
 800c236:	4137      	asrs	r7, r6
 800c238:	ea01 0307 	and.w	r3, r1, r7
 800c23c:	4303      	orrs	r3, r0
 800c23e:	d01e      	beq.n	800c27e <floor+0x96>
 800c240:	a325      	add	r3, pc, #148	; (adr r3, 800c2d8 <floor+0xf0>)
 800c242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c246:	f7f4 f841 	bl	80002cc <__adddf3>
 800c24a:	2200      	movs	r2, #0
 800c24c:	2300      	movs	r3, #0
 800c24e:	f7f4 fc83 	bl	8000b58 <__aeabi_dcmpgt>
 800c252:	2800      	cmp	r0, #0
 800c254:	d0eb      	beq.n	800c22e <floor+0x46>
 800c256:	2c00      	cmp	r4, #0
 800c258:	bfbe      	ittt	lt
 800c25a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c25e:	4133      	asrlt	r3, r6
 800c260:	18e4      	addlt	r4, r4, r3
 800c262:	ea24 0407 	bic.w	r4, r4, r7
 800c266:	2500      	movs	r5, #0
 800c268:	e7e1      	b.n	800c22e <floor+0x46>
 800c26a:	2e33      	cmp	r6, #51	; 0x33
 800c26c:	dd0b      	ble.n	800c286 <floor+0x9e>
 800c26e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c272:	d104      	bne.n	800c27e <floor+0x96>
 800c274:	ee10 2a10 	vmov	r2, s0
 800c278:	460b      	mov	r3, r1
 800c27a:	f7f4 f827 	bl	80002cc <__adddf3>
 800c27e:	ec41 0b10 	vmov	d0, r0, r1
 800c282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c286:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800c28a:	f04f 37ff 	mov.w	r7, #4294967295
 800c28e:	40df      	lsrs	r7, r3
 800c290:	4238      	tst	r0, r7
 800c292:	d0f4      	beq.n	800c27e <floor+0x96>
 800c294:	a310      	add	r3, pc, #64	; (adr r3, 800c2d8 <floor+0xf0>)
 800c296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c29a:	f7f4 f817 	bl	80002cc <__adddf3>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	f7f4 fc59 	bl	8000b58 <__aeabi_dcmpgt>
 800c2a6:	2800      	cmp	r0, #0
 800c2a8:	d0c1      	beq.n	800c22e <floor+0x46>
 800c2aa:	2c00      	cmp	r4, #0
 800c2ac:	da0a      	bge.n	800c2c4 <floor+0xdc>
 800c2ae:	2e14      	cmp	r6, #20
 800c2b0:	d101      	bne.n	800c2b6 <floor+0xce>
 800c2b2:	3401      	adds	r4, #1
 800c2b4:	e006      	b.n	800c2c4 <floor+0xdc>
 800c2b6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	40b3      	lsls	r3, r6
 800c2be:	441d      	add	r5, r3
 800c2c0:	45a8      	cmp	r8, r5
 800c2c2:	d8f6      	bhi.n	800c2b2 <floor+0xca>
 800c2c4:	ea25 0507 	bic.w	r5, r5, r7
 800c2c8:	e7b1      	b.n	800c22e <floor+0x46>
 800c2ca:	2500      	movs	r5, #0
 800c2cc:	462c      	mov	r4, r5
 800c2ce:	e7ae      	b.n	800c22e <floor+0x46>
 800c2d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800c2d4:	e7ab      	b.n	800c22e <floor+0x46>
 800c2d6:	bf00      	nop
 800c2d8:	8800759c 	.word	0x8800759c
 800c2dc:	7e37e43c 	.word	0x7e37e43c
 800c2e0:	bff00000 	.word	0xbff00000
 800c2e4:	000fffff 	.word	0x000fffff

0800c2e8 <_init>:
 800c2e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2ea:	bf00      	nop
 800c2ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2ee:	bc08      	pop	{r3}
 800c2f0:	469e      	mov	lr, r3
 800c2f2:	4770      	bx	lr

0800c2f4 <_fini>:
 800c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2f6:	bf00      	nop
 800c2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c2fa:	bc08      	pop	{r3}
 800c2fc:	469e      	mov	lr, r3
 800c2fe:	4770      	bx	lr
