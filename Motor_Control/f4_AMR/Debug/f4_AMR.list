
f4_AMR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c020  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000650  0800c1f0  0800c1f0  0000d1f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c840  0800c840  0000e220  2**0
                  CONTENTS
  4 .ARM          00000008  0800c840  0800c840  0000d840  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c848  0800c848  0000e220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c848  0800c848  0000d848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c84c  0800c84c  0000d84c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  0800c850  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005cc  20000220  0800ca70  0000e220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200007ec  0800ca70  0000e7ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f452  00000000  00000000  0000e250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002244  00000000  00000000  0001d6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  0001f8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b30  00000000  00000000  00020738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022ec5  00000000  00000000  00021268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a9a  00000000  00000000  0004412d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3d00  00000000  00000000  00054bc7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001288c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005498  00000000  00000000  0012890c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0012dda4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000220 	.word	0x20000220
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800c1d8 	.word	0x0800c1d8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000224 	.word	0x20000224
 800020c:	0800c1d8 	.word	0x0800c1d8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	@ 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a0 	b.w	8001020 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	@ (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	460c      	mov	r4, r1
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d14e      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d70:	4694      	mov	ip, r2
 8000d72:	458c      	cmp	ip, r1
 8000d74:	4686      	mov	lr, r0
 8000d76:	fab2 f282 	clz	r2, r2
 8000d7a:	d962      	bls.n	8000e42 <__udivmoddi4+0xde>
 8000d7c:	b14a      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d7e:	f1c2 0320 	rsb	r3, r2, #32
 8000d82:	4091      	lsls	r1, r2
 8000d84:	fa20 f303 	lsr.w	r3, r0, r3
 8000d88:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8c:	4319      	orrs	r1, r3
 8000d8e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d92:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d96:	fa1f f68c 	uxth.w	r6, ip
 8000d9a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d9e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000da2:	fb07 1114 	mls	r1, r7, r4, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb04 f106 	mul.w	r1, r4, r6
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f104 30ff 	add.w	r0, r4, #4294967295
 8000dba:	f080 8112 	bcs.w	8000fe2 <__udivmoddi4+0x27e>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 810f 	bls.w	8000fe2 <__udivmoddi4+0x27e>
 8000dc4:	3c02      	subs	r4, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a59      	subs	r1, r3, r1
 8000dca:	fa1f f38e 	uxth.w	r3, lr
 8000dce:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dd2:	fb07 1110 	mls	r1, r7, r0, r1
 8000dd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dda:	fb00 f606 	mul.w	r6, r0, r6
 8000dde:	429e      	cmp	r6, r3
 8000de0:	d90a      	bls.n	8000df8 <__udivmoddi4+0x94>
 8000de2:	eb1c 0303 	adds.w	r3, ip, r3
 8000de6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dea:	f080 80fc 	bcs.w	8000fe6 <__udivmoddi4+0x282>
 8000dee:	429e      	cmp	r6, r3
 8000df0:	f240 80f9 	bls.w	8000fe6 <__udivmoddi4+0x282>
 8000df4:	4463      	add	r3, ip
 8000df6:	3802      	subs	r0, #2
 8000df8:	1b9b      	subs	r3, r3, r6
 8000dfa:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dfe:	2100      	movs	r1, #0
 8000e00:	b11d      	cbz	r5, 8000e0a <__udivmoddi4+0xa6>
 8000e02:	40d3      	lsrs	r3, r2
 8000e04:	2200      	movs	r2, #0
 8000e06:	e9c5 3200 	strd	r3, r2, [r5]
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d905      	bls.n	8000e1e <__udivmoddi4+0xba>
 8000e12:	b10d      	cbz	r5, 8000e18 <__udivmoddi4+0xb4>
 8000e14:	e9c5 0100 	strd	r0, r1, [r5]
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e7f5      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e1e:	fab3 f183 	clz	r1, r3
 8000e22:	2900      	cmp	r1, #0
 8000e24:	d146      	bne.n	8000eb4 <__udivmoddi4+0x150>
 8000e26:	42a3      	cmp	r3, r4
 8000e28:	d302      	bcc.n	8000e30 <__udivmoddi4+0xcc>
 8000e2a:	4290      	cmp	r0, r2
 8000e2c:	f0c0 80f0 	bcc.w	8001010 <__udivmoddi4+0x2ac>
 8000e30:	1a86      	subs	r6, r0, r2
 8000e32:	eb64 0303 	sbc.w	r3, r4, r3
 8000e36:	2001      	movs	r0, #1
 8000e38:	2d00      	cmp	r5, #0
 8000e3a:	d0e6      	beq.n	8000e0a <__udivmoddi4+0xa6>
 8000e3c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e40:	e7e3      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000e42:	2a00      	cmp	r2, #0
 8000e44:	f040 8090 	bne.w	8000f68 <__udivmoddi4+0x204>
 8000e48:	eba1 040c 	sub.w	r4, r1, ip
 8000e4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e50:	fa1f f78c 	uxth.w	r7, ip
 8000e54:	2101      	movs	r1, #1
 8000e56:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e5a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e5e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e62:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e66:	fb07 f006 	mul.w	r0, r7, r6
 8000e6a:	4298      	cmp	r0, r3
 8000e6c:	d908      	bls.n	8000e80 <__udivmoddi4+0x11c>
 8000e6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e72:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0x11a>
 8000e78:	4298      	cmp	r0, r3
 8000e7a:	f200 80cd 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e7e:	4626      	mov	r6, r4
 8000e80:	1a1c      	subs	r4, r3, r0
 8000e82:	fa1f f38e 	uxth.w	r3, lr
 8000e86:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e8a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e8e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e92:	fb00 f707 	mul.w	r7, r0, r7
 8000e96:	429f      	cmp	r7, r3
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x148>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ea2:	d202      	bcs.n	8000eaa <__udivmoddi4+0x146>
 8000ea4:	429f      	cmp	r7, r3
 8000ea6:	f200 80b0 	bhi.w	800100a <__udivmoddi4+0x2a6>
 8000eaa:	4620      	mov	r0, r4
 8000eac:	1bdb      	subs	r3, r3, r7
 8000eae:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eb2:	e7a5      	b.n	8000e00 <__udivmoddi4+0x9c>
 8000eb4:	f1c1 0620 	rsb	r6, r1, #32
 8000eb8:	408b      	lsls	r3, r1
 8000eba:	fa22 f706 	lsr.w	r7, r2, r6
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ec4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ec8:	ea43 030c 	orr.w	r3, r3, ip
 8000ecc:	40f4      	lsrs	r4, r6
 8000ece:	fa00 f801 	lsl.w	r8, r0, r1
 8000ed2:	0c38      	lsrs	r0, r7, #16
 8000ed4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ed8:	fbb4 fef0 	udiv	lr, r4, r0
 8000edc:	fa1f fc87 	uxth.w	ip, r7
 8000ee0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ee4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eec:	45a1      	cmp	r9, r4
 8000eee:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef2:	d90a      	bls.n	8000f0a <__udivmoddi4+0x1a6>
 8000ef4:	193c      	adds	r4, r7, r4
 8000ef6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000efa:	f080 8084 	bcs.w	8001006 <__udivmoddi4+0x2a2>
 8000efe:	45a1      	cmp	r9, r4
 8000f00:	f240 8081 	bls.w	8001006 <__udivmoddi4+0x2a2>
 8000f04:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f08:	443c      	add	r4, r7
 8000f0a:	eba4 0409 	sub.w	r4, r4, r9
 8000f0e:	fa1f f983 	uxth.w	r9, r3
 8000f12:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f16:	fb00 4413 	mls	r4, r0, r3, r4
 8000f1a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f1e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f22:	45a4      	cmp	ip, r4
 8000f24:	d907      	bls.n	8000f36 <__udivmoddi4+0x1d2>
 8000f26:	193c      	adds	r4, r7, r4
 8000f28:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f2c:	d267      	bcs.n	8000ffe <__udivmoddi4+0x29a>
 8000f2e:	45a4      	cmp	ip, r4
 8000f30:	d965      	bls.n	8000ffe <__udivmoddi4+0x29a>
 8000f32:	3b02      	subs	r3, #2
 8000f34:	443c      	add	r4, r7
 8000f36:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f3a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f3e:	eba4 040c 	sub.w	r4, r4, ip
 8000f42:	429c      	cmp	r4, r3
 8000f44:	46ce      	mov	lr, r9
 8000f46:	469c      	mov	ip, r3
 8000f48:	d351      	bcc.n	8000fee <__udivmoddi4+0x28a>
 8000f4a:	d04e      	beq.n	8000fea <__udivmoddi4+0x286>
 8000f4c:	b155      	cbz	r5, 8000f64 <__udivmoddi4+0x200>
 8000f4e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f52:	eb64 040c 	sbc.w	r4, r4, ip
 8000f56:	fa04 f606 	lsl.w	r6, r4, r6
 8000f5a:	40cb      	lsrs	r3, r1
 8000f5c:	431e      	orrs	r6, r3
 8000f5e:	40cc      	lsrs	r4, r1
 8000f60:	e9c5 6400 	strd	r6, r4, [r5]
 8000f64:	2100      	movs	r1, #0
 8000f66:	e750      	b.n	8000e0a <__udivmoddi4+0xa6>
 8000f68:	f1c2 0320 	rsb	r3, r2, #32
 8000f6c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f70:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f74:	fa24 f303 	lsr.w	r3, r4, r3
 8000f78:	4094      	lsls	r4, r2
 8000f7a:	430c      	orrs	r4, r1
 8000f7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f80:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f84:	fa1f f78c 	uxth.w	r7, ip
 8000f88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f8c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f90:	0c23      	lsrs	r3, r4, #16
 8000f92:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f96:	fb00 f107 	mul.w	r1, r0, r7
 8000f9a:	4299      	cmp	r1, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x24c>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 36ff 	add.w	r6, r0, #4294967295
 8000fa6:	d22c      	bcs.n	8001002 <__udivmoddi4+0x29e>
 8000fa8:	4299      	cmp	r1, r3
 8000faa:	d92a      	bls.n	8001002 <__udivmoddi4+0x29e>
 8000fac:	3802      	subs	r0, #2
 8000fae:	4463      	add	r3, ip
 8000fb0:	1a5b      	subs	r3, r3, r1
 8000fb2:	b2a4      	uxth	r4, r4
 8000fb4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fb8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fc0:	fb01 f307 	mul.w	r3, r1, r7
 8000fc4:	42a3      	cmp	r3, r4
 8000fc6:	d908      	bls.n	8000fda <__udivmoddi4+0x276>
 8000fc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fcc:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fd0:	d213      	bcs.n	8000ffa <__udivmoddi4+0x296>
 8000fd2:	42a3      	cmp	r3, r4
 8000fd4:	d911      	bls.n	8000ffa <__udivmoddi4+0x296>
 8000fd6:	3902      	subs	r1, #2
 8000fd8:	4464      	add	r4, ip
 8000fda:	1ae4      	subs	r4, r4, r3
 8000fdc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fe0:	e739      	b.n	8000e56 <__udivmoddi4+0xf2>
 8000fe2:	4604      	mov	r4, r0
 8000fe4:	e6f0      	b.n	8000dc8 <__udivmoddi4+0x64>
 8000fe6:	4608      	mov	r0, r1
 8000fe8:	e706      	b.n	8000df8 <__udivmoddi4+0x94>
 8000fea:	45c8      	cmp	r8, r9
 8000fec:	d2ae      	bcs.n	8000f4c <__udivmoddi4+0x1e8>
 8000fee:	ebb9 0e02 	subs.w	lr, r9, r2
 8000ff2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000ff6:	3801      	subs	r0, #1
 8000ff8:	e7a8      	b.n	8000f4c <__udivmoddi4+0x1e8>
 8000ffa:	4631      	mov	r1, r6
 8000ffc:	e7ed      	b.n	8000fda <__udivmoddi4+0x276>
 8000ffe:	4603      	mov	r3, r0
 8001000:	e799      	b.n	8000f36 <__udivmoddi4+0x1d2>
 8001002:	4630      	mov	r0, r6
 8001004:	e7d4      	b.n	8000fb0 <__udivmoddi4+0x24c>
 8001006:	46d6      	mov	lr, sl
 8001008:	e77f      	b.n	8000f0a <__udivmoddi4+0x1a6>
 800100a:	4463      	add	r3, ip
 800100c:	3802      	subs	r0, #2
 800100e:	e74d      	b.n	8000eac <__udivmoddi4+0x148>
 8001010:	4606      	mov	r6, r0
 8001012:	4623      	mov	r3, r4
 8001014:	4608      	mov	r0, r1
 8001016:	e70f      	b.n	8000e38 <__udivmoddi4+0xd4>
 8001018:	3e02      	subs	r6, #2
 800101a:	4463      	add	r3, ip
 800101c:	e730      	b.n	8000e80 <__udivmoddi4+0x11c>
 800101e:	bf00      	nop

08001020 <__aeabi_idiv0>:
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop

08001024 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	4603      	mov	r3, r0
 800102c:	6039      	str	r1, [r7, #0]
 800102e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001030:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001034:	2b00      	cmp	r3, #0
 8001036:	db0a      	blt.n	800104e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	b2da      	uxtb	r2, r3
 800103c:	490c      	ldr	r1, [pc, #48]	@ (8001070 <__NVIC_SetPriority+0x4c>)
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	0112      	lsls	r2, r2, #4
 8001044:	b2d2      	uxtb	r2, r2
 8001046:	440b      	add	r3, r1
 8001048:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800104c:	e00a      	b.n	8001064 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	b2da      	uxtb	r2, r3
 8001052:	4908      	ldr	r1, [pc, #32]	@ (8001074 <__NVIC_SetPriority+0x50>)
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	f003 030f 	and.w	r3, r3, #15
 800105a:	3b04      	subs	r3, #4
 800105c:	0112      	lsls	r2, r2, #4
 800105e:	b2d2      	uxtb	r2, r2
 8001060:	440b      	add	r3, r1
 8001062:	761a      	strb	r2, [r3, #24]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000e100 	.word	0xe000e100
 8001074:	e000ed00 	.word	0xe000ed00

08001078 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800107c:	f3bf 8f4f 	dsb	sy
}
 8001080:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001082:	4b06      	ldr	r3, [pc, #24]	@ (800109c <__NVIC_SystemReset+0x24>)
 8001084:	68db      	ldr	r3, [r3, #12]
 8001086:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800108a:	4904      	ldr	r1, [pc, #16]	@ (800109c <__NVIC_SystemReset+0x24>)
 800108c:	4b04      	ldr	r3, [pc, #16]	@ (80010a0 <__NVIC_SystemReset+0x28>)
 800108e:	4313      	orrs	r3, r2
 8001090:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001092:	f3bf 8f4f 	dsb	sy
}
 8001096:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <__NVIC_SystemReset+0x20>
 800109c:	e000ed00 	.word	0xe000ed00
 80010a0:	05fa0004 	.word	0x05fa0004

080010a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010b4:	d301      	bcc.n	80010ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010b6:	2301      	movs	r3, #1
 80010b8:	e00f      	b.n	80010da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ba:	4a0a      	ldr	r2, [pc, #40]	@ (80010e4 <SysTick_Config+0x40>)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	3b01      	subs	r3, #1
 80010c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c2:	210f      	movs	r1, #15
 80010c4:	f04f 30ff 	mov.w	r0, #4294967295
 80010c8:	f7ff ffac 	bl	8001024 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SysTick_Config+0x40>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d2:	4b04      	ldr	r3, [pc, #16]	@ (80010e4 <SysTick_Config+0x40>)
 80010d4:	2207      	movs	r2, #7
 80010d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	e000e010 	.word	0xe000e010

080010e8 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2b0a      	cmp	r3, #10
 80010f4:	d106      	bne.n	8001104 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 80010f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80010fa:	2201      	movs	r2, #1
 80010fc:	4907      	ldr	r1, [pc, #28]	@ (800111c <__io_putchar+0x34>)
 80010fe:	4808      	ldr	r0, [pc, #32]	@ (8001120 <__io_putchar+0x38>)
 8001100:	f004 fb3a 	bl	8005778 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8001104:	1d39      	adds	r1, r7, #4
 8001106:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800110a:	2201      	movs	r2, #1
 800110c:	4804      	ldr	r0, [pc, #16]	@ (8001120 <__io_putchar+0x38>)
 800110e:	f004 fb33 	bl	8005778 <HAL_UART_Transmit>
	return ch;
 8001112:	687b      	ldr	r3, [r7, #4]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	0800c1f0 	.word	0x0800c1f0
 8001120:	200003a4 	.word	0x200003a4
 8001124:	00000000 	.word	0x00000000

08001128 <radiansToDegrees>:
/******************** Time *********************/
extern volatile uint32_t msTicks;
uint32_t time=0;

/******************** O.W *********************/
float radiansToDegrees(float radians) {
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	ed87 0a01 	vstr	s0, [r7, #4]
	return radians * (180.0 / M_PI);
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fa28 	bl	8000588 <__aeabi_f2d>
 8001138:	a309      	add	r3, pc, #36	@ (adr r3, 8001160 <radiansToDegrees+0x38>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff fa7b 	bl	8000638 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	4610      	mov	r0, r2
 8001148:	4619      	mov	r1, r3
 800114a:	f7ff fd6d 	bl	8000c28 <__aeabi_d2f>
 800114e:	4603      	mov	r3, r0
 8001150:	ee07 3a90 	vmov	s15, r3
}
 8001154:	eeb0 0a67 	vmov.f32	s0, s15
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	1a63c1f8 	.word	0x1a63c1f8
 8001164:	404ca5dc 	.word	0x404ca5dc

08001168 <angleToPulse>:

uint16_t angleToPulse(uint8_t angle) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b082      	sub	sp, #8
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
	return (MIN_PULSE + (MAX_PULSE - MIN_PULSE) * (angle * 0.55555556) / 180);
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff f9f5 	bl	8000564 <__aeabi_i2d>
 800117a:	a319      	add	r3, pc, #100	@ (adr r3, 80011e0 <angleToPulse+0x78>)
 800117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001180:	f7ff fa5a 	bl	8000638 <__aeabi_dmul>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	a316      	add	r3, pc, #88	@ (adr r3, 80011e8 <angleToPulse+0x80>)
 800118e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001192:	f7ff fa51 	bl	8000638 <__aeabi_dmul>
 8001196:	4602      	mov	r2, r0
 8001198:	460b      	mov	r3, r1
 800119a:	4610      	mov	r0, r2
 800119c:	4619      	mov	r1, r3
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	4b0d      	ldr	r3, [pc, #52]	@ (80011d8 <angleToPulse+0x70>)
 80011a4:	f7ff fb72 	bl	800088c <__aeabi_ddiv>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4610      	mov	r0, r2
 80011ae:	4619      	mov	r1, r3
 80011b0:	f04f 0200 	mov.w	r2, #0
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <angleToPulse+0x74>)
 80011b6:	f7ff f889 	bl	80002cc <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fd11 	bl	8000be8 <__aeabi_d2uiz>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b29b      	uxth	r3, r3
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	f3af 8000 	nop.w
 80011d8:	40668000 	.word	0x40668000
 80011dc:	407f4000 	.word	0x407f4000
 80011e0:	7429f36e 	.word	0x7429f36e
 80011e4:	3fe1c71c 	.word	0x3fe1c71c
 80011e8:	00000000 	.word	0x00000000
 80011ec:	40ab5800 	.word	0x40ab5800

080011f0 <limitAngle>:

uint8_t limitAngle(uint8_t angle, uint8_t minAngle, uint8_t maxAngle) {
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	71fb      	strb	r3, [r7, #7]
 80011fa:	460b      	mov	r3, r1
 80011fc:	71bb      	strb	r3, [r7, #6]
 80011fe:	4613      	mov	r3, r2
 8001200:	717b      	strb	r3, [r7, #5]
	if (angle <= minAngle) return minAngle;
 8001202:	79fa      	ldrb	r2, [r7, #7]
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	429a      	cmp	r2, r3
 8001208:	d801      	bhi.n	800120e <limitAngle+0x1e>
 800120a:	79bb      	ldrb	r3, [r7, #6]
 800120c:	e006      	b.n	800121c <limitAngle+0x2c>
	if (angle >= maxAngle) return maxAngle;
 800120e:	79fa      	ldrb	r2, [r7, #7]
 8001210:	797b      	ldrb	r3, [r7, #5]
 8001212:	429a      	cmp	r2, r3
 8001214:	d301      	bcc.n	800121a <limitAngle+0x2a>
 8001216:	797b      	ldrb	r3, [r7, #5]
 8001218:	e000      	b.n	800121c <limitAngle+0x2c>
	return angle;
 800121a:	79fb      	ldrb	r3, [r7, #7]
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <setMotorAngle>:

void setMotorAngle(TIM_HandleTypeDef *htim, uint32_t channel, uint8_t angle, uint8_t minAngle, uint8_t maxAngle) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b086      	sub	sp, #24
 800122c:	af00      	add	r7, sp, #0
 800122e:	60f8      	str	r0, [r7, #12]
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	4611      	mov	r1, r2
 8001234:	461a      	mov	r2, r3
 8001236:	460b      	mov	r3, r1
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	4613      	mov	r3, r2
 800123c:	71bb      	strb	r3, [r7, #6]
	uint8_t limitedAngle = limitAngle(angle, minAngle, maxAngle);
 800123e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001242:	79b9      	ldrb	r1, [r7, #6]
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffd2 	bl	80011f0 <limitAngle>
 800124c:	4603      	mov	r3, r0
 800124e:	75fb      	strb	r3, [r7, #23]
	uint16_t pulse = angleToPulse(limitedAngle);
 8001250:	7dfb      	ldrb	r3, [r7, #23]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff ff88 	bl	8001168 <angleToPulse>
 8001258:	4603      	mov	r3, r0
 800125a:	82bb      	strh	r3, [r7, #20]
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d104      	bne.n	800126c <setMotorAngle+0x44>
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	8aba      	ldrh	r2, [r7, #20]
 8001268:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800126a:	e013      	b.n	8001294 <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	2b04      	cmp	r3, #4
 8001270:	d104      	bne.n	800127c <setMotorAngle+0x54>
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	8abb      	ldrh	r3, [r7, #20]
 8001278:	6393      	str	r3, [r2, #56]	@ 0x38
}
 800127a:	e00b      	b.n	8001294 <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d104      	bne.n	800128c <setMotorAngle+0x64>
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	8abb      	ldrh	r3, [r7, #20]
 8001288:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 800128a:	e003      	b.n	8001294 <setMotorAngle+0x6c>
	__HAL_TIM_SET_COMPARE(htim, channel, pulse);
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	8abb      	ldrh	r3, [r7, #20]
 8001292:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001294:	bf00      	nop
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	0000      	movs	r0, r0
	...

080012a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012a4:	ed2d 8b0a 	vpush	{d8-d12}
 80012a8:	b0a0      	sub	sp, #128	@ 0x80
 80012aa:	af16      	add	r7, sp, #88	@ 0x58
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ac:	f002 f812 	bl	80032d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b0:	f000 fc74 	bl	8001b9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b4:	f000 ff34 	bl	8002120 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012b8:	f000 ff08 	bl	80020cc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80012bc:	f000 fcdc 	bl	8001c78 <MX_TIM2_Init>
  MX_TIM3_Init();
 80012c0:	f000 fd5a 	bl	8001d78 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012c4:	f000 fdda 	bl	8001e7c <MX_TIM4_Init>
  MX_TIM14_Init();
 80012c8:	f000 feb2 	bl	8002030 <MX_TIM14_Init>
  MX_TIM5_Init();
 80012cc:	f000 fe4c 	bl	8001f68 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(GPIOA, shield_power_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2140      	movs	r1, #64	@ 0x40
 80012d4:	48b3      	ldr	r0, [pc, #716]	@ (80015a4 <main+0x304>)
 80012d6:	f002 fbbf 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim2);
 80012da:	48b3      	ldr	r0, [pc, #716]	@ (80015a8 <main+0x308>)
 80012dc:	f003 fa26 	bl	800472c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80012e0:	2104      	movs	r1, #4
 80012e2:	48b1      	ldr	r0, [pc, #708]	@ (80015a8 <main+0x308>)
 80012e4:	f003 fae2 	bl	80048ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012e8:	2108      	movs	r1, #8
 80012ea:	48af      	ldr	r0, [pc, #700]	@ (80015a8 <main+0x308>)
 80012ec:	f003 fade 	bl	80048ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80012f0:	2100      	movs	r1, #0
 80012f2:	48ae      	ldr	r0, [pc, #696]	@ (80015ac <main+0x30c>)
 80012f4:	f003 fada 	bl	80048ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80012f8:	2104      	movs	r1, #4
 80012fa:	48ac      	ldr	r0, [pc, #688]	@ (80015ac <main+0x30c>)
 80012fc:	f003 fad6 	bl	80048ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001300:	2100      	movs	r1, #0
 8001302:	48ab      	ldr	r0, [pc, #684]	@ (80015b0 <main+0x310>)
 8001304:	f003 fad2 	bl	80048ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim14, TIM_CHANNEL_1);
 8001308:	2100      	movs	r1, #0
 800130a:	48aa      	ldr	r0, [pc, #680]	@ (80015b4 <main+0x314>)
 800130c:	f003 face 	bl	80048ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001310:	2100      	movs	r1, #0
 8001312:	48a9      	ldr	r0, [pc, #676]	@ (80015b8 <main+0x318>)
 8001314:	f003 faca 	bl	80048ac <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001318:	2104      	movs	r1, #4
 800131a:	48a7      	ldr	r0, [pc, #668]	@ (80015b8 <main+0x318>)
 800131c:	f003 fac6 	bl	80048ac <HAL_TIM_PWM_Start>

	motorControl(control_1, control_2);
 8001320:	4ba6      	ldr	r3, [pc, #664]	@ (80015bc <main+0x31c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4aa6      	ldr	r2, [pc, #664]	@ (80015c0 <main+0x320>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	4611      	mov	r1, r2
 800132a:	4618      	mov	r0, r3
 800132c:	f001 f908 	bl	8002540 <motorControl>
	motorControl_r(control_1_r, control_2_r);
 8001330:	4ba4      	ldr	r3, [pc, #656]	@ (80015c4 <main+0x324>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4aa4      	ldr	r2, [pc, #656]	@ (80015c8 <main+0x328>)
 8001336:	6812      	ldr	r2, [r2, #0]
 8001338:	4611      	mov	r1, r2
 800133a:	4618      	mov	r0, r3
 800133c:	f001 f92e 	bl	800259c <motorControl_r>
	SystemCoreClockUpdate();
 8001340:	f001 ff1e 	bl	8003180 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / 1000);
 8001344:	4ba1      	ldr	r3, [pc, #644]	@ (80015cc <main+0x32c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4aa1      	ldr	r2, [pc, #644]	@ (80015d0 <main+0x330>)
 800134a:	fba2 2303 	umull	r2, r3, r2, r3
 800134e:	099b      	lsrs	r3, r3, #6
 8001350:	4618      	mov	r0, r3
 8001352:	f7ff fea7 	bl	80010a4 <SysTick_Config>
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rx_data, 1);
 8001356:	2201      	movs	r2, #1
 8001358:	499e      	ldr	r1, [pc, #632]	@ (80015d4 <main+0x334>)
 800135a:	489f      	ldr	r0, [pc, #636]	@ (80015d8 <main+0x338>)
 800135c:	f004 fa97 	bl	800588e <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{

		motorControl(control_1, control_2);
 8001360:	4b96      	ldr	r3, [pc, #600]	@ (80015bc <main+0x31c>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a96      	ldr	r2, [pc, #600]	@ (80015c0 <main+0x320>)
 8001366:	6812      	ldr	r2, [r2, #0]
 8001368:	4611      	mov	r1, r2
 800136a:	4618      	mov	r0, r3
 800136c:	f001 f8e8 	bl	8002540 <motorControl>
		motorControl_r(control_1_r, control_2_r);
 8001370:	4b94      	ldr	r3, [pc, #592]	@ (80015c4 <main+0x324>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a94      	ldr	r2, [pc, #592]	@ (80015c8 <main+0x328>)
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	4611      	mov	r1, r2
 800137a:	4618      	mov	r0, r3
 800137c:	f001 f90e 	bl	800259c <motorControl_r>
		//Pwm_Left(50);
		//Pwm_Right(50);

		Pwm_Left(abs(speed));
 8001380:	4b96      	ldr	r3, [pc, #600]	@ (80015dc <main+0x33c>)
 8001382:	edd3 7a00 	vldr	s15, [r3]
 8001386:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800138a:	ee17 3a90 	vmov	r3, s15
 800138e:	2b00      	cmp	r3, #0
 8001390:	bfb8      	it	lt
 8001392:	425b      	neglt	r3, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f000 ff7f 	bl	8002298 <Pwm_Left>
		Pwm_Right(abs(speed_r));
 800139a:	4b91      	ldr	r3, [pc, #580]	@ (80015e0 <main+0x340>)
 800139c:	edd3 7a00 	vldr	s15, [r3]
 80013a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013a4:	ee17 3a90 	vmov	r3, s15
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	bfb8      	it	lt
 80013ac:	425b      	neglt	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 ff82 	bl	80022b8 <Pwm_Right>


		/******************** Dead Reckoning ***********************/
		if(msTicks>=39){
 80013b4:	4b8b      	ldr	r3, [pc, #556]	@ (80015e4 <main+0x344>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2b26      	cmp	r3, #38	@ 0x26
 80013ba:	d9d1      	bls.n	8001360 <main+0xc0>
			time=msTicks;
 80013bc:	4b89      	ldr	r3, [pc, #548]	@ (80015e4 <main+0x344>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a89      	ldr	r2, [pc, #548]	@ (80015e8 <main+0x348>)
 80013c2:	6013      	str	r3, [r2, #0]
			current_angle = ((rpm_encoderCount - pr_encoderCount) * angle);
 80013c4:	4b89      	ldr	r3, [pc, #548]	@ (80015ec <main+0x34c>)
 80013c6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013ca:	4b89      	ldr	r3, [pc, #548]	@ (80015f0 <main+0x350>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	1a84      	subs	r4, r0, r2
 80013d2:	623c      	str	r4, [r7, #32]
 80013d4:	eb61 0303 	sbc.w	r3, r1, r3
 80013d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80013da:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80013de:	f7ff f8fd 	bl	80005dc <__aeabi_l2d>
 80013e2:	4b84      	ldr	r3, [pc, #528]	@ (80015f4 <main+0x354>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff f926 	bl	8000638 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4981      	ldr	r1, [pc, #516]	@ (80015f8 <main+0x358>)
 80013f2:	e9c1 2300 	strd	r2, r3, [r1]
			current_angle_r = ((rpm_encoderCount_r - pr_encoderCount_r) * angle);
 80013f6:	4b81      	ldr	r3, [pc, #516]	@ (80015fc <main+0x35c>)
 80013f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013fc:	4b80      	ldr	r3, [pc, #512]	@ (8001600 <main+0x360>)
 80013fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001402:	1a84      	subs	r4, r0, r2
 8001404:	61bc      	str	r4, [r7, #24]
 8001406:	eb61 0303 	sbc.w	r3, r1, r3
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001410:	f7ff f8e4 	bl	80005dc <__aeabi_l2d>
 8001414:	4b77      	ldr	r3, [pc, #476]	@ (80015f4 <main+0x354>)
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f7ff f90d 	bl	8000638 <__aeabi_dmul>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	4978      	ldr	r1, [pc, #480]	@ (8001604 <main+0x364>)
 8001424:	e9c1 2300 	strd	r2, r3, [r1]

			pr_encoderCount=rpm_encoderCount;
 8001428:	4b70      	ldr	r3, [pc, #448]	@ (80015ec <main+0x34c>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	4970      	ldr	r1, [pc, #448]	@ (80015f0 <main+0x350>)
 8001430:	e9c1 2300 	strd	r2, r3, [r1]
			pr_encoderCount_r=rpm_encoderCount_r;
 8001434:	4b71      	ldr	r3, [pc, #452]	@ (80015fc <main+0x35c>)
 8001436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800143a:	4971      	ldr	r1, [pc, #452]	@ (8001600 <main+0x360>)
 800143c:	e9c1 2300 	strd	r2, r3, [r1]

			delta_s = ((current_angle_r + current_angle) * rr) / 2;
 8001440:	4b70      	ldr	r3, [pc, #448]	@ (8001604 <main+0x364>)
 8001442:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001446:	4b6c      	ldr	r3, [pc, #432]	@ (80015f8 <main+0x358>)
 8001448:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144c:	f7fe ff3e 	bl	80002cc <__adddf3>
 8001450:	4602      	mov	r2, r0
 8001452:	460b      	mov	r3, r1
 8001454:	4610      	mov	r0, r2
 8001456:	4619      	mov	r1, r3
 8001458:	4b6b      	ldr	r3, [pc, #428]	@ (8001608 <main+0x368>)
 800145a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800145e:	f7ff f8eb 	bl	8000638 <__aeabi_dmul>
 8001462:	4602      	mov	r2, r0
 8001464:	460b      	mov	r3, r1
 8001466:	4610      	mov	r0, r2
 8001468:	4619      	mov	r1, r3
 800146a:	f04f 0200 	mov.w	r2, #0
 800146e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001472:	f7ff fa0b 	bl	800088c <__aeabi_ddiv>
 8001476:	4602      	mov	r2, r0
 8001478:	460b      	mov	r3, r1
 800147a:	4964      	ldr	r1, [pc, #400]	@ (800160c <main+0x36c>)
 800147c:	e9c1 2300 	strd	r2, r3, [r1]
			delta_o = ((current_angle_r - current_angle) * rr) / ll;
 8001480:	4b60      	ldr	r3, [pc, #384]	@ (8001604 <main+0x364>)
 8001482:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001486:	4b5c      	ldr	r3, [pc, #368]	@ (80015f8 <main+0x358>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7fe ff1c 	bl	80002c8 <__aeabi_dsub>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	4b5b      	ldr	r3, [pc, #364]	@ (8001608 <main+0x368>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f8cb 	bl	8000638 <__aeabi_dmul>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	4b59      	ldr	r3, [pc, #356]	@ (8001610 <main+0x370>)
 80014ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014b0:	f7ff f9ec 	bl	800088c <__aeabi_ddiv>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4956      	ldr	r1, [pc, #344]	@ (8001614 <main+0x374>)
 80014ba:	e9c1 2300 	strd	r2, r3, [r1]
			input_delta_o = previous_car_angle + (delta_o / 2); //Real
 80014be:	4b55      	ldr	r3, [pc, #340]	@ (8001614 <main+0x374>)
 80014c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80014c4:	f04f 0200 	mov.w	r2, #0
 80014c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014cc:	f7ff f9de 	bl	800088c <__aeabi_ddiv>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	4b4f      	ldr	r3, [pc, #316]	@ (8001618 <main+0x378>)
 80014da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014de:	f7fe fef5 	bl	80002cc <__adddf3>
 80014e2:	4602      	mov	r2, r0
 80014e4:	460b      	mov	r3, r1
 80014e6:	494d      	ldr	r1, [pc, #308]	@ (800161c <main+0x37c>)
 80014e8:	e9c1 2300 	strd	r2, r3, [r1]


			current_x = previous_current_x + cos((input_delta_o)) * delta_s;
 80014ec:	4b4b      	ldr	r3, [pc, #300]	@ (800161c <main+0x37c>)
 80014ee:	ed93 7b00 	vldr	d7, [r3]
 80014f2:	eeb0 0a47 	vmov.f32	s0, s14
 80014f6:	eef0 0a67 	vmov.f32	s1, s15
 80014fa:	f009 fd0d 	bl	800af18 <cos>
 80014fe:	ec51 0b10 	vmov	r0, r1, d0
 8001502:	4b42      	ldr	r3, [pc, #264]	@ (800160c <main+0x36c>)
 8001504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001508:	f7ff f896 	bl	8000638 <__aeabi_dmul>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	4b42      	ldr	r3, [pc, #264]	@ (8001620 <main+0x380>)
 8001516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800151a:	f7fe fed7 	bl	80002cc <__adddf3>
 800151e:	4602      	mov	r2, r0
 8001520:	460b      	mov	r3, r1
 8001522:	4940      	ldr	r1, [pc, #256]	@ (8001624 <main+0x384>)
 8001524:	e9c1 2300 	strd	r2, r3, [r1]
			current_y = previous_current_y + sin((input_delta_o)) * delta_s;
 8001528:	4b3c      	ldr	r3, [pc, #240]	@ (800161c <main+0x37c>)
 800152a:	ed93 7b00 	vldr	d7, [r3]
 800152e:	eeb0 0a47 	vmov.f32	s0, s14
 8001532:	eef0 0a67 	vmov.f32	s1, s15
 8001536:	f009 fd43 	bl	800afc0 <sin>
 800153a:	ec51 0b10 	vmov	r0, r1, d0
 800153e:	4b33      	ldr	r3, [pc, #204]	@ (800160c <main+0x36c>)
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f7ff f878 	bl	8000638 <__aeabi_dmul>
 8001548:	4602      	mov	r2, r0
 800154a:	460b      	mov	r3, r1
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	4b35      	ldr	r3, [pc, #212]	@ (8001628 <main+0x388>)
 8001552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001556:	f7fe feb9 	bl	80002cc <__adddf3>
 800155a:	4602      	mov	r2, r0
 800155c:	460b      	mov	r3, r1
 800155e:	4933      	ldr	r1, [pc, #204]	@ (800162c <main+0x38c>)
 8001560:	e9c1 2300 	strd	r2, r3, [r1]
			car_angle = previous_car_angle + delta_o;
 8001564:	4b2c      	ldr	r3, [pc, #176]	@ (8001618 <main+0x378>)
 8001566:	e9d3 0100 	ldrd	r0, r1, [r3]
 800156a:	4b2a      	ldr	r3, [pc, #168]	@ (8001614 <main+0x374>)
 800156c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001570:	f7fe feac 	bl	80002cc <__adddf3>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	492d      	ldr	r1, [pc, #180]	@ (8001630 <main+0x390>)
 800157a:	e9c1 2300 	strd	r2, r3, [r1]

			pid_delta_o = delta_o;
 800157e:	4b25      	ldr	r3, [pc, #148]	@ (8001614 <main+0x374>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	492b      	ldr	r1, [pc, #172]	@ (8001634 <main+0x394>)
 8001586:	e9c1 2300 	strd	r2, r3, [r1]
			dt = time;
 800158a:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <main+0x348>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe ffd8 	bl	8000544 <__aeabi_ui2d>
 8001594:	4602      	mov	r2, r0
 8001596:	460b      	mov	r3, r1
 8001598:	4927      	ldr	r1, [pc, #156]	@ (8001638 <main+0x398>)
 800159a:	e9c1 2300 	strd	r2, r3, [r1]

			topic_x = delta_s/(dt / 1000.0);
 800159e:	4b1b      	ldr	r3, [pc, #108]	@ (800160c <main+0x36c>)
 80015a0:	e04c      	b.n	800163c <main+0x39c>
 80015a2:	bf00      	nop
 80015a4:	40020000 	.word	0x40020000
 80015a8:	2000023c 	.word	0x2000023c
 80015ac:	20000284 	.word	0x20000284
 80015b0:	200002cc 	.word	0x200002cc
 80015b4:	2000035c 	.word	0x2000035c
 80015b8:	20000314 	.word	0x20000314
 80015bc:	200004f8 	.word	0x200004f8
 80015c0:	20000030 	.word	0x20000030
 80015c4:	20000034 	.word	0x20000034
 80015c8:	200004fc 	.word	0x200004fc
 80015cc:	20000038 	.word	0x20000038
 80015d0:	10624dd3 	.word	0x10624dd3
 80015d4:	20000608 	.word	0x20000608
 80015d8:	200003a4 	.word	0x200003a4
 80015dc:	20000438 	.word	0x20000438
 80015e0:	2000043c 	.word	0x2000043c
 80015e4:	20000694 	.word	0x20000694
 80015e8:	20000690 	.word	0x20000690
 80015ec:	20000408 	.word	0x20000408
 80015f0:	20000418 	.word	0x20000418
 80015f4:	20000000 	.word	0x20000000
 80015f8:	20000428 	.word	0x20000428
 80015fc:	20000410 	.word	0x20000410
 8001600:	20000420 	.word	0x20000420
 8001604:	20000430 	.word	0x20000430
 8001608:	20000028 	.word	0x20000028
 800160c:	200004c8 	.word	0x200004c8
 8001610:	20000020 	.word	0x20000020
 8001614:	200004d0 	.word	0x200004d0
 8001618:	200004b0 	.word	0x200004b0
 800161c:	200004e8 	.word	0x200004e8
 8001620:	200004b8 	.word	0x200004b8
 8001624:	20000488 	.word	0x20000488
 8001628:	200004c0 	.word	0x200004c0
 800162c:	20000490 	.word	0x20000490
 8001630:	20000480 	.word	0x20000480
 8001634:	200004f0 	.word	0x200004f0
 8001638:	20000678 	.word	0x20000678
 800163c:	e9d3 4500 	ldrd	r4, r5, [r3]
 8001640:	4bb5      	ldr	r3, [pc, #724]	@ (8001918 <main+0x678>)
 8001642:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001646:	f04f 0200 	mov.w	r2, #0
 800164a:	4bb4      	ldr	r3, [pc, #720]	@ (800191c <main+0x67c>)
 800164c:	f7ff f91e 	bl	800088c <__aeabi_ddiv>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4620      	mov	r0, r4
 8001656:	4629      	mov	r1, r5
 8001658:	f7ff f918 	bl	800088c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	49af      	ldr	r1, [pc, #700]	@ (8001920 <main+0x680>)
 8001662:	e9c1 2300 	strd	r2, r3, [r1]
			topic_th = car_angle;
 8001666:	4baf      	ldr	r3, [pc, #700]	@ (8001924 <main+0x684>)
 8001668:	e9d3 2300 	ldrd	r2, r3, [r3]
 800166c:	49ae      	ldr	r1, [pc, #696]	@ (8001928 <main+0x688>)
 800166e:	e9c1 2300 	strd	r2, r3, [r1]
			topic_y=(car_angle-previous_car_angle)*1000/dt;//vth
 8001672:	4bac      	ldr	r3, [pc, #688]	@ (8001924 <main+0x684>)
 8001674:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001678:	4bac      	ldr	r3, [pc, #688]	@ (800192c <main+0x68c>)
 800167a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800167e:	f7fe fe23 	bl	80002c8 <__aeabi_dsub>
 8001682:	4602      	mov	r2, r0
 8001684:	460b      	mov	r3, r1
 8001686:	4610      	mov	r0, r2
 8001688:	4619      	mov	r1, r3
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	4ba3      	ldr	r3, [pc, #652]	@ (800191c <main+0x67c>)
 8001690:	f7fe ffd2 	bl	8000638 <__aeabi_dmul>
 8001694:	4602      	mov	r2, r0
 8001696:	460b      	mov	r3, r1
 8001698:	4610      	mov	r0, r2
 800169a:	4619      	mov	r1, r3
 800169c:	4b9e      	ldr	r3, [pc, #632]	@ (8001918 <main+0x678>)
 800169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016a2:	f7ff f8f3 	bl	800088c <__aeabi_ddiv>
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	49a1      	ldr	r1, [pc, #644]	@ (8001930 <main+0x690>)
 80016ac:	e9c1 2300 	strd	r2, r3, [r1]

			printf("# %f %f %f %f %f %f | %f %f %f %f %f %f \n",current_x,current_y,topic_th,dt,topic_x,topic_y, motor_degree[0], motor_degree[1], motor_degree[2], motor_degree[3], motor_degree[4], motor_degree[5]);
 80016b0:	4ba0      	ldr	r3, [pc, #640]	@ (8001934 <main+0x694>)
 80016b2:	ed93 7b00 	vldr	d7, [r3]
 80016b6:	ed87 7b04 	vstr	d7, [r7, #16]
 80016ba:	4b9f      	ldr	r3, [pc, #636]	@ (8001938 <main+0x698>)
 80016bc:	ed93 9b00 	vldr	d9, [r3]
 80016c0:	4b99      	ldr	r3, [pc, #612]	@ (8001928 <main+0x688>)
 80016c2:	ed93 ab00 	vldr	d10, [r3]
 80016c6:	4b94      	ldr	r3, [pc, #592]	@ (8001918 <main+0x678>)
 80016c8:	ed93 bb00 	vldr	d11, [r3]
 80016cc:	4b94      	ldr	r3, [pc, #592]	@ (8001920 <main+0x680>)
 80016ce:	ed93 cb00 	vldr	d12, [r3]
 80016d2:	4b97      	ldr	r3, [pc, #604]	@ (8001930 <main+0x690>)
 80016d4:	ed93 8b00 	vldr	d8, [r3]
 80016d8:	4b98      	ldr	r3, [pc, #608]	@ (800193c <main+0x69c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4618      	mov	r0, r3
 80016de:	f7fe ff53 	bl	8000588 <__aeabi_f2d>
 80016e2:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80016e6:	4b95      	ldr	r3, [pc, #596]	@ (800193c <main+0x69c>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe ff4c 	bl	8000588 <__aeabi_f2d>
 80016f0:	e9c7 0100 	strd	r0, r1, [r7]
 80016f4:	4b91      	ldr	r3, [pc, #580]	@ (800193c <main+0x69c>)
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7fe ff45 	bl	8000588 <__aeabi_f2d>
 80016fe:	4682      	mov	sl, r0
 8001700:	468b      	mov	fp, r1
 8001702:	4b8e      	ldr	r3, [pc, #568]	@ (800193c <main+0x69c>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	4618      	mov	r0, r3
 8001708:	f7fe ff3e 	bl	8000588 <__aeabi_f2d>
 800170c:	4680      	mov	r8, r0
 800170e:	4689      	mov	r9, r1
 8001710:	4b8a      	ldr	r3, [pc, #552]	@ (800193c <main+0x69c>)
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff37 	bl	8000588 <__aeabi_f2d>
 800171a:	4604      	mov	r4, r0
 800171c:	460d      	mov	r5, r1
 800171e:	4b87      	ldr	r3, [pc, #540]	@ (800193c <main+0x69c>)
 8001720:	695b      	ldr	r3, [r3, #20]
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff30 	bl	8000588 <__aeabi_f2d>
 8001728:	4602      	mov	r2, r0
 800172a:	460b      	mov	r3, r1
 800172c:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
 8001730:	e9cd 4512 	strd	r4, r5, [sp, #72]	@ 0x48
 8001734:	e9cd 8910 	strd	r8, r9, [sp, #64]	@ 0x40
 8001738:	e9cd ab0e 	strd	sl, fp, [sp, #56]	@ 0x38
 800173c:	ed97 7b00 	vldr	d7, [r7]
 8001740:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8001744:	ed97 7b02 	vldr	d7, [r7, #8]
 8001748:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800174c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8001750:	ed8d cb06 	vstr	d12, [sp, #24]
 8001754:	ed8d bb04 	vstr	d11, [sp, #16]
 8001758:	ed8d ab02 	vstr	d10, [sp, #8]
 800175c:	ed8d 9b00 	vstr	d9, [sp]
 8001760:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001764:	4876      	ldr	r0, [pc, #472]	@ (8001940 <main+0x6a0>)
 8001766:	f006 fd53 	bl	8008210 <iprintf>

			previous_car_angle = car_angle;
 800176a:	4b6e      	ldr	r3, [pc, #440]	@ (8001924 <main+0x684>)
 800176c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001770:	496e      	ldr	r1, [pc, #440]	@ (800192c <main+0x68c>)
 8001772:	e9c1 2300 	strd	r2, r3, [r1]
			previous_current_x = current_x;
 8001776:	4b6f      	ldr	r3, [pc, #444]	@ (8001934 <main+0x694>)
 8001778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800177c:	4971      	ldr	r1, [pc, #452]	@ (8001944 <main+0x6a4>)
 800177e:	e9c1 2300 	strd	r2, r3, [r1]
			previous_current_y = current_y;
 8001782:	4b6d      	ldr	r3, [pc, #436]	@ (8001938 <main+0x698>)
 8001784:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001788:	496f      	ldr	r1, [pc, #444]	@ (8001948 <main+0x6a8>)
 800178a:	e9c1 2300 	strd	r2, r3, [r1]

			encoderCount = 0;
 800178e:	496f      	ldr	r1, [pc, #444]	@ (800194c <main+0x6ac>)
 8001790:	f04f 0200 	mov.w	r2, #0
 8001794:	f04f 0300 	mov.w	r3, #0
 8001798:	e9c1 2300 	strd	r2, r3, [r1]
			encoderCount_r = 0;
 800179c:	496c      	ldr	r1, [pc, #432]	@ (8001950 <main+0x6b0>)
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	f04f 0300 	mov.w	r3, #0
 80017a6:	e9c1 2300 	strd	r2, r3, [r1]

			last_delta_s = sqrt((current_x - last_x) * (current_x - last_x) + (current_y - last_y) * (current_y - last_y));
 80017aa:	4b62      	ldr	r3, [pc, #392]	@ (8001934 <main+0x694>)
 80017ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017b0:	4b68      	ldr	r3, [pc, #416]	@ (8001954 <main+0x6b4>)
 80017b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017b6:	f7fe fd87 	bl	80002c8 <__aeabi_dsub>
 80017ba:	4602      	mov	r2, r0
 80017bc:	460b      	mov	r3, r1
 80017be:	4614      	mov	r4, r2
 80017c0:	461d      	mov	r5, r3
 80017c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001934 <main+0x694>)
 80017c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017c8:	4b62      	ldr	r3, [pc, #392]	@ (8001954 <main+0x6b4>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe fd7b 	bl	80002c8 <__aeabi_dsub>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe ff2d 	bl	8000638 <__aeabi_dmul>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4614      	mov	r4, r2
 80017e4:	461d      	mov	r5, r3
 80017e6:	4b54      	ldr	r3, [pc, #336]	@ (8001938 <main+0x698>)
 80017e8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001958 <main+0x6b8>)
 80017ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f2:	f7fe fd69 	bl	80002c8 <__aeabi_dsub>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4690      	mov	r8, r2
 80017fc:	4699      	mov	r9, r3
 80017fe:	4b4e      	ldr	r3, [pc, #312]	@ (8001938 <main+0x698>)
 8001800:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001804:	4b54      	ldr	r3, [pc, #336]	@ (8001958 <main+0x6b8>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe fd5d 	bl	80002c8 <__aeabi_dsub>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	4640      	mov	r0, r8
 8001814:	4649      	mov	r1, r9
 8001816:	f7fe ff0f 	bl	8000638 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4620      	mov	r0, r4
 8001820:	4629      	mov	r1, r5
 8001822:	f7fe fd53 	bl	80002cc <__adddf3>
 8001826:	4602      	mov	r2, r0
 8001828:	460b      	mov	r3, r1
 800182a:	ec43 2b17 	vmov	d7, r2, r3
 800182e:	eeb0 0a47 	vmov.f32	s0, s14
 8001832:	eef0 0a67 	vmov.f32	s1, s15
 8001836:	f009 fb43 	bl	800aec0 <sqrt>
 800183a:	eeb0 7a40 	vmov.f32	s14, s0
 800183e:	eef0 7a60 	vmov.f32	s15, s1
 8001842:	4b46      	ldr	r3, [pc, #280]	@ (800195c <main+0x6bc>)
 8001844:	ed83 7b00 	vstr	d7, [r3]
			last_delta_o = (car_angle - last_th);
 8001848:	4b36      	ldr	r3, [pc, #216]	@ (8001924 <main+0x684>)
 800184a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800184e:	4b44      	ldr	r3, [pc, #272]	@ (8001960 <main+0x6c0>)
 8001850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001854:	f7fe fd38 	bl	80002c8 <__aeabi_dsub>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4941      	ldr	r1, [pc, #260]	@ (8001964 <main+0x6c4>)
 800185e:	e9c1 2300 	strd	r2, r3, [r1]

			/******************** PID ***********************/
			error = (cmd_vel_s - (delta_s / 0.039));
 8001862:	4b41      	ldr	r3, [pc, #260]	@ (8001968 <main+0x6c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7fe fe8e 	bl	8000588 <__aeabi_f2d>
 800186c:	4604      	mov	r4, r0
 800186e:	460d      	mov	r5, r1
 8001870:	4b3e      	ldr	r3, [pc, #248]	@ (800196c <main+0x6cc>)
 8001872:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001876:	a326      	add	r3, pc, #152	@ (adr r3, 8001910 <main+0x670>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	f7ff f806 	bl	800088c <__aeabi_ddiv>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4620      	mov	r0, r4
 8001886:	4629      	mov	r1, r5
 8001888:	f7fe fd1e 	bl	80002c8 <__aeabi_dsub>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f9c8 	bl	8000c28 <__aeabi_d2f>
 8001898:	4603      	mov	r3, r0
 800189a:	4a35      	ldr	r2, [pc, #212]	@ (8001970 <main+0x6d0>)
 800189c:	6013      	str	r3, [r2, #0]
			error_a = (cmd_vel_th - (pid_delta_o / 0.039));
 800189e:	4b35      	ldr	r3, [pc, #212]	@ (8001974 <main+0x6d4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe fe70 	bl	8000588 <__aeabi_f2d>
 80018a8:	4604      	mov	r4, r0
 80018aa:	460d      	mov	r5, r1
 80018ac:	4b32      	ldr	r3, [pc, #200]	@ (8001978 <main+0x6d8>)
 80018ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80018b2:	a317      	add	r3, pc, #92	@ (adr r3, 8001910 <main+0x670>)
 80018b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018b8:	f7fe ffe8 	bl	800088c <__aeabi_ddiv>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fd00 	bl	80002c8 <__aeabi_dsub>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff f9aa 	bl	8000c28 <__aeabi_d2f>
 80018d4:	4603      	mov	r3, r0
 80018d6:	4a29      	ldr	r2, [pc, #164]	@ (800197c <main+0x6dc>)
 80018d8:	6013      	str	r3, [r2, #0]
			P_term = (error - previous_error) * Kp;
 80018da:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <main+0x6d0>)
 80018dc:	ed93 7a00 	vldr	s14, [r3]
 80018e0:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <main+0x6e0>)
 80018e2:	edd3 7a00 	vldr	s15, [r3]
 80018e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018ea:	4b26      	ldr	r3, [pc, #152]	@ (8001984 <main+0x6e4>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018f4:	4b24      	ldr	r3, [pc, #144]	@ (8001988 <main+0x6e8>)
 80018f6:	edc3 7a00 	vstr	s15, [r3]
			D_term = (error - 2 * previous_error + old_error) * Kd;
 80018fa:	4b1d      	ldr	r3, [pc, #116]	@ (8001970 <main+0x6d0>)
 80018fc:	ed93 7a00 	vldr	s14, [r3]
 8001900:	4b1f      	ldr	r3, [pc, #124]	@ (8001980 <main+0x6e0>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800190a:	e03f      	b.n	800198c <main+0x6ec>
 800190c:	f3af 8000 	nop.w
 8001910:	d916872b 	.word	0xd916872b
 8001914:	3fa3f7ce 	.word	0x3fa3f7ce
 8001918:	20000678 	.word	0x20000678
 800191c:	408f4000 	.word	0x408f4000
 8001920:	20000660 	.word	0x20000660
 8001924:	20000480 	.word	0x20000480
 8001928:	20000670 	.word	0x20000670
 800192c:	200004b0 	.word	0x200004b0
 8001930:	20000668 	.word	0x20000668
 8001934:	20000488 	.word	0x20000488
 8001938:	20000490 	.word	0x20000490
 800193c:	20000644 	.word	0x20000644
 8001940:	0800c1f4 	.word	0x0800c1f4
 8001944:	200004b8 	.word	0x200004b8
 8001948:	200004c0 	.word	0x200004c0
 800194c:	200003f8 	.word	0x200003f8
 8001950:	20000400 	.word	0x20000400
 8001954:	20000498 	.word	0x20000498
 8001958:	200004a0 	.word	0x200004a0
 800195c:	200004d8 	.word	0x200004d8
 8001960:	200004a8 	.word	0x200004a8
 8001964:	200004e0 	.word	0x200004e0
 8001968:	20000688 	.word	0x20000688
 800196c:	200004c8 	.word	0x200004c8
 8001970:	20000460 	.word	0x20000460
 8001974:	2000068c 	.word	0x2000068c
 8001978:	200004f0 	.word	0x200004f0
 800197c:	2000046c 	.word	0x2000046c
 8001980:	20000464 	.word	0x20000464
 8001984:	20000008 	.word	0x20000008
 8001988:	20000440 	.word	0x20000440
 800198c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001990:	4b6b      	ldr	r3, [pc, #428]	@ (8001b40 <main+0x8a0>)
 8001992:	edd3 7a00 	vldr	s15, [r3]
 8001996:	ee37 7a27 	vadd.f32	s14, s14, s15
 800199a:	4b6a      	ldr	r3, [pc, #424]	@ (8001b44 <main+0x8a4>)
 800199c:	edd3 7a00 	vldr	s15, [r3]
 80019a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a4:	4b68      	ldr	r3, [pc, #416]	@ (8001b48 <main+0x8a8>)
 80019a6:	edc3 7a00 	vstr	s15, [r3]
			I_term = error * Ki;
 80019aa:	4b68      	ldr	r3, [pc, #416]	@ (8001b4c <main+0x8ac>)
 80019ac:	ed93 7a00 	vldr	s14, [r3]
 80019b0:	4b67      	ldr	r3, [pc, #412]	@ (8001b50 <main+0x8b0>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ba:	4b66      	ldr	r3, [pc, #408]	@ (8001b54 <main+0x8b4>)
 80019bc:	edc3 7a00 	vstr	s15, [r3]
			pid = P_term + D_term + I_term;
 80019c0:	4b65      	ldr	r3, [pc, #404]	@ (8001b58 <main+0x8b8>)
 80019c2:	ed93 7a00 	vldr	s14, [r3]
 80019c6:	4b60      	ldr	r3, [pc, #384]	@ (8001b48 <main+0x8a8>)
 80019c8:	edd3 7a00 	vldr	s15, [r3]
 80019cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019d0:	4b60      	ldr	r3, [pc, #384]	@ (8001b54 <main+0x8b4>)
 80019d2:	edd3 7a00 	vldr	s15, [r3]
 80019d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019da:	4b60      	ldr	r3, [pc, #384]	@ (8001b5c <main+0x8bc>)
 80019dc:	edc3 7a00 	vstr	s15, [r3]

			P_term_a = (error_a - previous_error_a) * Kp_a;
 80019e0:	4b5f      	ldr	r3, [pc, #380]	@ (8001b60 <main+0x8c0>)
 80019e2:	ed93 7a00 	vldr	s14, [r3]
 80019e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001b64 <main+0x8c4>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019f0:	4b5d      	ldr	r3, [pc, #372]	@ (8001b68 <main+0x8c8>)
 80019f2:	edd3 7a00 	vldr	s15, [r3]
 80019f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019fa:	4b5c      	ldr	r3, [pc, #368]	@ (8001b6c <main+0x8cc>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]
			D_term_a = (error_a - 2 * previous_error_a + old_error_a) * Kd_a;
 8001a00:	4b57      	ldr	r3, [pc, #348]	@ (8001b60 <main+0x8c0>)
 8001a02:	ed93 7a00 	vldr	s14, [r3]
 8001a06:	4b57      	ldr	r3, [pc, #348]	@ (8001b64 <main+0x8c4>)
 8001a08:	edd3 7a00 	vldr	s15, [r3]
 8001a0c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a14:	4b56      	ldr	r3, [pc, #344]	@ (8001b70 <main+0x8d0>)
 8001a16:	edd3 7a00 	vldr	s15, [r3]
 8001a1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a1e:	4b55      	ldr	r3, [pc, #340]	@ (8001b74 <main+0x8d4>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a28:	4b53      	ldr	r3, [pc, #332]	@ (8001b78 <main+0x8d8>)
 8001a2a:	edc3 7a00 	vstr	s15, [r3]
			I_term_a = error_a * Ki_a;
 8001a2e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b60 <main+0x8c0>)
 8001a30:	ed93 7a00 	vldr	s14, [r3]
 8001a34:	4b51      	ldr	r3, [pc, #324]	@ (8001b7c <main+0x8dc>)
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a3e:	4b50      	ldr	r3, [pc, #320]	@ (8001b80 <main+0x8e0>)
 8001a40:	edc3 7a00 	vstr	s15, [r3]
			pid_a = P_term_a + D_term_a + I_term_a;
 8001a44:	4b49      	ldr	r3, [pc, #292]	@ (8001b6c <main+0x8cc>)
 8001a46:	ed93 7a00 	vldr	s14, [r3]
 8001a4a:	4b4b      	ldr	r3, [pc, #300]	@ (8001b78 <main+0x8d8>)
 8001a4c:	edd3 7a00 	vldr	s15, [r3]
 8001a50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a54:	4b4a      	ldr	r3, [pc, #296]	@ (8001b80 <main+0x8e0>)
 8001a56:	edd3 7a00 	vldr	s15, [r3]
 8001a5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a5e:	4b49      	ldr	r3, [pc, #292]	@ (8001b84 <main+0x8e4>)
 8001a60:	edc3 7a00 	vstr	s15, [r3]
			test+=pid_a;
 8001a64:	4b47      	ldr	r3, [pc, #284]	@ (8001b84 <main+0x8e4>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7fe fd8d 	bl	8000588 <__aeabi_f2d>
 8001a6e:	4b46      	ldr	r3, [pc, #280]	@ (8001b88 <main+0x8e8>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fc2a 	bl	80002cc <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4942      	ldr	r1, [pc, #264]	@ (8001b88 <main+0x8e8>)
 8001a7e:	e9c1 2300 	strd	r2, r3, [r1]
			if (stop_flag == 0) {
 8001a82:	4b42      	ldr	r3, [pc, #264]	@ (8001b8c <main+0x8ec>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d120      	bne.n	8001acc <main+0x82c>
				speed = speed + pid - pid_a;
 8001a8a:	4b41      	ldr	r3, [pc, #260]	@ (8001b90 <main+0x8f0>)
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	4b32      	ldr	r3, [pc, #200]	@ (8001b5c <main+0x8bc>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a9a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b84 <main+0x8e4>)
 8001a9c:	edd3 7a00 	vldr	s15, [r3]
 8001aa0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aa4:	4b3a      	ldr	r3, [pc, #232]	@ (8001b90 <main+0x8f0>)
 8001aa6:	edc3 7a00 	vstr	s15, [r3]
				speed_r = speed_r + pid + pid_a;
 8001aaa:	4b3a      	ldr	r3, [pc, #232]	@ (8001b94 <main+0x8f4>)
 8001aac:	ed93 7a00 	vldr	s14, [r3]
 8001ab0:	4b2a      	ldr	r3, [pc, #168]	@ (8001b5c <main+0x8bc>)
 8001ab2:	edd3 7a00 	vldr	s15, [r3]
 8001ab6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aba:	4b32      	ldr	r3, [pc, #200]	@ (8001b84 <main+0x8e4>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac4:	4b33      	ldr	r3, [pc, #204]	@ (8001b94 <main+0x8f4>)
 8001ac6:	edc3 7a00 	vstr	s15, [r3]
 8001aca:	e01d      	b.n	8001b08 <main+0x868>
			} else {
				speed = speed - (speed) / 5;
 8001acc:	4b30      	ldr	r3, [pc, #192]	@ (8001b90 <main+0x8f0>)
 8001ace:	ed93 7a00 	vldr	s14, [r3]
 8001ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <main+0x8f0>)
 8001ad4:	edd3 6a00 	vldr	s13, [r3]
 8001ad8:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 8001adc:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ae0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <main+0x8f0>)
 8001ae6:	edc3 7a00 	vstr	s15, [r3]
				speed_r = speed_r - (speed_r) / 5;
 8001aea:	4b2a      	ldr	r3, [pc, #168]	@ (8001b94 <main+0x8f4>)
 8001aec:	ed93 7a00 	vldr	s14, [r3]
 8001af0:	4b28      	ldr	r3, [pc, #160]	@ (8001b94 <main+0x8f4>)
 8001af2:	edd3 6a00 	vldr	s13, [r3]
 8001af6:	eeb1 6a04 	vmov.f32	s12, #20	@ 0x40a00000  5.0
 8001afa:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001afe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b02:	4b24      	ldr	r3, [pc, #144]	@ (8001b94 <main+0x8f4>)
 8001b04:	edc3 7a00 	vstr	s15, [r3]
			}

			old_error = previous_error;
 8001b08:	4b23      	ldr	r3, [pc, #140]	@ (8001b98 <main+0x8f8>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001b40 <main+0x8a0>)
 8001b0e:	6013      	str	r3, [r2, #0]
			old_error_a = previous_error_a;
 8001b10:	4b14      	ldr	r3, [pc, #80]	@ (8001b64 <main+0x8c4>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a16      	ldr	r2, [pc, #88]	@ (8001b70 <main+0x8d0>)
 8001b16:	6013      	str	r3, [r2, #0]
			previous_error = error;
 8001b18:	4b0c      	ldr	r3, [pc, #48]	@ (8001b4c <main+0x8ac>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b98 <main+0x8f8>)
 8001b1e:	6013      	str	r3, [r2, #0]
			previous_error_a = error_a;
 8001b20:	4b0f      	ldr	r3, [pc, #60]	@ (8001b60 <main+0x8c0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a0f      	ldr	r2, [pc, #60]	@ (8001b64 <main+0x8c4>)
 8001b26:	6013      	str	r3, [r2, #0]

			check_pwm();
 8001b28:	f000 fd64 	bl	80025f4 <check_pwm>
			check_pwm_r();
 8001b2c:	f000 fd90 	bl	8002650 <check_pwm_r>

			check_move_state();
 8001b30:	f000 fdbc 	bl	80026ac <check_move_state>
			check_move_state_r();
 8001b34:	f000 fde4 	bl	8002700 <check_move_state_r>

			cmd_vel_calculate();
 8001b38:	f000 fe0c 	bl	8002754 <cmd_vel_calculate>
		motorControl(control_1, control_2);
 8001b3c:	e410      	b.n	8001360 <main+0xc0>
 8001b3e:	bf00      	nop
 8001b40:	20000468 	.word	0x20000468
 8001b44:	2000000c 	.word	0x2000000c
 8001b48:	20000444 	.word	0x20000444
 8001b4c:	20000460 	.word	0x20000460
 8001b50:	20000010 	.word	0x20000010
 8001b54:	20000448 	.word	0x20000448
 8001b58:	20000440 	.word	0x20000440
 8001b5c:	2000044c 	.word	0x2000044c
 8001b60:	2000046c 	.word	0x2000046c
 8001b64:	20000470 	.word	0x20000470
 8001b68:	20000014 	.word	0x20000014
 8001b6c:	20000450 	.word	0x20000450
 8001b70:	20000474 	.word	0x20000474
 8001b74:	20000018 	.word	0x20000018
 8001b78:	20000454 	.word	0x20000454
 8001b7c:	2000001c 	.word	0x2000001c
 8001b80:	20000458 	.word	0x20000458
 8001b84:	2000045c 	.word	0x2000045c
 8001b88:	200003f0 	.word	0x200003f0
 8001b8c:	20000478 	.word	0x20000478
 8001b90:	20000438 	.word	0x20000438
 8001b94:	2000043c 	.word	0x2000043c
 8001b98:	20000464 	.word	0x20000464

08001b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b094      	sub	sp, #80	@ 0x50
 8001ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ba2:	f107 031c 	add.w	r3, r7, #28
 8001ba6:	2234      	movs	r2, #52	@ 0x34
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f006 fba5 	bl	80082fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bb0:	f107 0308 	add.w	r3, r7, #8
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	601a      	str	r2, [r3, #0]
 8001bb8:	605a      	str	r2, [r3, #4]
 8001bba:	609a      	str	r2, [r3, #8]
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	607b      	str	r3, [r7, #4]
 8001bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c70 <SystemClock_Config+0xd4>)
 8001bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc8:	4a29      	ldr	r2, [pc, #164]	@ (8001c70 <SystemClock_Config+0xd4>)
 8001bca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bd0:	4b27      	ldr	r3, [pc, #156]	@ (8001c70 <SystemClock_Config+0xd4>)
 8001bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bdc:	2300      	movs	r3, #0
 8001bde:	603b      	str	r3, [r7, #0]
 8001be0:	4b24      	ldr	r3, [pc, #144]	@ (8001c74 <SystemClock_Config+0xd8>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001be8:	4a22      	ldr	r2, [pc, #136]	@ (8001c74 <SystemClock_Config+0xd8>)
 8001bea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	4b20      	ldr	r3, [pc, #128]	@ (8001c74 <SystemClock_Config+0xd8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001bf8:	603b      	str	r3, [r7, #0]
 8001bfa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c00:	2301      	movs	r3, #1
 8001c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c04:	2310      	movs	r3, #16
 8001c06:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001c10:	2310      	movs	r3, #16
 8001c12:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001c14:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001c18:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001c1e:	2302      	movs	r3, #2
 8001c20:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001c22:	2302      	movs	r3, #2
 8001c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c26:	f107 031c 	add.w	r3, r7, #28
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f002 fa90 	bl	8004150 <HAL_RCC_OscConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001c36:	f000 ff27 	bl	8002a88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c3a:	230f      	movs	r3, #15
 8001c3c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c3e:	2302      	movs	r3, #2
 8001c40:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c42:	2300      	movs	r3, #0
 8001c44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c50:	f107 0308 	add.w	r3, r7, #8
 8001c54:	2102      	movs	r1, #2
 8001c56:	4618      	mov	r0, r3
 8001c58:	f001 ff30 	bl	8003abc <HAL_RCC_ClockConfig>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001c62:	f000 ff11 	bl	8002a88 <Error_Handler>
  }
}
 8001c66:	bf00      	nop
 8001c68:	3750      	adds	r7, #80	@ 0x50
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40023800 	.word	0x40023800
 8001c74:	40007000 	.word	0x40007000

08001c78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b08e      	sub	sp, #56	@ 0x38
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001c82:	2200      	movs	r2, #0
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	605a      	str	r2, [r3, #4]
 8001c88:	609a      	str	r2, [r3, #8]
 8001c8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c8c:	f107 0320 	add.w	r3, r7, #32
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c96:	1d3b      	adds	r3, r7, #4
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	609a      	str	r2, [r3, #8]
 8001ca0:	60da      	str	r2, [r3, #12]
 8001ca2:	611a      	str	r2, [r3, #16]
 8001ca4:	615a      	str	r2, [r3, #20]
 8001ca6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ca8:	4b32      	ldr	r3, [pc, #200]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001caa:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001cae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 8001cb0:	4b30      	ldr	r3, [pc, #192]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001cb2:	2253      	movs	r2, #83	@ 0x53
 8001cb4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cb6:	4b2f      	ldr	r3, [pc, #188]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001cb8:	2200      	movs	r2, #0
 8001cba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001cbe:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001cc2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cc4:	4b2b      	ldr	r3, [pc, #172]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cca:	4b2a      	ldr	r3, [pc, #168]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cd0:	4828      	ldr	r0, [pc, #160]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001cd2:	f002 fcdb 	bl	800468c <HAL_TIM_Base_Init>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001cdc:	f000 fed4 	bl	8002a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ce6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001cea:	4619      	mov	r1, r3
 8001cec:	4821      	ldr	r0, [pc, #132]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001cee:	f003 f857 	bl	8004da0 <HAL_TIM_ConfigClockSource>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001cf8:	f000 fec6 	bl	8002a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cfc:	481d      	ldr	r0, [pc, #116]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001cfe:	f002 fd85 	bl	800480c <HAL_TIM_PWM_Init>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001d08:	f000 febe 	bl	8002a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d10:	2300      	movs	r3, #0
 8001d12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d14:	f107 0320 	add.w	r3, r7, #32
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4816      	ldr	r0, [pc, #88]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001d1c:	f003 fc4c 	bl	80055b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001d26:	f000 feaf 	bl	8002a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d2a:	2360      	movs	r3, #96	@ 0x60
 8001d2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d36:	2300      	movs	r3, #0
 8001d38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	480c      	ldr	r0, [pc, #48]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001d42:	f002 ff6b 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001d4c:	f000 fe9c 	bl	8002a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2208      	movs	r2, #8
 8001d54:	4619      	mov	r1, r3
 8001d56:	4807      	ldr	r0, [pc, #28]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001d58:	f002 ff60 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d001      	beq.n	8001d66 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8001d62:	f000 fe91 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d66:	4803      	ldr	r0, [pc, #12]	@ (8001d74 <MX_TIM2_Init+0xfc>)
 8001d68:	f000 ff64 	bl	8002c34 <HAL_TIM_MspPostInit>

}
 8001d6c:	bf00      	nop
 8001d6e:	3738      	adds	r7, #56	@ 0x38
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	2000023c 	.word	0x2000023c

08001d78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08e      	sub	sp, #56	@ 0x38
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001d82:	2200      	movs	r2, #0
 8001d84:	601a      	str	r2, [r3, #0]
 8001d86:	605a      	str	r2, [r3, #4]
 8001d88:	609a      	str	r2, [r3, #8]
 8001d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d8c:	f107 0320 	add.w	r3, r7, #32
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	611a      	str	r2, [r3, #16]
 8001da4:	615a      	str	r2, [r3, #20]
 8001da6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001da8:	4b32      	ldr	r3, [pc, #200]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001daa:	4a33      	ldr	r2, [pc, #204]	@ (8001e78 <MX_TIM3_Init+0x100>)
 8001dac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 8001dae:	4b31      	ldr	r3, [pc, #196]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001db0:	2253      	movs	r2, #83	@ 0x53
 8001db2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db4:	4b2f      	ldr	r3, [pc, #188]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001db6:	2200      	movs	r2, #0
 8001db8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000-1;
 8001dba:	4b2e      	ldr	r3, [pc, #184]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001dbc:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001dc0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc2:	4b2c      	ldr	r3, [pc, #176]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dce:	4829      	ldr	r0, [pc, #164]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001dd0:	f002 fc5c 	bl	800468c <HAL_TIM_Base_Init>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dda:	f000 fe55 	bl	8002a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001de2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001de4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001de8:	4619      	mov	r1, r3
 8001dea:	4822      	ldr	r0, [pc, #136]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001dec:	f002 ffd8 	bl	8004da0 <HAL_TIM_ConfigClockSource>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001df6:	f000 fe47 	bl	8002a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001dfa:	481e      	ldr	r0, [pc, #120]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001dfc:	f002 fd06 	bl	800480c <HAL_TIM_PWM_Init>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e06:	f000 fe3f 	bl	8002a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e12:	f107 0320 	add.w	r3, r7, #32
 8001e16:	4619      	mov	r1, r3
 8001e18:	4816      	ldr	r0, [pc, #88]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001e1a:	f003 fbcd 	bl	80055b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e24:	f000 fe30 	bl	8002a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e28:	2360      	movs	r3, #96	@ 0x60
 8001e2a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e34:	2300      	movs	r3, #0
 8001e36:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e38:	1d3b      	adds	r3, r7, #4
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480d      	ldr	r0, [pc, #52]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001e40:	f002 feec 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e4a:	f000 fe1d 	bl	8002a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2204      	movs	r2, #4
 8001e52:	4619      	mov	r1, r3
 8001e54:	4807      	ldr	r0, [pc, #28]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001e56:	f002 fee1 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e60:	f000 fe12 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e64:	4803      	ldr	r0, [pc, #12]	@ (8001e74 <MX_TIM3_Init+0xfc>)
 8001e66:	f000 fee5 	bl	8002c34 <HAL_TIM_MspPostInit>

}
 8001e6a:	bf00      	nop
 8001e6c:	3738      	adds	r7, #56	@ 0x38
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000284 	.word	0x20000284
 8001e78:	40000400 	.word	0x40000400

08001e7c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b08e      	sub	sp, #56	@ 0x38
 8001e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
 8001e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	f107 0320 	add.w	r3, r7, #32
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e9a:	1d3b      	adds	r3, r7, #4
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
 8001ea8:	615a      	str	r2, [r3, #20]
 8001eaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001eac:	4b2c      	ldr	r3, [pc, #176]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001eae:	4a2d      	ldr	r2, [pc, #180]	@ (8001f64 <MX_TIM4_Init+0xe8>)
 8001eb0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8001eb2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001eb4:	2253      	movs	r2, #83	@ 0x53
 8001eb6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb8:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000-1;
 8001ebe:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001ec0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001ec4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec6:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ecc:	4b24      	ldr	r3, [pc, #144]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ed2:	4823      	ldr	r0, [pc, #140]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001ed4:	f002 fbda 	bl	800468c <HAL_TIM_Base_Init>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001ede:	f000 fdd3 	bl	8002a88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ee8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001eec:	4619      	mov	r1, r3
 8001eee:	481c      	ldr	r0, [pc, #112]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001ef0:	f002 ff56 	bl	8004da0 <HAL_TIM_ConfigClockSource>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001efa:	f000 fdc5 	bl	8002a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001efe:	4818      	ldr	r0, [pc, #96]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001f00:	f002 fc84 	bl	800480c <HAL_TIM_PWM_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001f0a:	f000 fdbd 	bl	8002a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4810      	ldr	r0, [pc, #64]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001f1e:	f003 fb4b 	bl	80055b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001f28:	f000 fdae 	bl	8002a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f2c:	2360      	movs	r3, #96	@ 0x60
 8001f2e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f34:	2300      	movs	r3, #0
 8001f36:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	2200      	movs	r2, #0
 8001f40:	4619      	mov	r1, r3
 8001f42:	4807      	ldr	r0, [pc, #28]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001f44:	f002 fe6a 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001f4e:	f000 fd9b 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f52:	4803      	ldr	r0, [pc, #12]	@ (8001f60 <MX_TIM4_Init+0xe4>)
 8001f54:	f000 fe6e 	bl	8002c34 <HAL_TIM_MspPostInit>

}
 8001f58:	bf00      	nop
 8001f5a:	3738      	adds	r7, #56	@ 0x38
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	200002cc 	.word	0x200002cc
 8001f64:	40000800 	.word	0x40000800

08001f68 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08a      	sub	sp, #40	@ 0x28
 8001f6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f6e:	f107 0320 	add.w	r3, r7, #32
 8001f72:	2200      	movs	r2, #0
 8001f74:	601a      	str	r2, [r3, #0]
 8001f76:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f78:	1d3b      	adds	r3, r7, #4
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	601a      	str	r2, [r3, #0]
 8001f7e:	605a      	str	r2, [r3, #4]
 8001f80:	609a      	str	r2, [r3, #8]
 8001f82:	60da      	str	r2, [r3, #12]
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	615a      	str	r2, [r3, #20]
 8001f88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f8a:	4b27      	ldr	r3, [pc, #156]	@ (8002028 <MX_TIM5_Init+0xc0>)
 8001f8c:	4a27      	ldr	r2, [pc, #156]	@ (800202c <MX_TIM5_Init+0xc4>)
 8001f8e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 41;
 8001f90:	4b25      	ldr	r3, [pc, #148]	@ (8002028 <MX_TIM5_Init+0xc0>)
 8001f92:	2229      	movs	r2, #41	@ 0x29
 8001f94:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f96:	4b24      	ldr	r3, [pc, #144]	@ (8002028 <MX_TIM5_Init+0xc0>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8001f9c:	4b22      	ldr	r3, [pc, #136]	@ (8002028 <MX_TIM5_Init+0xc0>)
 8001f9e:	22ff      	movs	r2, #255	@ 0xff
 8001fa0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fa2:	4b21      	ldr	r3, [pc, #132]	@ (8002028 <MX_TIM5_Init+0xc0>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa8:	4b1f      	ldr	r3, [pc, #124]	@ (8002028 <MX_TIM5_Init+0xc0>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001fae:	481e      	ldr	r0, [pc, #120]	@ (8002028 <MX_TIM5_Init+0xc0>)
 8001fb0:	f002 fc2c 	bl	800480c <HAL_TIM_PWM_Init>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM5_Init+0x56>
  {
    Error_Handler();
 8001fba:	f000 fd65 	bl	8002a88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fc6:	f107 0320 	add.w	r3, r7, #32
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4816      	ldr	r0, [pc, #88]	@ (8002028 <MX_TIM5_Init+0xc0>)
 8001fce:	f003 faf3 	bl	80055b8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d001      	beq.n	8001fdc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8001fd8:	f000 fd56 	bl	8002a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fdc:	2360      	movs	r3, #96	@ 0x60
 8001fde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fec:	1d3b      	adds	r3, r7, #4
 8001fee:	2200      	movs	r2, #0
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	480d      	ldr	r0, [pc, #52]	@ (8002028 <MX_TIM5_Init+0xc0>)
 8001ff4:	f002 fe12 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 8001ff8:	4603      	mov	r3, r0
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d001      	beq.n	8002002 <MX_TIM5_Init+0x9a>
  {
    Error_Handler();
 8001ffe:	f000 fd43 	bl	8002a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2204      	movs	r2, #4
 8002006:	4619      	mov	r1, r3
 8002008:	4807      	ldr	r0, [pc, #28]	@ (8002028 <MX_TIM5_Init+0xc0>)
 800200a:	f002 fe07 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8002014:	f000 fd38 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002018:	4803      	ldr	r0, [pc, #12]	@ (8002028 <MX_TIM5_Init+0xc0>)
 800201a:	f000 fe0b 	bl	8002c34 <HAL_TIM_MspPostInit>

}
 800201e:	bf00      	nop
 8002020:	3728      	adds	r7, #40	@ 0x28
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000314 	.word	0x20000314
 800202c:	40000c00 	.word	0x40000c00

08002030 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b088      	sub	sp, #32
 8002034:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002036:	1d3b      	adds	r3, r7, #4
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]
 8002044:	615a      	str	r2, [r3, #20]
 8002046:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8002048:	4b1e      	ldr	r3, [pc, #120]	@ (80020c4 <MX_TIM14_Init+0x94>)
 800204a:	4a1f      	ldr	r2, [pc, #124]	@ (80020c8 <MX_TIM14_Init+0x98>)
 800204c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 84-1;
 800204e:	4b1d      	ldr	r3, [pc, #116]	@ (80020c4 <MX_TIM14_Init+0x94>)
 8002050:	2253      	movs	r2, #83	@ 0x53
 8002052:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002054:	4b1b      	ldr	r3, [pc, #108]	@ (80020c4 <MX_TIM14_Init+0x94>)
 8002056:	2200      	movs	r2, #0
 8002058:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 20000-1;
 800205a:	4b1a      	ldr	r3, [pc, #104]	@ (80020c4 <MX_TIM14_Init+0x94>)
 800205c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002060:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002062:	4b18      	ldr	r3, [pc, #96]	@ (80020c4 <MX_TIM14_Init+0x94>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002068:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <MX_TIM14_Init+0x94>)
 800206a:	2200      	movs	r2, #0
 800206c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800206e:	4815      	ldr	r0, [pc, #84]	@ (80020c4 <MX_TIM14_Init+0x94>)
 8002070:	f002 fb0c 	bl	800468c <HAL_TIM_Base_Init>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <MX_TIM14_Init+0x4e>
  {
    Error_Handler();
 800207a:	f000 fd05 	bl	8002a88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 800207e:	4811      	ldr	r0, [pc, #68]	@ (80020c4 <MX_TIM14_Init+0x94>)
 8002080:	f002 fbc4 	bl	800480c <HAL_TIM_PWM_Init>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_TIM14_Init+0x5e>
  {
    Error_Handler();
 800208a:	f000 fcfd 	bl	8002a88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800208e:	2360      	movs	r3, #96	@ 0x60
 8002090:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002092:	2300      	movs	r3, #0
 8002094:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002096:	2300      	movs	r3, #0
 8002098:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800209a:	2300      	movs	r3, #0
 800209c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800209e:	1d3b      	adds	r3, r7, #4
 80020a0:	2200      	movs	r2, #0
 80020a2:	4619      	mov	r1, r3
 80020a4:	4807      	ldr	r0, [pc, #28]	@ (80020c4 <MX_TIM14_Init+0x94>)
 80020a6:	f002 fdb9 	bl	8004c1c <HAL_TIM_PWM_ConfigChannel>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80020b0:	f000 fcea 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80020b4:	4803      	ldr	r0, [pc, #12]	@ (80020c4 <MX_TIM14_Init+0x94>)
 80020b6:	f000 fdbd 	bl	8002c34 <HAL_TIM_MspPostInit>

}
 80020ba:	bf00      	nop
 80020bc:	3720      	adds	r7, #32
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	2000035c 	.word	0x2000035c
 80020c8:	40002000 	.word	0x40002000

080020cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020d0:	4b11      	ldr	r3, [pc, #68]	@ (8002118 <MX_USART2_UART_Init+0x4c>)
 80020d2:	4a12      	ldr	r2, [pc, #72]	@ (800211c <MX_USART2_UART_Init+0x50>)
 80020d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020d6:	4b10      	ldr	r3, [pc, #64]	@ (8002118 <MX_USART2_UART_Init+0x4c>)
 80020d8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020de:	4b0e      	ldr	r3, [pc, #56]	@ (8002118 <MX_USART2_UART_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002118 <MX_USART2_UART_Init+0x4c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020ea:	4b0b      	ldr	r3, [pc, #44]	@ (8002118 <MX_USART2_UART_Init+0x4c>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020f0:	4b09      	ldr	r3, [pc, #36]	@ (8002118 <MX_USART2_UART_Init+0x4c>)
 80020f2:	220c      	movs	r2, #12
 80020f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020f6:	4b08      	ldr	r3, [pc, #32]	@ (8002118 <MX_USART2_UART_Init+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020fc:	4b06      	ldr	r3, [pc, #24]	@ (8002118 <MX_USART2_UART_Init+0x4c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002102:	4805      	ldr	r0, [pc, #20]	@ (8002118 <MX_USART2_UART_Init+0x4c>)
 8002104:	f003 fae8 	bl	80056d8 <HAL_UART_Init>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800210e:	f000 fcbb 	bl	8002a88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002112:	bf00      	nop
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	200003a4 	.word	0x200003a4
 800211c:	40004400 	.word	0x40004400

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b08a      	sub	sp, #40	@ 0x28
 8002124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	613b      	str	r3, [r7, #16]
 800213a:	4b53      	ldr	r3, [pc, #332]	@ (8002288 <MX_GPIO_Init+0x168>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	4a52      	ldr	r2, [pc, #328]	@ (8002288 <MX_GPIO_Init+0x168>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	@ 0x30
 8002146:	4b50      	ldr	r3, [pc, #320]	@ (8002288 <MX_GPIO_Init+0x168>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b4c      	ldr	r3, [pc, #304]	@ (8002288 <MX_GPIO_Init+0x168>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215a:	4a4b      	ldr	r2, [pc, #300]	@ (8002288 <MX_GPIO_Init+0x168>)
 800215c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002160:	6313      	str	r3, [r2, #48]	@ 0x30
 8002162:	4b49      	ldr	r3, [pc, #292]	@ (8002288 <MX_GPIO_Init+0x168>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002166:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	4b45      	ldr	r3, [pc, #276]	@ (8002288 <MX_GPIO_Init+0x168>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002176:	4a44      	ldr	r2, [pc, #272]	@ (8002288 <MX_GPIO_Init+0x168>)
 8002178:	f043 0301 	orr.w	r3, r3, #1
 800217c:	6313      	str	r3, [r2, #48]	@ 0x30
 800217e:	4b42      	ldr	r3, [pc, #264]	@ (8002288 <MX_GPIO_Init+0x168>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	60bb      	str	r3, [r7, #8]
 8002188:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	607b      	str	r3, [r7, #4]
 800218e:	4b3e      	ldr	r3, [pc, #248]	@ (8002288 <MX_GPIO_Init+0x168>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a3d      	ldr	r2, [pc, #244]	@ (8002288 <MX_GPIO_Init+0x168>)
 8002194:	f043 0302 	orr.w	r3, r3, #2
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b3b      	ldr	r3, [pc, #236]	@ (8002288 <MX_GPIO_Init+0x168>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f003 0302 	and.w	r3, r3, #2
 80021a2:	607b      	str	r3, [r7, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|shield_power_Pin, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2160      	movs	r1, #96	@ 0x60
 80021aa:	4838      	ldr	r0, [pc, #224]	@ (800228c <MX_GPIO_Init+0x16c>)
 80021ac:	f001 fc54 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Left_IN2_Pin|Right_IN1_Pin|Right_IN2_Pin, GPIO_PIN_RESET);
 80021b0:	2200      	movs	r2, #0
 80021b2:	2170      	movs	r1, #112	@ 0x70
 80021b4:	4836      	ldr	r0, [pc, #216]	@ (8002290 <MX_GPIO_Init+0x170>)
 80021b6:	f001 fc4f 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Left_IN1_GPIO_Port, Left_IN1_Pin, GPIO_PIN_RESET);
 80021ba:	2200      	movs	r2, #0
 80021bc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80021c0:	4834      	ldr	r0, [pc, #208]	@ (8002294 <MX_GPIO_Init+0x174>)
 80021c2:	f001 fc49 	bl	8003a58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80021c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80021cc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80021d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	482c      	ldr	r0, [pc, #176]	@ (8002290 <MX_GPIO_Init+0x170>)
 80021de:	f001 fa8f 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin shield_power_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|shield_power_Pin;
 80021e2:	2360      	movs	r3, #96	@ 0x60
 80021e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021e6:	2301      	movs	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f2:	f107 0314 	add.w	r3, r7, #20
 80021f6:	4619      	mov	r1, r3
 80021f8:	4824      	ldr	r0, [pc, #144]	@ (800228c <MX_GPIO_Init+0x16c>)
 80021fa:	f001 fa81 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_IN2_Pin Right_IN1_Pin Right_IN2_Pin */
  GPIO_InitStruct.Pin = Left_IN2_Pin|Right_IN1_Pin|Right_IN2_Pin;
 80021fe:	2370      	movs	r3, #112	@ 0x70
 8002200:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002202:	2301      	movs	r3, #1
 8002204:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002206:	2300      	movs	r3, #0
 8002208:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220a:	2300      	movs	r3, #0
 800220c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	481e      	ldr	r0, [pc, #120]	@ (8002290 <MX_GPIO_Init+0x170>)
 8002216:	f001 fa73 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pin : Left_IN1_Pin */
  GPIO_InitStruct.Pin = Left_IN1_Pin;
 800221a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800221e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002220:	2301      	movs	r3, #1
 8002222:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002228:	2300      	movs	r3, #0
 800222a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Left_IN1_GPIO_Port, &GPIO_InitStruct);
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	4619      	mov	r1, r3
 8002232:	4818      	ldr	r0, [pc, #96]	@ (8002294 <MX_GPIO_Init+0x174>)
 8002234:	f001 fa64 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : Left_pulse_B_Pin Left_pulse_A_Pin */
  GPIO_InitStruct.Pin = Left_pulse_B_Pin|Left_pulse_A_Pin;
 8002238:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800223c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800223e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 0314 	add.w	r3, r7, #20
 800224c:	4619      	mov	r1, r3
 800224e:	4811      	ldr	r0, [pc, #68]	@ (8002294 <MX_GPIO_Init+0x174>)
 8002250:	f001 fa56 	bl	8003700 <HAL_GPIO_Init>

  /*Configure GPIO pins : Right_pulse_B_Pin Right_pulse_A_Pin */
  GPIO_InitStruct.Pin = Right_pulse_B_Pin|Right_pulse_A_Pin;
 8002254:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800225a:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800225e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	2300      	movs	r3, #0
 8002262:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002264:	f107 0314 	add.w	r3, r7, #20
 8002268:	4619      	mov	r1, r3
 800226a:	4808      	ldr	r0, [pc, #32]	@ (800228c <MX_GPIO_Init+0x16c>)
 800226c:	f001 fa48 	bl	8003700 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 8002270:	2201      	movs	r2, #1
 8002272:	2100      	movs	r1, #0
 8002274:	2028      	movs	r0, #40	@ 0x28
 8002276:	f001 f97a 	bl	800356e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800227a:	2028      	movs	r0, #40	@ 0x28
 800227c:	f001 f993 	bl	80035a6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002280:	bf00      	nop
 8002282:	3728      	adds	r7, #40	@ 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40023800 	.word	0x40023800
 800228c:	40020000 	.word	0x40020000
 8002290:	40020800 	.word	0x40020800
 8002294:	40020400 	.word	0x40020400

08002298 <Pwm_Left>:

/* USER CODE BEGIN 4 */
void Pwm_Left(int pwm_input) {
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
	htim5.Instance->CCR1 = pwm_input;
 80022a0:	4b04      	ldr	r3, [pc, #16]	@ (80022b4 <Pwm_Left+0x1c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80022a8:	bf00      	nop
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr
 80022b4:	20000314 	.word	0x20000314

080022b8 <Pwm_Right>:

void Pwm_Right(int pwm_input) {
 80022b8:	b480      	push	{r7}
 80022ba:	b083      	sub	sp, #12
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
	htim5.Instance->CCR2 = pwm_input;
 80022c0:	4b04      	ldr	r3, [pc, #16]	@ (80022d4 <Pwm_Right+0x1c>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	20000314 	.word	0x20000314

080022d8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80022d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022dc:	b09d      	sub	sp, #116	@ 0x74
 80022de:	af00      	add	r7, sp, #0
 80022e0:	4603      	mov	r3, r0
 80022e2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
	/* Prevent unused argument(s) compilation warning */

	if (GPIO_Pin == Left_pulse_A_Pin) {
 80022e6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80022ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80022ee:	d13d      	bne.n	800236c <HAL_GPIO_EXTI_Callback+0x94>
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 80022f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80022f4:	488c      	ldr	r0, [pc, #560]	@ (8002528 <HAL_GPIO_EXTI_Callback+0x250>)
 80022f6:	f001 fb97 	bl	8003a28 <HAL_GPIO_ReadPin>
 80022fa:	4603      	mov	r3, r0
 80022fc:	461e      	mov	r6, r3
				== HAL_GPIO_ReadPin(GPIOB, Left_pulse_B_Pin)) {
 80022fe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002302:	4889      	ldr	r0, [pc, #548]	@ (8002528 <HAL_GPIO_EXTI_Callback+0x250>)
 8002304:	f001 fb90 	bl	8003a28 <HAL_GPIO_ReadPin>
 8002308:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 800230a:	429e      	cmp	r6, r3
 800230c:	d117      	bne.n	800233e <HAL_GPIO_EXTI_Callback+0x66>
			encoderCount--;
 800230e:	4b87      	ldr	r3, [pc, #540]	@ (800252c <HAL_GPIO_EXTI_Callback+0x254>)
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	f112 38ff 	adds.w	r8, r2, #4294967295
 8002318:	f143 39ff 	adc.w	r9, r3, #4294967295
 800231c:	4b83      	ldr	r3, [pc, #524]	@ (800252c <HAL_GPIO_EXTI_Callback+0x254>)
 800231e:	e9c3 8900 	strd	r8, r9, [r3]
			rpm_encoderCount--;
 8002322:	4b83      	ldr	r3, [pc, #524]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x258>)
 8002324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002328:	1e51      	subs	r1, r2, #1
 800232a:	6639      	str	r1, [r7, #96]	@ 0x60
 800232c:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002330:	667b      	str	r3, [r7, #100]	@ 0x64
 8002332:	4b7f      	ldr	r3, [pc, #508]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x258>)
 8002334:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8002338:	e9c3 1200 	strd	r1, r2, [r3]
 800233c:	e05c      	b.n	80023f8 <HAL_GPIO_EXTI_Callback+0x120>

		} else {
			encoderCount++;
 800233e:	4b7b      	ldr	r3, [pc, #492]	@ (800252c <HAL_GPIO_EXTI_Callback+0x254>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	1c54      	adds	r4, r2, #1
 8002346:	f143 0500 	adc.w	r5, r3, #0
 800234a:	4b78      	ldr	r3, [pc, #480]	@ (800252c <HAL_GPIO_EXTI_Callback+0x254>)
 800234c:	e9c3 4500 	strd	r4, r5, [r3]
			rpm_encoderCount++;
 8002350:	4b77      	ldr	r3, [pc, #476]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x258>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	1c51      	adds	r1, r2, #1
 8002358:	65b9      	str	r1, [r7, #88]	@ 0x58
 800235a:	f143 0300 	adc.w	r3, r3, #0
 800235e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002360:	4b73      	ldr	r3, [pc, #460]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x258>)
 8002362:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8002366:	e9c3 1200 	strd	r1, r2, [r3]
 800236a:	e045      	b.n	80023f8 <HAL_GPIO_EXTI_Callback+0x120>
		}
	} else if (GPIO_Pin == Left_pulse_B_Pin) {
 800236c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002370:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002374:	d140      	bne.n	80023f8 <HAL_GPIO_EXTI_Callback+0x120>
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 8002376:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800237a:	486b      	ldr	r0, [pc, #428]	@ (8002528 <HAL_GPIO_EXTI_Callback+0x250>)
 800237c:	f001 fb54 	bl	8003a28 <HAL_GPIO_ReadPin>
 8002380:	4603      	mov	r3, r0
 8002382:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOB, Left_pulse_B_Pin)) {
 8002384:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002388:	4867      	ldr	r0, [pc, #412]	@ (8002528 <HAL_GPIO_EXTI_Callback+0x250>)
 800238a:	f001 fb4d 	bl	8003a28 <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOB, Left_pulse_A_Pin)
 8002390:	429c      	cmp	r4, r3
 8002392:	d11a      	bne.n	80023ca <HAL_GPIO_EXTI_Callback+0xf2>
			encoderCount++;
 8002394:	4b65      	ldr	r3, [pc, #404]	@ (800252c <HAL_GPIO_EXTI_Callback+0x254>)
 8002396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239a:	1c51      	adds	r1, r2, #1
 800239c:	6539      	str	r1, [r7, #80]	@ 0x50
 800239e:	f143 0300 	adc.w	r3, r3, #0
 80023a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80023a4:	4b61      	ldr	r3, [pc, #388]	@ (800252c <HAL_GPIO_EXTI_Callback+0x254>)
 80023a6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80023aa:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount++;
 80023ae:	4b60      	ldr	r3, [pc, #384]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x258>)
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	1c51      	adds	r1, r2, #1
 80023b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80023b8:	f143 0300 	adc.w	r3, r3, #0
 80023bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023be:	4b5c      	ldr	r3, [pc, #368]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x258>)
 80023c0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80023c4:	e9c3 1200 	strd	r1, r2, [r3]
 80023c8:	e016      	b.n	80023f8 <HAL_GPIO_EXTI_Callback+0x120>
		} else {
			encoderCount--;
 80023ca:	4b58      	ldr	r3, [pc, #352]	@ (800252c <HAL_GPIO_EXTI_Callback+0x254>)
 80023cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d0:	f112 3aff 	adds.w	sl, r2, #4294967295
 80023d4:	f143 3bff 	adc.w	fp, r3, #4294967295
 80023d8:	4b54      	ldr	r3, [pc, #336]	@ (800252c <HAL_GPIO_EXTI_Callback+0x254>)
 80023da:	e9c3 ab00 	strd	sl, fp, [r3]
			rpm_encoderCount--;
 80023de:	4b54      	ldr	r3, [pc, #336]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x258>)
 80023e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023e4:	1e51      	subs	r1, r2, #1
 80023e6:	6439      	str	r1, [r7, #64]	@ 0x40
 80023e8:	f143 33ff 	adc.w	r3, r3, #4294967295
 80023ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80023ee:	4b50      	ldr	r3, [pc, #320]	@ (8002530 <HAL_GPIO_EXTI_Callback+0x258>)
 80023f0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80023f4:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
	if (GPIO_Pin == Right_pulse_A_Pin) {
 80023f8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80023fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002400:	d144      	bne.n	800248c <HAL_GPIO_EXTI_Callback+0x1b4>
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 8002402:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002406:	484b      	ldr	r0, [pc, #300]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002408:	f001 fb0e 	bl	8003a28 <HAL_GPIO_ReadPin>
 800240c:	4603      	mov	r3, r0
 800240e:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, Right_pulse_B_Pin)) {
 8002410:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8002414:	4847      	ldr	r0, [pc, #284]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x25c>)
 8002416:	f001 fb07 	bl	8003a28 <HAL_GPIO_ReadPin>
 800241a:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 800241c:	429c      	cmp	r4, r3
 800241e:	d11a      	bne.n	8002456 <HAL_GPIO_EXTI_Callback+0x17e>
			encoderCount_r++;
 8002420:	4b45      	ldr	r3, [pc, #276]	@ (8002538 <HAL_GPIO_EXTI_Callback+0x260>)
 8002422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002426:	1c51      	adds	r1, r2, #1
 8002428:	63b9      	str	r1, [r7, #56]	@ 0x38
 800242a:	f143 0300 	adc.w	r3, r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002430:	4b41      	ldr	r3, [pc, #260]	@ (8002538 <HAL_GPIO_EXTI_Callback+0x260>)
 8002432:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8002436:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r++;
 800243a:	4b40      	ldr	r3, [pc, #256]	@ (800253c <HAL_GPIO_EXTI_Callback+0x264>)
 800243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002440:	1c51      	adds	r1, r2, #1
 8002442:	6339      	str	r1, [r7, #48]	@ 0x30
 8002444:	f143 0300 	adc.w	r3, r3, #0
 8002448:	637b      	str	r3, [r7, #52]	@ 0x34
 800244a:	4b3c      	ldr	r3, [pc, #240]	@ (800253c <HAL_GPIO_EXTI_Callback+0x264>)
 800244c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8002450:	e9c3 1200 	strd	r1, r2, [r3]
		}
	}
	UNUSED(GPIO_Pin);
	/* NOTE: This function Should not be modified, when the callback is needed,
			 the HAL_GPIO_EXTI_Callback could be implemented in the user file */
}
 8002454:	e063      	b.n	800251e <HAL_GPIO_EXTI_Callback+0x246>
			encoderCount_r--;
 8002456:	4b38      	ldr	r3, [pc, #224]	@ (8002538 <HAL_GPIO_EXTI_Callback+0x260>)
 8002458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245c:	1e51      	subs	r1, r2, #1
 800245e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002460:	f143 33ff 	adc.w	r3, r3, #4294967295
 8002464:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002466:	4b34      	ldr	r3, [pc, #208]	@ (8002538 <HAL_GPIO_EXTI_Callback+0x260>)
 8002468:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800246c:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r--;
 8002470:	4b32      	ldr	r3, [pc, #200]	@ (800253c <HAL_GPIO_EXTI_Callback+0x264>)
 8002472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002476:	1e51      	subs	r1, r2, #1
 8002478:	6239      	str	r1, [r7, #32]
 800247a:	f143 33ff 	adc.w	r3, r3, #4294967295
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002480:	4b2e      	ldr	r3, [pc, #184]	@ (800253c <HAL_GPIO_EXTI_Callback+0x264>)
 8002482:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8002486:	e9c3 1200 	strd	r1, r2, [r3]
}
 800248a:	e048      	b.n	800251e <HAL_GPIO_EXTI_Callback+0x246>
	} else if (GPIO_Pin == Right_pulse_B_Pin) {
 800248c:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002494:	d143      	bne.n	800251e <HAL_GPIO_EXTI_Callback+0x246>
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 8002496:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800249a:	4826      	ldr	r0, [pc, #152]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x25c>)
 800249c:	f001 fac4 	bl	8003a28 <HAL_GPIO_ReadPin>
 80024a0:	4603      	mov	r3, r0
 80024a2:	461c      	mov	r4, r3
				== HAL_GPIO_ReadPin(GPIOA, Right_pulse_B_Pin)) {
 80024a4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80024a8:	4822      	ldr	r0, [pc, #136]	@ (8002534 <HAL_GPIO_EXTI_Callback+0x25c>)
 80024aa:	f001 fabd 	bl	8003a28 <HAL_GPIO_ReadPin>
 80024ae:	4603      	mov	r3, r0
		if (HAL_GPIO_ReadPin(GPIOA, Right_pulse_A_Pin)
 80024b0:	429c      	cmp	r4, r3
 80024b2:	d11a      	bne.n	80024ea <HAL_GPIO_EXTI_Callback+0x212>
			encoderCount_r--;
 80024b4:	4b20      	ldr	r3, [pc, #128]	@ (8002538 <HAL_GPIO_EXTI_Callback+0x260>)
 80024b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ba:	1e51      	subs	r1, r2, #1
 80024bc:	61b9      	str	r1, [r7, #24]
 80024be:	f143 33ff 	adc.w	r3, r3, #4294967295
 80024c2:	61fb      	str	r3, [r7, #28]
 80024c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002538 <HAL_GPIO_EXTI_Callback+0x260>)
 80024c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80024ca:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r--;
 80024ce:	4b1b      	ldr	r3, [pc, #108]	@ (800253c <HAL_GPIO_EXTI_Callback+0x264>)
 80024d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d4:	1e51      	subs	r1, r2, #1
 80024d6:	6139      	str	r1, [r7, #16]
 80024d8:	f143 33ff 	adc.w	r3, r3, #4294967295
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	4b17      	ldr	r3, [pc, #92]	@ (800253c <HAL_GPIO_EXTI_Callback+0x264>)
 80024e0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80024e4:	e9c3 1200 	strd	r1, r2, [r3]
}
 80024e8:	e019      	b.n	800251e <HAL_GPIO_EXTI_Callback+0x246>
			encoderCount_r++;
 80024ea:	4b13      	ldr	r3, [pc, #76]	@ (8002538 <HAL_GPIO_EXTI_Callback+0x260>)
 80024ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f0:	1c51      	adds	r1, r2, #1
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	f143 0300 	adc.w	r3, r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b0f      	ldr	r3, [pc, #60]	@ (8002538 <HAL_GPIO_EXTI_Callback+0x260>)
 80024fc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8002500:	e9c3 1200 	strd	r1, r2, [r3]
			rpm_encoderCount_r++;
 8002504:	4b0d      	ldr	r3, [pc, #52]	@ (800253c <HAL_GPIO_EXTI_Callback+0x264>)
 8002506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800250a:	1c51      	adds	r1, r2, #1
 800250c:	6039      	str	r1, [r7, #0]
 800250e:	f143 0300 	adc.w	r3, r3, #0
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	4b09      	ldr	r3, [pc, #36]	@ (800253c <HAL_GPIO_EXTI_Callback+0x264>)
 8002516:	e9d7 1200 	ldrd	r1, r2, [r7]
 800251a:	e9c3 1200 	strd	r1, r2, [r3]
}
 800251e:	bf00      	nop
 8002520:	3774      	adds	r7, #116	@ 0x74
 8002522:	46bd      	mov	sp, r7
 8002524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002528:	40020400 	.word	0x40020400
 800252c:	200003f8 	.word	0x200003f8
 8002530:	20000408 	.word	0x20000408
 8002534:	40020000 	.word	0x40020000
 8002538:	20000400 	.word	0x20000400
 800253c:	20000410 	.word	0x20000410

08002540 <motorControl>:

void motorControl(int in1, int in2) {
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	6039      	str	r1, [r7, #0]
	GPIO_PinState state1=GPIO_PIN_RESET,state2=GPIO_PIN_RESET;
 800254a:	2300      	movs	r3, #0
 800254c:	73fb      	strb	r3, [r7, #15]
 800254e:	2300      	movs	r3, #0
 8002550:	73bb      	strb	r3, [r7, #14]
	if(in1==1){
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d102      	bne.n	800255e <motorControl+0x1e>
		state1=GPIO_PIN_SET;
 8002558:	2301      	movs	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	e001      	b.n	8002562 <motorControl+0x22>
	}
	else{
		state1=GPIO_PIN_RESET;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
	}
	if(in2==1){
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d102      	bne.n	800256e <motorControl+0x2e>
		state2=GPIO_PIN_SET;
 8002568:	2301      	movs	r3, #1
 800256a:	73bb      	strb	r3, [r7, #14]
 800256c:	e001      	b.n	8002572 <motorControl+0x32>
	}
	else{
		state2=GPIO_PIN_RESET;
 800256e:	2300      	movs	r3, #0
 8002570:	73bb      	strb	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(GPIOB, Left_IN1_Pin, state1);
 8002572:	7bfb      	ldrb	r3, [r7, #15]
 8002574:	461a      	mov	r2, r3
 8002576:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800257a:	4806      	ldr	r0, [pc, #24]	@ (8002594 <motorControl+0x54>)
 800257c:	f001 fa6c 	bl	8003a58 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, Left_IN2_Pin, state2);
 8002580:	7bbb      	ldrb	r3, [r7, #14]
 8002582:	461a      	mov	r2, r3
 8002584:	2110      	movs	r1, #16
 8002586:	4804      	ldr	r0, [pc, #16]	@ (8002598 <motorControl+0x58>)
 8002588:	f001 fa66 	bl	8003a58 <HAL_GPIO_WritePin>
}
 800258c:	bf00      	nop
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	40020400 	.word	0x40020400
 8002598:	40020800 	.word	0x40020800

0800259c <motorControl_r>:

void motorControl_r(int in1, int in2) {
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
	GPIO_PinState state1=GPIO_PIN_RESET,state2=GPIO_PIN_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	2300      	movs	r3, #0
 80025ac:	73bb      	strb	r3, [r7, #14]
	if(in1==1){
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b01      	cmp	r3, #1
 80025b2:	d102      	bne.n	80025ba <motorControl_r+0x1e>
		state1=GPIO_PIN_SET;
 80025b4:	2301      	movs	r3, #1
 80025b6:	73fb      	strb	r3, [r7, #15]
 80025b8:	e001      	b.n	80025be <motorControl_r+0x22>
	}
	else{
		state1=GPIO_PIN_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	73fb      	strb	r3, [r7, #15]
	}
	if(in2==1){
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d102      	bne.n	80025ca <motorControl_r+0x2e>
		state2=GPIO_PIN_SET;
 80025c4:	2301      	movs	r3, #1
 80025c6:	73bb      	strb	r3, [r7, #14]
 80025c8:	e001      	b.n	80025ce <motorControl_r+0x32>
	}
	else{
		state2=GPIO_PIN_RESET;
 80025ca:	2300      	movs	r3, #0
 80025cc:	73bb      	strb	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(GPIOC, Right_IN1_Pin, state1);
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	461a      	mov	r2, r3
 80025d2:	2120      	movs	r1, #32
 80025d4:	4806      	ldr	r0, [pc, #24]	@ (80025f0 <motorControl_r+0x54>)
 80025d6:	f001 fa3f 	bl	8003a58 <HAL_GPIO_WritePin>
 	HAL_GPIO_WritePin(GPIOC, Right_IN2_Pin, state2);
 80025da:	7bbb      	ldrb	r3, [r7, #14]
 80025dc:	461a      	mov	r2, r3
 80025de:	2140      	movs	r1, #64	@ 0x40
 80025e0:	4803      	ldr	r0, [pc, #12]	@ (80025f0 <motorControl_r+0x54>)
 80025e2:	f001 fa39 	bl	8003a58 <HAL_GPIO_WritePin>
}
 80025e6:	bf00      	nop
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	40020800 	.word	0x40020800

080025f4 <check_pwm>:

void check_pwm() {
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
	if (speed >= 180) {
 80025f8:	4b10      	ldr	r3, [pc, #64]	@ (800263c <check_pwm+0x48>)
 80025fa:	edd3 7a00 	vldr	s15, [r3]
 80025fe:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8002640 <check_pwm+0x4c>
 8002602:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260a:	db03      	blt.n	8002614 <check_pwm+0x20>
		speed = 180;
 800260c:	4b0b      	ldr	r3, [pc, #44]	@ (800263c <check_pwm+0x48>)
 800260e:	4a0d      	ldr	r2, [pc, #52]	@ (8002644 <check_pwm+0x50>)
 8002610:	601a      	str	r2, [r3, #0]
	} else if (speed <= -180) {
		speed = -180;
	}
}
 8002612:	e00d      	b.n	8002630 <check_pwm+0x3c>
	} else if (speed <= -180) {
 8002614:	4b09      	ldr	r3, [pc, #36]	@ (800263c <check_pwm+0x48>)
 8002616:	edd3 7a00 	vldr	s15, [r3]
 800261a:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8002648 <check_pwm+0x54>
 800261e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002626:	d900      	bls.n	800262a <check_pwm+0x36>
}
 8002628:	e002      	b.n	8002630 <check_pwm+0x3c>
		speed = -180;
 800262a:	4b04      	ldr	r3, [pc, #16]	@ (800263c <check_pwm+0x48>)
 800262c:	4a07      	ldr	r2, [pc, #28]	@ (800264c <check_pwm+0x58>)
 800262e:	601a      	str	r2, [r3, #0]
}
 8002630:	bf00      	nop
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	20000438 	.word	0x20000438
 8002640:	43340000 	.word	0x43340000
 8002644:	43340000 	.word	0x43340000
 8002648:	c3340000 	.word	0xc3340000
 800264c:	c3340000 	.word	0xc3340000

08002650 <check_pwm_r>:

void check_pwm_r() {
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0
	if (speed_r >= 180) {
 8002654:	4b10      	ldr	r3, [pc, #64]	@ (8002698 <check_pwm_r+0x48>)
 8002656:	edd3 7a00 	vldr	s15, [r3]
 800265a:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 800269c <check_pwm_r+0x4c>
 800265e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002666:	db03      	blt.n	8002670 <check_pwm_r+0x20>
		speed_r = 180;
 8002668:	4b0b      	ldr	r3, [pc, #44]	@ (8002698 <check_pwm_r+0x48>)
 800266a:	4a0d      	ldr	r2, [pc, #52]	@ (80026a0 <check_pwm_r+0x50>)
 800266c:	601a      	str	r2, [r3, #0]
	} else if (speed_r <= -180) {
		speed_r = -180;
	}
}
 800266e:	e00d      	b.n	800268c <check_pwm_r+0x3c>
	} else if (speed_r <= -180) {
 8002670:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <check_pwm_r+0x48>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80026a4 <check_pwm_r+0x54>
 800267a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002682:	d900      	bls.n	8002686 <check_pwm_r+0x36>
}
 8002684:	e002      	b.n	800268c <check_pwm_r+0x3c>
		speed_r = -180;
 8002686:	4b04      	ldr	r3, [pc, #16]	@ (8002698 <check_pwm_r+0x48>)
 8002688:	4a07      	ldr	r2, [pc, #28]	@ (80026a8 <check_pwm_r+0x58>)
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	2000043c 	.word	0x2000043c
 800269c:	43340000 	.word	0x43340000
 80026a0:	43340000 	.word	0x43340000
 80026a4:	c3340000 	.word	0xc3340000
 80026a8:	c3340000 	.word	0xc3340000

080026ac <check_move_state>:

void check_move_state() {
 80026ac:	b480      	push	{r7}
 80026ae:	af00      	add	r7, sp, #0
	if (speed >= 0) {
 80026b0:	4b0f      	ldr	r3, [pc, #60]	@ (80026f0 <check_move_state+0x44>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026be:	db09      	blt.n	80026d4 <check_move_state+0x28>
		move_state = 0;
 80026c0:	4b0c      	ldr	r3, [pc, #48]	@ (80026f4 <check_move_state+0x48>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
		control_1 = 0, control_2 = 1;
 80026c6:	4b0c      	ldr	r3, [pc, #48]	@ (80026f8 <check_move_state+0x4c>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	601a      	str	r2, [r3, #0]
 80026cc:	4b0b      	ldr	r3, [pc, #44]	@ (80026fc <check_move_state+0x50>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	601a      	str	r2, [r3, #0]
	} else {
		move_state = 1;
		control_1 = 1, control_2 = 0;
	}
}
 80026d2:	e008      	b.n	80026e6 <check_move_state+0x3a>
		move_state = 1;
 80026d4:	4b07      	ldr	r3, [pc, #28]	@ (80026f4 <check_move_state+0x48>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
		control_1 = 1, control_2 = 0;
 80026da:	4b07      	ldr	r3, [pc, #28]	@ (80026f8 <check_move_state+0x4c>)
 80026dc:	2201      	movs	r2, #1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <check_move_state+0x50>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	601a      	str	r2, [r3, #0]
}
 80026e6:	bf00      	nop
 80026e8:	46bd      	mov	sp, r7
 80026ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ee:	4770      	bx	lr
 80026f0:	20000438 	.word	0x20000438
 80026f4:	20000500 	.word	0x20000500
 80026f8:	200004f8 	.word	0x200004f8
 80026fc:	20000030 	.word	0x20000030

08002700 <check_move_state_r>:

void check_move_state_r() {
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
	if (speed_r >= 0) {
 8002704:	4b0f      	ldr	r3, [pc, #60]	@ (8002744 <check_move_state_r+0x44>)
 8002706:	edd3 7a00 	vldr	s15, [r3]
 800270a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800270e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002712:	db09      	blt.n	8002728 <check_move_state_r+0x28>
		move_state_r = 0;
 8002714:	4b0c      	ldr	r3, [pc, #48]	@ (8002748 <check_move_state_r+0x48>)
 8002716:	2200      	movs	r2, #0
 8002718:	601a      	str	r2, [r3, #0]
		control_1_r = 1, control_2_r = 0;
 800271a:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <check_move_state_r+0x4c>)
 800271c:	2201      	movs	r2, #1
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	4b0b      	ldr	r3, [pc, #44]	@ (8002750 <check_move_state_r+0x50>)
 8002722:	2200      	movs	r2, #0
 8002724:	601a      	str	r2, [r3, #0]
	} else {
		move_state_r = 1;
		control_1_r = 0, control_2_r = 1;
	}
}
 8002726:	e008      	b.n	800273a <check_move_state_r+0x3a>
		move_state_r = 1;
 8002728:	4b07      	ldr	r3, [pc, #28]	@ (8002748 <check_move_state_r+0x48>)
 800272a:	2201      	movs	r2, #1
 800272c:	601a      	str	r2, [r3, #0]
		control_1_r = 0, control_2_r = 1;
 800272e:	4b07      	ldr	r3, [pc, #28]	@ (800274c <check_move_state_r+0x4c>)
 8002730:	2200      	movs	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	4b06      	ldr	r3, [pc, #24]	@ (8002750 <check_move_state_r+0x50>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	2000043c 	.word	0x2000043c
 8002748:	20000504 	.word	0x20000504
 800274c:	20000034 	.word	0x20000034
 8002750:	200004fc 	.word	0x200004fc

08002754 <cmd_vel_calculate>:

void cmd_vel_calculate(void) {
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
	cmd_vel_s = cmd_vel_x;
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <cmd_vel_calculate+0x50>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a12      	ldr	r2, [pc, #72]	@ (80027a8 <cmd_vel_calculate+0x54>)
 800275e:	6013      	str	r3, [r2, #0]
	cmd_vel_th = cmd_vel_z;
 8002760:	4b12      	ldr	r3, [pc, #72]	@ (80027ac <cmd_vel_calculate+0x58>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a12      	ldr	r2, [pc, #72]	@ (80027b0 <cmd_vel_calculate+0x5c>)
 8002766:	6013      	str	r3, [r2, #0]
	if (cmd_vel_x == 0 && cmd_vel_z == 0) {
 8002768:	4b0e      	ldr	r3, [pc, #56]	@ (80027a4 <cmd_vel_calculate+0x50>)
 800276a:	edd3 7a00 	vldr	s15, [r3]
 800276e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002776:	d10b      	bne.n	8002790 <cmd_vel_calculate+0x3c>
 8002778:	4b0c      	ldr	r3, [pc, #48]	@ (80027ac <cmd_vel_calculate+0x58>)
 800277a:	edd3 7a00 	vldr	s15, [r3]
 800277e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002786:	d103      	bne.n	8002790 <cmd_vel_calculate+0x3c>
		stop_flag = 1;
 8002788:	4b0a      	ldr	r3, [pc, #40]	@ (80027b4 <cmd_vel_calculate+0x60>)
 800278a:	2201      	movs	r2, #1
 800278c:	601a      	str	r2, [r3, #0]
 800278e:	e003      	b.n	8002798 <cmd_vel_calculate+0x44>
	} else {
		stop_flag = 0;
 8002790:	4b08      	ldr	r3, [pc, #32]	@ (80027b4 <cmd_vel_calculate+0x60>)
 8002792:	2200      	movs	r2, #0
 8002794:	601a      	str	r2, [r3, #0]
	}
}
 8002796:	bf00      	nop
 8002798:	bf00      	nop
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr
 80027a2:	bf00      	nop
 80027a4:	20000680 	.word	0x20000680
 80027a8:	20000688 	.word	0x20000688
 80027ac:	20000684 	.word	0x20000684
 80027b0:	2000068c 	.word	0x2000068c
 80027b4:	20000478 	.word	0x20000478

080027b8 <HAL_TIM_PeriodElapsedCallback>:

uint32_t millis(void) {
	return msTicks;
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) {
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027c8:	d106      	bne.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x20>
		if(msTicks>39){
 80027ca:	4b06      	ldr	r3, [pc, #24]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	2b27      	cmp	r3, #39	@ 0x27
 80027d0:	d902      	bls.n	80027d8 <HAL_TIM_PeriodElapsedCallback+0x20>
			msTicks = 0;
 80027d2:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
		}
	}
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	20000694 	.word	0x20000694

080027e8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b090      	sub	sp, #64	@ 0x40
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2) {
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a95      	ldr	r2, [pc, #596]	@ (8002a4c <HAL_UART_RxCpltCallback+0x264>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	f040 811f 	bne.w	8002a3a <HAL_UART_RxCpltCallback+0x252>
		if (rx_data != '\n') {
 80027fc:	4b94      	ldr	r3, [pc, #592]	@ (8002a50 <HAL_UART_RxCpltCallback+0x268>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	2b0a      	cmp	r3, #10
 8002802:	d009      	beq.n	8002818 <HAL_UART_RxCpltCallback+0x30>
			rx_buffer[rx_index++] = rx_data;
 8002804:	4b93      	ldr	r3, [pc, #588]	@ (8002a54 <HAL_UART_RxCpltCallback+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	4992      	ldr	r1, [pc, #584]	@ (8002a54 <HAL_UART_RxCpltCallback+0x26c>)
 800280c:	600a      	str	r2, [r1, #0]
 800280e:	4a90      	ldr	r2, [pc, #576]	@ (8002a50 <HAL_UART_RxCpltCallback+0x268>)
 8002810:	7811      	ldrb	r1, [r2, #0]
 8002812:	4a91      	ldr	r2, [pc, #580]	@ (8002a58 <HAL_UART_RxCpltCallback+0x270>)
 8002814:	54d1      	strb	r1, [r2, r3]
 8002816:	e110      	b.n	8002a3a <HAL_UART_RxCpltCallback+0x252>
		}
		else {
			rx_buffer[rx_index] = '\0';
 8002818:	4b8e      	ldr	r3, [pc, #568]	@ (8002a54 <HAL_UART_RxCpltCallback+0x26c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a8e      	ldr	r2, [pc, #568]	@ (8002a58 <HAL_UART_RxCpltCallback+0x270>)
 800281e:	2100      	movs	r1, #0
 8002820:	54d1      	strb	r1, [r2, r3]
			//printf("Data: %s\n", rx_buffer);

			if (rx_buffer[0] == '1') {
 8002822:	4b8d      	ldr	r3, [pc, #564]	@ (8002a58 <HAL_UART_RxCpltCallback+0x270>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b31      	cmp	r3, #49	@ 0x31
 8002828:	d148      	bne.n	80028bc <HAL_UART_RxCpltCallback+0xd4>
				//printf("[1] Data: %s\n", rx_buffer);

				char first_number[10];

				strncpy(first_number, &rx_buffer[2], 9);
 800282a:	f107 0320 	add.w	r3, r7, #32
 800282e:	2209      	movs	r2, #9
 8002830:	498a      	ldr	r1, [pc, #552]	@ (8002a5c <HAL_UART_RxCpltCallback+0x274>)
 8002832:	4618      	mov	r0, r3
 8002834:	f005 fd7b 	bl	800832e <strncpy>
				first_number[10] = '\0';
 8002838:	2300      	movs	r3, #0
 800283a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

				cmd_vel_x = atof(first_number);
 800283e:	f107 0320 	add.w	r3, r7, #32
 8002842:	4618      	mov	r0, r3
 8002844:	f003 ff9e 	bl	8006784 <atof>
 8002848:	ec53 2b10 	vmov	r2, r3, d0
 800284c:	4610      	mov	r0, r2
 800284e:	4619      	mov	r1, r3
 8002850:	f7fe f9ea 	bl	8000c28 <__aeabi_d2f>
 8002854:	4603      	mov	r3, r0
 8002856:	4a82      	ldr	r2, [pc, #520]	@ (8002a60 <HAL_UART_RxCpltCallback+0x278>)
 8002858:	6013      	str	r3, [r2, #0]
				if (rx_buffer[1] == '0') { // ?��?��?�� 경우
 800285a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a58 <HAL_UART_RxCpltCallback+0x270>)
 800285c:	785b      	ldrb	r3, [r3, #1]
 800285e:	2b30      	cmp	r3, #48	@ 0x30
 8002860:	d107      	bne.n	8002872 <HAL_UART_RxCpltCallback+0x8a>
					cmd_vel_x = -cmd_vel_x;
 8002862:	4b7f      	ldr	r3, [pc, #508]	@ (8002a60 <HAL_UART_RxCpltCallback+0x278>)
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	eef1 7a67 	vneg.f32	s15, s15
 800286c:	4b7c      	ldr	r3, [pc, #496]	@ (8002a60 <HAL_UART_RxCpltCallback+0x278>)
 800286e:	edc3 7a00 	vstr	s15, [r3]
				}

				char second_number[10];
				strncpy(second_number, &rx_buffer[12], 9);
 8002872:	f107 0314 	add.w	r3, r7, #20
 8002876:	2209      	movs	r2, #9
 8002878:	497a      	ldr	r1, [pc, #488]	@ (8002a64 <HAL_UART_RxCpltCallback+0x27c>)
 800287a:	4618      	mov	r0, r3
 800287c:	f005 fd57 	bl	800832e <strncpy>
				second_number[10] = '\0';
 8002880:	2300      	movs	r3, #0
 8002882:	77bb      	strb	r3, [r7, #30]

				cmd_vel_z = atof(second_number);
 8002884:	f107 0314 	add.w	r3, r7, #20
 8002888:	4618      	mov	r0, r3
 800288a:	f003 ff7b 	bl	8006784 <atof>
 800288e:	ec53 2b10 	vmov	r2, r3, d0
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	f7fe f9c7 	bl	8000c28 <__aeabi_d2f>
 800289a:	4603      	mov	r3, r0
 800289c:	4a72      	ldr	r2, [pc, #456]	@ (8002a68 <HAL_UART_RxCpltCallback+0x280>)
 800289e:	6013      	str	r3, [r2, #0]
				if (rx_buffer[11] == '0') { // ?��?��?�� 경우
 80028a0:	4b6d      	ldr	r3, [pc, #436]	@ (8002a58 <HAL_UART_RxCpltCallback+0x270>)
 80028a2:	7adb      	ldrb	r3, [r3, #11]
 80028a4:	2b30      	cmp	r3, #48	@ 0x30
 80028a6:	f040 80bf 	bne.w	8002a28 <HAL_UART_RxCpltCallback+0x240>
					cmd_vel_z = -cmd_vel_z;
 80028aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002a68 <HAL_UART_RxCpltCallback+0x280>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	eef1 7a67 	vneg.f32	s15, s15
 80028b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002a68 <HAL_UART_RxCpltCallback+0x280>)
 80028b6:	edc3 7a00 	vstr	s15, [r3]
 80028ba:	e0b5      	b.n	8002a28 <HAL_UART_RxCpltCallback+0x240>
				}
			}
			else if (rx_buffer[0] == '2') {
 80028bc:	4b66      	ldr	r3, [pc, #408]	@ (8002a58 <HAL_UART_RxCpltCallback+0x270>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b32      	cmp	r3, #50	@ 0x32
 80028c2:	f040 80ab 	bne.w	8002a1c <HAL_UART_RxCpltCallback+0x234>
				//printf("[2] Data: %s\n", rx_buffer);

				//Data_import
				for (int i = 0; i < 48; i++) {
 80028c6:	2300      	movs	r3, #0
 80028c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80028ca:	e00b      	b.n	80028e4 <HAL_UART_RxCpltCallback+0xfc>
					motor_buffer[i] = rx_buffer[i + 1];
 80028cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ce:	3301      	adds	r3, #1
 80028d0:	4a61      	ldr	r2, [pc, #388]	@ (8002a58 <HAL_UART_RxCpltCallback+0x270>)
 80028d2:	5cd1      	ldrb	r1, [r2, r3]
 80028d4:	4a65      	ldr	r2, [pc, #404]	@ (8002a6c <HAL_UART_RxCpltCallback+0x284>)
 80028d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d8:	4413      	add	r3, r2
 80028da:	460a      	mov	r2, r1
 80028dc:	701a      	strb	r2, [r3, #0]
				for (int i = 0; i < 48; i++) {
 80028de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e0:	3301      	adds	r3, #1
 80028e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80028e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028e6:	2b2f      	cmp	r3, #47	@ 0x2f
 80028e8:	ddf0      	ble.n	80028cc <HAL_UART_RxCpltCallback+0xe4>
				}

				//Slicing Data and char to float
				for (int i = 0; i < 6; i++) {
 80028ea:	2300      	movs	r3, #0
 80028ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80028ee:	e031      	b.n	8002954 <HAL_UART_RxCpltCallback+0x16c>
					char temp[9];

					for (int j = 0; j < 8; j++) {
 80028f0:	2300      	movs	r3, #0
 80028f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028f4:	e00e      	b.n	8002914 <HAL_UART_RxCpltCallback+0x12c>
						temp[j] = motor_buffer[i * 8 + j];
 80028f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028f8:	00da      	lsls	r2, r3, #3
 80028fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028fc:	4413      	add	r3, r2
 80028fe:	4a5b      	ldr	r2, [pc, #364]	@ (8002a6c <HAL_UART_RxCpltCallback+0x284>)
 8002900:	5cd1      	ldrb	r1, [r2, r3]
 8002902:	f107 0208 	add.w	r2, r7, #8
 8002906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002908:	4413      	add	r3, r2
 800290a:	460a      	mov	r2, r1
 800290c:	701a      	strb	r2, [r3, #0]
					for (int j = 0; j < 8; j++) {
 800290e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002910:	3301      	adds	r3, #1
 8002912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002916:	2b07      	cmp	r3, #7
 8002918:	dded      	ble.n	80028f6 <HAL_UART_RxCpltCallback+0x10e>
					}
					temp[8] = '\0';
 800291a:	2300      	movs	r3, #0
 800291c:	743b      	strb	r3, [r7, #16]

					motor_degree[i] = radiansToDegrees(atof(temp));;
 800291e:	f107 0308 	add.w	r3, r7, #8
 8002922:	4618      	mov	r0, r3
 8002924:	f003 ff2e 	bl	8006784 <atof>
 8002928:	ec53 2b10 	vmov	r2, r3, d0
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	f7fe f97a 	bl	8000c28 <__aeabi_d2f>
 8002934:	4603      	mov	r3, r0
 8002936:	ee00 3a10 	vmov	s0, r3
 800293a:	f7fe fbf5 	bl	8001128 <radiansToDegrees>
 800293e:	eef0 7a40 	vmov.f32	s15, s0
 8002942:	4a4b      	ldr	r2, [pc, #300]	@ (8002a70 <HAL_UART_RxCpltCallback+0x288>)
 8002944:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	edc3 7a00 	vstr	s15, [r3]
				for (int i = 0; i < 6; i++) {
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	3301      	adds	r3, #1
 8002952:	633b      	str	r3, [r7, #48]	@ 0x30
 8002954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002956:	2b05      	cmp	r3, #5
 8002958:	ddca      	ble.n	80028f0 <HAL_UART_RxCpltCallback+0x108>
				}


				//move motor
				setMotorAngle(&htim14, TIM_CHANNEL_1, motor_degree[0], MOTOR1_MIN_ANGLE, MOTOR1_MAX_ANGLE);
 800295a:	4b45      	ldr	r3, [pc, #276]	@ (8002a70 <HAL_UART_RxCpltCallback+0x288>)
 800295c:	edd3 7a00 	vldr	s15, [r3]
 8002960:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002964:	edc7 7a00 	vstr	s15, [r7]
 8002968:	783b      	ldrb	r3, [r7, #0]
 800296a:	b2da      	uxtb	r2, r3
 800296c:	23b4      	movs	r3, #180	@ 0xb4
 800296e:	9300      	str	r3, [sp, #0]
 8002970:	2300      	movs	r3, #0
 8002972:	2100      	movs	r1, #0
 8002974:	483f      	ldr	r0, [pc, #252]	@ (8002a74 <HAL_UART_RxCpltCallback+0x28c>)
 8002976:	f7fe fc57 	bl	8001228 <setMotorAngle>
				setMotorAngle(&htim4, TIM_CHANNEL_1, motor_degree[1], MOTOR2_MIN_ANGLE, MOTOR2_MAX_ANGLE);
 800297a:	4b3d      	ldr	r3, [pc, #244]	@ (8002a70 <HAL_UART_RxCpltCallback+0x288>)
 800297c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002984:	edc7 7a00 	vstr	s15, [r7]
 8002988:	783b      	ldrb	r3, [r7, #0]
 800298a:	b2da      	uxtb	r2, r3
 800298c:	23a5      	movs	r3, #165	@ 0xa5
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	230f      	movs	r3, #15
 8002992:	2100      	movs	r1, #0
 8002994:	4838      	ldr	r0, [pc, #224]	@ (8002a78 <HAL_UART_RxCpltCallback+0x290>)
 8002996:	f7fe fc47 	bl	8001228 <setMotorAngle>
				setMotorAngle(&htim3, TIM_CHANNEL_2, motor_degree[2], MOTOR3_MIN_ANGLE, MOTOR3_MAX_ANGLE);
 800299a:	4b35      	ldr	r3, [pc, #212]	@ (8002a70 <HAL_UART_RxCpltCallback+0x288>)
 800299c:	edd3 7a02 	vldr	s15, [r3, #8]
 80029a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029a4:	edc7 7a00 	vstr	s15, [r7]
 80029a8:	783b      	ldrb	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	23b4      	movs	r3, #180	@ 0xb4
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	2300      	movs	r3, #0
 80029b2:	2104      	movs	r1, #4
 80029b4:	4831      	ldr	r0, [pc, #196]	@ (8002a7c <HAL_UART_RxCpltCallback+0x294>)
 80029b6:	f7fe fc37 	bl	8001228 <setMotorAngle>
				setMotorAngle(&htim2, TIM_CHANNEL_3, motor_degree[3], MOTOR4_MIN_ANGLE, MOTOR4_MAX_ANGLE);
 80029ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002a70 <HAL_UART_RxCpltCallback+0x288>)
 80029bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80029c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029c4:	edc7 7a00 	vstr	s15, [r7]
 80029c8:	783b      	ldrb	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	23b4      	movs	r3, #180	@ 0xb4
 80029ce:	9300      	str	r3, [sp, #0]
 80029d0:	2300      	movs	r3, #0
 80029d2:	2108      	movs	r1, #8
 80029d4:	482a      	ldr	r0, [pc, #168]	@ (8002a80 <HAL_UART_RxCpltCallback+0x298>)
 80029d6:	f7fe fc27 	bl	8001228 <setMotorAngle>
				setMotorAngle(&htim3, TIM_CHANNEL_1, motor_degree[4], MOTOR5_MIN_ANGLE, MOTOR5_MAX_ANGLE);
 80029da:	4b25      	ldr	r3, [pc, #148]	@ (8002a70 <HAL_UART_RxCpltCallback+0x288>)
 80029dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80029e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e4:	edc7 7a00 	vstr	s15, [r7]
 80029e8:	783b      	ldrb	r3, [r7, #0]
 80029ea:	b2da      	uxtb	r2, r3
 80029ec:	23b4      	movs	r3, #180	@ 0xb4
 80029ee:	9300      	str	r3, [sp, #0]
 80029f0:	2300      	movs	r3, #0
 80029f2:	2100      	movs	r1, #0
 80029f4:	4821      	ldr	r0, [pc, #132]	@ (8002a7c <HAL_UART_RxCpltCallback+0x294>)
 80029f6:	f7fe fc17 	bl	8001228 <setMotorAngle>
				setMotorAngle(&htim2, TIM_CHANNEL_2, motor_degree[5], MOTOR6_MIN_ANGLE, MOTOR6_MAX_ANGLE);
 80029fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002a70 <HAL_UART_RxCpltCallback+0x288>)
 80029fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a04:	edc7 7a00 	vstr	s15, [r7]
 8002a08:	783b      	ldrb	r3, [r7, #0]
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	2349      	movs	r3, #73	@ 0x49
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	230a      	movs	r3, #10
 8002a12:	2104      	movs	r1, #4
 8002a14:	481a      	ldr	r0, [pc, #104]	@ (8002a80 <HAL_UART_RxCpltCallback+0x298>)
 8002a16:	f7fe fc07 	bl	8001228 <setMotorAngle>
 8002a1a:	e005      	b.n	8002a28 <HAL_UART_RxCpltCallback+0x240>
			}
			else if (rx_buffer[0] == '3') {
 8002a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <HAL_UART_RxCpltCallback+0x270>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b33      	cmp	r3, #51	@ 0x33
 8002a22:	d101      	bne.n	8002a28 <HAL_UART_RxCpltCallback+0x240>
				NVIC_SystemReset();
 8002a24:	f7fe fb28 	bl	8001078 <__NVIC_SystemReset>
				test=1;
			}


			//reset huart2 buffer
			rx_index = 0;
 8002a28:	4b0a      	ldr	r3, [pc, #40]	@ (8002a54 <HAL_UART_RxCpltCallback+0x26c>)
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	601a      	str	r2, [r3, #0]
			memset(rx_buffer, 0, sizeof(rx_buffer));
 8002a2e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a32:	2100      	movs	r1, #0
 8002a34:	4808      	ldr	r0, [pc, #32]	@ (8002a58 <HAL_UART_RxCpltCallback+0x270>)
 8002a36:	f005 fc60 	bl	80082fa <memset>
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*) &rx_data, 1);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	4904      	ldr	r1, [pc, #16]	@ (8002a50 <HAL_UART_RxCpltCallback+0x268>)
 8002a3e:	4811      	ldr	r0, [pc, #68]	@ (8002a84 <HAL_UART_RxCpltCallback+0x29c>)
 8002a40:	f002 ff25 	bl	800588e <HAL_UART_Receive_IT>
}
 8002a44:	bf00      	nop
 8002a46:	3738      	adds	r7, #56	@ 0x38
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40004400 	.word	0x40004400
 8002a50:	20000608 	.word	0x20000608
 8002a54:	2000060c 	.word	0x2000060c
 8002a58:	20000508 	.word	0x20000508
 8002a5c:	2000050a 	.word	0x2000050a
 8002a60:	20000680 	.word	0x20000680
 8002a64:	20000514 	.word	0x20000514
 8002a68:	20000684 	.word	0x20000684
 8002a6c:	20000610 	.word	0x20000610
 8002a70:	20000644 	.word	0x20000644
 8002a74:	2000035c 	.word	0x2000035c
 8002a78:	200002cc 	.word	0x200002cc
 8002a7c:	20000284 	.word	0x20000284
 8002a80:	2000023c 	.word	0x2000023c
 8002a84:	200003a4 	.word	0x200003a4

08002a88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a8c:	b672      	cpsid	i
}
 8002a8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a90:	bf00      	nop
 8002a92:	e7fd      	b.n	8002a90 <Error_Handler+0x8>

08002a94 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	607b      	str	r3, [r7, #4]
 8002a9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002aa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa2:	4a0f      	ldr	r2, [pc, #60]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002aa4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa8:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002ab2:	607b      	str	r3, [r7, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	603b      	str	r3, [r7, #0]
 8002aba:	4b09      	ldr	r3, [pc, #36]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002abe:	4a08      	ldr	r2, [pc, #32]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002ac0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ac6:	4b06      	ldr	r3, [pc, #24]	@ (8002ae0 <HAL_MspInit+0x4c>)
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ace:	603b      	str	r3, [r7, #0]
 8002ad0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002ad2:	2007      	movs	r0, #7
 8002ad4:	f000 fd40 	bl	8003558 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	3708      	adds	r7, #8
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}
 8002ae0:	40023800 	.word	0x40023800

08002ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af4:	d116      	bne.n	8002b24 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
 8002afa:	4b36      	ldr	r3, [pc, #216]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	4a35      	ldr	r2, [pc, #212]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b00:	f043 0301 	orr.w	r3, r3, #1
 8002b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b06:	4b33      	ldr	r3, [pc, #204]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f003 0301 	and.w	r3, r3, #1
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 1);
 8002b12:	2201      	movs	r2, #1
 8002b14:	2100      	movs	r1, #0
 8002b16:	201c      	movs	r0, #28
 8002b18:	f000 fd29 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b1c:	201c      	movs	r0, #28
 8002b1e:	f000 fd42 	bl	80035a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8002b22:	e052      	b.n	8002bca <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM3)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a2b      	ldr	r2, [pc, #172]	@ (8002bd8 <HAL_TIM_Base_MspInit+0xf4>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d116      	bne.n	8002b5c <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
 8002b32:	4b28      	ldr	r3, [pc, #160]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b36:	4a27      	ldr	r2, [pc, #156]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b38:	f043 0302 	orr.w	r3, r3, #2
 8002b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b3e:	4b25      	ldr	r3, [pc, #148]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 1);
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	201d      	movs	r0, #29
 8002b50:	f000 fd0d 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002b54:	201d      	movs	r0, #29
 8002b56:	f000 fd26 	bl	80035a6 <HAL_NVIC_EnableIRQ>
}
 8002b5a:	e036      	b.n	8002bca <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM4)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a1e      	ldr	r2, [pc, #120]	@ (8002bdc <HAL_TIM_Base_MspInit+0xf8>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d116      	bne.n	8002b94 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6e:	4a19      	ldr	r2, [pc, #100]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b76:	4b17      	ldr	r3, [pc, #92]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 1);
 8002b82:	2201      	movs	r2, #1
 8002b84:	2100      	movs	r1, #0
 8002b86:	201e      	movs	r0, #30
 8002b88:	f000 fcf1 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002b8c:	201e      	movs	r0, #30
 8002b8e:	f000 fd0a 	bl	80035a6 <HAL_NVIC_EnableIRQ>
}
 8002b92:	e01a      	b.n	8002bca <HAL_TIM_Base_MspInit+0xe6>
  else if(htim_base->Instance==TIM14)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a11      	ldr	r2, [pc, #68]	@ (8002be0 <HAL_TIM_Base_MspInit+0xfc>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d115      	bne.n	8002bca <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60bb      	str	r3, [r7, #8]
 8002ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba6:	4a0b      	ldr	r2, [pc, #44]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002bac:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bae:	4b09      	ldr	r3, [pc, #36]	@ (8002bd4 <HAL_TIM_Base_MspInit+0xf0>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bb6:	60bb      	str	r3, [r7, #8]
 8002bb8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 1);
 8002bba:	2201      	movs	r2, #1
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	202d      	movs	r0, #45	@ 0x2d
 8002bc0:	f000 fcd5 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8002bc4:	202d      	movs	r0, #45	@ 0x2d
 8002bc6:	f000 fcee 	bl	80035a6 <HAL_NVIC_EnableIRQ>
}
 8002bca:	bf00      	nop
 8002bcc:	3718      	adds	r7, #24
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40000400 	.word	0x40000400
 8002bdc:	40000800 	.word	0x40000800
 8002be0:	40002000 	.word	0x40002000

08002be4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM5)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8002c2c <HAL_TIM_PWM_MspInit+0x48>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d115      	bne.n	8002c22 <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	60fb      	str	r3, [r7, #12]
 8002bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002c30 <HAL_TIM_PWM_MspInit+0x4c>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8002c30 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c00:	f043 0308 	orr.w	r3, r3, #8
 8002c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c06:	4b0a      	ldr	r3, [pc, #40]	@ (8002c30 <HAL_TIM_PWM_MspInit+0x4c>)
 8002c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0a:	f003 0308 	and.w	r3, r3, #8
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 1);
 8002c12:	2201      	movs	r2, #1
 8002c14:	2100      	movs	r1, #0
 8002c16:	2032      	movs	r0, #50	@ 0x32
 8002c18:	f000 fca9 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002c1c:	2032      	movs	r0, #50	@ 0x32
 8002c1e:	f000 fcc2 	bl	80035a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002c22:	bf00      	nop
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40000c00 	.word	0x40000c00
 8002c30:	40023800 	.word	0x40023800

08002c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08e      	sub	sp, #56	@ 0x38
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c54:	d11f      	bne.n	8002c96 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	623b      	str	r3, [r7, #32]
 8002c5a:	4b67      	ldr	r3, [pc, #412]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c5e:	4a66      	ldr	r2, [pc, #408]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002c60:	f043 0302 	orr.w	r3, r3, #2
 8002c64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c66:	4b64      	ldr	r3, [pc, #400]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002c68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	623b      	str	r3, [r7, #32]
 8002c70:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = TIM_wrist_rot_Pin|TIM_gripper_Pin;
 8002c72:	f44f 6381 	mov.w	r3, #1032	@ 0x408
 8002c76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c78:	2302      	movs	r3, #2
 8002c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c80:	2300      	movs	r3, #0
 8002c82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c84:	2301      	movs	r3, #1
 8002c86:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c8c:	4619      	mov	r1, r3
 8002c8e:	485b      	ldr	r0, [pc, #364]	@ (8002dfc <HAL_TIM_MspPostInit+0x1c8>)
 8002c90:	f000 fd36 	bl	8003700 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM14_MspPostInit 1 */

  /* USER CODE END TIM14_MspPostInit 1 */
  }

}
 8002c94:	e0ac      	b.n	8002df0 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM3)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	4a59      	ldr	r2, [pc, #356]	@ (8002e00 <HAL_TIM_MspPostInit+0x1cc>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	d13c      	bne.n	8002d1a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	61fb      	str	r3, [r7, #28]
 8002ca4:	4b54      	ldr	r3, [pc, #336]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002ca6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ca8:	4a53      	ldr	r2, [pc, #332]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002caa:	f043 0304 	orr.w	r3, r3, #4
 8002cae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002cb0:	4b51      	ldr	r3, [pc, #324]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cb4:	f003 0304 	and.w	r3, r3, #4
 8002cb8:	61fb      	str	r3, [r7, #28]
 8002cba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	61bb      	str	r3, [r7, #24]
 8002cc0:	4b4d      	ldr	r3, [pc, #308]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cc4:	4a4c      	ldr	r2, [pc, #304]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002cc6:	f043 0302 	orr.w	r3, r3, #2
 8002cca:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ccc:	4b4a      	ldr	r3, [pc, #296]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002cce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	61bb      	str	r3, [r7, #24]
 8002cd6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = TIM_elbow_Pin;
 8002cd8:	2380      	movs	r3, #128	@ 0x80
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cdc:	2302      	movs	r3, #2
 8002cde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ce8:	2302      	movs	r3, #2
 8002cea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM_elbow_GPIO_Port, &GPIO_InitStruct);
 8002cec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	4844      	ldr	r0, [pc, #272]	@ (8002e04 <HAL_TIM_MspPostInit+0x1d0>)
 8002cf4:	f000 fd04 	bl	8003700 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = TIM_wrist_var_Pin;
 8002cf8:	2310      	movs	r3, #16
 8002cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d00:	2300      	movs	r3, #0
 8002d02:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d04:	2300      	movs	r3, #0
 8002d06:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM_wrist_var_GPIO_Port, &GPIO_InitStruct);
 8002d0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d10:	4619      	mov	r1, r3
 8002d12:	483a      	ldr	r0, [pc, #232]	@ (8002dfc <HAL_TIM_MspPostInit+0x1c8>)
 8002d14:	f000 fcf4 	bl	8003700 <HAL_GPIO_Init>
}
 8002d18:	e06a      	b.n	8002df0 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM4)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a3a      	ldr	r2, [pc, #232]	@ (8002e08 <HAL_TIM_MspPostInit+0x1d4>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d11e      	bne.n	8002d62 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
 8002d28:	4b33      	ldr	r3, [pc, #204]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2c:	4a32      	ldr	r2, [pc, #200]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002d2e:	f043 0302 	orr.w	r3, r3, #2
 8002d32:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d34:	4b30      	ldr	r3, [pc, #192]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002d36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TIM_shoulder_Pin;
 8002d40:	2340      	movs	r3, #64	@ 0x40
 8002d42:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002d50:	2302      	movs	r3, #2
 8002d52:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM_shoulder_GPIO_Port, &GPIO_InitStruct);
 8002d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4828      	ldr	r0, [pc, #160]	@ (8002dfc <HAL_TIM_MspPostInit+0x1c8>)
 8002d5c:	f000 fcd0 	bl	8003700 <HAL_GPIO_Init>
}
 8002d60:	e046      	b.n	8002df0 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM5)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a29      	ldr	r2, [pc, #164]	@ (8002e0c <HAL_TIM_MspPostInit+0x1d8>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d11e      	bne.n	8002daa <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	4b21      	ldr	r3, [pc, #132]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d74:	4a20      	ldr	r2, [pc, #128]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d7c:	4b1e      	ldr	r3, [pc, #120]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Left_Pwm_Pin|Right_Pwm_Pin;
 8002d88:	2303      	movs	r3, #3
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d90:	2300      	movs	r3, #0
 8002d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d94:	2300      	movs	r3, #0
 8002d96:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d98:	2302      	movs	r3, #2
 8002d9a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002da0:	4619      	mov	r1, r3
 8002da2:	481b      	ldr	r0, [pc, #108]	@ (8002e10 <HAL_TIM_MspPostInit+0x1dc>)
 8002da4:	f000 fcac 	bl	8003700 <HAL_GPIO_Init>
}
 8002da8:	e022      	b.n	8002df0 <HAL_TIM_MspPostInit+0x1bc>
  else if(htim->Instance==TIM14)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a19      	ldr	r2, [pc, #100]	@ (8002e14 <HAL_TIM_MspPostInit+0x1e0>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d11d      	bne.n	8002df0 <HAL_TIM_MspPostInit+0x1bc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db4:	2300      	movs	r3, #0
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	4b0f      	ldr	r3, [pc, #60]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dbc:	4a0e      	ldr	r2, [pc, #56]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002dbe:	f043 0301 	orr.w	r3, r3, #1
 8002dc2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8002df8 <HAL_TIM_MspPostInit+0x1c4>)
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
 8002dce:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TIM_base_Pin;
 8002dd0:	2380      	movs	r3, #128	@ 0x80
 8002dd2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd4:	2302      	movs	r3, #2
 8002dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM14;
 8002de0:	2309      	movs	r3, #9
 8002de2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(TIM_base_GPIO_Port, &GPIO_InitStruct);
 8002de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002de8:	4619      	mov	r1, r3
 8002dea:	4809      	ldr	r0, [pc, #36]	@ (8002e10 <HAL_TIM_MspPostInit+0x1dc>)
 8002dec:	f000 fc88 	bl	8003700 <HAL_GPIO_Init>
}
 8002df0:	bf00      	nop
 8002df2:	3738      	adds	r7, #56	@ 0x38
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020400 	.word	0x40020400
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40020800 	.word	0x40020800
 8002e08:	40000800 	.word	0x40000800
 8002e0c:	40000c00 	.word	0x40000c00
 8002e10:	40020000 	.word	0x40020000
 8002e14:	40002000 	.word	0x40002000

08002e18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e20:	f107 0314 	add.w	r3, r7, #20
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	609a      	str	r2, [r3, #8]
 8002e2c:	60da      	str	r2, [r3, #12]
 8002e2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a1d      	ldr	r2, [pc, #116]	@ (8002eac <HAL_UART_MspInit+0x94>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d133      	bne.n	8002ea2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	613b      	str	r3, [r7, #16]
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	@ (8002eb0 <HAL_UART_MspInit+0x98>)
 8002e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e42:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb0 <HAL_UART_MspInit+0x98>)
 8002e44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e48:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4a:	4b19      	ldr	r3, [pc, #100]	@ (8002eb0 <HAL_UART_MspInit+0x98>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e52:	613b      	str	r3, [r7, #16]
 8002e54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
 8002e5a:	4b15      	ldr	r3, [pc, #84]	@ (8002eb0 <HAL_UART_MspInit+0x98>)
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5e:	4a14      	ldr	r2, [pc, #80]	@ (8002eb0 <HAL_UART_MspInit+0x98>)
 8002e60:	f043 0301 	orr.w	r3, r3, #1
 8002e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e66:	4b12      	ldr	r3, [pc, #72]	@ (8002eb0 <HAL_UART_MspInit+0x98>)
 8002e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002e72:	230c      	movs	r3, #12
 8002e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e76:	2302      	movs	r3, #2
 8002e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002e82:	2307      	movs	r3, #7
 8002e84:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4809      	ldr	r0, [pc, #36]	@ (8002eb4 <HAL_UART_MspInit+0x9c>)
 8002e8e:	f000 fc37 	bl	8003700 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	2026      	movs	r0, #38	@ 0x26
 8002e98:	f000 fb69 	bl	800356e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e9c:	2026      	movs	r0, #38	@ 0x26
 8002e9e:	f000 fb82 	bl	80035a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002ea2:	bf00      	nop
 8002ea4:	3728      	adds	r7, #40	@ 0x28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40004400 	.word	0x40004400
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	40020000 	.word	0x40020000

08002eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ebc:	bf00      	nop
 8002ebe:	e7fd      	b.n	8002ebc <NMI_Handler+0x4>

08002ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ec4:	bf00      	nop
 8002ec6:	e7fd      	b.n	8002ec4 <HardFault_Handler+0x4>

08002ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <MemManage_Handler+0x4>

08002ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ed4:	bf00      	nop
 8002ed6:	e7fd      	b.n	8002ed4 <BusFault_Handler+0x4>

08002ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002edc:	bf00      	nop
 8002ede:	e7fd      	b.n	8002edc <UsageFault_Handler+0x4>

08002ee0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ef2:	bf00      	nop
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
	...

08002f0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002f10:	f000 fa32 	bl	8003378 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  msTicks++;
 8002f14:	4b03      	ldr	r3, [pc, #12]	@ (8002f24 <SysTick_Handler+0x18>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	4a02      	ldr	r2, [pc, #8]	@ (8002f24 <SysTick_Handler+0x18>)
 8002f1c:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002f1e:	bf00      	nop
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000694 	.word	0x20000694

08002f28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f2c:	4802      	ldr	r0, [pc, #8]	@ (8002f38 <TIM2_IRQHandler+0x10>)
 8002f2e:	f001 fd85 	bl	8004a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000023c 	.word	0x2000023c

08002f3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f40:	4802      	ldr	r0, [pc, #8]	@ (8002f4c <TIM3_IRQHandler+0x10>)
 8002f42:	f001 fd7b 	bl	8004a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f46:	bf00      	nop
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	20000284 	.word	0x20000284

08002f50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002f54:	4802      	ldr	r0, [pc, #8]	@ (8002f60 <TIM4_IRQHandler+0x10>)
 8002f56:	f001 fd71 	bl	8004a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002f5a:	bf00      	nop
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	200002cc 	.word	0x200002cc

08002f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f68:	4802      	ldr	r0, [pc, #8]	@ (8002f74 <USART2_IRQHandler+0x10>)
 8002f6a:	f002 fcb5 	bl	80058d8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f6e:	bf00      	nop
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	200003a4 	.word	0x200003a4

08002f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Right_pulse_B_Pin);
 8002f7c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8002f80:	f000 fd84 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Right_pulse_A_Pin);
 8002f84:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8002f88:	f000 fd80 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8002f8c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002f90:	f000 fd7c 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_pulse_B_Pin);
 8002f94:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002f98:	f000 fd78 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Left_pulse_A_Pin);
 8002f9c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002fa0:	f000 fd74 	bl	8003a8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002fa4:	bf00      	nop
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8002fac:	4802      	ldr	r0, [pc, #8]	@ (8002fb8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8002fae:	f001 fd45 	bl	8004a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8002fb2:	bf00      	nop
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	2000035c 	.word	0x2000035c

08002fbc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002fc0:	4802      	ldr	r0, [pc, #8]	@ (8002fcc <TIM5_IRQHandler+0x10>)
 8002fc2:	f001 fd3b 	bl	8004a3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000314 	.word	0x20000314

08002fd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  return 1;
 8002fd4:	2301      	movs	r3, #1
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <_kill>:

int _kill(int pid, int sig)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002fea:	f005 f9fd 	bl	80083e8 <__errno>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2216      	movs	r2, #22
 8002ff2:	601a      	str	r2, [r3, #0]
  return -1;
 8002ff4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	3708      	adds	r7, #8
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <_exit>:

void _exit (int status)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003008:	f04f 31ff 	mov.w	r1, #4294967295
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f7ff ffe7 	bl	8002fe0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003012:	bf00      	nop
 8003014:	e7fd      	b.n	8003012 <_exit+0x12>

08003016 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e00a      	b.n	800303e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003028:	f3af 8000 	nop.w
 800302c:	4601      	mov	r1, r0
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	1c5a      	adds	r2, r3, #1
 8003032:	60ba      	str	r2, [r7, #8]
 8003034:	b2ca      	uxtb	r2, r1
 8003036:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003038:	697b      	ldr	r3, [r7, #20]
 800303a:	3301      	adds	r3, #1
 800303c:	617b      	str	r3, [r7, #20]
 800303e:	697a      	ldr	r2, [r7, #20]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	429a      	cmp	r2, r3
 8003044:	dbf0      	blt.n	8003028 <_read+0x12>
  }

  return len;
 8003046:	687b      	ldr	r3, [r7, #4]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
 8003060:	e009      	b.n	8003076 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	1c5a      	adds	r2, r3, #1
 8003066:	60ba      	str	r2, [r7, #8]
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe f83c 	bl	80010e8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	3301      	adds	r3, #1
 8003074:	617b      	str	r3, [r7, #20]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	429a      	cmp	r2, r3
 800307c:	dbf1      	blt.n	8003062 <_write+0x12>
  }
  return len;
 800307e:	687b      	ldr	r3, [r7, #4]
}
 8003080:	4618      	mov	r0, r3
 8003082:	3718      	adds	r7, #24
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <_close>:

int _close(int file)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003090:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003094:	4618      	mov	r0, r3
 8003096:	370c      	adds	r7, #12
 8003098:	46bd      	mov	sp, r7
 800309a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309e:	4770      	bx	lr

080030a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030b0:	605a      	str	r2, [r3, #4]
  return 0;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	370c      	adds	r7, #12
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <_isatty>:

int _isatty(int file)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80030c8:	2301      	movs	r3, #1
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	370c      	adds	r7, #12
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr

080030d6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b085      	sub	sp, #20
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80030e2:	2300      	movs	r3, #0
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3714      	adds	r7, #20
 80030e8:	46bd      	mov	sp, r7
 80030ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ee:	4770      	bx	lr

080030f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b086      	sub	sp, #24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80030f8:	4a14      	ldr	r2, [pc, #80]	@ (800314c <_sbrk+0x5c>)
 80030fa:	4b15      	ldr	r3, [pc, #84]	@ (8003150 <_sbrk+0x60>)
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003104:	4b13      	ldr	r3, [pc, #76]	@ (8003154 <_sbrk+0x64>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d102      	bne.n	8003112 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800310c:	4b11      	ldr	r3, [pc, #68]	@ (8003154 <_sbrk+0x64>)
 800310e:	4a12      	ldr	r2, [pc, #72]	@ (8003158 <_sbrk+0x68>)
 8003110:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003112:	4b10      	ldr	r3, [pc, #64]	@ (8003154 <_sbrk+0x64>)
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4413      	add	r3, r2
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	429a      	cmp	r2, r3
 800311e:	d207      	bcs.n	8003130 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003120:	f005 f962 	bl	80083e8 <__errno>
 8003124:	4603      	mov	r3, r0
 8003126:	220c      	movs	r2, #12
 8003128:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800312a:	f04f 33ff 	mov.w	r3, #4294967295
 800312e:	e009      	b.n	8003144 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003130:	4b08      	ldr	r3, [pc, #32]	@ (8003154 <_sbrk+0x64>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003136:	4b07      	ldr	r3, [pc, #28]	@ (8003154 <_sbrk+0x64>)
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4413      	add	r3, r2
 800313e:	4a05      	ldr	r2, [pc, #20]	@ (8003154 <_sbrk+0x64>)
 8003140:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003142:	68fb      	ldr	r3, [r7, #12]
}
 8003144:	4618      	mov	r0, r3
 8003146:	3718      	adds	r7, #24
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}
 800314c:	20020000 	.word	0x20020000
 8003150:	00000400 	.word	0x00000400
 8003154:	20000698 	.word	0x20000698
 8003158:	200007f0 	.word	0x200007f0

0800315c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <SystemInit+0x20>)
 8003162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003166:	4a05      	ldr	r2, [pc, #20]	@ (800317c <SystemInit+0x20>)
 8003168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800316c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000ed00 	.word	0xe000ed00

08003180 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8003180:	b480      	push	{r7}
 8003182:	b087      	sub	sp, #28
 8003184:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	2300      	movs	r3, #0
 800318c:	617b      	str	r3, [r7, #20]
 800318e:	2302      	movs	r3, #2
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	2300      	movs	r3, #0
 8003194:	60bb      	str	r3, [r7, #8]
 8003196:	2302      	movs	r3, #2
 8003198:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 800319a:	4b34      	ldr	r3, [pc, #208]	@ (800326c <SystemCoreClockUpdate+0xec>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f003 030c 	and.w	r3, r3, #12
 80031a2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d011      	beq.n	80031ce <SystemCoreClockUpdate+0x4e>
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2b08      	cmp	r3, #8
 80031ae:	d844      	bhi.n	800323a <SystemCoreClockUpdate+0xba>
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <SystemCoreClockUpdate+0x3e>
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d004      	beq.n	80031c6 <SystemCoreClockUpdate+0x46>
 80031bc:	e03d      	b.n	800323a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80031be:	4b2c      	ldr	r3, [pc, #176]	@ (8003270 <SystemCoreClockUpdate+0xf0>)
 80031c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003274 <SystemCoreClockUpdate+0xf4>)
 80031c2:	601a      	str	r2, [r3, #0]
      break;
 80031c4:	e03d      	b.n	8003242 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80031c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003270 <SystemCoreClockUpdate+0xf0>)
 80031c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003278 <SystemCoreClockUpdate+0xf8>)
 80031ca:	601a      	str	r2, [r3, #0]
      break;
 80031cc:	e039      	b.n	8003242 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80031ce:	4b27      	ldr	r3, [pc, #156]	@ (800326c <SystemCoreClockUpdate+0xec>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	0d9b      	lsrs	r3, r3, #22
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031da:	4b24      	ldr	r3, [pc, #144]	@ (800326c <SystemCoreClockUpdate+0xec>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031e2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00c      	beq.n	8003204 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80031ea:	4a23      	ldr	r2, [pc, #140]	@ (8003278 <SystemCoreClockUpdate+0xf8>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f2:	4a1e      	ldr	r2, [pc, #120]	@ (800326c <SystemCoreClockUpdate+0xec>)
 80031f4:	6852      	ldr	r2, [r2, #4]
 80031f6:	0992      	lsrs	r2, r2, #6
 80031f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031fc:	fb02 f303 	mul.w	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
 8003202:	e00b      	b.n	800321c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003204:	4a1b      	ldr	r2, [pc, #108]	@ (8003274 <SystemCoreClockUpdate+0xf4>)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	fbb2 f3f3 	udiv	r3, r2, r3
 800320c:	4a17      	ldr	r2, [pc, #92]	@ (800326c <SystemCoreClockUpdate+0xec>)
 800320e:	6852      	ldr	r2, [r2, #4]
 8003210:	0992      	lsrs	r2, r2, #6
 8003212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003216:	fb02 f303 	mul.w	r3, r2, r3
 800321a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800321c:	4b13      	ldr	r3, [pc, #76]	@ (800326c <SystemCoreClockUpdate+0xec>)
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	0c1b      	lsrs	r3, r3, #16
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	3301      	adds	r3, #1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800322c:	697a      	ldr	r2, [r7, #20]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	fbb2 f3f3 	udiv	r3, r2, r3
 8003234:	4a0e      	ldr	r2, [pc, #56]	@ (8003270 <SystemCoreClockUpdate+0xf0>)
 8003236:	6013      	str	r3, [r2, #0]
      break;
 8003238:	e003      	b.n	8003242 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800323a:	4b0d      	ldr	r3, [pc, #52]	@ (8003270 <SystemCoreClockUpdate+0xf0>)
 800323c:	4a0d      	ldr	r2, [pc, #52]	@ (8003274 <SystemCoreClockUpdate+0xf4>)
 800323e:	601a      	str	r2, [r3, #0]
      break;
 8003240:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8003242:	4b0a      	ldr	r3, [pc, #40]	@ (800326c <SystemCoreClockUpdate+0xec>)
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	4a0b      	ldr	r2, [pc, #44]	@ (800327c <SystemCoreClockUpdate+0xfc>)
 800324e:	5cd3      	ldrb	r3, [r2, r3]
 8003250:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8003252:	4b07      	ldr	r3, [pc, #28]	@ (8003270 <SystemCoreClockUpdate+0xf0>)
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	fa22 f303 	lsr.w	r3, r2, r3
 800325c:	4a04      	ldr	r2, [pc, #16]	@ (8003270 <SystemCoreClockUpdate+0xf0>)
 800325e:	6013      	str	r3, [r2, #0]
}
 8003260:	bf00      	nop
 8003262:	371c      	adds	r7, #28
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40023800 	.word	0x40023800
 8003270:	20000038 	.word	0x20000038
 8003274:	00f42400 	.word	0x00f42400
 8003278:	007a1200 	.word	0x007a1200
 800327c:	0800c220 	.word	0x0800c220

08003280 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack      /* set stack pointer */
 8003280:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80032b8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003284:	f7ff ff6a 	bl	800315c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003288:	480c      	ldr	r0, [pc, #48]	@ (80032bc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800328a:	490d      	ldr	r1, [pc, #52]	@ (80032c0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800328c:	4a0d      	ldr	r2, [pc, #52]	@ (80032c4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800328e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003290:	e002      	b.n	8003298 <LoopCopyDataInit>

08003292 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003292:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003294:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003296:	3304      	adds	r3, #4

08003298 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003298:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800329a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800329c:	d3f9      	bcc.n	8003292 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800329e:	4a0a      	ldr	r2, [pc, #40]	@ (80032c8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80032a0:	4c0a      	ldr	r4, [pc, #40]	@ (80032cc <LoopFillZerobss+0x22>)
  movs r3, #0
 80032a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032a4:	e001      	b.n	80032aa <LoopFillZerobss>

080032a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032a8:	3204      	adds	r2, #4

080032aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032ac:	d3fb      	bcc.n	80032a6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80032ae:	f005 f8a1 	bl	80083f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032b2:	f7fd fff5 	bl	80012a0 <main>
  bx  lr    
 80032b6:	4770      	bx	lr
   ldr   sp, =_estack      /* set stack pointer */
 80032b8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032c0:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 80032c4:	0800c850 	.word	0x0800c850
  ldr r2, =_sbss
 80032c8:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 80032cc:	200007ec 	.word	0x200007ec

080032d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032d0:	e7fe      	b.n	80032d0 <ADC_IRQHandler>
	...

080032d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032d8:	4b0e      	ldr	r3, [pc, #56]	@ (8003314 <HAL_Init+0x40>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003314 <HAL_Init+0x40>)
 80032de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003314 <HAL_Init+0x40>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003314 <HAL_Init+0x40>)
 80032ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032f0:	4b08      	ldr	r3, [pc, #32]	@ (8003314 <HAL_Init+0x40>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a07      	ldr	r2, [pc, #28]	@ (8003314 <HAL_Init+0x40>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032fc:	2003      	movs	r0, #3
 80032fe:	f000 f92b 	bl	8003558 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003302:	2000      	movs	r0, #0
 8003304:	f000 f808 	bl	8003318 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003308:	f7ff fbc4 	bl	8002a94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	40023c00 	.word	0x40023c00

08003318 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003320:	4b12      	ldr	r3, [pc, #72]	@ (800336c <HAL_InitTick+0x54>)
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	4b12      	ldr	r3, [pc, #72]	@ (8003370 <HAL_InitTick+0x58>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	4619      	mov	r1, r3
 800332a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800332e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	4618      	mov	r0, r3
 8003338:	f000 f943 	bl	80035c2 <HAL_SYSTICK_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d001      	beq.n	8003346 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e00e      	b.n	8003364 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2b0f      	cmp	r3, #15
 800334a:	d80a      	bhi.n	8003362 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800334c:	2200      	movs	r2, #0
 800334e:	6879      	ldr	r1, [r7, #4]
 8003350:	f04f 30ff 	mov.w	r0, #4294967295
 8003354:	f000 f90b 	bl	800356e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003358:	4a06      	ldr	r2, [pc, #24]	@ (8003374 <HAL_InitTick+0x5c>)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800335e:	2300      	movs	r3, #0
 8003360:	e000      	b.n	8003364 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	20000038 	.word	0x20000038
 8003370:	20000040 	.word	0x20000040
 8003374:	2000003c 	.word	0x2000003c

08003378 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_IncTick+0x20>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	461a      	mov	r2, r3
 8003382:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_IncTick+0x24>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4413      	add	r3, r2
 8003388:	4a04      	ldr	r2, [pc, #16]	@ (800339c <HAL_IncTick+0x24>)
 800338a:	6013      	str	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	20000040 	.word	0x20000040
 800339c:	2000069c 	.word	0x2000069c

080033a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033a0:	b480      	push	{r7}
 80033a2:	af00      	add	r7, sp, #0
  return uwTick;
 80033a4:	4b03      	ldr	r3, [pc, #12]	@ (80033b4 <HAL_GetTick+0x14>)
 80033a6:	681b      	ldr	r3, [r3, #0]
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	2000069c 	.word	0x2000069c

080033b8 <__NVIC_SetPriorityGrouping>:
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f003 0307 	and.w	r3, r3, #7
 80033c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033c8:	4b0c      	ldr	r3, [pc, #48]	@ (80033fc <__NVIC_SetPriorityGrouping+0x44>)
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ce:	68ba      	ldr	r2, [r7, #8]
 80033d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033d4:	4013      	ands	r3, r2
 80033d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033dc:	68bb      	ldr	r3, [r7, #8]
 80033de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80033e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033ea:	4a04      	ldr	r2, [pc, #16]	@ (80033fc <__NVIC_SetPriorityGrouping+0x44>)
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	60d3      	str	r3, [r2, #12]
}
 80033f0:	bf00      	nop
 80033f2:	3714      	adds	r7, #20
 80033f4:	46bd      	mov	sp, r7
 80033f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fa:	4770      	bx	lr
 80033fc:	e000ed00 	.word	0xe000ed00

08003400 <__NVIC_GetPriorityGrouping>:
{
 8003400:	b480      	push	{r7}
 8003402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003404:	4b04      	ldr	r3, [pc, #16]	@ (8003418 <__NVIC_GetPriorityGrouping+0x18>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	0a1b      	lsrs	r3, r3, #8
 800340a:	f003 0307 	and.w	r3, r3, #7
}
 800340e:	4618      	mov	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003416:	4770      	bx	lr
 8003418:	e000ed00 	.word	0xe000ed00

0800341c <__NVIC_EnableIRQ>:
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	4603      	mov	r3, r0
 8003424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342a:	2b00      	cmp	r3, #0
 800342c:	db0b      	blt.n	8003446 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	f003 021f 	and.w	r2, r3, #31
 8003434:	4907      	ldr	r1, [pc, #28]	@ (8003454 <__NVIC_EnableIRQ+0x38>)
 8003436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800343a:	095b      	lsrs	r3, r3, #5
 800343c:	2001      	movs	r0, #1
 800343e:	fa00 f202 	lsl.w	r2, r0, r2
 8003442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003446:	bf00      	nop
 8003448:	370c      	adds	r7, #12
 800344a:	46bd      	mov	sp, r7
 800344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000e100 	.word	0xe000e100

08003458 <__NVIC_SetPriority>:
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	6039      	str	r1, [r7, #0]
 8003462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003468:	2b00      	cmp	r3, #0
 800346a:	db0a      	blt.n	8003482 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	490c      	ldr	r1, [pc, #48]	@ (80034a4 <__NVIC_SetPriority+0x4c>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	0112      	lsls	r2, r2, #4
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	440b      	add	r3, r1
 800347c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003480:	e00a      	b.n	8003498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	b2da      	uxtb	r2, r3
 8003486:	4908      	ldr	r1, [pc, #32]	@ (80034a8 <__NVIC_SetPriority+0x50>)
 8003488:	79fb      	ldrb	r3, [r7, #7]
 800348a:	f003 030f 	and.w	r3, r3, #15
 800348e:	3b04      	subs	r3, #4
 8003490:	0112      	lsls	r2, r2, #4
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	440b      	add	r3, r1
 8003496:	761a      	strb	r2, [r3, #24]
}
 8003498:	bf00      	nop
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	e000e100 	.word	0xe000e100
 80034a8:	e000ed00 	.word	0xe000ed00

080034ac <NVIC_EncodePriority>:
{
 80034ac:	b480      	push	{r7}
 80034ae:	b089      	sub	sp, #36	@ 0x24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	f003 0307 	and.w	r3, r3, #7
 80034be:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	f1c3 0307 	rsb	r3, r3, #7
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	bf28      	it	cs
 80034ca:	2304      	movcs	r3, #4
 80034cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	3304      	adds	r3, #4
 80034d2:	2b06      	cmp	r3, #6
 80034d4:	d902      	bls.n	80034dc <NVIC_EncodePriority+0x30>
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	3b03      	subs	r3, #3
 80034da:	e000      	b.n	80034de <NVIC_EncodePriority+0x32>
 80034dc:	2300      	movs	r3, #0
 80034de:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034e0:	f04f 32ff 	mov.w	r2, #4294967295
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43da      	mvns	r2, r3
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	401a      	ands	r2, r3
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034f4:	f04f 31ff 	mov.w	r1, #4294967295
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	43d9      	mvns	r1, r3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	4313      	orrs	r3, r2
}
 8003506:	4618      	mov	r0, r3
 8003508:	3724      	adds	r7, #36	@ 0x24
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <SysTick_Config>:
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b082      	sub	sp, #8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3b01      	subs	r3, #1
 8003520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003524:	d301      	bcc.n	800352a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8003526:	2301      	movs	r3, #1
 8003528:	e00f      	b.n	800354a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800352a:	4a0a      	ldr	r2, [pc, #40]	@ (8003554 <SysTick_Config+0x40>)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3b01      	subs	r3, #1
 8003530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003532:	210f      	movs	r1, #15
 8003534:	f04f 30ff 	mov.w	r0, #4294967295
 8003538:	f7ff ff8e 	bl	8003458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <SysTick_Config+0x40>)
 800353e:	2200      	movs	r2, #0
 8003540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003542:	4b04      	ldr	r3, [pc, #16]	@ (8003554 <SysTick_Config+0x40>)
 8003544:	2207      	movs	r2, #7
 8003546:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	e000e010 	.word	0xe000e010

08003558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7ff ff29 	bl	80033b8 <__NVIC_SetPriorityGrouping>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}

0800356e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800356e:	b580      	push	{r7, lr}
 8003570:	b086      	sub	sp, #24
 8003572:	af00      	add	r7, sp, #0
 8003574:	4603      	mov	r3, r0
 8003576:	60b9      	str	r1, [r7, #8]
 8003578:	607a      	str	r2, [r7, #4]
 800357a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800357c:	2300      	movs	r3, #0
 800357e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003580:	f7ff ff3e 	bl	8003400 <__NVIC_GetPriorityGrouping>
 8003584:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	6978      	ldr	r0, [r7, #20]
 800358c:	f7ff ff8e 	bl	80034ac <NVIC_EncodePriority>
 8003590:	4602      	mov	r2, r0
 8003592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003596:	4611      	mov	r1, r2
 8003598:	4618      	mov	r0, r3
 800359a:	f7ff ff5d 	bl	8003458 <__NVIC_SetPriority>
}
 800359e:	bf00      	nop
 80035a0:	3718      	adds	r7, #24
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}

080035a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b082      	sub	sp, #8
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	4603      	mov	r3, r0
 80035ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b4:	4618      	mov	r0, r3
 80035b6:	f7ff ff31 	bl	800341c <__NVIC_EnableIRQ>
}
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}

080035c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035c2:	b580      	push	{r7, lr}
 80035c4:	b082      	sub	sp, #8
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7ff ffa2 	bl	8003514 <SysTick_Config>
 80035d0:	4603      	mov	r3, r0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3708      	adds	r7, #8
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b084      	sub	sp, #16
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035e8:	f7ff feda 	bl	80033a0 <HAL_GetTick>
 80035ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d008      	beq.n	800360c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2280      	movs	r2, #128	@ 0x80
 80035fe:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e052      	b.n	80036b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0216 	bic.w	r2, r2, #22
 800361a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800362a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d103      	bne.n	800363c <HAL_DMA_Abort+0x62>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f022 0208 	bic.w	r2, r2, #8
 800364a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0201 	bic.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365c:	e013      	b.n	8003686 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800365e:	f7ff fe9f 	bl	80033a0 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b05      	cmp	r3, #5
 800366a:	d90c      	bls.n	8003686 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2220      	movs	r2, #32
 8003670:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2203      	movs	r2, #3
 8003676:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e015      	b.n	80036b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0301 	and.w	r3, r3, #1
 8003690:	2b00      	cmp	r3, #0
 8003692:	d1e4      	bne.n	800365e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003698:	223f      	movs	r2, #63	@ 0x3f
 800369a:	409a      	lsls	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}

080036ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036ba:	b480      	push	{r7}
 80036bc:	b083      	sub	sp, #12
 80036be:	af00      	add	r7, sp, #0
 80036c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d004      	beq.n	80036d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2280      	movs	r2, #128	@ 0x80
 80036d2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e00c      	b.n	80036f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2205      	movs	r2, #5
 80036dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f022 0201 	bic.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80036f0:	2300      	movs	r3, #0
}
 80036f2:	4618      	mov	r0, r3
 80036f4:	370c      	adds	r7, #12
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
	...

08003700 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	@ 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370a:	2300      	movs	r3, #0
 800370c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003716:	2300      	movs	r3, #0
 8003718:	61fb      	str	r3, [r7, #28]
 800371a:	e165      	b.n	80039e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800371c:	2201      	movs	r2, #1
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	fa02 f303 	lsl.w	r3, r2, r3
 8003724:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	429a      	cmp	r2, r3
 8003736:	f040 8154 	bne.w	80039e2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f003 0303 	and.w	r3, r3, #3
 8003742:	2b01      	cmp	r3, #1
 8003744:	d005      	beq.n	8003752 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374e:	2b02      	cmp	r3, #2
 8003750:	d130      	bne.n	80037b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2203      	movs	r2, #3
 800375e:	fa02 f303 	lsl.w	r3, r2, r3
 8003762:	43db      	mvns	r3, r3
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	4013      	ands	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	68da      	ldr	r2, [r3, #12]
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	69ba      	ldr	r2, [r7, #24]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003788:	2201      	movs	r2, #1
 800378a:	69fb      	ldr	r3, [r7, #28]
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	43db      	mvns	r3, r3
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	4013      	ands	r3, r2
 8003796:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	091b      	lsrs	r3, r3, #4
 800379e:	f003 0201 	and.w	r2, r3, #1
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	4313      	orrs	r3, r2
 80037ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	f003 0303 	and.w	r3, r3, #3
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d017      	beq.n	80037f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	005b      	lsls	r3, r3, #1
 80037ca:	2203      	movs	r2, #3
 80037cc:	fa02 f303 	lsl.w	r3, r2, r3
 80037d0:	43db      	mvns	r3, r3
 80037d2:	69ba      	ldr	r2, [r7, #24]
 80037d4:	4013      	ands	r3, r2
 80037d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	69fb      	ldr	r3, [r7, #28]
 80037de:	005b      	lsls	r3, r3, #1
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	69ba      	ldr	r2, [r7, #24]
 80037ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d123      	bne.n	8003844 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	08da      	lsrs	r2, r3, #3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3208      	adds	r2, #8
 8003804:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003808:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380a:	69fb      	ldr	r3, [r7, #28]
 800380c:	f003 0307 	and.w	r3, r3, #7
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	69ba      	ldr	r2, [r7, #24]
 800381c:	4013      	ands	r3, r2
 800381e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	691a      	ldr	r2, [r3, #16]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	08da      	lsrs	r2, r3, #3
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3208      	adds	r2, #8
 800383e:	69b9      	ldr	r1, [r7, #24]
 8003840:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	2203      	movs	r2, #3
 8003850:	fa02 f303 	lsl.w	r3, r2, r3
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f003 0203 	and.w	r2, r3, #3
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	fa02 f303 	lsl.w	r3, r2, r3
 800386c:	69ba      	ldr	r2, [r7, #24]
 800386e:	4313      	orrs	r3, r2
 8003870:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 80ae 	beq.w	80039e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003886:	2300      	movs	r3, #0
 8003888:	60fb      	str	r3, [r7, #12]
 800388a:	4b5d      	ldr	r3, [pc, #372]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 800388c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800388e:	4a5c      	ldr	r2, [pc, #368]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 8003890:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003894:	6453      	str	r3, [r2, #68]	@ 0x44
 8003896:	4b5a      	ldr	r3, [pc, #360]	@ (8003a00 <HAL_GPIO_Init+0x300>)
 8003898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800389a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800389e:	60fb      	str	r3, [r7, #12]
 80038a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a2:	4a58      	ldr	r2, [pc, #352]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	089b      	lsrs	r3, r3, #2
 80038a8:	3302      	adds	r3, #2
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	f003 0303 	and.w	r3, r3, #3
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	220f      	movs	r2, #15
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	4a4f      	ldr	r2, [pc, #316]	@ (8003a08 <HAL_GPIO_Init+0x308>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d025      	beq.n	800391a <HAL_GPIO_Init+0x21a>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a4e      	ldr	r2, [pc, #312]	@ (8003a0c <HAL_GPIO_Init+0x30c>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01f      	beq.n	8003916 <HAL_GPIO_Init+0x216>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	4a4d      	ldr	r2, [pc, #308]	@ (8003a10 <HAL_GPIO_Init+0x310>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d019      	beq.n	8003912 <HAL_GPIO_Init+0x212>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a4c      	ldr	r2, [pc, #304]	@ (8003a14 <HAL_GPIO_Init+0x314>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <HAL_GPIO_Init+0x20e>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a4b      	ldr	r2, [pc, #300]	@ (8003a18 <HAL_GPIO_Init+0x318>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00d      	beq.n	800390a <HAL_GPIO_Init+0x20a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a4a      	ldr	r2, [pc, #296]	@ (8003a1c <HAL_GPIO_Init+0x31c>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <HAL_GPIO_Init+0x206>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a49      	ldr	r2, [pc, #292]	@ (8003a20 <HAL_GPIO_Init+0x320>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <HAL_GPIO_Init+0x202>
 80038fe:	2306      	movs	r3, #6
 8003900:	e00c      	b.n	800391c <HAL_GPIO_Init+0x21c>
 8003902:	2307      	movs	r3, #7
 8003904:	e00a      	b.n	800391c <HAL_GPIO_Init+0x21c>
 8003906:	2305      	movs	r3, #5
 8003908:	e008      	b.n	800391c <HAL_GPIO_Init+0x21c>
 800390a:	2304      	movs	r3, #4
 800390c:	e006      	b.n	800391c <HAL_GPIO_Init+0x21c>
 800390e:	2303      	movs	r3, #3
 8003910:	e004      	b.n	800391c <HAL_GPIO_Init+0x21c>
 8003912:	2302      	movs	r3, #2
 8003914:	e002      	b.n	800391c <HAL_GPIO_Init+0x21c>
 8003916:	2301      	movs	r3, #1
 8003918:	e000      	b.n	800391c <HAL_GPIO_Init+0x21c>
 800391a:	2300      	movs	r3, #0
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f002 0203 	and.w	r2, r2, #3
 8003922:	0092      	lsls	r2, r2, #2
 8003924:	4093      	lsls	r3, r2
 8003926:	69ba      	ldr	r2, [r7, #24]
 8003928:	4313      	orrs	r3, r2
 800392a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800392c:	4935      	ldr	r1, [pc, #212]	@ (8003a04 <HAL_GPIO_Init+0x304>)
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800393a:	4b3a      	ldr	r3, [pc, #232]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	43db      	mvns	r3, r3
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	4013      	ands	r3, r2
 8003948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d003      	beq.n	800395e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395e:	4a31      	ldr	r2, [pc, #196]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003964:	4b2f      	ldr	r3, [pc, #188]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	43db      	mvns	r3, r3
 800396e:	69ba      	ldr	r2, [r7, #24]
 8003970:	4013      	ands	r3, r2
 8003972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	4313      	orrs	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003988:	4a26      	ldr	r2, [pc, #152]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800398e:	4b25      	ldr	r3, [pc, #148]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 8003990:	685b      	ldr	r3, [r3, #4]
 8003992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	43db      	mvns	r3, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4013      	ands	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80039aa:	69ba      	ldr	r2, [r7, #24]
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b8:	4b1a      	ldr	r3, [pc, #104]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69ba      	ldr	r2, [r7, #24]
 80039c4:	4013      	ands	r3, r2
 80039c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d003      	beq.n	80039dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80039d4:	69ba      	ldr	r2, [r7, #24]
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	4313      	orrs	r3, r2
 80039da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039dc:	4a11      	ldr	r2, [pc, #68]	@ (8003a24 <HAL_GPIO_Init+0x324>)
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039e2:	69fb      	ldr	r3, [r7, #28]
 80039e4:	3301      	adds	r3, #1
 80039e6:	61fb      	str	r3, [r7, #28]
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	2b0f      	cmp	r3, #15
 80039ec:	f67f ae96 	bls.w	800371c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039f0:	bf00      	nop
 80039f2:	bf00      	nop
 80039f4:	3724      	adds	r7, #36	@ 0x24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fc:	4770      	bx	lr
 80039fe:	bf00      	nop
 8003a00:	40023800 	.word	0x40023800
 8003a04:	40013800 	.word	0x40013800
 8003a08:	40020000 	.word	0x40020000
 8003a0c:	40020400 	.word	0x40020400
 8003a10:	40020800 	.word	0x40020800
 8003a14:	40020c00 	.word	0x40020c00
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40021400 	.word	0x40021400
 8003a20:	40021800 	.word	0x40021800
 8003a24:	40013c00 	.word	0x40013c00

08003a28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b085      	sub	sp, #20
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	887b      	ldrh	r3, [r7, #2]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d002      	beq.n	8003a46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
 8003a44:	e001      	b.n	8003a4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	460b      	mov	r3, r1
 8003a62:	807b      	strh	r3, [r7, #2]
 8003a64:	4613      	mov	r3, r2
 8003a66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a68:	787b      	ldrb	r3, [r7, #1]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a6e:	887a      	ldrh	r2, [r7, #2]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a74:	e003      	b.n	8003a7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a76:	887b      	ldrh	r3, [r7, #2]
 8003a78:	041a      	lsls	r2, r3, #16
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	619a      	str	r2, [r3, #24]
}
 8003a7e:	bf00      	nop
 8003a80:	370c      	adds	r7, #12
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr
	...

08003a8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	4603      	mov	r3, r0
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003a96:	4b08      	ldr	r3, [pc, #32]	@ (8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a98:	695a      	ldr	r2, [r3, #20]
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d006      	beq.n	8003ab0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003aa2:	4a05      	ldr	r2, [pc, #20]	@ (8003ab8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003aa4:	88fb      	ldrh	r3, [r7, #6]
 8003aa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003aa8:	88fb      	ldrh	r3, [r7, #6]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fc14 	bl	80022d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003ab0:	bf00      	nop
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	40013c00 	.word	0x40013c00

08003abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d101      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e0cc      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b68      	ldr	r3, [pc, #416]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 030f 	and.w	r3, r3, #15
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d90c      	bls.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b65      	ldr	r3, [pc, #404]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b63      	ldr	r3, [pc, #396]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 030f 	and.w	r3, r3, #15
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e0b8      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d020      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d005      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b10:	4b59      	ldr	r3, [pc, #356]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	4a58      	ldr	r2, [pc, #352]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b1a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b28:	4b53      	ldr	r3, [pc, #332]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a52      	ldr	r2, [pc, #328]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b32:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b34:	4b50      	ldr	r3, [pc, #320]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	494d      	ldr	r1, [pc, #308]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d044      	beq.n	8003bdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5a:	4b47      	ldr	r3, [pc, #284]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d119      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b66:	2301      	movs	r3, #1
 8003b68:	e07f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b02      	cmp	r3, #2
 8003b70:	d003      	beq.n	8003b7a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d107      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d109      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e06f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0302 	and.w	r3, r3, #2
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e067      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9a:	4b37      	ldr	r3, [pc, #220]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f023 0203 	bic.w	r2, r3, #3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	4934      	ldr	r1, [pc, #208]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bac:	f7ff fbf8 	bl	80033a0 <HAL_GetTick>
 8003bb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb2:	e00a      	b.n	8003bca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb4:	f7ff fbf4 	bl	80033a0 <HAL_GetTick>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e04f      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	4b2b      	ldr	r3, [pc, #172]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 020c 	and.w	r2, r3, #12
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d1eb      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bdc:	4b25      	ldr	r3, [pc, #148]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 030f 	and.w	r3, r3, #15
 8003be4:	683a      	ldr	r2, [r7, #0]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d20c      	bcs.n	8003c04 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bea:	4b22      	ldr	r3, [pc, #136]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	b2d2      	uxtb	r2, r2
 8003bf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf2:	4b20      	ldr	r3, [pc, #128]	@ (8003c74 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d001      	beq.n	8003c04 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e032      	b.n	8003c6a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 0304 	and.w	r3, r3, #4
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d008      	beq.n	8003c22 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c10:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4916      	ldr	r1, [pc, #88]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f003 0308 	and.w	r3, r3, #8
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d009      	beq.n	8003c42 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	490e      	ldr	r1, [pc, #56]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c42:	f000 f855 	bl	8003cf0 <HAL_RCC_GetSysClockFreq>
 8003c46:	4602      	mov	r2, r0
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <HAL_RCC_ClockConfig+0x1bc>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	091b      	lsrs	r3, r3, #4
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	490a      	ldr	r1, [pc, #40]	@ (8003c7c <HAL_RCC_ClockConfig+0x1c0>)
 8003c54:	5ccb      	ldrb	r3, [r1, r3]
 8003c56:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5a:	4a09      	ldr	r2, [pc, #36]	@ (8003c80 <HAL_RCC_ClockConfig+0x1c4>)
 8003c5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c5e:	4b09      	ldr	r3, [pc, #36]	@ (8003c84 <HAL_RCC_ClockConfig+0x1c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7ff fb58 	bl	8003318 <HAL_InitTick>

  return HAL_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40023c00 	.word	0x40023c00
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	0800c220 	.word	0x0800c220
 8003c80:	20000038 	.word	0x20000038
 8003c84:	2000003c 	.word	0x2000003c

08003c88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c8c:	4b03      	ldr	r3, [pc, #12]	@ (8003c9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr
 8003c9a:	bf00      	nop
 8003c9c:	20000038 	.word	0x20000038

08003ca0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ca4:	f7ff fff0 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	0a9b      	lsrs	r3, r3, #10
 8003cb0:	f003 0307 	and.w	r3, r3, #7
 8003cb4:	4903      	ldr	r1, [pc, #12]	@ (8003cc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cb6:	5ccb      	ldrb	r3, [r1, r3]
 8003cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	40023800 	.word	0x40023800
 8003cc4:	0800c230 	.word	0x0800c230

08003cc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ccc:	f7ff ffdc 	bl	8003c88 <HAL_RCC_GetHCLKFreq>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	4b05      	ldr	r3, [pc, #20]	@ (8003ce8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	0b5b      	lsrs	r3, r3, #13
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	4903      	ldr	r1, [pc, #12]	@ (8003cec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cde:	5ccb      	ldrb	r3, [r1, r3]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	bd80      	pop	{r7, pc}
 8003ce8:	40023800 	.word	0x40023800
 8003cec:	0800c230 	.word	0x0800c230

08003cf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003cf4:	b0ae      	sub	sp, #184	@ 0xb8
 8003cf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8003d04:	2300      	movs	r3, #0
 8003d06:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003d16:	4bcb      	ldr	r3, [pc, #812]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f003 030c 	and.w	r3, r3, #12
 8003d1e:	2b0c      	cmp	r3, #12
 8003d20:	f200 8206 	bhi.w	8004130 <HAL_RCC_GetSysClockFreq+0x440>
 8003d24:	a201      	add	r2, pc, #4	@ (adr r2, 8003d2c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003d26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2a:	bf00      	nop
 8003d2c:	08003d61 	.word	0x08003d61
 8003d30:	08004131 	.word	0x08004131
 8003d34:	08004131 	.word	0x08004131
 8003d38:	08004131 	.word	0x08004131
 8003d3c:	08003d69 	.word	0x08003d69
 8003d40:	08004131 	.word	0x08004131
 8003d44:	08004131 	.word	0x08004131
 8003d48:	08004131 	.word	0x08004131
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08004131 	.word	0x08004131
 8003d54:	08004131 	.word	0x08004131
 8003d58:	08004131 	.word	0x08004131
 8003d5c:	08003f61 	.word	0x08003f61
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4bb9      	ldr	r3, [pc, #740]	@ (8004048 <HAL_RCC_GetSysClockFreq+0x358>)
 8003d62:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8003d66:	e1e7      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003d68:	4bb8      	ldr	r3, [pc, #736]	@ (800404c <HAL_RCC_GetSysClockFreq+0x35c>)
 8003d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003d6e:	e1e3      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003d70:	4bb4      	ldr	r3, [pc, #720]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d78:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003d7c:	4bb1      	ldr	r3, [pc, #708]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d071      	beq.n	8003e6c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d88:	4bae      	ldr	r3, [pc, #696]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x354>)
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	099b      	lsrs	r3, r3, #6
 8003d8e:	2200      	movs	r2, #0
 8003d90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d94:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8003d98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003da4:	2300      	movs	r3, #0
 8003da6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003daa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003dae:	4622      	mov	r2, r4
 8003db0:	462b      	mov	r3, r5
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f04f 0100 	mov.w	r1, #0
 8003dba:	0159      	lsls	r1, r3, #5
 8003dbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc0:	0150      	lsls	r0, r2, #5
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	1a51      	subs	r1, r2, r1
 8003dca:	6439      	str	r1, [r7, #64]	@ 0x40
 8003dcc:	4629      	mov	r1, r5
 8003dce:	eb63 0301 	sbc.w	r3, r3, r1
 8003dd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003de0:	4649      	mov	r1, r9
 8003de2:	018b      	lsls	r3, r1, #6
 8003de4:	4641      	mov	r1, r8
 8003de6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003dea:	4641      	mov	r1, r8
 8003dec:	018a      	lsls	r2, r1, #6
 8003dee:	4641      	mov	r1, r8
 8003df0:	1a51      	subs	r1, r2, r1
 8003df2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003df4:	4649      	mov	r1, r9
 8003df6:	eb63 0301 	sbc.w	r3, r3, r1
 8003dfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003dfc:	f04f 0200 	mov.w	r2, #0
 8003e00:	f04f 0300 	mov.w	r3, #0
 8003e04:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8003e08:	4649      	mov	r1, r9
 8003e0a:	00cb      	lsls	r3, r1, #3
 8003e0c:	4641      	mov	r1, r8
 8003e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e12:	4641      	mov	r1, r8
 8003e14:	00ca      	lsls	r2, r1, #3
 8003e16:	4610      	mov	r0, r2
 8003e18:	4619      	mov	r1, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4622      	mov	r2, r4
 8003e1e:	189b      	adds	r3, r3, r2
 8003e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8003e22:	462b      	mov	r3, r5
 8003e24:	460a      	mov	r2, r1
 8003e26:	eb42 0303 	adc.w	r3, r2, r3
 8003e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e2c:	f04f 0200 	mov.w	r2, #0
 8003e30:	f04f 0300 	mov.w	r3, #0
 8003e34:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003e38:	4629      	mov	r1, r5
 8003e3a:	024b      	lsls	r3, r1, #9
 8003e3c:	4621      	mov	r1, r4
 8003e3e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e42:	4621      	mov	r1, r4
 8003e44:	024a      	lsls	r2, r1, #9
 8003e46:	4610      	mov	r0, r2
 8003e48:	4619      	mov	r1, r3
 8003e4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003e54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003e58:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8003e5c:	f7fc ff34 	bl	8000cc8 <__aeabi_uldivmod>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4613      	mov	r3, r2
 8003e66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e6a:	e067      	b.n	8003f3c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e6c:	4b75      	ldr	r3, [pc, #468]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x354>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	099b      	lsrs	r3, r3, #6
 8003e72:	2200      	movs	r2, #0
 8003e74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e78:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8003e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003e80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e86:	2300      	movs	r3, #0
 8003e88:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003e8a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8003e8e:	4622      	mov	r2, r4
 8003e90:	462b      	mov	r3, r5
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f04f 0100 	mov.w	r1, #0
 8003e9a:	0159      	lsls	r1, r3, #5
 8003e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ea0:	0150      	lsls	r0, r2, #5
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	4621      	mov	r1, r4
 8003ea8:	1a51      	subs	r1, r2, r1
 8003eaa:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003eac:	4629      	mov	r1, r5
 8003eae:	eb63 0301 	sbc.w	r3, r3, r1
 8003eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8003ec0:	4649      	mov	r1, r9
 8003ec2:	018b      	lsls	r3, r1, #6
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003eca:	4641      	mov	r1, r8
 8003ecc:	018a      	lsls	r2, r1, #6
 8003ece:	4641      	mov	r1, r8
 8003ed0:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eda:	f04f 0200 	mov.w	r2, #0
 8003ede:	f04f 0300 	mov.w	r3, #0
 8003ee2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ee6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003eea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003eee:	4692      	mov	sl, r2
 8003ef0:	469b      	mov	fp, r3
 8003ef2:	4623      	mov	r3, r4
 8003ef4:	eb1a 0303 	adds.w	r3, sl, r3
 8003ef8:	623b      	str	r3, [r7, #32]
 8003efa:	462b      	mov	r3, r5
 8003efc:	eb4b 0303 	adc.w	r3, fp, r3
 8003f00:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f02:	f04f 0200 	mov.w	r2, #0
 8003f06:	f04f 0300 	mov.w	r3, #0
 8003f0a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003f0e:	4629      	mov	r1, r5
 8003f10:	028b      	lsls	r3, r1, #10
 8003f12:	4621      	mov	r1, r4
 8003f14:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f18:	4621      	mov	r1, r4
 8003f1a:	028a      	lsls	r2, r1, #10
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	4619      	mov	r1, r3
 8003f20:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003f24:	2200      	movs	r2, #0
 8003f26:	673b      	str	r3, [r7, #112]	@ 0x70
 8003f28:	677a      	str	r2, [r7, #116]	@ 0x74
 8003f2a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8003f2e:	f7fc fecb 	bl	8000cc8 <__aeabi_uldivmod>
 8003f32:	4602      	mov	r2, r0
 8003f34:	460b      	mov	r3, r1
 8003f36:	4613      	mov	r3, r2
 8003f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f3c:	4b41      	ldr	r3, [pc, #260]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	0c1b      	lsrs	r3, r3, #16
 8003f42:	f003 0303 	and.w	r3, r3, #3
 8003f46:	3301      	adds	r3, #1
 8003f48:	005b      	lsls	r3, r3, #1
 8003f4a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8003f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8003f5e:	e0eb      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f60:	4b38      	ldr	r3, [pc, #224]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f68:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f6c:	4b35      	ldr	r3, [pc, #212]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d06b      	beq.n	8004050 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f78:	4b32      	ldr	r3, [pc, #200]	@ (8004044 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	099b      	lsrs	r3, r3, #6
 8003f7e:	2200      	movs	r2, #0
 8003f80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003f82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003f84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003f86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003f90:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8003f94:	4622      	mov	r2, r4
 8003f96:	462b      	mov	r3, r5
 8003f98:	f04f 0000 	mov.w	r0, #0
 8003f9c:	f04f 0100 	mov.w	r1, #0
 8003fa0:	0159      	lsls	r1, r3, #5
 8003fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fa6:	0150      	lsls	r0, r2, #5
 8003fa8:	4602      	mov	r2, r0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4621      	mov	r1, r4
 8003fae:	1a51      	subs	r1, r2, r1
 8003fb0:	61b9      	str	r1, [r7, #24]
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	eb63 0301 	sbc.w	r3, r3, r1
 8003fb8:	61fb      	str	r3, [r7, #28]
 8003fba:	f04f 0200 	mov.w	r2, #0
 8003fbe:	f04f 0300 	mov.w	r3, #0
 8003fc2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003fc6:	4659      	mov	r1, fp
 8003fc8:	018b      	lsls	r3, r1, #6
 8003fca:	4651      	mov	r1, sl
 8003fcc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003fd0:	4651      	mov	r1, sl
 8003fd2:	018a      	lsls	r2, r1, #6
 8003fd4:	4651      	mov	r1, sl
 8003fd6:	ebb2 0801 	subs.w	r8, r2, r1
 8003fda:	4659      	mov	r1, fp
 8003fdc:	eb63 0901 	sbc.w	r9, r3, r1
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff4:	4690      	mov	r8, r2
 8003ff6:	4699      	mov	r9, r3
 8003ff8:	4623      	mov	r3, r4
 8003ffa:	eb18 0303 	adds.w	r3, r8, r3
 8003ffe:	613b      	str	r3, [r7, #16]
 8004000:	462b      	mov	r3, r5
 8004002:	eb49 0303 	adc.w	r3, r9, r3
 8004006:	617b      	str	r3, [r7, #20]
 8004008:	f04f 0200 	mov.w	r2, #0
 800400c:	f04f 0300 	mov.w	r3, #0
 8004010:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004014:	4629      	mov	r1, r5
 8004016:	024b      	lsls	r3, r1, #9
 8004018:	4621      	mov	r1, r4
 800401a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800401e:	4621      	mov	r1, r4
 8004020:	024a      	lsls	r2, r1, #9
 8004022:	4610      	mov	r0, r2
 8004024:	4619      	mov	r1, r3
 8004026:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800402a:	2200      	movs	r2, #0
 800402c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800402e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004030:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004034:	f7fc fe48 	bl	8000cc8 <__aeabi_uldivmod>
 8004038:	4602      	mov	r2, r0
 800403a:	460b      	mov	r3, r1
 800403c:	4613      	mov	r3, r2
 800403e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004042:	e065      	b.n	8004110 <HAL_RCC_GetSysClockFreq+0x420>
 8004044:	40023800 	.word	0x40023800
 8004048:	00f42400 	.word	0x00f42400
 800404c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004050:	4b3d      	ldr	r3, [pc, #244]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x458>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	2200      	movs	r2, #0
 8004058:	4618      	mov	r0, r3
 800405a:	4611      	mov	r1, r2
 800405c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004060:	653b      	str	r3, [r7, #80]	@ 0x50
 8004062:	2300      	movs	r3, #0
 8004064:	657b      	str	r3, [r7, #84]	@ 0x54
 8004066:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 800406a:	4642      	mov	r2, r8
 800406c:	464b      	mov	r3, r9
 800406e:	f04f 0000 	mov.w	r0, #0
 8004072:	f04f 0100 	mov.w	r1, #0
 8004076:	0159      	lsls	r1, r3, #5
 8004078:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800407c:	0150      	lsls	r0, r2, #5
 800407e:	4602      	mov	r2, r0
 8004080:	460b      	mov	r3, r1
 8004082:	4641      	mov	r1, r8
 8004084:	1a51      	subs	r1, r2, r1
 8004086:	60b9      	str	r1, [r7, #8]
 8004088:	4649      	mov	r1, r9
 800408a:	eb63 0301 	sbc.w	r3, r3, r1
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800409c:	4659      	mov	r1, fp
 800409e:	018b      	lsls	r3, r1, #6
 80040a0:	4651      	mov	r1, sl
 80040a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040a6:	4651      	mov	r1, sl
 80040a8:	018a      	lsls	r2, r1, #6
 80040aa:	4651      	mov	r1, sl
 80040ac:	1a54      	subs	r4, r2, r1
 80040ae:	4659      	mov	r1, fp
 80040b0:	eb63 0501 	sbc.w	r5, r3, r1
 80040b4:	f04f 0200 	mov.w	r2, #0
 80040b8:	f04f 0300 	mov.w	r3, #0
 80040bc:	00eb      	lsls	r3, r5, #3
 80040be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80040c2:	00e2      	lsls	r2, r4, #3
 80040c4:	4614      	mov	r4, r2
 80040c6:	461d      	mov	r5, r3
 80040c8:	4643      	mov	r3, r8
 80040ca:	18e3      	adds	r3, r4, r3
 80040cc:	603b      	str	r3, [r7, #0]
 80040ce:	464b      	mov	r3, r9
 80040d0:	eb45 0303 	adc.w	r3, r5, r3
 80040d4:	607b      	str	r3, [r7, #4]
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80040e2:	4629      	mov	r1, r5
 80040e4:	028b      	lsls	r3, r1, #10
 80040e6:	4621      	mov	r1, r4
 80040e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040ec:	4621      	mov	r1, r4
 80040ee:	028a      	lsls	r2, r1, #10
 80040f0:	4610      	mov	r0, r2
 80040f2:	4619      	mov	r1, r3
 80040f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80040f8:	2200      	movs	r2, #0
 80040fa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040fc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80040fe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004102:	f7fc fde1 	bl	8000cc8 <__aeabi_uldivmod>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4613      	mov	r3, r2
 800410c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004110:	4b0d      	ldr	r3, [pc, #52]	@ (8004148 <HAL_RCC_GetSysClockFreq+0x458>)
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	0f1b      	lsrs	r3, r3, #28
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 800411e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004126:	fbb2 f3f3 	udiv	r3, r2, r3
 800412a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800412e:	e003      	b.n	8004138 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <HAL_RCC_GetSysClockFreq+0x45c>)
 8004132:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8004136:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004138:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 800413c:	4618      	mov	r0, r3
 800413e:	37b8      	adds	r7, #184	@ 0xb8
 8004140:	46bd      	mov	sp, r7
 8004142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004146:	bf00      	nop
 8004148:	40023800 	.word	0x40023800
 800414c:	00f42400 	.word	0x00f42400

08004150 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d101      	bne.n	8004162 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	e28d      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 0301 	and.w	r3, r3, #1
 800416a:	2b00      	cmp	r3, #0
 800416c:	f000 8083 	beq.w	8004276 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004170:	4b94      	ldr	r3, [pc, #592]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 030c 	and.w	r3, r3, #12
 8004178:	2b04      	cmp	r3, #4
 800417a:	d019      	beq.n	80041b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800417c:	4b91      	ldr	r3, [pc, #580]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004184:	2b08      	cmp	r3, #8
 8004186:	d106      	bne.n	8004196 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004188:	4b8e      	ldr	r3, [pc, #568]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004190:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004194:	d00c      	beq.n	80041b0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004196:	4b8b      	ldr	r3, [pc, #556]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800419e:	2b0c      	cmp	r3, #12
 80041a0:	d112      	bne.n	80041c8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80041a2:	4b88      	ldr	r3, [pc, #544]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80041ae:	d10b      	bne.n	80041c8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b0:	4b84      	ldr	r3, [pc, #528]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d05b      	beq.n	8004274 <HAL_RCC_OscConfig+0x124>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d157      	bne.n	8004274 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e25a      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041d0:	d106      	bne.n	80041e0 <HAL_RCC_OscConfig+0x90>
 80041d2:	4b7c      	ldr	r3, [pc, #496]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a7b      	ldr	r2, [pc, #492]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80041d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041dc:	6013      	str	r3, [r2, #0]
 80041de:	e01d      	b.n	800421c <HAL_RCC_OscConfig+0xcc>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041e8:	d10c      	bne.n	8004204 <HAL_RCC_OscConfig+0xb4>
 80041ea:	4b76      	ldr	r3, [pc, #472]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a75      	ldr	r2, [pc, #468]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80041f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041f4:	6013      	str	r3, [r2, #0]
 80041f6:	4b73      	ldr	r3, [pc, #460]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a72      	ldr	r2, [pc, #456]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80041fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	e00b      	b.n	800421c <HAL_RCC_OscConfig+0xcc>
 8004204:	4b6f      	ldr	r3, [pc, #444]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	4a6e      	ldr	r2, [pc, #440]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 800420a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800420e:	6013      	str	r3, [r2, #0]
 8004210:	4b6c      	ldr	r3, [pc, #432]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a6b      	ldr	r2, [pc, #428]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004216:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800421a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d013      	beq.n	800424c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004224:	f7ff f8bc 	bl	80033a0 <HAL_GetTick>
 8004228:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800422a:	e008      	b.n	800423e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800422c:	f7ff f8b8 	bl	80033a0 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b64      	cmp	r3, #100	@ 0x64
 8004238:	d901      	bls.n	800423e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800423a:	2303      	movs	r3, #3
 800423c:	e21f      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800423e:	4b61      	ldr	r3, [pc, #388]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d0f0      	beq.n	800422c <HAL_RCC_OscConfig+0xdc>
 800424a:	e014      	b.n	8004276 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7ff f8a8 	bl	80033a0 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004252:	e008      	b.n	8004266 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004254:	f7ff f8a4 	bl	80033a0 <HAL_GetTick>
 8004258:	4602      	mov	r2, r0
 800425a:	693b      	ldr	r3, [r7, #16]
 800425c:	1ad3      	subs	r3, r2, r3
 800425e:	2b64      	cmp	r3, #100	@ 0x64
 8004260:	d901      	bls.n	8004266 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004262:	2303      	movs	r3, #3
 8004264:	e20b      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004266:	4b57      	ldr	r3, [pc, #348]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800426e:	2b00      	cmp	r3, #0
 8004270:	d1f0      	bne.n	8004254 <HAL_RCC_OscConfig+0x104>
 8004272:	e000      	b.n	8004276 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d06f      	beq.n	8004362 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004282:	4b50      	ldr	r3, [pc, #320]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f003 030c 	and.w	r3, r3, #12
 800428a:	2b00      	cmp	r3, #0
 800428c:	d017      	beq.n	80042be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800428e:	4b4d      	ldr	r3, [pc, #308]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8004296:	2b08      	cmp	r3, #8
 8004298:	d105      	bne.n	80042a6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800429a:	4b4a      	ldr	r3, [pc, #296]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00b      	beq.n	80042be <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042a6:	4b47      	ldr	r3, [pc, #284]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80042ae:	2b0c      	cmp	r3, #12
 80042b0:	d11c      	bne.n	80042ec <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80042b2:	4b44      	ldr	r3, [pc, #272]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d116      	bne.n	80042ec <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042be:	4b41      	ldr	r3, [pc, #260]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d005      	beq.n	80042d6 <HAL_RCC_OscConfig+0x186>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	68db      	ldr	r3, [r3, #12]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d001      	beq.n	80042d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e1d3      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d6:	4b3b      	ldr	r3, [pc, #236]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	4937      	ldr	r1, [pc, #220]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 80042e6:	4313      	orrs	r3, r2
 80042e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ea:	e03a      	b.n	8004362 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d020      	beq.n	8004336 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042f4:	4b34      	ldr	r3, [pc, #208]	@ (80043c8 <HAL_RCC_OscConfig+0x278>)
 80042f6:	2201      	movs	r2, #1
 80042f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fa:	f7ff f851 	bl	80033a0 <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004302:	f7ff f84d 	bl	80033a0 <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e1b4      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004314:	4b2b      	ldr	r3, [pc, #172]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 0302 	and.w	r3, r3, #2
 800431c:	2b00      	cmp	r3, #0
 800431e:	d0f0      	beq.n	8004302 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004320:	4b28      	ldr	r3, [pc, #160]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	4925      	ldr	r1, [pc, #148]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004330:	4313      	orrs	r3, r2
 8004332:	600b      	str	r3, [r1, #0]
 8004334:	e015      	b.n	8004362 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004336:	4b24      	ldr	r3, [pc, #144]	@ (80043c8 <HAL_RCC_OscConfig+0x278>)
 8004338:	2200      	movs	r2, #0
 800433a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800433c:	f7ff f830 	bl	80033a0 <HAL_GetTick>
 8004340:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004342:	e008      	b.n	8004356 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004344:	f7ff f82c 	bl	80033a0 <HAL_GetTick>
 8004348:	4602      	mov	r2, r0
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e193      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004356:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f0      	bne.n	8004344 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d036      	beq.n	80043dc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004376:	4b15      	ldr	r3, [pc, #84]	@ (80043cc <HAL_RCC_OscConfig+0x27c>)
 8004378:	2201      	movs	r2, #1
 800437a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7ff f810 	bl	80033a0 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004384:	f7ff f80c 	bl	80033a0 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e173      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004396:	4b0b      	ldr	r3, [pc, #44]	@ (80043c4 <HAL_RCC_OscConfig+0x274>)
 8004398:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x234>
 80043a2:	e01b      	b.n	80043dc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a4:	4b09      	ldr	r3, [pc, #36]	@ (80043cc <HAL_RCC_OscConfig+0x27c>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043aa:	f7fe fff9 	bl	80033a0 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b0:	e00e      	b.n	80043d0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043b2:	f7fe fff5 	bl	80033a0 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d907      	bls.n	80043d0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e15c      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	42470000 	.word	0x42470000
 80043cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043d0:	4b8a      	ldr	r3, [pc, #552]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 80043d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80043d4:	f003 0302 	and.w	r3, r3, #2
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1ea      	bne.n	80043b2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	f000 8097 	beq.w	8004518 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ea:	2300      	movs	r3, #0
 80043ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043ee:	4b83      	ldr	r3, [pc, #524]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10f      	bne.n	800441a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	4b7f      	ldr	r3, [pc, #508]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	4a7e      	ldr	r2, [pc, #504]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004408:	6413      	str	r3, [r2, #64]	@ 0x40
 800440a:	4b7c      	ldr	r3, [pc, #496]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 800440c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004412:	60bb      	str	r3, [r7, #8]
 8004414:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004416:	2301      	movs	r3, #1
 8004418:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441a:	4b79      	ldr	r3, [pc, #484]	@ (8004600 <HAL_RCC_OscConfig+0x4b0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004422:	2b00      	cmp	r3, #0
 8004424:	d118      	bne.n	8004458 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004426:	4b76      	ldr	r3, [pc, #472]	@ (8004600 <HAL_RCC_OscConfig+0x4b0>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a75      	ldr	r2, [pc, #468]	@ (8004600 <HAL_RCC_OscConfig+0x4b0>)
 800442c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004430:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004432:	f7fe ffb5 	bl	80033a0 <HAL_GetTick>
 8004436:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004438:	e008      	b.n	800444c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800443a:	f7fe ffb1 	bl	80033a0 <HAL_GetTick>
 800443e:	4602      	mov	r2, r0
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	1ad3      	subs	r3, r2, r3
 8004444:	2b02      	cmp	r3, #2
 8004446:	d901      	bls.n	800444c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004448:	2303      	movs	r3, #3
 800444a:	e118      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800444c:	4b6c      	ldr	r3, [pc, #432]	@ (8004600 <HAL_RCC_OscConfig+0x4b0>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0f0      	beq.n	800443a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	2b01      	cmp	r3, #1
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x31e>
 8004460:	4b66      	ldr	r3, [pc, #408]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004464:	4a65      	ldr	r2, [pc, #404]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	6713      	str	r3, [r2, #112]	@ 0x70
 800446c:	e01c      	b.n	80044a8 <HAL_RCC_OscConfig+0x358>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	2b05      	cmp	r3, #5
 8004474:	d10c      	bne.n	8004490 <HAL_RCC_OscConfig+0x340>
 8004476:	4b61      	ldr	r3, [pc, #388]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447a:	4a60      	ldr	r2, [pc, #384]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 800447c:	f043 0304 	orr.w	r3, r3, #4
 8004480:	6713      	str	r3, [r2, #112]	@ 0x70
 8004482:	4b5e      	ldr	r3, [pc, #376]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004484:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004486:	4a5d      	ldr	r2, [pc, #372]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	6713      	str	r3, [r2, #112]	@ 0x70
 800448e:	e00b      	b.n	80044a8 <HAL_RCC_OscConfig+0x358>
 8004490:	4b5a      	ldr	r3, [pc, #360]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004494:	4a59      	ldr	r2, [pc, #356]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004496:	f023 0301 	bic.w	r3, r3, #1
 800449a:	6713      	str	r3, [r2, #112]	@ 0x70
 800449c:	4b57      	ldr	r3, [pc, #348]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 800449e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044a0:	4a56      	ldr	r2, [pc, #344]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 80044a2:	f023 0304 	bic.w	r3, r3, #4
 80044a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689b      	ldr	r3, [r3, #8]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d015      	beq.n	80044dc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b0:	f7fe ff76 	bl	80033a0 <HAL_GetTick>
 80044b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044b8:	f7fe ff72 	bl	80033a0 <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e0d7      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044ce:	4b4b      	ldr	r3, [pc, #300]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 80044d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044d2:	f003 0302 	and.w	r3, r3, #2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d0ee      	beq.n	80044b8 <HAL_RCC_OscConfig+0x368>
 80044da:	e014      	b.n	8004506 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044dc:	f7fe ff60 	bl	80033a0 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e2:	e00a      	b.n	80044fa <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044e4:	f7fe ff5c 	bl	80033a0 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d901      	bls.n	80044fa <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80044f6:	2303      	movs	r3, #3
 80044f8:	e0c1      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044fa:	4b40      	ldr	r3, [pc, #256]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 80044fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1ee      	bne.n	80044e4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004506:	7dfb      	ldrb	r3, [r7, #23]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d105      	bne.n	8004518 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800450c:	4b3b      	ldr	r3, [pc, #236]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	4a3a      	ldr	r2, [pc, #232]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004512:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004516:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	699b      	ldr	r3, [r3, #24]
 800451c:	2b00      	cmp	r3, #0
 800451e:	f000 80ad 	beq.w	800467c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004522:	4b36      	ldr	r3, [pc, #216]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f003 030c 	and.w	r3, r3, #12
 800452a:	2b08      	cmp	r3, #8
 800452c:	d060      	beq.n	80045f0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	2b02      	cmp	r3, #2
 8004534:	d145      	bne.n	80045c2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b33      	ldr	r3, [pc, #204]	@ (8004604 <HAL_RCC_OscConfig+0x4b4>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800453c:	f7fe ff30 	bl	80033a0 <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fe ff2c 	bl	80033a0 <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e093      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	4b29      	ldr	r3, [pc, #164]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	69da      	ldr	r2, [r3, #28]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	431a      	orrs	r2, r3
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004570:	019b      	lsls	r3, r3, #6
 8004572:	431a      	orrs	r2, r3
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	3b01      	subs	r3, #1
 800457c:	041b      	lsls	r3, r3, #16
 800457e:	431a      	orrs	r2, r3
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004584:	061b      	lsls	r3, r3, #24
 8004586:	431a      	orrs	r2, r3
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800458c:	071b      	lsls	r3, r3, #28
 800458e:	491b      	ldr	r1, [pc, #108]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004594:	4b1b      	ldr	r3, [pc, #108]	@ (8004604 <HAL_RCC_OscConfig+0x4b4>)
 8004596:	2201      	movs	r2, #1
 8004598:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800459a:	f7fe ff01 	bl	80033a0 <HAL_GetTick>
 800459e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045a0:	e008      	b.n	80045b4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045a2:	f7fe fefd 	bl	80033a0 <HAL_GetTick>
 80045a6:	4602      	mov	r2, r0
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	1ad3      	subs	r3, r2, r3
 80045ac:	2b02      	cmp	r3, #2
 80045ae:	d901      	bls.n	80045b4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80045b0:	2303      	movs	r3, #3
 80045b2:	e064      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045b4:	4b11      	ldr	r3, [pc, #68]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d0f0      	beq.n	80045a2 <HAL_RCC_OscConfig+0x452>
 80045c0:	e05c      	b.n	800467c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045c2:	4b10      	ldr	r3, [pc, #64]	@ (8004604 <HAL_RCC_OscConfig+0x4b4>)
 80045c4:	2200      	movs	r2, #0
 80045c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c8:	f7fe feea 	bl	80033a0 <HAL_GetTick>
 80045cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045ce:	e008      	b.n	80045e2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045d0:	f7fe fee6 	bl	80033a0 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d901      	bls.n	80045e2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80045de:	2303      	movs	r3, #3
 80045e0:	e04d      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045e2:	4b06      	ldr	r3, [pc, #24]	@ (80045fc <HAL_RCC_OscConfig+0x4ac>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d1f0      	bne.n	80045d0 <HAL_RCC_OscConfig+0x480>
 80045ee:	e045      	b.n	800467c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	699b      	ldr	r3, [r3, #24]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d107      	bne.n	8004608 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e040      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
 80045fc:	40023800 	.word	0x40023800
 8004600:	40007000 	.word	0x40007000
 8004604:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004608:	4b1f      	ldr	r3, [pc, #124]	@ (8004688 <HAL_RCC_OscConfig+0x538>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d030      	beq.n	8004678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004620:	429a      	cmp	r2, r3
 8004622:	d129      	bne.n	8004678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d122      	bne.n	8004678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004638:	4013      	ands	r3, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800463e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004640:	4293      	cmp	r3, r2
 8004642:	d119      	bne.n	8004678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800464e:	085b      	lsrs	r3, r3, #1
 8004650:	3b01      	subs	r3, #1
 8004652:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004654:	429a      	cmp	r2, r3
 8004656:	d10f      	bne.n	8004678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004662:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004664:	429a      	cmp	r2, r3
 8004666:	d107      	bne.n	8004678 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004672:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004674:	429a      	cmp	r2, r3
 8004676:	d001      	beq.n	800467c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40023800 	.word	0x40023800

0800468c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d101      	bne.n	800469e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e041      	b.n	8004722 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d106      	bne.n	80046b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7fe fa16 	bl	8002ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2202      	movs	r2, #2
 80046bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	3304      	adds	r3, #4
 80046c8:	4619      	mov	r1, r3
 80046ca:	4610      	mov	r0, r2
 80046cc:	f000 fc58 	bl	8004f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2201      	movs	r2, #1
 800470c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2201      	movs	r2, #1
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004720:	2300      	movs	r3, #0
}
 8004722:	4618      	mov	r0, r3
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
	...

0800472c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	d001      	beq.n	8004744 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	e04e      	b.n	80047e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2202      	movs	r2, #2
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68da      	ldr	r2, [r3, #12]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f042 0201 	orr.w	r2, r2, #1
 800475a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a23      	ldr	r2, [pc, #140]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d022      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x80>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476e:	d01d      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x80>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a1f      	ldr	r2, [pc, #124]	@ (80047f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d018      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x80>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a1e      	ldr	r2, [pc, #120]	@ (80047f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004780:	4293      	cmp	r3, r2
 8004782:	d013      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x80>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a1c      	ldr	r2, [pc, #112]	@ (80047fc <HAL_TIM_Base_Start_IT+0xd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d00e      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x80>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a1b      	ldr	r2, [pc, #108]	@ (8004800 <HAL_TIM_Base_Start_IT+0xd4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d009      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x80>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a19      	ldr	r2, [pc, #100]	@ (8004804 <HAL_TIM_Base_Start_IT+0xd8>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d004      	beq.n	80047ac <HAL_TIM_Base_Start_IT+0x80>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a18      	ldr	r2, [pc, #96]	@ (8004808 <HAL_TIM_Base_Start_IT+0xdc>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d111      	bne.n	80047d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 0307 	and.w	r3, r3, #7
 80047b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	2b06      	cmp	r3, #6
 80047bc:	d010      	beq.n	80047e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f042 0201 	orr.w	r2, r2, #1
 80047cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ce:	e007      	b.n	80047e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3714      	adds	r7, #20
 80047e6:	46bd      	mov	sp, r7
 80047e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ec:	4770      	bx	lr
 80047ee:	bf00      	nop
 80047f0:	40010000 	.word	0x40010000
 80047f4:	40000400 	.word	0x40000400
 80047f8:	40000800 	.word	0x40000800
 80047fc:	40000c00 	.word	0x40000c00
 8004800:	40010400 	.word	0x40010400
 8004804:	40014000 	.word	0x40014000
 8004808:	40001800 	.word	0x40001800

0800480c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b082      	sub	sp, #8
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e041      	b.n	80048a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d106      	bne.n	8004838 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7fe f9d6 	bl	8002be4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	3304      	adds	r3, #4
 8004848:	4619      	mov	r1, r3
 800484a:	4610      	mov	r0, r2
 800484c:	f000 fb98 	bl	8004f80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2201      	movs	r2, #1
 800486c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2201      	movs	r2, #1
 8004894:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2201      	movs	r2, #1
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3708      	adds	r7, #8
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d109      	bne.n	80048d0 <HAL_TIM_PWM_Start+0x24>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	bf14      	ite	ne
 80048c8:	2301      	movne	r3, #1
 80048ca:	2300      	moveq	r3, #0
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	e022      	b.n	8004916 <HAL_TIM_PWM_Start+0x6a>
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d109      	bne.n	80048ea <HAL_TIM_PWM_Start+0x3e>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b01      	cmp	r3, #1
 80048e0:	bf14      	ite	ne
 80048e2:	2301      	movne	r3, #1
 80048e4:	2300      	moveq	r3, #0
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	e015      	b.n	8004916 <HAL_TIM_PWM_Start+0x6a>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b08      	cmp	r3, #8
 80048ee:	d109      	bne.n	8004904 <HAL_TIM_PWM_Start+0x58>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e008      	b.n	8004916 <HAL_TIM_PWM_Start+0x6a>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b01      	cmp	r3, #1
 800490e:	bf14      	ite	ne
 8004910:	2301      	movne	r3, #1
 8004912:	2300      	moveq	r3, #0
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e07c      	b.n	8004a18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d104      	bne.n	800492e <HAL_TIM_PWM_Start+0x82>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800492c:	e013      	b.n	8004956 <HAL_TIM_PWM_Start+0xaa>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	2b04      	cmp	r3, #4
 8004932:	d104      	bne.n	800493e <HAL_TIM_PWM_Start+0x92>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2202      	movs	r2, #2
 8004938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800493c:	e00b      	b.n	8004956 <HAL_TIM_PWM_Start+0xaa>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b08      	cmp	r3, #8
 8004942:	d104      	bne.n	800494e <HAL_TIM_PWM_Start+0xa2>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800494c:	e003      	b.n	8004956 <HAL_TIM_PWM_Start+0xaa>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2201      	movs	r2, #1
 800495c:	6839      	ldr	r1, [r7, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f000 fe04 	bl	800556c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a2d      	ldr	r2, [pc, #180]	@ (8004a20 <HAL_TIM_PWM_Start+0x174>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d004      	beq.n	8004978 <HAL_TIM_PWM_Start+0xcc>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a2c      	ldr	r2, [pc, #176]	@ (8004a24 <HAL_TIM_PWM_Start+0x178>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d101      	bne.n	800497c <HAL_TIM_PWM_Start+0xd0>
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <HAL_TIM_PWM_Start+0xd2>
 800497c:	2300      	movs	r3, #0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d007      	beq.n	8004992 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004990:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a22      	ldr	r2, [pc, #136]	@ (8004a20 <HAL_TIM_PWM_Start+0x174>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x136>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049a4:	d01d      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x136>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1f      	ldr	r2, [pc, #124]	@ (8004a28 <HAL_TIM_PWM_Start+0x17c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x136>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1d      	ldr	r2, [pc, #116]	@ (8004a2c <HAL_TIM_PWM_Start+0x180>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x136>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1c      	ldr	r2, [pc, #112]	@ (8004a30 <HAL_TIM_PWM_Start+0x184>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x136>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a16      	ldr	r2, [pc, #88]	@ (8004a24 <HAL_TIM_PWM_Start+0x178>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x136>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a18      	ldr	r2, [pc, #96]	@ (8004a34 <HAL_TIM_PWM_Start+0x188>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_TIM_PWM_Start+0x136>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a16      	ldr	r2, [pc, #88]	@ (8004a38 <HAL_TIM_PWM_Start+0x18c>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d111      	bne.n	8004a06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0307 	and.w	r3, r3, #7
 80049ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b06      	cmp	r3, #6
 80049f2:	d010      	beq.n	8004a16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a04:	e007      	b.n	8004a16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f042 0201 	orr.w	r2, r2, #1
 8004a14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	40010000 	.word	0x40010000
 8004a24:	40010400 	.word	0x40010400
 8004a28:	40000400 	.word	0x40000400
 8004a2c:	40000800 	.word	0x40000800
 8004a30:	40000c00 	.word	0x40000c00
 8004a34:	40014000 	.word	0x40014000
 8004a38:	40001800 	.word	0x40001800

08004a3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	68db      	ldr	r3, [r3, #12]
 8004a4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	691b      	ldr	r3, [r3, #16]
 8004a52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d020      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 0302 	and.w	r3, r3, #2
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d01b      	beq.n	8004aa0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0202 	mvn.w	r2, #2
 8004a70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d003      	beq.n	8004a8e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f000 fa5b 	bl	8004f42 <HAL_TIM_IC_CaptureCallback>
 8004a8c:	e005      	b.n	8004a9a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 fa4d 	bl	8004f2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fa5e 	bl	8004f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	f003 0304 	and.w	r3, r3, #4
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d020      	beq.n	8004aec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f003 0304 	and.w	r3, r3, #4
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01b      	beq.n	8004aec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f06f 0204 	mvn.w	r2, #4
 8004abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	699b      	ldr	r3, [r3, #24]
 8004aca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d003      	beq.n	8004ada <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 fa35 	bl	8004f42 <HAL_TIM_IC_CaptureCallback>
 8004ad8:	e005      	b.n	8004ae6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ada:	6878      	ldr	r0, [r7, #4]
 8004adc:	f000 fa27 	bl	8004f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fa38 	bl	8004f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	f003 0308 	and.w	r3, r3, #8
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d020      	beq.n	8004b38 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0308 	and.w	r3, r3, #8
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d01b      	beq.n	8004b38 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f06f 0208 	mvn.w	r2, #8
 8004b08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2204      	movs	r2, #4
 8004b0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	69db      	ldr	r3, [r3, #28]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d003      	beq.n	8004b26 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f000 fa0f 	bl	8004f42 <HAL_TIM_IC_CaptureCallback>
 8004b24:	e005      	b.n	8004b32 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa01 	bl	8004f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 fa12 	bl	8004f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d020      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f003 0310 	and.w	r3, r3, #16
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d01b      	beq.n	8004b84 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f06f 0210 	mvn.w	r2, #16
 8004b54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	2208      	movs	r2, #8
 8004b5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d003      	beq.n	8004b72 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f9e9 	bl	8004f42 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e005      	b.n	8004b7e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f9db 	bl	8004f2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b78:	6878      	ldr	r0, [r7, #4]
 8004b7a:	f000 f9ec 	bl	8004f56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	f003 0301 	and.w	r3, r3, #1
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00c      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	f003 0301 	and.w	r3, r3, #1
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f06f 0201 	mvn.w	r2, #1
 8004ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fd fe08 	bl	80027b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d007      	beq.n	8004bcc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fd7c 	bl	80056c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00c      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d007      	beq.n	8004bf0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f9bd 	bl	8004f6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f003 0320 	and.w	r3, r3, #32
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d00c      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d007      	beq.n	8004c14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f06f 0220 	mvn.w	r2, #32
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f000 fd4e 	bl	80056b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c14:	bf00      	nop
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b086      	sub	sp, #24
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d101      	bne.n	8004c3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c36:	2302      	movs	r3, #2
 8004c38:	e0ae      	b.n	8004d98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	f200 809f 	bhi.w	8004d88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004d89 	.word	0x08004d89
 8004c58:	08004d89 	.word	0x08004d89
 8004c5c:	08004d89 	.word	0x08004d89
 8004c60:	08004cc5 	.word	0x08004cc5
 8004c64:	08004d89 	.word	0x08004d89
 8004c68:	08004d89 	.word	0x08004d89
 8004c6c:	08004d89 	.word	0x08004d89
 8004c70:	08004d07 	.word	0x08004d07
 8004c74:	08004d89 	.word	0x08004d89
 8004c78:	08004d89 	.word	0x08004d89
 8004c7c:	08004d89 	.word	0x08004d89
 8004c80:	08004d47 	.word	0x08004d47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68b9      	ldr	r1, [r7, #8]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	f000 fa24 	bl	80050d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	699a      	ldr	r2, [r3, #24]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f042 0208 	orr.w	r2, r2, #8
 8004c9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	699a      	ldr	r2, [r3, #24]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f022 0204 	bic.w	r2, r2, #4
 8004cae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6999      	ldr	r1, [r3, #24]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	691a      	ldr	r2, [r3, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	430a      	orrs	r2, r1
 8004cc0:	619a      	str	r2, [r3, #24]
      break;
 8004cc2:	e064      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68b9      	ldr	r1, [r7, #8]
 8004cca:	4618      	mov	r0, r3
 8004ccc:	f000 fa74 	bl	80051b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	699a      	ldr	r2, [r3, #24]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004cde:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699a      	ldr	r2, [r3, #24]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004cee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	6999      	ldr	r1, [r3, #24]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	021a      	lsls	r2, r3, #8
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	619a      	str	r2, [r3, #24]
      break;
 8004d04:	e043      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68b9      	ldr	r1, [r7, #8]
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 fac9 	bl	80052a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	69da      	ldr	r2, [r3, #28]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 0208 	orr.w	r2, r2, #8
 8004d20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	69da      	ldr	r2, [r3, #28]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f022 0204 	bic.w	r2, r2, #4
 8004d30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	69d9      	ldr	r1, [r3, #28]
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	691a      	ldr	r2, [r3, #16]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	61da      	str	r2, [r3, #28]
      break;
 8004d44:	e023      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68b9      	ldr	r1, [r7, #8]
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	f000 fb1d 	bl	800538c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	69da      	ldr	r2, [r3, #28]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	69da      	ldr	r2, [r3, #28]
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	69d9      	ldr	r1, [r3, #28]
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	021a      	lsls	r2, r3, #8
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	61da      	str	r2, [r3, #28]
      break;
 8004d86:	e002      	b.n	8004d8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	75fb      	strb	r3, [r7, #23]
      break;
 8004d8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3718      	adds	r7, #24
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}

08004da0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d101      	bne.n	8004dbc <HAL_TIM_ConfigClockSource+0x1c>
 8004db8:	2302      	movs	r3, #2
 8004dba:	e0b4      	b.n	8004f26 <HAL_TIM_ConfigClockSource+0x186>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2202      	movs	r2, #2
 8004dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004dda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004de2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004df4:	d03e      	beq.n	8004e74 <HAL_TIM_ConfigClockSource+0xd4>
 8004df6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dfa:	f200 8087 	bhi.w	8004f0c <HAL_TIM_ConfigClockSource+0x16c>
 8004dfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e02:	f000 8086 	beq.w	8004f12 <HAL_TIM_ConfigClockSource+0x172>
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e0a:	d87f      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x16c>
 8004e0c:	2b70      	cmp	r3, #112	@ 0x70
 8004e0e:	d01a      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0xa6>
 8004e10:	2b70      	cmp	r3, #112	@ 0x70
 8004e12:	d87b      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x16c>
 8004e14:	2b60      	cmp	r3, #96	@ 0x60
 8004e16:	d050      	beq.n	8004eba <HAL_TIM_ConfigClockSource+0x11a>
 8004e18:	2b60      	cmp	r3, #96	@ 0x60
 8004e1a:	d877      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x16c>
 8004e1c:	2b50      	cmp	r3, #80	@ 0x50
 8004e1e:	d03c      	beq.n	8004e9a <HAL_TIM_ConfigClockSource+0xfa>
 8004e20:	2b50      	cmp	r3, #80	@ 0x50
 8004e22:	d873      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x16c>
 8004e24:	2b40      	cmp	r3, #64	@ 0x40
 8004e26:	d058      	beq.n	8004eda <HAL_TIM_ConfigClockSource+0x13a>
 8004e28:	2b40      	cmp	r3, #64	@ 0x40
 8004e2a:	d86f      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x16c>
 8004e2c:	2b30      	cmp	r3, #48	@ 0x30
 8004e2e:	d064      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x15a>
 8004e30:	2b30      	cmp	r3, #48	@ 0x30
 8004e32:	d86b      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x16c>
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d060      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x15a>
 8004e38:	2b20      	cmp	r3, #32
 8004e3a:	d867      	bhi.n	8004f0c <HAL_TIM_ConfigClockSource+0x16c>
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d05c      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x15a>
 8004e40:	2b10      	cmp	r3, #16
 8004e42:	d05a      	beq.n	8004efa <HAL_TIM_ConfigClockSource+0x15a>
 8004e44:	e062      	b.n	8004f0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e56:	f000 fb69 	bl	800552c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004e68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	609a      	str	r2, [r3, #8]
      break;
 8004e72:	e04f      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e84:	f000 fb52 	bl	800552c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e96:	609a      	str	r2, [r3, #8]
      break;
 8004e98:	e03c      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	f000 fac6 	bl	8005438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2150      	movs	r1, #80	@ 0x50
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb1f 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8004eb8:	e02c      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f000 fae5 	bl	8005496 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2160      	movs	r1, #96	@ 0x60
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	f000 fb0f 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8004ed8:	e01c      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	f000 faa6 	bl	8005438 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	2140      	movs	r1, #64	@ 0x40
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 faff 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8004ef8:	e00c      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	683b      	ldr	r3, [r7, #0]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4619      	mov	r1, r3
 8004f04:	4610      	mov	r0, r2
 8004f06:	f000 faf6 	bl	80054f6 <TIM_ITRx_SetConfig>
      break;
 8004f0a:	e003      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8004f10:	e000      	b.n	8004f14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004f24:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}

08004f2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr

08004f42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f4a:	bf00      	nop
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr

08004f56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f56:	b480      	push	{r7}
 8004f58:	b083      	sub	sp, #12
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f5e:	bf00      	nop
 8004f60:	370c      	adds	r7, #12
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr

08004f6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f72:	bf00      	nop
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
	...

08004f80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b085      	sub	sp, #20
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
 8004f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a46      	ldr	r2, [pc, #280]	@ (80050ac <TIM_Base_SetConfig+0x12c>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d013      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f9e:	d00f      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a43      	ldr	r2, [pc, #268]	@ (80050b0 <TIM_Base_SetConfig+0x130>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d00b      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a42      	ldr	r2, [pc, #264]	@ (80050b4 <TIM_Base_SetConfig+0x134>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d007      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a41      	ldr	r2, [pc, #260]	@ (80050b8 <TIM_Base_SetConfig+0x138>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d003      	beq.n	8004fc0 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a40      	ldr	r2, [pc, #256]	@ (80050bc <TIM_Base_SetConfig+0x13c>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d108      	bne.n	8004fd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a35      	ldr	r2, [pc, #212]	@ (80050ac <TIM_Base_SetConfig+0x12c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d02b      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fe0:	d027      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a32      	ldr	r2, [pc, #200]	@ (80050b0 <TIM_Base_SetConfig+0x130>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d023      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a31      	ldr	r2, [pc, #196]	@ (80050b4 <TIM_Base_SetConfig+0x134>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d01f      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a30      	ldr	r2, [pc, #192]	@ (80050b8 <TIM_Base_SetConfig+0x138>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01b      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a2f      	ldr	r2, [pc, #188]	@ (80050bc <TIM_Base_SetConfig+0x13c>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d017      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2e      	ldr	r2, [pc, #184]	@ (80050c0 <TIM_Base_SetConfig+0x140>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d013      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2d      	ldr	r2, [pc, #180]	@ (80050c4 <TIM_Base_SetConfig+0x144>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d00f      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2c      	ldr	r2, [pc, #176]	@ (80050c8 <TIM_Base_SetConfig+0x148>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00b      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a2b      	ldr	r2, [pc, #172]	@ (80050cc <TIM_Base_SetConfig+0x14c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d007      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a2a      	ldr	r2, [pc, #168]	@ (80050d0 <TIM_Base_SetConfig+0x150>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d003      	beq.n	8005032 <TIM_Base_SetConfig+0xb2>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a29      	ldr	r2, [pc, #164]	@ (80050d4 <TIM_Base_SetConfig+0x154>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d108      	bne.n	8005044 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005038:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4313      	orrs	r3, r2
 8005042:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689a      	ldr	r2, [r3, #8]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a10      	ldr	r2, [pc, #64]	@ (80050ac <TIM_Base_SetConfig+0x12c>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d003      	beq.n	8005078 <TIM_Base_SetConfig+0xf8>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a12      	ldr	r2, [pc, #72]	@ (80050bc <TIM_Base_SetConfig+0x13c>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d103      	bne.n	8005080 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691a      	ldr	r2, [r3, #16]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	2b01      	cmp	r3, #1
 8005090:	d105      	bne.n	800509e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	691b      	ldr	r3, [r3, #16]
 8005096:	f023 0201 	bic.w	r2, r3, #1
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	611a      	str	r2, [r3, #16]
  }
}
 800509e:	bf00      	nop
 80050a0:	3714      	adds	r7, #20
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr
 80050aa:	bf00      	nop
 80050ac:	40010000 	.word	0x40010000
 80050b0:	40000400 	.word	0x40000400
 80050b4:	40000800 	.word	0x40000800
 80050b8:	40000c00 	.word	0x40000c00
 80050bc:	40010400 	.word	0x40010400
 80050c0:	40014000 	.word	0x40014000
 80050c4:	40014400 	.word	0x40014400
 80050c8:	40014800 	.word	0x40014800
 80050cc:	40001800 	.word	0x40001800
 80050d0:	40001c00 	.word	0x40001c00
 80050d4:	40002000 	.word	0x40002000

080050d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6a1b      	ldr	r3, [r3, #32]
 80050e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6a1b      	ldr	r3, [r3, #32]
 80050ec:	f023 0201 	bic.w	r2, r3, #1
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	699b      	ldr	r3, [r3, #24]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0303 	bic.w	r3, r3, #3
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f023 0302 	bic.w	r3, r3, #2
 8005120:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	4a20      	ldr	r2, [pc, #128]	@ (80051b0 <TIM_OC1_SetConfig+0xd8>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d003      	beq.n	800513c <TIM_OC1_SetConfig+0x64>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	4a1f      	ldr	r2, [pc, #124]	@ (80051b4 <TIM_OC1_SetConfig+0xdc>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d10c      	bne.n	8005156 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f023 0308 	bic.w	r3, r3, #8
 8005142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800514e:	697b      	ldr	r3, [r7, #20]
 8005150:	f023 0304 	bic.w	r3, r3, #4
 8005154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a15      	ldr	r2, [pc, #84]	@ (80051b0 <TIM_OC1_SetConfig+0xd8>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d003      	beq.n	8005166 <TIM_OC1_SetConfig+0x8e>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a14      	ldr	r2, [pc, #80]	@ (80051b4 <TIM_OC1_SetConfig+0xdc>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d111      	bne.n	800518a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800516c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005174:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4313      	orrs	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	693a      	ldr	r2, [r7, #16]
 8005186:	4313      	orrs	r3, r2
 8005188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	693a      	ldr	r2, [r7, #16]
 800518e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	697a      	ldr	r2, [r7, #20]
 80051a2:	621a      	str	r2, [r3, #32]
}
 80051a4:	bf00      	nop
 80051a6:	371c      	adds	r7, #28
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	40010000 	.word	0x40010000
 80051b4:	40010400 	.word	0x40010400

080051b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a1b      	ldr	r3, [r3, #32]
 80051cc:	f023 0210 	bic.w	r2, r3, #16
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	699b      	ldr	r3, [r3, #24]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80051e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	021b      	lsls	r3, r3, #8
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0320 	bic.w	r3, r3, #32
 8005202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	4313      	orrs	r3, r2
 800520e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a22      	ldr	r2, [pc, #136]	@ (800529c <TIM_OC2_SetConfig+0xe4>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d003      	beq.n	8005220 <TIM_OC2_SetConfig+0x68>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	4a21      	ldr	r2, [pc, #132]	@ (80052a0 <TIM_OC2_SetConfig+0xe8>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d10d      	bne.n	800523c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005226:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	011b      	lsls	r3, r3, #4
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	4313      	orrs	r3, r2
 8005232:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800523a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a17      	ldr	r2, [pc, #92]	@ (800529c <TIM_OC2_SetConfig+0xe4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d003      	beq.n	800524c <TIM_OC2_SetConfig+0x94>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	4a16      	ldr	r2, [pc, #88]	@ (80052a0 <TIM_OC2_SetConfig+0xe8>)
 8005248:	4293      	cmp	r3, r2
 800524a:	d113      	bne.n	8005274 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005252:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800525a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	693a      	ldr	r2, [r7, #16]
 8005264:	4313      	orrs	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	699b      	ldr	r3, [r3, #24]
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685a      	ldr	r2, [r3, #4]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	697a      	ldr	r2, [r7, #20]
 800528c:	621a      	str	r2, [r3, #32]
}
 800528e:	bf00      	nop
 8005290:	371c      	adds	r7, #28
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr
 800529a:	bf00      	nop
 800529c:	40010000 	.word	0x40010000
 80052a0:	40010400 	.word	0x40010400

080052a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a1b      	ldr	r3, [r3, #32]
 80052b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68fa      	ldr	r2, [r7, #12]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052e6:	697b      	ldr	r3, [r7, #20]
 80052e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80052ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052ee:	683b      	ldr	r3, [r7, #0]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	021b      	lsls	r3, r3, #8
 80052f4:	697a      	ldr	r2, [r7, #20]
 80052f6:	4313      	orrs	r3, r2
 80052f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a21      	ldr	r2, [pc, #132]	@ (8005384 <TIM_OC3_SetConfig+0xe0>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d003      	beq.n	800530a <TIM_OC3_SetConfig+0x66>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a20      	ldr	r2, [pc, #128]	@ (8005388 <TIM_OC3_SetConfig+0xe4>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d10d      	bne.n	8005326 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005310:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	021b      	lsls	r3, r3, #8
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	4313      	orrs	r3, r2
 800531c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005324:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a16      	ldr	r2, [pc, #88]	@ (8005384 <TIM_OC3_SetConfig+0xe0>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d003      	beq.n	8005336 <TIM_OC3_SetConfig+0x92>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a15      	ldr	r2, [pc, #84]	@ (8005388 <TIM_OC3_SetConfig+0xe4>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d113      	bne.n	800535e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800533c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005344:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	4313      	orrs	r3, r2
 8005350:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	011b      	lsls	r3, r3, #4
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	4313      	orrs	r3, r2
 800535c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	621a      	str	r2, [r3, #32]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr
 8005384:	40010000 	.word	0x40010000
 8005388:	40010400 	.word	0x40010400

0800538c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800538c:	b480      	push	{r7}
 800538e:	b087      	sub	sp, #28
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
 8005394:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6a1b      	ldr	r3, [r3, #32]
 80053a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	69db      	ldr	r3, [r3, #28]
 80053b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80053ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	021b      	lsls	r3, r3, #8
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80053d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	031b      	lsls	r3, r3, #12
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a12      	ldr	r2, [pc, #72]	@ (8005430 <TIM_OC4_SetConfig+0xa4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d003      	beq.n	80053f4 <TIM_OC4_SetConfig+0x68>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a11      	ldr	r2, [pc, #68]	@ (8005434 <TIM_OC4_SetConfig+0xa8>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d109      	bne.n	8005408 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80053fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	019b      	lsls	r3, r3, #6
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	4313      	orrs	r3, r2
 8005406:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	621a      	str	r2, [r3, #32]
}
 8005422:	bf00      	nop
 8005424:	371c      	adds	r7, #28
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	40010000 	.word	0x40010000
 8005434:	40010400 	.word	0x40010400

08005438 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	6a1b      	ldr	r3, [r3, #32]
 8005448:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	f023 0201 	bic.w	r2, r3, #1
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005462:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	011b      	lsls	r3, r3, #4
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	4313      	orrs	r3, r2
 800546c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	f023 030a 	bic.w	r3, r3, #10
 8005474:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005476:	697a      	ldr	r2, [r7, #20]
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	4313      	orrs	r3, r2
 800547c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	693a      	ldr	r2, [r7, #16]
 8005482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005496:	b480      	push	{r7}
 8005498:	b087      	sub	sp, #28
 800549a:	af00      	add	r7, sp, #0
 800549c:	60f8      	str	r0, [r7, #12]
 800549e:	60b9      	str	r1, [r7, #8]
 80054a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	6a1b      	ldr	r3, [r3, #32]
 80054a6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a1b      	ldr	r3, [r3, #32]
 80054ac:	f023 0210 	bic.w	r2, r3, #16
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80054c0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	031b      	lsls	r3, r3, #12
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054cc:	697b      	ldr	r3, [r7, #20]
 80054ce:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80054d2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	011b      	lsls	r3, r3, #4
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	4313      	orrs	r3, r2
 80054dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	693a      	ldr	r2, [r7, #16]
 80054e2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr

080054f6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054f6:	b480      	push	{r7}
 80054f8:	b085      	sub	sp, #20
 80054fa:	af00      	add	r7, sp, #0
 80054fc:	6078      	str	r0, [r7, #4]
 80054fe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800550c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800550e:	683a      	ldr	r2, [r7, #0]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4313      	orrs	r3, r2
 8005514:	f043 0307 	orr.w	r3, r3, #7
 8005518:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	609a      	str	r2, [r3, #8]
}
 8005520:	bf00      	nop
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800552c:	b480      	push	{r7}
 800552e:	b087      	sub	sp, #28
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
 8005538:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005546:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005548:	683b      	ldr	r3, [r7, #0]
 800554a:	021a      	lsls	r2, r3, #8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	431a      	orrs	r2, r3
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4313      	orrs	r3, r2
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	609a      	str	r2, [r3, #8]
}
 8005560:	bf00      	nop
 8005562:	371c      	adds	r7, #28
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr

0800556c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800556c:	b480      	push	{r7}
 800556e:	b087      	sub	sp, #28
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2201      	movs	r2, #1
 8005580:	fa02 f303 	lsl.w	r3, r2, r3
 8005584:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1a      	ldr	r2, [r3, #32]
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	43db      	mvns	r3, r3
 800558e:	401a      	ands	r2, r3
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a1a      	ldr	r2, [r3, #32]
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f003 031f 	and.w	r3, r3, #31
 800559e:	6879      	ldr	r1, [r7, #4]
 80055a0:	fa01 f303 	lsl.w	r3, r1, r3
 80055a4:	431a      	orrs	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	621a      	str	r2, [r3, #32]
}
 80055aa:	bf00      	nop
 80055ac:	371c      	adds	r7, #28
 80055ae:	46bd      	mov	sp, r7
 80055b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b4:	4770      	bx	lr
	...

080055b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	d101      	bne.n	80055d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055cc:	2302      	movs	r3, #2
 80055ce:	e05a      	b.n	8005686 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2201      	movs	r2, #1
 80055d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2202      	movs	r2, #2
 80055dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	68fa      	ldr	r2, [r7, #12]
 80055fe:	4313      	orrs	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a21      	ldr	r2, [pc, #132]	@ (8005694 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d022      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800561c:	d01d      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1d      	ldr	r2, [pc, #116]	@ (8005698 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d018      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a1b      	ldr	r2, [pc, #108]	@ (800569c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d013      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a1a      	ldr	r2, [pc, #104]	@ (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d00e      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a18      	ldr	r2, [pc, #96]	@ (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d009      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a17      	ldr	r2, [pc, #92]	@ (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d004      	beq.n	800565a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	4a15      	ldr	r2, [pc, #84]	@ (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d10c      	bne.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005660:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	4313      	orrs	r3, r2
 800566a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005684:	2300      	movs	r3, #0
}
 8005686:	4618      	mov	r0, r3
 8005688:	3714      	adds	r7, #20
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	40010000 	.word	0x40010000
 8005698:	40000400 	.word	0x40000400
 800569c:	40000800 	.word	0x40000800
 80056a0:	40000c00 	.word	0x40000c00
 80056a4:	40010400 	.word	0x40010400
 80056a8:	40014000 	.word	0x40014000
 80056ac:	40001800 	.word	0x40001800

080056b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056c4:	b480      	push	{r7}
 80056c6:	b083      	sub	sp, #12
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056cc:	bf00      	nop
 80056ce:	370c      	adds	r7, #12
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b082      	sub	sp, #8
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e042      	b.n	8005770 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056fe:	6878      	ldr	r0, [r7, #4]
 8005700:	f7fd fb8a 	bl	8002e18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2224      	movs	r2, #36	@ 0x24
 8005708:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68da      	ldr	r2, [r3, #12]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800571a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f000 fdbd 	bl	800629c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691a      	ldr	r2, [r3, #16]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005730:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	695a      	ldr	r2, [r3, #20]
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005740:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	68da      	ldr	r2, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005750:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2220      	movs	r2, #32
 800575c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2220      	movs	r2, #32
 8005764:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2200      	movs	r2, #0
 800576c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3708      	adds	r7, #8
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}

08005778 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b08a      	sub	sp, #40	@ 0x28
 800577c:	af02      	add	r7, sp, #8
 800577e:	60f8      	str	r0, [r7, #12]
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	603b      	str	r3, [r7, #0]
 8005784:	4613      	mov	r3, r2
 8005786:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005792:	b2db      	uxtb	r3, r3
 8005794:	2b20      	cmp	r3, #32
 8005796:	d175      	bne.n	8005884 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_UART_Transmit+0x2c>
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e06e      	b.n	8005886 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2221      	movs	r2, #33	@ 0x21
 80057b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80057b6:	f7fd fdf3 	bl	80033a0 <HAL_GetTick>
 80057ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	88fa      	ldrh	r2, [r7, #6]
 80057c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	88fa      	ldrh	r2, [r7, #6]
 80057c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057d0:	d108      	bne.n	80057e4 <HAL_UART_Transmit+0x6c>
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	691b      	ldr	r3, [r3, #16]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d104      	bne.n	80057e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80057da:	2300      	movs	r3, #0
 80057dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	61bb      	str	r3, [r7, #24]
 80057e2:	e003      	b.n	80057ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057e8:	2300      	movs	r3, #0
 80057ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80057ec:	e02e      	b.n	800584c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	2200      	movs	r2, #0
 80057f6:	2180      	movs	r1, #128	@ 0x80
 80057f8:	68f8      	ldr	r0, [r7, #12]
 80057fa:	f000 fb1f 	bl	8005e3c <UART_WaitOnFlagUntilTimeout>
 80057fe:	4603      	mov	r3, r0
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e03a      	b.n	8005886 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d10b      	bne.n	800582e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005816:	69bb      	ldr	r3, [r7, #24]
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005824:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005826:	69bb      	ldr	r3, [r7, #24]
 8005828:	3302      	adds	r3, #2
 800582a:	61bb      	str	r3, [r7, #24]
 800582c:	e007      	b.n	800583e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	781a      	ldrb	r2, [r3, #0]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005838:	69fb      	ldr	r3, [r7, #28]
 800583a:	3301      	adds	r3, #1
 800583c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005850:	b29b      	uxth	r3, r3
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1cb      	bne.n	80057ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	2200      	movs	r2, #0
 800585e:	2140      	movs	r1, #64	@ 0x40
 8005860:	68f8      	ldr	r0, [r7, #12]
 8005862:	f000 faeb 	bl	8005e3c <UART_WaitOnFlagUntilTimeout>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2220      	movs	r2, #32
 8005870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e006      	b.n	8005886 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2220      	movs	r2, #32
 800587c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005880:	2300      	movs	r3, #0
 8005882:	e000      	b.n	8005886 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005884:	2302      	movs	r3, #2
  }
}
 8005886:	4618      	mov	r0, r3
 8005888:	3720      	adds	r7, #32
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}

0800588e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b084      	sub	sp, #16
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	4613      	mov	r3, r2
 800589a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	d112      	bne.n	80058ce <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d002      	beq.n	80058b4 <HAL_UART_Receive_IT+0x26>
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d101      	bne.n	80058b8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80058b4:	2301      	movs	r3, #1
 80058b6:	e00b      	b.n	80058d0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80058be:	88fb      	ldrh	r3, [r7, #6]
 80058c0:	461a      	mov	r2, r3
 80058c2:	68b9      	ldr	r1, [r7, #8]
 80058c4:	68f8      	ldr	r0, [r7, #12]
 80058c6:	f000 fb12 	bl	8005eee <UART_Start_Receive_IT>
 80058ca:	4603      	mov	r3, r0
 80058cc:	e000      	b.n	80058d0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80058ce:	2302      	movs	r3, #2
  }
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3710      	adds	r7, #16
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}

080058d8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b0ba      	sub	sp, #232	@ 0xe8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	695b      	ldr	r3, [r3, #20]
 80058fa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80058fe:	2300      	movs	r3, #0
 8005900:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005904:	2300      	movs	r3, #0
 8005906:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800590a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800590e:	f003 030f 	and.w	r3, r3, #15
 8005912:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005916:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d10f      	bne.n	800593e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800591e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005922:	f003 0320 	and.w	r3, r3, #32
 8005926:	2b00      	cmp	r3, #0
 8005928:	d009      	beq.n	800593e <HAL_UART_IRQHandler+0x66>
 800592a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592e:	f003 0320 	and.w	r3, r3, #32
 8005932:	2b00      	cmp	r3, #0
 8005934:	d003      	beq.n	800593e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f000 fbf2 	bl	8006120 <UART_Receive_IT>
      return;
 800593c:	e25b      	b.n	8005df6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800593e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005942:	2b00      	cmp	r3, #0
 8005944:	f000 80de 	beq.w	8005b04 <HAL_UART_IRQHandler+0x22c>
 8005948:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800594c:	f003 0301 	and.w	r3, r3, #1
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005958:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800595c:	2b00      	cmp	r3, #0
 800595e:	f000 80d1 	beq.w	8005b04 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00b      	beq.n	8005986 <HAL_UART_IRQHandler+0xae>
 800596e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005976:	2b00      	cmp	r3, #0
 8005978:	d005      	beq.n	8005986 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800597e:	f043 0201 	orr.w	r2, r3, #1
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800598a:	f003 0304 	and.w	r3, r3, #4
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00b      	beq.n	80059aa <HAL_UART_IRQHandler+0xd2>
 8005992:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005996:	f003 0301 	and.w	r3, r3, #1
 800599a:	2b00      	cmp	r3, #0
 800599c:	d005      	beq.n	80059aa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059a2:	f043 0202 	orr.w	r2, r3, #2
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80059aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00b      	beq.n	80059ce <HAL_UART_IRQHandler+0xf6>
 80059b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ba:	f003 0301 	and.w	r3, r3, #1
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d005      	beq.n	80059ce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059c6:	f043 0204 	orr.w	r2, r3, #4
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80059ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d011      	beq.n	80059fe <HAL_UART_IRQHandler+0x126>
 80059da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059de:	f003 0320 	and.w	r3, r3, #32
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d105      	bne.n	80059f2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80059e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d005      	beq.n	80059fe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059f6:	f043 0208 	orr.w	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f000 81f2 	beq.w	8005dec <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005a08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a0c:	f003 0320 	and.w	r3, r3, #32
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d008      	beq.n	8005a26 <HAL_UART_IRQHandler+0x14e>
 8005a14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a18:	f003 0320 	and.w	r3, r3, #32
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d002      	beq.n	8005a26 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fb7d 	bl	8006120 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a30:	2b40      	cmp	r3, #64	@ 0x40
 8005a32:	bf0c      	ite	eq
 8005a34:	2301      	moveq	r3, #1
 8005a36:	2300      	movne	r3, #0
 8005a38:	b2db      	uxtb	r3, r3
 8005a3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a42:	f003 0308 	and.w	r3, r3, #8
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d103      	bne.n	8005a52 <HAL_UART_IRQHandler+0x17a>
 8005a4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d04f      	beq.n	8005af2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 fa85 	bl	8005f62 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a62:	2b40      	cmp	r3, #64	@ 0x40
 8005a64:	d141      	bne.n	8005aea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3314      	adds	r3, #20
 8005a6c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005a74:	e853 3f00 	ldrex	r3, [r3]
 8005a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005a7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005a80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a84:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	3314      	adds	r3, #20
 8005a8e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005a92:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005a9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005aa2:	e841 2300 	strex	r3, r2, [r1]
 8005aa6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005aaa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d1d9      	bne.n	8005a66 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d013      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005abe:	4a7e      	ldr	r2, [pc, #504]	@ (8005cb8 <HAL_UART_IRQHandler+0x3e0>)
 8005ac0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f7fd fdf7 	bl	80036ba <HAL_DMA_Abort_IT>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d016      	beq.n	8005b00 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ad6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005adc:	4610      	mov	r0, r2
 8005ade:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae0:	e00e      	b.n	8005b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f994 	bl	8005e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ae8:	e00a      	b.n	8005b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 f990 	bl	8005e10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005af0:	e006      	b.n	8005b00 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 f98c 	bl	8005e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005afe:	e175      	b.n	8005dec <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b00:	bf00      	nop
    return;
 8005b02:	e173      	b.n	8005dec <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	f040 814f 	bne.w	8005dac <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005b12:	f003 0310 	and.w	r3, r3, #16
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	f000 8148 	beq.w	8005dac <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005b1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005b20:	f003 0310 	and.w	r3, r3, #16
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	f000 8141 	beq.w	8005dac <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	60bb      	str	r3, [r7, #8]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60bb      	str	r3, [r7, #8]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	60bb      	str	r3, [r7, #8]
 8005b3e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b4a:	2b40      	cmp	r3, #64	@ 0x40
 8005b4c:	f040 80b6 	bne.w	8005cbc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005b5c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f000 8145 	beq.w	8005df0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b6a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	f080 813e 	bcs.w	8005df0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005b7a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b80:	69db      	ldr	r3, [r3, #28]
 8005b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b86:	f000 8088 	beq.w	8005c9a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	330c      	adds	r3, #12
 8005b90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b94:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	330c      	adds	r3, #12
 8005bb2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005bb6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005bba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005bc2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d1d9      	bne.n	8005b8a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	3314      	adds	r3, #20
 8005bdc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005be6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005be8:	f023 0301 	bic.w	r3, r3, #1
 8005bec:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	3314      	adds	r3, #20
 8005bf6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005bfa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005bfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005c02:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005c06:	e841 2300 	strex	r3, r2, [r1]
 8005c0a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005c0c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1e1      	bne.n	8005bd6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	3314      	adds	r3, #20
 8005c18:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c1c:	e853 3f00 	ldrex	r3, [r3]
 8005c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005c22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005c24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005c28:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3314      	adds	r3, #20
 8005c32:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005c36:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005c38:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005c3c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005c3e:	e841 2300 	strex	r3, r2, [r1]
 8005c42:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005c44:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1e3      	bne.n	8005c12 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2220      	movs	r2, #32
 8005c4e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	330c      	adds	r3, #12
 8005c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c62:	e853 3f00 	ldrex	r3, [r3]
 8005c66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005c68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c6a:	f023 0310 	bic.w	r3, r3, #16
 8005c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	330c      	adds	r3, #12
 8005c78:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005c7c:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005c7e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005c84:	e841 2300 	strex	r3, r2, [r1]
 8005c88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1e3      	bne.n	8005c58 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fd fca0 	bl	80035da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2202      	movs	r2, #2
 8005c9e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	1ad3      	subs	r3, r2, r3
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	4619      	mov	r1, r3
 8005cb0:	6878      	ldr	r0, [r7, #4]
 8005cb2:	f000 f8b7 	bl	8005e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cb6:	e09b      	b.n	8005df0 <HAL_UART_IRQHandler+0x518>
 8005cb8:	08006029 	.word	0x08006029
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cd0:	b29b      	uxth	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 808e 	beq.w	8005df4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	f000 8089 	beq.w	8005df4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	330c      	adds	r3, #12
 8005ce8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	e853 3f00 	ldrex	r3, [r3]
 8005cf0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005cf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005cf8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	330c      	adds	r3, #12
 8005d02:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005d06:	647a      	str	r2, [r7, #68]	@ 0x44
 8005d08:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d0a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005d0c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005d0e:	e841 2300 	strex	r3, r2, [r1]
 8005d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005d14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1e3      	bne.n	8005ce2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	3314      	adds	r3, #20
 8005d20:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	623b      	str	r3, [r7, #32]
   return(result);
 8005d2a:	6a3b      	ldr	r3, [r7, #32]
 8005d2c:	f023 0301 	bic.w	r3, r3, #1
 8005d30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	3314      	adds	r3, #20
 8005d3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005d3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005d40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d46:	e841 2300 	strex	r3, r2, [r1]
 8005d4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005d4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d1e3      	bne.n	8005d1a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2220      	movs	r2, #32
 8005d56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	330c      	adds	r3, #12
 8005d66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	e853 3f00 	ldrex	r3, [r3]
 8005d6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	f023 0310 	bic.w	r3, r3, #16
 8005d76:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	330c      	adds	r3, #12
 8005d80:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005d84:	61fa      	str	r2, [r7, #28]
 8005d86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d88:	69b9      	ldr	r1, [r7, #24]
 8005d8a:	69fa      	ldr	r2, [r7, #28]
 8005d8c:	e841 2300 	strex	r3, r2, [r1]
 8005d90:	617b      	str	r3, [r7, #20]
   return(result);
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1e3      	bne.n	8005d60 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005d9e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f83d 	bl	8005e24 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005daa:	e023      	b.n	8005df4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005dac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d009      	beq.n	8005dcc <HAL_UART_IRQHandler+0x4f4>
 8005db8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 f943 	bl	8006050 <UART_Transmit_IT>
    return;
 8005dca:	e014      	b.n	8005df6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00e      	beq.n	8005df6 <HAL_UART_IRQHandler+0x51e>
 8005dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d008      	beq.n	8005df6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 f983 	bl	80060f0 <UART_EndTransmit_IT>
    return;
 8005dea:	e004      	b.n	8005df6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005dec:	bf00      	nop
 8005dee:	e002      	b.n	8005df6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005df0:	bf00      	nop
 8005df2:	e000      	b.n	8005df6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005df4:	bf00      	nop
  }
}
 8005df6:	37e8      	adds	r7, #232	@ 0xe8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b083      	sub	sp, #12
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e04:	bf00      	nop
 8005e06:	370c      	adds	r7, #12
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr

08005e10 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b083      	sub	sp, #12
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e18:	bf00      	nop
 8005e1a:	370c      	adds	r7, #12
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e22:	4770      	bx	lr

08005e24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	460b      	mov	r3, r1
 8005e2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b086      	sub	sp, #24
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	60f8      	str	r0, [r7, #12]
 8005e44:	60b9      	str	r1, [r7, #8]
 8005e46:	603b      	str	r3, [r7, #0]
 8005e48:	4613      	mov	r3, r2
 8005e4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005e4c:	e03b      	b.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4e:	6a3b      	ldr	r3, [r7, #32]
 8005e50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e54:	d037      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e56:	f7fd faa3 	bl	80033a0 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	6a3a      	ldr	r2, [r7, #32]
 8005e62:	429a      	cmp	r2, r3
 8005e64:	d302      	bcc.n	8005e6c <UART_WaitOnFlagUntilTimeout+0x30>
 8005e66:	6a3b      	ldr	r3, [r7, #32]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d101      	bne.n	8005e70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005e6c:	2303      	movs	r3, #3
 8005e6e:	e03a      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0304 	and.w	r3, r3, #4
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d023      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	2b80      	cmp	r3, #128	@ 0x80
 8005e82:	d020      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005e84:	68bb      	ldr	r3, [r7, #8]
 8005e86:	2b40      	cmp	r3, #64	@ 0x40
 8005e88:	d01d      	beq.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0308 	and.w	r3, r3, #8
 8005e94:	2b08      	cmp	r3, #8
 8005e96:	d116      	bne.n	8005ec6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005e98:	2300      	movs	r3, #0
 8005e9a:	617b      	str	r3, [r7, #20]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	617b      	str	r3, [r7, #20]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	617b      	str	r3, [r7, #20]
 8005eac:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f000 f857 	bl	8005f62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2208      	movs	r2, #8
 8005eb8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	e00f      	b.n	8005ee6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	4013      	ands	r3, r2
 8005ed0:	68ba      	ldr	r2, [r7, #8]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	bf0c      	ite	eq
 8005ed6:	2301      	moveq	r3, #1
 8005ed8:	2300      	movne	r3, #0
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	461a      	mov	r2, r3
 8005ede:	79fb      	ldrb	r3, [r7, #7]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d0b4      	beq.n	8005e4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3718      	adds	r7, #24
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eee:	b480      	push	{r7}
 8005ef0:	b085      	sub	sp, #20
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	88fa      	ldrh	r2, [r7, #6]
 8005f06:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	88fa      	ldrh	r2, [r7, #6]
 8005f0c:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2200      	movs	r2, #0
 8005f12:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	2222      	movs	r2, #34	@ 0x22
 8005f18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d007      	beq.n	8005f34 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68da      	ldr	r2, [r3, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f32:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695a      	ldr	r2, [r3, #20]
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f042 0220 	orr.w	r2, r2, #32
 8005f52:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005f62:	b480      	push	{r7}
 8005f64:	b095      	sub	sp, #84	@ 0x54
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	330c      	adds	r3, #12
 8005f70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	330c      	adds	r3, #12
 8005f88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005f8a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005f90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f92:	e841 2300 	strex	r3, r2, [r1]
 8005f96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005f98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d1e5      	bne.n	8005f6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	3314      	adds	r3, #20
 8005fa4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa6:	6a3b      	ldr	r3, [r7, #32]
 8005fa8:	e853 3f00 	ldrex	r3, [r3]
 8005fac:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	f023 0301 	bic.w	r3, r3, #1
 8005fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3314      	adds	r3, #20
 8005fbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005fbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005fc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005fc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fc6:	e841 2300 	strex	r3, r2, [r1]
 8005fca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1e5      	bne.n	8005f9e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d119      	bne.n	800600e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	330c      	adds	r3, #12
 8005fe0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 0310 	bic.w	r3, r3, #16
 8005ff0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	330c      	adds	r3, #12
 8005ff8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ffa:	61ba      	str	r2, [r7, #24]
 8005ffc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffe:	6979      	ldr	r1, [r7, #20]
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	e841 2300 	strex	r3, r2, [r1]
 8006006:	613b      	str	r3, [r7, #16]
   return(result);
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1e5      	bne.n	8005fda <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2220      	movs	r2, #32
 8006012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800601c:	bf00      	nop
 800601e:	3754      	adds	r7, #84	@ 0x54
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006034:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2200      	movs	r2, #0
 800603a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2200      	movs	r2, #0
 8006040:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f7ff fee4 	bl	8005e10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006050:	b480      	push	{r7}
 8006052:	b085      	sub	sp, #20
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b21      	cmp	r3, #33	@ 0x21
 8006062:	d13e      	bne.n	80060e2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800606c:	d114      	bne.n	8006098 <UART_Transmit_IT+0x48>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691b      	ldr	r3, [r3, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d110      	bne.n	8006098 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6a1b      	ldr	r3, [r3, #32]
 800607a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	881b      	ldrh	r3, [r3, #0]
 8006080:	461a      	mov	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800608a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6a1b      	ldr	r3, [r3, #32]
 8006090:	1c9a      	adds	r2, r3, #2
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	621a      	str	r2, [r3, #32]
 8006096:	e008      	b.n	80060aa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	1c59      	adds	r1, r3, #1
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6211      	str	r1, [r2, #32]
 80060a2:	781a      	ldrb	r2, [r3, #0]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	3b01      	subs	r3, #1
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4619      	mov	r1, r3
 80060b8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10f      	bne.n	80060de <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80060cc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68da      	ldr	r2, [r3, #12]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060dc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060de:	2300      	movs	r3, #0
 80060e0:	e000      	b.n	80060e4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060e2:	2302      	movs	r3, #2
  }
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3714      	adds	r7, #20
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr

080060f0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b082      	sub	sp, #8
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	68da      	ldr	r2, [r3, #12]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006106:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f7ff fe73 	bl	8005dfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3708      	adds	r7, #8
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006120:	b580      	push	{r7, lr}
 8006122:	b08c      	sub	sp, #48	@ 0x30
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b22      	cmp	r3, #34	@ 0x22
 8006132:	f040 80ae 	bne.w	8006292 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800613e:	d117      	bne.n	8006170 <UART_Receive_IT+0x50>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d113      	bne.n	8006170 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006148:	2300      	movs	r3, #0
 800614a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006150:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	b29b      	uxth	r3, r3
 800615a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800615e:	b29a      	uxth	r2, r3
 8006160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006162:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006168:	1c9a      	adds	r2, r3, #2
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	629a      	str	r2, [r3, #40]	@ 0x28
 800616e:	e026      	b.n	80061be <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006176:	2300      	movs	r3, #0
 8006178:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006182:	d007      	beq.n	8006194 <UART_Receive_IT+0x74>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10a      	bne.n	80061a2 <UART_Receive_IT+0x82>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	691b      	ldr	r3, [r3, #16]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d106      	bne.n	80061a2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	b2da      	uxtb	r2, r3
 800619c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	e008      	b.n	80061b4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061ae:	b2da      	uxtb	r2, r3
 80061b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061b2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061b8:	1c5a      	adds	r2, r3, #1
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	3b01      	subs	r3, #1
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	4619      	mov	r1, r3
 80061cc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d15d      	bne.n	800628e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f022 0220 	bic.w	r2, r2, #32
 80061e0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68da      	ldr	r2, [r3, #12]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80061f0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f022 0201 	bic.w	r2, r2, #1
 8006200:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2220      	movs	r2, #32
 8006206:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2200      	movs	r2, #0
 800620e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006214:	2b01      	cmp	r3, #1
 8006216:	d135      	bne.n	8006284 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	330c      	adds	r3, #12
 8006224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006226:	697b      	ldr	r3, [r7, #20]
 8006228:	e853 3f00 	ldrex	r3, [r3]
 800622c:	613b      	str	r3, [r7, #16]
   return(result);
 800622e:	693b      	ldr	r3, [r7, #16]
 8006230:	f023 0310 	bic.w	r3, r3, #16
 8006234:	627b      	str	r3, [r7, #36]	@ 0x24
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	330c      	adds	r3, #12
 800623c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800623e:	623a      	str	r2, [r7, #32]
 8006240:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006242:	69f9      	ldr	r1, [r7, #28]
 8006244:	6a3a      	ldr	r2, [r7, #32]
 8006246:	e841 2300 	strex	r3, r2, [r1]
 800624a:	61bb      	str	r3, [r7, #24]
   return(result);
 800624c:	69bb      	ldr	r3, [r7, #24]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1e5      	bne.n	800621e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	f003 0310 	and.w	r3, r3, #16
 800625c:	2b10      	cmp	r3, #16
 800625e:	d10a      	bne.n	8006276 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006260:	2300      	movs	r3, #0
 8006262:	60fb      	str	r3, [r7, #12]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	60fb      	str	r3, [r7, #12]
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800627a:	4619      	mov	r1, r3
 800627c:	6878      	ldr	r0, [r7, #4]
 800627e:	f7ff fdd1 	bl	8005e24 <HAL_UARTEx_RxEventCallback>
 8006282:	e002      	b.n	800628a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f7fc faaf 	bl	80027e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e002      	b.n	8006294 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800628e:	2300      	movs	r3, #0
 8006290:	e000      	b.n	8006294 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006292:	2302      	movs	r3, #2
  }
}
 8006294:	4618      	mov	r0, r3
 8006296:	3730      	adds	r7, #48	@ 0x30
 8006298:	46bd      	mov	sp, r7
 800629a:	bd80      	pop	{r7, pc}

0800629c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800629c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062a0:	b0c0      	sub	sp, #256	@ 0x100
 80062a2:	af00      	add	r7, sp, #0
 80062a4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80062b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062b8:	68d9      	ldr	r1, [r3, #12]
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	ea40 0301 	orr.w	r3, r0, r1
 80062c4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80062c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ca:	689a      	ldr	r2, [r3, #8]
 80062cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	431a      	orrs	r2, r3
 80062d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062d8:	695b      	ldr	r3, [r3, #20]
 80062da:	431a      	orrs	r2, r3
 80062dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80062f4:	f021 010c 	bic.w	r1, r1, #12
 80062f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006302:	430b      	orrs	r3, r1
 8006304:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006312:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006316:	6999      	ldr	r1, [r3, #24]
 8006318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	ea40 0301 	orr.w	r3, r0, r1
 8006322:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	4b8f      	ldr	r3, [pc, #572]	@ (8006568 <UART_SetConfig+0x2cc>)
 800632c:	429a      	cmp	r2, r3
 800632e:	d005      	beq.n	800633c <UART_SetConfig+0xa0>
 8006330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4b8d      	ldr	r3, [pc, #564]	@ (800656c <UART_SetConfig+0x2d0>)
 8006338:	429a      	cmp	r2, r3
 800633a:	d104      	bne.n	8006346 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800633c:	f7fd fcc4 	bl	8003cc8 <HAL_RCC_GetPCLK2Freq>
 8006340:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006344:	e003      	b.n	800634e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006346:	f7fd fcab 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
 800634a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800634e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006352:	69db      	ldr	r3, [r3, #28]
 8006354:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006358:	f040 810c 	bne.w	8006574 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800635c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006360:	2200      	movs	r2, #0
 8006362:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006366:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800636a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800636e:	4622      	mov	r2, r4
 8006370:	462b      	mov	r3, r5
 8006372:	1891      	adds	r1, r2, r2
 8006374:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006376:	415b      	adcs	r3, r3
 8006378:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800637a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800637e:	4621      	mov	r1, r4
 8006380:	eb12 0801 	adds.w	r8, r2, r1
 8006384:	4629      	mov	r1, r5
 8006386:	eb43 0901 	adc.w	r9, r3, r1
 800638a:	f04f 0200 	mov.w	r2, #0
 800638e:	f04f 0300 	mov.w	r3, #0
 8006392:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006396:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800639a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800639e:	4690      	mov	r8, r2
 80063a0:	4699      	mov	r9, r3
 80063a2:	4623      	mov	r3, r4
 80063a4:	eb18 0303 	adds.w	r3, r8, r3
 80063a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80063ac:	462b      	mov	r3, r5
 80063ae:	eb49 0303 	adc.w	r3, r9, r3
 80063b2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80063b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063ba:	685b      	ldr	r3, [r3, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80063c2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80063c6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80063ca:	460b      	mov	r3, r1
 80063cc:	18db      	adds	r3, r3, r3
 80063ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80063d0:	4613      	mov	r3, r2
 80063d2:	eb42 0303 	adc.w	r3, r2, r3
 80063d6:	657b      	str	r3, [r7, #84]	@ 0x54
 80063d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80063dc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80063e0:	f7fa fc72 	bl	8000cc8 <__aeabi_uldivmod>
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	4b61      	ldr	r3, [pc, #388]	@ (8006570 <UART_SetConfig+0x2d4>)
 80063ea:	fba3 2302 	umull	r2, r3, r3, r2
 80063ee:	095b      	lsrs	r3, r3, #5
 80063f0:	011c      	lsls	r4, r3, #4
 80063f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80063f6:	2200      	movs	r2, #0
 80063f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80063fc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006400:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006404:	4642      	mov	r2, r8
 8006406:	464b      	mov	r3, r9
 8006408:	1891      	adds	r1, r2, r2
 800640a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800640c:	415b      	adcs	r3, r3
 800640e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006410:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006414:	4641      	mov	r1, r8
 8006416:	eb12 0a01 	adds.w	sl, r2, r1
 800641a:	4649      	mov	r1, r9
 800641c:	eb43 0b01 	adc.w	fp, r3, r1
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800642c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006430:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006434:	4692      	mov	sl, r2
 8006436:	469b      	mov	fp, r3
 8006438:	4643      	mov	r3, r8
 800643a:	eb1a 0303 	adds.w	r3, sl, r3
 800643e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006442:	464b      	mov	r3, r9
 8006444:	eb4b 0303 	adc.w	r3, fp, r3
 8006448:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800644c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006458:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800645c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006460:	460b      	mov	r3, r1
 8006462:	18db      	adds	r3, r3, r3
 8006464:	643b      	str	r3, [r7, #64]	@ 0x40
 8006466:	4613      	mov	r3, r2
 8006468:	eb42 0303 	adc.w	r3, r2, r3
 800646c:	647b      	str	r3, [r7, #68]	@ 0x44
 800646e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006472:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006476:	f7fa fc27 	bl	8000cc8 <__aeabi_uldivmod>
 800647a:	4602      	mov	r2, r0
 800647c:	460b      	mov	r3, r1
 800647e:	4611      	mov	r1, r2
 8006480:	4b3b      	ldr	r3, [pc, #236]	@ (8006570 <UART_SetConfig+0x2d4>)
 8006482:	fba3 2301 	umull	r2, r3, r3, r1
 8006486:	095b      	lsrs	r3, r3, #5
 8006488:	2264      	movs	r2, #100	@ 0x64
 800648a:	fb02 f303 	mul.w	r3, r2, r3
 800648e:	1acb      	subs	r3, r1, r3
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006496:	4b36      	ldr	r3, [pc, #216]	@ (8006570 <UART_SetConfig+0x2d4>)
 8006498:	fba3 2302 	umull	r2, r3, r3, r2
 800649c:	095b      	lsrs	r3, r3, #5
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80064a4:	441c      	add	r4, r3
 80064a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80064aa:	2200      	movs	r2, #0
 80064ac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80064b0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80064b4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80064b8:	4642      	mov	r2, r8
 80064ba:	464b      	mov	r3, r9
 80064bc:	1891      	adds	r1, r2, r2
 80064be:	63b9      	str	r1, [r7, #56]	@ 0x38
 80064c0:	415b      	adcs	r3, r3
 80064c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80064c4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80064c8:	4641      	mov	r1, r8
 80064ca:	1851      	adds	r1, r2, r1
 80064cc:	6339      	str	r1, [r7, #48]	@ 0x30
 80064ce:	4649      	mov	r1, r9
 80064d0:	414b      	adcs	r3, r1
 80064d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80064d4:	f04f 0200 	mov.w	r2, #0
 80064d8:	f04f 0300 	mov.w	r3, #0
 80064dc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80064e0:	4659      	mov	r1, fp
 80064e2:	00cb      	lsls	r3, r1, #3
 80064e4:	4651      	mov	r1, sl
 80064e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80064ea:	4651      	mov	r1, sl
 80064ec:	00ca      	lsls	r2, r1, #3
 80064ee:	4610      	mov	r0, r2
 80064f0:	4619      	mov	r1, r3
 80064f2:	4603      	mov	r3, r0
 80064f4:	4642      	mov	r2, r8
 80064f6:	189b      	adds	r3, r3, r2
 80064f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80064fc:	464b      	mov	r3, r9
 80064fe:	460a      	mov	r2, r1
 8006500:	eb42 0303 	adc.w	r3, r2, r3
 8006504:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	2200      	movs	r2, #0
 8006510:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006514:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006518:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800651c:	460b      	mov	r3, r1
 800651e:	18db      	adds	r3, r3, r3
 8006520:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006522:	4613      	mov	r3, r2
 8006524:	eb42 0303 	adc.w	r3, r2, r3
 8006528:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800652a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800652e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006532:	f7fa fbc9 	bl	8000cc8 <__aeabi_uldivmod>
 8006536:	4602      	mov	r2, r0
 8006538:	460b      	mov	r3, r1
 800653a:	4b0d      	ldr	r3, [pc, #52]	@ (8006570 <UART_SetConfig+0x2d4>)
 800653c:	fba3 1302 	umull	r1, r3, r3, r2
 8006540:	095b      	lsrs	r3, r3, #5
 8006542:	2164      	movs	r1, #100	@ 0x64
 8006544:	fb01 f303 	mul.w	r3, r1, r3
 8006548:	1ad3      	subs	r3, r2, r3
 800654a:	00db      	lsls	r3, r3, #3
 800654c:	3332      	adds	r3, #50	@ 0x32
 800654e:	4a08      	ldr	r2, [pc, #32]	@ (8006570 <UART_SetConfig+0x2d4>)
 8006550:	fba2 2303 	umull	r2, r3, r2, r3
 8006554:	095b      	lsrs	r3, r3, #5
 8006556:	f003 0207 	and.w	r2, r3, #7
 800655a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4422      	add	r2, r4
 8006562:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006564:	e106      	b.n	8006774 <UART_SetConfig+0x4d8>
 8006566:	bf00      	nop
 8006568:	40011000 	.word	0x40011000
 800656c:	40011400 	.word	0x40011400
 8006570:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006574:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006578:	2200      	movs	r2, #0
 800657a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800657e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006582:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006586:	4642      	mov	r2, r8
 8006588:	464b      	mov	r3, r9
 800658a:	1891      	adds	r1, r2, r2
 800658c:	6239      	str	r1, [r7, #32]
 800658e:	415b      	adcs	r3, r3
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24
 8006592:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006596:	4641      	mov	r1, r8
 8006598:	1854      	adds	r4, r2, r1
 800659a:	4649      	mov	r1, r9
 800659c:	eb43 0501 	adc.w	r5, r3, r1
 80065a0:	f04f 0200 	mov.w	r2, #0
 80065a4:	f04f 0300 	mov.w	r3, #0
 80065a8:	00eb      	lsls	r3, r5, #3
 80065aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ae:	00e2      	lsls	r2, r4, #3
 80065b0:	4614      	mov	r4, r2
 80065b2:	461d      	mov	r5, r3
 80065b4:	4643      	mov	r3, r8
 80065b6:	18e3      	adds	r3, r4, r3
 80065b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80065bc:	464b      	mov	r3, r9
 80065be:	eb45 0303 	adc.w	r3, r5, r3
 80065c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80065c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80065d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80065d6:	f04f 0200 	mov.w	r2, #0
 80065da:	f04f 0300 	mov.w	r3, #0
 80065de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80065e2:	4629      	mov	r1, r5
 80065e4:	008b      	lsls	r3, r1, #2
 80065e6:	4621      	mov	r1, r4
 80065e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80065ec:	4621      	mov	r1, r4
 80065ee:	008a      	lsls	r2, r1, #2
 80065f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80065f4:	f7fa fb68 	bl	8000cc8 <__aeabi_uldivmod>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4b60      	ldr	r3, [pc, #384]	@ (8006780 <UART_SetConfig+0x4e4>)
 80065fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006602:	095b      	lsrs	r3, r3, #5
 8006604:	011c      	lsls	r4, r3, #4
 8006606:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800660a:	2200      	movs	r2, #0
 800660c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006610:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006614:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006618:	4642      	mov	r2, r8
 800661a:	464b      	mov	r3, r9
 800661c:	1891      	adds	r1, r2, r2
 800661e:	61b9      	str	r1, [r7, #24]
 8006620:	415b      	adcs	r3, r3
 8006622:	61fb      	str	r3, [r7, #28]
 8006624:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006628:	4641      	mov	r1, r8
 800662a:	1851      	adds	r1, r2, r1
 800662c:	6139      	str	r1, [r7, #16]
 800662e:	4649      	mov	r1, r9
 8006630:	414b      	adcs	r3, r1
 8006632:	617b      	str	r3, [r7, #20]
 8006634:	f04f 0200 	mov.w	r2, #0
 8006638:	f04f 0300 	mov.w	r3, #0
 800663c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006640:	4659      	mov	r1, fp
 8006642:	00cb      	lsls	r3, r1, #3
 8006644:	4651      	mov	r1, sl
 8006646:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800664a:	4651      	mov	r1, sl
 800664c:	00ca      	lsls	r2, r1, #3
 800664e:	4610      	mov	r0, r2
 8006650:	4619      	mov	r1, r3
 8006652:	4603      	mov	r3, r0
 8006654:	4642      	mov	r2, r8
 8006656:	189b      	adds	r3, r3, r2
 8006658:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800665c:	464b      	mov	r3, r9
 800665e:	460a      	mov	r2, r1
 8006660:	eb42 0303 	adc.w	r3, r2, r3
 8006664:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006672:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006680:	4649      	mov	r1, r9
 8006682:	008b      	lsls	r3, r1, #2
 8006684:	4641      	mov	r1, r8
 8006686:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800668a:	4641      	mov	r1, r8
 800668c:	008a      	lsls	r2, r1, #2
 800668e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006692:	f7fa fb19 	bl	8000cc8 <__aeabi_uldivmod>
 8006696:	4602      	mov	r2, r0
 8006698:	460b      	mov	r3, r1
 800669a:	4611      	mov	r1, r2
 800669c:	4b38      	ldr	r3, [pc, #224]	@ (8006780 <UART_SetConfig+0x4e4>)
 800669e:	fba3 2301 	umull	r2, r3, r3, r1
 80066a2:	095b      	lsrs	r3, r3, #5
 80066a4:	2264      	movs	r2, #100	@ 0x64
 80066a6:	fb02 f303 	mul.w	r3, r2, r3
 80066aa:	1acb      	subs	r3, r1, r3
 80066ac:	011b      	lsls	r3, r3, #4
 80066ae:	3332      	adds	r3, #50	@ 0x32
 80066b0:	4a33      	ldr	r2, [pc, #204]	@ (8006780 <UART_SetConfig+0x4e4>)
 80066b2:	fba2 2303 	umull	r2, r3, r2, r3
 80066b6:	095b      	lsrs	r3, r3, #5
 80066b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80066bc:	441c      	add	r4, r3
 80066be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066c2:	2200      	movs	r2, #0
 80066c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80066c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80066c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80066cc:	4642      	mov	r2, r8
 80066ce:	464b      	mov	r3, r9
 80066d0:	1891      	adds	r1, r2, r2
 80066d2:	60b9      	str	r1, [r7, #8]
 80066d4:	415b      	adcs	r3, r3
 80066d6:	60fb      	str	r3, [r7, #12]
 80066d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066dc:	4641      	mov	r1, r8
 80066de:	1851      	adds	r1, r2, r1
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	4649      	mov	r1, r9
 80066e4:	414b      	adcs	r3, r1
 80066e6:	607b      	str	r3, [r7, #4]
 80066e8:	f04f 0200 	mov.w	r2, #0
 80066ec:	f04f 0300 	mov.w	r3, #0
 80066f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80066f4:	4659      	mov	r1, fp
 80066f6:	00cb      	lsls	r3, r1, #3
 80066f8:	4651      	mov	r1, sl
 80066fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80066fe:	4651      	mov	r1, sl
 8006700:	00ca      	lsls	r2, r1, #3
 8006702:	4610      	mov	r0, r2
 8006704:	4619      	mov	r1, r3
 8006706:	4603      	mov	r3, r0
 8006708:	4642      	mov	r2, r8
 800670a:	189b      	adds	r3, r3, r2
 800670c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800670e:	464b      	mov	r3, r9
 8006710:	460a      	mov	r2, r1
 8006712:	eb42 0303 	adc.w	r3, r2, r3
 8006716:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800671c:	685b      	ldr	r3, [r3, #4]
 800671e:	2200      	movs	r2, #0
 8006720:	663b      	str	r3, [r7, #96]	@ 0x60
 8006722:	667a      	str	r2, [r7, #100]	@ 0x64
 8006724:	f04f 0200 	mov.w	r2, #0
 8006728:	f04f 0300 	mov.w	r3, #0
 800672c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006730:	4649      	mov	r1, r9
 8006732:	008b      	lsls	r3, r1, #2
 8006734:	4641      	mov	r1, r8
 8006736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800673a:	4641      	mov	r1, r8
 800673c:	008a      	lsls	r2, r1, #2
 800673e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006742:	f7fa fac1 	bl	8000cc8 <__aeabi_uldivmod>
 8006746:	4602      	mov	r2, r0
 8006748:	460b      	mov	r3, r1
 800674a:	4b0d      	ldr	r3, [pc, #52]	@ (8006780 <UART_SetConfig+0x4e4>)
 800674c:	fba3 1302 	umull	r1, r3, r3, r2
 8006750:	095b      	lsrs	r3, r3, #5
 8006752:	2164      	movs	r1, #100	@ 0x64
 8006754:	fb01 f303 	mul.w	r3, r1, r3
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	011b      	lsls	r3, r3, #4
 800675c:	3332      	adds	r3, #50	@ 0x32
 800675e:	4a08      	ldr	r2, [pc, #32]	@ (8006780 <UART_SetConfig+0x4e4>)
 8006760:	fba2 2303 	umull	r2, r3, r2, r3
 8006764:	095b      	lsrs	r3, r3, #5
 8006766:	f003 020f 	and.w	r2, r3, #15
 800676a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4422      	add	r2, r4
 8006772:	609a      	str	r2, [r3, #8]
}
 8006774:	bf00      	nop
 8006776:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800677a:	46bd      	mov	sp, r7
 800677c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006780:	51eb851f 	.word	0x51eb851f

08006784 <atof>:
 8006784:	2100      	movs	r1, #0
 8006786:	f000 be09 	b.w	800739c <strtod>

0800678a <sulp>:
 800678a:	b570      	push	{r4, r5, r6, lr}
 800678c:	4604      	mov	r4, r0
 800678e:	460d      	mov	r5, r1
 8006790:	ec45 4b10 	vmov	d0, r4, r5
 8006794:	4616      	mov	r6, r2
 8006796:	f003 fc7f 	bl	800a098 <__ulp>
 800679a:	ec51 0b10 	vmov	r0, r1, d0
 800679e:	b17e      	cbz	r6, 80067c0 <sulp+0x36>
 80067a0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80067a4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dd09      	ble.n	80067c0 <sulp+0x36>
 80067ac:	051b      	lsls	r3, r3, #20
 80067ae:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80067b2:	2400      	movs	r4, #0
 80067b4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80067b8:	4622      	mov	r2, r4
 80067ba:	462b      	mov	r3, r5
 80067bc:	f7f9 ff3c 	bl	8000638 <__aeabi_dmul>
 80067c0:	ec41 0b10 	vmov	d0, r0, r1
 80067c4:	bd70      	pop	{r4, r5, r6, pc}
	...

080067c8 <_strtod_l>:
 80067c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067cc:	b09f      	sub	sp, #124	@ 0x7c
 80067ce:	460c      	mov	r4, r1
 80067d0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80067d2:	2200      	movs	r2, #0
 80067d4:	921a      	str	r2, [sp, #104]	@ 0x68
 80067d6:	9005      	str	r0, [sp, #20]
 80067d8:	f04f 0a00 	mov.w	sl, #0
 80067dc:	f04f 0b00 	mov.w	fp, #0
 80067e0:	460a      	mov	r2, r1
 80067e2:	9219      	str	r2, [sp, #100]	@ 0x64
 80067e4:	7811      	ldrb	r1, [r2, #0]
 80067e6:	292b      	cmp	r1, #43	@ 0x2b
 80067e8:	d04a      	beq.n	8006880 <_strtod_l+0xb8>
 80067ea:	d838      	bhi.n	800685e <_strtod_l+0x96>
 80067ec:	290d      	cmp	r1, #13
 80067ee:	d832      	bhi.n	8006856 <_strtod_l+0x8e>
 80067f0:	2908      	cmp	r1, #8
 80067f2:	d832      	bhi.n	800685a <_strtod_l+0x92>
 80067f4:	2900      	cmp	r1, #0
 80067f6:	d03b      	beq.n	8006870 <_strtod_l+0xa8>
 80067f8:	2200      	movs	r2, #0
 80067fa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80067fc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80067fe:	782a      	ldrb	r2, [r5, #0]
 8006800:	2a30      	cmp	r2, #48	@ 0x30
 8006802:	f040 80b3 	bne.w	800696c <_strtod_l+0x1a4>
 8006806:	786a      	ldrb	r2, [r5, #1]
 8006808:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800680c:	2a58      	cmp	r2, #88	@ 0x58
 800680e:	d16e      	bne.n	80068ee <_strtod_l+0x126>
 8006810:	9302      	str	r3, [sp, #8]
 8006812:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006814:	9301      	str	r3, [sp, #4]
 8006816:	ab1a      	add	r3, sp, #104	@ 0x68
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	4a8e      	ldr	r2, [pc, #568]	@ (8006a54 <_strtod_l+0x28c>)
 800681c:	9805      	ldr	r0, [sp, #20]
 800681e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006820:	a919      	add	r1, sp, #100	@ 0x64
 8006822:	f002 fd2b 	bl	800927c <__gethex>
 8006826:	f010 060f 	ands.w	r6, r0, #15
 800682a:	4604      	mov	r4, r0
 800682c:	d005      	beq.n	800683a <_strtod_l+0x72>
 800682e:	2e06      	cmp	r6, #6
 8006830:	d128      	bne.n	8006884 <_strtod_l+0xbc>
 8006832:	3501      	adds	r5, #1
 8006834:	2300      	movs	r3, #0
 8006836:	9519      	str	r5, [sp, #100]	@ 0x64
 8006838:	930b      	str	r3, [sp, #44]	@ 0x2c
 800683a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800683c:	2b00      	cmp	r3, #0
 800683e:	f040 858e 	bne.w	800735e <_strtod_l+0xb96>
 8006842:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006844:	b1cb      	cbz	r3, 800687a <_strtod_l+0xb2>
 8006846:	4652      	mov	r2, sl
 8006848:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800684c:	ec43 2b10 	vmov	d0, r2, r3
 8006850:	b01f      	add	sp, #124	@ 0x7c
 8006852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006856:	2920      	cmp	r1, #32
 8006858:	d1ce      	bne.n	80067f8 <_strtod_l+0x30>
 800685a:	3201      	adds	r2, #1
 800685c:	e7c1      	b.n	80067e2 <_strtod_l+0x1a>
 800685e:	292d      	cmp	r1, #45	@ 0x2d
 8006860:	d1ca      	bne.n	80067f8 <_strtod_l+0x30>
 8006862:	2101      	movs	r1, #1
 8006864:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006866:	1c51      	adds	r1, r2, #1
 8006868:	9119      	str	r1, [sp, #100]	@ 0x64
 800686a:	7852      	ldrb	r2, [r2, #1]
 800686c:	2a00      	cmp	r2, #0
 800686e:	d1c5      	bne.n	80067fc <_strtod_l+0x34>
 8006870:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006872:	9419      	str	r4, [sp, #100]	@ 0x64
 8006874:	2b00      	cmp	r3, #0
 8006876:	f040 8570 	bne.w	800735a <_strtod_l+0xb92>
 800687a:	4652      	mov	r2, sl
 800687c:	465b      	mov	r3, fp
 800687e:	e7e5      	b.n	800684c <_strtod_l+0x84>
 8006880:	2100      	movs	r1, #0
 8006882:	e7ef      	b.n	8006864 <_strtod_l+0x9c>
 8006884:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006886:	b13a      	cbz	r2, 8006898 <_strtod_l+0xd0>
 8006888:	2135      	movs	r1, #53	@ 0x35
 800688a:	a81c      	add	r0, sp, #112	@ 0x70
 800688c:	f003 fcfe 	bl	800a28c <__copybits>
 8006890:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006892:	9805      	ldr	r0, [sp, #20]
 8006894:	f003 f8cc 	bl	8009a30 <_Bfree>
 8006898:	3e01      	subs	r6, #1
 800689a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800689c:	2e04      	cmp	r6, #4
 800689e:	d806      	bhi.n	80068ae <_strtod_l+0xe6>
 80068a0:	e8df f006 	tbb	[pc, r6]
 80068a4:	201d0314 	.word	0x201d0314
 80068a8:	14          	.byte	0x14
 80068a9:	00          	.byte	0x00
 80068aa:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80068ae:	05e1      	lsls	r1, r4, #23
 80068b0:	bf48      	it	mi
 80068b2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80068b6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80068ba:	0d1b      	lsrs	r3, r3, #20
 80068bc:	051b      	lsls	r3, r3, #20
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1bb      	bne.n	800683a <_strtod_l+0x72>
 80068c2:	f001 fd91 	bl	80083e8 <__errno>
 80068c6:	2322      	movs	r3, #34	@ 0x22
 80068c8:	6003      	str	r3, [r0, #0]
 80068ca:	e7b6      	b.n	800683a <_strtod_l+0x72>
 80068cc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80068d0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80068d4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80068d8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80068dc:	e7e7      	b.n	80068ae <_strtod_l+0xe6>
 80068de:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006a5c <_strtod_l+0x294>
 80068e2:	e7e4      	b.n	80068ae <_strtod_l+0xe6>
 80068e4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80068e8:	f04f 3aff 	mov.w	sl, #4294967295
 80068ec:	e7df      	b.n	80068ae <_strtod_l+0xe6>
 80068ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	9219      	str	r2, [sp, #100]	@ 0x64
 80068f4:	785b      	ldrb	r3, [r3, #1]
 80068f6:	2b30      	cmp	r3, #48	@ 0x30
 80068f8:	d0f9      	beq.n	80068ee <_strtod_l+0x126>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d09d      	beq.n	800683a <_strtod_l+0x72>
 80068fe:	2301      	movs	r3, #1
 8006900:	9309      	str	r3, [sp, #36]	@ 0x24
 8006902:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006904:	930c      	str	r3, [sp, #48]	@ 0x30
 8006906:	2300      	movs	r3, #0
 8006908:	9308      	str	r3, [sp, #32]
 800690a:	930a      	str	r3, [sp, #40]	@ 0x28
 800690c:	461f      	mov	r7, r3
 800690e:	220a      	movs	r2, #10
 8006910:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006912:	7805      	ldrb	r5, [r0, #0]
 8006914:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006918:	b2d9      	uxtb	r1, r3
 800691a:	2909      	cmp	r1, #9
 800691c:	d928      	bls.n	8006970 <_strtod_l+0x1a8>
 800691e:	494e      	ldr	r1, [pc, #312]	@ (8006a58 <_strtod_l+0x290>)
 8006920:	2201      	movs	r2, #1
 8006922:	f001 fcf2 	bl	800830a <strncmp>
 8006926:	2800      	cmp	r0, #0
 8006928:	d032      	beq.n	8006990 <_strtod_l+0x1c8>
 800692a:	2000      	movs	r0, #0
 800692c:	462a      	mov	r2, r5
 800692e:	4681      	mov	r9, r0
 8006930:	463d      	mov	r5, r7
 8006932:	4603      	mov	r3, r0
 8006934:	2a65      	cmp	r2, #101	@ 0x65
 8006936:	d001      	beq.n	800693c <_strtod_l+0x174>
 8006938:	2a45      	cmp	r2, #69	@ 0x45
 800693a:	d114      	bne.n	8006966 <_strtod_l+0x19e>
 800693c:	b91d      	cbnz	r5, 8006946 <_strtod_l+0x17e>
 800693e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006940:	4302      	orrs	r2, r0
 8006942:	d095      	beq.n	8006870 <_strtod_l+0xa8>
 8006944:	2500      	movs	r5, #0
 8006946:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006948:	1c62      	adds	r2, r4, #1
 800694a:	9219      	str	r2, [sp, #100]	@ 0x64
 800694c:	7862      	ldrb	r2, [r4, #1]
 800694e:	2a2b      	cmp	r2, #43	@ 0x2b
 8006950:	d077      	beq.n	8006a42 <_strtod_l+0x27a>
 8006952:	2a2d      	cmp	r2, #45	@ 0x2d
 8006954:	d07b      	beq.n	8006a4e <_strtod_l+0x286>
 8006956:	f04f 0c00 	mov.w	ip, #0
 800695a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800695e:	2909      	cmp	r1, #9
 8006960:	f240 8082 	bls.w	8006a68 <_strtod_l+0x2a0>
 8006964:	9419      	str	r4, [sp, #100]	@ 0x64
 8006966:	f04f 0800 	mov.w	r8, #0
 800696a:	e0a2      	b.n	8006ab2 <_strtod_l+0x2ea>
 800696c:	2300      	movs	r3, #0
 800696e:	e7c7      	b.n	8006900 <_strtod_l+0x138>
 8006970:	2f08      	cmp	r7, #8
 8006972:	bfd5      	itete	le
 8006974:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006976:	9908      	ldrgt	r1, [sp, #32]
 8006978:	fb02 3301 	mlale	r3, r2, r1, r3
 800697c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006980:	f100 0001 	add.w	r0, r0, #1
 8006984:	bfd4      	ite	le
 8006986:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006988:	9308      	strgt	r3, [sp, #32]
 800698a:	3701      	adds	r7, #1
 800698c:	9019      	str	r0, [sp, #100]	@ 0x64
 800698e:	e7bf      	b.n	8006910 <_strtod_l+0x148>
 8006990:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	9219      	str	r2, [sp, #100]	@ 0x64
 8006996:	785a      	ldrb	r2, [r3, #1]
 8006998:	b37f      	cbz	r7, 80069fa <_strtod_l+0x232>
 800699a:	4681      	mov	r9, r0
 800699c:	463d      	mov	r5, r7
 800699e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80069a2:	2b09      	cmp	r3, #9
 80069a4:	d912      	bls.n	80069cc <_strtod_l+0x204>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e7c4      	b.n	8006934 <_strtod_l+0x16c>
 80069aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069ac:	1c5a      	adds	r2, r3, #1
 80069ae:	9219      	str	r2, [sp, #100]	@ 0x64
 80069b0:	785a      	ldrb	r2, [r3, #1]
 80069b2:	3001      	adds	r0, #1
 80069b4:	2a30      	cmp	r2, #48	@ 0x30
 80069b6:	d0f8      	beq.n	80069aa <_strtod_l+0x1e2>
 80069b8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80069bc:	2b08      	cmp	r3, #8
 80069be:	f200 84d3 	bhi.w	8007368 <_strtod_l+0xba0>
 80069c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069c4:	930c      	str	r3, [sp, #48]	@ 0x30
 80069c6:	4681      	mov	r9, r0
 80069c8:	2000      	movs	r0, #0
 80069ca:	4605      	mov	r5, r0
 80069cc:	3a30      	subs	r2, #48	@ 0x30
 80069ce:	f100 0301 	add.w	r3, r0, #1
 80069d2:	d02a      	beq.n	8006a2a <_strtod_l+0x262>
 80069d4:	4499      	add	r9, r3
 80069d6:	eb00 0c05 	add.w	ip, r0, r5
 80069da:	462b      	mov	r3, r5
 80069dc:	210a      	movs	r1, #10
 80069de:	4563      	cmp	r3, ip
 80069e0:	d10d      	bne.n	80069fe <_strtod_l+0x236>
 80069e2:	1c69      	adds	r1, r5, #1
 80069e4:	4401      	add	r1, r0
 80069e6:	4428      	add	r0, r5
 80069e8:	2808      	cmp	r0, #8
 80069ea:	dc16      	bgt.n	8006a1a <_strtod_l+0x252>
 80069ec:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80069ee:	230a      	movs	r3, #10
 80069f0:	fb03 2300 	mla	r3, r3, r0, r2
 80069f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80069f6:	2300      	movs	r3, #0
 80069f8:	e018      	b.n	8006a2c <_strtod_l+0x264>
 80069fa:	4638      	mov	r0, r7
 80069fc:	e7da      	b.n	80069b4 <_strtod_l+0x1ec>
 80069fe:	2b08      	cmp	r3, #8
 8006a00:	f103 0301 	add.w	r3, r3, #1
 8006a04:	dc03      	bgt.n	8006a0e <_strtod_l+0x246>
 8006a06:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006a08:	434e      	muls	r6, r1
 8006a0a:	960a      	str	r6, [sp, #40]	@ 0x28
 8006a0c:	e7e7      	b.n	80069de <_strtod_l+0x216>
 8006a0e:	2b10      	cmp	r3, #16
 8006a10:	bfde      	ittt	le
 8006a12:	9e08      	ldrle	r6, [sp, #32]
 8006a14:	434e      	mulle	r6, r1
 8006a16:	9608      	strle	r6, [sp, #32]
 8006a18:	e7e1      	b.n	80069de <_strtod_l+0x216>
 8006a1a:	280f      	cmp	r0, #15
 8006a1c:	dceb      	bgt.n	80069f6 <_strtod_l+0x22e>
 8006a1e:	9808      	ldr	r0, [sp, #32]
 8006a20:	230a      	movs	r3, #10
 8006a22:	fb03 2300 	mla	r3, r3, r0, r2
 8006a26:	9308      	str	r3, [sp, #32]
 8006a28:	e7e5      	b.n	80069f6 <_strtod_l+0x22e>
 8006a2a:	4629      	mov	r1, r5
 8006a2c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a2e:	1c50      	adds	r0, r2, #1
 8006a30:	9019      	str	r0, [sp, #100]	@ 0x64
 8006a32:	7852      	ldrb	r2, [r2, #1]
 8006a34:	4618      	mov	r0, r3
 8006a36:	460d      	mov	r5, r1
 8006a38:	e7b1      	b.n	800699e <_strtod_l+0x1d6>
 8006a3a:	f04f 0900 	mov.w	r9, #0
 8006a3e:	2301      	movs	r3, #1
 8006a40:	e77d      	b.n	800693e <_strtod_l+0x176>
 8006a42:	f04f 0c00 	mov.w	ip, #0
 8006a46:	1ca2      	adds	r2, r4, #2
 8006a48:	9219      	str	r2, [sp, #100]	@ 0x64
 8006a4a:	78a2      	ldrb	r2, [r4, #2]
 8006a4c:	e785      	b.n	800695a <_strtod_l+0x192>
 8006a4e:	f04f 0c01 	mov.w	ip, #1
 8006a52:	e7f8      	b.n	8006a46 <_strtod_l+0x27e>
 8006a54:	0800c250 	.word	0x0800c250
 8006a58:	0800c238 	.word	0x0800c238
 8006a5c:	7ff00000 	.word	0x7ff00000
 8006a60:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a62:	1c51      	adds	r1, r2, #1
 8006a64:	9119      	str	r1, [sp, #100]	@ 0x64
 8006a66:	7852      	ldrb	r2, [r2, #1]
 8006a68:	2a30      	cmp	r2, #48	@ 0x30
 8006a6a:	d0f9      	beq.n	8006a60 <_strtod_l+0x298>
 8006a6c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006a70:	2908      	cmp	r1, #8
 8006a72:	f63f af78 	bhi.w	8006966 <_strtod_l+0x19e>
 8006a76:	3a30      	subs	r2, #48	@ 0x30
 8006a78:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a7a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a7c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006a7e:	f04f 080a 	mov.w	r8, #10
 8006a82:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006a84:	1c56      	adds	r6, r2, #1
 8006a86:	9619      	str	r6, [sp, #100]	@ 0x64
 8006a88:	7852      	ldrb	r2, [r2, #1]
 8006a8a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006a8e:	f1be 0f09 	cmp.w	lr, #9
 8006a92:	d939      	bls.n	8006b08 <_strtod_l+0x340>
 8006a94:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006a96:	1a76      	subs	r6, r6, r1
 8006a98:	2e08      	cmp	r6, #8
 8006a9a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006a9e:	dc03      	bgt.n	8006aa8 <_strtod_l+0x2e0>
 8006aa0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006aa2:	4588      	cmp	r8, r1
 8006aa4:	bfa8      	it	ge
 8006aa6:	4688      	movge	r8, r1
 8006aa8:	f1bc 0f00 	cmp.w	ip, #0
 8006aac:	d001      	beq.n	8006ab2 <_strtod_l+0x2ea>
 8006aae:	f1c8 0800 	rsb	r8, r8, #0
 8006ab2:	2d00      	cmp	r5, #0
 8006ab4:	d14e      	bne.n	8006b54 <_strtod_l+0x38c>
 8006ab6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006ab8:	4308      	orrs	r0, r1
 8006aba:	f47f aebe 	bne.w	800683a <_strtod_l+0x72>
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	f47f aed6 	bne.w	8006870 <_strtod_l+0xa8>
 8006ac4:	2a69      	cmp	r2, #105	@ 0x69
 8006ac6:	d028      	beq.n	8006b1a <_strtod_l+0x352>
 8006ac8:	dc25      	bgt.n	8006b16 <_strtod_l+0x34e>
 8006aca:	2a49      	cmp	r2, #73	@ 0x49
 8006acc:	d025      	beq.n	8006b1a <_strtod_l+0x352>
 8006ace:	2a4e      	cmp	r2, #78	@ 0x4e
 8006ad0:	f47f aece 	bne.w	8006870 <_strtod_l+0xa8>
 8006ad4:	499b      	ldr	r1, [pc, #620]	@ (8006d44 <_strtod_l+0x57c>)
 8006ad6:	a819      	add	r0, sp, #100	@ 0x64
 8006ad8:	f002 fdf2 	bl	80096c0 <__match>
 8006adc:	2800      	cmp	r0, #0
 8006ade:	f43f aec7 	beq.w	8006870 <_strtod_l+0xa8>
 8006ae2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ae4:	781b      	ldrb	r3, [r3, #0]
 8006ae6:	2b28      	cmp	r3, #40	@ 0x28
 8006ae8:	d12e      	bne.n	8006b48 <_strtod_l+0x380>
 8006aea:	4997      	ldr	r1, [pc, #604]	@ (8006d48 <_strtod_l+0x580>)
 8006aec:	aa1c      	add	r2, sp, #112	@ 0x70
 8006aee:	a819      	add	r0, sp, #100	@ 0x64
 8006af0:	f002 fdfa 	bl	80096e8 <__hexnan>
 8006af4:	2805      	cmp	r0, #5
 8006af6:	d127      	bne.n	8006b48 <_strtod_l+0x380>
 8006af8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006afa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006afe:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006b02:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006b06:	e698      	b.n	800683a <_strtod_l+0x72>
 8006b08:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006b0a:	fb08 2101 	mla	r1, r8, r1, r2
 8006b0e:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006b12:	920e      	str	r2, [sp, #56]	@ 0x38
 8006b14:	e7b5      	b.n	8006a82 <_strtod_l+0x2ba>
 8006b16:	2a6e      	cmp	r2, #110	@ 0x6e
 8006b18:	e7da      	b.n	8006ad0 <_strtod_l+0x308>
 8006b1a:	498c      	ldr	r1, [pc, #560]	@ (8006d4c <_strtod_l+0x584>)
 8006b1c:	a819      	add	r0, sp, #100	@ 0x64
 8006b1e:	f002 fdcf 	bl	80096c0 <__match>
 8006b22:	2800      	cmp	r0, #0
 8006b24:	f43f aea4 	beq.w	8006870 <_strtod_l+0xa8>
 8006b28:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b2a:	4989      	ldr	r1, [pc, #548]	@ (8006d50 <_strtod_l+0x588>)
 8006b2c:	3b01      	subs	r3, #1
 8006b2e:	a819      	add	r0, sp, #100	@ 0x64
 8006b30:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b32:	f002 fdc5 	bl	80096c0 <__match>
 8006b36:	b910      	cbnz	r0, 8006b3e <_strtod_l+0x376>
 8006b38:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006b3a:	3301      	adds	r3, #1
 8006b3c:	9319      	str	r3, [sp, #100]	@ 0x64
 8006b3e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8006d60 <_strtod_l+0x598>
 8006b42:	f04f 0a00 	mov.w	sl, #0
 8006b46:	e678      	b.n	800683a <_strtod_l+0x72>
 8006b48:	4882      	ldr	r0, [pc, #520]	@ (8006d54 <_strtod_l+0x58c>)
 8006b4a:	f001 fc89 	bl	8008460 <nan>
 8006b4e:	ec5b ab10 	vmov	sl, fp, d0
 8006b52:	e672      	b.n	800683a <_strtod_l+0x72>
 8006b54:	eba8 0309 	sub.w	r3, r8, r9
 8006b58:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006b5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006b5c:	2f00      	cmp	r7, #0
 8006b5e:	bf08      	it	eq
 8006b60:	462f      	moveq	r7, r5
 8006b62:	2d10      	cmp	r5, #16
 8006b64:	462c      	mov	r4, r5
 8006b66:	bfa8      	it	ge
 8006b68:	2410      	movge	r4, #16
 8006b6a:	f7f9 fceb 	bl	8000544 <__aeabi_ui2d>
 8006b6e:	2d09      	cmp	r5, #9
 8006b70:	4682      	mov	sl, r0
 8006b72:	468b      	mov	fp, r1
 8006b74:	dc13      	bgt.n	8006b9e <_strtod_l+0x3d6>
 8006b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	f43f ae5e 	beq.w	800683a <_strtod_l+0x72>
 8006b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b80:	dd78      	ble.n	8006c74 <_strtod_l+0x4ac>
 8006b82:	2b16      	cmp	r3, #22
 8006b84:	dc5f      	bgt.n	8006c46 <_strtod_l+0x47e>
 8006b86:	4974      	ldr	r1, [pc, #464]	@ (8006d58 <_strtod_l+0x590>)
 8006b88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006b8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b90:	4652      	mov	r2, sl
 8006b92:	465b      	mov	r3, fp
 8006b94:	f7f9 fd50 	bl	8000638 <__aeabi_dmul>
 8006b98:	4682      	mov	sl, r0
 8006b9a:	468b      	mov	fp, r1
 8006b9c:	e64d      	b.n	800683a <_strtod_l+0x72>
 8006b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8006d58 <_strtod_l+0x590>)
 8006ba0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006ba4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006ba8:	f7f9 fd46 	bl	8000638 <__aeabi_dmul>
 8006bac:	4682      	mov	sl, r0
 8006bae:	9808      	ldr	r0, [sp, #32]
 8006bb0:	468b      	mov	fp, r1
 8006bb2:	f7f9 fcc7 	bl	8000544 <__aeabi_ui2d>
 8006bb6:	4602      	mov	r2, r0
 8006bb8:	460b      	mov	r3, r1
 8006bba:	4650      	mov	r0, sl
 8006bbc:	4659      	mov	r1, fp
 8006bbe:	f7f9 fb85 	bl	80002cc <__adddf3>
 8006bc2:	2d0f      	cmp	r5, #15
 8006bc4:	4682      	mov	sl, r0
 8006bc6:	468b      	mov	fp, r1
 8006bc8:	ddd5      	ble.n	8006b76 <_strtod_l+0x3ae>
 8006bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bcc:	1b2c      	subs	r4, r5, r4
 8006bce:	441c      	add	r4, r3
 8006bd0:	2c00      	cmp	r4, #0
 8006bd2:	f340 8096 	ble.w	8006d02 <_strtod_l+0x53a>
 8006bd6:	f014 030f 	ands.w	r3, r4, #15
 8006bda:	d00a      	beq.n	8006bf2 <_strtod_l+0x42a>
 8006bdc:	495e      	ldr	r1, [pc, #376]	@ (8006d58 <_strtod_l+0x590>)
 8006bde:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006be2:	4652      	mov	r2, sl
 8006be4:	465b      	mov	r3, fp
 8006be6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006bea:	f7f9 fd25 	bl	8000638 <__aeabi_dmul>
 8006bee:	4682      	mov	sl, r0
 8006bf0:	468b      	mov	fp, r1
 8006bf2:	f034 040f 	bics.w	r4, r4, #15
 8006bf6:	d073      	beq.n	8006ce0 <_strtod_l+0x518>
 8006bf8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006bfc:	dd48      	ble.n	8006c90 <_strtod_l+0x4c8>
 8006bfe:	2400      	movs	r4, #0
 8006c00:	46a0      	mov	r8, r4
 8006c02:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c04:	46a1      	mov	r9, r4
 8006c06:	9a05      	ldr	r2, [sp, #20]
 8006c08:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8006d60 <_strtod_l+0x598>
 8006c0c:	2322      	movs	r3, #34	@ 0x22
 8006c0e:	6013      	str	r3, [r2, #0]
 8006c10:	f04f 0a00 	mov.w	sl, #0
 8006c14:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	f43f ae0f 	beq.w	800683a <_strtod_l+0x72>
 8006c1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c1e:	9805      	ldr	r0, [sp, #20]
 8006c20:	f002 ff06 	bl	8009a30 <_Bfree>
 8006c24:	9805      	ldr	r0, [sp, #20]
 8006c26:	4649      	mov	r1, r9
 8006c28:	f002 ff02 	bl	8009a30 <_Bfree>
 8006c2c:	9805      	ldr	r0, [sp, #20]
 8006c2e:	4641      	mov	r1, r8
 8006c30:	f002 fefe 	bl	8009a30 <_Bfree>
 8006c34:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006c36:	9805      	ldr	r0, [sp, #20]
 8006c38:	f002 fefa 	bl	8009a30 <_Bfree>
 8006c3c:	9805      	ldr	r0, [sp, #20]
 8006c3e:	4621      	mov	r1, r4
 8006c40:	f002 fef6 	bl	8009a30 <_Bfree>
 8006c44:	e5f9      	b.n	800683a <_strtod_l+0x72>
 8006c46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c48:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006c4c:	4293      	cmp	r3, r2
 8006c4e:	dbbc      	blt.n	8006bca <_strtod_l+0x402>
 8006c50:	4c41      	ldr	r4, [pc, #260]	@ (8006d58 <_strtod_l+0x590>)
 8006c52:	f1c5 050f 	rsb	r5, r5, #15
 8006c56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006c5a:	4652      	mov	r2, sl
 8006c5c:	465b      	mov	r3, fp
 8006c5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006c62:	f7f9 fce9 	bl	8000638 <__aeabi_dmul>
 8006c66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c68:	1b5d      	subs	r5, r3, r5
 8006c6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006c6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006c72:	e78f      	b.n	8006b94 <_strtod_l+0x3cc>
 8006c74:	3316      	adds	r3, #22
 8006c76:	dba8      	blt.n	8006bca <_strtod_l+0x402>
 8006c78:	4b37      	ldr	r3, [pc, #220]	@ (8006d58 <_strtod_l+0x590>)
 8006c7a:	eba9 0808 	sub.w	r8, r9, r8
 8006c7e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006c82:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006c86:	4650      	mov	r0, sl
 8006c88:	4659      	mov	r1, fp
 8006c8a:	f7f9 fdff 	bl	800088c <__aeabi_ddiv>
 8006c8e:	e783      	b.n	8006b98 <_strtod_l+0x3d0>
 8006c90:	4b32      	ldr	r3, [pc, #200]	@ (8006d5c <_strtod_l+0x594>)
 8006c92:	9308      	str	r3, [sp, #32]
 8006c94:	2300      	movs	r3, #0
 8006c96:	1124      	asrs	r4, r4, #4
 8006c98:	4650      	mov	r0, sl
 8006c9a:	4659      	mov	r1, fp
 8006c9c:	461e      	mov	r6, r3
 8006c9e:	2c01      	cmp	r4, #1
 8006ca0:	dc21      	bgt.n	8006ce6 <_strtod_l+0x51e>
 8006ca2:	b10b      	cbz	r3, 8006ca8 <_strtod_l+0x4e0>
 8006ca4:	4682      	mov	sl, r0
 8006ca6:	468b      	mov	fp, r1
 8006ca8:	492c      	ldr	r1, [pc, #176]	@ (8006d5c <_strtod_l+0x594>)
 8006caa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006cae:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006cb2:	4652      	mov	r2, sl
 8006cb4:	465b      	mov	r3, fp
 8006cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006cba:	f7f9 fcbd 	bl	8000638 <__aeabi_dmul>
 8006cbe:	4b28      	ldr	r3, [pc, #160]	@ (8006d60 <_strtod_l+0x598>)
 8006cc0:	460a      	mov	r2, r1
 8006cc2:	400b      	ands	r3, r1
 8006cc4:	4927      	ldr	r1, [pc, #156]	@ (8006d64 <_strtod_l+0x59c>)
 8006cc6:	428b      	cmp	r3, r1
 8006cc8:	4682      	mov	sl, r0
 8006cca:	d898      	bhi.n	8006bfe <_strtod_l+0x436>
 8006ccc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006cd0:	428b      	cmp	r3, r1
 8006cd2:	bf86      	itte	hi
 8006cd4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8006d68 <_strtod_l+0x5a0>
 8006cd8:	f04f 3aff 	movhi.w	sl, #4294967295
 8006cdc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	9308      	str	r3, [sp, #32]
 8006ce4:	e07a      	b.n	8006ddc <_strtod_l+0x614>
 8006ce6:	07e2      	lsls	r2, r4, #31
 8006ce8:	d505      	bpl.n	8006cf6 <_strtod_l+0x52e>
 8006cea:	9b08      	ldr	r3, [sp, #32]
 8006cec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf0:	f7f9 fca2 	bl	8000638 <__aeabi_dmul>
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	9a08      	ldr	r2, [sp, #32]
 8006cf8:	3208      	adds	r2, #8
 8006cfa:	3601      	adds	r6, #1
 8006cfc:	1064      	asrs	r4, r4, #1
 8006cfe:	9208      	str	r2, [sp, #32]
 8006d00:	e7cd      	b.n	8006c9e <_strtod_l+0x4d6>
 8006d02:	d0ed      	beq.n	8006ce0 <_strtod_l+0x518>
 8006d04:	4264      	negs	r4, r4
 8006d06:	f014 020f 	ands.w	r2, r4, #15
 8006d0a:	d00a      	beq.n	8006d22 <_strtod_l+0x55a>
 8006d0c:	4b12      	ldr	r3, [pc, #72]	@ (8006d58 <_strtod_l+0x590>)
 8006d0e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006d12:	4650      	mov	r0, sl
 8006d14:	4659      	mov	r1, fp
 8006d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d1a:	f7f9 fdb7 	bl	800088c <__aeabi_ddiv>
 8006d1e:	4682      	mov	sl, r0
 8006d20:	468b      	mov	fp, r1
 8006d22:	1124      	asrs	r4, r4, #4
 8006d24:	d0dc      	beq.n	8006ce0 <_strtod_l+0x518>
 8006d26:	2c1f      	cmp	r4, #31
 8006d28:	dd20      	ble.n	8006d6c <_strtod_l+0x5a4>
 8006d2a:	2400      	movs	r4, #0
 8006d2c:	46a0      	mov	r8, r4
 8006d2e:	940a      	str	r4, [sp, #40]	@ 0x28
 8006d30:	46a1      	mov	r9, r4
 8006d32:	9a05      	ldr	r2, [sp, #20]
 8006d34:	2322      	movs	r3, #34	@ 0x22
 8006d36:	f04f 0a00 	mov.w	sl, #0
 8006d3a:	f04f 0b00 	mov.w	fp, #0
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	e768      	b.n	8006c14 <_strtod_l+0x44c>
 8006d42:	bf00      	nop
 8006d44:	0800c29d 	.word	0x0800c29d
 8006d48:	0800c23c 	.word	0x0800c23c
 8006d4c:	0800c295 	.word	0x0800c295
 8006d50:	0800c2d4 	.word	0x0800c2d4
 8006d54:	0800c665 	.word	0x0800c665
 8006d58:	0800c450 	.word	0x0800c450
 8006d5c:	0800c428 	.word	0x0800c428
 8006d60:	7ff00000 	.word	0x7ff00000
 8006d64:	7ca00000 	.word	0x7ca00000
 8006d68:	7fefffff 	.word	0x7fefffff
 8006d6c:	f014 0310 	ands.w	r3, r4, #16
 8006d70:	bf18      	it	ne
 8006d72:	236a      	movne	r3, #106	@ 0x6a
 8006d74:	4ea9      	ldr	r6, [pc, #676]	@ (800701c <_strtod_l+0x854>)
 8006d76:	9308      	str	r3, [sp, #32]
 8006d78:	4650      	mov	r0, sl
 8006d7a:	4659      	mov	r1, fp
 8006d7c:	2300      	movs	r3, #0
 8006d7e:	07e2      	lsls	r2, r4, #31
 8006d80:	d504      	bpl.n	8006d8c <_strtod_l+0x5c4>
 8006d82:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006d86:	f7f9 fc57 	bl	8000638 <__aeabi_dmul>
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	1064      	asrs	r4, r4, #1
 8006d8e:	f106 0608 	add.w	r6, r6, #8
 8006d92:	d1f4      	bne.n	8006d7e <_strtod_l+0x5b6>
 8006d94:	b10b      	cbz	r3, 8006d9a <_strtod_l+0x5d2>
 8006d96:	4682      	mov	sl, r0
 8006d98:	468b      	mov	fp, r1
 8006d9a:	9b08      	ldr	r3, [sp, #32]
 8006d9c:	b1b3      	cbz	r3, 8006dcc <_strtod_l+0x604>
 8006d9e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006da2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	4659      	mov	r1, fp
 8006daa:	dd0f      	ble.n	8006dcc <_strtod_l+0x604>
 8006dac:	2b1f      	cmp	r3, #31
 8006dae:	dd55      	ble.n	8006e5c <_strtod_l+0x694>
 8006db0:	2b34      	cmp	r3, #52	@ 0x34
 8006db2:	bfde      	ittt	le
 8006db4:	f04f 33ff 	movle.w	r3, #4294967295
 8006db8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006dbc:	4093      	lslle	r3, r2
 8006dbe:	f04f 0a00 	mov.w	sl, #0
 8006dc2:	bfcc      	ite	gt
 8006dc4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006dc8:	ea03 0b01 	andle.w	fp, r3, r1
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2300      	movs	r3, #0
 8006dd0:	4650      	mov	r0, sl
 8006dd2:	4659      	mov	r1, fp
 8006dd4:	f7f9 fe98 	bl	8000b08 <__aeabi_dcmpeq>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d1a6      	bne.n	8006d2a <_strtod_l+0x562>
 8006ddc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006de2:	9805      	ldr	r0, [sp, #20]
 8006de4:	462b      	mov	r3, r5
 8006de6:	463a      	mov	r2, r7
 8006de8:	f002 fe8a 	bl	8009b00 <__s2b>
 8006dec:	900a      	str	r0, [sp, #40]	@ 0x28
 8006dee:	2800      	cmp	r0, #0
 8006df0:	f43f af05 	beq.w	8006bfe <_strtod_l+0x436>
 8006df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006df6:	2a00      	cmp	r2, #0
 8006df8:	eba9 0308 	sub.w	r3, r9, r8
 8006dfc:	bfa8      	it	ge
 8006dfe:	2300      	movge	r3, #0
 8006e00:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e02:	2400      	movs	r4, #0
 8006e04:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006e08:	9316      	str	r3, [sp, #88]	@ 0x58
 8006e0a:	46a0      	mov	r8, r4
 8006e0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e0e:	9805      	ldr	r0, [sp, #20]
 8006e10:	6859      	ldr	r1, [r3, #4]
 8006e12:	f002 fdcd 	bl	80099b0 <_Balloc>
 8006e16:	4681      	mov	r9, r0
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	f43f aef4 	beq.w	8006c06 <_strtod_l+0x43e>
 8006e1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e20:	691a      	ldr	r2, [r3, #16]
 8006e22:	3202      	adds	r2, #2
 8006e24:	f103 010c 	add.w	r1, r3, #12
 8006e28:	0092      	lsls	r2, r2, #2
 8006e2a:	300c      	adds	r0, #12
 8006e2c:	f001 fb09 	bl	8008442 <memcpy>
 8006e30:	ec4b ab10 	vmov	d0, sl, fp
 8006e34:	9805      	ldr	r0, [sp, #20]
 8006e36:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e38:	a91b      	add	r1, sp, #108	@ 0x6c
 8006e3a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006e3e:	f003 f99b 	bl	800a178 <__d2b>
 8006e42:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e44:	2800      	cmp	r0, #0
 8006e46:	f43f aede 	beq.w	8006c06 <_strtod_l+0x43e>
 8006e4a:	9805      	ldr	r0, [sp, #20]
 8006e4c:	2101      	movs	r1, #1
 8006e4e:	f002 feed 	bl	8009c2c <__i2b>
 8006e52:	4680      	mov	r8, r0
 8006e54:	b948      	cbnz	r0, 8006e6a <_strtod_l+0x6a2>
 8006e56:	f04f 0800 	mov.w	r8, #0
 8006e5a:	e6d4      	b.n	8006c06 <_strtod_l+0x43e>
 8006e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006e60:	fa02 f303 	lsl.w	r3, r2, r3
 8006e64:	ea03 0a0a 	and.w	sl, r3, sl
 8006e68:	e7b0      	b.n	8006dcc <_strtod_l+0x604>
 8006e6a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006e6c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006e6e:	2d00      	cmp	r5, #0
 8006e70:	bfab      	itete	ge
 8006e72:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006e74:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006e76:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006e78:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006e7a:	bfac      	ite	ge
 8006e7c:	18ef      	addge	r7, r5, r3
 8006e7e:	1b5e      	sublt	r6, r3, r5
 8006e80:	9b08      	ldr	r3, [sp, #32]
 8006e82:	1aed      	subs	r5, r5, r3
 8006e84:	4415      	add	r5, r2
 8006e86:	4b66      	ldr	r3, [pc, #408]	@ (8007020 <_strtod_l+0x858>)
 8006e88:	3d01      	subs	r5, #1
 8006e8a:	429d      	cmp	r5, r3
 8006e8c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006e90:	da50      	bge.n	8006f34 <_strtod_l+0x76c>
 8006e92:	1b5b      	subs	r3, r3, r5
 8006e94:	2b1f      	cmp	r3, #31
 8006e96:	eba2 0203 	sub.w	r2, r2, r3
 8006e9a:	f04f 0101 	mov.w	r1, #1
 8006e9e:	dc3d      	bgt.n	8006f1c <_strtod_l+0x754>
 8006ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ea4:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	9310      	str	r3, [sp, #64]	@ 0x40
 8006eaa:	18bd      	adds	r5, r7, r2
 8006eac:	9b08      	ldr	r3, [sp, #32]
 8006eae:	42af      	cmp	r7, r5
 8006eb0:	4416      	add	r6, r2
 8006eb2:	441e      	add	r6, r3
 8006eb4:	463b      	mov	r3, r7
 8006eb6:	bfa8      	it	ge
 8006eb8:	462b      	movge	r3, r5
 8006eba:	42b3      	cmp	r3, r6
 8006ebc:	bfa8      	it	ge
 8006ebe:	4633      	movge	r3, r6
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	bfc2      	ittt	gt
 8006ec4:	1aed      	subgt	r5, r5, r3
 8006ec6:	1af6      	subgt	r6, r6, r3
 8006ec8:	1aff      	subgt	r7, r7, r3
 8006eca:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dd16      	ble.n	8006efe <_strtod_l+0x736>
 8006ed0:	4641      	mov	r1, r8
 8006ed2:	9805      	ldr	r0, [sp, #20]
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	f002 ff69 	bl	8009dac <__pow5mult>
 8006eda:	4680      	mov	r8, r0
 8006edc:	2800      	cmp	r0, #0
 8006ede:	d0ba      	beq.n	8006e56 <_strtod_l+0x68e>
 8006ee0:	4601      	mov	r1, r0
 8006ee2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006ee4:	9805      	ldr	r0, [sp, #20]
 8006ee6:	f002 feb7 	bl	8009c58 <__multiply>
 8006eea:	900e      	str	r0, [sp, #56]	@ 0x38
 8006eec:	2800      	cmp	r0, #0
 8006eee:	f43f ae8a 	beq.w	8006c06 <_strtod_l+0x43e>
 8006ef2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006ef4:	9805      	ldr	r0, [sp, #20]
 8006ef6:	f002 fd9b 	bl	8009a30 <_Bfree>
 8006efa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006efc:	931a      	str	r3, [sp, #104]	@ 0x68
 8006efe:	2d00      	cmp	r5, #0
 8006f00:	dc1d      	bgt.n	8006f3e <_strtod_l+0x776>
 8006f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	dd23      	ble.n	8006f50 <_strtod_l+0x788>
 8006f08:	4649      	mov	r1, r9
 8006f0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006f0c:	9805      	ldr	r0, [sp, #20]
 8006f0e:	f002 ff4d 	bl	8009dac <__pow5mult>
 8006f12:	4681      	mov	r9, r0
 8006f14:	b9e0      	cbnz	r0, 8006f50 <_strtod_l+0x788>
 8006f16:	f04f 0900 	mov.w	r9, #0
 8006f1a:	e674      	b.n	8006c06 <_strtod_l+0x43e>
 8006f1c:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006f20:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006f24:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006f28:	35e2      	adds	r5, #226	@ 0xe2
 8006f2a:	fa01 f305 	lsl.w	r3, r1, r5
 8006f2e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f30:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006f32:	e7ba      	b.n	8006eaa <_strtod_l+0x6e2>
 8006f34:	2300      	movs	r3, #0
 8006f36:	9310      	str	r3, [sp, #64]	@ 0x40
 8006f38:	2301      	movs	r3, #1
 8006f3a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f3c:	e7b5      	b.n	8006eaa <_strtod_l+0x6e2>
 8006f3e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f40:	9805      	ldr	r0, [sp, #20]
 8006f42:	462a      	mov	r2, r5
 8006f44:	f002 ff8c 	bl	8009e60 <__lshift>
 8006f48:	901a      	str	r0, [sp, #104]	@ 0x68
 8006f4a:	2800      	cmp	r0, #0
 8006f4c:	d1d9      	bne.n	8006f02 <_strtod_l+0x73a>
 8006f4e:	e65a      	b.n	8006c06 <_strtod_l+0x43e>
 8006f50:	2e00      	cmp	r6, #0
 8006f52:	dd07      	ble.n	8006f64 <_strtod_l+0x79c>
 8006f54:	4649      	mov	r1, r9
 8006f56:	9805      	ldr	r0, [sp, #20]
 8006f58:	4632      	mov	r2, r6
 8006f5a:	f002 ff81 	bl	8009e60 <__lshift>
 8006f5e:	4681      	mov	r9, r0
 8006f60:	2800      	cmp	r0, #0
 8006f62:	d0d8      	beq.n	8006f16 <_strtod_l+0x74e>
 8006f64:	2f00      	cmp	r7, #0
 8006f66:	dd08      	ble.n	8006f7a <_strtod_l+0x7b2>
 8006f68:	4641      	mov	r1, r8
 8006f6a:	9805      	ldr	r0, [sp, #20]
 8006f6c:	463a      	mov	r2, r7
 8006f6e:	f002 ff77 	bl	8009e60 <__lshift>
 8006f72:	4680      	mov	r8, r0
 8006f74:	2800      	cmp	r0, #0
 8006f76:	f43f ae46 	beq.w	8006c06 <_strtod_l+0x43e>
 8006f7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006f7c:	9805      	ldr	r0, [sp, #20]
 8006f7e:	464a      	mov	r2, r9
 8006f80:	f002 fff6 	bl	8009f70 <__mdiff>
 8006f84:	4604      	mov	r4, r0
 8006f86:	2800      	cmp	r0, #0
 8006f88:	f43f ae3d 	beq.w	8006c06 <_strtod_l+0x43e>
 8006f8c:	68c3      	ldr	r3, [r0, #12]
 8006f8e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f90:	2300      	movs	r3, #0
 8006f92:	60c3      	str	r3, [r0, #12]
 8006f94:	4641      	mov	r1, r8
 8006f96:	f002 ffcf 	bl	8009f38 <__mcmp>
 8006f9a:	2800      	cmp	r0, #0
 8006f9c:	da46      	bge.n	800702c <_strtod_l+0x864>
 8006f9e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fa0:	ea53 030a 	orrs.w	r3, r3, sl
 8006fa4:	d16c      	bne.n	8007080 <_strtod_l+0x8b8>
 8006fa6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d168      	bne.n	8007080 <_strtod_l+0x8b8>
 8006fae:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fb2:	0d1b      	lsrs	r3, r3, #20
 8006fb4:	051b      	lsls	r3, r3, #20
 8006fb6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006fba:	d961      	bls.n	8007080 <_strtod_l+0x8b8>
 8006fbc:	6963      	ldr	r3, [r4, #20]
 8006fbe:	b913      	cbnz	r3, 8006fc6 <_strtod_l+0x7fe>
 8006fc0:	6923      	ldr	r3, [r4, #16]
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	dd5c      	ble.n	8007080 <_strtod_l+0x8b8>
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	2201      	movs	r2, #1
 8006fca:	9805      	ldr	r0, [sp, #20]
 8006fcc:	f002 ff48 	bl	8009e60 <__lshift>
 8006fd0:	4641      	mov	r1, r8
 8006fd2:	4604      	mov	r4, r0
 8006fd4:	f002 ffb0 	bl	8009f38 <__mcmp>
 8006fd8:	2800      	cmp	r0, #0
 8006fda:	dd51      	ble.n	8007080 <_strtod_l+0x8b8>
 8006fdc:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006fe0:	9a08      	ldr	r2, [sp, #32]
 8006fe2:	0d1b      	lsrs	r3, r3, #20
 8006fe4:	051b      	lsls	r3, r3, #20
 8006fe6:	2a00      	cmp	r2, #0
 8006fe8:	d06b      	beq.n	80070c2 <_strtod_l+0x8fa>
 8006fea:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006fee:	d868      	bhi.n	80070c2 <_strtod_l+0x8fa>
 8006ff0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006ff4:	f67f ae9d 	bls.w	8006d32 <_strtod_l+0x56a>
 8006ff8:	4b0a      	ldr	r3, [pc, #40]	@ (8007024 <_strtod_l+0x85c>)
 8006ffa:	4650      	mov	r0, sl
 8006ffc:	4659      	mov	r1, fp
 8006ffe:	2200      	movs	r2, #0
 8007000:	f7f9 fb1a 	bl	8000638 <__aeabi_dmul>
 8007004:	4b08      	ldr	r3, [pc, #32]	@ (8007028 <_strtod_l+0x860>)
 8007006:	400b      	ands	r3, r1
 8007008:	4682      	mov	sl, r0
 800700a:	468b      	mov	fp, r1
 800700c:	2b00      	cmp	r3, #0
 800700e:	f47f ae05 	bne.w	8006c1c <_strtod_l+0x454>
 8007012:	9a05      	ldr	r2, [sp, #20]
 8007014:	2322      	movs	r3, #34	@ 0x22
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	e600      	b.n	8006c1c <_strtod_l+0x454>
 800701a:	bf00      	nop
 800701c:	0800c268 	.word	0x0800c268
 8007020:	fffffc02 	.word	0xfffffc02
 8007024:	39500000 	.word	0x39500000
 8007028:	7ff00000 	.word	0x7ff00000
 800702c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007030:	d165      	bne.n	80070fe <_strtod_l+0x936>
 8007032:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007034:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007038:	b35a      	cbz	r2, 8007092 <_strtod_l+0x8ca>
 800703a:	4a9f      	ldr	r2, [pc, #636]	@ (80072b8 <_strtod_l+0xaf0>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d12b      	bne.n	8007098 <_strtod_l+0x8d0>
 8007040:	9b08      	ldr	r3, [sp, #32]
 8007042:	4651      	mov	r1, sl
 8007044:	b303      	cbz	r3, 8007088 <_strtod_l+0x8c0>
 8007046:	4b9d      	ldr	r3, [pc, #628]	@ (80072bc <_strtod_l+0xaf4>)
 8007048:	465a      	mov	r2, fp
 800704a:	4013      	ands	r3, r2
 800704c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007050:	f04f 32ff 	mov.w	r2, #4294967295
 8007054:	d81b      	bhi.n	800708e <_strtod_l+0x8c6>
 8007056:	0d1b      	lsrs	r3, r3, #20
 8007058:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800705c:	fa02 f303 	lsl.w	r3, r2, r3
 8007060:	4299      	cmp	r1, r3
 8007062:	d119      	bne.n	8007098 <_strtod_l+0x8d0>
 8007064:	4b96      	ldr	r3, [pc, #600]	@ (80072c0 <_strtod_l+0xaf8>)
 8007066:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007068:	429a      	cmp	r2, r3
 800706a:	d102      	bne.n	8007072 <_strtod_l+0x8aa>
 800706c:	3101      	adds	r1, #1
 800706e:	f43f adca 	beq.w	8006c06 <_strtod_l+0x43e>
 8007072:	4b92      	ldr	r3, [pc, #584]	@ (80072bc <_strtod_l+0xaf4>)
 8007074:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007076:	401a      	ands	r2, r3
 8007078:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800707c:	f04f 0a00 	mov.w	sl, #0
 8007080:	9b08      	ldr	r3, [sp, #32]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1b8      	bne.n	8006ff8 <_strtod_l+0x830>
 8007086:	e5c9      	b.n	8006c1c <_strtod_l+0x454>
 8007088:	f04f 33ff 	mov.w	r3, #4294967295
 800708c:	e7e8      	b.n	8007060 <_strtod_l+0x898>
 800708e:	4613      	mov	r3, r2
 8007090:	e7e6      	b.n	8007060 <_strtod_l+0x898>
 8007092:	ea53 030a 	orrs.w	r3, r3, sl
 8007096:	d0a1      	beq.n	8006fdc <_strtod_l+0x814>
 8007098:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800709a:	b1db      	cbz	r3, 80070d4 <_strtod_l+0x90c>
 800709c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800709e:	4213      	tst	r3, r2
 80070a0:	d0ee      	beq.n	8007080 <_strtod_l+0x8b8>
 80070a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070a4:	9a08      	ldr	r2, [sp, #32]
 80070a6:	4650      	mov	r0, sl
 80070a8:	4659      	mov	r1, fp
 80070aa:	b1bb      	cbz	r3, 80070dc <_strtod_l+0x914>
 80070ac:	f7ff fb6d 	bl	800678a <sulp>
 80070b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070b4:	ec53 2b10 	vmov	r2, r3, d0
 80070b8:	f7f9 f908 	bl	80002cc <__adddf3>
 80070bc:	4682      	mov	sl, r0
 80070be:	468b      	mov	fp, r1
 80070c0:	e7de      	b.n	8007080 <_strtod_l+0x8b8>
 80070c2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80070c6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80070ca:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80070ce:	f04f 3aff 	mov.w	sl, #4294967295
 80070d2:	e7d5      	b.n	8007080 <_strtod_l+0x8b8>
 80070d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80070d6:	ea13 0f0a 	tst.w	r3, sl
 80070da:	e7e1      	b.n	80070a0 <_strtod_l+0x8d8>
 80070dc:	f7ff fb55 	bl	800678a <sulp>
 80070e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80070e4:	ec53 2b10 	vmov	r2, r3, d0
 80070e8:	f7f9 f8ee 	bl	80002c8 <__aeabi_dsub>
 80070ec:	2200      	movs	r2, #0
 80070ee:	2300      	movs	r3, #0
 80070f0:	4682      	mov	sl, r0
 80070f2:	468b      	mov	fp, r1
 80070f4:	f7f9 fd08 	bl	8000b08 <__aeabi_dcmpeq>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d0c1      	beq.n	8007080 <_strtod_l+0x8b8>
 80070fc:	e619      	b.n	8006d32 <_strtod_l+0x56a>
 80070fe:	4641      	mov	r1, r8
 8007100:	4620      	mov	r0, r4
 8007102:	f003 f891 	bl	800a228 <__ratio>
 8007106:	ec57 6b10 	vmov	r6, r7, d0
 800710a:	2200      	movs	r2, #0
 800710c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007110:	4630      	mov	r0, r6
 8007112:	4639      	mov	r1, r7
 8007114:	f7f9 fd0c 	bl	8000b30 <__aeabi_dcmple>
 8007118:	2800      	cmp	r0, #0
 800711a:	d06f      	beq.n	80071fc <_strtod_l+0xa34>
 800711c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800711e:	2b00      	cmp	r3, #0
 8007120:	d17a      	bne.n	8007218 <_strtod_l+0xa50>
 8007122:	f1ba 0f00 	cmp.w	sl, #0
 8007126:	d158      	bne.n	80071da <_strtod_l+0xa12>
 8007128:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800712a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800712e:	2b00      	cmp	r3, #0
 8007130:	d15a      	bne.n	80071e8 <_strtod_l+0xa20>
 8007132:	4b64      	ldr	r3, [pc, #400]	@ (80072c4 <_strtod_l+0xafc>)
 8007134:	2200      	movs	r2, #0
 8007136:	4630      	mov	r0, r6
 8007138:	4639      	mov	r1, r7
 800713a:	f7f9 fcef 	bl	8000b1c <__aeabi_dcmplt>
 800713e:	2800      	cmp	r0, #0
 8007140:	d159      	bne.n	80071f6 <_strtod_l+0xa2e>
 8007142:	4630      	mov	r0, r6
 8007144:	4639      	mov	r1, r7
 8007146:	4b60      	ldr	r3, [pc, #384]	@ (80072c8 <_strtod_l+0xb00>)
 8007148:	2200      	movs	r2, #0
 800714a:	f7f9 fa75 	bl	8000638 <__aeabi_dmul>
 800714e:	4606      	mov	r6, r0
 8007150:	460f      	mov	r7, r1
 8007152:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007156:	9606      	str	r6, [sp, #24]
 8007158:	9307      	str	r3, [sp, #28]
 800715a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800715e:	4d57      	ldr	r5, [pc, #348]	@ (80072bc <_strtod_l+0xaf4>)
 8007160:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007164:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007166:	401d      	ands	r5, r3
 8007168:	4b58      	ldr	r3, [pc, #352]	@ (80072cc <_strtod_l+0xb04>)
 800716a:	429d      	cmp	r5, r3
 800716c:	f040 80b2 	bne.w	80072d4 <_strtod_l+0xb0c>
 8007170:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007172:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007176:	ec4b ab10 	vmov	d0, sl, fp
 800717a:	f002 ff8d 	bl	800a098 <__ulp>
 800717e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007182:	ec51 0b10 	vmov	r0, r1, d0
 8007186:	f7f9 fa57 	bl	8000638 <__aeabi_dmul>
 800718a:	4652      	mov	r2, sl
 800718c:	465b      	mov	r3, fp
 800718e:	f7f9 f89d 	bl	80002cc <__adddf3>
 8007192:	460b      	mov	r3, r1
 8007194:	4949      	ldr	r1, [pc, #292]	@ (80072bc <_strtod_l+0xaf4>)
 8007196:	4a4e      	ldr	r2, [pc, #312]	@ (80072d0 <_strtod_l+0xb08>)
 8007198:	4019      	ands	r1, r3
 800719a:	4291      	cmp	r1, r2
 800719c:	4682      	mov	sl, r0
 800719e:	d942      	bls.n	8007226 <_strtod_l+0xa5e>
 80071a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80071a2:	4b47      	ldr	r3, [pc, #284]	@ (80072c0 <_strtod_l+0xaf8>)
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d103      	bne.n	80071b0 <_strtod_l+0x9e8>
 80071a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80071aa:	3301      	adds	r3, #1
 80071ac:	f43f ad2b 	beq.w	8006c06 <_strtod_l+0x43e>
 80071b0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80072c0 <_strtod_l+0xaf8>
 80071b4:	f04f 3aff 	mov.w	sl, #4294967295
 80071b8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80071ba:	9805      	ldr	r0, [sp, #20]
 80071bc:	f002 fc38 	bl	8009a30 <_Bfree>
 80071c0:	9805      	ldr	r0, [sp, #20]
 80071c2:	4649      	mov	r1, r9
 80071c4:	f002 fc34 	bl	8009a30 <_Bfree>
 80071c8:	9805      	ldr	r0, [sp, #20]
 80071ca:	4641      	mov	r1, r8
 80071cc:	f002 fc30 	bl	8009a30 <_Bfree>
 80071d0:	9805      	ldr	r0, [sp, #20]
 80071d2:	4621      	mov	r1, r4
 80071d4:	f002 fc2c 	bl	8009a30 <_Bfree>
 80071d8:	e618      	b.n	8006e0c <_strtod_l+0x644>
 80071da:	f1ba 0f01 	cmp.w	sl, #1
 80071de:	d103      	bne.n	80071e8 <_strtod_l+0xa20>
 80071e0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f43f ada5 	beq.w	8006d32 <_strtod_l+0x56a>
 80071e8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007298 <_strtod_l+0xad0>
 80071ec:	4f35      	ldr	r7, [pc, #212]	@ (80072c4 <_strtod_l+0xafc>)
 80071ee:	ed8d 7b06 	vstr	d7, [sp, #24]
 80071f2:	2600      	movs	r6, #0
 80071f4:	e7b1      	b.n	800715a <_strtod_l+0x992>
 80071f6:	4f34      	ldr	r7, [pc, #208]	@ (80072c8 <_strtod_l+0xb00>)
 80071f8:	2600      	movs	r6, #0
 80071fa:	e7aa      	b.n	8007152 <_strtod_l+0x98a>
 80071fc:	4b32      	ldr	r3, [pc, #200]	@ (80072c8 <_strtod_l+0xb00>)
 80071fe:	4630      	mov	r0, r6
 8007200:	4639      	mov	r1, r7
 8007202:	2200      	movs	r2, #0
 8007204:	f7f9 fa18 	bl	8000638 <__aeabi_dmul>
 8007208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800720a:	4606      	mov	r6, r0
 800720c:	460f      	mov	r7, r1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d09f      	beq.n	8007152 <_strtod_l+0x98a>
 8007212:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007216:	e7a0      	b.n	800715a <_strtod_l+0x992>
 8007218:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80072a0 <_strtod_l+0xad8>
 800721c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007220:	ec57 6b17 	vmov	r6, r7, d7
 8007224:	e799      	b.n	800715a <_strtod_l+0x992>
 8007226:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800722a:	9b08      	ldr	r3, [sp, #32]
 800722c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007230:	2b00      	cmp	r3, #0
 8007232:	d1c1      	bne.n	80071b8 <_strtod_l+0x9f0>
 8007234:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007238:	0d1b      	lsrs	r3, r3, #20
 800723a:	051b      	lsls	r3, r3, #20
 800723c:	429d      	cmp	r5, r3
 800723e:	d1bb      	bne.n	80071b8 <_strtod_l+0x9f0>
 8007240:	4630      	mov	r0, r6
 8007242:	4639      	mov	r1, r7
 8007244:	f7f9 fd58 	bl	8000cf8 <__aeabi_d2lz>
 8007248:	f7f9 f9c8 	bl	80005dc <__aeabi_l2d>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4630      	mov	r0, r6
 8007252:	4639      	mov	r1, r7
 8007254:	f7f9 f838 	bl	80002c8 <__aeabi_dsub>
 8007258:	460b      	mov	r3, r1
 800725a:	4602      	mov	r2, r0
 800725c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007260:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007264:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007266:	ea46 060a 	orr.w	r6, r6, sl
 800726a:	431e      	orrs	r6, r3
 800726c:	d06f      	beq.n	800734e <_strtod_l+0xb86>
 800726e:	a30e      	add	r3, pc, #56	@ (adr r3, 80072a8 <_strtod_l+0xae0>)
 8007270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007274:	f7f9 fc52 	bl	8000b1c <__aeabi_dcmplt>
 8007278:	2800      	cmp	r0, #0
 800727a:	f47f accf 	bne.w	8006c1c <_strtod_l+0x454>
 800727e:	a30c      	add	r3, pc, #48	@ (adr r3, 80072b0 <_strtod_l+0xae8>)
 8007280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007284:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007288:	f7f9 fc66 	bl	8000b58 <__aeabi_dcmpgt>
 800728c:	2800      	cmp	r0, #0
 800728e:	d093      	beq.n	80071b8 <_strtod_l+0x9f0>
 8007290:	e4c4      	b.n	8006c1c <_strtod_l+0x454>
 8007292:	bf00      	nop
 8007294:	f3af 8000 	nop.w
 8007298:	00000000 	.word	0x00000000
 800729c:	bff00000 	.word	0xbff00000
 80072a0:	00000000 	.word	0x00000000
 80072a4:	3ff00000 	.word	0x3ff00000
 80072a8:	94a03595 	.word	0x94a03595
 80072ac:	3fdfffff 	.word	0x3fdfffff
 80072b0:	35afe535 	.word	0x35afe535
 80072b4:	3fe00000 	.word	0x3fe00000
 80072b8:	000fffff 	.word	0x000fffff
 80072bc:	7ff00000 	.word	0x7ff00000
 80072c0:	7fefffff 	.word	0x7fefffff
 80072c4:	3ff00000 	.word	0x3ff00000
 80072c8:	3fe00000 	.word	0x3fe00000
 80072cc:	7fe00000 	.word	0x7fe00000
 80072d0:	7c9fffff 	.word	0x7c9fffff
 80072d4:	9b08      	ldr	r3, [sp, #32]
 80072d6:	b323      	cbz	r3, 8007322 <_strtod_l+0xb5a>
 80072d8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80072dc:	d821      	bhi.n	8007322 <_strtod_l+0xb5a>
 80072de:	a328      	add	r3, pc, #160	@ (adr r3, 8007380 <_strtod_l+0xbb8>)
 80072e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072e4:	4630      	mov	r0, r6
 80072e6:	4639      	mov	r1, r7
 80072e8:	f7f9 fc22 	bl	8000b30 <__aeabi_dcmple>
 80072ec:	b1a0      	cbz	r0, 8007318 <_strtod_l+0xb50>
 80072ee:	4639      	mov	r1, r7
 80072f0:	4630      	mov	r0, r6
 80072f2:	f7f9 fc79 	bl	8000be8 <__aeabi_d2uiz>
 80072f6:	2801      	cmp	r0, #1
 80072f8:	bf38      	it	cc
 80072fa:	2001      	movcc	r0, #1
 80072fc:	f7f9 f922 	bl	8000544 <__aeabi_ui2d>
 8007300:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007302:	4606      	mov	r6, r0
 8007304:	460f      	mov	r7, r1
 8007306:	b9fb      	cbnz	r3, 8007348 <_strtod_l+0xb80>
 8007308:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800730c:	9014      	str	r0, [sp, #80]	@ 0x50
 800730e:	9315      	str	r3, [sp, #84]	@ 0x54
 8007310:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007314:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007318:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800731a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800731e:	1b5b      	subs	r3, r3, r5
 8007320:	9311      	str	r3, [sp, #68]	@ 0x44
 8007322:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007326:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800732a:	f002 feb5 	bl	800a098 <__ulp>
 800732e:	4650      	mov	r0, sl
 8007330:	ec53 2b10 	vmov	r2, r3, d0
 8007334:	4659      	mov	r1, fp
 8007336:	f7f9 f97f 	bl	8000638 <__aeabi_dmul>
 800733a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800733e:	f7f8 ffc5 	bl	80002cc <__adddf3>
 8007342:	4682      	mov	sl, r0
 8007344:	468b      	mov	fp, r1
 8007346:	e770      	b.n	800722a <_strtod_l+0xa62>
 8007348:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800734c:	e7e0      	b.n	8007310 <_strtod_l+0xb48>
 800734e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007388 <_strtod_l+0xbc0>)
 8007350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007354:	f7f9 fbe2 	bl	8000b1c <__aeabi_dcmplt>
 8007358:	e798      	b.n	800728c <_strtod_l+0xac4>
 800735a:	2300      	movs	r3, #0
 800735c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800735e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007360:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007362:	6013      	str	r3, [r2, #0]
 8007364:	f7ff ba6d 	b.w	8006842 <_strtod_l+0x7a>
 8007368:	2a65      	cmp	r2, #101	@ 0x65
 800736a:	f43f ab66 	beq.w	8006a3a <_strtod_l+0x272>
 800736e:	2a45      	cmp	r2, #69	@ 0x45
 8007370:	f43f ab63 	beq.w	8006a3a <_strtod_l+0x272>
 8007374:	2301      	movs	r3, #1
 8007376:	f7ff bb9e 	b.w	8006ab6 <_strtod_l+0x2ee>
 800737a:	bf00      	nop
 800737c:	f3af 8000 	nop.w
 8007380:	ffc00000 	.word	0xffc00000
 8007384:	41dfffff 	.word	0x41dfffff
 8007388:	94a03595 	.word	0x94a03595
 800738c:	3fcfffff 	.word	0x3fcfffff

08007390 <_strtod_r>:
 8007390:	4b01      	ldr	r3, [pc, #4]	@ (8007398 <_strtod_r+0x8>)
 8007392:	f7ff ba19 	b.w	80067c8 <_strtod_l>
 8007396:	bf00      	nop
 8007398:	20000050 	.word	0x20000050

0800739c <strtod>:
 800739c:	460a      	mov	r2, r1
 800739e:	4601      	mov	r1, r0
 80073a0:	4802      	ldr	r0, [pc, #8]	@ (80073ac <strtod+0x10>)
 80073a2:	4b03      	ldr	r3, [pc, #12]	@ (80073b0 <strtod+0x14>)
 80073a4:	6800      	ldr	r0, [r0, #0]
 80073a6:	f7ff ba0f 	b.w	80067c8 <_strtod_l>
 80073aa:	bf00      	nop
 80073ac:	200001bc 	.word	0x200001bc
 80073b0:	20000050 	.word	0x20000050

080073b4 <__cvt>:
 80073b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b8:	ec57 6b10 	vmov	r6, r7, d0
 80073bc:	2f00      	cmp	r7, #0
 80073be:	460c      	mov	r4, r1
 80073c0:	4619      	mov	r1, r3
 80073c2:	463b      	mov	r3, r7
 80073c4:	bfbb      	ittet	lt
 80073c6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80073ca:	461f      	movlt	r7, r3
 80073cc:	2300      	movge	r3, #0
 80073ce:	232d      	movlt	r3, #45	@ 0x2d
 80073d0:	700b      	strb	r3, [r1, #0]
 80073d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80073d4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80073d8:	4691      	mov	r9, r2
 80073da:	f023 0820 	bic.w	r8, r3, #32
 80073de:	bfbc      	itt	lt
 80073e0:	4632      	movlt	r2, r6
 80073e2:	4616      	movlt	r6, r2
 80073e4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80073e8:	d005      	beq.n	80073f6 <__cvt+0x42>
 80073ea:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80073ee:	d100      	bne.n	80073f2 <__cvt+0x3e>
 80073f0:	3401      	adds	r4, #1
 80073f2:	2102      	movs	r1, #2
 80073f4:	e000      	b.n	80073f8 <__cvt+0x44>
 80073f6:	2103      	movs	r1, #3
 80073f8:	ab03      	add	r3, sp, #12
 80073fa:	9301      	str	r3, [sp, #4]
 80073fc:	ab02      	add	r3, sp, #8
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	ec47 6b10 	vmov	d0, r6, r7
 8007404:	4653      	mov	r3, sl
 8007406:	4622      	mov	r2, r4
 8007408:	f001 f8c2 	bl	8008590 <_dtoa_r>
 800740c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007410:	4605      	mov	r5, r0
 8007412:	d119      	bne.n	8007448 <__cvt+0x94>
 8007414:	f019 0f01 	tst.w	r9, #1
 8007418:	d00e      	beq.n	8007438 <__cvt+0x84>
 800741a:	eb00 0904 	add.w	r9, r0, r4
 800741e:	2200      	movs	r2, #0
 8007420:	2300      	movs	r3, #0
 8007422:	4630      	mov	r0, r6
 8007424:	4639      	mov	r1, r7
 8007426:	f7f9 fb6f 	bl	8000b08 <__aeabi_dcmpeq>
 800742a:	b108      	cbz	r0, 8007430 <__cvt+0x7c>
 800742c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007430:	2230      	movs	r2, #48	@ 0x30
 8007432:	9b03      	ldr	r3, [sp, #12]
 8007434:	454b      	cmp	r3, r9
 8007436:	d31e      	bcc.n	8007476 <__cvt+0xc2>
 8007438:	9b03      	ldr	r3, [sp, #12]
 800743a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800743c:	1b5b      	subs	r3, r3, r5
 800743e:	4628      	mov	r0, r5
 8007440:	6013      	str	r3, [r2, #0]
 8007442:	b004      	add	sp, #16
 8007444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007448:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800744c:	eb00 0904 	add.w	r9, r0, r4
 8007450:	d1e5      	bne.n	800741e <__cvt+0x6a>
 8007452:	7803      	ldrb	r3, [r0, #0]
 8007454:	2b30      	cmp	r3, #48	@ 0x30
 8007456:	d10a      	bne.n	800746e <__cvt+0xba>
 8007458:	2200      	movs	r2, #0
 800745a:	2300      	movs	r3, #0
 800745c:	4630      	mov	r0, r6
 800745e:	4639      	mov	r1, r7
 8007460:	f7f9 fb52 	bl	8000b08 <__aeabi_dcmpeq>
 8007464:	b918      	cbnz	r0, 800746e <__cvt+0xba>
 8007466:	f1c4 0401 	rsb	r4, r4, #1
 800746a:	f8ca 4000 	str.w	r4, [sl]
 800746e:	f8da 3000 	ldr.w	r3, [sl]
 8007472:	4499      	add	r9, r3
 8007474:	e7d3      	b.n	800741e <__cvt+0x6a>
 8007476:	1c59      	adds	r1, r3, #1
 8007478:	9103      	str	r1, [sp, #12]
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e7d9      	b.n	8007432 <__cvt+0x7e>

0800747e <__exponent>:
 800747e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007480:	2900      	cmp	r1, #0
 8007482:	bfba      	itte	lt
 8007484:	4249      	neglt	r1, r1
 8007486:	232d      	movlt	r3, #45	@ 0x2d
 8007488:	232b      	movge	r3, #43	@ 0x2b
 800748a:	2909      	cmp	r1, #9
 800748c:	7002      	strb	r2, [r0, #0]
 800748e:	7043      	strb	r3, [r0, #1]
 8007490:	dd29      	ble.n	80074e6 <__exponent+0x68>
 8007492:	f10d 0307 	add.w	r3, sp, #7
 8007496:	461d      	mov	r5, r3
 8007498:	270a      	movs	r7, #10
 800749a:	461a      	mov	r2, r3
 800749c:	fbb1 f6f7 	udiv	r6, r1, r7
 80074a0:	fb07 1416 	mls	r4, r7, r6, r1
 80074a4:	3430      	adds	r4, #48	@ 0x30
 80074a6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80074aa:	460c      	mov	r4, r1
 80074ac:	2c63      	cmp	r4, #99	@ 0x63
 80074ae:	f103 33ff 	add.w	r3, r3, #4294967295
 80074b2:	4631      	mov	r1, r6
 80074b4:	dcf1      	bgt.n	800749a <__exponent+0x1c>
 80074b6:	3130      	adds	r1, #48	@ 0x30
 80074b8:	1e94      	subs	r4, r2, #2
 80074ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80074be:	1c41      	adds	r1, r0, #1
 80074c0:	4623      	mov	r3, r4
 80074c2:	42ab      	cmp	r3, r5
 80074c4:	d30a      	bcc.n	80074dc <__exponent+0x5e>
 80074c6:	f10d 0309 	add.w	r3, sp, #9
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	42ac      	cmp	r4, r5
 80074ce:	bf88      	it	hi
 80074d0:	2300      	movhi	r3, #0
 80074d2:	3302      	adds	r3, #2
 80074d4:	4403      	add	r3, r0
 80074d6:	1a18      	subs	r0, r3, r0
 80074d8:	b003      	add	sp, #12
 80074da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80074dc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80074e0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80074e4:	e7ed      	b.n	80074c2 <__exponent+0x44>
 80074e6:	2330      	movs	r3, #48	@ 0x30
 80074e8:	3130      	adds	r1, #48	@ 0x30
 80074ea:	7083      	strb	r3, [r0, #2]
 80074ec:	70c1      	strb	r1, [r0, #3]
 80074ee:	1d03      	adds	r3, r0, #4
 80074f0:	e7f1      	b.n	80074d6 <__exponent+0x58>
	...

080074f4 <_printf_float>:
 80074f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074f8:	b08d      	sub	sp, #52	@ 0x34
 80074fa:	460c      	mov	r4, r1
 80074fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007500:	4616      	mov	r6, r2
 8007502:	461f      	mov	r7, r3
 8007504:	4605      	mov	r5, r0
 8007506:	f000 ff25 	bl	8008354 <_localeconv_r>
 800750a:	6803      	ldr	r3, [r0, #0]
 800750c:	9304      	str	r3, [sp, #16]
 800750e:	4618      	mov	r0, r3
 8007510:	f7f8 fece 	bl	80002b0 <strlen>
 8007514:	2300      	movs	r3, #0
 8007516:	930a      	str	r3, [sp, #40]	@ 0x28
 8007518:	f8d8 3000 	ldr.w	r3, [r8]
 800751c:	9005      	str	r0, [sp, #20]
 800751e:	3307      	adds	r3, #7
 8007520:	f023 0307 	bic.w	r3, r3, #7
 8007524:	f103 0208 	add.w	r2, r3, #8
 8007528:	f894 a018 	ldrb.w	sl, [r4, #24]
 800752c:	f8d4 b000 	ldr.w	fp, [r4]
 8007530:	f8c8 2000 	str.w	r2, [r8]
 8007534:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007538:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800753c:	9307      	str	r3, [sp, #28]
 800753e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007542:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007546:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800754a:	4b9c      	ldr	r3, [pc, #624]	@ (80077bc <_printf_float+0x2c8>)
 800754c:	f04f 32ff 	mov.w	r2, #4294967295
 8007550:	f7f9 fb0c 	bl	8000b6c <__aeabi_dcmpun>
 8007554:	bb70      	cbnz	r0, 80075b4 <_printf_float+0xc0>
 8007556:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800755a:	4b98      	ldr	r3, [pc, #608]	@ (80077bc <_printf_float+0x2c8>)
 800755c:	f04f 32ff 	mov.w	r2, #4294967295
 8007560:	f7f9 fae6 	bl	8000b30 <__aeabi_dcmple>
 8007564:	bb30      	cbnz	r0, 80075b4 <_printf_float+0xc0>
 8007566:	2200      	movs	r2, #0
 8007568:	2300      	movs	r3, #0
 800756a:	4640      	mov	r0, r8
 800756c:	4649      	mov	r1, r9
 800756e:	f7f9 fad5 	bl	8000b1c <__aeabi_dcmplt>
 8007572:	b110      	cbz	r0, 800757a <_printf_float+0x86>
 8007574:	232d      	movs	r3, #45	@ 0x2d
 8007576:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800757a:	4a91      	ldr	r2, [pc, #580]	@ (80077c0 <_printf_float+0x2cc>)
 800757c:	4b91      	ldr	r3, [pc, #580]	@ (80077c4 <_printf_float+0x2d0>)
 800757e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007582:	bf94      	ite	ls
 8007584:	4690      	movls	r8, r2
 8007586:	4698      	movhi	r8, r3
 8007588:	2303      	movs	r3, #3
 800758a:	6123      	str	r3, [r4, #16]
 800758c:	f02b 0304 	bic.w	r3, fp, #4
 8007590:	6023      	str	r3, [r4, #0]
 8007592:	f04f 0900 	mov.w	r9, #0
 8007596:	9700      	str	r7, [sp, #0]
 8007598:	4633      	mov	r3, r6
 800759a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f000 f9d2 	bl	8007948 <_printf_common>
 80075a4:	3001      	adds	r0, #1
 80075a6:	f040 808d 	bne.w	80076c4 <_printf_float+0x1d0>
 80075aa:	f04f 30ff 	mov.w	r0, #4294967295
 80075ae:	b00d      	add	sp, #52	@ 0x34
 80075b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075b4:	4642      	mov	r2, r8
 80075b6:	464b      	mov	r3, r9
 80075b8:	4640      	mov	r0, r8
 80075ba:	4649      	mov	r1, r9
 80075bc:	f7f9 fad6 	bl	8000b6c <__aeabi_dcmpun>
 80075c0:	b140      	cbz	r0, 80075d4 <_printf_float+0xe0>
 80075c2:	464b      	mov	r3, r9
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	bfbc      	itt	lt
 80075c8:	232d      	movlt	r3, #45	@ 0x2d
 80075ca:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80075ce:	4a7e      	ldr	r2, [pc, #504]	@ (80077c8 <_printf_float+0x2d4>)
 80075d0:	4b7e      	ldr	r3, [pc, #504]	@ (80077cc <_printf_float+0x2d8>)
 80075d2:	e7d4      	b.n	800757e <_printf_float+0x8a>
 80075d4:	6863      	ldr	r3, [r4, #4]
 80075d6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80075da:	9206      	str	r2, [sp, #24]
 80075dc:	1c5a      	adds	r2, r3, #1
 80075de:	d13b      	bne.n	8007658 <_printf_float+0x164>
 80075e0:	2306      	movs	r3, #6
 80075e2:	6063      	str	r3, [r4, #4]
 80075e4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80075e8:	2300      	movs	r3, #0
 80075ea:	6022      	str	r2, [r4, #0]
 80075ec:	9303      	str	r3, [sp, #12]
 80075ee:	ab0a      	add	r3, sp, #40	@ 0x28
 80075f0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80075f4:	ab09      	add	r3, sp, #36	@ 0x24
 80075f6:	9300      	str	r3, [sp, #0]
 80075f8:	6861      	ldr	r1, [r4, #4]
 80075fa:	ec49 8b10 	vmov	d0, r8, r9
 80075fe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007602:	4628      	mov	r0, r5
 8007604:	f7ff fed6 	bl	80073b4 <__cvt>
 8007608:	9b06      	ldr	r3, [sp, #24]
 800760a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800760c:	2b47      	cmp	r3, #71	@ 0x47
 800760e:	4680      	mov	r8, r0
 8007610:	d129      	bne.n	8007666 <_printf_float+0x172>
 8007612:	1cc8      	adds	r0, r1, #3
 8007614:	db02      	blt.n	800761c <_printf_float+0x128>
 8007616:	6863      	ldr	r3, [r4, #4]
 8007618:	4299      	cmp	r1, r3
 800761a:	dd41      	ble.n	80076a0 <_printf_float+0x1ac>
 800761c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007620:	fa5f fa8a 	uxtb.w	sl, sl
 8007624:	3901      	subs	r1, #1
 8007626:	4652      	mov	r2, sl
 8007628:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800762c:	9109      	str	r1, [sp, #36]	@ 0x24
 800762e:	f7ff ff26 	bl	800747e <__exponent>
 8007632:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007634:	1813      	adds	r3, r2, r0
 8007636:	2a01      	cmp	r2, #1
 8007638:	4681      	mov	r9, r0
 800763a:	6123      	str	r3, [r4, #16]
 800763c:	dc02      	bgt.n	8007644 <_printf_float+0x150>
 800763e:	6822      	ldr	r2, [r4, #0]
 8007640:	07d2      	lsls	r2, r2, #31
 8007642:	d501      	bpl.n	8007648 <_printf_float+0x154>
 8007644:	3301      	adds	r3, #1
 8007646:	6123      	str	r3, [r4, #16]
 8007648:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800764c:	2b00      	cmp	r3, #0
 800764e:	d0a2      	beq.n	8007596 <_printf_float+0xa2>
 8007650:	232d      	movs	r3, #45	@ 0x2d
 8007652:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007656:	e79e      	b.n	8007596 <_printf_float+0xa2>
 8007658:	9a06      	ldr	r2, [sp, #24]
 800765a:	2a47      	cmp	r2, #71	@ 0x47
 800765c:	d1c2      	bne.n	80075e4 <_printf_float+0xf0>
 800765e:	2b00      	cmp	r3, #0
 8007660:	d1c0      	bne.n	80075e4 <_printf_float+0xf0>
 8007662:	2301      	movs	r3, #1
 8007664:	e7bd      	b.n	80075e2 <_printf_float+0xee>
 8007666:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800766a:	d9db      	bls.n	8007624 <_printf_float+0x130>
 800766c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007670:	d118      	bne.n	80076a4 <_printf_float+0x1b0>
 8007672:	2900      	cmp	r1, #0
 8007674:	6863      	ldr	r3, [r4, #4]
 8007676:	dd0b      	ble.n	8007690 <_printf_float+0x19c>
 8007678:	6121      	str	r1, [r4, #16]
 800767a:	b913      	cbnz	r3, 8007682 <_printf_float+0x18e>
 800767c:	6822      	ldr	r2, [r4, #0]
 800767e:	07d0      	lsls	r0, r2, #31
 8007680:	d502      	bpl.n	8007688 <_printf_float+0x194>
 8007682:	3301      	adds	r3, #1
 8007684:	440b      	add	r3, r1
 8007686:	6123      	str	r3, [r4, #16]
 8007688:	65a1      	str	r1, [r4, #88]	@ 0x58
 800768a:	f04f 0900 	mov.w	r9, #0
 800768e:	e7db      	b.n	8007648 <_printf_float+0x154>
 8007690:	b913      	cbnz	r3, 8007698 <_printf_float+0x1a4>
 8007692:	6822      	ldr	r2, [r4, #0]
 8007694:	07d2      	lsls	r2, r2, #31
 8007696:	d501      	bpl.n	800769c <_printf_float+0x1a8>
 8007698:	3302      	adds	r3, #2
 800769a:	e7f4      	b.n	8007686 <_printf_float+0x192>
 800769c:	2301      	movs	r3, #1
 800769e:	e7f2      	b.n	8007686 <_printf_float+0x192>
 80076a0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80076a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076a6:	4299      	cmp	r1, r3
 80076a8:	db05      	blt.n	80076b6 <_printf_float+0x1c2>
 80076aa:	6823      	ldr	r3, [r4, #0]
 80076ac:	6121      	str	r1, [r4, #16]
 80076ae:	07d8      	lsls	r0, r3, #31
 80076b0:	d5ea      	bpl.n	8007688 <_printf_float+0x194>
 80076b2:	1c4b      	adds	r3, r1, #1
 80076b4:	e7e7      	b.n	8007686 <_printf_float+0x192>
 80076b6:	2900      	cmp	r1, #0
 80076b8:	bfd4      	ite	le
 80076ba:	f1c1 0202 	rsble	r2, r1, #2
 80076be:	2201      	movgt	r2, #1
 80076c0:	4413      	add	r3, r2
 80076c2:	e7e0      	b.n	8007686 <_printf_float+0x192>
 80076c4:	6823      	ldr	r3, [r4, #0]
 80076c6:	055a      	lsls	r2, r3, #21
 80076c8:	d407      	bmi.n	80076da <_printf_float+0x1e6>
 80076ca:	6923      	ldr	r3, [r4, #16]
 80076cc:	4642      	mov	r2, r8
 80076ce:	4631      	mov	r1, r6
 80076d0:	4628      	mov	r0, r5
 80076d2:	47b8      	blx	r7
 80076d4:	3001      	adds	r0, #1
 80076d6:	d12b      	bne.n	8007730 <_printf_float+0x23c>
 80076d8:	e767      	b.n	80075aa <_printf_float+0xb6>
 80076da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80076de:	f240 80dd 	bls.w	800789c <_printf_float+0x3a8>
 80076e2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076e6:	2200      	movs	r2, #0
 80076e8:	2300      	movs	r3, #0
 80076ea:	f7f9 fa0d 	bl	8000b08 <__aeabi_dcmpeq>
 80076ee:	2800      	cmp	r0, #0
 80076f0:	d033      	beq.n	800775a <_printf_float+0x266>
 80076f2:	4a37      	ldr	r2, [pc, #220]	@ (80077d0 <_printf_float+0x2dc>)
 80076f4:	2301      	movs	r3, #1
 80076f6:	4631      	mov	r1, r6
 80076f8:	4628      	mov	r0, r5
 80076fa:	47b8      	blx	r7
 80076fc:	3001      	adds	r0, #1
 80076fe:	f43f af54 	beq.w	80075aa <_printf_float+0xb6>
 8007702:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007706:	4543      	cmp	r3, r8
 8007708:	db02      	blt.n	8007710 <_printf_float+0x21c>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	07d8      	lsls	r0, r3, #31
 800770e:	d50f      	bpl.n	8007730 <_printf_float+0x23c>
 8007710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007714:	4631      	mov	r1, r6
 8007716:	4628      	mov	r0, r5
 8007718:	47b8      	blx	r7
 800771a:	3001      	adds	r0, #1
 800771c:	f43f af45 	beq.w	80075aa <_printf_float+0xb6>
 8007720:	f04f 0900 	mov.w	r9, #0
 8007724:	f108 38ff 	add.w	r8, r8, #4294967295
 8007728:	f104 0a1a 	add.w	sl, r4, #26
 800772c:	45c8      	cmp	r8, r9
 800772e:	dc09      	bgt.n	8007744 <_printf_float+0x250>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	079b      	lsls	r3, r3, #30
 8007734:	f100 8103 	bmi.w	800793e <_printf_float+0x44a>
 8007738:	68e0      	ldr	r0, [r4, #12]
 800773a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800773c:	4298      	cmp	r0, r3
 800773e:	bfb8      	it	lt
 8007740:	4618      	movlt	r0, r3
 8007742:	e734      	b.n	80075ae <_printf_float+0xba>
 8007744:	2301      	movs	r3, #1
 8007746:	4652      	mov	r2, sl
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af2b 	beq.w	80075aa <_printf_float+0xb6>
 8007754:	f109 0901 	add.w	r9, r9, #1
 8007758:	e7e8      	b.n	800772c <_printf_float+0x238>
 800775a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800775c:	2b00      	cmp	r3, #0
 800775e:	dc39      	bgt.n	80077d4 <_printf_float+0x2e0>
 8007760:	4a1b      	ldr	r2, [pc, #108]	@ (80077d0 <_printf_float+0x2dc>)
 8007762:	2301      	movs	r3, #1
 8007764:	4631      	mov	r1, r6
 8007766:	4628      	mov	r0, r5
 8007768:	47b8      	blx	r7
 800776a:	3001      	adds	r0, #1
 800776c:	f43f af1d 	beq.w	80075aa <_printf_float+0xb6>
 8007770:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007774:	ea59 0303 	orrs.w	r3, r9, r3
 8007778:	d102      	bne.n	8007780 <_printf_float+0x28c>
 800777a:	6823      	ldr	r3, [r4, #0]
 800777c:	07d9      	lsls	r1, r3, #31
 800777e:	d5d7      	bpl.n	8007730 <_printf_float+0x23c>
 8007780:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007784:	4631      	mov	r1, r6
 8007786:	4628      	mov	r0, r5
 8007788:	47b8      	blx	r7
 800778a:	3001      	adds	r0, #1
 800778c:	f43f af0d 	beq.w	80075aa <_printf_float+0xb6>
 8007790:	f04f 0a00 	mov.w	sl, #0
 8007794:	f104 0b1a 	add.w	fp, r4, #26
 8007798:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800779a:	425b      	negs	r3, r3
 800779c:	4553      	cmp	r3, sl
 800779e:	dc01      	bgt.n	80077a4 <_printf_float+0x2b0>
 80077a0:	464b      	mov	r3, r9
 80077a2:	e793      	b.n	80076cc <_printf_float+0x1d8>
 80077a4:	2301      	movs	r3, #1
 80077a6:	465a      	mov	r2, fp
 80077a8:	4631      	mov	r1, r6
 80077aa:	4628      	mov	r0, r5
 80077ac:	47b8      	blx	r7
 80077ae:	3001      	adds	r0, #1
 80077b0:	f43f aefb 	beq.w	80075aa <_printf_float+0xb6>
 80077b4:	f10a 0a01 	add.w	sl, sl, #1
 80077b8:	e7ee      	b.n	8007798 <_printf_float+0x2a4>
 80077ba:	bf00      	nop
 80077bc:	7fefffff 	.word	0x7fefffff
 80077c0:	0800c290 	.word	0x0800c290
 80077c4:	0800c294 	.word	0x0800c294
 80077c8:	0800c298 	.word	0x0800c298
 80077cc:	0800c29c 	.word	0x0800c29c
 80077d0:	0800c2a0 	.word	0x0800c2a0
 80077d4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077d6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80077da:	4553      	cmp	r3, sl
 80077dc:	bfa8      	it	ge
 80077de:	4653      	movge	r3, sl
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	4699      	mov	r9, r3
 80077e4:	dc36      	bgt.n	8007854 <_printf_float+0x360>
 80077e6:	f04f 0b00 	mov.w	fp, #0
 80077ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80077ee:	f104 021a 	add.w	r2, r4, #26
 80077f2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80077f4:	9306      	str	r3, [sp, #24]
 80077f6:	eba3 0309 	sub.w	r3, r3, r9
 80077fa:	455b      	cmp	r3, fp
 80077fc:	dc31      	bgt.n	8007862 <_printf_float+0x36e>
 80077fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007800:	459a      	cmp	sl, r3
 8007802:	dc3a      	bgt.n	800787a <_printf_float+0x386>
 8007804:	6823      	ldr	r3, [r4, #0]
 8007806:	07da      	lsls	r2, r3, #31
 8007808:	d437      	bmi.n	800787a <_printf_float+0x386>
 800780a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800780c:	ebaa 0903 	sub.w	r9, sl, r3
 8007810:	9b06      	ldr	r3, [sp, #24]
 8007812:	ebaa 0303 	sub.w	r3, sl, r3
 8007816:	4599      	cmp	r9, r3
 8007818:	bfa8      	it	ge
 800781a:	4699      	movge	r9, r3
 800781c:	f1b9 0f00 	cmp.w	r9, #0
 8007820:	dc33      	bgt.n	800788a <_printf_float+0x396>
 8007822:	f04f 0800 	mov.w	r8, #0
 8007826:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800782a:	f104 0b1a 	add.w	fp, r4, #26
 800782e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007830:	ebaa 0303 	sub.w	r3, sl, r3
 8007834:	eba3 0309 	sub.w	r3, r3, r9
 8007838:	4543      	cmp	r3, r8
 800783a:	f77f af79 	ble.w	8007730 <_printf_float+0x23c>
 800783e:	2301      	movs	r3, #1
 8007840:	465a      	mov	r2, fp
 8007842:	4631      	mov	r1, r6
 8007844:	4628      	mov	r0, r5
 8007846:	47b8      	blx	r7
 8007848:	3001      	adds	r0, #1
 800784a:	f43f aeae 	beq.w	80075aa <_printf_float+0xb6>
 800784e:	f108 0801 	add.w	r8, r8, #1
 8007852:	e7ec      	b.n	800782e <_printf_float+0x33a>
 8007854:	4642      	mov	r2, r8
 8007856:	4631      	mov	r1, r6
 8007858:	4628      	mov	r0, r5
 800785a:	47b8      	blx	r7
 800785c:	3001      	adds	r0, #1
 800785e:	d1c2      	bne.n	80077e6 <_printf_float+0x2f2>
 8007860:	e6a3      	b.n	80075aa <_printf_float+0xb6>
 8007862:	2301      	movs	r3, #1
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	9206      	str	r2, [sp, #24]
 800786a:	47b8      	blx	r7
 800786c:	3001      	adds	r0, #1
 800786e:	f43f ae9c 	beq.w	80075aa <_printf_float+0xb6>
 8007872:	9a06      	ldr	r2, [sp, #24]
 8007874:	f10b 0b01 	add.w	fp, fp, #1
 8007878:	e7bb      	b.n	80077f2 <_printf_float+0x2fe>
 800787a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800787e:	4631      	mov	r1, r6
 8007880:	4628      	mov	r0, r5
 8007882:	47b8      	blx	r7
 8007884:	3001      	adds	r0, #1
 8007886:	d1c0      	bne.n	800780a <_printf_float+0x316>
 8007888:	e68f      	b.n	80075aa <_printf_float+0xb6>
 800788a:	9a06      	ldr	r2, [sp, #24]
 800788c:	464b      	mov	r3, r9
 800788e:	4442      	add	r2, r8
 8007890:	4631      	mov	r1, r6
 8007892:	4628      	mov	r0, r5
 8007894:	47b8      	blx	r7
 8007896:	3001      	adds	r0, #1
 8007898:	d1c3      	bne.n	8007822 <_printf_float+0x32e>
 800789a:	e686      	b.n	80075aa <_printf_float+0xb6>
 800789c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80078a0:	f1ba 0f01 	cmp.w	sl, #1
 80078a4:	dc01      	bgt.n	80078aa <_printf_float+0x3b6>
 80078a6:	07db      	lsls	r3, r3, #31
 80078a8:	d536      	bpl.n	8007918 <_printf_float+0x424>
 80078aa:	2301      	movs	r3, #1
 80078ac:	4642      	mov	r2, r8
 80078ae:	4631      	mov	r1, r6
 80078b0:	4628      	mov	r0, r5
 80078b2:	47b8      	blx	r7
 80078b4:	3001      	adds	r0, #1
 80078b6:	f43f ae78 	beq.w	80075aa <_printf_float+0xb6>
 80078ba:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078be:	4631      	mov	r1, r6
 80078c0:	4628      	mov	r0, r5
 80078c2:	47b8      	blx	r7
 80078c4:	3001      	adds	r0, #1
 80078c6:	f43f ae70 	beq.w	80075aa <_printf_float+0xb6>
 80078ca:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80078ce:	2200      	movs	r2, #0
 80078d0:	2300      	movs	r3, #0
 80078d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078d6:	f7f9 f917 	bl	8000b08 <__aeabi_dcmpeq>
 80078da:	b9c0      	cbnz	r0, 800790e <_printf_float+0x41a>
 80078dc:	4653      	mov	r3, sl
 80078de:	f108 0201 	add.w	r2, r8, #1
 80078e2:	4631      	mov	r1, r6
 80078e4:	4628      	mov	r0, r5
 80078e6:	47b8      	blx	r7
 80078e8:	3001      	adds	r0, #1
 80078ea:	d10c      	bne.n	8007906 <_printf_float+0x412>
 80078ec:	e65d      	b.n	80075aa <_printf_float+0xb6>
 80078ee:	2301      	movs	r3, #1
 80078f0:	465a      	mov	r2, fp
 80078f2:	4631      	mov	r1, r6
 80078f4:	4628      	mov	r0, r5
 80078f6:	47b8      	blx	r7
 80078f8:	3001      	adds	r0, #1
 80078fa:	f43f ae56 	beq.w	80075aa <_printf_float+0xb6>
 80078fe:	f108 0801 	add.w	r8, r8, #1
 8007902:	45d0      	cmp	r8, sl
 8007904:	dbf3      	blt.n	80078ee <_printf_float+0x3fa>
 8007906:	464b      	mov	r3, r9
 8007908:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800790c:	e6df      	b.n	80076ce <_printf_float+0x1da>
 800790e:	f04f 0800 	mov.w	r8, #0
 8007912:	f104 0b1a 	add.w	fp, r4, #26
 8007916:	e7f4      	b.n	8007902 <_printf_float+0x40e>
 8007918:	2301      	movs	r3, #1
 800791a:	4642      	mov	r2, r8
 800791c:	e7e1      	b.n	80078e2 <_printf_float+0x3ee>
 800791e:	2301      	movs	r3, #1
 8007920:	464a      	mov	r2, r9
 8007922:	4631      	mov	r1, r6
 8007924:	4628      	mov	r0, r5
 8007926:	47b8      	blx	r7
 8007928:	3001      	adds	r0, #1
 800792a:	f43f ae3e 	beq.w	80075aa <_printf_float+0xb6>
 800792e:	f108 0801 	add.w	r8, r8, #1
 8007932:	68e3      	ldr	r3, [r4, #12]
 8007934:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007936:	1a5b      	subs	r3, r3, r1
 8007938:	4543      	cmp	r3, r8
 800793a:	dcf0      	bgt.n	800791e <_printf_float+0x42a>
 800793c:	e6fc      	b.n	8007738 <_printf_float+0x244>
 800793e:	f04f 0800 	mov.w	r8, #0
 8007942:	f104 0919 	add.w	r9, r4, #25
 8007946:	e7f4      	b.n	8007932 <_printf_float+0x43e>

08007948 <_printf_common>:
 8007948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800794c:	4616      	mov	r6, r2
 800794e:	4698      	mov	r8, r3
 8007950:	688a      	ldr	r2, [r1, #8]
 8007952:	690b      	ldr	r3, [r1, #16]
 8007954:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007958:	4293      	cmp	r3, r2
 800795a:	bfb8      	it	lt
 800795c:	4613      	movlt	r3, r2
 800795e:	6033      	str	r3, [r6, #0]
 8007960:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007964:	4607      	mov	r7, r0
 8007966:	460c      	mov	r4, r1
 8007968:	b10a      	cbz	r2, 800796e <_printf_common+0x26>
 800796a:	3301      	adds	r3, #1
 800796c:	6033      	str	r3, [r6, #0]
 800796e:	6823      	ldr	r3, [r4, #0]
 8007970:	0699      	lsls	r1, r3, #26
 8007972:	bf42      	ittt	mi
 8007974:	6833      	ldrmi	r3, [r6, #0]
 8007976:	3302      	addmi	r3, #2
 8007978:	6033      	strmi	r3, [r6, #0]
 800797a:	6825      	ldr	r5, [r4, #0]
 800797c:	f015 0506 	ands.w	r5, r5, #6
 8007980:	d106      	bne.n	8007990 <_printf_common+0x48>
 8007982:	f104 0a19 	add.w	sl, r4, #25
 8007986:	68e3      	ldr	r3, [r4, #12]
 8007988:	6832      	ldr	r2, [r6, #0]
 800798a:	1a9b      	subs	r3, r3, r2
 800798c:	42ab      	cmp	r3, r5
 800798e:	dc26      	bgt.n	80079de <_printf_common+0x96>
 8007990:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007994:	6822      	ldr	r2, [r4, #0]
 8007996:	3b00      	subs	r3, #0
 8007998:	bf18      	it	ne
 800799a:	2301      	movne	r3, #1
 800799c:	0692      	lsls	r2, r2, #26
 800799e:	d42b      	bmi.n	80079f8 <_printf_common+0xb0>
 80079a0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80079a4:	4641      	mov	r1, r8
 80079a6:	4638      	mov	r0, r7
 80079a8:	47c8      	blx	r9
 80079aa:	3001      	adds	r0, #1
 80079ac:	d01e      	beq.n	80079ec <_printf_common+0xa4>
 80079ae:	6823      	ldr	r3, [r4, #0]
 80079b0:	6922      	ldr	r2, [r4, #16]
 80079b2:	f003 0306 	and.w	r3, r3, #6
 80079b6:	2b04      	cmp	r3, #4
 80079b8:	bf02      	ittt	eq
 80079ba:	68e5      	ldreq	r5, [r4, #12]
 80079bc:	6833      	ldreq	r3, [r6, #0]
 80079be:	1aed      	subeq	r5, r5, r3
 80079c0:	68a3      	ldr	r3, [r4, #8]
 80079c2:	bf0c      	ite	eq
 80079c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80079c8:	2500      	movne	r5, #0
 80079ca:	4293      	cmp	r3, r2
 80079cc:	bfc4      	itt	gt
 80079ce:	1a9b      	subgt	r3, r3, r2
 80079d0:	18ed      	addgt	r5, r5, r3
 80079d2:	2600      	movs	r6, #0
 80079d4:	341a      	adds	r4, #26
 80079d6:	42b5      	cmp	r5, r6
 80079d8:	d11a      	bne.n	8007a10 <_printf_common+0xc8>
 80079da:	2000      	movs	r0, #0
 80079dc:	e008      	b.n	80079f0 <_printf_common+0xa8>
 80079de:	2301      	movs	r3, #1
 80079e0:	4652      	mov	r2, sl
 80079e2:	4641      	mov	r1, r8
 80079e4:	4638      	mov	r0, r7
 80079e6:	47c8      	blx	r9
 80079e8:	3001      	adds	r0, #1
 80079ea:	d103      	bne.n	80079f4 <_printf_common+0xac>
 80079ec:	f04f 30ff 	mov.w	r0, #4294967295
 80079f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079f4:	3501      	adds	r5, #1
 80079f6:	e7c6      	b.n	8007986 <_printf_common+0x3e>
 80079f8:	18e1      	adds	r1, r4, r3
 80079fa:	1c5a      	adds	r2, r3, #1
 80079fc:	2030      	movs	r0, #48	@ 0x30
 80079fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007a02:	4422      	add	r2, r4
 8007a04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007a08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007a0c:	3302      	adds	r3, #2
 8007a0e:	e7c7      	b.n	80079a0 <_printf_common+0x58>
 8007a10:	2301      	movs	r3, #1
 8007a12:	4622      	mov	r2, r4
 8007a14:	4641      	mov	r1, r8
 8007a16:	4638      	mov	r0, r7
 8007a18:	47c8      	blx	r9
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	d0e6      	beq.n	80079ec <_printf_common+0xa4>
 8007a1e:	3601      	adds	r6, #1
 8007a20:	e7d9      	b.n	80079d6 <_printf_common+0x8e>
	...

08007a24 <_printf_i>:
 8007a24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a28:	7e0f      	ldrb	r7, [r1, #24]
 8007a2a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007a2c:	2f78      	cmp	r7, #120	@ 0x78
 8007a2e:	4691      	mov	r9, r2
 8007a30:	4680      	mov	r8, r0
 8007a32:	460c      	mov	r4, r1
 8007a34:	469a      	mov	sl, r3
 8007a36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007a3a:	d807      	bhi.n	8007a4c <_printf_i+0x28>
 8007a3c:	2f62      	cmp	r7, #98	@ 0x62
 8007a3e:	d80a      	bhi.n	8007a56 <_printf_i+0x32>
 8007a40:	2f00      	cmp	r7, #0
 8007a42:	f000 80d2 	beq.w	8007bea <_printf_i+0x1c6>
 8007a46:	2f58      	cmp	r7, #88	@ 0x58
 8007a48:	f000 80b9 	beq.w	8007bbe <_printf_i+0x19a>
 8007a4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007a50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007a54:	e03a      	b.n	8007acc <_printf_i+0xa8>
 8007a56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007a5a:	2b15      	cmp	r3, #21
 8007a5c:	d8f6      	bhi.n	8007a4c <_printf_i+0x28>
 8007a5e:	a101      	add	r1, pc, #4	@ (adr r1, 8007a64 <_printf_i+0x40>)
 8007a60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007a64:	08007abd 	.word	0x08007abd
 8007a68:	08007ad1 	.word	0x08007ad1
 8007a6c:	08007a4d 	.word	0x08007a4d
 8007a70:	08007a4d 	.word	0x08007a4d
 8007a74:	08007a4d 	.word	0x08007a4d
 8007a78:	08007a4d 	.word	0x08007a4d
 8007a7c:	08007ad1 	.word	0x08007ad1
 8007a80:	08007a4d 	.word	0x08007a4d
 8007a84:	08007a4d 	.word	0x08007a4d
 8007a88:	08007a4d 	.word	0x08007a4d
 8007a8c:	08007a4d 	.word	0x08007a4d
 8007a90:	08007bd1 	.word	0x08007bd1
 8007a94:	08007afb 	.word	0x08007afb
 8007a98:	08007b8b 	.word	0x08007b8b
 8007a9c:	08007a4d 	.word	0x08007a4d
 8007aa0:	08007a4d 	.word	0x08007a4d
 8007aa4:	08007bf3 	.word	0x08007bf3
 8007aa8:	08007a4d 	.word	0x08007a4d
 8007aac:	08007afb 	.word	0x08007afb
 8007ab0:	08007a4d 	.word	0x08007a4d
 8007ab4:	08007a4d 	.word	0x08007a4d
 8007ab8:	08007b93 	.word	0x08007b93
 8007abc:	6833      	ldr	r3, [r6, #0]
 8007abe:	1d1a      	adds	r2, r3, #4
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	6032      	str	r2, [r6, #0]
 8007ac4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ac8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007acc:	2301      	movs	r3, #1
 8007ace:	e09d      	b.n	8007c0c <_printf_i+0x1e8>
 8007ad0:	6833      	ldr	r3, [r6, #0]
 8007ad2:	6820      	ldr	r0, [r4, #0]
 8007ad4:	1d19      	adds	r1, r3, #4
 8007ad6:	6031      	str	r1, [r6, #0]
 8007ad8:	0606      	lsls	r6, r0, #24
 8007ada:	d501      	bpl.n	8007ae0 <_printf_i+0xbc>
 8007adc:	681d      	ldr	r5, [r3, #0]
 8007ade:	e003      	b.n	8007ae8 <_printf_i+0xc4>
 8007ae0:	0645      	lsls	r5, r0, #25
 8007ae2:	d5fb      	bpl.n	8007adc <_printf_i+0xb8>
 8007ae4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007ae8:	2d00      	cmp	r5, #0
 8007aea:	da03      	bge.n	8007af4 <_printf_i+0xd0>
 8007aec:	232d      	movs	r3, #45	@ 0x2d
 8007aee:	426d      	negs	r5, r5
 8007af0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007af4:	4859      	ldr	r0, [pc, #356]	@ (8007c5c <_printf_i+0x238>)
 8007af6:	230a      	movs	r3, #10
 8007af8:	e011      	b.n	8007b1e <_printf_i+0xfa>
 8007afa:	6821      	ldr	r1, [r4, #0]
 8007afc:	6833      	ldr	r3, [r6, #0]
 8007afe:	0608      	lsls	r0, r1, #24
 8007b00:	f853 5b04 	ldr.w	r5, [r3], #4
 8007b04:	d402      	bmi.n	8007b0c <_printf_i+0xe8>
 8007b06:	0649      	lsls	r1, r1, #25
 8007b08:	bf48      	it	mi
 8007b0a:	b2ad      	uxthmi	r5, r5
 8007b0c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007b0e:	4853      	ldr	r0, [pc, #332]	@ (8007c5c <_printf_i+0x238>)
 8007b10:	6033      	str	r3, [r6, #0]
 8007b12:	bf14      	ite	ne
 8007b14:	230a      	movne	r3, #10
 8007b16:	2308      	moveq	r3, #8
 8007b18:	2100      	movs	r1, #0
 8007b1a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007b1e:	6866      	ldr	r6, [r4, #4]
 8007b20:	60a6      	str	r6, [r4, #8]
 8007b22:	2e00      	cmp	r6, #0
 8007b24:	bfa2      	ittt	ge
 8007b26:	6821      	ldrge	r1, [r4, #0]
 8007b28:	f021 0104 	bicge.w	r1, r1, #4
 8007b2c:	6021      	strge	r1, [r4, #0]
 8007b2e:	b90d      	cbnz	r5, 8007b34 <_printf_i+0x110>
 8007b30:	2e00      	cmp	r6, #0
 8007b32:	d04b      	beq.n	8007bcc <_printf_i+0x1a8>
 8007b34:	4616      	mov	r6, r2
 8007b36:	fbb5 f1f3 	udiv	r1, r5, r3
 8007b3a:	fb03 5711 	mls	r7, r3, r1, r5
 8007b3e:	5dc7      	ldrb	r7, [r0, r7]
 8007b40:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007b44:	462f      	mov	r7, r5
 8007b46:	42bb      	cmp	r3, r7
 8007b48:	460d      	mov	r5, r1
 8007b4a:	d9f4      	bls.n	8007b36 <_printf_i+0x112>
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d10b      	bne.n	8007b68 <_printf_i+0x144>
 8007b50:	6823      	ldr	r3, [r4, #0]
 8007b52:	07df      	lsls	r7, r3, #31
 8007b54:	d508      	bpl.n	8007b68 <_printf_i+0x144>
 8007b56:	6923      	ldr	r3, [r4, #16]
 8007b58:	6861      	ldr	r1, [r4, #4]
 8007b5a:	4299      	cmp	r1, r3
 8007b5c:	bfde      	ittt	le
 8007b5e:	2330      	movle	r3, #48	@ 0x30
 8007b60:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007b64:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007b68:	1b92      	subs	r2, r2, r6
 8007b6a:	6122      	str	r2, [r4, #16]
 8007b6c:	f8cd a000 	str.w	sl, [sp]
 8007b70:	464b      	mov	r3, r9
 8007b72:	aa03      	add	r2, sp, #12
 8007b74:	4621      	mov	r1, r4
 8007b76:	4640      	mov	r0, r8
 8007b78:	f7ff fee6 	bl	8007948 <_printf_common>
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d14a      	bne.n	8007c16 <_printf_i+0x1f2>
 8007b80:	f04f 30ff 	mov.w	r0, #4294967295
 8007b84:	b004      	add	sp, #16
 8007b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b8a:	6823      	ldr	r3, [r4, #0]
 8007b8c:	f043 0320 	orr.w	r3, r3, #32
 8007b90:	6023      	str	r3, [r4, #0]
 8007b92:	4833      	ldr	r0, [pc, #204]	@ (8007c60 <_printf_i+0x23c>)
 8007b94:	2778      	movs	r7, #120	@ 0x78
 8007b96:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007b9a:	6823      	ldr	r3, [r4, #0]
 8007b9c:	6831      	ldr	r1, [r6, #0]
 8007b9e:	061f      	lsls	r7, r3, #24
 8007ba0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ba4:	d402      	bmi.n	8007bac <_printf_i+0x188>
 8007ba6:	065f      	lsls	r7, r3, #25
 8007ba8:	bf48      	it	mi
 8007baa:	b2ad      	uxthmi	r5, r5
 8007bac:	6031      	str	r1, [r6, #0]
 8007bae:	07d9      	lsls	r1, r3, #31
 8007bb0:	bf44      	itt	mi
 8007bb2:	f043 0320 	orrmi.w	r3, r3, #32
 8007bb6:	6023      	strmi	r3, [r4, #0]
 8007bb8:	b11d      	cbz	r5, 8007bc2 <_printf_i+0x19e>
 8007bba:	2310      	movs	r3, #16
 8007bbc:	e7ac      	b.n	8007b18 <_printf_i+0xf4>
 8007bbe:	4827      	ldr	r0, [pc, #156]	@ (8007c5c <_printf_i+0x238>)
 8007bc0:	e7e9      	b.n	8007b96 <_printf_i+0x172>
 8007bc2:	6823      	ldr	r3, [r4, #0]
 8007bc4:	f023 0320 	bic.w	r3, r3, #32
 8007bc8:	6023      	str	r3, [r4, #0]
 8007bca:	e7f6      	b.n	8007bba <_printf_i+0x196>
 8007bcc:	4616      	mov	r6, r2
 8007bce:	e7bd      	b.n	8007b4c <_printf_i+0x128>
 8007bd0:	6833      	ldr	r3, [r6, #0]
 8007bd2:	6825      	ldr	r5, [r4, #0]
 8007bd4:	6961      	ldr	r1, [r4, #20]
 8007bd6:	1d18      	adds	r0, r3, #4
 8007bd8:	6030      	str	r0, [r6, #0]
 8007bda:	062e      	lsls	r6, r5, #24
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	d501      	bpl.n	8007be4 <_printf_i+0x1c0>
 8007be0:	6019      	str	r1, [r3, #0]
 8007be2:	e002      	b.n	8007bea <_printf_i+0x1c6>
 8007be4:	0668      	lsls	r0, r5, #25
 8007be6:	d5fb      	bpl.n	8007be0 <_printf_i+0x1bc>
 8007be8:	8019      	strh	r1, [r3, #0]
 8007bea:	2300      	movs	r3, #0
 8007bec:	6123      	str	r3, [r4, #16]
 8007bee:	4616      	mov	r6, r2
 8007bf0:	e7bc      	b.n	8007b6c <_printf_i+0x148>
 8007bf2:	6833      	ldr	r3, [r6, #0]
 8007bf4:	1d1a      	adds	r2, r3, #4
 8007bf6:	6032      	str	r2, [r6, #0]
 8007bf8:	681e      	ldr	r6, [r3, #0]
 8007bfa:	6862      	ldr	r2, [r4, #4]
 8007bfc:	2100      	movs	r1, #0
 8007bfe:	4630      	mov	r0, r6
 8007c00:	f7f8 fb06 	bl	8000210 <memchr>
 8007c04:	b108      	cbz	r0, 8007c0a <_printf_i+0x1e6>
 8007c06:	1b80      	subs	r0, r0, r6
 8007c08:	6060      	str	r0, [r4, #4]
 8007c0a:	6863      	ldr	r3, [r4, #4]
 8007c0c:	6123      	str	r3, [r4, #16]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007c14:	e7aa      	b.n	8007b6c <_printf_i+0x148>
 8007c16:	6923      	ldr	r3, [r4, #16]
 8007c18:	4632      	mov	r2, r6
 8007c1a:	4649      	mov	r1, r9
 8007c1c:	4640      	mov	r0, r8
 8007c1e:	47d0      	blx	sl
 8007c20:	3001      	adds	r0, #1
 8007c22:	d0ad      	beq.n	8007b80 <_printf_i+0x15c>
 8007c24:	6823      	ldr	r3, [r4, #0]
 8007c26:	079b      	lsls	r3, r3, #30
 8007c28:	d413      	bmi.n	8007c52 <_printf_i+0x22e>
 8007c2a:	68e0      	ldr	r0, [r4, #12]
 8007c2c:	9b03      	ldr	r3, [sp, #12]
 8007c2e:	4298      	cmp	r0, r3
 8007c30:	bfb8      	it	lt
 8007c32:	4618      	movlt	r0, r3
 8007c34:	e7a6      	b.n	8007b84 <_printf_i+0x160>
 8007c36:	2301      	movs	r3, #1
 8007c38:	4632      	mov	r2, r6
 8007c3a:	4649      	mov	r1, r9
 8007c3c:	4640      	mov	r0, r8
 8007c3e:	47d0      	blx	sl
 8007c40:	3001      	adds	r0, #1
 8007c42:	d09d      	beq.n	8007b80 <_printf_i+0x15c>
 8007c44:	3501      	adds	r5, #1
 8007c46:	68e3      	ldr	r3, [r4, #12]
 8007c48:	9903      	ldr	r1, [sp, #12]
 8007c4a:	1a5b      	subs	r3, r3, r1
 8007c4c:	42ab      	cmp	r3, r5
 8007c4e:	dcf2      	bgt.n	8007c36 <_printf_i+0x212>
 8007c50:	e7eb      	b.n	8007c2a <_printf_i+0x206>
 8007c52:	2500      	movs	r5, #0
 8007c54:	f104 0619 	add.w	r6, r4, #25
 8007c58:	e7f5      	b.n	8007c46 <_printf_i+0x222>
 8007c5a:	bf00      	nop
 8007c5c:	0800c2a2 	.word	0x0800c2a2
 8007c60:	0800c2b3 	.word	0x0800c2b3

08007c64 <_scanf_float>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	b087      	sub	sp, #28
 8007c6a:	4617      	mov	r7, r2
 8007c6c:	9303      	str	r3, [sp, #12]
 8007c6e:	688b      	ldr	r3, [r1, #8]
 8007c70:	1e5a      	subs	r2, r3, #1
 8007c72:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007c76:	bf81      	itttt	hi
 8007c78:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007c7c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007c80:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007c84:	608b      	strhi	r3, [r1, #8]
 8007c86:	680b      	ldr	r3, [r1, #0]
 8007c88:	460a      	mov	r2, r1
 8007c8a:	f04f 0500 	mov.w	r5, #0
 8007c8e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007c92:	f842 3b1c 	str.w	r3, [r2], #28
 8007c96:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007c9a:	4680      	mov	r8, r0
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	bf98      	it	ls
 8007ca0:	f04f 0b00 	movls.w	fp, #0
 8007ca4:	9201      	str	r2, [sp, #4]
 8007ca6:	4616      	mov	r6, r2
 8007ca8:	46aa      	mov	sl, r5
 8007caa:	46a9      	mov	r9, r5
 8007cac:	9502      	str	r5, [sp, #8]
 8007cae:	68a2      	ldr	r2, [r4, #8]
 8007cb0:	b152      	cbz	r2, 8007cc8 <_scanf_float+0x64>
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	781b      	ldrb	r3, [r3, #0]
 8007cb6:	2b4e      	cmp	r3, #78	@ 0x4e
 8007cb8:	d864      	bhi.n	8007d84 <_scanf_float+0x120>
 8007cba:	2b40      	cmp	r3, #64	@ 0x40
 8007cbc:	d83c      	bhi.n	8007d38 <_scanf_float+0xd4>
 8007cbe:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007cc2:	b2c8      	uxtb	r0, r1
 8007cc4:	280e      	cmp	r0, #14
 8007cc6:	d93a      	bls.n	8007d3e <_scanf_float+0xda>
 8007cc8:	f1b9 0f00 	cmp.w	r9, #0
 8007ccc:	d003      	beq.n	8007cd6 <_scanf_float+0x72>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cda:	f1ba 0f01 	cmp.w	sl, #1
 8007cde:	f200 8117 	bhi.w	8007f10 <_scanf_float+0x2ac>
 8007ce2:	9b01      	ldr	r3, [sp, #4]
 8007ce4:	429e      	cmp	r6, r3
 8007ce6:	f200 8108 	bhi.w	8007efa <_scanf_float+0x296>
 8007cea:	2001      	movs	r0, #1
 8007cec:	b007      	add	sp, #28
 8007cee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cf2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007cf6:	2a0d      	cmp	r2, #13
 8007cf8:	d8e6      	bhi.n	8007cc8 <_scanf_float+0x64>
 8007cfa:	a101      	add	r1, pc, #4	@ (adr r1, 8007d00 <_scanf_float+0x9c>)
 8007cfc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007d00:	08007e47 	.word	0x08007e47
 8007d04:	08007cc9 	.word	0x08007cc9
 8007d08:	08007cc9 	.word	0x08007cc9
 8007d0c:	08007cc9 	.word	0x08007cc9
 8007d10:	08007ea7 	.word	0x08007ea7
 8007d14:	08007e7f 	.word	0x08007e7f
 8007d18:	08007cc9 	.word	0x08007cc9
 8007d1c:	08007cc9 	.word	0x08007cc9
 8007d20:	08007e55 	.word	0x08007e55
 8007d24:	08007cc9 	.word	0x08007cc9
 8007d28:	08007cc9 	.word	0x08007cc9
 8007d2c:	08007cc9 	.word	0x08007cc9
 8007d30:	08007cc9 	.word	0x08007cc9
 8007d34:	08007e0d 	.word	0x08007e0d
 8007d38:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007d3c:	e7db      	b.n	8007cf6 <_scanf_float+0x92>
 8007d3e:	290e      	cmp	r1, #14
 8007d40:	d8c2      	bhi.n	8007cc8 <_scanf_float+0x64>
 8007d42:	a001      	add	r0, pc, #4	@ (adr r0, 8007d48 <_scanf_float+0xe4>)
 8007d44:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007d48:	08007dfd 	.word	0x08007dfd
 8007d4c:	08007cc9 	.word	0x08007cc9
 8007d50:	08007dfd 	.word	0x08007dfd
 8007d54:	08007e93 	.word	0x08007e93
 8007d58:	08007cc9 	.word	0x08007cc9
 8007d5c:	08007da5 	.word	0x08007da5
 8007d60:	08007de3 	.word	0x08007de3
 8007d64:	08007de3 	.word	0x08007de3
 8007d68:	08007de3 	.word	0x08007de3
 8007d6c:	08007de3 	.word	0x08007de3
 8007d70:	08007de3 	.word	0x08007de3
 8007d74:	08007de3 	.word	0x08007de3
 8007d78:	08007de3 	.word	0x08007de3
 8007d7c:	08007de3 	.word	0x08007de3
 8007d80:	08007de3 	.word	0x08007de3
 8007d84:	2b6e      	cmp	r3, #110	@ 0x6e
 8007d86:	d809      	bhi.n	8007d9c <_scanf_float+0x138>
 8007d88:	2b60      	cmp	r3, #96	@ 0x60
 8007d8a:	d8b2      	bhi.n	8007cf2 <_scanf_float+0x8e>
 8007d8c:	2b54      	cmp	r3, #84	@ 0x54
 8007d8e:	d07b      	beq.n	8007e88 <_scanf_float+0x224>
 8007d90:	2b59      	cmp	r3, #89	@ 0x59
 8007d92:	d199      	bne.n	8007cc8 <_scanf_float+0x64>
 8007d94:	2d07      	cmp	r5, #7
 8007d96:	d197      	bne.n	8007cc8 <_scanf_float+0x64>
 8007d98:	2508      	movs	r5, #8
 8007d9a:	e02c      	b.n	8007df6 <_scanf_float+0x192>
 8007d9c:	2b74      	cmp	r3, #116	@ 0x74
 8007d9e:	d073      	beq.n	8007e88 <_scanf_float+0x224>
 8007da0:	2b79      	cmp	r3, #121	@ 0x79
 8007da2:	e7f6      	b.n	8007d92 <_scanf_float+0x12e>
 8007da4:	6821      	ldr	r1, [r4, #0]
 8007da6:	05c8      	lsls	r0, r1, #23
 8007da8:	d51b      	bpl.n	8007de2 <_scanf_float+0x17e>
 8007daa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007dae:	6021      	str	r1, [r4, #0]
 8007db0:	f109 0901 	add.w	r9, r9, #1
 8007db4:	f1bb 0f00 	cmp.w	fp, #0
 8007db8:	d003      	beq.n	8007dc2 <_scanf_float+0x15e>
 8007dba:	3201      	adds	r2, #1
 8007dbc:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007dc0:	60a2      	str	r2, [r4, #8]
 8007dc2:	68a3      	ldr	r3, [r4, #8]
 8007dc4:	3b01      	subs	r3, #1
 8007dc6:	60a3      	str	r3, [r4, #8]
 8007dc8:	6923      	ldr	r3, [r4, #16]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	6123      	str	r3, [r4, #16]
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	607b      	str	r3, [r7, #4]
 8007dd6:	f340 8087 	ble.w	8007ee8 <_scanf_float+0x284>
 8007dda:	683b      	ldr	r3, [r7, #0]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	603b      	str	r3, [r7, #0]
 8007de0:	e765      	b.n	8007cae <_scanf_float+0x4a>
 8007de2:	eb1a 0105 	adds.w	r1, sl, r5
 8007de6:	f47f af6f 	bne.w	8007cc8 <_scanf_float+0x64>
 8007dea:	6822      	ldr	r2, [r4, #0]
 8007dec:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007df0:	6022      	str	r2, [r4, #0]
 8007df2:	460d      	mov	r5, r1
 8007df4:	468a      	mov	sl, r1
 8007df6:	f806 3b01 	strb.w	r3, [r6], #1
 8007dfa:	e7e2      	b.n	8007dc2 <_scanf_float+0x15e>
 8007dfc:	6822      	ldr	r2, [r4, #0]
 8007dfe:	0610      	lsls	r0, r2, #24
 8007e00:	f57f af62 	bpl.w	8007cc8 <_scanf_float+0x64>
 8007e04:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007e08:	6022      	str	r2, [r4, #0]
 8007e0a:	e7f4      	b.n	8007df6 <_scanf_float+0x192>
 8007e0c:	f1ba 0f00 	cmp.w	sl, #0
 8007e10:	d10e      	bne.n	8007e30 <_scanf_float+0x1cc>
 8007e12:	f1b9 0f00 	cmp.w	r9, #0
 8007e16:	d10e      	bne.n	8007e36 <_scanf_float+0x1d2>
 8007e18:	6822      	ldr	r2, [r4, #0]
 8007e1a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e1e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e22:	d108      	bne.n	8007e36 <_scanf_float+0x1d2>
 8007e24:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e28:	6022      	str	r2, [r4, #0]
 8007e2a:	f04f 0a01 	mov.w	sl, #1
 8007e2e:	e7e2      	b.n	8007df6 <_scanf_float+0x192>
 8007e30:	f1ba 0f02 	cmp.w	sl, #2
 8007e34:	d055      	beq.n	8007ee2 <_scanf_float+0x27e>
 8007e36:	2d01      	cmp	r5, #1
 8007e38:	d002      	beq.n	8007e40 <_scanf_float+0x1dc>
 8007e3a:	2d04      	cmp	r5, #4
 8007e3c:	f47f af44 	bne.w	8007cc8 <_scanf_float+0x64>
 8007e40:	3501      	adds	r5, #1
 8007e42:	b2ed      	uxtb	r5, r5
 8007e44:	e7d7      	b.n	8007df6 <_scanf_float+0x192>
 8007e46:	f1ba 0f01 	cmp.w	sl, #1
 8007e4a:	f47f af3d 	bne.w	8007cc8 <_scanf_float+0x64>
 8007e4e:	f04f 0a02 	mov.w	sl, #2
 8007e52:	e7d0      	b.n	8007df6 <_scanf_float+0x192>
 8007e54:	b97d      	cbnz	r5, 8007e76 <_scanf_float+0x212>
 8007e56:	f1b9 0f00 	cmp.w	r9, #0
 8007e5a:	f47f af38 	bne.w	8007cce <_scanf_float+0x6a>
 8007e5e:	6822      	ldr	r2, [r4, #0]
 8007e60:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007e64:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007e68:	f040 8108 	bne.w	800807c <_scanf_float+0x418>
 8007e6c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007e70:	6022      	str	r2, [r4, #0]
 8007e72:	2501      	movs	r5, #1
 8007e74:	e7bf      	b.n	8007df6 <_scanf_float+0x192>
 8007e76:	2d03      	cmp	r5, #3
 8007e78:	d0e2      	beq.n	8007e40 <_scanf_float+0x1dc>
 8007e7a:	2d05      	cmp	r5, #5
 8007e7c:	e7de      	b.n	8007e3c <_scanf_float+0x1d8>
 8007e7e:	2d02      	cmp	r5, #2
 8007e80:	f47f af22 	bne.w	8007cc8 <_scanf_float+0x64>
 8007e84:	2503      	movs	r5, #3
 8007e86:	e7b6      	b.n	8007df6 <_scanf_float+0x192>
 8007e88:	2d06      	cmp	r5, #6
 8007e8a:	f47f af1d 	bne.w	8007cc8 <_scanf_float+0x64>
 8007e8e:	2507      	movs	r5, #7
 8007e90:	e7b1      	b.n	8007df6 <_scanf_float+0x192>
 8007e92:	6822      	ldr	r2, [r4, #0]
 8007e94:	0591      	lsls	r1, r2, #22
 8007e96:	f57f af17 	bpl.w	8007cc8 <_scanf_float+0x64>
 8007e9a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007e9e:	6022      	str	r2, [r4, #0]
 8007ea0:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ea4:	e7a7      	b.n	8007df6 <_scanf_float+0x192>
 8007ea6:	6822      	ldr	r2, [r4, #0]
 8007ea8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007eac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007eb0:	d006      	beq.n	8007ec0 <_scanf_float+0x25c>
 8007eb2:	0550      	lsls	r0, r2, #21
 8007eb4:	f57f af08 	bpl.w	8007cc8 <_scanf_float+0x64>
 8007eb8:	f1b9 0f00 	cmp.w	r9, #0
 8007ebc:	f000 80de 	beq.w	800807c <_scanf_float+0x418>
 8007ec0:	0591      	lsls	r1, r2, #22
 8007ec2:	bf58      	it	pl
 8007ec4:	9902      	ldrpl	r1, [sp, #8]
 8007ec6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007eca:	bf58      	it	pl
 8007ecc:	eba9 0101 	subpl.w	r1, r9, r1
 8007ed0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007ed4:	bf58      	it	pl
 8007ed6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007eda:	6022      	str	r2, [r4, #0]
 8007edc:	f04f 0900 	mov.w	r9, #0
 8007ee0:	e789      	b.n	8007df6 <_scanf_float+0x192>
 8007ee2:	f04f 0a03 	mov.w	sl, #3
 8007ee6:	e786      	b.n	8007df6 <_scanf_float+0x192>
 8007ee8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007eec:	4639      	mov	r1, r7
 8007eee:	4640      	mov	r0, r8
 8007ef0:	4798      	blx	r3
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	f43f aedb 	beq.w	8007cae <_scanf_float+0x4a>
 8007ef8:	e6e6      	b.n	8007cc8 <_scanf_float+0x64>
 8007efa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007efe:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f02:	463a      	mov	r2, r7
 8007f04:	4640      	mov	r0, r8
 8007f06:	4798      	blx	r3
 8007f08:	6923      	ldr	r3, [r4, #16]
 8007f0a:	3b01      	subs	r3, #1
 8007f0c:	6123      	str	r3, [r4, #16]
 8007f0e:	e6e8      	b.n	8007ce2 <_scanf_float+0x7e>
 8007f10:	1e6b      	subs	r3, r5, #1
 8007f12:	2b06      	cmp	r3, #6
 8007f14:	d824      	bhi.n	8007f60 <_scanf_float+0x2fc>
 8007f16:	2d02      	cmp	r5, #2
 8007f18:	d836      	bhi.n	8007f88 <_scanf_float+0x324>
 8007f1a:	9b01      	ldr	r3, [sp, #4]
 8007f1c:	429e      	cmp	r6, r3
 8007f1e:	f67f aee4 	bls.w	8007cea <_scanf_float+0x86>
 8007f22:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f26:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f2a:	463a      	mov	r2, r7
 8007f2c:	4640      	mov	r0, r8
 8007f2e:	4798      	blx	r3
 8007f30:	6923      	ldr	r3, [r4, #16]
 8007f32:	3b01      	subs	r3, #1
 8007f34:	6123      	str	r3, [r4, #16]
 8007f36:	e7f0      	b.n	8007f1a <_scanf_float+0x2b6>
 8007f38:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f3c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007f40:	463a      	mov	r2, r7
 8007f42:	4640      	mov	r0, r8
 8007f44:	4798      	blx	r3
 8007f46:	6923      	ldr	r3, [r4, #16]
 8007f48:	3b01      	subs	r3, #1
 8007f4a:	6123      	str	r3, [r4, #16]
 8007f4c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f50:	fa5f fa8a 	uxtb.w	sl, sl
 8007f54:	f1ba 0f02 	cmp.w	sl, #2
 8007f58:	d1ee      	bne.n	8007f38 <_scanf_float+0x2d4>
 8007f5a:	3d03      	subs	r5, #3
 8007f5c:	b2ed      	uxtb	r5, r5
 8007f5e:	1b76      	subs	r6, r6, r5
 8007f60:	6823      	ldr	r3, [r4, #0]
 8007f62:	05da      	lsls	r2, r3, #23
 8007f64:	d530      	bpl.n	8007fc8 <_scanf_float+0x364>
 8007f66:	055b      	lsls	r3, r3, #21
 8007f68:	d511      	bpl.n	8007f8e <_scanf_float+0x32a>
 8007f6a:	9b01      	ldr	r3, [sp, #4]
 8007f6c:	429e      	cmp	r6, r3
 8007f6e:	f67f aebc 	bls.w	8007cea <_scanf_float+0x86>
 8007f72:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007f76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007f7a:	463a      	mov	r2, r7
 8007f7c:	4640      	mov	r0, r8
 8007f7e:	4798      	blx	r3
 8007f80:	6923      	ldr	r3, [r4, #16]
 8007f82:	3b01      	subs	r3, #1
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	e7f0      	b.n	8007f6a <_scanf_float+0x306>
 8007f88:	46aa      	mov	sl, r5
 8007f8a:	46b3      	mov	fp, r6
 8007f8c:	e7de      	b.n	8007f4c <_scanf_float+0x2e8>
 8007f8e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007f92:	6923      	ldr	r3, [r4, #16]
 8007f94:	2965      	cmp	r1, #101	@ 0x65
 8007f96:	f103 33ff 	add.w	r3, r3, #4294967295
 8007f9a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007f9e:	6123      	str	r3, [r4, #16]
 8007fa0:	d00c      	beq.n	8007fbc <_scanf_float+0x358>
 8007fa2:	2945      	cmp	r1, #69	@ 0x45
 8007fa4:	d00a      	beq.n	8007fbc <_scanf_float+0x358>
 8007fa6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007faa:	463a      	mov	r2, r7
 8007fac:	4640      	mov	r0, r8
 8007fae:	4798      	blx	r3
 8007fb0:	6923      	ldr	r3, [r4, #16]
 8007fb2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	1eb5      	subs	r5, r6, #2
 8007fba:	6123      	str	r3, [r4, #16]
 8007fbc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007fc0:	463a      	mov	r2, r7
 8007fc2:	4640      	mov	r0, r8
 8007fc4:	4798      	blx	r3
 8007fc6:	462e      	mov	r6, r5
 8007fc8:	6822      	ldr	r2, [r4, #0]
 8007fca:	f012 0210 	ands.w	r2, r2, #16
 8007fce:	d001      	beq.n	8007fd4 <_scanf_float+0x370>
 8007fd0:	2000      	movs	r0, #0
 8007fd2:	e68b      	b.n	8007cec <_scanf_float+0x88>
 8007fd4:	7032      	strb	r2, [r6, #0]
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007fdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fe0:	d11c      	bne.n	800801c <_scanf_float+0x3b8>
 8007fe2:	9b02      	ldr	r3, [sp, #8]
 8007fe4:	454b      	cmp	r3, r9
 8007fe6:	eba3 0209 	sub.w	r2, r3, r9
 8007fea:	d123      	bne.n	8008034 <_scanf_float+0x3d0>
 8007fec:	9901      	ldr	r1, [sp, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	4640      	mov	r0, r8
 8007ff2:	f7ff f9cd 	bl	8007390 <_strtod_r>
 8007ff6:	9b03      	ldr	r3, [sp, #12]
 8007ff8:	6821      	ldr	r1, [r4, #0]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	f011 0f02 	tst.w	r1, #2
 8008000:	ec57 6b10 	vmov	r6, r7, d0
 8008004:	f103 0204 	add.w	r2, r3, #4
 8008008:	d01f      	beq.n	800804a <_scanf_float+0x3e6>
 800800a:	9903      	ldr	r1, [sp, #12]
 800800c:	600a      	str	r2, [r1, #0]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	e9c3 6700 	strd	r6, r7, [r3]
 8008014:	68e3      	ldr	r3, [r4, #12]
 8008016:	3301      	adds	r3, #1
 8008018:	60e3      	str	r3, [r4, #12]
 800801a:	e7d9      	b.n	8007fd0 <_scanf_float+0x36c>
 800801c:	9b04      	ldr	r3, [sp, #16]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d0e4      	beq.n	8007fec <_scanf_float+0x388>
 8008022:	9905      	ldr	r1, [sp, #20]
 8008024:	230a      	movs	r3, #10
 8008026:	3101      	adds	r1, #1
 8008028:	4640      	mov	r0, r8
 800802a:	f002 f9ed 	bl	800a408 <_strtol_r>
 800802e:	9b04      	ldr	r3, [sp, #16]
 8008030:	9e05      	ldr	r6, [sp, #20]
 8008032:	1ac2      	subs	r2, r0, r3
 8008034:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008038:	429e      	cmp	r6, r3
 800803a:	bf28      	it	cs
 800803c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008040:	4910      	ldr	r1, [pc, #64]	@ (8008084 <_scanf_float+0x420>)
 8008042:	4630      	mov	r0, r6
 8008044:	f000 f8f6 	bl	8008234 <siprintf>
 8008048:	e7d0      	b.n	8007fec <_scanf_float+0x388>
 800804a:	f011 0f04 	tst.w	r1, #4
 800804e:	9903      	ldr	r1, [sp, #12]
 8008050:	600a      	str	r2, [r1, #0]
 8008052:	d1dc      	bne.n	800800e <_scanf_float+0x3aa>
 8008054:	681d      	ldr	r5, [r3, #0]
 8008056:	4632      	mov	r2, r6
 8008058:	463b      	mov	r3, r7
 800805a:	4630      	mov	r0, r6
 800805c:	4639      	mov	r1, r7
 800805e:	f7f8 fd85 	bl	8000b6c <__aeabi_dcmpun>
 8008062:	b128      	cbz	r0, 8008070 <_scanf_float+0x40c>
 8008064:	4808      	ldr	r0, [pc, #32]	@ (8008088 <_scanf_float+0x424>)
 8008066:	f000 fa03 	bl	8008470 <nanf>
 800806a:	ed85 0a00 	vstr	s0, [r5]
 800806e:	e7d1      	b.n	8008014 <_scanf_float+0x3b0>
 8008070:	4630      	mov	r0, r6
 8008072:	4639      	mov	r1, r7
 8008074:	f7f8 fdd8 	bl	8000c28 <__aeabi_d2f>
 8008078:	6028      	str	r0, [r5, #0]
 800807a:	e7cb      	b.n	8008014 <_scanf_float+0x3b0>
 800807c:	f04f 0900 	mov.w	r9, #0
 8008080:	e629      	b.n	8007cd6 <_scanf_float+0x72>
 8008082:	bf00      	nop
 8008084:	0800c2c4 	.word	0x0800c2c4
 8008088:	0800c665 	.word	0x0800c665

0800808c <std>:
 800808c:	2300      	movs	r3, #0
 800808e:	b510      	push	{r4, lr}
 8008090:	4604      	mov	r4, r0
 8008092:	e9c0 3300 	strd	r3, r3, [r0]
 8008096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800809a:	6083      	str	r3, [r0, #8]
 800809c:	8181      	strh	r1, [r0, #12]
 800809e:	6643      	str	r3, [r0, #100]	@ 0x64
 80080a0:	81c2      	strh	r2, [r0, #14]
 80080a2:	6183      	str	r3, [r0, #24]
 80080a4:	4619      	mov	r1, r3
 80080a6:	2208      	movs	r2, #8
 80080a8:	305c      	adds	r0, #92	@ 0x5c
 80080aa:	f000 f926 	bl	80082fa <memset>
 80080ae:	4b0d      	ldr	r3, [pc, #52]	@ (80080e4 <std+0x58>)
 80080b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80080b2:	4b0d      	ldr	r3, [pc, #52]	@ (80080e8 <std+0x5c>)
 80080b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80080b6:	4b0d      	ldr	r3, [pc, #52]	@ (80080ec <std+0x60>)
 80080b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80080ba:	4b0d      	ldr	r3, [pc, #52]	@ (80080f0 <std+0x64>)
 80080bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80080be:	4b0d      	ldr	r3, [pc, #52]	@ (80080f4 <std+0x68>)
 80080c0:	6224      	str	r4, [r4, #32]
 80080c2:	429c      	cmp	r4, r3
 80080c4:	d006      	beq.n	80080d4 <std+0x48>
 80080c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80080ca:	4294      	cmp	r4, r2
 80080cc:	d002      	beq.n	80080d4 <std+0x48>
 80080ce:	33d0      	adds	r3, #208	@ 0xd0
 80080d0:	429c      	cmp	r4, r3
 80080d2:	d105      	bne.n	80080e0 <std+0x54>
 80080d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80080d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080dc:	f000 b9ae 	b.w	800843c <__retarget_lock_init_recursive>
 80080e0:	bd10      	pop	{r4, pc}
 80080e2:	bf00      	nop
 80080e4:	08008275 	.word	0x08008275
 80080e8:	08008297 	.word	0x08008297
 80080ec:	080082cf 	.word	0x080082cf
 80080f0:	080082f3 	.word	0x080082f3
 80080f4:	200006a0 	.word	0x200006a0

080080f8 <stdio_exit_handler>:
 80080f8:	4a02      	ldr	r2, [pc, #8]	@ (8008104 <stdio_exit_handler+0xc>)
 80080fa:	4903      	ldr	r1, [pc, #12]	@ (8008108 <stdio_exit_handler+0x10>)
 80080fc:	4803      	ldr	r0, [pc, #12]	@ (800810c <stdio_exit_handler+0x14>)
 80080fe:	f000 b869 	b.w	80081d4 <_fwalk_sglue>
 8008102:	bf00      	nop
 8008104:	20000044 	.word	0x20000044
 8008108:	0800aa61 	.word	0x0800aa61
 800810c:	200001c0 	.word	0x200001c0

08008110 <cleanup_stdio>:
 8008110:	6841      	ldr	r1, [r0, #4]
 8008112:	4b0c      	ldr	r3, [pc, #48]	@ (8008144 <cleanup_stdio+0x34>)
 8008114:	4299      	cmp	r1, r3
 8008116:	b510      	push	{r4, lr}
 8008118:	4604      	mov	r4, r0
 800811a:	d001      	beq.n	8008120 <cleanup_stdio+0x10>
 800811c:	f002 fca0 	bl	800aa60 <_fflush_r>
 8008120:	68a1      	ldr	r1, [r4, #8]
 8008122:	4b09      	ldr	r3, [pc, #36]	@ (8008148 <cleanup_stdio+0x38>)
 8008124:	4299      	cmp	r1, r3
 8008126:	d002      	beq.n	800812e <cleanup_stdio+0x1e>
 8008128:	4620      	mov	r0, r4
 800812a:	f002 fc99 	bl	800aa60 <_fflush_r>
 800812e:	68e1      	ldr	r1, [r4, #12]
 8008130:	4b06      	ldr	r3, [pc, #24]	@ (800814c <cleanup_stdio+0x3c>)
 8008132:	4299      	cmp	r1, r3
 8008134:	d004      	beq.n	8008140 <cleanup_stdio+0x30>
 8008136:	4620      	mov	r0, r4
 8008138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800813c:	f002 bc90 	b.w	800aa60 <_fflush_r>
 8008140:	bd10      	pop	{r4, pc}
 8008142:	bf00      	nop
 8008144:	200006a0 	.word	0x200006a0
 8008148:	20000708 	.word	0x20000708
 800814c:	20000770 	.word	0x20000770

08008150 <global_stdio_init.part.0>:
 8008150:	b510      	push	{r4, lr}
 8008152:	4b0b      	ldr	r3, [pc, #44]	@ (8008180 <global_stdio_init.part.0+0x30>)
 8008154:	4c0b      	ldr	r4, [pc, #44]	@ (8008184 <global_stdio_init.part.0+0x34>)
 8008156:	4a0c      	ldr	r2, [pc, #48]	@ (8008188 <global_stdio_init.part.0+0x38>)
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	4620      	mov	r0, r4
 800815c:	2200      	movs	r2, #0
 800815e:	2104      	movs	r1, #4
 8008160:	f7ff ff94 	bl	800808c <std>
 8008164:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008168:	2201      	movs	r2, #1
 800816a:	2109      	movs	r1, #9
 800816c:	f7ff ff8e 	bl	800808c <std>
 8008170:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008174:	2202      	movs	r2, #2
 8008176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800817a:	2112      	movs	r1, #18
 800817c:	f7ff bf86 	b.w	800808c <std>
 8008180:	200007d8 	.word	0x200007d8
 8008184:	200006a0 	.word	0x200006a0
 8008188:	080080f9 	.word	0x080080f9

0800818c <__sfp_lock_acquire>:
 800818c:	4801      	ldr	r0, [pc, #4]	@ (8008194 <__sfp_lock_acquire+0x8>)
 800818e:	f000 b956 	b.w	800843e <__retarget_lock_acquire_recursive>
 8008192:	bf00      	nop
 8008194:	200007e1 	.word	0x200007e1

08008198 <__sfp_lock_release>:
 8008198:	4801      	ldr	r0, [pc, #4]	@ (80081a0 <__sfp_lock_release+0x8>)
 800819a:	f000 b951 	b.w	8008440 <__retarget_lock_release_recursive>
 800819e:	bf00      	nop
 80081a0:	200007e1 	.word	0x200007e1

080081a4 <__sinit>:
 80081a4:	b510      	push	{r4, lr}
 80081a6:	4604      	mov	r4, r0
 80081a8:	f7ff fff0 	bl	800818c <__sfp_lock_acquire>
 80081ac:	6a23      	ldr	r3, [r4, #32]
 80081ae:	b11b      	cbz	r3, 80081b8 <__sinit+0x14>
 80081b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081b4:	f7ff bff0 	b.w	8008198 <__sfp_lock_release>
 80081b8:	4b04      	ldr	r3, [pc, #16]	@ (80081cc <__sinit+0x28>)
 80081ba:	6223      	str	r3, [r4, #32]
 80081bc:	4b04      	ldr	r3, [pc, #16]	@ (80081d0 <__sinit+0x2c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1f5      	bne.n	80081b0 <__sinit+0xc>
 80081c4:	f7ff ffc4 	bl	8008150 <global_stdio_init.part.0>
 80081c8:	e7f2      	b.n	80081b0 <__sinit+0xc>
 80081ca:	bf00      	nop
 80081cc:	08008111 	.word	0x08008111
 80081d0:	200007d8 	.word	0x200007d8

080081d4 <_fwalk_sglue>:
 80081d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081d8:	4607      	mov	r7, r0
 80081da:	4688      	mov	r8, r1
 80081dc:	4614      	mov	r4, r2
 80081de:	2600      	movs	r6, #0
 80081e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80081e4:	f1b9 0901 	subs.w	r9, r9, #1
 80081e8:	d505      	bpl.n	80081f6 <_fwalk_sglue+0x22>
 80081ea:	6824      	ldr	r4, [r4, #0]
 80081ec:	2c00      	cmp	r4, #0
 80081ee:	d1f7      	bne.n	80081e0 <_fwalk_sglue+0xc>
 80081f0:	4630      	mov	r0, r6
 80081f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f6:	89ab      	ldrh	r3, [r5, #12]
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d907      	bls.n	800820c <_fwalk_sglue+0x38>
 80081fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008200:	3301      	adds	r3, #1
 8008202:	d003      	beq.n	800820c <_fwalk_sglue+0x38>
 8008204:	4629      	mov	r1, r5
 8008206:	4638      	mov	r0, r7
 8008208:	47c0      	blx	r8
 800820a:	4306      	orrs	r6, r0
 800820c:	3568      	adds	r5, #104	@ 0x68
 800820e:	e7e9      	b.n	80081e4 <_fwalk_sglue+0x10>

08008210 <iprintf>:
 8008210:	b40f      	push	{r0, r1, r2, r3}
 8008212:	b507      	push	{r0, r1, r2, lr}
 8008214:	4906      	ldr	r1, [pc, #24]	@ (8008230 <iprintf+0x20>)
 8008216:	ab04      	add	r3, sp, #16
 8008218:	6808      	ldr	r0, [r1, #0]
 800821a:	f853 2b04 	ldr.w	r2, [r3], #4
 800821e:	6881      	ldr	r1, [r0, #8]
 8008220:	9301      	str	r3, [sp, #4]
 8008222:	f002 fa81 	bl	800a728 <_vfiprintf_r>
 8008226:	b003      	add	sp, #12
 8008228:	f85d eb04 	ldr.w	lr, [sp], #4
 800822c:	b004      	add	sp, #16
 800822e:	4770      	bx	lr
 8008230:	200001bc 	.word	0x200001bc

08008234 <siprintf>:
 8008234:	b40e      	push	{r1, r2, r3}
 8008236:	b500      	push	{lr}
 8008238:	b09c      	sub	sp, #112	@ 0x70
 800823a:	ab1d      	add	r3, sp, #116	@ 0x74
 800823c:	9002      	str	r0, [sp, #8]
 800823e:	9006      	str	r0, [sp, #24]
 8008240:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008244:	4809      	ldr	r0, [pc, #36]	@ (800826c <siprintf+0x38>)
 8008246:	9107      	str	r1, [sp, #28]
 8008248:	9104      	str	r1, [sp, #16]
 800824a:	4909      	ldr	r1, [pc, #36]	@ (8008270 <siprintf+0x3c>)
 800824c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008250:	9105      	str	r1, [sp, #20]
 8008252:	6800      	ldr	r0, [r0, #0]
 8008254:	9301      	str	r3, [sp, #4]
 8008256:	a902      	add	r1, sp, #8
 8008258:	f002 f940 	bl	800a4dc <_svfiprintf_r>
 800825c:	9b02      	ldr	r3, [sp, #8]
 800825e:	2200      	movs	r2, #0
 8008260:	701a      	strb	r2, [r3, #0]
 8008262:	b01c      	add	sp, #112	@ 0x70
 8008264:	f85d eb04 	ldr.w	lr, [sp], #4
 8008268:	b003      	add	sp, #12
 800826a:	4770      	bx	lr
 800826c:	200001bc 	.word	0x200001bc
 8008270:	ffff0208 	.word	0xffff0208

08008274 <__sread>:
 8008274:	b510      	push	{r4, lr}
 8008276:	460c      	mov	r4, r1
 8008278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827c:	f000 f890 	bl	80083a0 <_read_r>
 8008280:	2800      	cmp	r0, #0
 8008282:	bfab      	itete	ge
 8008284:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008286:	89a3      	ldrhlt	r3, [r4, #12]
 8008288:	181b      	addge	r3, r3, r0
 800828a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800828e:	bfac      	ite	ge
 8008290:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008292:	81a3      	strhlt	r3, [r4, #12]
 8008294:	bd10      	pop	{r4, pc}

08008296 <__swrite>:
 8008296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800829a:	461f      	mov	r7, r3
 800829c:	898b      	ldrh	r3, [r1, #12]
 800829e:	05db      	lsls	r3, r3, #23
 80082a0:	4605      	mov	r5, r0
 80082a2:	460c      	mov	r4, r1
 80082a4:	4616      	mov	r6, r2
 80082a6:	d505      	bpl.n	80082b4 <__swrite+0x1e>
 80082a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082ac:	2302      	movs	r3, #2
 80082ae:	2200      	movs	r2, #0
 80082b0:	f000 f864 	bl	800837c <_lseek_r>
 80082b4:	89a3      	ldrh	r3, [r4, #12]
 80082b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082be:	81a3      	strh	r3, [r4, #12]
 80082c0:	4632      	mov	r2, r6
 80082c2:	463b      	mov	r3, r7
 80082c4:	4628      	mov	r0, r5
 80082c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082ca:	f000 b87b 	b.w	80083c4 <_write_r>

080082ce <__sseek>:
 80082ce:	b510      	push	{r4, lr}
 80082d0:	460c      	mov	r4, r1
 80082d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082d6:	f000 f851 	bl	800837c <_lseek_r>
 80082da:	1c43      	adds	r3, r0, #1
 80082dc:	89a3      	ldrh	r3, [r4, #12]
 80082de:	bf15      	itete	ne
 80082e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082ea:	81a3      	strheq	r3, [r4, #12]
 80082ec:	bf18      	it	ne
 80082ee:	81a3      	strhne	r3, [r4, #12]
 80082f0:	bd10      	pop	{r4, pc}

080082f2 <__sclose>:
 80082f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082f6:	f000 b831 	b.w	800835c <_close_r>

080082fa <memset>:
 80082fa:	4402      	add	r2, r0
 80082fc:	4603      	mov	r3, r0
 80082fe:	4293      	cmp	r3, r2
 8008300:	d100      	bne.n	8008304 <memset+0xa>
 8008302:	4770      	bx	lr
 8008304:	f803 1b01 	strb.w	r1, [r3], #1
 8008308:	e7f9      	b.n	80082fe <memset+0x4>

0800830a <strncmp>:
 800830a:	b510      	push	{r4, lr}
 800830c:	b16a      	cbz	r2, 800832a <strncmp+0x20>
 800830e:	3901      	subs	r1, #1
 8008310:	1884      	adds	r4, r0, r2
 8008312:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008316:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800831a:	429a      	cmp	r2, r3
 800831c:	d103      	bne.n	8008326 <strncmp+0x1c>
 800831e:	42a0      	cmp	r0, r4
 8008320:	d001      	beq.n	8008326 <strncmp+0x1c>
 8008322:	2a00      	cmp	r2, #0
 8008324:	d1f5      	bne.n	8008312 <strncmp+0x8>
 8008326:	1ad0      	subs	r0, r2, r3
 8008328:	bd10      	pop	{r4, pc}
 800832a:	4610      	mov	r0, r2
 800832c:	e7fc      	b.n	8008328 <strncmp+0x1e>

0800832e <strncpy>:
 800832e:	b510      	push	{r4, lr}
 8008330:	3901      	subs	r1, #1
 8008332:	4603      	mov	r3, r0
 8008334:	b132      	cbz	r2, 8008344 <strncpy+0x16>
 8008336:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800833a:	f803 4b01 	strb.w	r4, [r3], #1
 800833e:	3a01      	subs	r2, #1
 8008340:	2c00      	cmp	r4, #0
 8008342:	d1f7      	bne.n	8008334 <strncpy+0x6>
 8008344:	441a      	add	r2, r3
 8008346:	2100      	movs	r1, #0
 8008348:	4293      	cmp	r3, r2
 800834a:	d100      	bne.n	800834e <strncpy+0x20>
 800834c:	bd10      	pop	{r4, pc}
 800834e:	f803 1b01 	strb.w	r1, [r3], #1
 8008352:	e7f9      	b.n	8008348 <strncpy+0x1a>

08008354 <_localeconv_r>:
 8008354:	4800      	ldr	r0, [pc, #0]	@ (8008358 <_localeconv_r+0x4>)
 8008356:	4770      	bx	lr
 8008358:	20000140 	.word	0x20000140

0800835c <_close_r>:
 800835c:	b538      	push	{r3, r4, r5, lr}
 800835e:	4d06      	ldr	r5, [pc, #24]	@ (8008378 <_close_r+0x1c>)
 8008360:	2300      	movs	r3, #0
 8008362:	4604      	mov	r4, r0
 8008364:	4608      	mov	r0, r1
 8008366:	602b      	str	r3, [r5, #0]
 8008368:	f7fa fe8e 	bl	8003088 <_close>
 800836c:	1c43      	adds	r3, r0, #1
 800836e:	d102      	bne.n	8008376 <_close_r+0x1a>
 8008370:	682b      	ldr	r3, [r5, #0]
 8008372:	b103      	cbz	r3, 8008376 <_close_r+0x1a>
 8008374:	6023      	str	r3, [r4, #0]
 8008376:	bd38      	pop	{r3, r4, r5, pc}
 8008378:	200007dc 	.word	0x200007dc

0800837c <_lseek_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d07      	ldr	r5, [pc, #28]	@ (800839c <_lseek_r+0x20>)
 8008380:	4604      	mov	r4, r0
 8008382:	4608      	mov	r0, r1
 8008384:	4611      	mov	r1, r2
 8008386:	2200      	movs	r2, #0
 8008388:	602a      	str	r2, [r5, #0]
 800838a:	461a      	mov	r2, r3
 800838c:	f7fa fea3 	bl	80030d6 <_lseek>
 8008390:	1c43      	adds	r3, r0, #1
 8008392:	d102      	bne.n	800839a <_lseek_r+0x1e>
 8008394:	682b      	ldr	r3, [r5, #0]
 8008396:	b103      	cbz	r3, 800839a <_lseek_r+0x1e>
 8008398:	6023      	str	r3, [r4, #0]
 800839a:	bd38      	pop	{r3, r4, r5, pc}
 800839c:	200007dc 	.word	0x200007dc

080083a0 <_read_r>:
 80083a0:	b538      	push	{r3, r4, r5, lr}
 80083a2:	4d07      	ldr	r5, [pc, #28]	@ (80083c0 <_read_r+0x20>)
 80083a4:	4604      	mov	r4, r0
 80083a6:	4608      	mov	r0, r1
 80083a8:	4611      	mov	r1, r2
 80083aa:	2200      	movs	r2, #0
 80083ac:	602a      	str	r2, [r5, #0]
 80083ae:	461a      	mov	r2, r3
 80083b0:	f7fa fe31 	bl	8003016 <_read>
 80083b4:	1c43      	adds	r3, r0, #1
 80083b6:	d102      	bne.n	80083be <_read_r+0x1e>
 80083b8:	682b      	ldr	r3, [r5, #0]
 80083ba:	b103      	cbz	r3, 80083be <_read_r+0x1e>
 80083bc:	6023      	str	r3, [r4, #0]
 80083be:	bd38      	pop	{r3, r4, r5, pc}
 80083c0:	200007dc 	.word	0x200007dc

080083c4 <_write_r>:
 80083c4:	b538      	push	{r3, r4, r5, lr}
 80083c6:	4d07      	ldr	r5, [pc, #28]	@ (80083e4 <_write_r+0x20>)
 80083c8:	4604      	mov	r4, r0
 80083ca:	4608      	mov	r0, r1
 80083cc:	4611      	mov	r1, r2
 80083ce:	2200      	movs	r2, #0
 80083d0:	602a      	str	r2, [r5, #0]
 80083d2:	461a      	mov	r2, r3
 80083d4:	f7fa fe3c 	bl	8003050 <_write>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_write_r+0x1e>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_write_r+0x1e>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	200007dc 	.word	0x200007dc

080083e8 <__errno>:
 80083e8:	4b01      	ldr	r3, [pc, #4]	@ (80083f0 <__errno+0x8>)
 80083ea:	6818      	ldr	r0, [r3, #0]
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	200001bc 	.word	0x200001bc

080083f4 <__libc_init_array>:
 80083f4:	b570      	push	{r4, r5, r6, lr}
 80083f6:	4d0d      	ldr	r5, [pc, #52]	@ (800842c <__libc_init_array+0x38>)
 80083f8:	4c0d      	ldr	r4, [pc, #52]	@ (8008430 <__libc_init_array+0x3c>)
 80083fa:	1b64      	subs	r4, r4, r5
 80083fc:	10a4      	asrs	r4, r4, #2
 80083fe:	2600      	movs	r6, #0
 8008400:	42a6      	cmp	r6, r4
 8008402:	d109      	bne.n	8008418 <__libc_init_array+0x24>
 8008404:	4d0b      	ldr	r5, [pc, #44]	@ (8008434 <__libc_init_array+0x40>)
 8008406:	4c0c      	ldr	r4, [pc, #48]	@ (8008438 <__libc_init_array+0x44>)
 8008408:	f003 fee6 	bl	800c1d8 <_init>
 800840c:	1b64      	subs	r4, r4, r5
 800840e:	10a4      	asrs	r4, r4, #2
 8008410:	2600      	movs	r6, #0
 8008412:	42a6      	cmp	r6, r4
 8008414:	d105      	bne.n	8008422 <__libc_init_array+0x2e>
 8008416:	bd70      	pop	{r4, r5, r6, pc}
 8008418:	f855 3b04 	ldr.w	r3, [r5], #4
 800841c:	4798      	blx	r3
 800841e:	3601      	adds	r6, #1
 8008420:	e7ee      	b.n	8008400 <__libc_init_array+0xc>
 8008422:	f855 3b04 	ldr.w	r3, [r5], #4
 8008426:	4798      	blx	r3
 8008428:	3601      	adds	r6, #1
 800842a:	e7f2      	b.n	8008412 <__libc_init_array+0x1e>
 800842c:	0800c848 	.word	0x0800c848
 8008430:	0800c848 	.word	0x0800c848
 8008434:	0800c848 	.word	0x0800c848
 8008438:	0800c84c 	.word	0x0800c84c

0800843c <__retarget_lock_init_recursive>:
 800843c:	4770      	bx	lr

0800843e <__retarget_lock_acquire_recursive>:
 800843e:	4770      	bx	lr

08008440 <__retarget_lock_release_recursive>:
 8008440:	4770      	bx	lr

08008442 <memcpy>:
 8008442:	440a      	add	r2, r1
 8008444:	4291      	cmp	r1, r2
 8008446:	f100 33ff 	add.w	r3, r0, #4294967295
 800844a:	d100      	bne.n	800844e <memcpy+0xc>
 800844c:	4770      	bx	lr
 800844e:	b510      	push	{r4, lr}
 8008450:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008454:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008458:	4291      	cmp	r1, r2
 800845a:	d1f9      	bne.n	8008450 <memcpy+0xe>
 800845c:	bd10      	pop	{r4, pc}
	...

08008460 <nan>:
 8008460:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008468 <nan+0x8>
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	00000000 	.word	0x00000000
 800846c:	7ff80000 	.word	0x7ff80000

08008470 <nanf>:
 8008470:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008478 <nanf+0x8>
 8008474:	4770      	bx	lr
 8008476:	bf00      	nop
 8008478:	7fc00000 	.word	0x7fc00000

0800847c <quorem>:
 800847c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008480:	6903      	ldr	r3, [r0, #16]
 8008482:	690c      	ldr	r4, [r1, #16]
 8008484:	42a3      	cmp	r3, r4
 8008486:	4607      	mov	r7, r0
 8008488:	db7e      	blt.n	8008588 <quorem+0x10c>
 800848a:	3c01      	subs	r4, #1
 800848c:	f101 0814 	add.w	r8, r1, #20
 8008490:	00a3      	lsls	r3, r4, #2
 8008492:	f100 0514 	add.w	r5, r0, #20
 8008496:	9300      	str	r3, [sp, #0]
 8008498:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800849c:	9301      	str	r3, [sp, #4]
 800849e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80084a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80084a6:	3301      	adds	r3, #1
 80084a8:	429a      	cmp	r2, r3
 80084aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80084ae:	fbb2 f6f3 	udiv	r6, r2, r3
 80084b2:	d32e      	bcc.n	8008512 <quorem+0x96>
 80084b4:	f04f 0a00 	mov.w	sl, #0
 80084b8:	46c4      	mov	ip, r8
 80084ba:	46ae      	mov	lr, r5
 80084bc:	46d3      	mov	fp, sl
 80084be:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084c2:	b298      	uxth	r0, r3
 80084c4:	fb06 a000 	mla	r0, r6, r0, sl
 80084c8:	0c02      	lsrs	r2, r0, #16
 80084ca:	0c1b      	lsrs	r3, r3, #16
 80084cc:	fb06 2303 	mla	r3, r6, r3, r2
 80084d0:	f8de 2000 	ldr.w	r2, [lr]
 80084d4:	b280      	uxth	r0, r0
 80084d6:	b292      	uxth	r2, r2
 80084d8:	1a12      	subs	r2, r2, r0
 80084da:	445a      	add	r2, fp
 80084dc:	f8de 0000 	ldr.w	r0, [lr]
 80084e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80084ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084ee:	b292      	uxth	r2, r2
 80084f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084f4:	45e1      	cmp	r9, ip
 80084f6:	f84e 2b04 	str.w	r2, [lr], #4
 80084fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084fe:	d2de      	bcs.n	80084be <quorem+0x42>
 8008500:	9b00      	ldr	r3, [sp, #0]
 8008502:	58eb      	ldr	r3, [r5, r3]
 8008504:	b92b      	cbnz	r3, 8008512 <quorem+0x96>
 8008506:	9b01      	ldr	r3, [sp, #4]
 8008508:	3b04      	subs	r3, #4
 800850a:	429d      	cmp	r5, r3
 800850c:	461a      	mov	r2, r3
 800850e:	d32f      	bcc.n	8008570 <quorem+0xf4>
 8008510:	613c      	str	r4, [r7, #16]
 8008512:	4638      	mov	r0, r7
 8008514:	f001 fd10 	bl	8009f38 <__mcmp>
 8008518:	2800      	cmp	r0, #0
 800851a:	db25      	blt.n	8008568 <quorem+0xec>
 800851c:	4629      	mov	r1, r5
 800851e:	2000      	movs	r0, #0
 8008520:	f858 2b04 	ldr.w	r2, [r8], #4
 8008524:	f8d1 c000 	ldr.w	ip, [r1]
 8008528:	fa1f fe82 	uxth.w	lr, r2
 800852c:	fa1f f38c 	uxth.w	r3, ip
 8008530:	eba3 030e 	sub.w	r3, r3, lr
 8008534:	4403      	add	r3, r0
 8008536:	0c12      	lsrs	r2, r2, #16
 8008538:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800853c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008540:	b29b      	uxth	r3, r3
 8008542:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008546:	45c1      	cmp	r9, r8
 8008548:	f841 3b04 	str.w	r3, [r1], #4
 800854c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008550:	d2e6      	bcs.n	8008520 <quorem+0xa4>
 8008552:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008556:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800855a:	b922      	cbnz	r2, 8008566 <quorem+0xea>
 800855c:	3b04      	subs	r3, #4
 800855e:	429d      	cmp	r5, r3
 8008560:	461a      	mov	r2, r3
 8008562:	d30b      	bcc.n	800857c <quorem+0x100>
 8008564:	613c      	str	r4, [r7, #16]
 8008566:	3601      	adds	r6, #1
 8008568:	4630      	mov	r0, r6
 800856a:	b003      	add	sp, #12
 800856c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008570:	6812      	ldr	r2, [r2, #0]
 8008572:	3b04      	subs	r3, #4
 8008574:	2a00      	cmp	r2, #0
 8008576:	d1cb      	bne.n	8008510 <quorem+0x94>
 8008578:	3c01      	subs	r4, #1
 800857a:	e7c6      	b.n	800850a <quorem+0x8e>
 800857c:	6812      	ldr	r2, [r2, #0]
 800857e:	3b04      	subs	r3, #4
 8008580:	2a00      	cmp	r2, #0
 8008582:	d1ef      	bne.n	8008564 <quorem+0xe8>
 8008584:	3c01      	subs	r4, #1
 8008586:	e7ea      	b.n	800855e <quorem+0xe2>
 8008588:	2000      	movs	r0, #0
 800858a:	e7ee      	b.n	800856a <quorem+0xee>
 800858c:	0000      	movs	r0, r0
	...

08008590 <_dtoa_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	69c7      	ldr	r7, [r0, #28]
 8008596:	b099      	sub	sp, #100	@ 0x64
 8008598:	ed8d 0b02 	vstr	d0, [sp, #8]
 800859c:	ec55 4b10 	vmov	r4, r5, d0
 80085a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80085a2:	9109      	str	r1, [sp, #36]	@ 0x24
 80085a4:	4683      	mov	fp, r0
 80085a6:	920e      	str	r2, [sp, #56]	@ 0x38
 80085a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80085aa:	b97f      	cbnz	r7, 80085cc <_dtoa_r+0x3c>
 80085ac:	2010      	movs	r0, #16
 80085ae:	f001 f937 	bl	8009820 <malloc>
 80085b2:	4602      	mov	r2, r0
 80085b4:	f8cb 001c 	str.w	r0, [fp, #28]
 80085b8:	b920      	cbnz	r0, 80085c4 <_dtoa_r+0x34>
 80085ba:	4ba7      	ldr	r3, [pc, #668]	@ (8008858 <_dtoa_r+0x2c8>)
 80085bc:	21ef      	movs	r1, #239	@ 0xef
 80085be:	48a7      	ldr	r0, [pc, #668]	@ (800885c <_dtoa_r+0x2cc>)
 80085c0:	f002 fb34 	bl	800ac2c <__assert_func>
 80085c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80085c8:	6007      	str	r7, [r0, #0]
 80085ca:	60c7      	str	r7, [r0, #12]
 80085cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085d0:	6819      	ldr	r1, [r3, #0]
 80085d2:	b159      	cbz	r1, 80085ec <_dtoa_r+0x5c>
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	604a      	str	r2, [r1, #4]
 80085d8:	2301      	movs	r3, #1
 80085da:	4093      	lsls	r3, r2
 80085dc:	608b      	str	r3, [r1, #8]
 80085de:	4658      	mov	r0, fp
 80085e0:	f001 fa26 	bl	8009a30 <_Bfree>
 80085e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80085e8:	2200      	movs	r2, #0
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	1e2b      	subs	r3, r5, #0
 80085ee:	bfb9      	ittee	lt
 80085f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085f4:	9303      	strlt	r3, [sp, #12]
 80085f6:	2300      	movge	r3, #0
 80085f8:	6033      	strge	r3, [r6, #0]
 80085fa:	9f03      	ldr	r7, [sp, #12]
 80085fc:	4b98      	ldr	r3, [pc, #608]	@ (8008860 <_dtoa_r+0x2d0>)
 80085fe:	bfbc      	itt	lt
 8008600:	2201      	movlt	r2, #1
 8008602:	6032      	strlt	r2, [r6, #0]
 8008604:	43bb      	bics	r3, r7
 8008606:	d112      	bne.n	800862e <_dtoa_r+0x9e>
 8008608:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800860a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008614:	4323      	orrs	r3, r4
 8008616:	f000 854d 	beq.w	80090b4 <_dtoa_r+0xb24>
 800861a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800861c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008874 <_dtoa_r+0x2e4>
 8008620:	2b00      	cmp	r3, #0
 8008622:	f000 854f 	beq.w	80090c4 <_dtoa_r+0xb34>
 8008626:	f10a 0303 	add.w	r3, sl, #3
 800862a:	f000 bd49 	b.w	80090c0 <_dtoa_r+0xb30>
 800862e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008632:	2200      	movs	r2, #0
 8008634:	ec51 0b17 	vmov	r0, r1, d7
 8008638:	2300      	movs	r3, #0
 800863a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800863e:	f7f8 fa63 	bl	8000b08 <__aeabi_dcmpeq>
 8008642:	4680      	mov	r8, r0
 8008644:	b158      	cbz	r0, 800865e <_dtoa_r+0xce>
 8008646:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008648:	2301      	movs	r3, #1
 800864a:	6013      	str	r3, [r2, #0]
 800864c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800864e:	b113      	cbz	r3, 8008656 <_dtoa_r+0xc6>
 8008650:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008652:	4b84      	ldr	r3, [pc, #528]	@ (8008864 <_dtoa_r+0x2d4>)
 8008654:	6013      	str	r3, [r2, #0]
 8008656:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008878 <_dtoa_r+0x2e8>
 800865a:	f000 bd33 	b.w	80090c4 <_dtoa_r+0xb34>
 800865e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008662:	aa16      	add	r2, sp, #88	@ 0x58
 8008664:	a917      	add	r1, sp, #92	@ 0x5c
 8008666:	4658      	mov	r0, fp
 8008668:	f001 fd86 	bl	800a178 <__d2b>
 800866c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008670:	4681      	mov	r9, r0
 8008672:	2e00      	cmp	r6, #0
 8008674:	d077      	beq.n	8008766 <_dtoa_r+0x1d6>
 8008676:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008678:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800867c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008680:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008684:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008688:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800868c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008690:	4619      	mov	r1, r3
 8008692:	2200      	movs	r2, #0
 8008694:	4b74      	ldr	r3, [pc, #464]	@ (8008868 <_dtoa_r+0x2d8>)
 8008696:	f7f7 fe17 	bl	80002c8 <__aeabi_dsub>
 800869a:	a369      	add	r3, pc, #420	@ (adr r3, 8008840 <_dtoa_r+0x2b0>)
 800869c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086a0:	f7f7 ffca 	bl	8000638 <__aeabi_dmul>
 80086a4:	a368      	add	r3, pc, #416	@ (adr r3, 8008848 <_dtoa_r+0x2b8>)
 80086a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086aa:	f7f7 fe0f 	bl	80002cc <__adddf3>
 80086ae:	4604      	mov	r4, r0
 80086b0:	4630      	mov	r0, r6
 80086b2:	460d      	mov	r5, r1
 80086b4:	f7f7 ff56 	bl	8000564 <__aeabi_i2d>
 80086b8:	a365      	add	r3, pc, #404	@ (adr r3, 8008850 <_dtoa_r+0x2c0>)
 80086ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086be:	f7f7 ffbb 	bl	8000638 <__aeabi_dmul>
 80086c2:	4602      	mov	r2, r0
 80086c4:	460b      	mov	r3, r1
 80086c6:	4620      	mov	r0, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	f7f7 fdff 	bl	80002cc <__adddf3>
 80086ce:	4604      	mov	r4, r0
 80086d0:	460d      	mov	r5, r1
 80086d2:	f7f8 fa61 	bl	8000b98 <__aeabi_d2iz>
 80086d6:	2200      	movs	r2, #0
 80086d8:	4607      	mov	r7, r0
 80086da:	2300      	movs	r3, #0
 80086dc:	4620      	mov	r0, r4
 80086de:	4629      	mov	r1, r5
 80086e0:	f7f8 fa1c 	bl	8000b1c <__aeabi_dcmplt>
 80086e4:	b140      	cbz	r0, 80086f8 <_dtoa_r+0x168>
 80086e6:	4638      	mov	r0, r7
 80086e8:	f7f7 ff3c 	bl	8000564 <__aeabi_i2d>
 80086ec:	4622      	mov	r2, r4
 80086ee:	462b      	mov	r3, r5
 80086f0:	f7f8 fa0a 	bl	8000b08 <__aeabi_dcmpeq>
 80086f4:	b900      	cbnz	r0, 80086f8 <_dtoa_r+0x168>
 80086f6:	3f01      	subs	r7, #1
 80086f8:	2f16      	cmp	r7, #22
 80086fa:	d851      	bhi.n	80087a0 <_dtoa_r+0x210>
 80086fc:	4b5b      	ldr	r3, [pc, #364]	@ (800886c <_dtoa_r+0x2dc>)
 80086fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008706:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800870a:	f7f8 fa07 	bl	8000b1c <__aeabi_dcmplt>
 800870e:	2800      	cmp	r0, #0
 8008710:	d048      	beq.n	80087a4 <_dtoa_r+0x214>
 8008712:	3f01      	subs	r7, #1
 8008714:	2300      	movs	r3, #0
 8008716:	9312      	str	r3, [sp, #72]	@ 0x48
 8008718:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800871a:	1b9b      	subs	r3, r3, r6
 800871c:	1e5a      	subs	r2, r3, #1
 800871e:	bf44      	itt	mi
 8008720:	f1c3 0801 	rsbmi	r8, r3, #1
 8008724:	2300      	movmi	r3, #0
 8008726:	9208      	str	r2, [sp, #32]
 8008728:	bf54      	ite	pl
 800872a:	f04f 0800 	movpl.w	r8, #0
 800872e:	9308      	strmi	r3, [sp, #32]
 8008730:	2f00      	cmp	r7, #0
 8008732:	db39      	blt.n	80087a8 <_dtoa_r+0x218>
 8008734:	9b08      	ldr	r3, [sp, #32]
 8008736:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008738:	443b      	add	r3, r7
 800873a:	9308      	str	r3, [sp, #32]
 800873c:	2300      	movs	r3, #0
 800873e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008740:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008742:	2b09      	cmp	r3, #9
 8008744:	d864      	bhi.n	8008810 <_dtoa_r+0x280>
 8008746:	2b05      	cmp	r3, #5
 8008748:	bfc4      	itt	gt
 800874a:	3b04      	subgt	r3, #4
 800874c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800874e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008750:	f1a3 0302 	sub.w	r3, r3, #2
 8008754:	bfcc      	ite	gt
 8008756:	2400      	movgt	r4, #0
 8008758:	2401      	movle	r4, #1
 800875a:	2b03      	cmp	r3, #3
 800875c:	d863      	bhi.n	8008826 <_dtoa_r+0x296>
 800875e:	e8df f003 	tbb	[pc, r3]
 8008762:	372a      	.short	0x372a
 8008764:	5535      	.short	0x5535
 8008766:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800876a:	441e      	add	r6, r3
 800876c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008770:	2b20      	cmp	r3, #32
 8008772:	bfc1      	itttt	gt
 8008774:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008778:	409f      	lslgt	r7, r3
 800877a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800877e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008782:	bfd6      	itet	le
 8008784:	f1c3 0320 	rsble	r3, r3, #32
 8008788:	ea47 0003 	orrgt.w	r0, r7, r3
 800878c:	fa04 f003 	lslle.w	r0, r4, r3
 8008790:	f7f7 fed8 	bl	8000544 <__aeabi_ui2d>
 8008794:	2201      	movs	r2, #1
 8008796:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800879a:	3e01      	subs	r6, #1
 800879c:	9214      	str	r2, [sp, #80]	@ 0x50
 800879e:	e777      	b.n	8008690 <_dtoa_r+0x100>
 80087a0:	2301      	movs	r3, #1
 80087a2:	e7b8      	b.n	8008716 <_dtoa_r+0x186>
 80087a4:	9012      	str	r0, [sp, #72]	@ 0x48
 80087a6:	e7b7      	b.n	8008718 <_dtoa_r+0x188>
 80087a8:	427b      	negs	r3, r7
 80087aa:	930a      	str	r3, [sp, #40]	@ 0x28
 80087ac:	2300      	movs	r3, #0
 80087ae:	eba8 0807 	sub.w	r8, r8, r7
 80087b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80087b4:	e7c4      	b.n	8008740 <_dtoa_r+0x1b0>
 80087b6:	2300      	movs	r3, #0
 80087b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087bc:	2b00      	cmp	r3, #0
 80087be:	dc35      	bgt.n	800882c <_dtoa_r+0x29c>
 80087c0:	2301      	movs	r3, #1
 80087c2:	9300      	str	r3, [sp, #0]
 80087c4:	9307      	str	r3, [sp, #28]
 80087c6:	461a      	mov	r2, r3
 80087c8:	920e      	str	r2, [sp, #56]	@ 0x38
 80087ca:	e00b      	b.n	80087e4 <_dtoa_r+0x254>
 80087cc:	2301      	movs	r3, #1
 80087ce:	e7f3      	b.n	80087b8 <_dtoa_r+0x228>
 80087d0:	2300      	movs	r3, #0
 80087d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087d6:	18fb      	adds	r3, r7, r3
 80087d8:	9300      	str	r3, [sp, #0]
 80087da:	3301      	adds	r3, #1
 80087dc:	2b01      	cmp	r3, #1
 80087de:	9307      	str	r3, [sp, #28]
 80087e0:	bfb8      	it	lt
 80087e2:	2301      	movlt	r3, #1
 80087e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80087e8:	2100      	movs	r1, #0
 80087ea:	2204      	movs	r2, #4
 80087ec:	f102 0514 	add.w	r5, r2, #20
 80087f0:	429d      	cmp	r5, r3
 80087f2:	d91f      	bls.n	8008834 <_dtoa_r+0x2a4>
 80087f4:	6041      	str	r1, [r0, #4]
 80087f6:	4658      	mov	r0, fp
 80087f8:	f001 f8da 	bl	80099b0 <_Balloc>
 80087fc:	4682      	mov	sl, r0
 80087fe:	2800      	cmp	r0, #0
 8008800:	d13c      	bne.n	800887c <_dtoa_r+0x2ec>
 8008802:	4b1b      	ldr	r3, [pc, #108]	@ (8008870 <_dtoa_r+0x2e0>)
 8008804:	4602      	mov	r2, r0
 8008806:	f240 11af 	movw	r1, #431	@ 0x1af
 800880a:	e6d8      	b.n	80085be <_dtoa_r+0x2e>
 800880c:	2301      	movs	r3, #1
 800880e:	e7e0      	b.n	80087d2 <_dtoa_r+0x242>
 8008810:	2401      	movs	r4, #1
 8008812:	2300      	movs	r3, #0
 8008814:	9309      	str	r3, [sp, #36]	@ 0x24
 8008816:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008818:	f04f 33ff 	mov.w	r3, #4294967295
 800881c:	9300      	str	r3, [sp, #0]
 800881e:	9307      	str	r3, [sp, #28]
 8008820:	2200      	movs	r2, #0
 8008822:	2312      	movs	r3, #18
 8008824:	e7d0      	b.n	80087c8 <_dtoa_r+0x238>
 8008826:	2301      	movs	r3, #1
 8008828:	930b      	str	r3, [sp, #44]	@ 0x2c
 800882a:	e7f5      	b.n	8008818 <_dtoa_r+0x288>
 800882c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800882e:	9300      	str	r3, [sp, #0]
 8008830:	9307      	str	r3, [sp, #28]
 8008832:	e7d7      	b.n	80087e4 <_dtoa_r+0x254>
 8008834:	3101      	adds	r1, #1
 8008836:	0052      	lsls	r2, r2, #1
 8008838:	e7d8      	b.n	80087ec <_dtoa_r+0x25c>
 800883a:	bf00      	nop
 800883c:	f3af 8000 	nop.w
 8008840:	636f4361 	.word	0x636f4361
 8008844:	3fd287a7 	.word	0x3fd287a7
 8008848:	8b60c8b3 	.word	0x8b60c8b3
 800884c:	3fc68a28 	.word	0x3fc68a28
 8008850:	509f79fb 	.word	0x509f79fb
 8008854:	3fd34413 	.word	0x3fd34413
 8008858:	0800c2de 	.word	0x0800c2de
 800885c:	0800c2f5 	.word	0x0800c2f5
 8008860:	7ff00000 	.word	0x7ff00000
 8008864:	0800c2a1 	.word	0x0800c2a1
 8008868:	3ff80000 	.word	0x3ff80000
 800886c:	0800c450 	.word	0x0800c450
 8008870:	0800c34d 	.word	0x0800c34d
 8008874:	0800c2da 	.word	0x0800c2da
 8008878:	0800c2a0 	.word	0x0800c2a0
 800887c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008880:	6018      	str	r0, [r3, #0]
 8008882:	9b07      	ldr	r3, [sp, #28]
 8008884:	2b0e      	cmp	r3, #14
 8008886:	f200 80a4 	bhi.w	80089d2 <_dtoa_r+0x442>
 800888a:	2c00      	cmp	r4, #0
 800888c:	f000 80a1 	beq.w	80089d2 <_dtoa_r+0x442>
 8008890:	2f00      	cmp	r7, #0
 8008892:	dd33      	ble.n	80088fc <_dtoa_r+0x36c>
 8008894:	4bad      	ldr	r3, [pc, #692]	@ (8008b4c <_dtoa_r+0x5bc>)
 8008896:	f007 020f 	and.w	r2, r7, #15
 800889a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800889e:	ed93 7b00 	vldr	d7, [r3]
 80088a2:	05f8      	lsls	r0, r7, #23
 80088a4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80088a8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80088ac:	d516      	bpl.n	80088dc <_dtoa_r+0x34c>
 80088ae:	4ba8      	ldr	r3, [pc, #672]	@ (8008b50 <_dtoa_r+0x5c0>)
 80088b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80088b8:	f7f7 ffe8 	bl	800088c <__aeabi_ddiv>
 80088bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088c0:	f004 040f 	and.w	r4, r4, #15
 80088c4:	2603      	movs	r6, #3
 80088c6:	4da2      	ldr	r5, [pc, #648]	@ (8008b50 <_dtoa_r+0x5c0>)
 80088c8:	b954      	cbnz	r4, 80088e0 <_dtoa_r+0x350>
 80088ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80088d2:	f7f7 ffdb 	bl	800088c <__aeabi_ddiv>
 80088d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088da:	e028      	b.n	800892e <_dtoa_r+0x39e>
 80088dc:	2602      	movs	r6, #2
 80088de:	e7f2      	b.n	80088c6 <_dtoa_r+0x336>
 80088e0:	07e1      	lsls	r1, r4, #31
 80088e2:	d508      	bpl.n	80088f6 <_dtoa_r+0x366>
 80088e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088e8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80088ec:	f7f7 fea4 	bl	8000638 <__aeabi_dmul>
 80088f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088f4:	3601      	adds	r6, #1
 80088f6:	1064      	asrs	r4, r4, #1
 80088f8:	3508      	adds	r5, #8
 80088fa:	e7e5      	b.n	80088c8 <_dtoa_r+0x338>
 80088fc:	f000 80d2 	beq.w	8008aa4 <_dtoa_r+0x514>
 8008900:	427c      	negs	r4, r7
 8008902:	4b92      	ldr	r3, [pc, #584]	@ (8008b4c <_dtoa_r+0x5bc>)
 8008904:	4d92      	ldr	r5, [pc, #584]	@ (8008b50 <_dtoa_r+0x5c0>)
 8008906:	f004 020f 	and.w	r2, r4, #15
 800890a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800890e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008912:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008916:	f7f7 fe8f 	bl	8000638 <__aeabi_dmul>
 800891a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800891e:	1124      	asrs	r4, r4, #4
 8008920:	2300      	movs	r3, #0
 8008922:	2602      	movs	r6, #2
 8008924:	2c00      	cmp	r4, #0
 8008926:	f040 80b2 	bne.w	8008a8e <_dtoa_r+0x4fe>
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1d3      	bne.n	80088d6 <_dtoa_r+0x346>
 800892e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008930:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 80b7 	beq.w	8008aa8 <_dtoa_r+0x518>
 800893a:	4b86      	ldr	r3, [pc, #536]	@ (8008b54 <_dtoa_r+0x5c4>)
 800893c:	2200      	movs	r2, #0
 800893e:	4620      	mov	r0, r4
 8008940:	4629      	mov	r1, r5
 8008942:	f7f8 f8eb 	bl	8000b1c <__aeabi_dcmplt>
 8008946:	2800      	cmp	r0, #0
 8008948:	f000 80ae 	beq.w	8008aa8 <_dtoa_r+0x518>
 800894c:	9b07      	ldr	r3, [sp, #28]
 800894e:	2b00      	cmp	r3, #0
 8008950:	f000 80aa 	beq.w	8008aa8 <_dtoa_r+0x518>
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	2b00      	cmp	r3, #0
 8008958:	dd37      	ble.n	80089ca <_dtoa_r+0x43a>
 800895a:	1e7b      	subs	r3, r7, #1
 800895c:	9304      	str	r3, [sp, #16]
 800895e:	4620      	mov	r0, r4
 8008960:	4b7d      	ldr	r3, [pc, #500]	@ (8008b58 <_dtoa_r+0x5c8>)
 8008962:	2200      	movs	r2, #0
 8008964:	4629      	mov	r1, r5
 8008966:	f7f7 fe67 	bl	8000638 <__aeabi_dmul>
 800896a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800896e:	9c00      	ldr	r4, [sp, #0]
 8008970:	3601      	adds	r6, #1
 8008972:	4630      	mov	r0, r6
 8008974:	f7f7 fdf6 	bl	8000564 <__aeabi_i2d>
 8008978:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800897c:	f7f7 fe5c 	bl	8000638 <__aeabi_dmul>
 8008980:	4b76      	ldr	r3, [pc, #472]	@ (8008b5c <_dtoa_r+0x5cc>)
 8008982:	2200      	movs	r2, #0
 8008984:	f7f7 fca2 	bl	80002cc <__adddf3>
 8008988:	4605      	mov	r5, r0
 800898a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800898e:	2c00      	cmp	r4, #0
 8008990:	f040 808d 	bne.w	8008aae <_dtoa_r+0x51e>
 8008994:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008998:	4b71      	ldr	r3, [pc, #452]	@ (8008b60 <_dtoa_r+0x5d0>)
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fc94 	bl	80002c8 <__aeabi_dsub>
 80089a0:	4602      	mov	r2, r0
 80089a2:	460b      	mov	r3, r1
 80089a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089a8:	462a      	mov	r2, r5
 80089aa:	4633      	mov	r3, r6
 80089ac:	f7f8 f8d4 	bl	8000b58 <__aeabi_dcmpgt>
 80089b0:	2800      	cmp	r0, #0
 80089b2:	f040 828b 	bne.w	8008ecc <_dtoa_r+0x93c>
 80089b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089ba:	462a      	mov	r2, r5
 80089bc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80089c0:	f7f8 f8ac 	bl	8000b1c <__aeabi_dcmplt>
 80089c4:	2800      	cmp	r0, #0
 80089c6:	f040 8128 	bne.w	8008c1a <_dtoa_r+0x68a>
 80089ca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80089ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80089d2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f2c0 815a 	blt.w	8008c8e <_dtoa_r+0x6fe>
 80089da:	2f0e      	cmp	r7, #14
 80089dc:	f300 8157 	bgt.w	8008c8e <_dtoa_r+0x6fe>
 80089e0:	4b5a      	ldr	r3, [pc, #360]	@ (8008b4c <_dtoa_r+0x5bc>)
 80089e2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089e6:	ed93 7b00 	vldr	d7, [r3]
 80089ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	ed8d 7b00 	vstr	d7, [sp]
 80089f2:	da03      	bge.n	80089fc <_dtoa_r+0x46c>
 80089f4:	9b07      	ldr	r3, [sp, #28]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f340 8101 	ble.w	8008bfe <_dtoa_r+0x66e>
 80089fc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008a00:	4656      	mov	r6, sl
 8008a02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a06:	4620      	mov	r0, r4
 8008a08:	4629      	mov	r1, r5
 8008a0a:	f7f7 ff3f 	bl	800088c <__aeabi_ddiv>
 8008a0e:	f7f8 f8c3 	bl	8000b98 <__aeabi_d2iz>
 8008a12:	4680      	mov	r8, r0
 8008a14:	f7f7 fda6 	bl	8000564 <__aeabi_i2d>
 8008a18:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a1c:	f7f7 fe0c 	bl	8000638 <__aeabi_dmul>
 8008a20:	4602      	mov	r2, r0
 8008a22:	460b      	mov	r3, r1
 8008a24:	4620      	mov	r0, r4
 8008a26:	4629      	mov	r1, r5
 8008a28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008a2c:	f7f7 fc4c 	bl	80002c8 <__aeabi_dsub>
 8008a30:	f806 4b01 	strb.w	r4, [r6], #1
 8008a34:	9d07      	ldr	r5, [sp, #28]
 8008a36:	eba6 040a 	sub.w	r4, r6, sl
 8008a3a:	42a5      	cmp	r5, r4
 8008a3c:	4602      	mov	r2, r0
 8008a3e:	460b      	mov	r3, r1
 8008a40:	f040 8117 	bne.w	8008c72 <_dtoa_r+0x6e2>
 8008a44:	f7f7 fc42 	bl	80002cc <__adddf3>
 8008a48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	460d      	mov	r5, r1
 8008a50:	f7f8 f882 	bl	8000b58 <__aeabi_dcmpgt>
 8008a54:	2800      	cmp	r0, #0
 8008a56:	f040 80f9 	bne.w	8008c4c <_dtoa_r+0x6bc>
 8008a5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008a5e:	4620      	mov	r0, r4
 8008a60:	4629      	mov	r1, r5
 8008a62:	f7f8 f851 	bl	8000b08 <__aeabi_dcmpeq>
 8008a66:	b118      	cbz	r0, 8008a70 <_dtoa_r+0x4e0>
 8008a68:	f018 0f01 	tst.w	r8, #1
 8008a6c:	f040 80ee 	bne.w	8008c4c <_dtoa_r+0x6bc>
 8008a70:	4649      	mov	r1, r9
 8008a72:	4658      	mov	r0, fp
 8008a74:	f000 ffdc 	bl	8009a30 <_Bfree>
 8008a78:	2300      	movs	r3, #0
 8008a7a:	7033      	strb	r3, [r6, #0]
 8008a7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008a7e:	3701      	adds	r7, #1
 8008a80:	601f      	str	r7, [r3, #0]
 8008a82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 831d 	beq.w	80090c4 <_dtoa_r+0xb34>
 8008a8a:	601e      	str	r6, [r3, #0]
 8008a8c:	e31a      	b.n	80090c4 <_dtoa_r+0xb34>
 8008a8e:	07e2      	lsls	r2, r4, #31
 8008a90:	d505      	bpl.n	8008a9e <_dtoa_r+0x50e>
 8008a92:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a96:	f7f7 fdcf 	bl	8000638 <__aeabi_dmul>
 8008a9a:	3601      	adds	r6, #1
 8008a9c:	2301      	movs	r3, #1
 8008a9e:	1064      	asrs	r4, r4, #1
 8008aa0:	3508      	adds	r5, #8
 8008aa2:	e73f      	b.n	8008924 <_dtoa_r+0x394>
 8008aa4:	2602      	movs	r6, #2
 8008aa6:	e742      	b.n	800892e <_dtoa_r+0x39e>
 8008aa8:	9c07      	ldr	r4, [sp, #28]
 8008aaa:	9704      	str	r7, [sp, #16]
 8008aac:	e761      	b.n	8008972 <_dtoa_r+0x3e2>
 8008aae:	4b27      	ldr	r3, [pc, #156]	@ (8008b4c <_dtoa_r+0x5bc>)
 8008ab0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ab2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ab6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008aba:	4454      	add	r4, sl
 8008abc:	2900      	cmp	r1, #0
 8008abe:	d053      	beq.n	8008b68 <_dtoa_r+0x5d8>
 8008ac0:	4928      	ldr	r1, [pc, #160]	@ (8008b64 <_dtoa_r+0x5d4>)
 8008ac2:	2000      	movs	r0, #0
 8008ac4:	f7f7 fee2 	bl	800088c <__aeabi_ddiv>
 8008ac8:	4633      	mov	r3, r6
 8008aca:	462a      	mov	r2, r5
 8008acc:	f7f7 fbfc 	bl	80002c8 <__aeabi_dsub>
 8008ad0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008ad4:	4656      	mov	r6, sl
 8008ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ada:	f7f8 f85d 	bl	8000b98 <__aeabi_d2iz>
 8008ade:	4605      	mov	r5, r0
 8008ae0:	f7f7 fd40 	bl	8000564 <__aeabi_i2d>
 8008ae4:	4602      	mov	r2, r0
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aec:	f7f7 fbec 	bl	80002c8 <__aeabi_dsub>
 8008af0:	3530      	adds	r5, #48	@ 0x30
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008afa:	f806 5b01 	strb.w	r5, [r6], #1
 8008afe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b02:	f7f8 f80b 	bl	8000b1c <__aeabi_dcmplt>
 8008b06:	2800      	cmp	r0, #0
 8008b08:	d171      	bne.n	8008bee <_dtoa_r+0x65e>
 8008b0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008b0e:	4911      	ldr	r1, [pc, #68]	@ (8008b54 <_dtoa_r+0x5c4>)
 8008b10:	2000      	movs	r0, #0
 8008b12:	f7f7 fbd9 	bl	80002c8 <__aeabi_dsub>
 8008b16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b1a:	f7f7 ffff 	bl	8000b1c <__aeabi_dcmplt>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f040 8095 	bne.w	8008c4e <_dtoa_r+0x6be>
 8008b24:	42a6      	cmp	r6, r4
 8008b26:	f43f af50 	beq.w	80089ca <_dtoa_r+0x43a>
 8008b2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008b58 <_dtoa_r+0x5c8>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	f7f7 fd81 	bl	8000638 <__aeabi_dmul>
 8008b36:	4b08      	ldr	r3, [pc, #32]	@ (8008b58 <_dtoa_r+0x5c8>)
 8008b38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b3c:	2200      	movs	r2, #0
 8008b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b42:	f7f7 fd79 	bl	8000638 <__aeabi_dmul>
 8008b46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b4a:	e7c4      	b.n	8008ad6 <_dtoa_r+0x546>
 8008b4c:	0800c450 	.word	0x0800c450
 8008b50:	0800c428 	.word	0x0800c428
 8008b54:	3ff00000 	.word	0x3ff00000
 8008b58:	40240000 	.word	0x40240000
 8008b5c:	401c0000 	.word	0x401c0000
 8008b60:	40140000 	.word	0x40140000
 8008b64:	3fe00000 	.word	0x3fe00000
 8008b68:	4631      	mov	r1, r6
 8008b6a:	4628      	mov	r0, r5
 8008b6c:	f7f7 fd64 	bl	8000638 <__aeabi_dmul>
 8008b70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b74:	9415      	str	r4, [sp, #84]	@ 0x54
 8008b76:	4656      	mov	r6, sl
 8008b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b7c:	f7f8 f80c 	bl	8000b98 <__aeabi_d2iz>
 8008b80:	4605      	mov	r5, r0
 8008b82:	f7f7 fcef 	bl	8000564 <__aeabi_i2d>
 8008b86:	4602      	mov	r2, r0
 8008b88:	460b      	mov	r3, r1
 8008b8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b8e:	f7f7 fb9b 	bl	80002c8 <__aeabi_dsub>
 8008b92:	3530      	adds	r5, #48	@ 0x30
 8008b94:	f806 5b01 	strb.w	r5, [r6], #1
 8008b98:	4602      	mov	r2, r0
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	42a6      	cmp	r6, r4
 8008b9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ba2:	f04f 0200 	mov.w	r2, #0
 8008ba6:	d124      	bne.n	8008bf2 <_dtoa_r+0x662>
 8008ba8:	4bac      	ldr	r3, [pc, #688]	@ (8008e5c <_dtoa_r+0x8cc>)
 8008baa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008bae:	f7f7 fb8d 	bl	80002cc <__adddf3>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	460b      	mov	r3, r1
 8008bb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bba:	f7f7 ffcd 	bl	8000b58 <__aeabi_dcmpgt>
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	d145      	bne.n	8008c4e <_dtoa_r+0x6be>
 8008bc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008bc6:	49a5      	ldr	r1, [pc, #660]	@ (8008e5c <_dtoa_r+0x8cc>)
 8008bc8:	2000      	movs	r0, #0
 8008bca:	f7f7 fb7d 	bl	80002c8 <__aeabi_dsub>
 8008bce:	4602      	mov	r2, r0
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd6:	f7f7 ffa1 	bl	8000b1c <__aeabi_dcmplt>
 8008bda:	2800      	cmp	r0, #0
 8008bdc:	f43f aef5 	beq.w	80089ca <_dtoa_r+0x43a>
 8008be0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8008be2:	1e73      	subs	r3, r6, #1
 8008be4:	9315      	str	r3, [sp, #84]	@ 0x54
 8008be6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008bea:	2b30      	cmp	r3, #48	@ 0x30
 8008bec:	d0f8      	beq.n	8008be0 <_dtoa_r+0x650>
 8008bee:	9f04      	ldr	r7, [sp, #16]
 8008bf0:	e73e      	b.n	8008a70 <_dtoa_r+0x4e0>
 8008bf2:	4b9b      	ldr	r3, [pc, #620]	@ (8008e60 <_dtoa_r+0x8d0>)
 8008bf4:	f7f7 fd20 	bl	8000638 <__aeabi_dmul>
 8008bf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bfc:	e7bc      	b.n	8008b78 <_dtoa_r+0x5e8>
 8008bfe:	d10c      	bne.n	8008c1a <_dtoa_r+0x68a>
 8008c00:	4b98      	ldr	r3, [pc, #608]	@ (8008e64 <_dtoa_r+0x8d4>)
 8008c02:	2200      	movs	r2, #0
 8008c04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c08:	f7f7 fd16 	bl	8000638 <__aeabi_dmul>
 8008c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c10:	f7f7 ff98 	bl	8000b44 <__aeabi_dcmpge>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	f000 8157 	beq.w	8008ec8 <_dtoa_r+0x938>
 8008c1a:	2400      	movs	r4, #0
 8008c1c:	4625      	mov	r5, r4
 8008c1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c20:	43db      	mvns	r3, r3
 8008c22:	9304      	str	r3, [sp, #16]
 8008c24:	4656      	mov	r6, sl
 8008c26:	2700      	movs	r7, #0
 8008c28:	4621      	mov	r1, r4
 8008c2a:	4658      	mov	r0, fp
 8008c2c:	f000 ff00 	bl	8009a30 <_Bfree>
 8008c30:	2d00      	cmp	r5, #0
 8008c32:	d0dc      	beq.n	8008bee <_dtoa_r+0x65e>
 8008c34:	b12f      	cbz	r7, 8008c42 <_dtoa_r+0x6b2>
 8008c36:	42af      	cmp	r7, r5
 8008c38:	d003      	beq.n	8008c42 <_dtoa_r+0x6b2>
 8008c3a:	4639      	mov	r1, r7
 8008c3c:	4658      	mov	r0, fp
 8008c3e:	f000 fef7 	bl	8009a30 <_Bfree>
 8008c42:	4629      	mov	r1, r5
 8008c44:	4658      	mov	r0, fp
 8008c46:	f000 fef3 	bl	8009a30 <_Bfree>
 8008c4a:	e7d0      	b.n	8008bee <_dtoa_r+0x65e>
 8008c4c:	9704      	str	r7, [sp, #16]
 8008c4e:	4633      	mov	r3, r6
 8008c50:	461e      	mov	r6, r3
 8008c52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c56:	2a39      	cmp	r2, #57	@ 0x39
 8008c58:	d107      	bne.n	8008c6a <_dtoa_r+0x6da>
 8008c5a:	459a      	cmp	sl, r3
 8008c5c:	d1f8      	bne.n	8008c50 <_dtoa_r+0x6c0>
 8008c5e:	9a04      	ldr	r2, [sp, #16]
 8008c60:	3201      	adds	r2, #1
 8008c62:	9204      	str	r2, [sp, #16]
 8008c64:	2230      	movs	r2, #48	@ 0x30
 8008c66:	f88a 2000 	strb.w	r2, [sl]
 8008c6a:	781a      	ldrb	r2, [r3, #0]
 8008c6c:	3201      	adds	r2, #1
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	e7bd      	b.n	8008bee <_dtoa_r+0x65e>
 8008c72:	4b7b      	ldr	r3, [pc, #492]	@ (8008e60 <_dtoa_r+0x8d0>)
 8008c74:	2200      	movs	r2, #0
 8008c76:	f7f7 fcdf 	bl	8000638 <__aeabi_dmul>
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	4604      	mov	r4, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	f7f7 ff41 	bl	8000b08 <__aeabi_dcmpeq>
 8008c86:	2800      	cmp	r0, #0
 8008c88:	f43f aebb 	beq.w	8008a02 <_dtoa_r+0x472>
 8008c8c:	e6f0      	b.n	8008a70 <_dtoa_r+0x4e0>
 8008c8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c90:	2a00      	cmp	r2, #0
 8008c92:	f000 80db 	beq.w	8008e4c <_dtoa_r+0x8bc>
 8008c96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c98:	2a01      	cmp	r2, #1
 8008c9a:	f300 80bf 	bgt.w	8008e1c <_dtoa_r+0x88c>
 8008c9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8008ca0:	2a00      	cmp	r2, #0
 8008ca2:	f000 80b7 	beq.w	8008e14 <_dtoa_r+0x884>
 8008ca6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008caa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008cac:	4646      	mov	r6, r8
 8008cae:	9a08      	ldr	r2, [sp, #32]
 8008cb0:	2101      	movs	r1, #1
 8008cb2:	441a      	add	r2, r3
 8008cb4:	4658      	mov	r0, fp
 8008cb6:	4498      	add	r8, r3
 8008cb8:	9208      	str	r2, [sp, #32]
 8008cba:	f000 ffb7 	bl	8009c2c <__i2b>
 8008cbe:	4605      	mov	r5, r0
 8008cc0:	b15e      	cbz	r6, 8008cda <_dtoa_r+0x74a>
 8008cc2:	9b08      	ldr	r3, [sp, #32]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	dd08      	ble.n	8008cda <_dtoa_r+0x74a>
 8008cc8:	42b3      	cmp	r3, r6
 8008cca:	9a08      	ldr	r2, [sp, #32]
 8008ccc:	bfa8      	it	ge
 8008cce:	4633      	movge	r3, r6
 8008cd0:	eba8 0803 	sub.w	r8, r8, r3
 8008cd4:	1af6      	subs	r6, r6, r3
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	9308      	str	r3, [sp, #32]
 8008cda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cdc:	b1f3      	cbz	r3, 8008d1c <_dtoa_r+0x78c>
 8008cde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	f000 80b7 	beq.w	8008e54 <_dtoa_r+0x8c4>
 8008ce6:	b18c      	cbz	r4, 8008d0c <_dtoa_r+0x77c>
 8008ce8:	4629      	mov	r1, r5
 8008cea:	4622      	mov	r2, r4
 8008cec:	4658      	mov	r0, fp
 8008cee:	f001 f85d 	bl	8009dac <__pow5mult>
 8008cf2:	464a      	mov	r2, r9
 8008cf4:	4601      	mov	r1, r0
 8008cf6:	4605      	mov	r5, r0
 8008cf8:	4658      	mov	r0, fp
 8008cfa:	f000 ffad 	bl	8009c58 <__multiply>
 8008cfe:	4649      	mov	r1, r9
 8008d00:	9004      	str	r0, [sp, #16]
 8008d02:	4658      	mov	r0, fp
 8008d04:	f000 fe94 	bl	8009a30 <_Bfree>
 8008d08:	9b04      	ldr	r3, [sp, #16]
 8008d0a:	4699      	mov	r9, r3
 8008d0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d0e:	1b1a      	subs	r2, r3, r4
 8008d10:	d004      	beq.n	8008d1c <_dtoa_r+0x78c>
 8008d12:	4649      	mov	r1, r9
 8008d14:	4658      	mov	r0, fp
 8008d16:	f001 f849 	bl	8009dac <__pow5mult>
 8008d1a:	4681      	mov	r9, r0
 8008d1c:	2101      	movs	r1, #1
 8008d1e:	4658      	mov	r0, fp
 8008d20:	f000 ff84 	bl	8009c2c <__i2b>
 8008d24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d26:	4604      	mov	r4, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	f000 81cf 	beq.w	80090cc <_dtoa_r+0xb3c>
 8008d2e:	461a      	mov	r2, r3
 8008d30:	4601      	mov	r1, r0
 8008d32:	4658      	mov	r0, fp
 8008d34:	f001 f83a 	bl	8009dac <__pow5mult>
 8008d38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d3a:	2b01      	cmp	r3, #1
 8008d3c:	4604      	mov	r4, r0
 8008d3e:	f300 8095 	bgt.w	8008e6c <_dtoa_r+0x8dc>
 8008d42:	9b02      	ldr	r3, [sp, #8]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f040 8087 	bne.w	8008e58 <_dtoa_r+0x8c8>
 8008d4a:	9b03      	ldr	r3, [sp, #12]
 8008d4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f040 8089 	bne.w	8008e68 <_dtoa_r+0x8d8>
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d5c:	0d1b      	lsrs	r3, r3, #20
 8008d5e:	051b      	lsls	r3, r3, #20
 8008d60:	b12b      	cbz	r3, 8008d6e <_dtoa_r+0x7de>
 8008d62:	9b08      	ldr	r3, [sp, #32]
 8008d64:	3301      	adds	r3, #1
 8008d66:	9308      	str	r3, [sp, #32]
 8008d68:	f108 0801 	add.w	r8, r8, #1
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f000 81b0 	beq.w	80090d8 <_dtoa_r+0xb48>
 8008d78:	6923      	ldr	r3, [r4, #16]
 8008d7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d7e:	6918      	ldr	r0, [r3, #16]
 8008d80:	f000 ff08 	bl	8009b94 <__hi0bits>
 8008d84:	f1c0 0020 	rsb	r0, r0, #32
 8008d88:	9b08      	ldr	r3, [sp, #32]
 8008d8a:	4418      	add	r0, r3
 8008d8c:	f010 001f 	ands.w	r0, r0, #31
 8008d90:	d077      	beq.n	8008e82 <_dtoa_r+0x8f2>
 8008d92:	f1c0 0320 	rsb	r3, r0, #32
 8008d96:	2b04      	cmp	r3, #4
 8008d98:	dd6b      	ble.n	8008e72 <_dtoa_r+0x8e2>
 8008d9a:	9b08      	ldr	r3, [sp, #32]
 8008d9c:	f1c0 001c 	rsb	r0, r0, #28
 8008da0:	4403      	add	r3, r0
 8008da2:	4480      	add	r8, r0
 8008da4:	4406      	add	r6, r0
 8008da6:	9308      	str	r3, [sp, #32]
 8008da8:	f1b8 0f00 	cmp.w	r8, #0
 8008dac:	dd05      	ble.n	8008dba <_dtoa_r+0x82a>
 8008dae:	4649      	mov	r1, r9
 8008db0:	4642      	mov	r2, r8
 8008db2:	4658      	mov	r0, fp
 8008db4:	f001 f854 	bl	8009e60 <__lshift>
 8008db8:	4681      	mov	r9, r0
 8008dba:	9b08      	ldr	r3, [sp, #32]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	dd05      	ble.n	8008dcc <_dtoa_r+0x83c>
 8008dc0:	4621      	mov	r1, r4
 8008dc2:	461a      	mov	r2, r3
 8008dc4:	4658      	mov	r0, fp
 8008dc6:	f001 f84b 	bl	8009e60 <__lshift>
 8008dca:	4604      	mov	r4, r0
 8008dcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d059      	beq.n	8008e86 <_dtoa_r+0x8f6>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4648      	mov	r0, r9
 8008dd6:	f001 f8af 	bl	8009f38 <__mcmp>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	da53      	bge.n	8008e86 <_dtoa_r+0x8f6>
 8008dde:	1e7b      	subs	r3, r7, #1
 8008de0:	9304      	str	r3, [sp, #16]
 8008de2:	4649      	mov	r1, r9
 8008de4:	2300      	movs	r3, #0
 8008de6:	220a      	movs	r2, #10
 8008de8:	4658      	mov	r0, fp
 8008dea:	f000 fe43 	bl	8009a74 <__multadd>
 8008dee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008df0:	4681      	mov	r9, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f000 8172 	beq.w	80090dc <_dtoa_r+0xb4c>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	4629      	mov	r1, r5
 8008dfc:	220a      	movs	r2, #10
 8008dfe:	4658      	mov	r0, fp
 8008e00:	f000 fe38 	bl	8009a74 <__multadd>
 8008e04:	9b00      	ldr	r3, [sp, #0]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	4605      	mov	r5, r0
 8008e0a:	dc67      	bgt.n	8008edc <_dtoa_r+0x94c>
 8008e0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0e:	2b02      	cmp	r3, #2
 8008e10:	dc41      	bgt.n	8008e96 <_dtoa_r+0x906>
 8008e12:	e063      	b.n	8008edc <_dtoa_r+0x94c>
 8008e14:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008e16:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008e1a:	e746      	b.n	8008caa <_dtoa_r+0x71a>
 8008e1c:	9b07      	ldr	r3, [sp, #28]
 8008e1e:	1e5c      	subs	r4, r3, #1
 8008e20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e22:	42a3      	cmp	r3, r4
 8008e24:	bfbf      	itttt	lt
 8008e26:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008e28:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008e2a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008e2c:	1ae3      	sublt	r3, r4, r3
 8008e2e:	bfb4      	ite	lt
 8008e30:	18d2      	addlt	r2, r2, r3
 8008e32:	1b1c      	subge	r4, r3, r4
 8008e34:	9b07      	ldr	r3, [sp, #28]
 8008e36:	bfbc      	itt	lt
 8008e38:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008e3a:	2400      	movlt	r4, #0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	bfb5      	itete	lt
 8008e40:	eba8 0603 	sublt.w	r6, r8, r3
 8008e44:	9b07      	ldrge	r3, [sp, #28]
 8008e46:	2300      	movlt	r3, #0
 8008e48:	4646      	movge	r6, r8
 8008e4a:	e730      	b.n	8008cae <_dtoa_r+0x71e>
 8008e4c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e4e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e50:	4646      	mov	r6, r8
 8008e52:	e735      	b.n	8008cc0 <_dtoa_r+0x730>
 8008e54:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e56:	e75c      	b.n	8008d12 <_dtoa_r+0x782>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	e788      	b.n	8008d6e <_dtoa_r+0x7de>
 8008e5c:	3fe00000 	.word	0x3fe00000
 8008e60:	40240000 	.word	0x40240000
 8008e64:	40140000 	.word	0x40140000
 8008e68:	9b02      	ldr	r3, [sp, #8]
 8008e6a:	e780      	b.n	8008d6e <_dtoa_r+0x7de>
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e70:	e782      	b.n	8008d78 <_dtoa_r+0x7e8>
 8008e72:	d099      	beq.n	8008da8 <_dtoa_r+0x818>
 8008e74:	9a08      	ldr	r2, [sp, #32]
 8008e76:	331c      	adds	r3, #28
 8008e78:	441a      	add	r2, r3
 8008e7a:	4498      	add	r8, r3
 8008e7c:	441e      	add	r6, r3
 8008e7e:	9208      	str	r2, [sp, #32]
 8008e80:	e792      	b.n	8008da8 <_dtoa_r+0x818>
 8008e82:	4603      	mov	r3, r0
 8008e84:	e7f6      	b.n	8008e74 <_dtoa_r+0x8e4>
 8008e86:	9b07      	ldr	r3, [sp, #28]
 8008e88:	9704      	str	r7, [sp, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	dc20      	bgt.n	8008ed0 <_dtoa_r+0x940>
 8008e8e:	9300      	str	r3, [sp, #0]
 8008e90:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e92:	2b02      	cmp	r3, #2
 8008e94:	dd1e      	ble.n	8008ed4 <_dtoa_r+0x944>
 8008e96:	9b00      	ldr	r3, [sp, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	f47f aec0 	bne.w	8008c1e <_dtoa_r+0x68e>
 8008e9e:	4621      	mov	r1, r4
 8008ea0:	2205      	movs	r2, #5
 8008ea2:	4658      	mov	r0, fp
 8008ea4:	f000 fde6 	bl	8009a74 <__multadd>
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	4604      	mov	r4, r0
 8008eac:	4648      	mov	r0, r9
 8008eae:	f001 f843 	bl	8009f38 <__mcmp>
 8008eb2:	2800      	cmp	r0, #0
 8008eb4:	f77f aeb3 	ble.w	8008c1e <_dtoa_r+0x68e>
 8008eb8:	4656      	mov	r6, sl
 8008eba:	2331      	movs	r3, #49	@ 0x31
 8008ebc:	f806 3b01 	strb.w	r3, [r6], #1
 8008ec0:	9b04      	ldr	r3, [sp, #16]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	9304      	str	r3, [sp, #16]
 8008ec6:	e6ae      	b.n	8008c26 <_dtoa_r+0x696>
 8008ec8:	9c07      	ldr	r4, [sp, #28]
 8008eca:	9704      	str	r7, [sp, #16]
 8008ecc:	4625      	mov	r5, r4
 8008ece:	e7f3      	b.n	8008eb8 <_dtoa_r+0x928>
 8008ed0:	9b07      	ldr	r3, [sp, #28]
 8008ed2:	9300      	str	r3, [sp, #0]
 8008ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	f000 8104 	beq.w	80090e4 <_dtoa_r+0xb54>
 8008edc:	2e00      	cmp	r6, #0
 8008ede:	dd05      	ble.n	8008eec <_dtoa_r+0x95c>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4632      	mov	r2, r6
 8008ee4:	4658      	mov	r0, fp
 8008ee6:	f000 ffbb 	bl	8009e60 <__lshift>
 8008eea:	4605      	mov	r5, r0
 8008eec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d05a      	beq.n	8008fa8 <_dtoa_r+0xa18>
 8008ef2:	6869      	ldr	r1, [r5, #4]
 8008ef4:	4658      	mov	r0, fp
 8008ef6:	f000 fd5b 	bl	80099b0 <_Balloc>
 8008efa:	4606      	mov	r6, r0
 8008efc:	b928      	cbnz	r0, 8008f0a <_dtoa_r+0x97a>
 8008efe:	4b84      	ldr	r3, [pc, #528]	@ (8009110 <_dtoa_r+0xb80>)
 8008f00:	4602      	mov	r2, r0
 8008f02:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008f06:	f7ff bb5a 	b.w	80085be <_dtoa_r+0x2e>
 8008f0a:	692a      	ldr	r2, [r5, #16]
 8008f0c:	3202      	adds	r2, #2
 8008f0e:	0092      	lsls	r2, r2, #2
 8008f10:	f105 010c 	add.w	r1, r5, #12
 8008f14:	300c      	adds	r0, #12
 8008f16:	f7ff fa94 	bl	8008442 <memcpy>
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	4631      	mov	r1, r6
 8008f1e:	4658      	mov	r0, fp
 8008f20:	f000 ff9e 	bl	8009e60 <__lshift>
 8008f24:	f10a 0301 	add.w	r3, sl, #1
 8008f28:	9307      	str	r3, [sp, #28]
 8008f2a:	9b00      	ldr	r3, [sp, #0]
 8008f2c:	4453      	add	r3, sl
 8008f2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008f30:	9b02      	ldr	r3, [sp, #8]
 8008f32:	f003 0301 	and.w	r3, r3, #1
 8008f36:	462f      	mov	r7, r5
 8008f38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	9b07      	ldr	r3, [sp, #28]
 8008f3e:	4621      	mov	r1, r4
 8008f40:	3b01      	subs	r3, #1
 8008f42:	4648      	mov	r0, r9
 8008f44:	9300      	str	r3, [sp, #0]
 8008f46:	f7ff fa99 	bl	800847c <quorem>
 8008f4a:	4639      	mov	r1, r7
 8008f4c:	9002      	str	r0, [sp, #8]
 8008f4e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f52:	4648      	mov	r0, r9
 8008f54:	f000 fff0 	bl	8009f38 <__mcmp>
 8008f58:	462a      	mov	r2, r5
 8008f5a:	9008      	str	r0, [sp, #32]
 8008f5c:	4621      	mov	r1, r4
 8008f5e:	4658      	mov	r0, fp
 8008f60:	f001 f806 	bl	8009f70 <__mdiff>
 8008f64:	68c2      	ldr	r2, [r0, #12]
 8008f66:	4606      	mov	r6, r0
 8008f68:	bb02      	cbnz	r2, 8008fac <_dtoa_r+0xa1c>
 8008f6a:	4601      	mov	r1, r0
 8008f6c:	4648      	mov	r0, r9
 8008f6e:	f000 ffe3 	bl	8009f38 <__mcmp>
 8008f72:	4602      	mov	r2, r0
 8008f74:	4631      	mov	r1, r6
 8008f76:	4658      	mov	r0, fp
 8008f78:	920e      	str	r2, [sp, #56]	@ 0x38
 8008f7a:	f000 fd59 	bl	8009a30 <_Bfree>
 8008f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008f82:	9e07      	ldr	r6, [sp, #28]
 8008f84:	ea43 0102 	orr.w	r1, r3, r2
 8008f88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f8a:	4319      	orrs	r1, r3
 8008f8c:	d110      	bne.n	8008fb0 <_dtoa_r+0xa20>
 8008f8e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f92:	d029      	beq.n	8008fe8 <_dtoa_r+0xa58>
 8008f94:	9b08      	ldr	r3, [sp, #32]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dd02      	ble.n	8008fa0 <_dtoa_r+0xa10>
 8008f9a:	9b02      	ldr	r3, [sp, #8]
 8008f9c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008fa0:	9b00      	ldr	r3, [sp, #0]
 8008fa2:	f883 8000 	strb.w	r8, [r3]
 8008fa6:	e63f      	b.n	8008c28 <_dtoa_r+0x698>
 8008fa8:	4628      	mov	r0, r5
 8008faa:	e7bb      	b.n	8008f24 <_dtoa_r+0x994>
 8008fac:	2201      	movs	r2, #1
 8008fae:	e7e1      	b.n	8008f74 <_dtoa_r+0x9e4>
 8008fb0:	9b08      	ldr	r3, [sp, #32]
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	db04      	blt.n	8008fc0 <_dtoa_r+0xa30>
 8008fb6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008fb8:	430b      	orrs	r3, r1
 8008fba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008fbc:	430b      	orrs	r3, r1
 8008fbe:	d120      	bne.n	8009002 <_dtoa_r+0xa72>
 8008fc0:	2a00      	cmp	r2, #0
 8008fc2:	dded      	ble.n	8008fa0 <_dtoa_r+0xa10>
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	4658      	mov	r0, fp
 8008fca:	f000 ff49 	bl	8009e60 <__lshift>
 8008fce:	4621      	mov	r1, r4
 8008fd0:	4681      	mov	r9, r0
 8008fd2:	f000 ffb1 	bl	8009f38 <__mcmp>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	dc03      	bgt.n	8008fe2 <_dtoa_r+0xa52>
 8008fda:	d1e1      	bne.n	8008fa0 <_dtoa_r+0xa10>
 8008fdc:	f018 0f01 	tst.w	r8, #1
 8008fe0:	d0de      	beq.n	8008fa0 <_dtoa_r+0xa10>
 8008fe2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fe6:	d1d8      	bne.n	8008f9a <_dtoa_r+0xa0a>
 8008fe8:	9a00      	ldr	r2, [sp, #0]
 8008fea:	2339      	movs	r3, #57	@ 0x39
 8008fec:	7013      	strb	r3, [r2, #0]
 8008fee:	4633      	mov	r3, r6
 8008ff0:	461e      	mov	r6, r3
 8008ff2:	3b01      	subs	r3, #1
 8008ff4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008ff8:	2a39      	cmp	r2, #57	@ 0x39
 8008ffa:	d052      	beq.n	80090a2 <_dtoa_r+0xb12>
 8008ffc:	3201      	adds	r2, #1
 8008ffe:	701a      	strb	r2, [r3, #0]
 8009000:	e612      	b.n	8008c28 <_dtoa_r+0x698>
 8009002:	2a00      	cmp	r2, #0
 8009004:	dd07      	ble.n	8009016 <_dtoa_r+0xa86>
 8009006:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800900a:	d0ed      	beq.n	8008fe8 <_dtoa_r+0xa58>
 800900c:	9a00      	ldr	r2, [sp, #0]
 800900e:	f108 0301 	add.w	r3, r8, #1
 8009012:	7013      	strb	r3, [r2, #0]
 8009014:	e608      	b.n	8008c28 <_dtoa_r+0x698>
 8009016:	9b07      	ldr	r3, [sp, #28]
 8009018:	9a07      	ldr	r2, [sp, #28]
 800901a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800901e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009020:	4293      	cmp	r3, r2
 8009022:	d028      	beq.n	8009076 <_dtoa_r+0xae6>
 8009024:	4649      	mov	r1, r9
 8009026:	2300      	movs	r3, #0
 8009028:	220a      	movs	r2, #10
 800902a:	4658      	mov	r0, fp
 800902c:	f000 fd22 	bl	8009a74 <__multadd>
 8009030:	42af      	cmp	r7, r5
 8009032:	4681      	mov	r9, r0
 8009034:	f04f 0300 	mov.w	r3, #0
 8009038:	f04f 020a 	mov.w	r2, #10
 800903c:	4639      	mov	r1, r7
 800903e:	4658      	mov	r0, fp
 8009040:	d107      	bne.n	8009052 <_dtoa_r+0xac2>
 8009042:	f000 fd17 	bl	8009a74 <__multadd>
 8009046:	4607      	mov	r7, r0
 8009048:	4605      	mov	r5, r0
 800904a:	9b07      	ldr	r3, [sp, #28]
 800904c:	3301      	adds	r3, #1
 800904e:	9307      	str	r3, [sp, #28]
 8009050:	e774      	b.n	8008f3c <_dtoa_r+0x9ac>
 8009052:	f000 fd0f 	bl	8009a74 <__multadd>
 8009056:	4629      	mov	r1, r5
 8009058:	4607      	mov	r7, r0
 800905a:	2300      	movs	r3, #0
 800905c:	220a      	movs	r2, #10
 800905e:	4658      	mov	r0, fp
 8009060:	f000 fd08 	bl	8009a74 <__multadd>
 8009064:	4605      	mov	r5, r0
 8009066:	e7f0      	b.n	800904a <_dtoa_r+0xaba>
 8009068:	9b00      	ldr	r3, [sp, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	bfcc      	ite	gt
 800906e:	461e      	movgt	r6, r3
 8009070:	2601      	movle	r6, #1
 8009072:	4456      	add	r6, sl
 8009074:	2700      	movs	r7, #0
 8009076:	4649      	mov	r1, r9
 8009078:	2201      	movs	r2, #1
 800907a:	4658      	mov	r0, fp
 800907c:	f000 fef0 	bl	8009e60 <__lshift>
 8009080:	4621      	mov	r1, r4
 8009082:	4681      	mov	r9, r0
 8009084:	f000 ff58 	bl	8009f38 <__mcmp>
 8009088:	2800      	cmp	r0, #0
 800908a:	dcb0      	bgt.n	8008fee <_dtoa_r+0xa5e>
 800908c:	d102      	bne.n	8009094 <_dtoa_r+0xb04>
 800908e:	f018 0f01 	tst.w	r8, #1
 8009092:	d1ac      	bne.n	8008fee <_dtoa_r+0xa5e>
 8009094:	4633      	mov	r3, r6
 8009096:	461e      	mov	r6, r3
 8009098:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800909c:	2a30      	cmp	r2, #48	@ 0x30
 800909e:	d0fa      	beq.n	8009096 <_dtoa_r+0xb06>
 80090a0:	e5c2      	b.n	8008c28 <_dtoa_r+0x698>
 80090a2:	459a      	cmp	sl, r3
 80090a4:	d1a4      	bne.n	8008ff0 <_dtoa_r+0xa60>
 80090a6:	9b04      	ldr	r3, [sp, #16]
 80090a8:	3301      	adds	r3, #1
 80090aa:	9304      	str	r3, [sp, #16]
 80090ac:	2331      	movs	r3, #49	@ 0x31
 80090ae:	f88a 3000 	strb.w	r3, [sl]
 80090b2:	e5b9      	b.n	8008c28 <_dtoa_r+0x698>
 80090b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009114 <_dtoa_r+0xb84>
 80090ba:	b11b      	cbz	r3, 80090c4 <_dtoa_r+0xb34>
 80090bc:	f10a 0308 	add.w	r3, sl, #8
 80090c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090c2:	6013      	str	r3, [r2, #0]
 80090c4:	4650      	mov	r0, sl
 80090c6:	b019      	add	sp, #100	@ 0x64
 80090c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	f77f ae37 	ble.w	8008d42 <_dtoa_r+0x7b2>
 80090d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80090d8:	2001      	movs	r0, #1
 80090da:	e655      	b.n	8008d88 <_dtoa_r+0x7f8>
 80090dc:	9b00      	ldr	r3, [sp, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	f77f aed6 	ble.w	8008e90 <_dtoa_r+0x900>
 80090e4:	4656      	mov	r6, sl
 80090e6:	4621      	mov	r1, r4
 80090e8:	4648      	mov	r0, r9
 80090ea:	f7ff f9c7 	bl	800847c <quorem>
 80090ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80090f2:	f806 8b01 	strb.w	r8, [r6], #1
 80090f6:	9b00      	ldr	r3, [sp, #0]
 80090f8:	eba6 020a 	sub.w	r2, r6, sl
 80090fc:	4293      	cmp	r3, r2
 80090fe:	ddb3      	ble.n	8009068 <_dtoa_r+0xad8>
 8009100:	4649      	mov	r1, r9
 8009102:	2300      	movs	r3, #0
 8009104:	220a      	movs	r2, #10
 8009106:	4658      	mov	r0, fp
 8009108:	f000 fcb4 	bl	8009a74 <__multadd>
 800910c:	4681      	mov	r9, r0
 800910e:	e7ea      	b.n	80090e6 <_dtoa_r+0xb56>
 8009110:	0800c34d 	.word	0x0800c34d
 8009114:	0800c2d1 	.word	0x0800c2d1

08009118 <_free_r>:
 8009118:	b538      	push	{r3, r4, r5, lr}
 800911a:	4605      	mov	r5, r0
 800911c:	2900      	cmp	r1, #0
 800911e:	d041      	beq.n	80091a4 <_free_r+0x8c>
 8009120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009124:	1f0c      	subs	r4, r1, #4
 8009126:	2b00      	cmp	r3, #0
 8009128:	bfb8      	it	lt
 800912a:	18e4      	addlt	r4, r4, r3
 800912c:	f000 fc34 	bl	8009998 <__malloc_lock>
 8009130:	4a1d      	ldr	r2, [pc, #116]	@ (80091a8 <_free_r+0x90>)
 8009132:	6813      	ldr	r3, [r2, #0]
 8009134:	b933      	cbnz	r3, 8009144 <_free_r+0x2c>
 8009136:	6063      	str	r3, [r4, #4]
 8009138:	6014      	str	r4, [r2, #0]
 800913a:	4628      	mov	r0, r5
 800913c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009140:	f000 bc30 	b.w	80099a4 <__malloc_unlock>
 8009144:	42a3      	cmp	r3, r4
 8009146:	d908      	bls.n	800915a <_free_r+0x42>
 8009148:	6820      	ldr	r0, [r4, #0]
 800914a:	1821      	adds	r1, r4, r0
 800914c:	428b      	cmp	r3, r1
 800914e:	bf01      	itttt	eq
 8009150:	6819      	ldreq	r1, [r3, #0]
 8009152:	685b      	ldreq	r3, [r3, #4]
 8009154:	1809      	addeq	r1, r1, r0
 8009156:	6021      	streq	r1, [r4, #0]
 8009158:	e7ed      	b.n	8009136 <_free_r+0x1e>
 800915a:	461a      	mov	r2, r3
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	b10b      	cbz	r3, 8009164 <_free_r+0x4c>
 8009160:	42a3      	cmp	r3, r4
 8009162:	d9fa      	bls.n	800915a <_free_r+0x42>
 8009164:	6811      	ldr	r1, [r2, #0]
 8009166:	1850      	adds	r0, r2, r1
 8009168:	42a0      	cmp	r0, r4
 800916a:	d10b      	bne.n	8009184 <_free_r+0x6c>
 800916c:	6820      	ldr	r0, [r4, #0]
 800916e:	4401      	add	r1, r0
 8009170:	1850      	adds	r0, r2, r1
 8009172:	4283      	cmp	r3, r0
 8009174:	6011      	str	r1, [r2, #0]
 8009176:	d1e0      	bne.n	800913a <_free_r+0x22>
 8009178:	6818      	ldr	r0, [r3, #0]
 800917a:	685b      	ldr	r3, [r3, #4]
 800917c:	6053      	str	r3, [r2, #4]
 800917e:	4408      	add	r0, r1
 8009180:	6010      	str	r0, [r2, #0]
 8009182:	e7da      	b.n	800913a <_free_r+0x22>
 8009184:	d902      	bls.n	800918c <_free_r+0x74>
 8009186:	230c      	movs	r3, #12
 8009188:	602b      	str	r3, [r5, #0]
 800918a:	e7d6      	b.n	800913a <_free_r+0x22>
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	1821      	adds	r1, r4, r0
 8009190:	428b      	cmp	r3, r1
 8009192:	bf04      	itt	eq
 8009194:	6819      	ldreq	r1, [r3, #0]
 8009196:	685b      	ldreq	r3, [r3, #4]
 8009198:	6063      	str	r3, [r4, #4]
 800919a:	bf04      	itt	eq
 800919c:	1809      	addeq	r1, r1, r0
 800919e:	6021      	streq	r1, [r4, #0]
 80091a0:	6054      	str	r4, [r2, #4]
 80091a2:	e7ca      	b.n	800913a <_free_r+0x22>
 80091a4:	bd38      	pop	{r3, r4, r5, pc}
 80091a6:	bf00      	nop
 80091a8:	200007e8 	.word	0x200007e8

080091ac <rshift>:
 80091ac:	6903      	ldr	r3, [r0, #16]
 80091ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091ba:	f100 0414 	add.w	r4, r0, #20
 80091be:	dd45      	ble.n	800924c <rshift+0xa0>
 80091c0:	f011 011f 	ands.w	r1, r1, #31
 80091c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80091c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80091cc:	d10c      	bne.n	80091e8 <rshift+0x3c>
 80091ce:	f100 0710 	add.w	r7, r0, #16
 80091d2:	4629      	mov	r1, r5
 80091d4:	42b1      	cmp	r1, r6
 80091d6:	d334      	bcc.n	8009242 <rshift+0x96>
 80091d8:	1a9b      	subs	r3, r3, r2
 80091da:	009b      	lsls	r3, r3, #2
 80091dc:	1eea      	subs	r2, r5, #3
 80091de:	4296      	cmp	r6, r2
 80091e0:	bf38      	it	cc
 80091e2:	2300      	movcc	r3, #0
 80091e4:	4423      	add	r3, r4
 80091e6:	e015      	b.n	8009214 <rshift+0x68>
 80091e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80091ec:	f1c1 0820 	rsb	r8, r1, #32
 80091f0:	40cf      	lsrs	r7, r1
 80091f2:	f105 0e04 	add.w	lr, r5, #4
 80091f6:	46a1      	mov	r9, r4
 80091f8:	4576      	cmp	r6, lr
 80091fa:	46f4      	mov	ip, lr
 80091fc:	d815      	bhi.n	800922a <rshift+0x7e>
 80091fe:	1a9a      	subs	r2, r3, r2
 8009200:	0092      	lsls	r2, r2, #2
 8009202:	3a04      	subs	r2, #4
 8009204:	3501      	adds	r5, #1
 8009206:	42ae      	cmp	r6, r5
 8009208:	bf38      	it	cc
 800920a:	2200      	movcc	r2, #0
 800920c:	18a3      	adds	r3, r4, r2
 800920e:	50a7      	str	r7, [r4, r2]
 8009210:	b107      	cbz	r7, 8009214 <rshift+0x68>
 8009212:	3304      	adds	r3, #4
 8009214:	1b1a      	subs	r2, r3, r4
 8009216:	42a3      	cmp	r3, r4
 8009218:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800921c:	bf08      	it	eq
 800921e:	2300      	moveq	r3, #0
 8009220:	6102      	str	r2, [r0, #16]
 8009222:	bf08      	it	eq
 8009224:	6143      	streq	r3, [r0, #20]
 8009226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800922a:	f8dc c000 	ldr.w	ip, [ip]
 800922e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009232:	ea4c 0707 	orr.w	r7, ip, r7
 8009236:	f849 7b04 	str.w	r7, [r9], #4
 800923a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800923e:	40cf      	lsrs	r7, r1
 8009240:	e7da      	b.n	80091f8 <rshift+0x4c>
 8009242:	f851 cb04 	ldr.w	ip, [r1], #4
 8009246:	f847 cf04 	str.w	ip, [r7, #4]!
 800924a:	e7c3      	b.n	80091d4 <rshift+0x28>
 800924c:	4623      	mov	r3, r4
 800924e:	e7e1      	b.n	8009214 <rshift+0x68>

08009250 <__hexdig_fun>:
 8009250:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009254:	2b09      	cmp	r3, #9
 8009256:	d802      	bhi.n	800925e <__hexdig_fun+0xe>
 8009258:	3820      	subs	r0, #32
 800925a:	b2c0      	uxtb	r0, r0
 800925c:	4770      	bx	lr
 800925e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009262:	2b05      	cmp	r3, #5
 8009264:	d801      	bhi.n	800926a <__hexdig_fun+0x1a>
 8009266:	3847      	subs	r0, #71	@ 0x47
 8009268:	e7f7      	b.n	800925a <__hexdig_fun+0xa>
 800926a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800926e:	2b05      	cmp	r3, #5
 8009270:	d801      	bhi.n	8009276 <__hexdig_fun+0x26>
 8009272:	3827      	subs	r0, #39	@ 0x27
 8009274:	e7f1      	b.n	800925a <__hexdig_fun+0xa>
 8009276:	2000      	movs	r0, #0
 8009278:	4770      	bx	lr
	...

0800927c <__gethex>:
 800927c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009280:	b085      	sub	sp, #20
 8009282:	468a      	mov	sl, r1
 8009284:	9302      	str	r3, [sp, #8]
 8009286:	680b      	ldr	r3, [r1, #0]
 8009288:	9001      	str	r0, [sp, #4]
 800928a:	4690      	mov	r8, r2
 800928c:	1c9c      	adds	r4, r3, #2
 800928e:	46a1      	mov	r9, r4
 8009290:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009294:	2830      	cmp	r0, #48	@ 0x30
 8009296:	d0fa      	beq.n	800928e <__gethex+0x12>
 8009298:	eba9 0303 	sub.w	r3, r9, r3
 800929c:	f1a3 0b02 	sub.w	fp, r3, #2
 80092a0:	f7ff ffd6 	bl	8009250 <__hexdig_fun>
 80092a4:	4605      	mov	r5, r0
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d168      	bne.n	800937c <__gethex+0x100>
 80092aa:	49a0      	ldr	r1, [pc, #640]	@ (800952c <__gethex+0x2b0>)
 80092ac:	2201      	movs	r2, #1
 80092ae:	4648      	mov	r0, r9
 80092b0:	f7ff f82b 	bl	800830a <strncmp>
 80092b4:	4607      	mov	r7, r0
 80092b6:	2800      	cmp	r0, #0
 80092b8:	d167      	bne.n	800938a <__gethex+0x10e>
 80092ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80092be:	4626      	mov	r6, r4
 80092c0:	f7ff ffc6 	bl	8009250 <__hexdig_fun>
 80092c4:	2800      	cmp	r0, #0
 80092c6:	d062      	beq.n	800938e <__gethex+0x112>
 80092c8:	4623      	mov	r3, r4
 80092ca:	7818      	ldrb	r0, [r3, #0]
 80092cc:	2830      	cmp	r0, #48	@ 0x30
 80092ce:	4699      	mov	r9, r3
 80092d0:	f103 0301 	add.w	r3, r3, #1
 80092d4:	d0f9      	beq.n	80092ca <__gethex+0x4e>
 80092d6:	f7ff ffbb 	bl	8009250 <__hexdig_fun>
 80092da:	fab0 f580 	clz	r5, r0
 80092de:	096d      	lsrs	r5, r5, #5
 80092e0:	f04f 0b01 	mov.w	fp, #1
 80092e4:	464a      	mov	r2, r9
 80092e6:	4616      	mov	r6, r2
 80092e8:	3201      	adds	r2, #1
 80092ea:	7830      	ldrb	r0, [r6, #0]
 80092ec:	f7ff ffb0 	bl	8009250 <__hexdig_fun>
 80092f0:	2800      	cmp	r0, #0
 80092f2:	d1f8      	bne.n	80092e6 <__gethex+0x6a>
 80092f4:	498d      	ldr	r1, [pc, #564]	@ (800952c <__gethex+0x2b0>)
 80092f6:	2201      	movs	r2, #1
 80092f8:	4630      	mov	r0, r6
 80092fa:	f7ff f806 	bl	800830a <strncmp>
 80092fe:	2800      	cmp	r0, #0
 8009300:	d13f      	bne.n	8009382 <__gethex+0x106>
 8009302:	b944      	cbnz	r4, 8009316 <__gethex+0x9a>
 8009304:	1c74      	adds	r4, r6, #1
 8009306:	4622      	mov	r2, r4
 8009308:	4616      	mov	r6, r2
 800930a:	3201      	adds	r2, #1
 800930c:	7830      	ldrb	r0, [r6, #0]
 800930e:	f7ff ff9f 	bl	8009250 <__hexdig_fun>
 8009312:	2800      	cmp	r0, #0
 8009314:	d1f8      	bne.n	8009308 <__gethex+0x8c>
 8009316:	1ba4      	subs	r4, r4, r6
 8009318:	00a7      	lsls	r7, r4, #2
 800931a:	7833      	ldrb	r3, [r6, #0]
 800931c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009320:	2b50      	cmp	r3, #80	@ 0x50
 8009322:	d13e      	bne.n	80093a2 <__gethex+0x126>
 8009324:	7873      	ldrb	r3, [r6, #1]
 8009326:	2b2b      	cmp	r3, #43	@ 0x2b
 8009328:	d033      	beq.n	8009392 <__gethex+0x116>
 800932a:	2b2d      	cmp	r3, #45	@ 0x2d
 800932c:	d034      	beq.n	8009398 <__gethex+0x11c>
 800932e:	1c71      	adds	r1, r6, #1
 8009330:	2400      	movs	r4, #0
 8009332:	7808      	ldrb	r0, [r1, #0]
 8009334:	f7ff ff8c 	bl	8009250 <__hexdig_fun>
 8009338:	1e43      	subs	r3, r0, #1
 800933a:	b2db      	uxtb	r3, r3
 800933c:	2b18      	cmp	r3, #24
 800933e:	d830      	bhi.n	80093a2 <__gethex+0x126>
 8009340:	f1a0 0210 	sub.w	r2, r0, #16
 8009344:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009348:	f7ff ff82 	bl	8009250 <__hexdig_fun>
 800934c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009350:	fa5f fc8c 	uxtb.w	ip, ip
 8009354:	f1bc 0f18 	cmp.w	ip, #24
 8009358:	f04f 030a 	mov.w	r3, #10
 800935c:	d91e      	bls.n	800939c <__gethex+0x120>
 800935e:	b104      	cbz	r4, 8009362 <__gethex+0xe6>
 8009360:	4252      	negs	r2, r2
 8009362:	4417      	add	r7, r2
 8009364:	f8ca 1000 	str.w	r1, [sl]
 8009368:	b1ed      	cbz	r5, 80093a6 <__gethex+0x12a>
 800936a:	f1bb 0f00 	cmp.w	fp, #0
 800936e:	bf0c      	ite	eq
 8009370:	2506      	moveq	r5, #6
 8009372:	2500      	movne	r5, #0
 8009374:	4628      	mov	r0, r5
 8009376:	b005      	add	sp, #20
 8009378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937c:	2500      	movs	r5, #0
 800937e:	462c      	mov	r4, r5
 8009380:	e7b0      	b.n	80092e4 <__gethex+0x68>
 8009382:	2c00      	cmp	r4, #0
 8009384:	d1c7      	bne.n	8009316 <__gethex+0x9a>
 8009386:	4627      	mov	r7, r4
 8009388:	e7c7      	b.n	800931a <__gethex+0x9e>
 800938a:	464e      	mov	r6, r9
 800938c:	462f      	mov	r7, r5
 800938e:	2501      	movs	r5, #1
 8009390:	e7c3      	b.n	800931a <__gethex+0x9e>
 8009392:	2400      	movs	r4, #0
 8009394:	1cb1      	adds	r1, r6, #2
 8009396:	e7cc      	b.n	8009332 <__gethex+0xb6>
 8009398:	2401      	movs	r4, #1
 800939a:	e7fb      	b.n	8009394 <__gethex+0x118>
 800939c:	fb03 0002 	mla	r0, r3, r2, r0
 80093a0:	e7ce      	b.n	8009340 <__gethex+0xc4>
 80093a2:	4631      	mov	r1, r6
 80093a4:	e7de      	b.n	8009364 <__gethex+0xe8>
 80093a6:	eba6 0309 	sub.w	r3, r6, r9
 80093aa:	3b01      	subs	r3, #1
 80093ac:	4629      	mov	r1, r5
 80093ae:	2b07      	cmp	r3, #7
 80093b0:	dc0a      	bgt.n	80093c8 <__gethex+0x14c>
 80093b2:	9801      	ldr	r0, [sp, #4]
 80093b4:	f000 fafc 	bl	80099b0 <_Balloc>
 80093b8:	4604      	mov	r4, r0
 80093ba:	b940      	cbnz	r0, 80093ce <__gethex+0x152>
 80093bc:	4b5c      	ldr	r3, [pc, #368]	@ (8009530 <__gethex+0x2b4>)
 80093be:	4602      	mov	r2, r0
 80093c0:	21e4      	movs	r1, #228	@ 0xe4
 80093c2:	485c      	ldr	r0, [pc, #368]	@ (8009534 <__gethex+0x2b8>)
 80093c4:	f001 fc32 	bl	800ac2c <__assert_func>
 80093c8:	3101      	adds	r1, #1
 80093ca:	105b      	asrs	r3, r3, #1
 80093cc:	e7ef      	b.n	80093ae <__gethex+0x132>
 80093ce:	f100 0a14 	add.w	sl, r0, #20
 80093d2:	2300      	movs	r3, #0
 80093d4:	4655      	mov	r5, sl
 80093d6:	469b      	mov	fp, r3
 80093d8:	45b1      	cmp	r9, r6
 80093da:	d337      	bcc.n	800944c <__gethex+0x1d0>
 80093dc:	f845 bb04 	str.w	fp, [r5], #4
 80093e0:	eba5 050a 	sub.w	r5, r5, sl
 80093e4:	10ad      	asrs	r5, r5, #2
 80093e6:	6125      	str	r5, [r4, #16]
 80093e8:	4658      	mov	r0, fp
 80093ea:	f000 fbd3 	bl	8009b94 <__hi0bits>
 80093ee:	016d      	lsls	r5, r5, #5
 80093f0:	f8d8 6000 	ldr.w	r6, [r8]
 80093f4:	1a2d      	subs	r5, r5, r0
 80093f6:	42b5      	cmp	r5, r6
 80093f8:	dd54      	ble.n	80094a4 <__gethex+0x228>
 80093fa:	1bad      	subs	r5, r5, r6
 80093fc:	4629      	mov	r1, r5
 80093fe:	4620      	mov	r0, r4
 8009400:	f000 ff67 	bl	800a2d2 <__any_on>
 8009404:	4681      	mov	r9, r0
 8009406:	b178      	cbz	r0, 8009428 <__gethex+0x1ac>
 8009408:	1e6b      	subs	r3, r5, #1
 800940a:	1159      	asrs	r1, r3, #5
 800940c:	f003 021f 	and.w	r2, r3, #31
 8009410:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009414:	f04f 0901 	mov.w	r9, #1
 8009418:	fa09 f202 	lsl.w	r2, r9, r2
 800941c:	420a      	tst	r2, r1
 800941e:	d003      	beq.n	8009428 <__gethex+0x1ac>
 8009420:	454b      	cmp	r3, r9
 8009422:	dc36      	bgt.n	8009492 <__gethex+0x216>
 8009424:	f04f 0902 	mov.w	r9, #2
 8009428:	4629      	mov	r1, r5
 800942a:	4620      	mov	r0, r4
 800942c:	f7ff febe 	bl	80091ac <rshift>
 8009430:	442f      	add	r7, r5
 8009432:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009436:	42bb      	cmp	r3, r7
 8009438:	da42      	bge.n	80094c0 <__gethex+0x244>
 800943a:	9801      	ldr	r0, [sp, #4]
 800943c:	4621      	mov	r1, r4
 800943e:	f000 faf7 	bl	8009a30 <_Bfree>
 8009442:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009444:	2300      	movs	r3, #0
 8009446:	6013      	str	r3, [r2, #0]
 8009448:	25a3      	movs	r5, #163	@ 0xa3
 800944a:	e793      	b.n	8009374 <__gethex+0xf8>
 800944c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009450:	2a2e      	cmp	r2, #46	@ 0x2e
 8009452:	d012      	beq.n	800947a <__gethex+0x1fe>
 8009454:	2b20      	cmp	r3, #32
 8009456:	d104      	bne.n	8009462 <__gethex+0x1e6>
 8009458:	f845 bb04 	str.w	fp, [r5], #4
 800945c:	f04f 0b00 	mov.w	fp, #0
 8009460:	465b      	mov	r3, fp
 8009462:	7830      	ldrb	r0, [r6, #0]
 8009464:	9303      	str	r3, [sp, #12]
 8009466:	f7ff fef3 	bl	8009250 <__hexdig_fun>
 800946a:	9b03      	ldr	r3, [sp, #12]
 800946c:	f000 000f 	and.w	r0, r0, #15
 8009470:	4098      	lsls	r0, r3
 8009472:	ea4b 0b00 	orr.w	fp, fp, r0
 8009476:	3304      	adds	r3, #4
 8009478:	e7ae      	b.n	80093d8 <__gethex+0x15c>
 800947a:	45b1      	cmp	r9, r6
 800947c:	d8ea      	bhi.n	8009454 <__gethex+0x1d8>
 800947e:	492b      	ldr	r1, [pc, #172]	@ (800952c <__gethex+0x2b0>)
 8009480:	9303      	str	r3, [sp, #12]
 8009482:	2201      	movs	r2, #1
 8009484:	4630      	mov	r0, r6
 8009486:	f7fe ff40 	bl	800830a <strncmp>
 800948a:	9b03      	ldr	r3, [sp, #12]
 800948c:	2800      	cmp	r0, #0
 800948e:	d1e1      	bne.n	8009454 <__gethex+0x1d8>
 8009490:	e7a2      	b.n	80093d8 <__gethex+0x15c>
 8009492:	1ea9      	subs	r1, r5, #2
 8009494:	4620      	mov	r0, r4
 8009496:	f000 ff1c 	bl	800a2d2 <__any_on>
 800949a:	2800      	cmp	r0, #0
 800949c:	d0c2      	beq.n	8009424 <__gethex+0x1a8>
 800949e:	f04f 0903 	mov.w	r9, #3
 80094a2:	e7c1      	b.n	8009428 <__gethex+0x1ac>
 80094a4:	da09      	bge.n	80094ba <__gethex+0x23e>
 80094a6:	1b75      	subs	r5, r6, r5
 80094a8:	4621      	mov	r1, r4
 80094aa:	9801      	ldr	r0, [sp, #4]
 80094ac:	462a      	mov	r2, r5
 80094ae:	f000 fcd7 	bl	8009e60 <__lshift>
 80094b2:	1b7f      	subs	r7, r7, r5
 80094b4:	4604      	mov	r4, r0
 80094b6:	f100 0a14 	add.w	sl, r0, #20
 80094ba:	f04f 0900 	mov.w	r9, #0
 80094be:	e7b8      	b.n	8009432 <__gethex+0x1b6>
 80094c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80094c4:	42bd      	cmp	r5, r7
 80094c6:	dd6f      	ble.n	80095a8 <__gethex+0x32c>
 80094c8:	1bed      	subs	r5, r5, r7
 80094ca:	42ae      	cmp	r6, r5
 80094cc:	dc34      	bgt.n	8009538 <__gethex+0x2bc>
 80094ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80094d2:	2b02      	cmp	r3, #2
 80094d4:	d022      	beq.n	800951c <__gethex+0x2a0>
 80094d6:	2b03      	cmp	r3, #3
 80094d8:	d024      	beq.n	8009524 <__gethex+0x2a8>
 80094da:	2b01      	cmp	r3, #1
 80094dc:	d115      	bne.n	800950a <__gethex+0x28e>
 80094de:	42ae      	cmp	r6, r5
 80094e0:	d113      	bne.n	800950a <__gethex+0x28e>
 80094e2:	2e01      	cmp	r6, #1
 80094e4:	d10b      	bne.n	80094fe <__gethex+0x282>
 80094e6:	9a02      	ldr	r2, [sp, #8]
 80094e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80094ec:	6013      	str	r3, [r2, #0]
 80094ee:	2301      	movs	r3, #1
 80094f0:	6123      	str	r3, [r4, #16]
 80094f2:	f8ca 3000 	str.w	r3, [sl]
 80094f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094f8:	2562      	movs	r5, #98	@ 0x62
 80094fa:	601c      	str	r4, [r3, #0]
 80094fc:	e73a      	b.n	8009374 <__gethex+0xf8>
 80094fe:	1e71      	subs	r1, r6, #1
 8009500:	4620      	mov	r0, r4
 8009502:	f000 fee6 	bl	800a2d2 <__any_on>
 8009506:	2800      	cmp	r0, #0
 8009508:	d1ed      	bne.n	80094e6 <__gethex+0x26a>
 800950a:	9801      	ldr	r0, [sp, #4]
 800950c:	4621      	mov	r1, r4
 800950e:	f000 fa8f 	bl	8009a30 <_Bfree>
 8009512:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009514:	2300      	movs	r3, #0
 8009516:	6013      	str	r3, [r2, #0]
 8009518:	2550      	movs	r5, #80	@ 0x50
 800951a:	e72b      	b.n	8009374 <__gethex+0xf8>
 800951c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800951e:	2b00      	cmp	r3, #0
 8009520:	d1f3      	bne.n	800950a <__gethex+0x28e>
 8009522:	e7e0      	b.n	80094e6 <__gethex+0x26a>
 8009524:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009526:	2b00      	cmp	r3, #0
 8009528:	d1dd      	bne.n	80094e6 <__gethex+0x26a>
 800952a:	e7ee      	b.n	800950a <__gethex+0x28e>
 800952c:	0800c238 	.word	0x0800c238
 8009530:	0800c34d 	.word	0x0800c34d
 8009534:	0800c35e 	.word	0x0800c35e
 8009538:	1e6f      	subs	r7, r5, #1
 800953a:	f1b9 0f00 	cmp.w	r9, #0
 800953e:	d130      	bne.n	80095a2 <__gethex+0x326>
 8009540:	b127      	cbz	r7, 800954c <__gethex+0x2d0>
 8009542:	4639      	mov	r1, r7
 8009544:	4620      	mov	r0, r4
 8009546:	f000 fec4 	bl	800a2d2 <__any_on>
 800954a:	4681      	mov	r9, r0
 800954c:	117a      	asrs	r2, r7, #5
 800954e:	2301      	movs	r3, #1
 8009550:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009554:	f007 071f 	and.w	r7, r7, #31
 8009558:	40bb      	lsls	r3, r7
 800955a:	4213      	tst	r3, r2
 800955c:	4629      	mov	r1, r5
 800955e:	4620      	mov	r0, r4
 8009560:	bf18      	it	ne
 8009562:	f049 0902 	orrne.w	r9, r9, #2
 8009566:	f7ff fe21 	bl	80091ac <rshift>
 800956a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800956e:	1b76      	subs	r6, r6, r5
 8009570:	2502      	movs	r5, #2
 8009572:	f1b9 0f00 	cmp.w	r9, #0
 8009576:	d047      	beq.n	8009608 <__gethex+0x38c>
 8009578:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800957c:	2b02      	cmp	r3, #2
 800957e:	d015      	beq.n	80095ac <__gethex+0x330>
 8009580:	2b03      	cmp	r3, #3
 8009582:	d017      	beq.n	80095b4 <__gethex+0x338>
 8009584:	2b01      	cmp	r3, #1
 8009586:	d109      	bne.n	800959c <__gethex+0x320>
 8009588:	f019 0f02 	tst.w	r9, #2
 800958c:	d006      	beq.n	800959c <__gethex+0x320>
 800958e:	f8da 3000 	ldr.w	r3, [sl]
 8009592:	ea49 0903 	orr.w	r9, r9, r3
 8009596:	f019 0f01 	tst.w	r9, #1
 800959a:	d10e      	bne.n	80095ba <__gethex+0x33e>
 800959c:	f045 0510 	orr.w	r5, r5, #16
 80095a0:	e032      	b.n	8009608 <__gethex+0x38c>
 80095a2:	f04f 0901 	mov.w	r9, #1
 80095a6:	e7d1      	b.n	800954c <__gethex+0x2d0>
 80095a8:	2501      	movs	r5, #1
 80095aa:	e7e2      	b.n	8009572 <__gethex+0x2f6>
 80095ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095ae:	f1c3 0301 	rsb	r3, r3, #1
 80095b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80095b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d0f0      	beq.n	800959c <__gethex+0x320>
 80095ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80095be:	f104 0314 	add.w	r3, r4, #20
 80095c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80095c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80095ca:	f04f 0c00 	mov.w	ip, #0
 80095ce:	4618      	mov	r0, r3
 80095d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80095d4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80095d8:	d01b      	beq.n	8009612 <__gethex+0x396>
 80095da:	3201      	adds	r2, #1
 80095dc:	6002      	str	r2, [r0, #0]
 80095de:	2d02      	cmp	r5, #2
 80095e0:	f104 0314 	add.w	r3, r4, #20
 80095e4:	d13c      	bne.n	8009660 <__gethex+0x3e4>
 80095e6:	f8d8 2000 	ldr.w	r2, [r8]
 80095ea:	3a01      	subs	r2, #1
 80095ec:	42b2      	cmp	r2, r6
 80095ee:	d109      	bne.n	8009604 <__gethex+0x388>
 80095f0:	1171      	asrs	r1, r6, #5
 80095f2:	2201      	movs	r2, #1
 80095f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80095f8:	f006 061f 	and.w	r6, r6, #31
 80095fc:	fa02 f606 	lsl.w	r6, r2, r6
 8009600:	421e      	tst	r6, r3
 8009602:	d13a      	bne.n	800967a <__gethex+0x3fe>
 8009604:	f045 0520 	orr.w	r5, r5, #32
 8009608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800960a:	601c      	str	r4, [r3, #0]
 800960c:	9b02      	ldr	r3, [sp, #8]
 800960e:	601f      	str	r7, [r3, #0]
 8009610:	e6b0      	b.n	8009374 <__gethex+0xf8>
 8009612:	4299      	cmp	r1, r3
 8009614:	f843 cc04 	str.w	ip, [r3, #-4]
 8009618:	d8d9      	bhi.n	80095ce <__gethex+0x352>
 800961a:	68a3      	ldr	r3, [r4, #8]
 800961c:	459b      	cmp	fp, r3
 800961e:	db17      	blt.n	8009650 <__gethex+0x3d4>
 8009620:	6861      	ldr	r1, [r4, #4]
 8009622:	9801      	ldr	r0, [sp, #4]
 8009624:	3101      	adds	r1, #1
 8009626:	f000 f9c3 	bl	80099b0 <_Balloc>
 800962a:	4681      	mov	r9, r0
 800962c:	b918      	cbnz	r0, 8009636 <__gethex+0x3ba>
 800962e:	4b1a      	ldr	r3, [pc, #104]	@ (8009698 <__gethex+0x41c>)
 8009630:	4602      	mov	r2, r0
 8009632:	2184      	movs	r1, #132	@ 0x84
 8009634:	e6c5      	b.n	80093c2 <__gethex+0x146>
 8009636:	6922      	ldr	r2, [r4, #16]
 8009638:	3202      	adds	r2, #2
 800963a:	f104 010c 	add.w	r1, r4, #12
 800963e:	0092      	lsls	r2, r2, #2
 8009640:	300c      	adds	r0, #12
 8009642:	f7fe fefe 	bl	8008442 <memcpy>
 8009646:	4621      	mov	r1, r4
 8009648:	9801      	ldr	r0, [sp, #4]
 800964a:	f000 f9f1 	bl	8009a30 <_Bfree>
 800964e:	464c      	mov	r4, r9
 8009650:	6923      	ldr	r3, [r4, #16]
 8009652:	1c5a      	adds	r2, r3, #1
 8009654:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009658:	6122      	str	r2, [r4, #16]
 800965a:	2201      	movs	r2, #1
 800965c:	615a      	str	r2, [r3, #20]
 800965e:	e7be      	b.n	80095de <__gethex+0x362>
 8009660:	6922      	ldr	r2, [r4, #16]
 8009662:	455a      	cmp	r2, fp
 8009664:	dd0b      	ble.n	800967e <__gethex+0x402>
 8009666:	2101      	movs	r1, #1
 8009668:	4620      	mov	r0, r4
 800966a:	f7ff fd9f 	bl	80091ac <rshift>
 800966e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009672:	3701      	adds	r7, #1
 8009674:	42bb      	cmp	r3, r7
 8009676:	f6ff aee0 	blt.w	800943a <__gethex+0x1be>
 800967a:	2501      	movs	r5, #1
 800967c:	e7c2      	b.n	8009604 <__gethex+0x388>
 800967e:	f016 061f 	ands.w	r6, r6, #31
 8009682:	d0fa      	beq.n	800967a <__gethex+0x3fe>
 8009684:	4453      	add	r3, sl
 8009686:	f1c6 0620 	rsb	r6, r6, #32
 800968a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800968e:	f000 fa81 	bl	8009b94 <__hi0bits>
 8009692:	42b0      	cmp	r0, r6
 8009694:	dbe7      	blt.n	8009666 <__gethex+0x3ea>
 8009696:	e7f0      	b.n	800967a <__gethex+0x3fe>
 8009698:	0800c34d 	.word	0x0800c34d

0800969c <L_shift>:
 800969c:	f1c2 0208 	rsb	r2, r2, #8
 80096a0:	0092      	lsls	r2, r2, #2
 80096a2:	b570      	push	{r4, r5, r6, lr}
 80096a4:	f1c2 0620 	rsb	r6, r2, #32
 80096a8:	6843      	ldr	r3, [r0, #4]
 80096aa:	6804      	ldr	r4, [r0, #0]
 80096ac:	fa03 f506 	lsl.w	r5, r3, r6
 80096b0:	432c      	orrs	r4, r5
 80096b2:	40d3      	lsrs	r3, r2
 80096b4:	6004      	str	r4, [r0, #0]
 80096b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80096ba:	4288      	cmp	r0, r1
 80096bc:	d3f4      	bcc.n	80096a8 <L_shift+0xc>
 80096be:	bd70      	pop	{r4, r5, r6, pc}

080096c0 <__match>:
 80096c0:	b530      	push	{r4, r5, lr}
 80096c2:	6803      	ldr	r3, [r0, #0]
 80096c4:	3301      	adds	r3, #1
 80096c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096ca:	b914      	cbnz	r4, 80096d2 <__match+0x12>
 80096cc:	6003      	str	r3, [r0, #0]
 80096ce:	2001      	movs	r0, #1
 80096d0:	bd30      	pop	{r4, r5, pc}
 80096d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80096da:	2d19      	cmp	r5, #25
 80096dc:	bf98      	it	ls
 80096de:	3220      	addls	r2, #32
 80096e0:	42a2      	cmp	r2, r4
 80096e2:	d0f0      	beq.n	80096c6 <__match+0x6>
 80096e4:	2000      	movs	r0, #0
 80096e6:	e7f3      	b.n	80096d0 <__match+0x10>

080096e8 <__hexnan>:
 80096e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096ec:	680b      	ldr	r3, [r1, #0]
 80096ee:	6801      	ldr	r1, [r0, #0]
 80096f0:	115e      	asrs	r6, r3, #5
 80096f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80096f6:	f013 031f 	ands.w	r3, r3, #31
 80096fa:	b087      	sub	sp, #28
 80096fc:	bf18      	it	ne
 80096fe:	3604      	addne	r6, #4
 8009700:	2500      	movs	r5, #0
 8009702:	1f37      	subs	r7, r6, #4
 8009704:	4682      	mov	sl, r0
 8009706:	4690      	mov	r8, r2
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	f846 5c04 	str.w	r5, [r6, #-4]
 800970e:	46b9      	mov	r9, r7
 8009710:	463c      	mov	r4, r7
 8009712:	9502      	str	r5, [sp, #8]
 8009714:	46ab      	mov	fp, r5
 8009716:	784a      	ldrb	r2, [r1, #1]
 8009718:	1c4b      	adds	r3, r1, #1
 800971a:	9303      	str	r3, [sp, #12]
 800971c:	b342      	cbz	r2, 8009770 <__hexnan+0x88>
 800971e:	4610      	mov	r0, r2
 8009720:	9105      	str	r1, [sp, #20]
 8009722:	9204      	str	r2, [sp, #16]
 8009724:	f7ff fd94 	bl	8009250 <__hexdig_fun>
 8009728:	2800      	cmp	r0, #0
 800972a:	d151      	bne.n	80097d0 <__hexnan+0xe8>
 800972c:	9a04      	ldr	r2, [sp, #16]
 800972e:	9905      	ldr	r1, [sp, #20]
 8009730:	2a20      	cmp	r2, #32
 8009732:	d818      	bhi.n	8009766 <__hexnan+0x7e>
 8009734:	9b02      	ldr	r3, [sp, #8]
 8009736:	459b      	cmp	fp, r3
 8009738:	dd13      	ble.n	8009762 <__hexnan+0x7a>
 800973a:	454c      	cmp	r4, r9
 800973c:	d206      	bcs.n	800974c <__hexnan+0x64>
 800973e:	2d07      	cmp	r5, #7
 8009740:	dc04      	bgt.n	800974c <__hexnan+0x64>
 8009742:	462a      	mov	r2, r5
 8009744:	4649      	mov	r1, r9
 8009746:	4620      	mov	r0, r4
 8009748:	f7ff ffa8 	bl	800969c <L_shift>
 800974c:	4544      	cmp	r4, r8
 800974e:	d952      	bls.n	80097f6 <__hexnan+0x10e>
 8009750:	2300      	movs	r3, #0
 8009752:	f1a4 0904 	sub.w	r9, r4, #4
 8009756:	f844 3c04 	str.w	r3, [r4, #-4]
 800975a:	f8cd b008 	str.w	fp, [sp, #8]
 800975e:	464c      	mov	r4, r9
 8009760:	461d      	mov	r5, r3
 8009762:	9903      	ldr	r1, [sp, #12]
 8009764:	e7d7      	b.n	8009716 <__hexnan+0x2e>
 8009766:	2a29      	cmp	r2, #41	@ 0x29
 8009768:	d157      	bne.n	800981a <__hexnan+0x132>
 800976a:	3102      	adds	r1, #2
 800976c:	f8ca 1000 	str.w	r1, [sl]
 8009770:	f1bb 0f00 	cmp.w	fp, #0
 8009774:	d051      	beq.n	800981a <__hexnan+0x132>
 8009776:	454c      	cmp	r4, r9
 8009778:	d206      	bcs.n	8009788 <__hexnan+0xa0>
 800977a:	2d07      	cmp	r5, #7
 800977c:	dc04      	bgt.n	8009788 <__hexnan+0xa0>
 800977e:	462a      	mov	r2, r5
 8009780:	4649      	mov	r1, r9
 8009782:	4620      	mov	r0, r4
 8009784:	f7ff ff8a 	bl	800969c <L_shift>
 8009788:	4544      	cmp	r4, r8
 800978a:	d936      	bls.n	80097fa <__hexnan+0x112>
 800978c:	f1a8 0204 	sub.w	r2, r8, #4
 8009790:	4623      	mov	r3, r4
 8009792:	f853 1b04 	ldr.w	r1, [r3], #4
 8009796:	f842 1f04 	str.w	r1, [r2, #4]!
 800979a:	429f      	cmp	r7, r3
 800979c:	d2f9      	bcs.n	8009792 <__hexnan+0xaa>
 800979e:	1b3b      	subs	r3, r7, r4
 80097a0:	f023 0303 	bic.w	r3, r3, #3
 80097a4:	3304      	adds	r3, #4
 80097a6:	3401      	adds	r4, #1
 80097a8:	3e03      	subs	r6, #3
 80097aa:	42b4      	cmp	r4, r6
 80097ac:	bf88      	it	hi
 80097ae:	2304      	movhi	r3, #4
 80097b0:	4443      	add	r3, r8
 80097b2:	2200      	movs	r2, #0
 80097b4:	f843 2b04 	str.w	r2, [r3], #4
 80097b8:	429f      	cmp	r7, r3
 80097ba:	d2fb      	bcs.n	80097b4 <__hexnan+0xcc>
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	b91b      	cbnz	r3, 80097c8 <__hexnan+0xe0>
 80097c0:	4547      	cmp	r7, r8
 80097c2:	d128      	bne.n	8009816 <__hexnan+0x12e>
 80097c4:	2301      	movs	r3, #1
 80097c6:	603b      	str	r3, [r7, #0]
 80097c8:	2005      	movs	r0, #5
 80097ca:	b007      	add	sp, #28
 80097cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d0:	3501      	adds	r5, #1
 80097d2:	2d08      	cmp	r5, #8
 80097d4:	f10b 0b01 	add.w	fp, fp, #1
 80097d8:	dd06      	ble.n	80097e8 <__hexnan+0x100>
 80097da:	4544      	cmp	r4, r8
 80097dc:	d9c1      	bls.n	8009762 <__hexnan+0x7a>
 80097de:	2300      	movs	r3, #0
 80097e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80097e4:	2501      	movs	r5, #1
 80097e6:	3c04      	subs	r4, #4
 80097e8:	6822      	ldr	r2, [r4, #0]
 80097ea:	f000 000f 	and.w	r0, r0, #15
 80097ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80097f2:	6020      	str	r0, [r4, #0]
 80097f4:	e7b5      	b.n	8009762 <__hexnan+0x7a>
 80097f6:	2508      	movs	r5, #8
 80097f8:	e7b3      	b.n	8009762 <__hexnan+0x7a>
 80097fa:	9b01      	ldr	r3, [sp, #4]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d0dd      	beq.n	80097bc <__hexnan+0xd4>
 8009800:	f1c3 0320 	rsb	r3, r3, #32
 8009804:	f04f 32ff 	mov.w	r2, #4294967295
 8009808:	40da      	lsrs	r2, r3
 800980a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800980e:	4013      	ands	r3, r2
 8009810:	f846 3c04 	str.w	r3, [r6, #-4]
 8009814:	e7d2      	b.n	80097bc <__hexnan+0xd4>
 8009816:	3f04      	subs	r7, #4
 8009818:	e7d0      	b.n	80097bc <__hexnan+0xd4>
 800981a:	2004      	movs	r0, #4
 800981c:	e7d5      	b.n	80097ca <__hexnan+0xe2>
	...

08009820 <malloc>:
 8009820:	4b02      	ldr	r3, [pc, #8]	@ (800982c <malloc+0xc>)
 8009822:	4601      	mov	r1, r0
 8009824:	6818      	ldr	r0, [r3, #0]
 8009826:	f000 b825 	b.w	8009874 <_malloc_r>
 800982a:	bf00      	nop
 800982c:	200001bc 	.word	0x200001bc

08009830 <sbrk_aligned>:
 8009830:	b570      	push	{r4, r5, r6, lr}
 8009832:	4e0f      	ldr	r6, [pc, #60]	@ (8009870 <sbrk_aligned+0x40>)
 8009834:	460c      	mov	r4, r1
 8009836:	6831      	ldr	r1, [r6, #0]
 8009838:	4605      	mov	r5, r0
 800983a:	b911      	cbnz	r1, 8009842 <sbrk_aligned+0x12>
 800983c:	f001 f9e6 	bl	800ac0c <_sbrk_r>
 8009840:	6030      	str	r0, [r6, #0]
 8009842:	4621      	mov	r1, r4
 8009844:	4628      	mov	r0, r5
 8009846:	f001 f9e1 	bl	800ac0c <_sbrk_r>
 800984a:	1c43      	adds	r3, r0, #1
 800984c:	d103      	bne.n	8009856 <sbrk_aligned+0x26>
 800984e:	f04f 34ff 	mov.w	r4, #4294967295
 8009852:	4620      	mov	r0, r4
 8009854:	bd70      	pop	{r4, r5, r6, pc}
 8009856:	1cc4      	adds	r4, r0, #3
 8009858:	f024 0403 	bic.w	r4, r4, #3
 800985c:	42a0      	cmp	r0, r4
 800985e:	d0f8      	beq.n	8009852 <sbrk_aligned+0x22>
 8009860:	1a21      	subs	r1, r4, r0
 8009862:	4628      	mov	r0, r5
 8009864:	f001 f9d2 	bl	800ac0c <_sbrk_r>
 8009868:	3001      	adds	r0, #1
 800986a:	d1f2      	bne.n	8009852 <sbrk_aligned+0x22>
 800986c:	e7ef      	b.n	800984e <sbrk_aligned+0x1e>
 800986e:	bf00      	nop
 8009870:	200007e4 	.word	0x200007e4

08009874 <_malloc_r>:
 8009874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009878:	1ccd      	adds	r5, r1, #3
 800987a:	f025 0503 	bic.w	r5, r5, #3
 800987e:	3508      	adds	r5, #8
 8009880:	2d0c      	cmp	r5, #12
 8009882:	bf38      	it	cc
 8009884:	250c      	movcc	r5, #12
 8009886:	2d00      	cmp	r5, #0
 8009888:	4606      	mov	r6, r0
 800988a:	db01      	blt.n	8009890 <_malloc_r+0x1c>
 800988c:	42a9      	cmp	r1, r5
 800988e:	d904      	bls.n	800989a <_malloc_r+0x26>
 8009890:	230c      	movs	r3, #12
 8009892:	6033      	str	r3, [r6, #0]
 8009894:	2000      	movs	r0, #0
 8009896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800989a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009970 <_malloc_r+0xfc>
 800989e:	f000 f87b 	bl	8009998 <__malloc_lock>
 80098a2:	f8d8 3000 	ldr.w	r3, [r8]
 80098a6:	461c      	mov	r4, r3
 80098a8:	bb44      	cbnz	r4, 80098fc <_malloc_r+0x88>
 80098aa:	4629      	mov	r1, r5
 80098ac:	4630      	mov	r0, r6
 80098ae:	f7ff ffbf 	bl	8009830 <sbrk_aligned>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	4604      	mov	r4, r0
 80098b6:	d158      	bne.n	800996a <_malloc_r+0xf6>
 80098b8:	f8d8 4000 	ldr.w	r4, [r8]
 80098bc:	4627      	mov	r7, r4
 80098be:	2f00      	cmp	r7, #0
 80098c0:	d143      	bne.n	800994a <_malloc_r+0xd6>
 80098c2:	2c00      	cmp	r4, #0
 80098c4:	d04b      	beq.n	800995e <_malloc_r+0xea>
 80098c6:	6823      	ldr	r3, [r4, #0]
 80098c8:	4639      	mov	r1, r7
 80098ca:	4630      	mov	r0, r6
 80098cc:	eb04 0903 	add.w	r9, r4, r3
 80098d0:	f001 f99c 	bl	800ac0c <_sbrk_r>
 80098d4:	4581      	cmp	r9, r0
 80098d6:	d142      	bne.n	800995e <_malloc_r+0xea>
 80098d8:	6821      	ldr	r1, [r4, #0]
 80098da:	1a6d      	subs	r5, r5, r1
 80098dc:	4629      	mov	r1, r5
 80098de:	4630      	mov	r0, r6
 80098e0:	f7ff ffa6 	bl	8009830 <sbrk_aligned>
 80098e4:	3001      	adds	r0, #1
 80098e6:	d03a      	beq.n	800995e <_malloc_r+0xea>
 80098e8:	6823      	ldr	r3, [r4, #0]
 80098ea:	442b      	add	r3, r5
 80098ec:	6023      	str	r3, [r4, #0]
 80098ee:	f8d8 3000 	ldr.w	r3, [r8]
 80098f2:	685a      	ldr	r2, [r3, #4]
 80098f4:	bb62      	cbnz	r2, 8009950 <_malloc_r+0xdc>
 80098f6:	f8c8 7000 	str.w	r7, [r8]
 80098fa:	e00f      	b.n	800991c <_malloc_r+0xa8>
 80098fc:	6822      	ldr	r2, [r4, #0]
 80098fe:	1b52      	subs	r2, r2, r5
 8009900:	d420      	bmi.n	8009944 <_malloc_r+0xd0>
 8009902:	2a0b      	cmp	r2, #11
 8009904:	d917      	bls.n	8009936 <_malloc_r+0xc2>
 8009906:	1961      	adds	r1, r4, r5
 8009908:	42a3      	cmp	r3, r4
 800990a:	6025      	str	r5, [r4, #0]
 800990c:	bf18      	it	ne
 800990e:	6059      	strne	r1, [r3, #4]
 8009910:	6863      	ldr	r3, [r4, #4]
 8009912:	bf08      	it	eq
 8009914:	f8c8 1000 	streq.w	r1, [r8]
 8009918:	5162      	str	r2, [r4, r5]
 800991a:	604b      	str	r3, [r1, #4]
 800991c:	4630      	mov	r0, r6
 800991e:	f000 f841 	bl	80099a4 <__malloc_unlock>
 8009922:	f104 000b 	add.w	r0, r4, #11
 8009926:	1d23      	adds	r3, r4, #4
 8009928:	f020 0007 	bic.w	r0, r0, #7
 800992c:	1ac2      	subs	r2, r0, r3
 800992e:	bf1c      	itt	ne
 8009930:	1a1b      	subne	r3, r3, r0
 8009932:	50a3      	strne	r3, [r4, r2]
 8009934:	e7af      	b.n	8009896 <_malloc_r+0x22>
 8009936:	6862      	ldr	r2, [r4, #4]
 8009938:	42a3      	cmp	r3, r4
 800993a:	bf0c      	ite	eq
 800993c:	f8c8 2000 	streq.w	r2, [r8]
 8009940:	605a      	strne	r2, [r3, #4]
 8009942:	e7eb      	b.n	800991c <_malloc_r+0xa8>
 8009944:	4623      	mov	r3, r4
 8009946:	6864      	ldr	r4, [r4, #4]
 8009948:	e7ae      	b.n	80098a8 <_malloc_r+0x34>
 800994a:	463c      	mov	r4, r7
 800994c:	687f      	ldr	r7, [r7, #4]
 800994e:	e7b6      	b.n	80098be <_malloc_r+0x4a>
 8009950:	461a      	mov	r2, r3
 8009952:	685b      	ldr	r3, [r3, #4]
 8009954:	42a3      	cmp	r3, r4
 8009956:	d1fb      	bne.n	8009950 <_malloc_r+0xdc>
 8009958:	2300      	movs	r3, #0
 800995a:	6053      	str	r3, [r2, #4]
 800995c:	e7de      	b.n	800991c <_malloc_r+0xa8>
 800995e:	230c      	movs	r3, #12
 8009960:	6033      	str	r3, [r6, #0]
 8009962:	4630      	mov	r0, r6
 8009964:	f000 f81e 	bl	80099a4 <__malloc_unlock>
 8009968:	e794      	b.n	8009894 <_malloc_r+0x20>
 800996a:	6005      	str	r5, [r0, #0]
 800996c:	e7d6      	b.n	800991c <_malloc_r+0xa8>
 800996e:	bf00      	nop
 8009970:	200007e8 	.word	0x200007e8

08009974 <__ascii_mbtowc>:
 8009974:	b082      	sub	sp, #8
 8009976:	b901      	cbnz	r1, 800997a <__ascii_mbtowc+0x6>
 8009978:	a901      	add	r1, sp, #4
 800997a:	b142      	cbz	r2, 800998e <__ascii_mbtowc+0x1a>
 800997c:	b14b      	cbz	r3, 8009992 <__ascii_mbtowc+0x1e>
 800997e:	7813      	ldrb	r3, [r2, #0]
 8009980:	600b      	str	r3, [r1, #0]
 8009982:	7812      	ldrb	r2, [r2, #0]
 8009984:	1e10      	subs	r0, r2, #0
 8009986:	bf18      	it	ne
 8009988:	2001      	movne	r0, #1
 800998a:	b002      	add	sp, #8
 800998c:	4770      	bx	lr
 800998e:	4610      	mov	r0, r2
 8009990:	e7fb      	b.n	800998a <__ascii_mbtowc+0x16>
 8009992:	f06f 0001 	mvn.w	r0, #1
 8009996:	e7f8      	b.n	800998a <__ascii_mbtowc+0x16>

08009998 <__malloc_lock>:
 8009998:	4801      	ldr	r0, [pc, #4]	@ (80099a0 <__malloc_lock+0x8>)
 800999a:	f7fe bd50 	b.w	800843e <__retarget_lock_acquire_recursive>
 800999e:	bf00      	nop
 80099a0:	200007e0 	.word	0x200007e0

080099a4 <__malloc_unlock>:
 80099a4:	4801      	ldr	r0, [pc, #4]	@ (80099ac <__malloc_unlock+0x8>)
 80099a6:	f7fe bd4b 	b.w	8008440 <__retarget_lock_release_recursive>
 80099aa:	bf00      	nop
 80099ac:	200007e0 	.word	0x200007e0

080099b0 <_Balloc>:
 80099b0:	b570      	push	{r4, r5, r6, lr}
 80099b2:	69c6      	ldr	r6, [r0, #28]
 80099b4:	4604      	mov	r4, r0
 80099b6:	460d      	mov	r5, r1
 80099b8:	b976      	cbnz	r6, 80099d8 <_Balloc+0x28>
 80099ba:	2010      	movs	r0, #16
 80099bc:	f7ff ff30 	bl	8009820 <malloc>
 80099c0:	4602      	mov	r2, r0
 80099c2:	61e0      	str	r0, [r4, #28]
 80099c4:	b920      	cbnz	r0, 80099d0 <_Balloc+0x20>
 80099c6:	4b18      	ldr	r3, [pc, #96]	@ (8009a28 <_Balloc+0x78>)
 80099c8:	4818      	ldr	r0, [pc, #96]	@ (8009a2c <_Balloc+0x7c>)
 80099ca:	216b      	movs	r1, #107	@ 0x6b
 80099cc:	f001 f92e 	bl	800ac2c <__assert_func>
 80099d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80099d4:	6006      	str	r6, [r0, #0]
 80099d6:	60c6      	str	r6, [r0, #12]
 80099d8:	69e6      	ldr	r6, [r4, #28]
 80099da:	68f3      	ldr	r3, [r6, #12]
 80099dc:	b183      	cbz	r3, 8009a00 <_Balloc+0x50>
 80099de:	69e3      	ldr	r3, [r4, #28]
 80099e0:	68db      	ldr	r3, [r3, #12]
 80099e2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80099e6:	b9b8      	cbnz	r0, 8009a18 <_Balloc+0x68>
 80099e8:	2101      	movs	r1, #1
 80099ea:	fa01 f605 	lsl.w	r6, r1, r5
 80099ee:	1d72      	adds	r2, r6, #5
 80099f0:	0092      	lsls	r2, r2, #2
 80099f2:	4620      	mov	r0, r4
 80099f4:	f001 f938 	bl	800ac68 <_calloc_r>
 80099f8:	b160      	cbz	r0, 8009a14 <_Balloc+0x64>
 80099fa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099fe:	e00e      	b.n	8009a1e <_Balloc+0x6e>
 8009a00:	2221      	movs	r2, #33	@ 0x21
 8009a02:	2104      	movs	r1, #4
 8009a04:	4620      	mov	r0, r4
 8009a06:	f001 f92f 	bl	800ac68 <_calloc_r>
 8009a0a:	69e3      	ldr	r3, [r4, #28]
 8009a0c:	60f0      	str	r0, [r6, #12]
 8009a0e:	68db      	ldr	r3, [r3, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1e4      	bne.n	80099de <_Balloc+0x2e>
 8009a14:	2000      	movs	r0, #0
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	6802      	ldr	r2, [r0, #0]
 8009a1a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a1e:	2300      	movs	r3, #0
 8009a20:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a24:	e7f7      	b.n	8009a16 <_Balloc+0x66>
 8009a26:	bf00      	nop
 8009a28:	0800c2de 	.word	0x0800c2de
 8009a2c:	0800c3be 	.word	0x0800c3be

08009a30 <_Bfree>:
 8009a30:	b570      	push	{r4, r5, r6, lr}
 8009a32:	69c6      	ldr	r6, [r0, #28]
 8009a34:	4605      	mov	r5, r0
 8009a36:	460c      	mov	r4, r1
 8009a38:	b976      	cbnz	r6, 8009a58 <_Bfree+0x28>
 8009a3a:	2010      	movs	r0, #16
 8009a3c:	f7ff fef0 	bl	8009820 <malloc>
 8009a40:	4602      	mov	r2, r0
 8009a42:	61e8      	str	r0, [r5, #28]
 8009a44:	b920      	cbnz	r0, 8009a50 <_Bfree+0x20>
 8009a46:	4b09      	ldr	r3, [pc, #36]	@ (8009a6c <_Bfree+0x3c>)
 8009a48:	4809      	ldr	r0, [pc, #36]	@ (8009a70 <_Bfree+0x40>)
 8009a4a:	218f      	movs	r1, #143	@ 0x8f
 8009a4c:	f001 f8ee 	bl	800ac2c <__assert_func>
 8009a50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a54:	6006      	str	r6, [r0, #0]
 8009a56:	60c6      	str	r6, [r0, #12]
 8009a58:	b13c      	cbz	r4, 8009a6a <_Bfree+0x3a>
 8009a5a:	69eb      	ldr	r3, [r5, #28]
 8009a5c:	6862      	ldr	r2, [r4, #4]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a64:	6021      	str	r1, [r4, #0]
 8009a66:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a6a:	bd70      	pop	{r4, r5, r6, pc}
 8009a6c:	0800c2de 	.word	0x0800c2de
 8009a70:	0800c3be 	.word	0x0800c3be

08009a74 <__multadd>:
 8009a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a78:	690d      	ldr	r5, [r1, #16]
 8009a7a:	4607      	mov	r7, r0
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	461e      	mov	r6, r3
 8009a80:	f101 0c14 	add.w	ip, r1, #20
 8009a84:	2000      	movs	r0, #0
 8009a86:	f8dc 3000 	ldr.w	r3, [ip]
 8009a8a:	b299      	uxth	r1, r3
 8009a8c:	fb02 6101 	mla	r1, r2, r1, r6
 8009a90:	0c1e      	lsrs	r6, r3, #16
 8009a92:	0c0b      	lsrs	r3, r1, #16
 8009a94:	fb02 3306 	mla	r3, r2, r6, r3
 8009a98:	b289      	uxth	r1, r1
 8009a9a:	3001      	adds	r0, #1
 8009a9c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009aa0:	4285      	cmp	r5, r0
 8009aa2:	f84c 1b04 	str.w	r1, [ip], #4
 8009aa6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009aaa:	dcec      	bgt.n	8009a86 <__multadd+0x12>
 8009aac:	b30e      	cbz	r6, 8009af2 <__multadd+0x7e>
 8009aae:	68a3      	ldr	r3, [r4, #8]
 8009ab0:	42ab      	cmp	r3, r5
 8009ab2:	dc19      	bgt.n	8009ae8 <__multadd+0x74>
 8009ab4:	6861      	ldr	r1, [r4, #4]
 8009ab6:	4638      	mov	r0, r7
 8009ab8:	3101      	adds	r1, #1
 8009aba:	f7ff ff79 	bl	80099b0 <_Balloc>
 8009abe:	4680      	mov	r8, r0
 8009ac0:	b928      	cbnz	r0, 8009ace <__multadd+0x5a>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8009af8 <__multadd+0x84>)
 8009ac6:	480d      	ldr	r0, [pc, #52]	@ (8009afc <__multadd+0x88>)
 8009ac8:	21ba      	movs	r1, #186	@ 0xba
 8009aca:	f001 f8af 	bl	800ac2c <__assert_func>
 8009ace:	6922      	ldr	r2, [r4, #16]
 8009ad0:	3202      	adds	r2, #2
 8009ad2:	f104 010c 	add.w	r1, r4, #12
 8009ad6:	0092      	lsls	r2, r2, #2
 8009ad8:	300c      	adds	r0, #12
 8009ada:	f7fe fcb2 	bl	8008442 <memcpy>
 8009ade:	4621      	mov	r1, r4
 8009ae0:	4638      	mov	r0, r7
 8009ae2:	f7ff ffa5 	bl	8009a30 <_Bfree>
 8009ae6:	4644      	mov	r4, r8
 8009ae8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009aec:	3501      	adds	r5, #1
 8009aee:	615e      	str	r6, [r3, #20]
 8009af0:	6125      	str	r5, [r4, #16]
 8009af2:	4620      	mov	r0, r4
 8009af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009af8:	0800c34d 	.word	0x0800c34d
 8009afc:	0800c3be 	.word	0x0800c3be

08009b00 <__s2b>:
 8009b00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b04:	460c      	mov	r4, r1
 8009b06:	4615      	mov	r5, r2
 8009b08:	461f      	mov	r7, r3
 8009b0a:	2209      	movs	r2, #9
 8009b0c:	3308      	adds	r3, #8
 8009b0e:	4606      	mov	r6, r0
 8009b10:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b14:	2100      	movs	r1, #0
 8009b16:	2201      	movs	r2, #1
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	db09      	blt.n	8009b30 <__s2b+0x30>
 8009b1c:	4630      	mov	r0, r6
 8009b1e:	f7ff ff47 	bl	80099b0 <_Balloc>
 8009b22:	b940      	cbnz	r0, 8009b36 <__s2b+0x36>
 8009b24:	4602      	mov	r2, r0
 8009b26:	4b19      	ldr	r3, [pc, #100]	@ (8009b8c <__s2b+0x8c>)
 8009b28:	4819      	ldr	r0, [pc, #100]	@ (8009b90 <__s2b+0x90>)
 8009b2a:	21d3      	movs	r1, #211	@ 0xd3
 8009b2c:	f001 f87e 	bl	800ac2c <__assert_func>
 8009b30:	0052      	lsls	r2, r2, #1
 8009b32:	3101      	adds	r1, #1
 8009b34:	e7f0      	b.n	8009b18 <__s2b+0x18>
 8009b36:	9b08      	ldr	r3, [sp, #32]
 8009b38:	6143      	str	r3, [r0, #20]
 8009b3a:	2d09      	cmp	r5, #9
 8009b3c:	f04f 0301 	mov.w	r3, #1
 8009b40:	6103      	str	r3, [r0, #16]
 8009b42:	dd16      	ble.n	8009b72 <__s2b+0x72>
 8009b44:	f104 0909 	add.w	r9, r4, #9
 8009b48:	46c8      	mov	r8, r9
 8009b4a:	442c      	add	r4, r5
 8009b4c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009b50:	4601      	mov	r1, r0
 8009b52:	3b30      	subs	r3, #48	@ 0x30
 8009b54:	220a      	movs	r2, #10
 8009b56:	4630      	mov	r0, r6
 8009b58:	f7ff ff8c 	bl	8009a74 <__multadd>
 8009b5c:	45a0      	cmp	r8, r4
 8009b5e:	d1f5      	bne.n	8009b4c <__s2b+0x4c>
 8009b60:	f1a5 0408 	sub.w	r4, r5, #8
 8009b64:	444c      	add	r4, r9
 8009b66:	1b2d      	subs	r5, r5, r4
 8009b68:	1963      	adds	r3, r4, r5
 8009b6a:	42bb      	cmp	r3, r7
 8009b6c:	db04      	blt.n	8009b78 <__s2b+0x78>
 8009b6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009b72:	340a      	adds	r4, #10
 8009b74:	2509      	movs	r5, #9
 8009b76:	e7f6      	b.n	8009b66 <__s2b+0x66>
 8009b78:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009b7c:	4601      	mov	r1, r0
 8009b7e:	3b30      	subs	r3, #48	@ 0x30
 8009b80:	220a      	movs	r2, #10
 8009b82:	4630      	mov	r0, r6
 8009b84:	f7ff ff76 	bl	8009a74 <__multadd>
 8009b88:	e7ee      	b.n	8009b68 <__s2b+0x68>
 8009b8a:	bf00      	nop
 8009b8c:	0800c34d 	.word	0x0800c34d
 8009b90:	0800c3be 	.word	0x0800c3be

08009b94 <__hi0bits>:
 8009b94:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009b98:	4603      	mov	r3, r0
 8009b9a:	bf36      	itet	cc
 8009b9c:	0403      	lslcc	r3, r0, #16
 8009b9e:	2000      	movcs	r0, #0
 8009ba0:	2010      	movcc	r0, #16
 8009ba2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009ba6:	bf3c      	itt	cc
 8009ba8:	021b      	lslcc	r3, r3, #8
 8009baa:	3008      	addcc	r0, #8
 8009bac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009bb0:	bf3c      	itt	cc
 8009bb2:	011b      	lslcc	r3, r3, #4
 8009bb4:	3004      	addcc	r0, #4
 8009bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009bba:	bf3c      	itt	cc
 8009bbc:	009b      	lslcc	r3, r3, #2
 8009bbe:	3002      	addcc	r0, #2
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	db05      	blt.n	8009bd0 <__hi0bits+0x3c>
 8009bc4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009bc8:	f100 0001 	add.w	r0, r0, #1
 8009bcc:	bf08      	it	eq
 8009bce:	2020      	moveq	r0, #32
 8009bd0:	4770      	bx	lr

08009bd2 <__lo0bits>:
 8009bd2:	6803      	ldr	r3, [r0, #0]
 8009bd4:	4602      	mov	r2, r0
 8009bd6:	f013 0007 	ands.w	r0, r3, #7
 8009bda:	d00b      	beq.n	8009bf4 <__lo0bits+0x22>
 8009bdc:	07d9      	lsls	r1, r3, #31
 8009bde:	d421      	bmi.n	8009c24 <__lo0bits+0x52>
 8009be0:	0798      	lsls	r0, r3, #30
 8009be2:	bf49      	itett	mi
 8009be4:	085b      	lsrmi	r3, r3, #1
 8009be6:	089b      	lsrpl	r3, r3, #2
 8009be8:	2001      	movmi	r0, #1
 8009bea:	6013      	strmi	r3, [r2, #0]
 8009bec:	bf5c      	itt	pl
 8009bee:	6013      	strpl	r3, [r2, #0]
 8009bf0:	2002      	movpl	r0, #2
 8009bf2:	4770      	bx	lr
 8009bf4:	b299      	uxth	r1, r3
 8009bf6:	b909      	cbnz	r1, 8009bfc <__lo0bits+0x2a>
 8009bf8:	0c1b      	lsrs	r3, r3, #16
 8009bfa:	2010      	movs	r0, #16
 8009bfc:	b2d9      	uxtb	r1, r3
 8009bfe:	b909      	cbnz	r1, 8009c04 <__lo0bits+0x32>
 8009c00:	3008      	adds	r0, #8
 8009c02:	0a1b      	lsrs	r3, r3, #8
 8009c04:	0719      	lsls	r1, r3, #28
 8009c06:	bf04      	itt	eq
 8009c08:	091b      	lsreq	r3, r3, #4
 8009c0a:	3004      	addeq	r0, #4
 8009c0c:	0799      	lsls	r1, r3, #30
 8009c0e:	bf04      	itt	eq
 8009c10:	089b      	lsreq	r3, r3, #2
 8009c12:	3002      	addeq	r0, #2
 8009c14:	07d9      	lsls	r1, r3, #31
 8009c16:	d403      	bmi.n	8009c20 <__lo0bits+0x4e>
 8009c18:	085b      	lsrs	r3, r3, #1
 8009c1a:	f100 0001 	add.w	r0, r0, #1
 8009c1e:	d003      	beq.n	8009c28 <__lo0bits+0x56>
 8009c20:	6013      	str	r3, [r2, #0]
 8009c22:	4770      	bx	lr
 8009c24:	2000      	movs	r0, #0
 8009c26:	4770      	bx	lr
 8009c28:	2020      	movs	r0, #32
 8009c2a:	4770      	bx	lr

08009c2c <__i2b>:
 8009c2c:	b510      	push	{r4, lr}
 8009c2e:	460c      	mov	r4, r1
 8009c30:	2101      	movs	r1, #1
 8009c32:	f7ff febd 	bl	80099b0 <_Balloc>
 8009c36:	4602      	mov	r2, r0
 8009c38:	b928      	cbnz	r0, 8009c46 <__i2b+0x1a>
 8009c3a:	4b05      	ldr	r3, [pc, #20]	@ (8009c50 <__i2b+0x24>)
 8009c3c:	4805      	ldr	r0, [pc, #20]	@ (8009c54 <__i2b+0x28>)
 8009c3e:	f240 1145 	movw	r1, #325	@ 0x145
 8009c42:	f000 fff3 	bl	800ac2c <__assert_func>
 8009c46:	2301      	movs	r3, #1
 8009c48:	6144      	str	r4, [r0, #20]
 8009c4a:	6103      	str	r3, [r0, #16]
 8009c4c:	bd10      	pop	{r4, pc}
 8009c4e:	bf00      	nop
 8009c50:	0800c34d 	.word	0x0800c34d
 8009c54:	0800c3be 	.word	0x0800c3be

08009c58 <__multiply>:
 8009c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c5c:	4614      	mov	r4, r2
 8009c5e:	690a      	ldr	r2, [r1, #16]
 8009c60:	6923      	ldr	r3, [r4, #16]
 8009c62:	429a      	cmp	r2, r3
 8009c64:	bfa8      	it	ge
 8009c66:	4623      	movge	r3, r4
 8009c68:	460f      	mov	r7, r1
 8009c6a:	bfa4      	itt	ge
 8009c6c:	460c      	movge	r4, r1
 8009c6e:	461f      	movge	r7, r3
 8009c70:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009c74:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009c78:	68a3      	ldr	r3, [r4, #8]
 8009c7a:	6861      	ldr	r1, [r4, #4]
 8009c7c:	eb0a 0609 	add.w	r6, sl, r9
 8009c80:	42b3      	cmp	r3, r6
 8009c82:	b085      	sub	sp, #20
 8009c84:	bfb8      	it	lt
 8009c86:	3101      	addlt	r1, #1
 8009c88:	f7ff fe92 	bl	80099b0 <_Balloc>
 8009c8c:	b930      	cbnz	r0, 8009c9c <__multiply+0x44>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	4b44      	ldr	r3, [pc, #272]	@ (8009da4 <__multiply+0x14c>)
 8009c92:	4845      	ldr	r0, [pc, #276]	@ (8009da8 <__multiply+0x150>)
 8009c94:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009c98:	f000 ffc8 	bl	800ac2c <__assert_func>
 8009c9c:	f100 0514 	add.w	r5, r0, #20
 8009ca0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009ca4:	462b      	mov	r3, r5
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	4543      	cmp	r3, r8
 8009caa:	d321      	bcc.n	8009cf0 <__multiply+0x98>
 8009cac:	f107 0114 	add.w	r1, r7, #20
 8009cb0:	f104 0214 	add.w	r2, r4, #20
 8009cb4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009cb8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009cbc:	9302      	str	r3, [sp, #8]
 8009cbe:	1b13      	subs	r3, r2, r4
 8009cc0:	3b15      	subs	r3, #21
 8009cc2:	f023 0303 	bic.w	r3, r3, #3
 8009cc6:	3304      	adds	r3, #4
 8009cc8:	f104 0715 	add.w	r7, r4, #21
 8009ccc:	42ba      	cmp	r2, r7
 8009cce:	bf38      	it	cc
 8009cd0:	2304      	movcc	r3, #4
 8009cd2:	9301      	str	r3, [sp, #4]
 8009cd4:	9b02      	ldr	r3, [sp, #8]
 8009cd6:	9103      	str	r1, [sp, #12]
 8009cd8:	428b      	cmp	r3, r1
 8009cda:	d80c      	bhi.n	8009cf6 <__multiply+0x9e>
 8009cdc:	2e00      	cmp	r6, #0
 8009cde:	dd03      	ble.n	8009ce8 <__multiply+0x90>
 8009ce0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	d05b      	beq.n	8009da0 <__multiply+0x148>
 8009ce8:	6106      	str	r6, [r0, #16]
 8009cea:	b005      	add	sp, #20
 8009cec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cf0:	f843 2b04 	str.w	r2, [r3], #4
 8009cf4:	e7d8      	b.n	8009ca8 <__multiply+0x50>
 8009cf6:	f8b1 a000 	ldrh.w	sl, [r1]
 8009cfa:	f1ba 0f00 	cmp.w	sl, #0
 8009cfe:	d024      	beq.n	8009d4a <__multiply+0xf2>
 8009d00:	f104 0e14 	add.w	lr, r4, #20
 8009d04:	46a9      	mov	r9, r5
 8009d06:	f04f 0c00 	mov.w	ip, #0
 8009d0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009d0e:	f8d9 3000 	ldr.w	r3, [r9]
 8009d12:	fa1f fb87 	uxth.w	fp, r7
 8009d16:	b29b      	uxth	r3, r3
 8009d18:	fb0a 330b 	mla	r3, sl, fp, r3
 8009d1c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009d20:	f8d9 7000 	ldr.w	r7, [r9]
 8009d24:	4463      	add	r3, ip
 8009d26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d2a:	fb0a c70b 	mla	r7, sl, fp, ip
 8009d2e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009d32:	b29b      	uxth	r3, r3
 8009d34:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d38:	4572      	cmp	r2, lr
 8009d3a:	f849 3b04 	str.w	r3, [r9], #4
 8009d3e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009d42:	d8e2      	bhi.n	8009d0a <__multiply+0xb2>
 8009d44:	9b01      	ldr	r3, [sp, #4]
 8009d46:	f845 c003 	str.w	ip, [r5, r3]
 8009d4a:	9b03      	ldr	r3, [sp, #12]
 8009d4c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009d50:	3104      	adds	r1, #4
 8009d52:	f1b9 0f00 	cmp.w	r9, #0
 8009d56:	d021      	beq.n	8009d9c <__multiply+0x144>
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	f104 0c14 	add.w	ip, r4, #20
 8009d5e:	46ae      	mov	lr, r5
 8009d60:	f04f 0a00 	mov.w	sl, #0
 8009d64:	f8bc b000 	ldrh.w	fp, [ip]
 8009d68:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009d6c:	fb09 770b 	mla	r7, r9, fp, r7
 8009d70:	4457      	add	r7, sl
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009d78:	f84e 3b04 	str.w	r3, [lr], #4
 8009d7c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009d80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d84:	f8be 3000 	ldrh.w	r3, [lr]
 8009d88:	fb09 330a 	mla	r3, r9, sl, r3
 8009d8c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009d90:	4562      	cmp	r2, ip
 8009d92:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009d96:	d8e5      	bhi.n	8009d64 <__multiply+0x10c>
 8009d98:	9f01      	ldr	r7, [sp, #4]
 8009d9a:	51eb      	str	r3, [r5, r7]
 8009d9c:	3504      	adds	r5, #4
 8009d9e:	e799      	b.n	8009cd4 <__multiply+0x7c>
 8009da0:	3e01      	subs	r6, #1
 8009da2:	e79b      	b.n	8009cdc <__multiply+0x84>
 8009da4:	0800c34d 	.word	0x0800c34d
 8009da8:	0800c3be 	.word	0x0800c3be

08009dac <__pow5mult>:
 8009dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009db0:	4615      	mov	r5, r2
 8009db2:	f012 0203 	ands.w	r2, r2, #3
 8009db6:	4607      	mov	r7, r0
 8009db8:	460e      	mov	r6, r1
 8009dba:	d007      	beq.n	8009dcc <__pow5mult+0x20>
 8009dbc:	4c25      	ldr	r4, [pc, #148]	@ (8009e54 <__pow5mult+0xa8>)
 8009dbe:	3a01      	subs	r2, #1
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009dc6:	f7ff fe55 	bl	8009a74 <__multadd>
 8009dca:	4606      	mov	r6, r0
 8009dcc:	10ad      	asrs	r5, r5, #2
 8009dce:	d03d      	beq.n	8009e4c <__pow5mult+0xa0>
 8009dd0:	69fc      	ldr	r4, [r7, #28]
 8009dd2:	b97c      	cbnz	r4, 8009df4 <__pow5mult+0x48>
 8009dd4:	2010      	movs	r0, #16
 8009dd6:	f7ff fd23 	bl	8009820 <malloc>
 8009dda:	4602      	mov	r2, r0
 8009ddc:	61f8      	str	r0, [r7, #28]
 8009dde:	b928      	cbnz	r0, 8009dec <__pow5mult+0x40>
 8009de0:	4b1d      	ldr	r3, [pc, #116]	@ (8009e58 <__pow5mult+0xac>)
 8009de2:	481e      	ldr	r0, [pc, #120]	@ (8009e5c <__pow5mult+0xb0>)
 8009de4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009de8:	f000 ff20 	bl	800ac2c <__assert_func>
 8009dec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009df0:	6004      	str	r4, [r0, #0]
 8009df2:	60c4      	str	r4, [r0, #12]
 8009df4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009df8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009dfc:	b94c      	cbnz	r4, 8009e12 <__pow5mult+0x66>
 8009dfe:	f240 2171 	movw	r1, #625	@ 0x271
 8009e02:	4638      	mov	r0, r7
 8009e04:	f7ff ff12 	bl	8009c2c <__i2b>
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e0e:	4604      	mov	r4, r0
 8009e10:	6003      	str	r3, [r0, #0]
 8009e12:	f04f 0900 	mov.w	r9, #0
 8009e16:	07eb      	lsls	r3, r5, #31
 8009e18:	d50a      	bpl.n	8009e30 <__pow5mult+0x84>
 8009e1a:	4631      	mov	r1, r6
 8009e1c:	4622      	mov	r2, r4
 8009e1e:	4638      	mov	r0, r7
 8009e20:	f7ff ff1a 	bl	8009c58 <__multiply>
 8009e24:	4631      	mov	r1, r6
 8009e26:	4680      	mov	r8, r0
 8009e28:	4638      	mov	r0, r7
 8009e2a:	f7ff fe01 	bl	8009a30 <_Bfree>
 8009e2e:	4646      	mov	r6, r8
 8009e30:	106d      	asrs	r5, r5, #1
 8009e32:	d00b      	beq.n	8009e4c <__pow5mult+0xa0>
 8009e34:	6820      	ldr	r0, [r4, #0]
 8009e36:	b938      	cbnz	r0, 8009e48 <__pow5mult+0x9c>
 8009e38:	4622      	mov	r2, r4
 8009e3a:	4621      	mov	r1, r4
 8009e3c:	4638      	mov	r0, r7
 8009e3e:	f7ff ff0b 	bl	8009c58 <__multiply>
 8009e42:	6020      	str	r0, [r4, #0]
 8009e44:	f8c0 9000 	str.w	r9, [r0]
 8009e48:	4604      	mov	r4, r0
 8009e4a:	e7e4      	b.n	8009e16 <__pow5mult+0x6a>
 8009e4c:	4630      	mov	r0, r6
 8009e4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e52:	bf00      	nop
 8009e54:	0800c418 	.word	0x0800c418
 8009e58:	0800c2de 	.word	0x0800c2de
 8009e5c:	0800c3be 	.word	0x0800c3be

08009e60 <__lshift>:
 8009e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e64:	460c      	mov	r4, r1
 8009e66:	6849      	ldr	r1, [r1, #4]
 8009e68:	6923      	ldr	r3, [r4, #16]
 8009e6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009e6e:	68a3      	ldr	r3, [r4, #8]
 8009e70:	4607      	mov	r7, r0
 8009e72:	4691      	mov	r9, r2
 8009e74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009e78:	f108 0601 	add.w	r6, r8, #1
 8009e7c:	42b3      	cmp	r3, r6
 8009e7e:	db0b      	blt.n	8009e98 <__lshift+0x38>
 8009e80:	4638      	mov	r0, r7
 8009e82:	f7ff fd95 	bl	80099b0 <_Balloc>
 8009e86:	4605      	mov	r5, r0
 8009e88:	b948      	cbnz	r0, 8009e9e <__lshift+0x3e>
 8009e8a:	4602      	mov	r2, r0
 8009e8c:	4b28      	ldr	r3, [pc, #160]	@ (8009f30 <__lshift+0xd0>)
 8009e8e:	4829      	ldr	r0, [pc, #164]	@ (8009f34 <__lshift+0xd4>)
 8009e90:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009e94:	f000 feca 	bl	800ac2c <__assert_func>
 8009e98:	3101      	adds	r1, #1
 8009e9a:	005b      	lsls	r3, r3, #1
 8009e9c:	e7ee      	b.n	8009e7c <__lshift+0x1c>
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	f100 0114 	add.w	r1, r0, #20
 8009ea4:	f100 0210 	add.w	r2, r0, #16
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	4553      	cmp	r3, sl
 8009eac:	db33      	blt.n	8009f16 <__lshift+0xb6>
 8009eae:	6920      	ldr	r0, [r4, #16]
 8009eb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009eb4:	f104 0314 	add.w	r3, r4, #20
 8009eb8:	f019 091f 	ands.w	r9, r9, #31
 8009ebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ec0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009ec4:	d02b      	beq.n	8009f1e <__lshift+0xbe>
 8009ec6:	f1c9 0e20 	rsb	lr, r9, #32
 8009eca:	468a      	mov	sl, r1
 8009ecc:	2200      	movs	r2, #0
 8009ece:	6818      	ldr	r0, [r3, #0]
 8009ed0:	fa00 f009 	lsl.w	r0, r0, r9
 8009ed4:	4310      	orrs	r0, r2
 8009ed6:	f84a 0b04 	str.w	r0, [sl], #4
 8009eda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ede:	459c      	cmp	ip, r3
 8009ee0:	fa22 f20e 	lsr.w	r2, r2, lr
 8009ee4:	d8f3      	bhi.n	8009ece <__lshift+0x6e>
 8009ee6:	ebac 0304 	sub.w	r3, ip, r4
 8009eea:	3b15      	subs	r3, #21
 8009eec:	f023 0303 	bic.w	r3, r3, #3
 8009ef0:	3304      	adds	r3, #4
 8009ef2:	f104 0015 	add.w	r0, r4, #21
 8009ef6:	4584      	cmp	ip, r0
 8009ef8:	bf38      	it	cc
 8009efa:	2304      	movcc	r3, #4
 8009efc:	50ca      	str	r2, [r1, r3]
 8009efe:	b10a      	cbz	r2, 8009f04 <__lshift+0xa4>
 8009f00:	f108 0602 	add.w	r6, r8, #2
 8009f04:	3e01      	subs	r6, #1
 8009f06:	4638      	mov	r0, r7
 8009f08:	612e      	str	r6, [r5, #16]
 8009f0a:	4621      	mov	r1, r4
 8009f0c:	f7ff fd90 	bl	8009a30 <_Bfree>
 8009f10:	4628      	mov	r0, r5
 8009f12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f16:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f1a:	3301      	adds	r3, #1
 8009f1c:	e7c5      	b.n	8009eaa <__lshift+0x4a>
 8009f1e:	3904      	subs	r1, #4
 8009f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f24:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f28:	459c      	cmp	ip, r3
 8009f2a:	d8f9      	bhi.n	8009f20 <__lshift+0xc0>
 8009f2c:	e7ea      	b.n	8009f04 <__lshift+0xa4>
 8009f2e:	bf00      	nop
 8009f30:	0800c34d 	.word	0x0800c34d
 8009f34:	0800c3be 	.word	0x0800c3be

08009f38 <__mcmp>:
 8009f38:	690a      	ldr	r2, [r1, #16]
 8009f3a:	4603      	mov	r3, r0
 8009f3c:	6900      	ldr	r0, [r0, #16]
 8009f3e:	1a80      	subs	r0, r0, r2
 8009f40:	b530      	push	{r4, r5, lr}
 8009f42:	d10e      	bne.n	8009f62 <__mcmp+0x2a>
 8009f44:	3314      	adds	r3, #20
 8009f46:	3114      	adds	r1, #20
 8009f48:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009f4c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009f50:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009f54:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009f58:	4295      	cmp	r5, r2
 8009f5a:	d003      	beq.n	8009f64 <__mcmp+0x2c>
 8009f5c:	d205      	bcs.n	8009f6a <__mcmp+0x32>
 8009f5e:	f04f 30ff 	mov.w	r0, #4294967295
 8009f62:	bd30      	pop	{r4, r5, pc}
 8009f64:	42a3      	cmp	r3, r4
 8009f66:	d3f3      	bcc.n	8009f50 <__mcmp+0x18>
 8009f68:	e7fb      	b.n	8009f62 <__mcmp+0x2a>
 8009f6a:	2001      	movs	r0, #1
 8009f6c:	e7f9      	b.n	8009f62 <__mcmp+0x2a>
	...

08009f70 <__mdiff>:
 8009f70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f74:	4689      	mov	r9, r1
 8009f76:	4606      	mov	r6, r0
 8009f78:	4611      	mov	r1, r2
 8009f7a:	4648      	mov	r0, r9
 8009f7c:	4614      	mov	r4, r2
 8009f7e:	f7ff ffdb 	bl	8009f38 <__mcmp>
 8009f82:	1e05      	subs	r5, r0, #0
 8009f84:	d112      	bne.n	8009fac <__mdiff+0x3c>
 8009f86:	4629      	mov	r1, r5
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff fd11 	bl	80099b0 <_Balloc>
 8009f8e:	4602      	mov	r2, r0
 8009f90:	b928      	cbnz	r0, 8009f9e <__mdiff+0x2e>
 8009f92:	4b3f      	ldr	r3, [pc, #252]	@ (800a090 <__mdiff+0x120>)
 8009f94:	f240 2137 	movw	r1, #567	@ 0x237
 8009f98:	483e      	ldr	r0, [pc, #248]	@ (800a094 <__mdiff+0x124>)
 8009f9a:	f000 fe47 	bl	800ac2c <__assert_func>
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009fa4:	4610      	mov	r0, r2
 8009fa6:	b003      	add	sp, #12
 8009fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fac:	bfbc      	itt	lt
 8009fae:	464b      	movlt	r3, r9
 8009fb0:	46a1      	movlt	r9, r4
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009fb8:	bfba      	itte	lt
 8009fba:	461c      	movlt	r4, r3
 8009fbc:	2501      	movlt	r5, #1
 8009fbe:	2500      	movge	r5, #0
 8009fc0:	f7ff fcf6 	bl	80099b0 <_Balloc>
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	b918      	cbnz	r0, 8009fd0 <__mdiff+0x60>
 8009fc8:	4b31      	ldr	r3, [pc, #196]	@ (800a090 <__mdiff+0x120>)
 8009fca:	f240 2145 	movw	r1, #581	@ 0x245
 8009fce:	e7e3      	b.n	8009f98 <__mdiff+0x28>
 8009fd0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009fd4:	6926      	ldr	r6, [r4, #16]
 8009fd6:	60c5      	str	r5, [r0, #12]
 8009fd8:	f109 0310 	add.w	r3, r9, #16
 8009fdc:	f109 0514 	add.w	r5, r9, #20
 8009fe0:	f104 0e14 	add.w	lr, r4, #20
 8009fe4:	f100 0b14 	add.w	fp, r0, #20
 8009fe8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009fec:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	46d9      	mov	r9, fp
 8009ff4:	f04f 0c00 	mov.w	ip, #0
 8009ff8:	9b01      	ldr	r3, [sp, #4]
 8009ffa:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009ffe:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a002:	9301      	str	r3, [sp, #4]
 800a004:	fa1f f38a 	uxth.w	r3, sl
 800a008:	4619      	mov	r1, r3
 800a00a:	b283      	uxth	r3, r0
 800a00c:	1acb      	subs	r3, r1, r3
 800a00e:	0c00      	lsrs	r0, r0, #16
 800a010:	4463      	add	r3, ip
 800a012:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a016:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a01a:	b29b      	uxth	r3, r3
 800a01c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a020:	4576      	cmp	r6, lr
 800a022:	f849 3b04 	str.w	r3, [r9], #4
 800a026:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a02a:	d8e5      	bhi.n	8009ff8 <__mdiff+0x88>
 800a02c:	1b33      	subs	r3, r6, r4
 800a02e:	3b15      	subs	r3, #21
 800a030:	f023 0303 	bic.w	r3, r3, #3
 800a034:	3415      	adds	r4, #21
 800a036:	3304      	adds	r3, #4
 800a038:	42a6      	cmp	r6, r4
 800a03a:	bf38      	it	cc
 800a03c:	2304      	movcc	r3, #4
 800a03e:	441d      	add	r5, r3
 800a040:	445b      	add	r3, fp
 800a042:	461e      	mov	r6, r3
 800a044:	462c      	mov	r4, r5
 800a046:	4544      	cmp	r4, r8
 800a048:	d30e      	bcc.n	800a068 <__mdiff+0xf8>
 800a04a:	f108 0103 	add.w	r1, r8, #3
 800a04e:	1b49      	subs	r1, r1, r5
 800a050:	f021 0103 	bic.w	r1, r1, #3
 800a054:	3d03      	subs	r5, #3
 800a056:	45a8      	cmp	r8, r5
 800a058:	bf38      	it	cc
 800a05a:	2100      	movcc	r1, #0
 800a05c:	440b      	add	r3, r1
 800a05e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a062:	b191      	cbz	r1, 800a08a <__mdiff+0x11a>
 800a064:	6117      	str	r7, [r2, #16]
 800a066:	e79d      	b.n	8009fa4 <__mdiff+0x34>
 800a068:	f854 1b04 	ldr.w	r1, [r4], #4
 800a06c:	46e6      	mov	lr, ip
 800a06e:	0c08      	lsrs	r0, r1, #16
 800a070:	fa1c fc81 	uxtah	ip, ip, r1
 800a074:	4471      	add	r1, lr
 800a076:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a07a:	b289      	uxth	r1, r1
 800a07c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a080:	f846 1b04 	str.w	r1, [r6], #4
 800a084:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a088:	e7dd      	b.n	800a046 <__mdiff+0xd6>
 800a08a:	3f01      	subs	r7, #1
 800a08c:	e7e7      	b.n	800a05e <__mdiff+0xee>
 800a08e:	bf00      	nop
 800a090:	0800c34d 	.word	0x0800c34d
 800a094:	0800c3be 	.word	0x0800c3be

0800a098 <__ulp>:
 800a098:	b082      	sub	sp, #8
 800a09a:	ed8d 0b00 	vstr	d0, [sp]
 800a09e:	9a01      	ldr	r2, [sp, #4]
 800a0a0:	4b0f      	ldr	r3, [pc, #60]	@ (800a0e0 <__ulp+0x48>)
 800a0a2:	4013      	ands	r3, r2
 800a0a4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	dc08      	bgt.n	800a0be <__ulp+0x26>
 800a0ac:	425b      	negs	r3, r3
 800a0ae:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a0b2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a0b6:	da04      	bge.n	800a0c2 <__ulp+0x2a>
 800a0b8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a0bc:	4113      	asrs	r3, r2
 800a0be:	2200      	movs	r2, #0
 800a0c0:	e008      	b.n	800a0d4 <__ulp+0x3c>
 800a0c2:	f1a2 0314 	sub.w	r3, r2, #20
 800a0c6:	2b1e      	cmp	r3, #30
 800a0c8:	bfda      	itte	le
 800a0ca:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a0ce:	40da      	lsrle	r2, r3
 800a0d0:	2201      	movgt	r2, #1
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	4619      	mov	r1, r3
 800a0d6:	4610      	mov	r0, r2
 800a0d8:	ec41 0b10 	vmov	d0, r0, r1
 800a0dc:	b002      	add	sp, #8
 800a0de:	4770      	bx	lr
 800a0e0:	7ff00000 	.word	0x7ff00000

0800a0e4 <__b2d>:
 800a0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0e8:	6906      	ldr	r6, [r0, #16]
 800a0ea:	f100 0814 	add.w	r8, r0, #20
 800a0ee:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a0f2:	1f37      	subs	r7, r6, #4
 800a0f4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0f8:	4610      	mov	r0, r2
 800a0fa:	f7ff fd4b 	bl	8009b94 <__hi0bits>
 800a0fe:	f1c0 0320 	rsb	r3, r0, #32
 800a102:	280a      	cmp	r0, #10
 800a104:	600b      	str	r3, [r1, #0]
 800a106:	491b      	ldr	r1, [pc, #108]	@ (800a174 <__b2d+0x90>)
 800a108:	dc15      	bgt.n	800a136 <__b2d+0x52>
 800a10a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a10e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a112:	45b8      	cmp	r8, r7
 800a114:	ea43 0501 	orr.w	r5, r3, r1
 800a118:	bf34      	ite	cc
 800a11a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a11e:	2300      	movcs	r3, #0
 800a120:	3015      	adds	r0, #21
 800a122:	fa02 f000 	lsl.w	r0, r2, r0
 800a126:	fa23 f30c 	lsr.w	r3, r3, ip
 800a12a:	4303      	orrs	r3, r0
 800a12c:	461c      	mov	r4, r3
 800a12e:	ec45 4b10 	vmov	d0, r4, r5
 800a132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a136:	45b8      	cmp	r8, r7
 800a138:	bf3a      	itte	cc
 800a13a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a13e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a142:	2300      	movcs	r3, #0
 800a144:	380b      	subs	r0, #11
 800a146:	d012      	beq.n	800a16e <__b2d+0x8a>
 800a148:	f1c0 0120 	rsb	r1, r0, #32
 800a14c:	fa23 f401 	lsr.w	r4, r3, r1
 800a150:	4082      	lsls	r2, r0
 800a152:	4322      	orrs	r2, r4
 800a154:	4547      	cmp	r7, r8
 800a156:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a15a:	bf8c      	ite	hi
 800a15c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a160:	2200      	movls	r2, #0
 800a162:	4083      	lsls	r3, r0
 800a164:	40ca      	lsrs	r2, r1
 800a166:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a16a:	4313      	orrs	r3, r2
 800a16c:	e7de      	b.n	800a12c <__b2d+0x48>
 800a16e:	ea42 0501 	orr.w	r5, r2, r1
 800a172:	e7db      	b.n	800a12c <__b2d+0x48>
 800a174:	3ff00000 	.word	0x3ff00000

0800a178 <__d2b>:
 800a178:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a17c:	460f      	mov	r7, r1
 800a17e:	2101      	movs	r1, #1
 800a180:	ec59 8b10 	vmov	r8, r9, d0
 800a184:	4616      	mov	r6, r2
 800a186:	f7ff fc13 	bl	80099b0 <_Balloc>
 800a18a:	4604      	mov	r4, r0
 800a18c:	b930      	cbnz	r0, 800a19c <__d2b+0x24>
 800a18e:	4602      	mov	r2, r0
 800a190:	4b23      	ldr	r3, [pc, #140]	@ (800a220 <__d2b+0xa8>)
 800a192:	4824      	ldr	r0, [pc, #144]	@ (800a224 <__d2b+0xac>)
 800a194:	f240 310f 	movw	r1, #783	@ 0x30f
 800a198:	f000 fd48 	bl	800ac2c <__assert_func>
 800a19c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a1a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1a4:	b10d      	cbz	r5, 800a1aa <__d2b+0x32>
 800a1a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a1aa:	9301      	str	r3, [sp, #4]
 800a1ac:	f1b8 0300 	subs.w	r3, r8, #0
 800a1b0:	d023      	beq.n	800a1fa <__d2b+0x82>
 800a1b2:	4668      	mov	r0, sp
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	f7ff fd0c 	bl	8009bd2 <__lo0bits>
 800a1ba:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a1be:	b1d0      	cbz	r0, 800a1f6 <__d2b+0x7e>
 800a1c0:	f1c0 0320 	rsb	r3, r0, #32
 800a1c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c8:	430b      	orrs	r3, r1
 800a1ca:	40c2      	lsrs	r2, r0
 800a1cc:	6163      	str	r3, [r4, #20]
 800a1ce:	9201      	str	r2, [sp, #4]
 800a1d0:	9b01      	ldr	r3, [sp, #4]
 800a1d2:	61a3      	str	r3, [r4, #24]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	bf0c      	ite	eq
 800a1d8:	2201      	moveq	r2, #1
 800a1da:	2202      	movne	r2, #2
 800a1dc:	6122      	str	r2, [r4, #16]
 800a1de:	b1a5      	cbz	r5, 800a20a <__d2b+0x92>
 800a1e0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a1e4:	4405      	add	r5, r0
 800a1e6:	603d      	str	r5, [r7, #0]
 800a1e8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a1ec:	6030      	str	r0, [r6, #0]
 800a1ee:	4620      	mov	r0, r4
 800a1f0:	b003      	add	sp, #12
 800a1f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a1f6:	6161      	str	r1, [r4, #20]
 800a1f8:	e7ea      	b.n	800a1d0 <__d2b+0x58>
 800a1fa:	a801      	add	r0, sp, #4
 800a1fc:	f7ff fce9 	bl	8009bd2 <__lo0bits>
 800a200:	9b01      	ldr	r3, [sp, #4]
 800a202:	6163      	str	r3, [r4, #20]
 800a204:	3020      	adds	r0, #32
 800a206:	2201      	movs	r2, #1
 800a208:	e7e8      	b.n	800a1dc <__d2b+0x64>
 800a20a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a20e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a212:	6038      	str	r0, [r7, #0]
 800a214:	6918      	ldr	r0, [r3, #16]
 800a216:	f7ff fcbd 	bl	8009b94 <__hi0bits>
 800a21a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a21e:	e7e5      	b.n	800a1ec <__d2b+0x74>
 800a220:	0800c34d 	.word	0x0800c34d
 800a224:	0800c3be 	.word	0x0800c3be

0800a228 <__ratio>:
 800a228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a22c:	b085      	sub	sp, #20
 800a22e:	e9cd 1000 	strd	r1, r0, [sp]
 800a232:	a902      	add	r1, sp, #8
 800a234:	f7ff ff56 	bl	800a0e4 <__b2d>
 800a238:	9800      	ldr	r0, [sp, #0]
 800a23a:	a903      	add	r1, sp, #12
 800a23c:	ec55 4b10 	vmov	r4, r5, d0
 800a240:	f7ff ff50 	bl	800a0e4 <__b2d>
 800a244:	9b01      	ldr	r3, [sp, #4]
 800a246:	6919      	ldr	r1, [r3, #16]
 800a248:	9b00      	ldr	r3, [sp, #0]
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	1ac9      	subs	r1, r1, r3
 800a24e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a252:	1a9b      	subs	r3, r3, r2
 800a254:	ec5b ab10 	vmov	sl, fp, d0
 800a258:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	bfce      	itee	gt
 800a260:	462a      	movgt	r2, r5
 800a262:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a266:	465a      	movle	r2, fp
 800a268:	462f      	mov	r7, r5
 800a26a:	46d9      	mov	r9, fp
 800a26c:	bfcc      	ite	gt
 800a26e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a272:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a276:	464b      	mov	r3, r9
 800a278:	4652      	mov	r2, sl
 800a27a:	4620      	mov	r0, r4
 800a27c:	4639      	mov	r1, r7
 800a27e:	f7f6 fb05 	bl	800088c <__aeabi_ddiv>
 800a282:	ec41 0b10 	vmov	d0, r0, r1
 800a286:	b005      	add	sp, #20
 800a288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a28c <__copybits>:
 800a28c:	3901      	subs	r1, #1
 800a28e:	b570      	push	{r4, r5, r6, lr}
 800a290:	1149      	asrs	r1, r1, #5
 800a292:	6914      	ldr	r4, [r2, #16]
 800a294:	3101      	adds	r1, #1
 800a296:	f102 0314 	add.w	r3, r2, #20
 800a29a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a29e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a2a2:	1f05      	subs	r5, r0, #4
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d30c      	bcc.n	800a2c2 <__copybits+0x36>
 800a2a8:	1aa3      	subs	r3, r4, r2
 800a2aa:	3b11      	subs	r3, #17
 800a2ac:	f023 0303 	bic.w	r3, r3, #3
 800a2b0:	3211      	adds	r2, #17
 800a2b2:	42a2      	cmp	r2, r4
 800a2b4:	bf88      	it	hi
 800a2b6:	2300      	movhi	r3, #0
 800a2b8:	4418      	add	r0, r3
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	4288      	cmp	r0, r1
 800a2be:	d305      	bcc.n	800a2cc <__copybits+0x40>
 800a2c0:	bd70      	pop	{r4, r5, r6, pc}
 800a2c2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a2c6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a2ca:	e7eb      	b.n	800a2a4 <__copybits+0x18>
 800a2cc:	f840 3b04 	str.w	r3, [r0], #4
 800a2d0:	e7f4      	b.n	800a2bc <__copybits+0x30>

0800a2d2 <__any_on>:
 800a2d2:	f100 0214 	add.w	r2, r0, #20
 800a2d6:	6900      	ldr	r0, [r0, #16]
 800a2d8:	114b      	asrs	r3, r1, #5
 800a2da:	4298      	cmp	r0, r3
 800a2dc:	b510      	push	{r4, lr}
 800a2de:	db11      	blt.n	800a304 <__any_on+0x32>
 800a2e0:	dd0a      	ble.n	800a2f8 <__any_on+0x26>
 800a2e2:	f011 011f 	ands.w	r1, r1, #31
 800a2e6:	d007      	beq.n	800a2f8 <__any_on+0x26>
 800a2e8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a2ec:	fa24 f001 	lsr.w	r0, r4, r1
 800a2f0:	fa00 f101 	lsl.w	r1, r0, r1
 800a2f4:	428c      	cmp	r4, r1
 800a2f6:	d10b      	bne.n	800a310 <__any_on+0x3e>
 800a2f8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a2fc:	4293      	cmp	r3, r2
 800a2fe:	d803      	bhi.n	800a308 <__any_on+0x36>
 800a300:	2000      	movs	r0, #0
 800a302:	bd10      	pop	{r4, pc}
 800a304:	4603      	mov	r3, r0
 800a306:	e7f7      	b.n	800a2f8 <__any_on+0x26>
 800a308:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a30c:	2900      	cmp	r1, #0
 800a30e:	d0f5      	beq.n	800a2fc <__any_on+0x2a>
 800a310:	2001      	movs	r0, #1
 800a312:	e7f6      	b.n	800a302 <__any_on+0x30>

0800a314 <_strtol_l.constprop.0>:
 800a314:	2b24      	cmp	r3, #36	@ 0x24
 800a316:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a31a:	4686      	mov	lr, r0
 800a31c:	4690      	mov	r8, r2
 800a31e:	d801      	bhi.n	800a324 <_strtol_l.constprop.0+0x10>
 800a320:	2b01      	cmp	r3, #1
 800a322:	d106      	bne.n	800a332 <_strtol_l.constprop.0+0x1e>
 800a324:	f7fe f860 	bl	80083e8 <__errno>
 800a328:	2316      	movs	r3, #22
 800a32a:	6003      	str	r3, [r0, #0]
 800a32c:	2000      	movs	r0, #0
 800a32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a332:	4834      	ldr	r0, [pc, #208]	@ (800a404 <_strtol_l.constprop.0+0xf0>)
 800a334:	460d      	mov	r5, r1
 800a336:	462a      	mov	r2, r5
 800a338:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a33c:	5d06      	ldrb	r6, [r0, r4]
 800a33e:	f016 0608 	ands.w	r6, r6, #8
 800a342:	d1f8      	bne.n	800a336 <_strtol_l.constprop.0+0x22>
 800a344:	2c2d      	cmp	r4, #45	@ 0x2d
 800a346:	d12d      	bne.n	800a3a4 <_strtol_l.constprop.0+0x90>
 800a348:	782c      	ldrb	r4, [r5, #0]
 800a34a:	2601      	movs	r6, #1
 800a34c:	1c95      	adds	r5, r2, #2
 800a34e:	f033 0210 	bics.w	r2, r3, #16
 800a352:	d109      	bne.n	800a368 <_strtol_l.constprop.0+0x54>
 800a354:	2c30      	cmp	r4, #48	@ 0x30
 800a356:	d12a      	bne.n	800a3ae <_strtol_l.constprop.0+0x9a>
 800a358:	782a      	ldrb	r2, [r5, #0]
 800a35a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a35e:	2a58      	cmp	r2, #88	@ 0x58
 800a360:	d125      	bne.n	800a3ae <_strtol_l.constprop.0+0x9a>
 800a362:	786c      	ldrb	r4, [r5, #1]
 800a364:	2310      	movs	r3, #16
 800a366:	3502      	adds	r5, #2
 800a368:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a36c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a370:	2200      	movs	r2, #0
 800a372:	fbbc f9f3 	udiv	r9, ip, r3
 800a376:	4610      	mov	r0, r2
 800a378:	fb03 ca19 	mls	sl, r3, r9, ip
 800a37c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a380:	2f09      	cmp	r7, #9
 800a382:	d81b      	bhi.n	800a3bc <_strtol_l.constprop.0+0xa8>
 800a384:	463c      	mov	r4, r7
 800a386:	42a3      	cmp	r3, r4
 800a388:	dd27      	ble.n	800a3da <_strtol_l.constprop.0+0xc6>
 800a38a:	1c57      	adds	r7, r2, #1
 800a38c:	d007      	beq.n	800a39e <_strtol_l.constprop.0+0x8a>
 800a38e:	4581      	cmp	r9, r0
 800a390:	d320      	bcc.n	800a3d4 <_strtol_l.constprop.0+0xc0>
 800a392:	d101      	bne.n	800a398 <_strtol_l.constprop.0+0x84>
 800a394:	45a2      	cmp	sl, r4
 800a396:	db1d      	blt.n	800a3d4 <_strtol_l.constprop.0+0xc0>
 800a398:	fb00 4003 	mla	r0, r0, r3, r4
 800a39c:	2201      	movs	r2, #1
 800a39e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3a2:	e7eb      	b.n	800a37c <_strtol_l.constprop.0+0x68>
 800a3a4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a3a6:	bf04      	itt	eq
 800a3a8:	782c      	ldrbeq	r4, [r5, #0]
 800a3aa:	1c95      	addeq	r5, r2, #2
 800a3ac:	e7cf      	b.n	800a34e <_strtol_l.constprop.0+0x3a>
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d1da      	bne.n	800a368 <_strtol_l.constprop.0+0x54>
 800a3b2:	2c30      	cmp	r4, #48	@ 0x30
 800a3b4:	bf0c      	ite	eq
 800a3b6:	2308      	moveq	r3, #8
 800a3b8:	230a      	movne	r3, #10
 800a3ba:	e7d5      	b.n	800a368 <_strtol_l.constprop.0+0x54>
 800a3bc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a3c0:	2f19      	cmp	r7, #25
 800a3c2:	d801      	bhi.n	800a3c8 <_strtol_l.constprop.0+0xb4>
 800a3c4:	3c37      	subs	r4, #55	@ 0x37
 800a3c6:	e7de      	b.n	800a386 <_strtol_l.constprop.0+0x72>
 800a3c8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a3cc:	2f19      	cmp	r7, #25
 800a3ce:	d804      	bhi.n	800a3da <_strtol_l.constprop.0+0xc6>
 800a3d0:	3c57      	subs	r4, #87	@ 0x57
 800a3d2:	e7d8      	b.n	800a386 <_strtol_l.constprop.0+0x72>
 800a3d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d8:	e7e1      	b.n	800a39e <_strtol_l.constprop.0+0x8a>
 800a3da:	1c53      	adds	r3, r2, #1
 800a3dc:	d108      	bne.n	800a3f0 <_strtol_l.constprop.0+0xdc>
 800a3de:	2322      	movs	r3, #34	@ 0x22
 800a3e0:	f8ce 3000 	str.w	r3, [lr]
 800a3e4:	4660      	mov	r0, ip
 800a3e6:	f1b8 0f00 	cmp.w	r8, #0
 800a3ea:	d0a0      	beq.n	800a32e <_strtol_l.constprop.0+0x1a>
 800a3ec:	1e69      	subs	r1, r5, #1
 800a3ee:	e006      	b.n	800a3fe <_strtol_l.constprop.0+0xea>
 800a3f0:	b106      	cbz	r6, 800a3f4 <_strtol_l.constprop.0+0xe0>
 800a3f2:	4240      	negs	r0, r0
 800a3f4:	f1b8 0f00 	cmp.w	r8, #0
 800a3f8:	d099      	beq.n	800a32e <_strtol_l.constprop.0+0x1a>
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	d1f6      	bne.n	800a3ec <_strtol_l.constprop.0+0xd8>
 800a3fe:	f8c8 1000 	str.w	r1, [r8]
 800a402:	e794      	b.n	800a32e <_strtol_l.constprop.0+0x1a>
 800a404:	0800c519 	.word	0x0800c519

0800a408 <_strtol_r>:
 800a408:	f7ff bf84 	b.w	800a314 <_strtol_l.constprop.0>

0800a40c <__ascii_wctomb>:
 800a40c:	4603      	mov	r3, r0
 800a40e:	4608      	mov	r0, r1
 800a410:	b141      	cbz	r1, 800a424 <__ascii_wctomb+0x18>
 800a412:	2aff      	cmp	r2, #255	@ 0xff
 800a414:	d904      	bls.n	800a420 <__ascii_wctomb+0x14>
 800a416:	228a      	movs	r2, #138	@ 0x8a
 800a418:	601a      	str	r2, [r3, #0]
 800a41a:	f04f 30ff 	mov.w	r0, #4294967295
 800a41e:	4770      	bx	lr
 800a420:	700a      	strb	r2, [r1, #0]
 800a422:	2001      	movs	r0, #1
 800a424:	4770      	bx	lr

0800a426 <__ssputs_r>:
 800a426:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a42a:	688e      	ldr	r6, [r1, #8]
 800a42c:	461f      	mov	r7, r3
 800a42e:	42be      	cmp	r6, r7
 800a430:	680b      	ldr	r3, [r1, #0]
 800a432:	4682      	mov	sl, r0
 800a434:	460c      	mov	r4, r1
 800a436:	4690      	mov	r8, r2
 800a438:	d82d      	bhi.n	800a496 <__ssputs_r+0x70>
 800a43a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a43e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a442:	d026      	beq.n	800a492 <__ssputs_r+0x6c>
 800a444:	6965      	ldr	r5, [r4, #20]
 800a446:	6909      	ldr	r1, [r1, #16]
 800a448:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a44c:	eba3 0901 	sub.w	r9, r3, r1
 800a450:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a454:	1c7b      	adds	r3, r7, #1
 800a456:	444b      	add	r3, r9
 800a458:	106d      	asrs	r5, r5, #1
 800a45a:	429d      	cmp	r5, r3
 800a45c:	bf38      	it	cc
 800a45e:	461d      	movcc	r5, r3
 800a460:	0553      	lsls	r3, r2, #21
 800a462:	d527      	bpl.n	800a4b4 <__ssputs_r+0x8e>
 800a464:	4629      	mov	r1, r5
 800a466:	f7ff fa05 	bl	8009874 <_malloc_r>
 800a46a:	4606      	mov	r6, r0
 800a46c:	b360      	cbz	r0, 800a4c8 <__ssputs_r+0xa2>
 800a46e:	6921      	ldr	r1, [r4, #16]
 800a470:	464a      	mov	r2, r9
 800a472:	f7fd ffe6 	bl	8008442 <memcpy>
 800a476:	89a3      	ldrh	r3, [r4, #12]
 800a478:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a47c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a480:	81a3      	strh	r3, [r4, #12]
 800a482:	6126      	str	r6, [r4, #16]
 800a484:	6165      	str	r5, [r4, #20]
 800a486:	444e      	add	r6, r9
 800a488:	eba5 0509 	sub.w	r5, r5, r9
 800a48c:	6026      	str	r6, [r4, #0]
 800a48e:	60a5      	str	r5, [r4, #8]
 800a490:	463e      	mov	r6, r7
 800a492:	42be      	cmp	r6, r7
 800a494:	d900      	bls.n	800a498 <__ssputs_r+0x72>
 800a496:	463e      	mov	r6, r7
 800a498:	6820      	ldr	r0, [r4, #0]
 800a49a:	4632      	mov	r2, r6
 800a49c:	4641      	mov	r1, r8
 800a49e:	f000 fb9b 	bl	800abd8 <memmove>
 800a4a2:	68a3      	ldr	r3, [r4, #8]
 800a4a4:	1b9b      	subs	r3, r3, r6
 800a4a6:	60a3      	str	r3, [r4, #8]
 800a4a8:	6823      	ldr	r3, [r4, #0]
 800a4aa:	4433      	add	r3, r6
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	2000      	movs	r0, #0
 800a4b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b4:	462a      	mov	r2, r5
 800a4b6:	f000 fbeb 	bl	800ac90 <_realloc_r>
 800a4ba:	4606      	mov	r6, r0
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	d1e0      	bne.n	800a482 <__ssputs_r+0x5c>
 800a4c0:	6921      	ldr	r1, [r4, #16]
 800a4c2:	4650      	mov	r0, sl
 800a4c4:	f7fe fe28 	bl	8009118 <_free_r>
 800a4c8:	230c      	movs	r3, #12
 800a4ca:	f8ca 3000 	str.w	r3, [sl]
 800a4ce:	89a3      	ldrh	r3, [r4, #12]
 800a4d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a4d4:	81a3      	strh	r3, [r4, #12]
 800a4d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a4da:	e7e9      	b.n	800a4b0 <__ssputs_r+0x8a>

0800a4dc <_svfiprintf_r>:
 800a4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e0:	4698      	mov	r8, r3
 800a4e2:	898b      	ldrh	r3, [r1, #12]
 800a4e4:	061b      	lsls	r3, r3, #24
 800a4e6:	b09d      	sub	sp, #116	@ 0x74
 800a4e8:	4607      	mov	r7, r0
 800a4ea:	460d      	mov	r5, r1
 800a4ec:	4614      	mov	r4, r2
 800a4ee:	d510      	bpl.n	800a512 <_svfiprintf_r+0x36>
 800a4f0:	690b      	ldr	r3, [r1, #16]
 800a4f2:	b973      	cbnz	r3, 800a512 <_svfiprintf_r+0x36>
 800a4f4:	2140      	movs	r1, #64	@ 0x40
 800a4f6:	f7ff f9bd 	bl	8009874 <_malloc_r>
 800a4fa:	6028      	str	r0, [r5, #0]
 800a4fc:	6128      	str	r0, [r5, #16]
 800a4fe:	b930      	cbnz	r0, 800a50e <_svfiprintf_r+0x32>
 800a500:	230c      	movs	r3, #12
 800a502:	603b      	str	r3, [r7, #0]
 800a504:	f04f 30ff 	mov.w	r0, #4294967295
 800a508:	b01d      	add	sp, #116	@ 0x74
 800a50a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a50e:	2340      	movs	r3, #64	@ 0x40
 800a510:	616b      	str	r3, [r5, #20]
 800a512:	2300      	movs	r3, #0
 800a514:	9309      	str	r3, [sp, #36]	@ 0x24
 800a516:	2320      	movs	r3, #32
 800a518:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a51c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a520:	2330      	movs	r3, #48	@ 0x30
 800a522:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a6c0 <_svfiprintf_r+0x1e4>
 800a526:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a52a:	f04f 0901 	mov.w	r9, #1
 800a52e:	4623      	mov	r3, r4
 800a530:	469a      	mov	sl, r3
 800a532:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a536:	b10a      	cbz	r2, 800a53c <_svfiprintf_r+0x60>
 800a538:	2a25      	cmp	r2, #37	@ 0x25
 800a53a:	d1f9      	bne.n	800a530 <_svfiprintf_r+0x54>
 800a53c:	ebba 0b04 	subs.w	fp, sl, r4
 800a540:	d00b      	beq.n	800a55a <_svfiprintf_r+0x7e>
 800a542:	465b      	mov	r3, fp
 800a544:	4622      	mov	r2, r4
 800a546:	4629      	mov	r1, r5
 800a548:	4638      	mov	r0, r7
 800a54a:	f7ff ff6c 	bl	800a426 <__ssputs_r>
 800a54e:	3001      	adds	r0, #1
 800a550:	f000 80a7 	beq.w	800a6a2 <_svfiprintf_r+0x1c6>
 800a554:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a556:	445a      	add	r2, fp
 800a558:	9209      	str	r2, [sp, #36]	@ 0x24
 800a55a:	f89a 3000 	ldrb.w	r3, [sl]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	f000 809f 	beq.w	800a6a2 <_svfiprintf_r+0x1c6>
 800a564:	2300      	movs	r3, #0
 800a566:	f04f 32ff 	mov.w	r2, #4294967295
 800a56a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a56e:	f10a 0a01 	add.w	sl, sl, #1
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	9307      	str	r3, [sp, #28]
 800a576:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a57a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a57c:	4654      	mov	r4, sl
 800a57e:	2205      	movs	r2, #5
 800a580:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a584:	484e      	ldr	r0, [pc, #312]	@ (800a6c0 <_svfiprintf_r+0x1e4>)
 800a586:	f7f5 fe43 	bl	8000210 <memchr>
 800a58a:	9a04      	ldr	r2, [sp, #16]
 800a58c:	b9d8      	cbnz	r0, 800a5c6 <_svfiprintf_r+0xea>
 800a58e:	06d0      	lsls	r0, r2, #27
 800a590:	bf44      	itt	mi
 800a592:	2320      	movmi	r3, #32
 800a594:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a598:	0711      	lsls	r1, r2, #28
 800a59a:	bf44      	itt	mi
 800a59c:	232b      	movmi	r3, #43	@ 0x2b
 800a59e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5a2:	f89a 3000 	ldrb.w	r3, [sl]
 800a5a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5a8:	d015      	beq.n	800a5d6 <_svfiprintf_r+0xfa>
 800a5aa:	9a07      	ldr	r2, [sp, #28]
 800a5ac:	4654      	mov	r4, sl
 800a5ae:	2000      	movs	r0, #0
 800a5b0:	f04f 0c0a 	mov.w	ip, #10
 800a5b4:	4621      	mov	r1, r4
 800a5b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5ba:	3b30      	subs	r3, #48	@ 0x30
 800a5bc:	2b09      	cmp	r3, #9
 800a5be:	d94b      	bls.n	800a658 <_svfiprintf_r+0x17c>
 800a5c0:	b1b0      	cbz	r0, 800a5f0 <_svfiprintf_r+0x114>
 800a5c2:	9207      	str	r2, [sp, #28]
 800a5c4:	e014      	b.n	800a5f0 <_svfiprintf_r+0x114>
 800a5c6:	eba0 0308 	sub.w	r3, r0, r8
 800a5ca:	fa09 f303 	lsl.w	r3, r9, r3
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	9304      	str	r3, [sp, #16]
 800a5d2:	46a2      	mov	sl, r4
 800a5d4:	e7d2      	b.n	800a57c <_svfiprintf_r+0xa0>
 800a5d6:	9b03      	ldr	r3, [sp, #12]
 800a5d8:	1d19      	adds	r1, r3, #4
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	9103      	str	r1, [sp, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	bfbb      	ittet	lt
 800a5e2:	425b      	neglt	r3, r3
 800a5e4:	f042 0202 	orrlt.w	r2, r2, #2
 800a5e8:	9307      	strge	r3, [sp, #28]
 800a5ea:	9307      	strlt	r3, [sp, #28]
 800a5ec:	bfb8      	it	lt
 800a5ee:	9204      	strlt	r2, [sp, #16]
 800a5f0:	7823      	ldrb	r3, [r4, #0]
 800a5f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800a5f4:	d10a      	bne.n	800a60c <_svfiprintf_r+0x130>
 800a5f6:	7863      	ldrb	r3, [r4, #1]
 800a5f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5fa:	d132      	bne.n	800a662 <_svfiprintf_r+0x186>
 800a5fc:	9b03      	ldr	r3, [sp, #12]
 800a5fe:	1d1a      	adds	r2, r3, #4
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	9203      	str	r2, [sp, #12]
 800a604:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a608:	3402      	adds	r4, #2
 800a60a:	9305      	str	r3, [sp, #20]
 800a60c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a6d0 <_svfiprintf_r+0x1f4>
 800a610:	7821      	ldrb	r1, [r4, #0]
 800a612:	2203      	movs	r2, #3
 800a614:	4650      	mov	r0, sl
 800a616:	f7f5 fdfb 	bl	8000210 <memchr>
 800a61a:	b138      	cbz	r0, 800a62c <_svfiprintf_r+0x150>
 800a61c:	9b04      	ldr	r3, [sp, #16]
 800a61e:	eba0 000a 	sub.w	r0, r0, sl
 800a622:	2240      	movs	r2, #64	@ 0x40
 800a624:	4082      	lsls	r2, r0
 800a626:	4313      	orrs	r3, r2
 800a628:	3401      	adds	r4, #1
 800a62a:	9304      	str	r3, [sp, #16]
 800a62c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a630:	4824      	ldr	r0, [pc, #144]	@ (800a6c4 <_svfiprintf_r+0x1e8>)
 800a632:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a636:	2206      	movs	r2, #6
 800a638:	f7f5 fdea 	bl	8000210 <memchr>
 800a63c:	2800      	cmp	r0, #0
 800a63e:	d036      	beq.n	800a6ae <_svfiprintf_r+0x1d2>
 800a640:	4b21      	ldr	r3, [pc, #132]	@ (800a6c8 <_svfiprintf_r+0x1ec>)
 800a642:	bb1b      	cbnz	r3, 800a68c <_svfiprintf_r+0x1b0>
 800a644:	9b03      	ldr	r3, [sp, #12]
 800a646:	3307      	adds	r3, #7
 800a648:	f023 0307 	bic.w	r3, r3, #7
 800a64c:	3308      	adds	r3, #8
 800a64e:	9303      	str	r3, [sp, #12]
 800a650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a652:	4433      	add	r3, r6
 800a654:	9309      	str	r3, [sp, #36]	@ 0x24
 800a656:	e76a      	b.n	800a52e <_svfiprintf_r+0x52>
 800a658:	fb0c 3202 	mla	r2, ip, r2, r3
 800a65c:	460c      	mov	r4, r1
 800a65e:	2001      	movs	r0, #1
 800a660:	e7a8      	b.n	800a5b4 <_svfiprintf_r+0xd8>
 800a662:	2300      	movs	r3, #0
 800a664:	3401      	adds	r4, #1
 800a666:	9305      	str	r3, [sp, #20]
 800a668:	4619      	mov	r1, r3
 800a66a:	f04f 0c0a 	mov.w	ip, #10
 800a66e:	4620      	mov	r0, r4
 800a670:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a674:	3a30      	subs	r2, #48	@ 0x30
 800a676:	2a09      	cmp	r2, #9
 800a678:	d903      	bls.n	800a682 <_svfiprintf_r+0x1a6>
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0c6      	beq.n	800a60c <_svfiprintf_r+0x130>
 800a67e:	9105      	str	r1, [sp, #20]
 800a680:	e7c4      	b.n	800a60c <_svfiprintf_r+0x130>
 800a682:	fb0c 2101 	mla	r1, ip, r1, r2
 800a686:	4604      	mov	r4, r0
 800a688:	2301      	movs	r3, #1
 800a68a:	e7f0      	b.n	800a66e <_svfiprintf_r+0x192>
 800a68c:	ab03      	add	r3, sp, #12
 800a68e:	9300      	str	r3, [sp, #0]
 800a690:	462a      	mov	r2, r5
 800a692:	4b0e      	ldr	r3, [pc, #56]	@ (800a6cc <_svfiprintf_r+0x1f0>)
 800a694:	a904      	add	r1, sp, #16
 800a696:	4638      	mov	r0, r7
 800a698:	f7fc ff2c 	bl	80074f4 <_printf_float>
 800a69c:	1c42      	adds	r2, r0, #1
 800a69e:	4606      	mov	r6, r0
 800a6a0:	d1d6      	bne.n	800a650 <_svfiprintf_r+0x174>
 800a6a2:	89ab      	ldrh	r3, [r5, #12]
 800a6a4:	065b      	lsls	r3, r3, #25
 800a6a6:	f53f af2d 	bmi.w	800a504 <_svfiprintf_r+0x28>
 800a6aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6ac:	e72c      	b.n	800a508 <_svfiprintf_r+0x2c>
 800a6ae:	ab03      	add	r3, sp, #12
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	462a      	mov	r2, r5
 800a6b4:	4b05      	ldr	r3, [pc, #20]	@ (800a6cc <_svfiprintf_r+0x1f0>)
 800a6b6:	a904      	add	r1, sp, #16
 800a6b8:	4638      	mov	r0, r7
 800a6ba:	f7fd f9b3 	bl	8007a24 <_printf_i>
 800a6be:	e7ed      	b.n	800a69c <_svfiprintf_r+0x1c0>
 800a6c0:	0800c619 	.word	0x0800c619
 800a6c4:	0800c623 	.word	0x0800c623
 800a6c8:	080074f5 	.word	0x080074f5
 800a6cc:	0800a427 	.word	0x0800a427
 800a6d0:	0800c61f 	.word	0x0800c61f

0800a6d4 <__sfputc_r>:
 800a6d4:	6893      	ldr	r3, [r2, #8]
 800a6d6:	3b01      	subs	r3, #1
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	b410      	push	{r4}
 800a6dc:	6093      	str	r3, [r2, #8]
 800a6de:	da08      	bge.n	800a6f2 <__sfputc_r+0x1e>
 800a6e0:	6994      	ldr	r4, [r2, #24]
 800a6e2:	42a3      	cmp	r3, r4
 800a6e4:	db01      	blt.n	800a6ea <__sfputc_r+0x16>
 800a6e6:	290a      	cmp	r1, #10
 800a6e8:	d103      	bne.n	800a6f2 <__sfputc_r+0x1e>
 800a6ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ee:	f000 b9df 	b.w	800aab0 <__swbuf_r>
 800a6f2:	6813      	ldr	r3, [r2, #0]
 800a6f4:	1c58      	adds	r0, r3, #1
 800a6f6:	6010      	str	r0, [r2, #0]
 800a6f8:	7019      	strb	r1, [r3, #0]
 800a6fa:	4608      	mov	r0, r1
 800a6fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <__sfputs_r>:
 800a702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a704:	4606      	mov	r6, r0
 800a706:	460f      	mov	r7, r1
 800a708:	4614      	mov	r4, r2
 800a70a:	18d5      	adds	r5, r2, r3
 800a70c:	42ac      	cmp	r4, r5
 800a70e:	d101      	bne.n	800a714 <__sfputs_r+0x12>
 800a710:	2000      	movs	r0, #0
 800a712:	e007      	b.n	800a724 <__sfputs_r+0x22>
 800a714:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a718:	463a      	mov	r2, r7
 800a71a:	4630      	mov	r0, r6
 800a71c:	f7ff ffda 	bl	800a6d4 <__sfputc_r>
 800a720:	1c43      	adds	r3, r0, #1
 800a722:	d1f3      	bne.n	800a70c <__sfputs_r+0xa>
 800a724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a728 <_vfiprintf_r>:
 800a728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a72c:	460d      	mov	r5, r1
 800a72e:	b09d      	sub	sp, #116	@ 0x74
 800a730:	4614      	mov	r4, r2
 800a732:	4698      	mov	r8, r3
 800a734:	4606      	mov	r6, r0
 800a736:	b118      	cbz	r0, 800a740 <_vfiprintf_r+0x18>
 800a738:	6a03      	ldr	r3, [r0, #32]
 800a73a:	b90b      	cbnz	r3, 800a740 <_vfiprintf_r+0x18>
 800a73c:	f7fd fd32 	bl	80081a4 <__sinit>
 800a740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a742:	07d9      	lsls	r1, r3, #31
 800a744:	d405      	bmi.n	800a752 <_vfiprintf_r+0x2a>
 800a746:	89ab      	ldrh	r3, [r5, #12]
 800a748:	059a      	lsls	r2, r3, #22
 800a74a:	d402      	bmi.n	800a752 <_vfiprintf_r+0x2a>
 800a74c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a74e:	f7fd fe76 	bl	800843e <__retarget_lock_acquire_recursive>
 800a752:	89ab      	ldrh	r3, [r5, #12]
 800a754:	071b      	lsls	r3, r3, #28
 800a756:	d501      	bpl.n	800a75c <_vfiprintf_r+0x34>
 800a758:	692b      	ldr	r3, [r5, #16]
 800a75a:	b99b      	cbnz	r3, 800a784 <_vfiprintf_r+0x5c>
 800a75c:	4629      	mov	r1, r5
 800a75e:	4630      	mov	r0, r6
 800a760:	f000 f9e4 	bl	800ab2c <__swsetup_r>
 800a764:	b170      	cbz	r0, 800a784 <_vfiprintf_r+0x5c>
 800a766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a768:	07dc      	lsls	r4, r3, #31
 800a76a:	d504      	bpl.n	800a776 <_vfiprintf_r+0x4e>
 800a76c:	f04f 30ff 	mov.w	r0, #4294967295
 800a770:	b01d      	add	sp, #116	@ 0x74
 800a772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a776:	89ab      	ldrh	r3, [r5, #12]
 800a778:	0598      	lsls	r0, r3, #22
 800a77a:	d4f7      	bmi.n	800a76c <_vfiprintf_r+0x44>
 800a77c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a77e:	f7fd fe5f 	bl	8008440 <__retarget_lock_release_recursive>
 800a782:	e7f3      	b.n	800a76c <_vfiprintf_r+0x44>
 800a784:	2300      	movs	r3, #0
 800a786:	9309      	str	r3, [sp, #36]	@ 0x24
 800a788:	2320      	movs	r3, #32
 800a78a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a78e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a792:	2330      	movs	r3, #48	@ 0x30
 800a794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a944 <_vfiprintf_r+0x21c>
 800a798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a79c:	f04f 0901 	mov.w	r9, #1
 800a7a0:	4623      	mov	r3, r4
 800a7a2:	469a      	mov	sl, r3
 800a7a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7a8:	b10a      	cbz	r2, 800a7ae <_vfiprintf_r+0x86>
 800a7aa:	2a25      	cmp	r2, #37	@ 0x25
 800a7ac:	d1f9      	bne.n	800a7a2 <_vfiprintf_r+0x7a>
 800a7ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a7b2:	d00b      	beq.n	800a7cc <_vfiprintf_r+0xa4>
 800a7b4:	465b      	mov	r3, fp
 800a7b6:	4622      	mov	r2, r4
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ffa1 	bl	800a702 <__sfputs_r>
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	f000 80a7 	beq.w	800a914 <_vfiprintf_r+0x1ec>
 800a7c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7c8:	445a      	add	r2, fp
 800a7ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	f000 809f 	beq.w	800a914 <_vfiprintf_r+0x1ec>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f04f 32ff 	mov.w	r2, #4294967295
 800a7dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7e0:	f10a 0a01 	add.w	sl, sl, #1
 800a7e4:	9304      	str	r3, [sp, #16]
 800a7e6:	9307      	str	r3, [sp, #28]
 800a7e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a7ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800a7ee:	4654      	mov	r4, sl
 800a7f0:	2205      	movs	r2, #5
 800a7f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f6:	4853      	ldr	r0, [pc, #332]	@ (800a944 <_vfiprintf_r+0x21c>)
 800a7f8:	f7f5 fd0a 	bl	8000210 <memchr>
 800a7fc:	9a04      	ldr	r2, [sp, #16]
 800a7fe:	b9d8      	cbnz	r0, 800a838 <_vfiprintf_r+0x110>
 800a800:	06d1      	lsls	r1, r2, #27
 800a802:	bf44      	itt	mi
 800a804:	2320      	movmi	r3, #32
 800a806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a80a:	0713      	lsls	r3, r2, #28
 800a80c:	bf44      	itt	mi
 800a80e:	232b      	movmi	r3, #43	@ 0x2b
 800a810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a814:	f89a 3000 	ldrb.w	r3, [sl]
 800a818:	2b2a      	cmp	r3, #42	@ 0x2a
 800a81a:	d015      	beq.n	800a848 <_vfiprintf_r+0x120>
 800a81c:	9a07      	ldr	r2, [sp, #28]
 800a81e:	4654      	mov	r4, sl
 800a820:	2000      	movs	r0, #0
 800a822:	f04f 0c0a 	mov.w	ip, #10
 800a826:	4621      	mov	r1, r4
 800a828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a82c:	3b30      	subs	r3, #48	@ 0x30
 800a82e:	2b09      	cmp	r3, #9
 800a830:	d94b      	bls.n	800a8ca <_vfiprintf_r+0x1a2>
 800a832:	b1b0      	cbz	r0, 800a862 <_vfiprintf_r+0x13a>
 800a834:	9207      	str	r2, [sp, #28]
 800a836:	e014      	b.n	800a862 <_vfiprintf_r+0x13a>
 800a838:	eba0 0308 	sub.w	r3, r0, r8
 800a83c:	fa09 f303 	lsl.w	r3, r9, r3
 800a840:	4313      	orrs	r3, r2
 800a842:	9304      	str	r3, [sp, #16]
 800a844:	46a2      	mov	sl, r4
 800a846:	e7d2      	b.n	800a7ee <_vfiprintf_r+0xc6>
 800a848:	9b03      	ldr	r3, [sp, #12]
 800a84a:	1d19      	adds	r1, r3, #4
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	9103      	str	r1, [sp, #12]
 800a850:	2b00      	cmp	r3, #0
 800a852:	bfbb      	ittet	lt
 800a854:	425b      	neglt	r3, r3
 800a856:	f042 0202 	orrlt.w	r2, r2, #2
 800a85a:	9307      	strge	r3, [sp, #28]
 800a85c:	9307      	strlt	r3, [sp, #28]
 800a85e:	bfb8      	it	lt
 800a860:	9204      	strlt	r2, [sp, #16]
 800a862:	7823      	ldrb	r3, [r4, #0]
 800a864:	2b2e      	cmp	r3, #46	@ 0x2e
 800a866:	d10a      	bne.n	800a87e <_vfiprintf_r+0x156>
 800a868:	7863      	ldrb	r3, [r4, #1]
 800a86a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a86c:	d132      	bne.n	800a8d4 <_vfiprintf_r+0x1ac>
 800a86e:	9b03      	ldr	r3, [sp, #12]
 800a870:	1d1a      	adds	r2, r3, #4
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	9203      	str	r2, [sp, #12]
 800a876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a87a:	3402      	adds	r4, #2
 800a87c:	9305      	str	r3, [sp, #20]
 800a87e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a954 <_vfiprintf_r+0x22c>
 800a882:	7821      	ldrb	r1, [r4, #0]
 800a884:	2203      	movs	r2, #3
 800a886:	4650      	mov	r0, sl
 800a888:	f7f5 fcc2 	bl	8000210 <memchr>
 800a88c:	b138      	cbz	r0, 800a89e <_vfiprintf_r+0x176>
 800a88e:	9b04      	ldr	r3, [sp, #16]
 800a890:	eba0 000a 	sub.w	r0, r0, sl
 800a894:	2240      	movs	r2, #64	@ 0x40
 800a896:	4082      	lsls	r2, r0
 800a898:	4313      	orrs	r3, r2
 800a89a:	3401      	adds	r4, #1
 800a89c:	9304      	str	r3, [sp, #16]
 800a89e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a2:	4829      	ldr	r0, [pc, #164]	@ (800a948 <_vfiprintf_r+0x220>)
 800a8a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8a8:	2206      	movs	r2, #6
 800a8aa:	f7f5 fcb1 	bl	8000210 <memchr>
 800a8ae:	2800      	cmp	r0, #0
 800a8b0:	d03f      	beq.n	800a932 <_vfiprintf_r+0x20a>
 800a8b2:	4b26      	ldr	r3, [pc, #152]	@ (800a94c <_vfiprintf_r+0x224>)
 800a8b4:	bb1b      	cbnz	r3, 800a8fe <_vfiprintf_r+0x1d6>
 800a8b6:	9b03      	ldr	r3, [sp, #12]
 800a8b8:	3307      	adds	r3, #7
 800a8ba:	f023 0307 	bic.w	r3, r3, #7
 800a8be:	3308      	adds	r3, #8
 800a8c0:	9303      	str	r3, [sp, #12]
 800a8c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8c4:	443b      	add	r3, r7
 800a8c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8c8:	e76a      	b.n	800a7a0 <_vfiprintf_r+0x78>
 800a8ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8ce:	460c      	mov	r4, r1
 800a8d0:	2001      	movs	r0, #1
 800a8d2:	e7a8      	b.n	800a826 <_vfiprintf_r+0xfe>
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	3401      	adds	r4, #1
 800a8d8:	9305      	str	r3, [sp, #20]
 800a8da:	4619      	mov	r1, r3
 800a8dc:	f04f 0c0a 	mov.w	ip, #10
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8e6:	3a30      	subs	r2, #48	@ 0x30
 800a8e8:	2a09      	cmp	r2, #9
 800a8ea:	d903      	bls.n	800a8f4 <_vfiprintf_r+0x1cc>
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d0c6      	beq.n	800a87e <_vfiprintf_r+0x156>
 800a8f0:	9105      	str	r1, [sp, #20]
 800a8f2:	e7c4      	b.n	800a87e <_vfiprintf_r+0x156>
 800a8f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8f8:	4604      	mov	r4, r0
 800a8fa:	2301      	movs	r3, #1
 800a8fc:	e7f0      	b.n	800a8e0 <_vfiprintf_r+0x1b8>
 800a8fe:	ab03      	add	r3, sp, #12
 800a900:	9300      	str	r3, [sp, #0]
 800a902:	462a      	mov	r2, r5
 800a904:	4b12      	ldr	r3, [pc, #72]	@ (800a950 <_vfiprintf_r+0x228>)
 800a906:	a904      	add	r1, sp, #16
 800a908:	4630      	mov	r0, r6
 800a90a:	f7fc fdf3 	bl	80074f4 <_printf_float>
 800a90e:	4607      	mov	r7, r0
 800a910:	1c78      	adds	r0, r7, #1
 800a912:	d1d6      	bne.n	800a8c2 <_vfiprintf_r+0x19a>
 800a914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a916:	07d9      	lsls	r1, r3, #31
 800a918:	d405      	bmi.n	800a926 <_vfiprintf_r+0x1fe>
 800a91a:	89ab      	ldrh	r3, [r5, #12]
 800a91c:	059a      	lsls	r2, r3, #22
 800a91e:	d402      	bmi.n	800a926 <_vfiprintf_r+0x1fe>
 800a920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a922:	f7fd fd8d 	bl	8008440 <__retarget_lock_release_recursive>
 800a926:	89ab      	ldrh	r3, [r5, #12]
 800a928:	065b      	lsls	r3, r3, #25
 800a92a:	f53f af1f 	bmi.w	800a76c <_vfiprintf_r+0x44>
 800a92e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a930:	e71e      	b.n	800a770 <_vfiprintf_r+0x48>
 800a932:	ab03      	add	r3, sp, #12
 800a934:	9300      	str	r3, [sp, #0]
 800a936:	462a      	mov	r2, r5
 800a938:	4b05      	ldr	r3, [pc, #20]	@ (800a950 <_vfiprintf_r+0x228>)
 800a93a:	a904      	add	r1, sp, #16
 800a93c:	4630      	mov	r0, r6
 800a93e:	f7fd f871 	bl	8007a24 <_printf_i>
 800a942:	e7e4      	b.n	800a90e <_vfiprintf_r+0x1e6>
 800a944:	0800c619 	.word	0x0800c619
 800a948:	0800c623 	.word	0x0800c623
 800a94c:	080074f5 	.word	0x080074f5
 800a950:	0800a703 	.word	0x0800a703
 800a954:	0800c61f 	.word	0x0800c61f

0800a958 <__sflush_r>:
 800a958:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a960:	0716      	lsls	r6, r2, #28
 800a962:	4605      	mov	r5, r0
 800a964:	460c      	mov	r4, r1
 800a966:	d454      	bmi.n	800aa12 <__sflush_r+0xba>
 800a968:	684b      	ldr	r3, [r1, #4]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	dc02      	bgt.n	800a974 <__sflush_r+0x1c>
 800a96e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a970:	2b00      	cmp	r3, #0
 800a972:	dd48      	ble.n	800aa06 <__sflush_r+0xae>
 800a974:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a976:	2e00      	cmp	r6, #0
 800a978:	d045      	beq.n	800aa06 <__sflush_r+0xae>
 800a97a:	2300      	movs	r3, #0
 800a97c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a980:	682f      	ldr	r7, [r5, #0]
 800a982:	6a21      	ldr	r1, [r4, #32]
 800a984:	602b      	str	r3, [r5, #0]
 800a986:	d030      	beq.n	800a9ea <__sflush_r+0x92>
 800a988:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a98a:	89a3      	ldrh	r3, [r4, #12]
 800a98c:	0759      	lsls	r1, r3, #29
 800a98e:	d505      	bpl.n	800a99c <__sflush_r+0x44>
 800a990:	6863      	ldr	r3, [r4, #4]
 800a992:	1ad2      	subs	r2, r2, r3
 800a994:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a996:	b10b      	cbz	r3, 800a99c <__sflush_r+0x44>
 800a998:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a99a:	1ad2      	subs	r2, r2, r3
 800a99c:	2300      	movs	r3, #0
 800a99e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9a0:	6a21      	ldr	r1, [r4, #32]
 800a9a2:	4628      	mov	r0, r5
 800a9a4:	47b0      	blx	r6
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	89a3      	ldrh	r3, [r4, #12]
 800a9aa:	d106      	bne.n	800a9ba <__sflush_r+0x62>
 800a9ac:	6829      	ldr	r1, [r5, #0]
 800a9ae:	291d      	cmp	r1, #29
 800a9b0:	d82b      	bhi.n	800aa0a <__sflush_r+0xb2>
 800a9b2:	4a2a      	ldr	r2, [pc, #168]	@ (800aa5c <__sflush_r+0x104>)
 800a9b4:	410a      	asrs	r2, r1
 800a9b6:	07d6      	lsls	r6, r2, #31
 800a9b8:	d427      	bmi.n	800aa0a <__sflush_r+0xb2>
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	6062      	str	r2, [r4, #4]
 800a9be:	04d9      	lsls	r1, r3, #19
 800a9c0:	6922      	ldr	r2, [r4, #16]
 800a9c2:	6022      	str	r2, [r4, #0]
 800a9c4:	d504      	bpl.n	800a9d0 <__sflush_r+0x78>
 800a9c6:	1c42      	adds	r2, r0, #1
 800a9c8:	d101      	bne.n	800a9ce <__sflush_r+0x76>
 800a9ca:	682b      	ldr	r3, [r5, #0]
 800a9cc:	b903      	cbnz	r3, 800a9d0 <__sflush_r+0x78>
 800a9ce:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9d0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9d2:	602f      	str	r7, [r5, #0]
 800a9d4:	b1b9      	cbz	r1, 800aa06 <__sflush_r+0xae>
 800a9d6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9da:	4299      	cmp	r1, r3
 800a9dc:	d002      	beq.n	800a9e4 <__sflush_r+0x8c>
 800a9de:	4628      	mov	r0, r5
 800a9e0:	f7fe fb9a 	bl	8009118 <_free_r>
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9e8:	e00d      	b.n	800aa06 <__sflush_r+0xae>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	4628      	mov	r0, r5
 800a9ee:	47b0      	blx	r6
 800a9f0:	4602      	mov	r2, r0
 800a9f2:	1c50      	adds	r0, r2, #1
 800a9f4:	d1c9      	bne.n	800a98a <__sflush_r+0x32>
 800a9f6:	682b      	ldr	r3, [r5, #0]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d0c6      	beq.n	800a98a <__sflush_r+0x32>
 800a9fc:	2b1d      	cmp	r3, #29
 800a9fe:	d001      	beq.n	800aa04 <__sflush_r+0xac>
 800aa00:	2b16      	cmp	r3, #22
 800aa02:	d11e      	bne.n	800aa42 <__sflush_r+0xea>
 800aa04:	602f      	str	r7, [r5, #0]
 800aa06:	2000      	movs	r0, #0
 800aa08:	e022      	b.n	800aa50 <__sflush_r+0xf8>
 800aa0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa0e:	b21b      	sxth	r3, r3
 800aa10:	e01b      	b.n	800aa4a <__sflush_r+0xf2>
 800aa12:	690f      	ldr	r7, [r1, #16]
 800aa14:	2f00      	cmp	r7, #0
 800aa16:	d0f6      	beq.n	800aa06 <__sflush_r+0xae>
 800aa18:	0793      	lsls	r3, r2, #30
 800aa1a:	680e      	ldr	r6, [r1, #0]
 800aa1c:	bf08      	it	eq
 800aa1e:	694b      	ldreq	r3, [r1, #20]
 800aa20:	600f      	str	r7, [r1, #0]
 800aa22:	bf18      	it	ne
 800aa24:	2300      	movne	r3, #0
 800aa26:	eba6 0807 	sub.w	r8, r6, r7
 800aa2a:	608b      	str	r3, [r1, #8]
 800aa2c:	f1b8 0f00 	cmp.w	r8, #0
 800aa30:	dde9      	ble.n	800aa06 <__sflush_r+0xae>
 800aa32:	6a21      	ldr	r1, [r4, #32]
 800aa34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa36:	4643      	mov	r3, r8
 800aa38:	463a      	mov	r2, r7
 800aa3a:	4628      	mov	r0, r5
 800aa3c:	47b0      	blx	r6
 800aa3e:	2800      	cmp	r0, #0
 800aa40:	dc08      	bgt.n	800aa54 <__sflush_r+0xfc>
 800aa42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa4a:	81a3      	strh	r3, [r4, #12]
 800aa4c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa54:	4407      	add	r7, r0
 800aa56:	eba8 0800 	sub.w	r8, r8, r0
 800aa5a:	e7e7      	b.n	800aa2c <__sflush_r+0xd4>
 800aa5c:	dfbffffe 	.word	0xdfbffffe

0800aa60 <_fflush_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	690b      	ldr	r3, [r1, #16]
 800aa64:	4605      	mov	r5, r0
 800aa66:	460c      	mov	r4, r1
 800aa68:	b913      	cbnz	r3, 800aa70 <_fflush_r+0x10>
 800aa6a:	2500      	movs	r5, #0
 800aa6c:	4628      	mov	r0, r5
 800aa6e:	bd38      	pop	{r3, r4, r5, pc}
 800aa70:	b118      	cbz	r0, 800aa7a <_fflush_r+0x1a>
 800aa72:	6a03      	ldr	r3, [r0, #32]
 800aa74:	b90b      	cbnz	r3, 800aa7a <_fflush_r+0x1a>
 800aa76:	f7fd fb95 	bl	80081a4 <__sinit>
 800aa7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d0f3      	beq.n	800aa6a <_fflush_r+0xa>
 800aa82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa84:	07d0      	lsls	r0, r2, #31
 800aa86:	d404      	bmi.n	800aa92 <_fflush_r+0x32>
 800aa88:	0599      	lsls	r1, r3, #22
 800aa8a:	d402      	bmi.n	800aa92 <_fflush_r+0x32>
 800aa8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa8e:	f7fd fcd6 	bl	800843e <__retarget_lock_acquire_recursive>
 800aa92:	4628      	mov	r0, r5
 800aa94:	4621      	mov	r1, r4
 800aa96:	f7ff ff5f 	bl	800a958 <__sflush_r>
 800aa9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aa9c:	07da      	lsls	r2, r3, #31
 800aa9e:	4605      	mov	r5, r0
 800aaa0:	d4e4      	bmi.n	800aa6c <_fflush_r+0xc>
 800aaa2:	89a3      	ldrh	r3, [r4, #12]
 800aaa4:	059b      	lsls	r3, r3, #22
 800aaa6:	d4e1      	bmi.n	800aa6c <_fflush_r+0xc>
 800aaa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aaaa:	f7fd fcc9 	bl	8008440 <__retarget_lock_release_recursive>
 800aaae:	e7dd      	b.n	800aa6c <_fflush_r+0xc>

0800aab0 <__swbuf_r>:
 800aab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aab2:	460e      	mov	r6, r1
 800aab4:	4614      	mov	r4, r2
 800aab6:	4605      	mov	r5, r0
 800aab8:	b118      	cbz	r0, 800aac2 <__swbuf_r+0x12>
 800aaba:	6a03      	ldr	r3, [r0, #32]
 800aabc:	b90b      	cbnz	r3, 800aac2 <__swbuf_r+0x12>
 800aabe:	f7fd fb71 	bl	80081a4 <__sinit>
 800aac2:	69a3      	ldr	r3, [r4, #24]
 800aac4:	60a3      	str	r3, [r4, #8]
 800aac6:	89a3      	ldrh	r3, [r4, #12]
 800aac8:	071a      	lsls	r2, r3, #28
 800aaca:	d501      	bpl.n	800aad0 <__swbuf_r+0x20>
 800aacc:	6923      	ldr	r3, [r4, #16]
 800aace:	b943      	cbnz	r3, 800aae2 <__swbuf_r+0x32>
 800aad0:	4621      	mov	r1, r4
 800aad2:	4628      	mov	r0, r5
 800aad4:	f000 f82a 	bl	800ab2c <__swsetup_r>
 800aad8:	b118      	cbz	r0, 800aae2 <__swbuf_r+0x32>
 800aada:	f04f 37ff 	mov.w	r7, #4294967295
 800aade:	4638      	mov	r0, r7
 800aae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aae2:	6823      	ldr	r3, [r4, #0]
 800aae4:	6922      	ldr	r2, [r4, #16]
 800aae6:	1a98      	subs	r0, r3, r2
 800aae8:	6963      	ldr	r3, [r4, #20]
 800aaea:	b2f6      	uxtb	r6, r6
 800aaec:	4283      	cmp	r3, r0
 800aaee:	4637      	mov	r7, r6
 800aaf0:	dc05      	bgt.n	800aafe <__swbuf_r+0x4e>
 800aaf2:	4621      	mov	r1, r4
 800aaf4:	4628      	mov	r0, r5
 800aaf6:	f7ff ffb3 	bl	800aa60 <_fflush_r>
 800aafa:	2800      	cmp	r0, #0
 800aafc:	d1ed      	bne.n	800aada <__swbuf_r+0x2a>
 800aafe:	68a3      	ldr	r3, [r4, #8]
 800ab00:	3b01      	subs	r3, #1
 800ab02:	60a3      	str	r3, [r4, #8]
 800ab04:	6823      	ldr	r3, [r4, #0]
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	6022      	str	r2, [r4, #0]
 800ab0a:	701e      	strb	r6, [r3, #0]
 800ab0c:	6962      	ldr	r2, [r4, #20]
 800ab0e:	1c43      	adds	r3, r0, #1
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d004      	beq.n	800ab1e <__swbuf_r+0x6e>
 800ab14:	89a3      	ldrh	r3, [r4, #12]
 800ab16:	07db      	lsls	r3, r3, #31
 800ab18:	d5e1      	bpl.n	800aade <__swbuf_r+0x2e>
 800ab1a:	2e0a      	cmp	r6, #10
 800ab1c:	d1df      	bne.n	800aade <__swbuf_r+0x2e>
 800ab1e:	4621      	mov	r1, r4
 800ab20:	4628      	mov	r0, r5
 800ab22:	f7ff ff9d 	bl	800aa60 <_fflush_r>
 800ab26:	2800      	cmp	r0, #0
 800ab28:	d0d9      	beq.n	800aade <__swbuf_r+0x2e>
 800ab2a:	e7d6      	b.n	800aada <__swbuf_r+0x2a>

0800ab2c <__swsetup_r>:
 800ab2c:	b538      	push	{r3, r4, r5, lr}
 800ab2e:	4b29      	ldr	r3, [pc, #164]	@ (800abd4 <__swsetup_r+0xa8>)
 800ab30:	4605      	mov	r5, r0
 800ab32:	6818      	ldr	r0, [r3, #0]
 800ab34:	460c      	mov	r4, r1
 800ab36:	b118      	cbz	r0, 800ab40 <__swsetup_r+0x14>
 800ab38:	6a03      	ldr	r3, [r0, #32]
 800ab3a:	b90b      	cbnz	r3, 800ab40 <__swsetup_r+0x14>
 800ab3c:	f7fd fb32 	bl	80081a4 <__sinit>
 800ab40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab44:	0719      	lsls	r1, r3, #28
 800ab46:	d422      	bmi.n	800ab8e <__swsetup_r+0x62>
 800ab48:	06da      	lsls	r2, r3, #27
 800ab4a:	d407      	bmi.n	800ab5c <__swsetup_r+0x30>
 800ab4c:	2209      	movs	r2, #9
 800ab4e:	602a      	str	r2, [r5, #0]
 800ab50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab54:	81a3      	strh	r3, [r4, #12]
 800ab56:	f04f 30ff 	mov.w	r0, #4294967295
 800ab5a:	e033      	b.n	800abc4 <__swsetup_r+0x98>
 800ab5c:	0758      	lsls	r0, r3, #29
 800ab5e:	d512      	bpl.n	800ab86 <__swsetup_r+0x5a>
 800ab60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab62:	b141      	cbz	r1, 800ab76 <__swsetup_r+0x4a>
 800ab64:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab68:	4299      	cmp	r1, r3
 800ab6a:	d002      	beq.n	800ab72 <__swsetup_r+0x46>
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	f7fe fad3 	bl	8009118 <_free_r>
 800ab72:	2300      	movs	r3, #0
 800ab74:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab7c:	81a3      	strh	r3, [r4, #12]
 800ab7e:	2300      	movs	r3, #0
 800ab80:	6063      	str	r3, [r4, #4]
 800ab82:	6923      	ldr	r3, [r4, #16]
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	89a3      	ldrh	r3, [r4, #12]
 800ab88:	f043 0308 	orr.w	r3, r3, #8
 800ab8c:	81a3      	strh	r3, [r4, #12]
 800ab8e:	6923      	ldr	r3, [r4, #16]
 800ab90:	b94b      	cbnz	r3, 800aba6 <__swsetup_r+0x7a>
 800ab92:	89a3      	ldrh	r3, [r4, #12]
 800ab94:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab98:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab9c:	d003      	beq.n	800aba6 <__swsetup_r+0x7a>
 800ab9e:	4621      	mov	r1, r4
 800aba0:	4628      	mov	r0, r5
 800aba2:	f000 f8db 	bl	800ad5c <__smakebuf_r>
 800aba6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abaa:	f013 0201 	ands.w	r2, r3, #1
 800abae:	d00a      	beq.n	800abc6 <__swsetup_r+0x9a>
 800abb0:	2200      	movs	r2, #0
 800abb2:	60a2      	str	r2, [r4, #8]
 800abb4:	6962      	ldr	r2, [r4, #20]
 800abb6:	4252      	negs	r2, r2
 800abb8:	61a2      	str	r2, [r4, #24]
 800abba:	6922      	ldr	r2, [r4, #16]
 800abbc:	b942      	cbnz	r2, 800abd0 <__swsetup_r+0xa4>
 800abbe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800abc2:	d1c5      	bne.n	800ab50 <__swsetup_r+0x24>
 800abc4:	bd38      	pop	{r3, r4, r5, pc}
 800abc6:	0799      	lsls	r1, r3, #30
 800abc8:	bf58      	it	pl
 800abca:	6962      	ldrpl	r2, [r4, #20]
 800abcc:	60a2      	str	r2, [r4, #8]
 800abce:	e7f4      	b.n	800abba <__swsetup_r+0x8e>
 800abd0:	2000      	movs	r0, #0
 800abd2:	e7f7      	b.n	800abc4 <__swsetup_r+0x98>
 800abd4:	200001bc 	.word	0x200001bc

0800abd8 <memmove>:
 800abd8:	4288      	cmp	r0, r1
 800abda:	b510      	push	{r4, lr}
 800abdc:	eb01 0402 	add.w	r4, r1, r2
 800abe0:	d902      	bls.n	800abe8 <memmove+0x10>
 800abe2:	4284      	cmp	r4, r0
 800abe4:	4623      	mov	r3, r4
 800abe6:	d807      	bhi.n	800abf8 <memmove+0x20>
 800abe8:	1e43      	subs	r3, r0, #1
 800abea:	42a1      	cmp	r1, r4
 800abec:	d008      	beq.n	800ac00 <memmove+0x28>
 800abee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abf2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800abf6:	e7f8      	b.n	800abea <memmove+0x12>
 800abf8:	4402      	add	r2, r0
 800abfa:	4601      	mov	r1, r0
 800abfc:	428a      	cmp	r2, r1
 800abfe:	d100      	bne.n	800ac02 <memmove+0x2a>
 800ac00:	bd10      	pop	{r4, pc}
 800ac02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac0a:	e7f7      	b.n	800abfc <memmove+0x24>

0800ac0c <_sbrk_r>:
 800ac0c:	b538      	push	{r3, r4, r5, lr}
 800ac0e:	4d06      	ldr	r5, [pc, #24]	@ (800ac28 <_sbrk_r+0x1c>)
 800ac10:	2300      	movs	r3, #0
 800ac12:	4604      	mov	r4, r0
 800ac14:	4608      	mov	r0, r1
 800ac16:	602b      	str	r3, [r5, #0]
 800ac18:	f7f8 fa6a 	bl	80030f0 <_sbrk>
 800ac1c:	1c43      	adds	r3, r0, #1
 800ac1e:	d102      	bne.n	800ac26 <_sbrk_r+0x1a>
 800ac20:	682b      	ldr	r3, [r5, #0]
 800ac22:	b103      	cbz	r3, 800ac26 <_sbrk_r+0x1a>
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	bd38      	pop	{r3, r4, r5, pc}
 800ac28:	200007dc 	.word	0x200007dc

0800ac2c <__assert_func>:
 800ac2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac2e:	4614      	mov	r4, r2
 800ac30:	461a      	mov	r2, r3
 800ac32:	4b09      	ldr	r3, [pc, #36]	@ (800ac58 <__assert_func+0x2c>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	4605      	mov	r5, r0
 800ac38:	68d8      	ldr	r0, [r3, #12]
 800ac3a:	b954      	cbnz	r4, 800ac52 <__assert_func+0x26>
 800ac3c:	4b07      	ldr	r3, [pc, #28]	@ (800ac5c <__assert_func+0x30>)
 800ac3e:	461c      	mov	r4, r3
 800ac40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac44:	9100      	str	r1, [sp, #0]
 800ac46:	462b      	mov	r3, r5
 800ac48:	4905      	ldr	r1, [pc, #20]	@ (800ac60 <__assert_func+0x34>)
 800ac4a:	f000 f84f 	bl	800acec <fiprintf>
 800ac4e:	f000 f8e3 	bl	800ae18 <abort>
 800ac52:	4b04      	ldr	r3, [pc, #16]	@ (800ac64 <__assert_func+0x38>)
 800ac54:	e7f4      	b.n	800ac40 <__assert_func+0x14>
 800ac56:	bf00      	nop
 800ac58:	200001bc 	.word	0x200001bc
 800ac5c:	0800c665 	.word	0x0800c665
 800ac60:	0800c637 	.word	0x0800c637
 800ac64:	0800c62a 	.word	0x0800c62a

0800ac68 <_calloc_r>:
 800ac68:	b570      	push	{r4, r5, r6, lr}
 800ac6a:	fba1 5402 	umull	r5, r4, r1, r2
 800ac6e:	b93c      	cbnz	r4, 800ac80 <_calloc_r+0x18>
 800ac70:	4629      	mov	r1, r5
 800ac72:	f7fe fdff 	bl	8009874 <_malloc_r>
 800ac76:	4606      	mov	r6, r0
 800ac78:	b928      	cbnz	r0, 800ac86 <_calloc_r+0x1e>
 800ac7a:	2600      	movs	r6, #0
 800ac7c:	4630      	mov	r0, r6
 800ac7e:	bd70      	pop	{r4, r5, r6, pc}
 800ac80:	220c      	movs	r2, #12
 800ac82:	6002      	str	r2, [r0, #0]
 800ac84:	e7f9      	b.n	800ac7a <_calloc_r+0x12>
 800ac86:	462a      	mov	r2, r5
 800ac88:	4621      	mov	r1, r4
 800ac8a:	f7fd fb36 	bl	80082fa <memset>
 800ac8e:	e7f5      	b.n	800ac7c <_calloc_r+0x14>

0800ac90 <_realloc_r>:
 800ac90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ac94:	4680      	mov	r8, r0
 800ac96:	4615      	mov	r5, r2
 800ac98:	460c      	mov	r4, r1
 800ac9a:	b921      	cbnz	r1, 800aca6 <_realloc_r+0x16>
 800ac9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aca0:	4611      	mov	r1, r2
 800aca2:	f7fe bde7 	b.w	8009874 <_malloc_r>
 800aca6:	b92a      	cbnz	r2, 800acb4 <_realloc_r+0x24>
 800aca8:	f7fe fa36 	bl	8009118 <_free_r>
 800acac:	2400      	movs	r4, #0
 800acae:	4620      	mov	r0, r4
 800acb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800acb4:	f000 f8b7 	bl	800ae26 <_malloc_usable_size_r>
 800acb8:	4285      	cmp	r5, r0
 800acba:	4606      	mov	r6, r0
 800acbc:	d802      	bhi.n	800acc4 <_realloc_r+0x34>
 800acbe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800acc2:	d8f4      	bhi.n	800acae <_realloc_r+0x1e>
 800acc4:	4629      	mov	r1, r5
 800acc6:	4640      	mov	r0, r8
 800acc8:	f7fe fdd4 	bl	8009874 <_malloc_r>
 800accc:	4607      	mov	r7, r0
 800acce:	2800      	cmp	r0, #0
 800acd0:	d0ec      	beq.n	800acac <_realloc_r+0x1c>
 800acd2:	42b5      	cmp	r5, r6
 800acd4:	462a      	mov	r2, r5
 800acd6:	4621      	mov	r1, r4
 800acd8:	bf28      	it	cs
 800acda:	4632      	movcs	r2, r6
 800acdc:	f7fd fbb1 	bl	8008442 <memcpy>
 800ace0:	4621      	mov	r1, r4
 800ace2:	4640      	mov	r0, r8
 800ace4:	f7fe fa18 	bl	8009118 <_free_r>
 800ace8:	463c      	mov	r4, r7
 800acea:	e7e0      	b.n	800acae <_realloc_r+0x1e>

0800acec <fiprintf>:
 800acec:	b40e      	push	{r1, r2, r3}
 800acee:	b503      	push	{r0, r1, lr}
 800acf0:	4601      	mov	r1, r0
 800acf2:	ab03      	add	r3, sp, #12
 800acf4:	4805      	ldr	r0, [pc, #20]	@ (800ad0c <fiprintf+0x20>)
 800acf6:	f853 2b04 	ldr.w	r2, [r3], #4
 800acfa:	6800      	ldr	r0, [r0, #0]
 800acfc:	9301      	str	r3, [sp, #4]
 800acfe:	f7ff fd13 	bl	800a728 <_vfiprintf_r>
 800ad02:	b002      	add	sp, #8
 800ad04:	f85d eb04 	ldr.w	lr, [sp], #4
 800ad08:	b003      	add	sp, #12
 800ad0a:	4770      	bx	lr
 800ad0c:	200001bc 	.word	0x200001bc

0800ad10 <__swhatbuf_r>:
 800ad10:	b570      	push	{r4, r5, r6, lr}
 800ad12:	460c      	mov	r4, r1
 800ad14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad18:	2900      	cmp	r1, #0
 800ad1a:	b096      	sub	sp, #88	@ 0x58
 800ad1c:	4615      	mov	r5, r2
 800ad1e:	461e      	mov	r6, r3
 800ad20:	da0d      	bge.n	800ad3e <__swhatbuf_r+0x2e>
 800ad22:	89a3      	ldrh	r3, [r4, #12]
 800ad24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ad28:	f04f 0100 	mov.w	r1, #0
 800ad2c:	bf14      	ite	ne
 800ad2e:	2340      	movne	r3, #64	@ 0x40
 800ad30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ad34:	2000      	movs	r0, #0
 800ad36:	6031      	str	r1, [r6, #0]
 800ad38:	602b      	str	r3, [r5, #0]
 800ad3a:	b016      	add	sp, #88	@ 0x58
 800ad3c:	bd70      	pop	{r4, r5, r6, pc}
 800ad3e:	466a      	mov	r2, sp
 800ad40:	f000 f848 	bl	800add4 <_fstat_r>
 800ad44:	2800      	cmp	r0, #0
 800ad46:	dbec      	blt.n	800ad22 <__swhatbuf_r+0x12>
 800ad48:	9901      	ldr	r1, [sp, #4]
 800ad4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ad4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ad52:	4259      	negs	r1, r3
 800ad54:	4159      	adcs	r1, r3
 800ad56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ad5a:	e7eb      	b.n	800ad34 <__swhatbuf_r+0x24>

0800ad5c <__smakebuf_r>:
 800ad5c:	898b      	ldrh	r3, [r1, #12]
 800ad5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad60:	079d      	lsls	r5, r3, #30
 800ad62:	4606      	mov	r6, r0
 800ad64:	460c      	mov	r4, r1
 800ad66:	d507      	bpl.n	800ad78 <__smakebuf_r+0x1c>
 800ad68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ad6c:	6023      	str	r3, [r4, #0]
 800ad6e:	6123      	str	r3, [r4, #16]
 800ad70:	2301      	movs	r3, #1
 800ad72:	6163      	str	r3, [r4, #20]
 800ad74:	b003      	add	sp, #12
 800ad76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad78:	ab01      	add	r3, sp, #4
 800ad7a:	466a      	mov	r2, sp
 800ad7c:	f7ff ffc8 	bl	800ad10 <__swhatbuf_r>
 800ad80:	9f00      	ldr	r7, [sp, #0]
 800ad82:	4605      	mov	r5, r0
 800ad84:	4639      	mov	r1, r7
 800ad86:	4630      	mov	r0, r6
 800ad88:	f7fe fd74 	bl	8009874 <_malloc_r>
 800ad8c:	b948      	cbnz	r0, 800ada2 <__smakebuf_r+0x46>
 800ad8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad92:	059a      	lsls	r2, r3, #22
 800ad94:	d4ee      	bmi.n	800ad74 <__smakebuf_r+0x18>
 800ad96:	f023 0303 	bic.w	r3, r3, #3
 800ad9a:	f043 0302 	orr.w	r3, r3, #2
 800ad9e:	81a3      	strh	r3, [r4, #12]
 800ada0:	e7e2      	b.n	800ad68 <__smakebuf_r+0xc>
 800ada2:	89a3      	ldrh	r3, [r4, #12]
 800ada4:	6020      	str	r0, [r4, #0]
 800ada6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800adaa:	81a3      	strh	r3, [r4, #12]
 800adac:	9b01      	ldr	r3, [sp, #4]
 800adae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800adb2:	b15b      	cbz	r3, 800adcc <__smakebuf_r+0x70>
 800adb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800adb8:	4630      	mov	r0, r6
 800adba:	f000 f81d 	bl	800adf8 <_isatty_r>
 800adbe:	b128      	cbz	r0, 800adcc <__smakebuf_r+0x70>
 800adc0:	89a3      	ldrh	r3, [r4, #12]
 800adc2:	f023 0303 	bic.w	r3, r3, #3
 800adc6:	f043 0301 	orr.w	r3, r3, #1
 800adca:	81a3      	strh	r3, [r4, #12]
 800adcc:	89a3      	ldrh	r3, [r4, #12]
 800adce:	431d      	orrs	r5, r3
 800add0:	81a5      	strh	r5, [r4, #12]
 800add2:	e7cf      	b.n	800ad74 <__smakebuf_r+0x18>

0800add4 <_fstat_r>:
 800add4:	b538      	push	{r3, r4, r5, lr}
 800add6:	4d07      	ldr	r5, [pc, #28]	@ (800adf4 <_fstat_r+0x20>)
 800add8:	2300      	movs	r3, #0
 800adda:	4604      	mov	r4, r0
 800addc:	4608      	mov	r0, r1
 800adde:	4611      	mov	r1, r2
 800ade0:	602b      	str	r3, [r5, #0]
 800ade2:	f7f8 f95d 	bl	80030a0 <_fstat>
 800ade6:	1c43      	adds	r3, r0, #1
 800ade8:	d102      	bne.n	800adf0 <_fstat_r+0x1c>
 800adea:	682b      	ldr	r3, [r5, #0]
 800adec:	b103      	cbz	r3, 800adf0 <_fstat_r+0x1c>
 800adee:	6023      	str	r3, [r4, #0]
 800adf0:	bd38      	pop	{r3, r4, r5, pc}
 800adf2:	bf00      	nop
 800adf4:	200007dc 	.word	0x200007dc

0800adf8 <_isatty_r>:
 800adf8:	b538      	push	{r3, r4, r5, lr}
 800adfa:	4d06      	ldr	r5, [pc, #24]	@ (800ae14 <_isatty_r+0x1c>)
 800adfc:	2300      	movs	r3, #0
 800adfe:	4604      	mov	r4, r0
 800ae00:	4608      	mov	r0, r1
 800ae02:	602b      	str	r3, [r5, #0]
 800ae04:	f7f8 f95c 	bl	80030c0 <_isatty>
 800ae08:	1c43      	adds	r3, r0, #1
 800ae0a:	d102      	bne.n	800ae12 <_isatty_r+0x1a>
 800ae0c:	682b      	ldr	r3, [r5, #0]
 800ae0e:	b103      	cbz	r3, 800ae12 <_isatty_r+0x1a>
 800ae10:	6023      	str	r3, [r4, #0]
 800ae12:	bd38      	pop	{r3, r4, r5, pc}
 800ae14:	200007dc 	.word	0x200007dc

0800ae18 <abort>:
 800ae18:	b508      	push	{r3, lr}
 800ae1a:	2006      	movs	r0, #6
 800ae1c:	f000 f834 	bl	800ae88 <raise>
 800ae20:	2001      	movs	r0, #1
 800ae22:	f7f8 f8ed 	bl	8003000 <_exit>

0800ae26 <_malloc_usable_size_r>:
 800ae26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae2a:	1f18      	subs	r0, r3, #4
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	bfbc      	itt	lt
 800ae30:	580b      	ldrlt	r3, [r1, r0]
 800ae32:	18c0      	addlt	r0, r0, r3
 800ae34:	4770      	bx	lr

0800ae36 <_raise_r>:
 800ae36:	291f      	cmp	r1, #31
 800ae38:	b538      	push	{r3, r4, r5, lr}
 800ae3a:	4605      	mov	r5, r0
 800ae3c:	460c      	mov	r4, r1
 800ae3e:	d904      	bls.n	800ae4a <_raise_r+0x14>
 800ae40:	2316      	movs	r3, #22
 800ae42:	6003      	str	r3, [r0, #0]
 800ae44:	f04f 30ff 	mov.w	r0, #4294967295
 800ae48:	bd38      	pop	{r3, r4, r5, pc}
 800ae4a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae4c:	b112      	cbz	r2, 800ae54 <_raise_r+0x1e>
 800ae4e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae52:	b94b      	cbnz	r3, 800ae68 <_raise_r+0x32>
 800ae54:	4628      	mov	r0, r5
 800ae56:	f000 f831 	bl	800aebc <_getpid_r>
 800ae5a:	4622      	mov	r2, r4
 800ae5c:	4601      	mov	r1, r0
 800ae5e:	4628      	mov	r0, r5
 800ae60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae64:	f000 b818 	b.w	800ae98 <_kill_r>
 800ae68:	2b01      	cmp	r3, #1
 800ae6a:	d00a      	beq.n	800ae82 <_raise_r+0x4c>
 800ae6c:	1c59      	adds	r1, r3, #1
 800ae6e:	d103      	bne.n	800ae78 <_raise_r+0x42>
 800ae70:	2316      	movs	r3, #22
 800ae72:	6003      	str	r3, [r0, #0]
 800ae74:	2001      	movs	r0, #1
 800ae76:	e7e7      	b.n	800ae48 <_raise_r+0x12>
 800ae78:	2100      	movs	r1, #0
 800ae7a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae7e:	4620      	mov	r0, r4
 800ae80:	4798      	blx	r3
 800ae82:	2000      	movs	r0, #0
 800ae84:	e7e0      	b.n	800ae48 <_raise_r+0x12>
	...

0800ae88 <raise>:
 800ae88:	4b02      	ldr	r3, [pc, #8]	@ (800ae94 <raise+0xc>)
 800ae8a:	4601      	mov	r1, r0
 800ae8c:	6818      	ldr	r0, [r3, #0]
 800ae8e:	f7ff bfd2 	b.w	800ae36 <_raise_r>
 800ae92:	bf00      	nop
 800ae94:	200001bc 	.word	0x200001bc

0800ae98 <_kill_r>:
 800ae98:	b538      	push	{r3, r4, r5, lr}
 800ae9a:	4d07      	ldr	r5, [pc, #28]	@ (800aeb8 <_kill_r+0x20>)
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	4604      	mov	r4, r0
 800aea0:	4608      	mov	r0, r1
 800aea2:	4611      	mov	r1, r2
 800aea4:	602b      	str	r3, [r5, #0]
 800aea6:	f7f8 f89b 	bl	8002fe0 <_kill>
 800aeaa:	1c43      	adds	r3, r0, #1
 800aeac:	d102      	bne.n	800aeb4 <_kill_r+0x1c>
 800aeae:	682b      	ldr	r3, [r5, #0]
 800aeb0:	b103      	cbz	r3, 800aeb4 <_kill_r+0x1c>
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	bd38      	pop	{r3, r4, r5, pc}
 800aeb6:	bf00      	nop
 800aeb8:	200007dc 	.word	0x200007dc

0800aebc <_getpid_r>:
 800aebc:	f7f8 b888 	b.w	8002fd0 <_getpid>

0800aec0 <sqrt>:
 800aec0:	b538      	push	{r3, r4, r5, lr}
 800aec2:	ed2d 8b02 	vpush	{d8}
 800aec6:	ec55 4b10 	vmov	r4, r5, d0
 800aeca:	f000 f8cd 	bl	800b068 <__ieee754_sqrt>
 800aece:	4622      	mov	r2, r4
 800aed0:	462b      	mov	r3, r5
 800aed2:	4620      	mov	r0, r4
 800aed4:	4629      	mov	r1, r5
 800aed6:	eeb0 8a40 	vmov.f32	s16, s0
 800aeda:	eef0 8a60 	vmov.f32	s17, s1
 800aede:	f7f5 fe45 	bl	8000b6c <__aeabi_dcmpun>
 800aee2:	b990      	cbnz	r0, 800af0a <sqrt+0x4a>
 800aee4:	2200      	movs	r2, #0
 800aee6:	2300      	movs	r3, #0
 800aee8:	4620      	mov	r0, r4
 800aeea:	4629      	mov	r1, r5
 800aeec:	f7f5 fe16 	bl	8000b1c <__aeabi_dcmplt>
 800aef0:	b158      	cbz	r0, 800af0a <sqrt+0x4a>
 800aef2:	f7fd fa79 	bl	80083e8 <__errno>
 800aef6:	2321      	movs	r3, #33	@ 0x21
 800aef8:	6003      	str	r3, [r0, #0]
 800aefa:	2200      	movs	r2, #0
 800aefc:	2300      	movs	r3, #0
 800aefe:	4610      	mov	r0, r2
 800af00:	4619      	mov	r1, r3
 800af02:	f7f5 fcc3 	bl	800088c <__aeabi_ddiv>
 800af06:	ec41 0b18 	vmov	d8, r0, r1
 800af0a:	eeb0 0a48 	vmov.f32	s0, s16
 800af0e:	eef0 0a68 	vmov.f32	s1, s17
 800af12:	ecbd 8b02 	vpop	{d8}
 800af16:	bd38      	pop	{r3, r4, r5, pc}

0800af18 <cos>:
 800af18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800af1a:	ec53 2b10 	vmov	r2, r3, d0
 800af1e:	4826      	ldr	r0, [pc, #152]	@ (800afb8 <cos+0xa0>)
 800af20:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800af24:	4281      	cmp	r1, r0
 800af26:	d806      	bhi.n	800af36 <cos+0x1e>
 800af28:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800afb0 <cos+0x98>
 800af2c:	b005      	add	sp, #20
 800af2e:	f85d eb04 	ldr.w	lr, [sp], #4
 800af32:	f000 b975 	b.w	800b220 <__kernel_cos>
 800af36:	4821      	ldr	r0, [pc, #132]	@ (800afbc <cos+0xa4>)
 800af38:	4281      	cmp	r1, r0
 800af3a:	d908      	bls.n	800af4e <cos+0x36>
 800af3c:	4610      	mov	r0, r2
 800af3e:	4619      	mov	r1, r3
 800af40:	f7f5 f9c2 	bl	80002c8 <__aeabi_dsub>
 800af44:	ec41 0b10 	vmov	d0, r0, r1
 800af48:	b005      	add	sp, #20
 800af4a:	f85d fb04 	ldr.w	pc, [sp], #4
 800af4e:	4668      	mov	r0, sp
 800af50:	f000 faea 	bl	800b528 <__ieee754_rem_pio2>
 800af54:	f000 0003 	and.w	r0, r0, #3
 800af58:	2801      	cmp	r0, #1
 800af5a:	d00b      	beq.n	800af74 <cos+0x5c>
 800af5c:	2802      	cmp	r0, #2
 800af5e:	d015      	beq.n	800af8c <cos+0x74>
 800af60:	b9d8      	cbnz	r0, 800af9a <cos+0x82>
 800af62:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af66:	ed9d 0b00 	vldr	d0, [sp]
 800af6a:	f000 f959 	bl	800b220 <__kernel_cos>
 800af6e:	ec51 0b10 	vmov	r0, r1, d0
 800af72:	e7e7      	b.n	800af44 <cos+0x2c>
 800af74:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af78:	ed9d 0b00 	vldr	d0, [sp]
 800af7c:	f000 fa18 	bl	800b3b0 <__kernel_sin>
 800af80:	ec53 2b10 	vmov	r2, r3, d0
 800af84:	4610      	mov	r0, r2
 800af86:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800af8a:	e7db      	b.n	800af44 <cos+0x2c>
 800af8c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af90:	ed9d 0b00 	vldr	d0, [sp]
 800af94:	f000 f944 	bl	800b220 <__kernel_cos>
 800af98:	e7f2      	b.n	800af80 <cos+0x68>
 800af9a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800af9e:	ed9d 0b00 	vldr	d0, [sp]
 800afa2:	2001      	movs	r0, #1
 800afa4:	f000 fa04 	bl	800b3b0 <__kernel_sin>
 800afa8:	e7e1      	b.n	800af6e <cos+0x56>
 800afaa:	bf00      	nop
 800afac:	f3af 8000 	nop.w
	...
 800afb8:	3fe921fb 	.word	0x3fe921fb
 800afbc:	7fefffff 	.word	0x7fefffff

0800afc0 <sin>:
 800afc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afc2:	ec53 2b10 	vmov	r2, r3, d0
 800afc6:	4826      	ldr	r0, [pc, #152]	@ (800b060 <sin+0xa0>)
 800afc8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800afcc:	4281      	cmp	r1, r0
 800afce:	d807      	bhi.n	800afe0 <sin+0x20>
 800afd0:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 800b058 <sin+0x98>
 800afd4:	2000      	movs	r0, #0
 800afd6:	b005      	add	sp, #20
 800afd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800afdc:	f000 b9e8 	b.w	800b3b0 <__kernel_sin>
 800afe0:	4820      	ldr	r0, [pc, #128]	@ (800b064 <sin+0xa4>)
 800afe2:	4281      	cmp	r1, r0
 800afe4:	d908      	bls.n	800aff8 <sin+0x38>
 800afe6:	4610      	mov	r0, r2
 800afe8:	4619      	mov	r1, r3
 800afea:	f7f5 f96d 	bl	80002c8 <__aeabi_dsub>
 800afee:	ec41 0b10 	vmov	d0, r0, r1
 800aff2:	b005      	add	sp, #20
 800aff4:	f85d fb04 	ldr.w	pc, [sp], #4
 800aff8:	4668      	mov	r0, sp
 800affa:	f000 fa95 	bl	800b528 <__ieee754_rem_pio2>
 800affe:	f000 0003 	and.w	r0, r0, #3
 800b002:	2801      	cmp	r0, #1
 800b004:	d00c      	beq.n	800b020 <sin+0x60>
 800b006:	2802      	cmp	r0, #2
 800b008:	d011      	beq.n	800b02e <sin+0x6e>
 800b00a:	b9e8      	cbnz	r0, 800b048 <sin+0x88>
 800b00c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b010:	ed9d 0b00 	vldr	d0, [sp]
 800b014:	2001      	movs	r0, #1
 800b016:	f000 f9cb 	bl	800b3b0 <__kernel_sin>
 800b01a:	ec51 0b10 	vmov	r0, r1, d0
 800b01e:	e7e6      	b.n	800afee <sin+0x2e>
 800b020:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b024:	ed9d 0b00 	vldr	d0, [sp]
 800b028:	f000 f8fa 	bl	800b220 <__kernel_cos>
 800b02c:	e7f5      	b.n	800b01a <sin+0x5a>
 800b02e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b032:	ed9d 0b00 	vldr	d0, [sp]
 800b036:	2001      	movs	r0, #1
 800b038:	f000 f9ba 	bl	800b3b0 <__kernel_sin>
 800b03c:	ec53 2b10 	vmov	r2, r3, d0
 800b040:	4610      	mov	r0, r2
 800b042:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b046:	e7d2      	b.n	800afee <sin+0x2e>
 800b048:	ed9d 1b02 	vldr	d1, [sp, #8]
 800b04c:	ed9d 0b00 	vldr	d0, [sp]
 800b050:	f000 f8e6 	bl	800b220 <__kernel_cos>
 800b054:	e7f2      	b.n	800b03c <sin+0x7c>
 800b056:	bf00      	nop
	...
 800b060:	3fe921fb 	.word	0x3fe921fb
 800b064:	7fefffff 	.word	0x7fefffff

0800b068 <__ieee754_sqrt>:
 800b068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06c:	4a68      	ldr	r2, [pc, #416]	@ (800b210 <__ieee754_sqrt+0x1a8>)
 800b06e:	ec55 4b10 	vmov	r4, r5, d0
 800b072:	43aa      	bics	r2, r5
 800b074:	462b      	mov	r3, r5
 800b076:	4621      	mov	r1, r4
 800b078:	d110      	bne.n	800b09c <__ieee754_sqrt+0x34>
 800b07a:	4622      	mov	r2, r4
 800b07c:	4620      	mov	r0, r4
 800b07e:	4629      	mov	r1, r5
 800b080:	f7f5 fada 	bl	8000638 <__aeabi_dmul>
 800b084:	4602      	mov	r2, r0
 800b086:	460b      	mov	r3, r1
 800b088:	4620      	mov	r0, r4
 800b08a:	4629      	mov	r1, r5
 800b08c:	f7f5 f91e 	bl	80002cc <__adddf3>
 800b090:	4604      	mov	r4, r0
 800b092:	460d      	mov	r5, r1
 800b094:	ec45 4b10 	vmov	d0, r4, r5
 800b098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b09c:	2d00      	cmp	r5, #0
 800b09e:	dc0e      	bgt.n	800b0be <__ieee754_sqrt+0x56>
 800b0a0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b0a4:	4322      	orrs	r2, r4
 800b0a6:	d0f5      	beq.n	800b094 <__ieee754_sqrt+0x2c>
 800b0a8:	b19d      	cbz	r5, 800b0d2 <__ieee754_sqrt+0x6a>
 800b0aa:	4622      	mov	r2, r4
 800b0ac:	4620      	mov	r0, r4
 800b0ae:	4629      	mov	r1, r5
 800b0b0:	f7f5 f90a 	bl	80002c8 <__aeabi_dsub>
 800b0b4:	4602      	mov	r2, r0
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	f7f5 fbe8 	bl	800088c <__aeabi_ddiv>
 800b0bc:	e7e8      	b.n	800b090 <__ieee754_sqrt+0x28>
 800b0be:	152a      	asrs	r2, r5, #20
 800b0c0:	d115      	bne.n	800b0ee <__ieee754_sqrt+0x86>
 800b0c2:	2000      	movs	r0, #0
 800b0c4:	e009      	b.n	800b0da <__ieee754_sqrt+0x72>
 800b0c6:	0acb      	lsrs	r3, r1, #11
 800b0c8:	3a15      	subs	r2, #21
 800b0ca:	0549      	lsls	r1, r1, #21
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d0fa      	beq.n	800b0c6 <__ieee754_sqrt+0x5e>
 800b0d0:	e7f7      	b.n	800b0c2 <__ieee754_sqrt+0x5a>
 800b0d2:	462a      	mov	r2, r5
 800b0d4:	e7fa      	b.n	800b0cc <__ieee754_sqrt+0x64>
 800b0d6:	005b      	lsls	r3, r3, #1
 800b0d8:	3001      	adds	r0, #1
 800b0da:	02dc      	lsls	r4, r3, #11
 800b0dc:	d5fb      	bpl.n	800b0d6 <__ieee754_sqrt+0x6e>
 800b0de:	1e44      	subs	r4, r0, #1
 800b0e0:	1b12      	subs	r2, r2, r4
 800b0e2:	f1c0 0420 	rsb	r4, r0, #32
 800b0e6:	fa21 f404 	lsr.w	r4, r1, r4
 800b0ea:	4323      	orrs	r3, r4
 800b0ec:	4081      	lsls	r1, r0
 800b0ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0f2:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b0f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b0fa:	07d2      	lsls	r2, r2, #31
 800b0fc:	bf5c      	itt	pl
 800b0fe:	005b      	lslpl	r3, r3, #1
 800b100:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b104:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b108:	bf58      	it	pl
 800b10a:	0049      	lslpl	r1, r1, #1
 800b10c:	2600      	movs	r6, #0
 800b10e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b112:	106d      	asrs	r5, r5, #1
 800b114:	0049      	lsls	r1, r1, #1
 800b116:	2016      	movs	r0, #22
 800b118:	4632      	mov	r2, r6
 800b11a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b11e:	1917      	adds	r7, r2, r4
 800b120:	429f      	cmp	r7, r3
 800b122:	bfde      	ittt	le
 800b124:	193a      	addle	r2, r7, r4
 800b126:	1bdb      	suble	r3, r3, r7
 800b128:	1936      	addle	r6, r6, r4
 800b12a:	0fcf      	lsrs	r7, r1, #31
 800b12c:	3801      	subs	r0, #1
 800b12e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b132:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b136:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b13a:	d1f0      	bne.n	800b11e <__ieee754_sqrt+0xb6>
 800b13c:	4604      	mov	r4, r0
 800b13e:	2720      	movs	r7, #32
 800b140:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b144:	429a      	cmp	r2, r3
 800b146:	eb00 0e0c 	add.w	lr, r0, ip
 800b14a:	db02      	blt.n	800b152 <__ieee754_sqrt+0xea>
 800b14c:	d113      	bne.n	800b176 <__ieee754_sqrt+0x10e>
 800b14e:	458e      	cmp	lr, r1
 800b150:	d811      	bhi.n	800b176 <__ieee754_sqrt+0x10e>
 800b152:	f1be 0f00 	cmp.w	lr, #0
 800b156:	eb0e 000c 	add.w	r0, lr, ip
 800b15a:	da42      	bge.n	800b1e2 <__ieee754_sqrt+0x17a>
 800b15c:	2800      	cmp	r0, #0
 800b15e:	db40      	blt.n	800b1e2 <__ieee754_sqrt+0x17a>
 800b160:	f102 0801 	add.w	r8, r2, #1
 800b164:	1a9b      	subs	r3, r3, r2
 800b166:	458e      	cmp	lr, r1
 800b168:	bf88      	it	hi
 800b16a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800b16e:	eba1 010e 	sub.w	r1, r1, lr
 800b172:	4464      	add	r4, ip
 800b174:	4642      	mov	r2, r8
 800b176:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b17a:	3f01      	subs	r7, #1
 800b17c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b180:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b184:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b188:	d1dc      	bne.n	800b144 <__ieee754_sqrt+0xdc>
 800b18a:	4319      	orrs	r1, r3
 800b18c:	d01b      	beq.n	800b1c6 <__ieee754_sqrt+0x15e>
 800b18e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b214 <__ieee754_sqrt+0x1ac>
 800b192:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b218 <__ieee754_sqrt+0x1b0>
 800b196:	e9da 0100 	ldrd	r0, r1, [sl]
 800b19a:	e9db 2300 	ldrd	r2, r3, [fp]
 800b19e:	f7f5 f893 	bl	80002c8 <__aeabi_dsub>
 800b1a2:	e9da 8900 	ldrd	r8, r9, [sl]
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	460b      	mov	r3, r1
 800b1aa:	4640      	mov	r0, r8
 800b1ac:	4649      	mov	r1, r9
 800b1ae:	f7f5 fcbf 	bl	8000b30 <__aeabi_dcmple>
 800b1b2:	b140      	cbz	r0, 800b1c6 <__ieee754_sqrt+0x15e>
 800b1b4:	f1b4 3fff 	cmp.w	r4, #4294967295
 800b1b8:	e9da 0100 	ldrd	r0, r1, [sl]
 800b1bc:	e9db 2300 	ldrd	r2, r3, [fp]
 800b1c0:	d111      	bne.n	800b1e6 <__ieee754_sqrt+0x17e>
 800b1c2:	3601      	adds	r6, #1
 800b1c4:	463c      	mov	r4, r7
 800b1c6:	1072      	asrs	r2, r6, #1
 800b1c8:	0863      	lsrs	r3, r4, #1
 800b1ca:	07f1      	lsls	r1, r6, #31
 800b1cc:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b1d0:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b1d4:	bf48      	it	mi
 800b1d6:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b1da:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b1de:	4618      	mov	r0, r3
 800b1e0:	e756      	b.n	800b090 <__ieee754_sqrt+0x28>
 800b1e2:	4690      	mov	r8, r2
 800b1e4:	e7be      	b.n	800b164 <__ieee754_sqrt+0xfc>
 800b1e6:	f7f5 f871 	bl	80002cc <__adddf3>
 800b1ea:	e9da 8900 	ldrd	r8, r9, [sl]
 800b1ee:	4602      	mov	r2, r0
 800b1f0:	460b      	mov	r3, r1
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	4649      	mov	r1, r9
 800b1f6:	f7f5 fc91 	bl	8000b1c <__aeabi_dcmplt>
 800b1fa:	b120      	cbz	r0, 800b206 <__ieee754_sqrt+0x19e>
 800b1fc:	1ca0      	adds	r0, r4, #2
 800b1fe:	bf08      	it	eq
 800b200:	3601      	addeq	r6, #1
 800b202:	3402      	adds	r4, #2
 800b204:	e7df      	b.n	800b1c6 <__ieee754_sqrt+0x15e>
 800b206:	1c63      	adds	r3, r4, #1
 800b208:	f023 0401 	bic.w	r4, r3, #1
 800b20c:	e7db      	b.n	800b1c6 <__ieee754_sqrt+0x15e>
 800b20e:	bf00      	nop
 800b210:	7ff00000 	.word	0x7ff00000
 800b214:	20000218 	.word	0x20000218
 800b218:	20000210 	.word	0x20000210
 800b21c:	00000000 	.word	0x00000000

0800b220 <__kernel_cos>:
 800b220:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b224:	ec57 6b10 	vmov	r6, r7, d0
 800b228:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b22c:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 800b230:	ed8d 1b00 	vstr	d1, [sp]
 800b234:	d206      	bcs.n	800b244 <__kernel_cos+0x24>
 800b236:	4630      	mov	r0, r6
 800b238:	4639      	mov	r1, r7
 800b23a:	f7f5 fcad 	bl	8000b98 <__aeabi_d2iz>
 800b23e:	2800      	cmp	r0, #0
 800b240:	f000 8088 	beq.w	800b354 <__kernel_cos+0x134>
 800b244:	4632      	mov	r2, r6
 800b246:	463b      	mov	r3, r7
 800b248:	4630      	mov	r0, r6
 800b24a:	4639      	mov	r1, r7
 800b24c:	f7f5 f9f4 	bl	8000638 <__aeabi_dmul>
 800b250:	4b51      	ldr	r3, [pc, #324]	@ (800b398 <__kernel_cos+0x178>)
 800b252:	2200      	movs	r2, #0
 800b254:	4604      	mov	r4, r0
 800b256:	460d      	mov	r5, r1
 800b258:	f7f5 f9ee 	bl	8000638 <__aeabi_dmul>
 800b25c:	a340      	add	r3, pc, #256	@ (adr r3, 800b360 <__kernel_cos+0x140>)
 800b25e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b262:	4682      	mov	sl, r0
 800b264:	468b      	mov	fp, r1
 800b266:	4620      	mov	r0, r4
 800b268:	4629      	mov	r1, r5
 800b26a:	f7f5 f9e5 	bl	8000638 <__aeabi_dmul>
 800b26e:	a33e      	add	r3, pc, #248	@ (adr r3, 800b368 <__kernel_cos+0x148>)
 800b270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b274:	f7f5 f82a 	bl	80002cc <__adddf3>
 800b278:	4622      	mov	r2, r4
 800b27a:	462b      	mov	r3, r5
 800b27c:	f7f5 f9dc 	bl	8000638 <__aeabi_dmul>
 800b280:	a33b      	add	r3, pc, #236	@ (adr r3, 800b370 <__kernel_cos+0x150>)
 800b282:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b286:	f7f5 f81f 	bl	80002c8 <__aeabi_dsub>
 800b28a:	4622      	mov	r2, r4
 800b28c:	462b      	mov	r3, r5
 800b28e:	f7f5 f9d3 	bl	8000638 <__aeabi_dmul>
 800b292:	a339      	add	r3, pc, #228	@ (adr r3, 800b378 <__kernel_cos+0x158>)
 800b294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b298:	f7f5 f818 	bl	80002cc <__adddf3>
 800b29c:	4622      	mov	r2, r4
 800b29e:	462b      	mov	r3, r5
 800b2a0:	f7f5 f9ca 	bl	8000638 <__aeabi_dmul>
 800b2a4:	a336      	add	r3, pc, #216	@ (adr r3, 800b380 <__kernel_cos+0x160>)
 800b2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2aa:	f7f5 f80d 	bl	80002c8 <__aeabi_dsub>
 800b2ae:	4622      	mov	r2, r4
 800b2b0:	462b      	mov	r3, r5
 800b2b2:	f7f5 f9c1 	bl	8000638 <__aeabi_dmul>
 800b2b6:	a334      	add	r3, pc, #208	@ (adr r3, 800b388 <__kernel_cos+0x168>)
 800b2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2bc:	f7f5 f806 	bl	80002cc <__adddf3>
 800b2c0:	4622      	mov	r2, r4
 800b2c2:	462b      	mov	r3, r5
 800b2c4:	f7f5 f9b8 	bl	8000638 <__aeabi_dmul>
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	462b      	mov	r3, r5
 800b2cc:	f7f5 f9b4 	bl	8000638 <__aeabi_dmul>
 800b2d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b2d4:	4604      	mov	r4, r0
 800b2d6:	460d      	mov	r5, r1
 800b2d8:	4630      	mov	r0, r6
 800b2da:	4639      	mov	r1, r7
 800b2dc:	f7f5 f9ac 	bl	8000638 <__aeabi_dmul>
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	4629      	mov	r1, r5
 800b2e6:	4620      	mov	r0, r4
 800b2e8:	f7f4 ffee 	bl	80002c8 <__aeabi_dsub>
 800b2ec:	4b2b      	ldr	r3, [pc, #172]	@ (800b39c <__kernel_cos+0x17c>)
 800b2ee:	4598      	cmp	r8, r3
 800b2f0:	4606      	mov	r6, r0
 800b2f2:	460f      	mov	r7, r1
 800b2f4:	d810      	bhi.n	800b318 <__kernel_cos+0xf8>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	4650      	mov	r0, sl
 800b2fc:	4659      	mov	r1, fp
 800b2fe:	f7f4 ffe3 	bl	80002c8 <__aeabi_dsub>
 800b302:	460b      	mov	r3, r1
 800b304:	4926      	ldr	r1, [pc, #152]	@ (800b3a0 <__kernel_cos+0x180>)
 800b306:	4602      	mov	r2, r0
 800b308:	2000      	movs	r0, #0
 800b30a:	f7f4 ffdd 	bl	80002c8 <__aeabi_dsub>
 800b30e:	ec41 0b10 	vmov	d0, r0, r1
 800b312:	b003      	add	sp, #12
 800b314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b318:	4b22      	ldr	r3, [pc, #136]	@ (800b3a4 <__kernel_cos+0x184>)
 800b31a:	4921      	ldr	r1, [pc, #132]	@ (800b3a0 <__kernel_cos+0x180>)
 800b31c:	4598      	cmp	r8, r3
 800b31e:	bf8c      	ite	hi
 800b320:	4d21      	ldrhi	r5, [pc, #132]	@ (800b3a8 <__kernel_cos+0x188>)
 800b322:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 800b326:	2400      	movs	r4, #0
 800b328:	4622      	mov	r2, r4
 800b32a:	462b      	mov	r3, r5
 800b32c:	2000      	movs	r0, #0
 800b32e:	f7f4 ffcb 	bl	80002c8 <__aeabi_dsub>
 800b332:	4622      	mov	r2, r4
 800b334:	4680      	mov	r8, r0
 800b336:	4689      	mov	r9, r1
 800b338:	462b      	mov	r3, r5
 800b33a:	4650      	mov	r0, sl
 800b33c:	4659      	mov	r1, fp
 800b33e:	f7f4 ffc3 	bl	80002c8 <__aeabi_dsub>
 800b342:	4632      	mov	r2, r6
 800b344:	463b      	mov	r3, r7
 800b346:	f7f4 ffbf 	bl	80002c8 <__aeabi_dsub>
 800b34a:	4602      	mov	r2, r0
 800b34c:	460b      	mov	r3, r1
 800b34e:	4640      	mov	r0, r8
 800b350:	4649      	mov	r1, r9
 800b352:	e7da      	b.n	800b30a <__kernel_cos+0xea>
 800b354:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 800b390 <__kernel_cos+0x170>
 800b358:	e7db      	b.n	800b312 <__kernel_cos+0xf2>
 800b35a:	bf00      	nop
 800b35c:	f3af 8000 	nop.w
 800b360:	be8838d4 	.word	0xbe8838d4
 800b364:	bda8fae9 	.word	0xbda8fae9
 800b368:	bdb4b1c4 	.word	0xbdb4b1c4
 800b36c:	3e21ee9e 	.word	0x3e21ee9e
 800b370:	809c52ad 	.word	0x809c52ad
 800b374:	3e927e4f 	.word	0x3e927e4f
 800b378:	19cb1590 	.word	0x19cb1590
 800b37c:	3efa01a0 	.word	0x3efa01a0
 800b380:	16c15177 	.word	0x16c15177
 800b384:	3f56c16c 	.word	0x3f56c16c
 800b388:	5555554c 	.word	0x5555554c
 800b38c:	3fa55555 	.word	0x3fa55555
 800b390:	00000000 	.word	0x00000000
 800b394:	3ff00000 	.word	0x3ff00000
 800b398:	3fe00000 	.word	0x3fe00000
 800b39c:	3fd33332 	.word	0x3fd33332
 800b3a0:	3ff00000 	.word	0x3ff00000
 800b3a4:	3fe90000 	.word	0x3fe90000
 800b3a8:	3fd20000 	.word	0x3fd20000
 800b3ac:	00000000 	.word	0x00000000

0800b3b0 <__kernel_sin>:
 800b3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3b4:	ec55 4b10 	vmov	r4, r5, d0
 800b3b8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800b3bc:	b085      	sub	sp, #20
 800b3be:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800b3c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 800b3c6:	4680      	mov	r8, r0
 800b3c8:	d205      	bcs.n	800b3d6 <__kernel_sin+0x26>
 800b3ca:	4620      	mov	r0, r4
 800b3cc:	4629      	mov	r1, r5
 800b3ce:	f7f5 fbe3 	bl	8000b98 <__aeabi_d2iz>
 800b3d2:	2800      	cmp	r0, #0
 800b3d4:	d052      	beq.n	800b47c <__kernel_sin+0xcc>
 800b3d6:	4622      	mov	r2, r4
 800b3d8:	462b      	mov	r3, r5
 800b3da:	4620      	mov	r0, r4
 800b3dc:	4629      	mov	r1, r5
 800b3de:	f7f5 f92b 	bl	8000638 <__aeabi_dmul>
 800b3e2:	4682      	mov	sl, r0
 800b3e4:	468b      	mov	fp, r1
 800b3e6:	4602      	mov	r2, r0
 800b3e8:	460b      	mov	r3, r1
 800b3ea:	4620      	mov	r0, r4
 800b3ec:	4629      	mov	r1, r5
 800b3ee:	f7f5 f923 	bl	8000638 <__aeabi_dmul>
 800b3f2:	a342      	add	r3, pc, #264	@ (adr r3, 800b4fc <__kernel_sin+0x14c>)
 800b3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f8:	e9cd 0100 	strd	r0, r1, [sp]
 800b3fc:	4650      	mov	r0, sl
 800b3fe:	4659      	mov	r1, fp
 800b400:	f7f5 f91a 	bl	8000638 <__aeabi_dmul>
 800b404:	a33f      	add	r3, pc, #252	@ (adr r3, 800b504 <__kernel_sin+0x154>)
 800b406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40a:	f7f4 ff5d 	bl	80002c8 <__aeabi_dsub>
 800b40e:	4652      	mov	r2, sl
 800b410:	465b      	mov	r3, fp
 800b412:	f7f5 f911 	bl	8000638 <__aeabi_dmul>
 800b416:	a33d      	add	r3, pc, #244	@ (adr r3, 800b50c <__kernel_sin+0x15c>)
 800b418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41c:	f7f4 ff56 	bl	80002cc <__adddf3>
 800b420:	4652      	mov	r2, sl
 800b422:	465b      	mov	r3, fp
 800b424:	f7f5 f908 	bl	8000638 <__aeabi_dmul>
 800b428:	a33a      	add	r3, pc, #232	@ (adr r3, 800b514 <__kernel_sin+0x164>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f4 ff4b 	bl	80002c8 <__aeabi_dsub>
 800b432:	4652      	mov	r2, sl
 800b434:	465b      	mov	r3, fp
 800b436:	f7f5 f8ff 	bl	8000638 <__aeabi_dmul>
 800b43a:	a338      	add	r3, pc, #224	@ (adr r3, 800b51c <__kernel_sin+0x16c>)
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	f7f4 ff44 	bl	80002cc <__adddf3>
 800b444:	4606      	mov	r6, r0
 800b446:	460f      	mov	r7, r1
 800b448:	f1b8 0f00 	cmp.w	r8, #0
 800b44c:	d11b      	bne.n	800b486 <__kernel_sin+0xd6>
 800b44e:	4602      	mov	r2, r0
 800b450:	460b      	mov	r3, r1
 800b452:	4650      	mov	r0, sl
 800b454:	4659      	mov	r1, fp
 800b456:	f7f5 f8ef 	bl	8000638 <__aeabi_dmul>
 800b45a:	a325      	add	r3, pc, #148	@ (adr r3, 800b4f0 <__kernel_sin+0x140>)
 800b45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b460:	f7f4 ff32 	bl	80002c8 <__aeabi_dsub>
 800b464:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b468:	f7f5 f8e6 	bl	8000638 <__aeabi_dmul>
 800b46c:	4602      	mov	r2, r0
 800b46e:	460b      	mov	r3, r1
 800b470:	4620      	mov	r0, r4
 800b472:	4629      	mov	r1, r5
 800b474:	f7f4 ff2a 	bl	80002cc <__adddf3>
 800b478:	4604      	mov	r4, r0
 800b47a:	460d      	mov	r5, r1
 800b47c:	ec45 4b10 	vmov	d0, r4, r5
 800b480:	b005      	add	sp, #20
 800b482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b486:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b48a:	4b1b      	ldr	r3, [pc, #108]	@ (800b4f8 <__kernel_sin+0x148>)
 800b48c:	2200      	movs	r2, #0
 800b48e:	f7f5 f8d3 	bl	8000638 <__aeabi_dmul>
 800b492:	4632      	mov	r2, r6
 800b494:	4680      	mov	r8, r0
 800b496:	4689      	mov	r9, r1
 800b498:	463b      	mov	r3, r7
 800b49a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b49e:	f7f5 f8cb 	bl	8000638 <__aeabi_dmul>
 800b4a2:	4602      	mov	r2, r0
 800b4a4:	460b      	mov	r3, r1
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	4649      	mov	r1, r9
 800b4aa:	f7f4 ff0d 	bl	80002c8 <__aeabi_dsub>
 800b4ae:	4652      	mov	r2, sl
 800b4b0:	465b      	mov	r3, fp
 800b4b2:	f7f5 f8c1 	bl	8000638 <__aeabi_dmul>
 800b4b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b4ba:	f7f4 ff05 	bl	80002c8 <__aeabi_dsub>
 800b4be:	a30c      	add	r3, pc, #48	@ (adr r3, 800b4f0 <__kernel_sin+0x140>)
 800b4c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	460f      	mov	r7, r1
 800b4c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b4cc:	f7f5 f8b4 	bl	8000638 <__aeabi_dmul>
 800b4d0:	4602      	mov	r2, r0
 800b4d2:	460b      	mov	r3, r1
 800b4d4:	4630      	mov	r0, r6
 800b4d6:	4639      	mov	r1, r7
 800b4d8:	f7f4 fef8 	bl	80002cc <__adddf3>
 800b4dc:	4602      	mov	r2, r0
 800b4de:	460b      	mov	r3, r1
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	f7f4 fef0 	bl	80002c8 <__aeabi_dsub>
 800b4e8:	e7c6      	b.n	800b478 <__kernel_sin+0xc8>
 800b4ea:	bf00      	nop
 800b4ec:	f3af 8000 	nop.w
 800b4f0:	55555549 	.word	0x55555549
 800b4f4:	3fc55555 	.word	0x3fc55555
 800b4f8:	3fe00000 	.word	0x3fe00000
 800b4fc:	5acfd57c 	.word	0x5acfd57c
 800b500:	3de5d93a 	.word	0x3de5d93a
 800b504:	8a2b9ceb 	.word	0x8a2b9ceb
 800b508:	3e5ae5e6 	.word	0x3e5ae5e6
 800b50c:	57b1fe7d 	.word	0x57b1fe7d
 800b510:	3ec71de3 	.word	0x3ec71de3
 800b514:	19c161d5 	.word	0x19c161d5
 800b518:	3f2a01a0 	.word	0x3f2a01a0
 800b51c:	1110f8a6 	.word	0x1110f8a6
 800b520:	3f811111 	.word	0x3f811111
 800b524:	00000000 	.word	0x00000000

0800b528 <__ieee754_rem_pio2>:
 800b528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52c:	ec57 6b10 	vmov	r6, r7, d0
 800b530:	4bc5      	ldr	r3, [pc, #788]	@ (800b848 <__ieee754_rem_pio2+0x320>)
 800b532:	b08d      	sub	sp, #52	@ 0x34
 800b534:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b538:	4598      	cmp	r8, r3
 800b53a:	4604      	mov	r4, r0
 800b53c:	9704      	str	r7, [sp, #16]
 800b53e:	d807      	bhi.n	800b550 <__ieee754_rem_pio2+0x28>
 800b540:	2200      	movs	r2, #0
 800b542:	2300      	movs	r3, #0
 800b544:	ed80 0b00 	vstr	d0, [r0]
 800b548:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b54c:	2500      	movs	r5, #0
 800b54e:	e028      	b.n	800b5a2 <__ieee754_rem_pio2+0x7a>
 800b550:	4bbe      	ldr	r3, [pc, #760]	@ (800b84c <__ieee754_rem_pio2+0x324>)
 800b552:	4598      	cmp	r8, r3
 800b554:	d878      	bhi.n	800b648 <__ieee754_rem_pio2+0x120>
 800b556:	9b04      	ldr	r3, [sp, #16]
 800b558:	4dbd      	ldr	r5, [pc, #756]	@ (800b850 <__ieee754_rem_pio2+0x328>)
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	4630      	mov	r0, r6
 800b55e:	a3ac      	add	r3, pc, #688	@ (adr r3, 800b810 <__ieee754_rem_pio2+0x2e8>)
 800b560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b564:	4639      	mov	r1, r7
 800b566:	dd38      	ble.n	800b5da <__ieee754_rem_pio2+0xb2>
 800b568:	f7f4 feae 	bl	80002c8 <__aeabi_dsub>
 800b56c:	45a8      	cmp	r8, r5
 800b56e:	4606      	mov	r6, r0
 800b570:	460f      	mov	r7, r1
 800b572:	d01a      	beq.n	800b5aa <__ieee754_rem_pio2+0x82>
 800b574:	a3a8      	add	r3, pc, #672	@ (adr r3, 800b818 <__ieee754_rem_pio2+0x2f0>)
 800b576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b57a:	f7f4 fea5 	bl	80002c8 <__aeabi_dsub>
 800b57e:	4602      	mov	r2, r0
 800b580:	460b      	mov	r3, r1
 800b582:	4680      	mov	r8, r0
 800b584:	4689      	mov	r9, r1
 800b586:	4630      	mov	r0, r6
 800b588:	4639      	mov	r1, r7
 800b58a:	f7f4 fe9d 	bl	80002c8 <__aeabi_dsub>
 800b58e:	a3a2      	add	r3, pc, #648	@ (adr r3, 800b818 <__ieee754_rem_pio2+0x2f0>)
 800b590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b594:	f7f4 fe98 	bl	80002c8 <__aeabi_dsub>
 800b598:	e9c4 8900 	strd	r8, r9, [r4]
 800b59c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b5a0:	2501      	movs	r5, #1
 800b5a2:	4628      	mov	r0, r5
 800b5a4:	b00d      	add	sp, #52	@ 0x34
 800b5a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5aa:	a39d      	add	r3, pc, #628	@ (adr r3, 800b820 <__ieee754_rem_pio2+0x2f8>)
 800b5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5b0:	f7f4 fe8a 	bl	80002c8 <__aeabi_dsub>
 800b5b4:	a39c      	add	r3, pc, #624	@ (adr r3, 800b828 <__ieee754_rem_pio2+0x300>)
 800b5b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ba:	4606      	mov	r6, r0
 800b5bc:	460f      	mov	r7, r1
 800b5be:	f7f4 fe83 	bl	80002c8 <__aeabi_dsub>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	460b      	mov	r3, r1
 800b5c6:	4680      	mov	r8, r0
 800b5c8:	4689      	mov	r9, r1
 800b5ca:	4630      	mov	r0, r6
 800b5cc:	4639      	mov	r1, r7
 800b5ce:	f7f4 fe7b 	bl	80002c8 <__aeabi_dsub>
 800b5d2:	a395      	add	r3, pc, #596	@ (adr r3, 800b828 <__ieee754_rem_pio2+0x300>)
 800b5d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d8:	e7dc      	b.n	800b594 <__ieee754_rem_pio2+0x6c>
 800b5da:	f7f4 fe77 	bl	80002cc <__adddf3>
 800b5de:	45a8      	cmp	r8, r5
 800b5e0:	4606      	mov	r6, r0
 800b5e2:	460f      	mov	r7, r1
 800b5e4:	d018      	beq.n	800b618 <__ieee754_rem_pio2+0xf0>
 800b5e6:	a38c      	add	r3, pc, #560	@ (adr r3, 800b818 <__ieee754_rem_pio2+0x2f0>)
 800b5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5ec:	f7f4 fe6e 	bl	80002cc <__adddf3>
 800b5f0:	4602      	mov	r2, r0
 800b5f2:	460b      	mov	r3, r1
 800b5f4:	4680      	mov	r8, r0
 800b5f6:	4689      	mov	r9, r1
 800b5f8:	4630      	mov	r0, r6
 800b5fa:	4639      	mov	r1, r7
 800b5fc:	f7f4 fe64 	bl	80002c8 <__aeabi_dsub>
 800b600:	a385      	add	r3, pc, #532	@ (adr r3, 800b818 <__ieee754_rem_pio2+0x2f0>)
 800b602:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b606:	f7f4 fe61 	bl	80002cc <__adddf3>
 800b60a:	f04f 35ff 	mov.w	r5, #4294967295
 800b60e:	e9c4 8900 	strd	r8, r9, [r4]
 800b612:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b616:	e7c4      	b.n	800b5a2 <__ieee754_rem_pio2+0x7a>
 800b618:	a381      	add	r3, pc, #516	@ (adr r3, 800b820 <__ieee754_rem_pio2+0x2f8>)
 800b61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b61e:	f7f4 fe55 	bl	80002cc <__adddf3>
 800b622:	a381      	add	r3, pc, #516	@ (adr r3, 800b828 <__ieee754_rem_pio2+0x300>)
 800b624:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b628:	4606      	mov	r6, r0
 800b62a:	460f      	mov	r7, r1
 800b62c:	f7f4 fe4e 	bl	80002cc <__adddf3>
 800b630:	4602      	mov	r2, r0
 800b632:	460b      	mov	r3, r1
 800b634:	4680      	mov	r8, r0
 800b636:	4689      	mov	r9, r1
 800b638:	4630      	mov	r0, r6
 800b63a:	4639      	mov	r1, r7
 800b63c:	f7f4 fe44 	bl	80002c8 <__aeabi_dsub>
 800b640:	a379      	add	r3, pc, #484	@ (adr r3, 800b828 <__ieee754_rem_pio2+0x300>)
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	e7de      	b.n	800b606 <__ieee754_rem_pio2+0xde>
 800b648:	4b82      	ldr	r3, [pc, #520]	@ (800b854 <__ieee754_rem_pio2+0x32c>)
 800b64a:	4598      	cmp	r8, r3
 800b64c:	f200 80d1 	bhi.w	800b7f2 <__ieee754_rem_pio2+0x2ca>
 800b650:	f000 f966 	bl	800b920 <fabs>
 800b654:	ec57 6b10 	vmov	r6, r7, d0
 800b658:	a375      	add	r3, pc, #468	@ (adr r3, 800b830 <__ieee754_rem_pio2+0x308>)
 800b65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b65e:	4630      	mov	r0, r6
 800b660:	4639      	mov	r1, r7
 800b662:	f7f4 ffe9 	bl	8000638 <__aeabi_dmul>
 800b666:	4b7c      	ldr	r3, [pc, #496]	@ (800b858 <__ieee754_rem_pio2+0x330>)
 800b668:	2200      	movs	r2, #0
 800b66a:	f7f4 fe2f 	bl	80002cc <__adddf3>
 800b66e:	f7f5 fa93 	bl	8000b98 <__aeabi_d2iz>
 800b672:	4605      	mov	r5, r0
 800b674:	f7f4 ff76 	bl	8000564 <__aeabi_i2d>
 800b678:	4602      	mov	r2, r0
 800b67a:	460b      	mov	r3, r1
 800b67c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800b680:	a363      	add	r3, pc, #396	@ (adr r3, 800b810 <__ieee754_rem_pio2+0x2e8>)
 800b682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b686:	f7f4 ffd7 	bl	8000638 <__aeabi_dmul>
 800b68a:	4602      	mov	r2, r0
 800b68c:	460b      	mov	r3, r1
 800b68e:	4630      	mov	r0, r6
 800b690:	4639      	mov	r1, r7
 800b692:	f7f4 fe19 	bl	80002c8 <__aeabi_dsub>
 800b696:	a360      	add	r3, pc, #384	@ (adr r3, 800b818 <__ieee754_rem_pio2+0x2f0>)
 800b698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b69c:	4682      	mov	sl, r0
 800b69e:	468b      	mov	fp, r1
 800b6a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6a4:	f7f4 ffc8 	bl	8000638 <__aeabi_dmul>
 800b6a8:	2d1f      	cmp	r5, #31
 800b6aa:	4606      	mov	r6, r0
 800b6ac:	460f      	mov	r7, r1
 800b6ae:	dc0c      	bgt.n	800b6ca <__ieee754_rem_pio2+0x1a2>
 800b6b0:	4b6a      	ldr	r3, [pc, #424]	@ (800b85c <__ieee754_rem_pio2+0x334>)
 800b6b2:	1e6a      	subs	r2, r5, #1
 800b6b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b8:	4543      	cmp	r3, r8
 800b6ba:	d006      	beq.n	800b6ca <__ieee754_rem_pio2+0x1a2>
 800b6bc:	4632      	mov	r2, r6
 800b6be:	463b      	mov	r3, r7
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	4659      	mov	r1, fp
 800b6c4:	f7f4 fe00 	bl	80002c8 <__aeabi_dsub>
 800b6c8:	e00e      	b.n	800b6e8 <__ieee754_rem_pio2+0x1c0>
 800b6ca:	463b      	mov	r3, r7
 800b6cc:	4632      	mov	r2, r6
 800b6ce:	4650      	mov	r0, sl
 800b6d0:	4659      	mov	r1, fp
 800b6d2:	f7f4 fdf9 	bl	80002c8 <__aeabi_dsub>
 800b6d6:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b6da:	9305      	str	r3, [sp, #20]
 800b6dc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b6e0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800b6e4:	2b10      	cmp	r3, #16
 800b6e6:	dc02      	bgt.n	800b6ee <__ieee754_rem_pio2+0x1c6>
 800b6e8:	e9c4 0100 	strd	r0, r1, [r4]
 800b6ec:	e039      	b.n	800b762 <__ieee754_rem_pio2+0x23a>
 800b6ee:	a34c      	add	r3, pc, #304	@ (adr r3, 800b820 <__ieee754_rem_pio2+0x2f8>)
 800b6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f8:	f7f4 ff9e 	bl	8000638 <__aeabi_dmul>
 800b6fc:	4606      	mov	r6, r0
 800b6fe:	460f      	mov	r7, r1
 800b700:	4602      	mov	r2, r0
 800b702:	460b      	mov	r3, r1
 800b704:	4650      	mov	r0, sl
 800b706:	4659      	mov	r1, fp
 800b708:	f7f4 fdde 	bl	80002c8 <__aeabi_dsub>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	4680      	mov	r8, r0
 800b712:	4689      	mov	r9, r1
 800b714:	4650      	mov	r0, sl
 800b716:	4659      	mov	r1, fp
 800b718:	f7f4 fdd6 	bl	80002c8 <__aeabi_dsub>
 800b71c:	4632      	mov	r2, r6
 800b71e:	463b      	mov	r3, r7
 800b720:	f7f4 fdd2 	bl	80002c8 <__aeabi_dsub>
 800b724:	a340      	add	r3, pc, #256	@ (adr r3, 800b828 <__ieee754_rem_pio2+0x300>)
 800b726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b72a:	4606      	mov	r6, r0
 800b72c:	460f      	mov	r7, r1
 800b72e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b732:	f7f4 ff81 	bl	8000638 <__aeabi_dmul>
 800b736:	4632      	mov	r2, r6
 800b738:	463b      	mov	r3, r7
 800b73a:	f7f4 fdc5 	bl	80002c8 <__aeabi_dsub>
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	4606      	mov	r6, r0
 800b744:	460f      	mov	r7, r1
 800b746:	4640      	mov	r0, r8
 800b748:	4649      	mov	r1, r9
 800b74a:	f7f4 fdbd 	bl	80002c8 <__aeabi_dsub>
 800b74e:	9a05      	ldr	r2, [sp, #20]
 800b750:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	2b31      	cmp	r3, #49	@ 0x31
 800b758:	dc20      	bgt.n	800b79c <__ieee754_rem_pio2+0x274>
 800b75a:	e9c4 0100 	strd	r0, r1, [r4]
 800b75e:	46c2      	mov	sl, r8
 800b760:	46cb      	mov	fp, r9
 800b762:	e9d4 8900 	ldrd	r8, r9, [r4]
 800b766:	4650      	mov	r0, sl
 800b768:	4642      	mov	r2, r8
 800b76a:	464b      	mov	r3, r9
 800b76c:	4659      	mov	r1, fp
 800b76e:	f7f4 fdab 	bl	80002c8 <__aeabi_dsub>
 800b772:	463b      	mov	r3, r7
 800b774:	4632      	mov	r2, r6
 800b776:	f7f4 fda7 	bl	80002c8 <__aeabi_dsub>
 800b77a:	9b04      	ldr	r3, [sp, #16]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b782:	f6bf af0e 	bge.w	800b5a2 <__ieee754_rem_pio2+0x7a>
 800b786:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800b78a:	6063      	str	r3, [r4, #4]
 800b78c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b790:	f8c4 8000 	str.w	r8, [r4]
 800b794:	60a0      	str	r0, [r4, #8]
 800b796:	60e3      	str	r3, [r4, #12]
 800b798:	426d      	negs	r5, r5
 800b79a:	e702      	b.n	800b5a2 <__ieee754_rem_pio2+0x7a>
 800b79c:	a326      	add	r3, pc, #152	@ (adr r3, 800b838 <__ieee754_rem_pio2+0x310>)
 800b79e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7a6:	f7f4 ff47 	bl	8000638 <__aeabi_dmul>
 800b7aa:	4606      	mov	r6, r0
 800b7ac:	460f      	mov	r7, r1
 800b7ae:	4602      	mov	r2, r0
 800b7b0:	460b      	mov	r3, r1
 800b7b2:	4640      	mov	r0, r8
 800b7b4:	4649      	mov	r1, r9
 800b7b6:	f7f4 fd87 	bl	80002c8 <__aeabi_dsub>
 800b7ba:	4602      	mov	r2, r0
 800b7bc:	460b      	mov	r3, r1
 800b7be:	4682      	mov	sl, r0
 800b7c0:	468b      	mov	fp, r1
 800b7c2:	4640      	mov	r0, r8
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	f7f4 fd7f 	bl	80002c8 <__aeabi_dsub>
 800b7ca:	4632      	mov	r2, r6
 800b7cc:	463b      	mov	r3, r7
 800b7ce:	f7f4 fd7b 	bl	80002c8 <__aeabi_dsub>
 800b7d2:	a31b      	add	r3, pc, #108	@ (adr r3, 800b840 <__ieee754_rem_pio2+0x318>)
 800b7d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d8:	4606      	mov	r6, r0
 800b7da:	460f      	mov	r7, r1
 800b7dc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b7e0:	f7f4 ff2a 	bl	8000638 <__aeabi_dmul>
 800b7e4:	4632      	mov	r2, r6
 800b7e6:	463b      	mov	r3, r7
 800b7e8:	f7f4 fd6e 	bl	80002c8 <__aeabi_dsub>
 800b7ec:	4606      	mov	r6, r0
 800b7ee:	460f      	mov	r7, r1
 800b7f0:	e764      	b.n	800b6bc <__ieee754_rem_pio2+0x194>
 800b7f2:	4b1b      	ldr	r3, [pc, #108]	@ (800b860 <__ieee754_rem_pio2+0x338>)
 800b7f4:	4598      	cmp	r8, r3
 800b7f6:	d935      	bls.n	800b864 <__ieee754_rem_pio2+0x33c>
 800b7f8:	4632      	mov	r2, r6
 800b7fa:	463b      	mov	r3, r7
 800b7fc:	4630      	mov	r0, r6
 800b7fe:	4639      	mov	r1, r7
 800b800:	f7f4 fd62 	bl	80002c8 <__aeabi_dsub>
 800b804:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800b808:	e9c4 0100 	strd	r0, r1, [r4]
 800b80c:	e69e      	b.n	800b54c <__ieee754_rem_pio2+0x24>
 800b80e:	bf00      	nop
 800b810:	54400000 	.word	0x54400000
 800b814:	3ff921fb 	.word	0x3ff921fb
 800b818:	1a626331 	.word	0x1a626331
 800b81c:	3dd0b461 	.word	0x3dd0b461
 800b820:	1a600000 	.word	0x1a600000
 800b824:	3dd0b461 	.word	0x3dd0b461
 800b828:	2e037073 	.word	0x2e037073
 800b82c:	3ba3198a 	.word	0x3ba3198a
 800b830:	6dc9c883 	.word	0x6dc9c883
 800b834:	3fe45f30 	.word	0x3fe45f30
 800b838:	2e000000 	.word	0x2e000000
 800b83c:	3ba3198a 	.word	0x3ba3198a
 800b840:	252049c1 	.word	0x252049c1
 800b844:	397b839a 	.word	0x397b839a
 800b848:	3fe921fb 	.word	0x3fe921fb
 800b84c:	4002d97b 	.word	0x4002d97b
 800b850:	3ff921fb 	.word	0x3ff921fb
 800b854:	413921fb 	.word	0x413921fb
 800b858:	3fe00000 	.word	0x3fe00000
 800b85c:	0800c668 	.word	0x0800c668
 800b860:	7fefffff 	.word	0x7fefffff
 800b864:	ea4f 5528 	mov.w	r5, r8, asr #20
 800b868:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800b86c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 800b870:	4630      	mov	r0, r6
 800b872:	460f      	mov	r7, r1
 800b874:	f7f5 f990 	bl	8000b98 <__aeabi_d2iz>
 800b878:	f7f4 fe74 	bl	8000564 <__aeabi_i2d>
 800b87c:	4602      	mov	r2, r0
 800b87e:	460b      	mov	r3, r1
 800b880:	4630      	mov	r0, r6
 800b882:	4639      	mov	r1, r7
 800b884:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b888:	f7f4 fd1e 	bl	80002c8 <__aeabi_dsub>
 800b88c:	4b22      	ldr	r3, [pc, #136]	@ (800b918 <__ieee754_rem_pio2+0x3f0>)
 800b88e:	2200      	movs	r2, #0
 800b890:	f7f4 fed2 	bl	8000638 <__aeabi_dmul>
 800b894:	460f      	mov	r7, r1
 800b896:	4606      	mov	r6, r0
 800b898:	f7f5 f97e 	bl	8000b98 <__aeabi_d2iz>
 800b89c:	f7f4 fe62 	bl	8000564 <__aeabi_i2d>
 800b8a0:	4602      	mov	r2, r0
 800b8a2:	460b      	mov	r3, r1
 800b8a4:	4630      	mov	r0, r6
 800b8a6:	4639      	mov	r1, r7
 800b8a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b8ac:	f7f4 fd0c 	bl	80002c8 <__aeabi_dsub>
 800b8b0:	4b19      	ldr	r3, [pc, #100]	@ (800b918 <__ieee754_rem_pio2+0x3f0>)
 800b8b2:	2200      	movs	r2, #0
 800b8b4:	f7f4 fec0 	bl	8000638 <__aeabi_dmul>
 800b8b8:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800b8bc:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800b8c0:	f04f 0803 	mov.w	r8, #3
 800b8c4:	2600      	movs	r6, #0
 800b8c6:	2700      	movs	r7, #0
 800b8c8:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800b8cc:	4632      	mov	r2, r6
 800b8ce:	463b      	mov	r3, r7
 800b8d0:	46c2      	mov	sl, r8
 800b8d2:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8d6:	f7f5 f917 	bl	8000b08 <__aeabi_dcmpeq>
 800b8da:	2800      	cmp	r0, #0
 800b8dc:	d1f4      	bne.n	800b8c8 <__ieee754_rem_pio2+0x3a0>
 800b8de:	4b0f      	ldr	r3, [pc, #60]	@ (800b91c <__ieee754_rem_pio2+0x3f4>)
 800b8e0:	9301      	str	r3, [sp, #4]
 800b8e2:	2302      	movs	r3, #2
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	462a      	mov	r2, r5
 800b8e8:	4653      	mov	r3, sl
 800b8ea:	4621      	mov	r1, r4
 800b8ec:	a806      	add	r0, sp, #24
 800b8ee:	f000 f81f 	bl	800b930 <__kernel_rem_pio2>
 800b8f2:	9b04      	ldr	r3, [sp, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	4605      	mov	r5, r0
 800b8f8:	f6bf ae53 	bge.w	800b5a2 <__ieee754_rem_pio2+0x7a>
 800b8fc:	e9d4 2100 	ldrd	r2, r1, [r4]
 800b900:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b904:	e9c4 2300 	strd	r2, r3, [r4]
 800b908:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800b90c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b910:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800b914:	e740      	b.n	800b798 <__ieee754_rem_pio2+0x270>
 800b916:	bf00      	nop
 800b918:	41700000 	.word	0x41700000
 800b91c:	0800c6e8 	.word	0x0800c6e8

0800b920 <fabs>:
 800b920:	ec51 0b10 	vmov	r0, r1, d0
 800b924:	4602      	mov	r2, r0
 800b926:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b92a:	ec43 2b10 	vmov	d0, r2, r3
 800b92e:	4770      	bx	lr

0800b930 <__kernel_rem_pio2>:
 800b930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b934:	ed2d 8b02 	vpush	{d8}
 800b938:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800b93c:	f112 0f14 	cmn.w	r2, #20
 800b940:	9306      	str	r3, [sp, #24]
 800b942:	9104      	str	r1, [sp, #16]
 800b944:	4bbe      	ldr	r3, [pc, #760]	@ (800bc40 <__kernel_rem_pio2+0x310>)
 800b946:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 800b948:	9008      	str	r0, [sp, #32]
 800b94a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b94e:	9300      	str	r3, [sp, #0]
 800b950:	9b06      	ldr	r3, [sp, #24]
 800b952:	f103 33ff 	add.w	r3, r3, #4294967295
 800b956:	bfa8      	it	ge
 800b958:	1ed4      	subge	r4, r2, #3
 800b95a:	9305      	str	r3, [sp, #20]
 800b95c:	bfb2      	itee	lt
 800b95e:	2400      	movlt	r4, #0
 800b960:	2318      	movge	r3, #24
 800b962:	fb94 f4f3 	sdivge	r4, r4, r3
 800b966:	f06f 0317 	mvn.w	r3, #23
 800b96a:	fb04 3303 	mla	r3, r4, r3, r3
 800b96e:	eb03 0b02 	add.w	fp, r3, r2
 800b972:	9b00      	ldr	r3, [sp, #0]
 800b974:	9a05      	ldr	r2, [sp, #20]
 800b976:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 800bc30 <__kernel_rem_pio2+0x300>
 800b97a:	eb03 0802 	add.w	r8, r3, r2
 800b97e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800b980:	1aa7      	subs	r7, r4, r2
 800b982:	ae20      	add	r6, sp, #128	@ 0x80
 800b984:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800b988:	2500      	movs	r5, #0
 800b98a:	4545      	cmp	r5, r8
 800b98c:	dd13      	ble.n	800b9b6 <__kernel_rem_pio2+0x86>
 800b98e:	9b06      	ldr	r3, [sp, #24]
 800b990:	aa20      	add	r2, sp, #128	@ 0x80
 800b992:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800b996:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800b99a:	f04f 0800 	mov.w	r8, #0
 800b99e:	9b00      	ldr	r3, [sp, #0]
 800b9a0:	4598      	cmp	r8, r3
 800b9a2:	dc31      	bgt.n	800ba08 <__kernel_rem_pio2+0xd8>
 800b9a4:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 800bc30 <__kernel_rem_pio2+0x300>
 800b9a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b9ac:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b9b0:	462f      	mov	r7, r5
 800b9b2:	2600      	movs	r6, #0
 800b9b4:	e01b      	b.n	800b9ee <__kernel_rem_pio2+0xbe>
 800b9b6:	42ef      	cmn	r7, r5
 800b9b8:	d407      	bmi.n	800b9ca <__kernel_rem_pio2+0x9a>
 800b9ba:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800b9be:	f7f4 fdd1 	bl	8000564 <__aeabi_i2d>
 800b9c2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800b9c6:	3501      	adds	r5, #1
 800b9c8:	e7df      	b.n	800b98a <__kernel_rem_pio2+0x5a>
 800b9ca:	ec51 0b18 	vmov	r0, r1, d8
 800b9ce:	e7f8      	b.n	800b9c2 <__kernel_rem_pio2+0x92>
 800b9d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b9d4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800b9d8:	f7f4 fe2e 	bl	8000638 <__aeabi_dmul>
 800b9dc:	4602      	mov	r2, r0
 800b9de:	460b      	mov	r3, r1
 800b9e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b9e4:	f7f4 fc72 	bl	80002cc <__adddf3>
 800b9e8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b9ec:	3601      	adds	r6, #1
 800b9ee:	9b05      	ldr	r3, [sp, #20]
 800b9f0:	429e      	cmp	r6, r3
 800b9f2:	f1a7 0708 	sub.w	r7, r7, #8
 800b9f6:	ddeb      	ble.n	800b9d0 <__kernel_rem_pio2+0xa0>
 800b9f8:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b9fc:	f108 0801 	add.w	r8, r8, #1
 800ba00:	ecaa 7b02 	vstmia	sl!, {d7}
 800ba04:	3508      	adds	r5, #8
 800ba06:	e7ca      	b.n	800b99e <__kernel_rem_pio2+0x6e>
 800ba08:	9b00      	ldr	r3, [sp, #0]
 800ba0a:	f8dd 8000 	ldr.w	r8, [sp]
 800ba0e:	aa0c      	add	r2, sp, #48	@ 0x30
 800ba10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ba14:	930a      	str	r3, [sp, #40]	@ 0x28
 800ba16:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 800ba18:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ba1c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba1e:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 800ba22:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ba24:	ab98      	add	r3, sp, #608	@ 0x260
 800ba26:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ba2a:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 800ba2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ba32:	ac0c      	add	r4, sp, #48	@ 0x30
 800ba34:	ab70      	add	r3, sp, #448	@ 0x1c0
 800ba36:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 800ba3a:	46a1      	mov	r9, r4
 800ba3c:	46c2      	mov	sl, r8
 800ba3e:	f1ba 0f00 	cmp.w	sl, #0
 800ba42:	f1a5 0508 	sub.w	r5, r5, #8
 800ba46:	dc77      	bgt.n	800bb38 <__kernel_rem_pio2+0x208>
 800ba48:	4658      	mov	r0, fp
 800ba4a:	ed9d 0b02 	vldr	d0, [sp, #8]
 800ba4e:	f000 fac7 	bl	800bfe0 <scalbn>
 800ba52:	ec57 6b10 	vmov	r6, r7, d0
 800ba56:	2200      	movs	r2, #0
 800ba58:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800ba5c:	4630      	mov	r0, r6
 800ba5e:	4639      	mov	r1, r7
 800ba60:	f7f4 fdea 	bl	8000638 <__aeabi_dmul>
 800ba64:	ec41 0b10 	vmov	d0, r0, r1
 800ba68:	f000 fb3a 	bl	800c0e0 <floor>
 800ba6c:	4b75      	ldr	r3, [pc, #468]	@ (800bc44 <__kernel_rem_pio2+0x314>)
 800ba6e:	ec51 0b10 	vmov	r0, r1, d0
 800ba72:	2200      	movs	r2, #0
 800ba74:	f7f4 fde0 	bl	8000638 <__aeabi_dmul>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	4630      	mov	r0, r6
 800ba7e:	4639      	mov	r1, r7
 800ba80:	f7f4 fc22 	bl	80002c8 <__aeabi_dsub>
 800ba84:	460f      	mov	r7, r1
 800ba86:	4606      	mov	r6, r0
 800ba88:	f7f5 f886 	bl	8000b98 <__aeabi_d2iz>
 800ba8c:	9002      	str	r0, [sp, #8]
 800ba8e:	f7f4 fd69 	bl	8000564 <__aeabi_i2d>
 800ba92:	4602      	mov	r2, r0
 800ba94:	460b      	mov	r3, r1
 800ba96:	4630      	mov	r0, r6
 800ba98:	4639      	mov	r1, r7
 800ba9a:	f7f4 fc15 	bl	80002c8 <__aeabi_dsub>
 800ba9e:	f1bb 0f00 	cmp.w	fp, #0
 800baa2:	4606      	mov	r6, r0
 800baa4:	460f      	mov	r7, r1
 800baa6:	dd6c      	ble.n	800bb82 <__kernel_rem_pio2+0x252>
 800baa8:	f108 31ff 	add.w	r1, r8, #4294967295
 800baac:	ab0c      	add	r3, sp, #48	@ 0x30
 800baae:	9d02      	ldr	r5, [sp, #8]
 800bab0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bab4:	f1cb 0018 	rsb	r0, fp, #24
 800bab8:	fa43 f200 	asr.w	r2, r3, r0
 800babc:	4415      	add	r5, r2
 800babe:	4082      	lsls	r2, r0
 800bac0:	1a9b      	subs	r3, r3, r2
 800bac2:	aa0c      	add	r2, sp, #48	@ 0x30
 800bac4:	9502      	str	r5, [sp, #8]
 800bac6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800baca:	f1cb 0217 	rsb	r2, fp, #23
 800bace:	fa43 f902 	asr.w	r9, r3, r2
 800bad2:	f1b9 0f00 	cmp.w	r9, #0
 800bad6:	dd64      	ble.n	800bba2 <__kernel_rem_pio2+0x272>
 800bad8:	9b02      	ldr	r3, [sp, #8]
 800bada:	2200      	movs	r2, #0
 800badc:	3301      	adds	r3, #1
 800bade:	9302      	str	r3, [sp, #8]
 800bae0:	4615      	mov	r5, r2
 800bae2:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800bae6:	4590      	cmp	r8, r2
 800bae8:	f300 80b8 	bgt.w	800bc5c <__kernel_rem_pio2+0x32c>
 800baec:	f1bb 0f00 	cmp.w	fp, #0
 800baf0:	dd07      	ble.n	800bb02 <__kernel_rem_pio2+0x1d2>
 800baf2:	f1bb 0f01 	cmp.w	fp, #1
 800baf6:	f000 80bf 	beq.w	800bc78 <__kernel_rem_pio2+0x348>
 800bafa:	f1bb 0f02 	cmp.w	fp, #2
 800bafe:	f000 80c6 	beq.w	800bc8e <__kernel_rem_pio2+0x35e>
 800bb02:	f1b9 0f02 	cmp.w	r9, #2
 800bb06:	d14c      	bne.n	800bba2 <__kernel_rem_pio2+0x272>
 800bb08:	4632      	mov	r2, r6
 800bb0a:	463b      	mov	r3, r7
 800bb0c:	494e      	ldr	r1, [pc, #312]	@ (800bc48 <__kernel_rem_pio2+0x318>)
 800bb0e:	2000      	movs	r0, #0
 800bb10:	f7f4 fbda 	bl	80002c8 <__aeabi_dsub>
 800bb14:	4606      	mov	r6, r0
 800bb16:	460f      	mov	r7, r1
 800bb18:	2d00      	cmp	r5, #0
 800bb1a:	d042      	beq.n	800bba2 <__kernel_rem_pio2+0x272>
 800bb1c:	4658      	mov	r0, fp
 800bb1e:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 800bc38 <__kernel_rem_pio2+0x308>
 800bb22:	f000 fa5d 	bl	800bfe0 <scalbn>
 800bb26:	4630      	mov	r0, r6
 800bb28:	4639      	mov	r1, r7
 800bb2a:	ec53 2b10 	vmov	r2, r3, d0
 800bb2e:	f7f4 fbcb 	bl	80002c8 <__aeabi_dsub>
 800bb32:	4606      	mov	r6, r0
 800bb34:	460f      	mov	r7, r1
 800bb36:	e034      	b.n	800bba2 <__kernel_rem_pio2+0x272>
 800bb38:	4b44      	ldr	r3, [pc, #272]	@ (800bc4c <__kernel_rem_pio2+0x31c>)
 800bb3a:	2200      	movs	r2, #0
 800bb3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb40:	f7f4 fd7a 	bl	8000638 <__aeabi_dmul>
 800bb44:	f7f5 f828 	bl	8000b98 <__aeabi_d2iz>
 800bb48:	f7f4 fd0c 	bl	8000564 <__aeabi_i2d>
 800bb4c:	4b40      	ldr	r3, [pc, #256]	@ (800bc50 <__kernel_rem_pio2+0x320>)
 800bb4e:	2200      	movs	r2, #0
 800bb50:	4606      	mov	r6, r0
 800bb52:	460f      	mov	r7, r1
 800bb54:	f7f4 fd70 	bl	8000638 <__aeabi_dmul>
 800bb58:	4602      	mov	r2, r0
 800bb5a:	460b      	mov	r3, r1
 800bb5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb60:	f7f4 fbb2 	bl	80002c8 <__aeabi_dsub>
 800bb64:	f7f5 f818 	bl	8000b98 <__aeabi_d2iz>
 800bb68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bb6c:	f849 0b04 	str.w	r0, [r9], #4
 800bb70:	4639      	mov	r1, r7
 800bb72:	4630      	mov	r0, r6
 800bb74:	f7f4 fbaa 	bl	80002cc <__adddf3>
 800bb78:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb80:	e75d      	b.n	800ba3e <__kernel_rem_pio2+0x10e>
 800bb82:	d107      	bne.n	800bb94 <__kernel_rem_pio2+0x264>
 800bb84:	f108 33ff 	add.w	r3, r8, #4294967295
 800bb88:	aa0c      	add	r2, sp, #48	@ 0x30
 800bb8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bb8e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 800bb92:	e79e      	b.n	800bad2 <__kernel_rem_pio2+0x1a2>
 800bb94:	4b2f      	ldr	r3, [pc, #188]	@ (800bc54 <__kernel_rem_pio2+0x324>)
 800bb96:	2200      	movs	r2, #0
 800bb98:	f7f4 ffd4 	bl	8000b44 <__aeabi_dcmpge>
 800bb9c:	2800      	cmp	r0, #0
 800bb9e:	d143      	bne.n	800bc28 <__kernel_rem_pio2+0x2f8>
 800bba0:	4681      	mov	r9, r0
 800bba2:	2200      	movs	r2, #0
 800bba4:	2300      	movs	r3, #0
 800bba6:	4630      	mov	r0, r6
 800bba8:	4639      	mov	r1, r7
 800bbaa:	f7f4 ffad 	bl	8000b08 <__aeabi_dcmpeq>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f000 80bf 	beq.w	800bd32 <__kernel_rem_pio2+0x402>
 800bbb4:	f108 33ff 	add.w	r3, r8, #4294967295
 800bbb8:	2200      	movs	r2, #0
 800bbba:	9900      	ldr	r1, [sp, #0]
 800bbbc:	428b      	cmp	r3, r1
 800bbbe:	da6e      	bge.n	800bc9e <__kernel_rem_pio2+0x36e>
 800bbc0:	2a00      	cmp	r2, #0
 800bbc2:	f000 8089 	beq.w	800bcd8 <__kernel_rem_pio2+0x3a8>
 800bbc6:	f108 38ff 	add.w	r8, r8, #4294967295
 800bbca:	ab0c      	add	r3, sp, #48	@ 0x30
 800bbcc:	f1ab 0b18 	sub.w	fp, fp, #24
 800bbd0:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	d0f6      	beq.n	800bbc6 <__kernel_rem_pio2+0x296>
 800bbd8:	4658      	mov	r0, fp
 800bbda:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800bc38 <__kernel_rem_pio2+0x308>
 800bbde:	f000 f9ff 	bl	800bfe0 <scalbn>
 800bbe2:	f108 0301 	add.w	r3, r8, #1
 800bbe6:	00da      	lsls	r2, r3, #3
 800bbe8:	9205      	str	r2, [sp, #20]
 800bbea:	ec55 4b10 	vmov	r4, r5, d0
 800bbee:	aa70      	add	r2, sp, #448	@ 0x1c0
 800bbf0:	f8df b058 	ldr.w	fp, [pc, #88]	@ 800bc4c <__kernel_rem_pio2+0x31c>
 800bbf4:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 800bbf8:	4646      	mov	r6, r8
 800bbfa:	f04f 0a00 	mov.w	sl, #0
 800bbfe:	2e00      	cmp	r6, #0
 800bc00:	f280 80cf 	bge.w	800bda2 <__kernel_rem_pio2+0x472>
 800bc04:	4644      	mov	r4, r8
 800bc06:	2c00      	cmp	r4, #0
 800bc08:	f2c0 80fd 	blt.w	800be06 <__kernel_rem_pio2+0x4d6>
 800bc0c:	4b12      	ldr	r3, [pc, #72]	@ (800bc58 <__kernel_rem_pio2+0x328>)
 800bc0e:	461f      	mov	r7, r3
 800bc10:	ab70      	add	r3, sp, #448	@ 0x1c0
 800bc12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bc16:	9306      	str	r3, [sp, #24]
 800bc18:	f04f 0a00 	mov.w	sl, #0
 800bc1c:	f04f 0b00 	mov.w	fp, #0
 800bc20:	2600      	movs	r6, #0
 800bc22:	eba8 0504 	sub.w	r5, r8, r4
 800bc26:	e0e2      	b.n	800bdee <__kernel_rem_pio2+0x4be>
 800bc28:	f04f 0902 	mov.w	r9, #2
 800bc2c:	e754      	b.n	800bad8 <__kernel_rem_pio2+0x1a8>
 800bc2e:	bf00      	nop
	...
 800bc3c:	3ff00000 	.word	0x3ff00000
 800bc40:	0800c830 	.word	0x0800c830
 800bc44:	40200000 	.word	0x40200000
 800bc48:	3ff00000 	.word	0x3ff00000
 800bc4c:	3e700000 	.word	0x3e700000
 800bc50:	41700000 	.word	0x41700000
 800bc54:	3fe00000 	.word	0x3fe00000
 800bc58:	0800c7f0 	.word	0x0800c7f0
 800bc5c:	f854 3b04 	ldr.w	r3, [r4], #4
 800bc60:	b945      	cbnz	r5, 800bc74 <__kernel_rem_pio2+0x344>
 800bc62:	b123      	cbz	r3, 800bc6e <__kernel_rem_pio2+0x33e>
 800bc64:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800bc68:	f844 3c04 	str.w	r3, [r4, #-4]
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	3201      	adds	r2, #1
 800bc70:	461d      	mov	r5, r3
 800bc72:	e738      	b.n	800bae6 <__kernel_rem_pio2+0x1b6>
 800bc74:	1acb      	subs	r3, r1, r3
 800bc76:	e7f7      	b.n	800bc68 <__kernel_rem_pio2+0x338>
 800bc78:	f108 32ff 	add.w	r2, r8, #4294967295
 800bc7c:	ab0c      	add	r3, sp, #48	@ 0x30
 800bc7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc82:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bc86:	a90c      	add	r1, sp, #48	@ 0x30
 800bc88:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bc8c:	e739      	b.n	800bb02 <__kernel_rem_pio2+0x1d2>
 800bc8e:	f108 32ff 	add.w	r2, r8, #4294967295
 800bc92:	ab0c      	add	r3, sp, #48	@ 0x30
 800bc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc98:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bc9c:	e7f3      	b.n	800bc86 <__kernel_rem_pio2+0x356>
 800bc9e:	a90c      	add	r1, sp, #48	@ 0x30
 800bca0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bca4:	3b01      	subs	r3, #1
 800bca6:	430a      	orrs	r2, r1
 800bca8:	e787      	b.n	800bbba <__kernel_rem_pio2+0x28a>
 800bcaa:	3401      	adds	r4, #1
 800bcac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bcb0:	2a00      	cmp	r2, #0
 800bcb2:	d0fa      	beq.n	800bcaa <__kernel_rem_pio2+0x37a>
 800bcb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bcb6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bcba:	eb0d 0503 	add.w	r5, sp, r3
 800bcbe:	9b06      	ldr	r3, [sp, #24]
 800bcc0:	aa20      	add	r2, sp, #128	@ 0x80
 800bcc2:	4443      	add	r3, r8
 800bcc4:	f108 0701 	add.w	r7, r8, #1
 800bcc8:	3d98      	subs	r5, #152	@ 0x98
 800bcca:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800bcce:	4444      	add	r4, r8
 800bcd0:	42bc      	cmp	r4, r7
 800bcd2:	da04      	bge.n	800bcde <__kernel_rem_pio2+0x3ae>
 800bcd4:	46a0      	mov	r8, r4
 800bcd6:	e6a2      	b.n	800ba1e <__kernel_rem_pio2+0xee>
 800bcd8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bcda:	2401      	movs	r4, #1
 800bcdc:	e7e6      	b.n	800bcac <__kernel_rem_pio2+0x37c>
 800bcde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bce0:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 800bce4:	f7f4 fc3e 	bl	8000564 <__aeabi_i2d>
 800bce8:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 800bfb0 <__kernel_rem_pio2+0x680>
 800bcec:	e8e6 0102 	strd	r0, r1, [r6], #8
 800bcf0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bcf4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bcf8:	46b2      	mov	sl, r6
 800bcfa:	f04f 0800 	mov.w	r8, #0
 800bcfe:	9b05      	ldr	r3, [sp, #20]
 800bd00:	4598      	cmp	r8, r3
 800bd02:	dd05      	ble.n	800bd10 <__kernel_rem_pio2+0x3e0>
 800bd04:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bd08:	3701      	adds	r7, #1
 800bd0a:	eca5 7b02 	vstmia	r5!, {d7}
 800bd0e:	e7df      	b.n	800bcd0 <__kernel_rem_pio2+0x3a0>
 800bd10:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 800bd14:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800bd18:	f7f4 fc8e 	bl	8000638 <__aeabi_dmul>
 800bd1c:	4602      	mov	r2, r0
 800bd1e:	460b      	mov	r3, r1
 800bd20:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd24:	f7f4 fad2 	bl	80002cc <__adddf3>
 800bd28:	f108 0801 	add.w	r8, r8, #1
 800bd2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd30:	e7e5      	b.n	800bcfe <__kernel_rem_pio2+0x3ce>
 800bd32:	f1cb 0000 	rsb	r0, fp, #0
 800bd36:	ec47 6b10 	vmov	d0, r6, r7
 800bd3a:	f000 f951 	bl	800bfe0 <scalbn>
 800bd3e:	ec55 4b10 	vmov	r4, r5, d0
 800bd42:	4b9d      	ldr	r3, [pc, #628]	@ (800bfb8 <__kernel_rem_pio2+0x688>)
 800bd44:	2200      	movs	r2, #0
 800bd46:	4620      	mov	r0, r4
 800bd48:	4629      	mov	r1, r5
 800bd4a:	f7f4 fefb 	bl	8000b44 <__aeabi_dcmpge>
 800bd4e:	b300      	cbz	r0, 800bd92 <__kernel_rem_pio2+0x462>
 800bd50:	4b9a      	ldr	r3, [pc, #616]	@ (800bfbc <__kernel_rem_pio2+0x68c>)
 800bd52:	2200      	movs	r2, #0
 800bd54:	4620      	mov	r0, r4
 800bd56:	4629      	mov	r1, r5
 800bd58:	f7f4 fc6e 	bl	8000638 <__aeabi_dmul>
 800bd5c:	f7f4 ff1c 	bl	8000b98 <__aeabi_d2iz>
 800bd60:	4606      	mov	r6, r0
 800bd62:	f7f4 fbff 	bl	8000564 <__aeabi_i2d>
 800bd66:	4b94      	ldr	r3, [pc, #592]	@ (800bfb8 <__kernel_rem_pio2+0x688>)
 800bd68:	2200      	movs	r2, #0
 800bd6a:	f7f4 fc65 	bl	8000638 <__aeabi_dmul>
 800bd6e:	460b      	mov	r3, r1
 800bd70:	4602      	mov	r2, r0
 800bd72:	4629      	mov	r1, r5
 800bd74:	4620      	mov	r0, r4
 800bd76:	f7f4 faa7 	bl	80002c8 <__aeabi_dsub>
 800bd7a:	f7f4 ff0d 	bl	8000b98 <__aeabi_d2iz>
 800bd7e:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd80:	f10b 0b18 	add.w	fp, fp, #24
 800bd84:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bd88:	f108 0801 	add.w	r8, r8, #1
 800bd8c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 800bd90:	e722      	b.n	800bbd8 <__kernel_rem_pio2+0x2a8>
 800bd92:	4620      	mov	r0, r4
 800bd94:	4629      	mov	r1, r5
 800bd96:	f7f4 feff 	bl	8000b98 <__aeabi_d2iz>
 800bd9a:	ab0c      	add	r3, sp, #48	@ 0x30
 800bd9c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 800bda0:	e71a      	b.n	800bbd8 <__kernel_rem_pio2+0x2a8>
 800bda2:	ab0c      	add	r3, sp, #48	@ 0x30
 800bda4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800bda8:	f7f4 fbdc 	bl	8000564 <__aeabi_i2d>
 800bdac:	4622      	mov	r2, r4
 800bdae:	462b      	mov	r3, r5
 800bdb0:	f7f4 fc42 	bl	8000638 <__aeabi_dmul>
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800bdba:	465b      	mov	r3, fp
 800bdbc:	4620      	mov	r0, r4
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	f7f4 fc3a 	bl	8000638 <__aeabi_dmul>
 800bdc4:	3e01      	subs	r6, #1
 800bdc6:	4604      	mov	r4, r0
 800bdc8:	460d      	mov	r5, r1
 800bdca:	e718      	b.n	800bbfe <__kernel_rem_pio2+0x2ce>
 800bdcc:	9906      	ldr	r1, [sp, #24]
 800bdce:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 800bdd2:	9106      	str	r1, [sp, #24]
 800bdd4:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800bdd8:	f7f4 fc2e 	bl	8000638 <__aeabi_dmul>
 800bddc:	4602      	mov	r2, r0
 800bdde:	460b      	mov	r3, r1
 800bde0:	4650      	mov	r0, sl
 800bde2:	4659      	mov	r1, fp
 800bde4:	f7f4 fa72 	bl	80002cc <__adddf3>
 800bde8:	3601      	adds	r6, #1
 800bdea:	4682      	mov	sl, r0
 800bdec:	468b      	mov	fp, r1
 800bdee:	9b00      	ldr	r3, [sp, #0]
 800bdf0:	429e      	cmp	r6, r3
 800bdf2:	dc01      	bgt.n	800bdf8 <__kernel_rem_pio2+0x4c8>
 800bdf4:	42b5      	cmp	r5, r6
 800bdf6:	dae9      	bge.n	800bdcc <__kernel_rem_pio2+0x49c>
 800bdf8:	ab48      	add	r3, sp, #288	@ 0x120
 800bdfa:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800bdfe:	e9c5 ab00 	strd	sl, fp, [r5]
 800be02:	3c01      	subs	r4, #1
 800be04:	e6ff      	b.n	800bc06 <__kernel_rem_pio2+0x2d6>
 800be06:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800be08:	2b02      	cmp	r3, #2
 800be0a:	dc0b      	bgt.n	800be24 <__kernel_rem_pio2+0x4f4>
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dc39      	bgt.n	800be84 <__kernel_rem_pio2+0x554>
 800be10:	d05d      	beq.n	800bece <__kernel_rem_pio2+0x59e>
 800be12:	9b02      	ldr	r3, [sp, #8]
 800be14:	f003 0007 	and.w	r0, r3, #7
 800be18:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800be1c:	ecbd 8b02 	vpop	{d8}
 800be20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be24:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 800be26:	2b03      	cmp	r3, #3
 800be28:	d1f3      	bne.n	800be12 <__kernel_rem_pio2+0x4e2>
 800be2a:	9b05      	ldr	r3, [sp, #20]
 800be2c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800be30:	eb0d 0403 	add.w	r4, sp, r3
 800be34:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 800be38:	4625      	mov	r5, r4
 800be3a:	46c2      	mov	sl, r8
 800be3c:	f1ba 0f00 	cmp.w	sl, #0
 800be40:	f1a5 0508 	sub.w	r5, r5, #8
 800be44:	dc6b      	bgt.n	800bf1e <__kernel_rem_pio2+0x5ee>
 800be46:	4645      	mov	r5, r8
 800be48:	2d01      	cmp	r5, #1
 800be4a:	f1a4 0408 	sub.w	r4, r4, #8
 800be4e:	f300 8087 	bgt.w	800bf60 <__kernel_rem_pio2+0x630>
 800be52:	9c05      	ldr	r4, [sp, #20]
 800be54:	ab48      	add	r3, sp, #288	@ 0x120
 800be56:	441c      	add	r4, r3
 800be58:	2000      	movs	r0, #0
 800be5a:	2100      	movs	r1, #0
 800be5c:	f1b8 0f01 	cmp.w	r8, #1
 800be60:	f300 809c 	bgt.w	800bf9c <__kernel_rem_pio2+0x66c>
 800be64:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800be68:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 800be6c:	f1b9 0f00 	cmp.w	r9, #0
 800be70:	f040 80a6 	bne.w	800bfc0 <__kernel_rem_pio2+0x690>
 800be74:	9b04      	ldr	r3, [sp, #16]
 800be76:	e9c3 7800 	strd	r7, r8, [r3]
 800be7a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800be7e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800be82:	e7c6      	b.n	800be12 <__kernel_rem_pio2+0x4e2>
 800be84:	9d05      	ldr	r5, [sp, #20]
 800be86:	ab48      	add	r3, sp, #288	@ 0x120
 800be88:	441d      	add	r5, r3
 800be8a:	4644      	mov	r4, r8
 800be8c:	2000      	movs	r0, #0
 800be8e:	2100      	movs	r1, #0
 800be90:	2c00      	cmp	r4, #0
 800be92:	da35      	bge.n	800bf00 <__kernel_rem_pio2+0x5d0>
 800be94:	f1b9 0f00 	cmp.w	r9, #0
 800be98:	d038      	beq.n	800bf0c <__kernel_rem_pio2+0x5dc>
 800be9a:	4602      	mov	r2, r0
 800be9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bea0:	9c04      	ldr	r4, [sp, #16]
 800bea2:	e9c4 2300 	strd	r2, r3, [r4]
 800bea6:	4602      	mov	r2, r0
 800bea8:	460b      	mov	r3, r1
 800beaa:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800beae:	f7f4 fa0b 	bl	80002c8 <__aeabi_dsub>
 800beb2:	ad4a      	add	r5, sp, #296	@ 0x128
 800beb4:	2401      	movs	r4, #1
 800beb6:	45a0      	cmp	r8, r4
 800beb8:	da2b      	bge.n	800bf12 <__kernel_rem_pio2+0x5e2>
 800beba:	f1b9 0f00 	cmp.w	r9, #0
 800bebe:	d002      	beq.n	800bec6 <__kernel_rem_pio2+0x596>
 800bec0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bec4:	4619      	mov	r1, r3
 800bec6:	9b04      	ldr	r3, [sp, #16]
 800bec8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800becc:	e7a1      	b.n	800be12 <__kernel_rem_pio2+0x4e2>
 800bece:	9c05      	ldr	r4, [sp, #20]
 800bed0:	ab48      	add	r3, sp, #288	@ 0x120
 800bed2:	441c      	add	r4, r3
 800bed4:	2000      	movs	r0, #0
 800bed6:	2100      	movs	r1, #0
 800bed8:	f1b8 0f00 	cmp.w	r8, #0
 800bedc:	da09      	bge.n	800bef2 <__kernel_rem_pio2+0x5c2>
 800bede:	f1b9 0f00 	cmp.w	r9, #0
 800bee2:	d002      	beq.n	800beea <__kernel_rem_pio2+0x5ba>
 800bee4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bee8:	4619      	mov	r1, r3
 800beea:	9b04      	ldr	r3, [sp, #16]
 800beec:	e9c3 0100 	strd	r0, r1, [r3]
 800bef0:	e78f      	b.n	800be12 <__kernel_rem_pio2+0x4e2>
 800bef2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bef6:	f7f4 f9e9 	bl	80002cc <__adddf3>
 800befa:	f108 38ff 	add.w	r8, r8, #4294967295
 800befe:	e7eb      	b.n	800bed8 <__kernel_rem_pio2+0x5a8>
 800bf00:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 800bf04:	f7f4 f9e2 	bl	80002cc <__adddf3>
 800bf08:	3c01      	subs	r4, #1
 800bf0a:	e7c1      	b.n	800be90 <__kernel_rem_pio2+0x560>
 800bf0c:	4602      	mov	r2, r0
 800bf0e:	460b      	mov	r3, r1
 800bf10:	e7c6      	b.n	800bea0 <__kernel_rem_pio2+0x570>
 800bf12:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800bf16:	f7f4 f9d9 	bl	80002cc <__adddf3>
 800bf1a:	3401      	adds	r4, #1
 800bf1c:	e7cb      	b.n	800beb6 <__kernel_rem_pio2+0x586>
 800bf1e:	ed95 7b00 	vldr	d7, [r5]
 800bf22:	ed8d 7b00 	vstr	d7, [sp]
 800bf26:	ed95 7b02 	vldr	d7, [r5, #8]
 800bf2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf2e:	ec53 2b17 	vmov	r2, r3, d7
 800bf32:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf36:	f7f4 f9c9 	bl	80002cc <__adddf3>
 800bf3a:	4602      	mov	r2, r0
 800bf3c:	460b      	mov	r3, r1
 800bf3e:	4606      	mov	r6, r0
 800bf40:	460f      	mov	r7, r1
 800bf42:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf46:	f7f4 f9bf 	bl	80002c8 <__aeabi_dsub>
 800bf4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bf4e:	f7f4 f9bd 	bl	80002cc <__adddf3>
 800bf52:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bf56:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800bf5a:	e9c5 6700 	strd	r6, r7, [r5]
 800bf5e:	e76d      	b.n	800be3c <__kernel_rem_pio2+0x50c>
 800bf60:	ed94 7b00 	vldr	d7, [r4]
 800bf64:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 800bf68:	ec51 0b17 	vmov	r0, r1, d7
 800bf6c:	4652      	mov	r2, sl
 800bf6e:	465b      	mov	r3, fp
 800bf70:	ed8d 7b00 	vstr	d7, [sp]
 800bf74:	f7f4 f9aa 	bl	80002cc <__adddf3>
 800bf78:	4602      	mov	r2, r0
 800bf7a:	460b      	mov	r3, r1
 800bf7c:	4606      	mov	r6, r0
 800bf7e:	460f      	mov	r7, r1
 800bf80:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bf84:	f7f4 f9a0 	bl	80002c8 <__aeabi_dsub>
 800bf88:	4652      	mov	r2, sl
 800bf8a:	465b      	mov	r3, fp
 800bf8c:	f7f4 f99e 	bl	80002cc <__adddf3>
 800bf90:	3d01      	subs	r5, #1
 800bf92:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800bf96:	e9c4 6700 	strd	r6, r7, [r4]
 800bf9a:	e755      	b.n	800be48 <__kernel_rem_pio2+0x518>
 800bf9c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bfa0:	f7f4 f994 	bl	80002cc <__adddf3>
 800bfa4:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfa8:	e758      	b.n	800be5c <__kernel_rem_pio2+0x52c>
 800bfaa:	bf00      	nop
 800bfac:	f3af 8000 	nop.w
	...
 800bfb8:	41700000 	.word	0x41700000
 800bfbc:	3e700000 	.word	0x3e700000
 800bfc0:	9b04      	ldr	r3, [sp, #16]
 800bfc2:	9a04      	ldr	r2, [sp, #16]
 800bfc4:	601f      	str	r7, [r3, #0]
 800bfc6:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800bfca:	605c      	str	r4, [r3, #4]
 800bfcc:	609d      	str	r5, [r3, #8]
 800bfce:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bfd2:	60d3      	str	r3, [r2, #12]
 800bfd4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bfd8:	6110      	str	r0, [r2, #16]
 800bfda:	6153      	str	r3, [r2, #20]
 800bfdc:	e719      	b.n	800be12 <__kernel_rem_pio2+0x4e2>
 800bfde:	bf00      	nop

0800bfe0 <scalbn>:
 800bfe0:	b570      	push	{r4, r5, r6, lr}
 800bfe2:	ec55 4b10 	vmov	r4, r5, d0
 800bfe6:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800bfea:	4606      	mov	r6, r0
 800bfec:	462b      	mov	r3, r5
 800bfee:	b991      	cbnz	r1, 800c016 <scalbn+0x36>
 800bff0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800bff4:	4323      	orrs	r3, r4
 800bff6:	d03d      	beq.n	800c074 <scalbn+0x94>
 800bff8:	4b35      	ldr	r3, [pc, #212]	@ (800c0d0 <scalbn+0xf0>)
 800bffa:	4620      	mov	r0, r4
 800bffc:	4629      	mov	r1, r5
 800bffe:	2200      	movs	r2, #0
 800c000:	f7f4 fb1a 	bl	8000638 <__aeabi_dmul>
 800c004:	4b33      	ldr	r3, [pc, #204]	@ (800c0d4 <scalbn+0xf4>)
 800c006:	429e      	cmp	r6, r3
 800c008:	4604      	mov	r4, r0
 800c00a:	460d      	mov	r5, r1
 800c00c:	da0f      	bge.n	800c02e <scalbn+0x4e>
 800c00e:	a328      	add	r3, pc, #160	@ (adr r3, 800c0b0 <scalbn+0xd0>)
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	e01e      	b.n	800c054 <scalbn+0x74>
 800c016:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c01a:	4291      	cmp	r1, r2
 800c01c:	d10b      	bne.n	800c036 <scalbn+0x56>
 800c01e:	4622      	mov	r2, r4
 800c020:	4620      	mov	r0, r4
 800c022:	4629      	mov	r1, r5
 800c024:	f7f4 f952 	bl	80002cc <__adddf3>
 800c028:	4604      	mov	r4, r0
 800c02a:	460d      	mov	r5, r1
 800c02c:	e022      	b.n	800c074 <scalbn+0x94>
 800c02e:	460b      	mov	r3, r1
 800c030:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c034:	3936      	subs	r1, #54	@ 0x36
 800c036:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c03a:	4296      	cmp	r6, r2
 800c03c:	dd0d      	ble.n	800c05a <scalbn+0x7a>
 800c03e:	2d00      	cmp	r5, #0
 800c040:	a11d      	add	r1, pc, #116	@ (adr r1, 800c0b8 <scalbn+0xd8>)
 800c042:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c046:	da02      	bge.n	800c04e <scalbn+0x6e>
 800c048:	a11d      	add	r1, pc, #116	@ (adr r1, 800c0c0 <scalbn+0xe0>)
 800c04a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c04e:	a31a      	add	r3, pc, #104	@ (adr r3, 800c0b8 <scalbn+0xd8>)
 800c050:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c054:	f7f4 faf0 	bl	8000638 <__aeabi_dmul>
 800c058:	e7e6      	b.n	800c028 <scalbn+0x48>
 800c05a:	1872      	adds	r2, r6, r1
 800c05c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c060:	428a      	cmp	r2, r1
 800c062:	dcec      	bgt.n	800c03e <scalbn+0x5e>
 800c064:	2a00      	cmp	r2, #0
 800c066:	dd08      	ble.n	800c07a <scalbn+0x9a>
 800c068:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c06c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c070:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c074:	ec45 4b10 	vmov	d0, r4, r5
 800c078:	bd70      	pop	{r4, r5, r6, pc}
 800c07a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c07e:	da08      	bge.n	800c092 <scalbn+0xb2>
 800c080:	2d00      	cmp	r5, #0
 800c082:	a10b      	add	r1, pc, #44	@ (adr r1, 800c0b0 <scalbn+0xd0>)
 800c084:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c088:	dac1      	bge.n	800c00e <scalbn+0x2e>
 800c08a:	a10f      	add	r1, pc, #60	@ (adr r1, 800c0c8 <scalbn+0xe8>)
 800c08c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c090:	e7bd      	b.n	800c00e <scalbn+0x2e>
 800c092:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c096:	3236      	adds	r2, #54	@ 0x36
 800c098:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c09c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	4b0d      	ldr	r3, [pc, #52]	@ (800c0d8 <scalbn+0xf8>)
 800c0a4:	4629      	mov	r1, r5
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	e7d4      	b.n	800c054 <scalbn+0x74>
 800c0aa:	bf00      	nop
 800c0ac:	f3af 8000 	nop.w
 800c0b0:	c2f8f359 	.word	0xc2f8f359
 800c0b4:	01a56e1f 	.word	0x01a56e1f
 800c0b8:	8800759c 	.word	0x8800759c
 800c0bc:	7e37e43c 	.word	0x7e37e43c
 800c0c0:	8800759c 	.word	0x8800759c
 800c0c4:	fe37e43c 	.word	0xfe37e43c
 800c0c8:	c2f8f359 	.word	0xc2f8f359
 800c0cc:	81a56e1f 	.word	0x81a56e1f
 800c0d0:	43500000 	.word	0x43500000
 800c0d4:	ffff3cb0 	.word	0xffff3cb0
 800c0d8:	3c900000 	.word	0x3c900000
 800c0dc:	00000000 	.word	0x00000000

0800c0e0 <floor>:
 800c0e0:	ec51 0b10 	vmov	r0, r1, d0
 800c0e4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800c0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ec:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 800c0f0:	2e13      	cmp	r6, #19
 800c0f2:	460c      	mov	r4, r1
 800c0f4:	4605      	mov	r5, r0
 800c0f6:	4680      	mov	r8, r0
 800c0f8:	dc34      	bgt.n	800c164 <floor+0x84>
 800c0fa:	2e00      	cmp	r6, #0
 800c0fc:	da17      	bge.n	800c12e <floor+0x4e>
 800c0fe:	a332      	add	r3, pc, #200	@ (adr r3, 800c1c8 <floor+0xe8>)
 800c100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c104:	f7f4 f8e2 	bl	80002cc <__adddf3>
 800c108:	2200      	movs	r2, #0
 800c10a:	2300      	movs	r3, #0
 800c10c:	f7f4 fd24 	bl	8000b58 <__aeabi_dcmpgt>
 800c110:	b150      	cbz	r0, 800c128 <floor+0x48>
 800c112:	2c00      	cmp	r4, #0
 800c114:	da55      	bge.n	800c1c2 <floor+0xe2>
 800c116:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800c11a:	432c      	orrs	r4, r5
 800c11c:	2500      	movs	r5, #0
 800c11e:	42ac      	cmp	r4, r5
 800c120:	4c2b      	ldr	r4, [pc, #172]	@ (800c1d0 <floor+0xf0>)
 800c122:	bf08      	it	eq
 800c124:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 800c128:	4621      	mov	r1, r4
 800c12a:	4628      	mov	r0, r5
 800c12c:	e023      	b.n	800c176 <floor+0x96>
 800c12e:	4f29      	ldr	r7, [pc, #164]	@ (800c1d4 <floor+0xf4>)
 800c130:	4137      	asrs	r7, r6
 800c132:	ea01 0307 	and.w	r3, r1, r7
 800c136:	4303      	orrs	r3, r0
 800c138:	d01d      	beq.n	800c176 <floor+0x96>
 800c13a:	a323      	add	r3, pc, #140	@ (adr r3, 800c1c8 <floor+0xe8>)
 800c13c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c140:	f7f4 f8c4 	bl	80002cc <__adddf3>
 800c144:	2200      	movs	r2, #0
 800c146:	2300      	movs	r3, #0
 800c148:	f7f4 fd06 	bl	8000b58 <__aeabi_dcmpgt>
 800c14c:	2800      	cmp	r0, #0
 800c14e:	d0eb      	beq.n	800c128 <floor+0x48>
 800c150:	2c00      	cmp	r4, #0
 800c152:	bfbe      	ittt	lt
 800c154:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 800c158:	4133      	asrlt	r3, r6
 800c15a:	18e4      	addlt	r4, r4, r3
 800c15c:	ea24 0407 	bic.w	r4, r4, r7
 800c160:	2500      	movs	r5, #0
 800c162:	e7e1      	b.n	800c128 <floor+0x48>
 800c164:	2e33      	cmp	r6, #51	@ 0x33
 800c166:	dd0a      	ble.n	800c17e <floor+0x9e>
 800c168:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 800c16c:	d103      	bne.n	800c176 <floor+0x96>
 800c16e:	4602      	mov	r2, r0
 800c170:	460b      	mov	r3, r1
 800c172:	f7f4 f8ab 	bl	80002cc <__adddf3>
 800c176:	ec41 0b10 	vmov	d0, r0, r1
 800c17a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c17e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800c182:	f04f 37ff 	mov.w	r7, #4294967295
 800c186:	40df      	lsrs	r7, r3
 800c188:	4207      	tst	r7, r0
 800c18a:	d0f4      	beq.n	800c176 <floor+0x96>
 800c18c:	a30e      	add	r3, pc, #56	@ (adr r3, 800c1c8 <floor+0xe8>)
 800c18e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c192:	f7f4 f89b 	bl	80002cc <__adddf3>
 800c196:	2200      	movs	r2, #0
 800c198:	2300      	movs	r3, #0
 800c19a:	f7f4 fcdd 	bl	8000b58 <__aeabi_dcmpgt>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d0c2      	beq.n	800c128 <floor+0x48>
 800c1a2:	2c00      	cmp	r4, #0
 800c1a4:	da0a      	bge.n	800c1bc <floor+0xdc>
 800c1a6:	2e14      	cmp	r6, #20
 800c1a8:	d101      	bne.n	800c1ae <floor+0xce>
 800c1aa:	3401      	adds	r4, #1
 800c1ac:	e006      	b.n	800c1bc <floor+0xdc>
 800c1ae:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	40b3      	lsls	r3, r6
 800c1b6:	441d      	add	r5, r3
 800c1b8:	4545      	cmp	r5, r8
 800c1ba:	d3f6      	bcc.n	800c1aa <floor+0xca>
 800c1bc:	ea25 0507 	bic.w	r5, r5, r7
 800c1c0:	e7b2      	b.n	800c128 <floor+0x48>
 800c1c2:	2500      	movs	r5, #0
 800c1c4:	462c      	mov	r4, r5
 800c1c6:	e7af      	b.n	800c128 <floor+0x48>
 800c1c8:	8800759c 	.word	0x8800759c
 800c1cc:	7e37e43c 	.word	0x7e37e43c
 800c1d0:	bff00000 	.word	0xbff00000
 800c1d4:	000fffff 	.word	0x000fffff

0800c1d8 <_init>:
 800c1d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1da:	bf00      	nop
 800c1dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1de:	bc08      	pop	{r3}
 800c1e0:	469e      	mov	lr, r3
 800c1e2:	4770      	bx	lr

0800c1e4 <_fini>:
 800c1e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1e6:	bf00      	nop
 800c1e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1ea:	bc08      	pop	{r3}
 800c1ec:	469e      	mov	lr, r3
 800c1ee:	4770      	bx	lr
